
EVTeck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bde4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000042f8  0801bf74  0801bf74  0002bf74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802026c  0802026c  000400a4  2**0
                  CONTENTS
  4 .ARM          00000008  0802026c  0802026c  0003026c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020274  08020274  000400a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020274  08020274  00030274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020278  08020278  00030278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0802027c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000400a4  2**0
                  CONTENTS
 10 .bss          00019160  200000a4  200000a4  000400a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019204  20019204  000400a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00056b8e  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009efc  00000000  00000000  00096c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002878  00000000  00000000  000a0b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000026c8  00000000  00000000  000a33d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036a2e  00000000  00000000  000a5aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00040545  00000000  00000000  000dc4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f344e  00000000  00000000  0011ca13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0020fe61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000afb0  00000000  00000000  0020feb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bf5c 	.word	0x0801bf5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	0801bf5c 	.word	0x0801bf5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000596:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	200000c0 	.word	0x200000c0
 80005a8:	20000174 	.word	0x20000174

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b5b0      	push	{r4, r5, r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fec3 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f823 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f9ab 	bl	8000914 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005be:	f000 f889 	bl	80006d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005c2:	f000 f8bd 	bl	8000740 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c6:	f000 f90b 	bl	80007e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ca:	f000 f955 	bl	8000878 <MX_TIM3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <main+0x4c>)
 80005d0:	1d3c      	adds	r4, r7, #4
 80005d2:	461d      	mov	r5, r3
 80005d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 fb33 	bl	8004c50 <osThreadCreate>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a03      	ldr	r2, [pc, #12]	; (80005fc <main+0x50>)
 80005ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f0:	f004 fb17 	bl	8004c22 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x48>
 80005f6:	bf00      	nop
 80005f8:	0801bf80 	.word	0x0801bf80
 80005fc:	20010b4c 	.word	0x20010b4c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f01a fb0a 	bl	801ac28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	; (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000670:	2319      	movs	r3, #25
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000674:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067e:	2304      	movs	r3, #4
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4618      	mov	r0, r3
 8000688:	f002 fc2a 	bl	8002ee0 <HAL_RCC_OscConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000692:	f000 fa51 	bl	8000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000696:	230f      	movs	r3, #15
 8000698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069a:	2302      	movs	r3, #2
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2105      	movs	r1, #5
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fe8b 	bl	80033d0 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c0:	f000 fa3a 	bl	8000b38 <Error_Handler>
  }
}
 80006c4:	bf00      	nop
 80006c6:	3750      	adds	r7, #80	; 0x50
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <MX_SPI1_Init+0x64>)
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <MX_SPI1_Init+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_SPI1_Init+0x64>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_SPI1_Init+0x64>)
 8000700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_SPI1_Init+0x64>)
 8000720:	220a      	movs	r2, #10
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_SPI1_Init+0x64>)
 8000726:	f003 f841 	bl	80037ac <HAL_SPI_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 fa02 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20010be0 	.word	0x20010be0
 800073c:	40013000 	.word	0x40013000

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_TIM1_Init+0x98>)
 800075e:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <MX_TIM1_Init+0x9c>)
 8000760:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_TIM1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_TIM1_Init+0x98>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_TIM1_Init+0x98>)
 8000770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000774:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_TIM1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_TIM1_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_TIM1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000788:	4813      	ldr	r0, [pc, #76]	; (80007d8 <MX_TIM1_Init+0x98>)
 800078a:	f003 f898 	bl	80038be <HAL_TIM_Base_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000794:	f000 f9d0 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_TIM1_Init+0x98>)
 80007a6:	f003 fa51 	bl	8003c4c <HAL_TIM_ConfigClockSource>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007b0:	f000 f9c2 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_TIM1_Init+0x98>)
 80007c2:	f003 fc6d 	bl	80040a0 <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007cc:	f000 f9b4 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20010b98 	.word	0x20010b98
 80007dc:	40010000 	.word	0x40010000

080007e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_TIM2_Init+0x94>)
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000802:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_TIM2_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_TIM2_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_TIM2_Init+0x94>)
 8000812:	f04f 32ff 	mov.w	r2, #4294967295
 8000816:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_TIM2_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_TIM2_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <MX_TIM2_Init+0x94>)
 8000826:	f003 f84a 	bl	80038be <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000830:	f000 f982 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_TIM2_Init+0x94>)
 8000842:	f003 fa03 	bl	8003c4c <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800084c:	f000 f974 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_TIM2_Init+0x94>)
 800085e:	f003 fc1f 	bl	80040a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000868:	f000 f966 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20010c38 	.word	0x20010c38

08000878 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088c:	463b      	mov	r3, r7
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_TIM3_Init+0x94>)
 8000896:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <MX_TIM3_Init+0x98>)
 8000898:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_TIM3_Init+0x94>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_TIM3_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_TIM3_Init+0x94>)
 80008a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_TIM3_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_TIM3_Init+0x94>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ba:	4814      	ldr	r0, [pc, #80]	; (800090c <MX_TIM3_Init+0x94>)
 80008bc:	f002 ffff 	bl	80038be <HAL_TIM_Base_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f937 	bl	8000b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_TIM3_Init+0x94>)
 80008d8:	f003 f9b8 	bl	8003c4c <HAL_TIM_ConfigClockSource>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 f929 	bl	8000b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	4806      	ldr	r0, [pc, #24]	; (800090c <MX_TIM3_Init+0x94>)
 80008f4:	f003 fbd4 	bl	80040a0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008fe:	f000 f91b 	bl	8000b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20010b50 	.word	0x20010b50
 8000910:	40000400 	.word	0x40000400

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	; 0x38
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
 800092e:	4b6e      	ldr	r3, [pc, #440]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a6d      	ldr	r2, [pc, #436]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b6b      	ldr	r3, [pc, #428]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	623b      	str	r3, [r7, #32]
 8000944:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
 800094a:	4b67      	ldr	r3, [pc, #412]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a66      	ldr	r2, [pc, #408]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b64      	ldr	r3, [pc, #400]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	61fb      	str	r3, [r7, #28]
 8000960:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a5f      	ldr	r2, [pc, #380]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b5d      	ldr	r3, [pc, #372]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	61bb      	str	r3, [r7, #24]
 800097c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a58      	ldr	r2, [pc, #352]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b56      	ldr	r3, [pc, #344]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b52      	ldr	r3, [pc, #328]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a51      	ldr	r2, [pc, #324]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009a4:	f043 0320 	orr.w	r3, r3, #32
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b4f      	ldr	r3, [pc, #316]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0320 	and.w	r3, r3, #32
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b4b      	ldr	r3, [pc, #300]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a4a      	ldr	r2, [pc, #296]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b48      	ldr	r3, [pc, #288]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a43      	ldr	r2, [pc, #268]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b41      	ldr	r3, [pc, #260]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a3c      	ldr	r2, [pc, #240]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <MX_GPIO_Init+0x1d4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8000a10:	4836      	ldr	r0, [pc, #216]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000a12:	f002 fa4b 	bl	8002eac <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a1c:	4834      	ldr	r0, [pc, #208]	; (8000af0 <MX_GPIO_Init+0x1dc>)
 8000a1e:	f002 fa45 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2133      	movs	r1, #51	; 0x33
 8000a26:	4833      	ldr	r0, [pc, #204]	; (8000af4 <MX_GPIO_Init+0x1e0>)
 8000a28:	f002 fa40 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000a32:	4831      	ldr	r0, [pc, #196]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000a34:	f002 fa3a 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE7 PE8
                           PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 8000a38:	f44f 7363 	mov.w	r3, #908	; 0x38c
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4826      	ldr	r0, [pc, #152]	; (8000aec <MX_GPIO_Init+0x1d8>)
 8000a52:	f002 f88f 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4820      	ldr	r0, [pc, #128]	; (8000af0 <MX_GPIO_Init+0x1dc>)
 8000a70:	f002 f880 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG4 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a74:	2333      	movs	r3, #51	; 0x33
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481a      	ldr	r0, [pc, #104]	; (8000af4 <MX_GPIO_Init+0x1e0>)
 8000a8c:	f002 f872 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4814      	ldr	r0, [pc, #80]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000aa6:	f002 f865 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aaa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_GPIO_Init+0x1e4>)
 8000ac4:	f002 f856 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ac8:	230c      	movs	r3, #12
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <MX_GPIO_Init+0x1e0>)
 8000adc:	f002 f84a 	bl	8002b74 <HAL_GPIO_Init>

}
 8000ae0:	bf00      	nop
 8000ae2:	3738      	adds	r7, #56	; 0x38
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40021400 	.word	0x40021400
 8000af4:	40021800 	.word	0x40021800
 8000af8:	40020c00 	.word	0x40020c00

08000afc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b04:	f003 fb5c 	bl	80041c0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  app_init();
 8000b08:	f018 fb5c 	bl	80191c4 <app_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f004 f8eb 	bl	8004ce8 <osDelay>
 8000b12:	e7fb      	b.n	8000b0c <StartDefaultTask+0x10>

08000b14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d101      	bne.n	8000b2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b26:	f000 fc2b 	bl	8001380 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40001000 	.word	0x40001000

08000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x8>
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_MspInit+0x54>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <HAL_MspInit+0x54>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b58:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x54>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_MspInit+0x54>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_MspInit+0x54>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6413      	str	r3, [r2, #64]	; 0x40
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_MspInit+0x54>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	210f      	movs	r1, #15
 8000b86:	f06f 0001 	mvn.w	r0, #1
 8000b8a:	f000 fcf5 	bl	8001578 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <HAL_SPI_MspInit+0x84>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d12b      	bne.n	8000c16 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_SPI_MspInit+0x88>)
 8000bc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <HAL_SPI_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <HAL_SPI_MspInit+0x88>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_SPI_MspInit+0x88>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bf6:	2338      	movs	r3, #56	; 0x38
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c06:	2305      	movs	r3, #5
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <HAL_SPI_MspInit+0x8c>)
 8000c12:	f001 ffaf 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c16:	bf00      	nop
 8000c18:	3728      	adds	r7, #40	; 0x28
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40013000 	.word	0x40013000
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400

08000c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a36      	ldr	r2, [pc, #216]	; (8000d14 <HAL_TIM_Base_MspInit+0xe8>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12e      	bne.n	8000c9c <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	4b35      	ldr	r3, [pc, #212]	; (8000d18 <HAL_TIM_Base_MspInit+0xec>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a34      	ldr	r2, [pc, #208]	; (8000d18 <HAL_TIM_Base_MspInit+0xec>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <HAL_TIM_Base_MspInit+0xec>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	2018      	movs	r0, #24
 8000c60:	f000 fc8a 	bl	8001578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000c64:	2018      	movs	r0, #24
 8000c66:	f000 fca3 	bl	80015b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	2019      	movs	r0, #25
 8000c70:	f000 fc82 	bl	8001578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c74:	2019      	movs	r0, #25
 8000c76:	f000 fc9b 	bl	80015b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	201a      	movs	r0, #26
 8000c80:	f000 fc7a 	bl	8001578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c84:	201a      	movs	r0, #26
 8000c86:	f000 fc93 	bl	80015b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	201b      	movs	r0, #27
 8000c90:	f000 fc72 	bl	8001578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c94:	201b      	movs	r0, #27
 8000c96:	f000 fc8b 	bl	80015b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c9a:	e036      	b.n	8000d0a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca4:	d116      	bne.n	8000cd4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <HAL_TIM_Base_MspInit+0xec>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a1a      	ldr	r2, [pc, #104]	; (8000d18 <HAL_TIM_Base_MspInit+0xec>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_TIM_Base_MspInit+0xec>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	201c      	movs	r0, #28
 8000cc8:	f000 fc56 	bl	8001578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ccc:	201c      	movs	r0, #28
 8000cce:	f000 fc6f 	bl	80015b0 <HAL_NVIC_EnableIRQ>
}
 8000cd2:	e01a      	b.n	8000d0a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_TIM_Base_MspInit+0xf0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d115      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_TIM_Base_MspInit+0xec>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <HAL_TIM_Base_MspInit+0xec>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_TIM_Base_MspInit+0xec>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2105      	movs	r1, #5
 8000cfe:	201d      	movs	r0, #29
 8000d00:	f000 fc3a 	bl	8001578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d04:	201d      	movs	r0, #29
 8000d06:	f000 fc53 	bl	80015b0 <HAL_NVIC_EnableIRQ>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40010000 	.word	0x40010000
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40000400 	.word	0x40000400

08000d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	; 0x38
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <HAL_InitTick+0xe4>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <HAL_InitTick+0xe4>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <HAL_InitTick+0xe4>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d4c:	f107 0210 	add.w	r2, r7, #16
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fcf6 	bl	8003748 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d103      	bne.n	8000d6e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d66:	f002 fcdb 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8000d6a:	6378      	str	r0, [r7, #52]	; 0x34
 8000d6c:	e004      	b.n	8000d78 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d6e:	f002 fcd7 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8000d72:	4603      	mov	r3, r0
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d7a:	4a23      	ldr	r2, [pc, #140]	; (8000e08 <HAL_InitTick+0xe8>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	0c9b      	lsrs	r3, r3, #18
 8000d82:	3b01      	subs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d86:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_InitTick+0xec>)
 8000d88:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <HAL_InitTick+0xf0>)
 8000d8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <HAL_InitTick+0xec>)
 8000d8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d92:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d94:	4a1d      	ldr	r2, [pc, #116]	; (8000e0c <HAL_InitTick+0xec>)
 8000d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d98:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <HAL_InitTick+0xec>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_InitTick+0xec>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_InitTick+0xec>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dac:	4817      	ldr	r0, [pc, #92]	; (8000e0c <HAL_InitTick+0xec>)
 8000dae:	f002 fd86 	bl	80038be <HAL_TIM_Base_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000db8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d11b      	bne.n	8000df8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dc0:	4812      	ldr	r0, [pc, #72]	; (8000e0c <HAL_InitTick+0xec>)
 8000dc2:	f002 fdcb 	bl	800395c <HAL_TIM_Base_Start_IT>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d111      	bne.n	8000df8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dd4:	2036      	movs	r0, #54	; 0x36
 8000dd6:	f000 fbeb 	bl	80015b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d808      	bhi.n	8000df2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	2036      	movs	r0, #54	; 0x36
 8000de6:	f000 fbc7 	bl	8001578 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_InitTick+0xf4>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e002      	b.n	8000df8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000df8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3738      	adds	r7, #56	; 0x38
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	431bde83 	.word	0x431bde83
 8000e0c:	20010c80 	.word	0x20010c80
 8000e10:	40001000 	.word	0x40001000
 8000e14:	20000004 	.word	0x20000004

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e4a:	f002 fdf7 	bl	8003a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20010b98 	.word	0x20010b98

08000e58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e5e:	f002 fded 	bl	8003a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20010b98 	.word	0x20010b98

08000e6c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e72:	f002 fde3 	bl	8003a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20010b98 	.word	0x20010b98

08000e80 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <TIM1_CC_IRQHandler+0x10>)
 8000e86:	f002 fdd9 	bl	8003a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20010b98 	.word	0x20010b98

08000e94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM2_IRQHandler+0x10>)
 8000e9a:	f002 fdcf 	bl	8003a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20010c38 	.word	0x20010c38

08000ea8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM3_IRQHandler+0x10>)
 8000eae:	f002 fdc5 	bl	8003a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20010b50 	.word	0x20010b50

08000ebc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <TIM6_DAC_IRQHandler+0x10>)
 8000ec2:	f002 fdbb 	bl	8003a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20010c80 	.word	0x20010c80

08000ed0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <ETH_IRQHandler+0x10>)
 8000ed6:	f000 ff65 	bl	8001da4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200157f4 	.word	0x200157f4

08000ee4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	return 1;
 8000ee8:	2301      	movs	r3, #1
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_kill>:

int _kill(int pid, int sig)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <_kill+0x20>)
 8000f00:	2216      	movs	r2, #22
 8000f02:	601a      	str	r2, [r3, #0]
	return -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20019200 	.word	0x20019200

08000f18 <_exit>:

void _exit (int status)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffe5 	bl	8000ef4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f2a:	e7fe      	b.n	8000f2a <_exit+0x12>

08000f2c <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	return -1;
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f54:	605a      	str	r2, [r3, #4]
	return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_isatty>:

int _isatty(int file)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	return 1;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
	return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d205      	bcs.n	8000fd0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <_sbrk+0x6c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20020000 	.word	0x20020000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	20000574 	.word	0x20000574
 8000ffc:	20019208 	.word	0x20019208
 8001000:	20019200 	.word	0x20019200

08001004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001052:	f7ff ffd7 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f019 fd79 	bl	801ab4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff faa7 	bl	80005ac <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800106c:	0802027c 	.word	0x0802027c
  ldr r2, =_sbss
 8001070:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001074:	20019204 	.word	0x20019204

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>

0800107a <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <DP83848_RegisterBusIO+0x28>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <DP83848_RegisterBusIO+0x28>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <DP83848_RegisterBusIO+0x28>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d102      	bne.n	80010a8 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e014      	b.n	80010d2 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d17c      	bne.n	80011f8 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2220      	movs	r2, #32
 8001110:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e01c      	b.n	8001152 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f107 0208 	add.w	r2, r7, #8
 8001120:	2119      	movs	r1, #25
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	4798      	blx	r3
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	da03      	bge.n	8001134 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 800112c:	f06f 0304 	mvn.w	r3, #4
 8001130:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001132:	e00b      	b.n	800114c <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	d105      	bne.n	800114c <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
         break;
 800114a:	e005      	b.n	8001158 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b1f      	cmp	r3, #31
 8001156:	d9df      	bls.n	8001118 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b1f      	cmp	r3, #31
 800115e:	d902      	bls.n	8001166 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001160:	f06f 0302 	mvn.w	r3, #2
 8001164:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d145      	bne.n	80011f8 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6810      	ldr	r0, [r2, #0]
 8001174:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001178:	2100      	movs	r1, #0
 800117a:	4798      	blx	r3
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	db37      	blt.n	80011f2 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6810      	ldr	r0, [r2, #0]
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	2100      	movs	r1, #0
 8001190:	4798      	blx	r3
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	db28      	blt.n	80011ea <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4798      	blx	r3
 800119e:	4603      	mov	r3, r0
 80011a0:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80011a2:	e01c      	b.n	80011de <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4798      	blx	r3
 80011aa:	4603      	mov	r3, r0
 80011ac:	461a      	mov	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011b6:	d80e      	bhi.n	80011d6 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6810      	ldr	r0, [r2, #0]
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	2100      	movs	r1, #0
 80011c6:	4798      	blx	r3
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	da07      	bge.n	80011de <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 80011ce:	f06f 0304 	mvn.w	r3, #4
 80011d2:	613b      	str	r3, [r7, #16]
                 break;
 80011d4:	e010      	b.n	80011f8 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 80011d6:	f06f 0301 	mvn.w	r3, #1
 80011da:	613b      	str	r3, [r7, #16]
               break;
 80011dc:	e00c      	b.n	80011f8 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1dd      	bne.n	80011a4 <DP83848_Init+0xc6>
 80011e8:	e006      	b.n	80011f8 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80011ea:	f06f 0304 	mvn.w	r3, #4
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	e002      	b.n	80011f8 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80011f2:	f06f 0303 	mvn.w	r3, #3
 80011f6:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d112      	bne.n	8001224 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4798      	blx	r3
 8001204:	4603      	mov	r3, r0
 8001206:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8001208:	bf00      	nop
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4798      	blx	r3
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800121c:	d9f5      	bls.n	800120a <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001224:	693b      	ldr	r3, [r7, #16]
 }
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	6810      	ldr	r0, [r2, #0]
 8001242:	f107 020c 	add.w	r2, r7, #12
 8001246:	2101      	movs	r1, #1
 8001248:	4798      	blx	r3
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	da02      	bge.n	8001256 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001250:	f06f 0304 	mvn.w	r3, #4
 8001254:	e06e      	b.n	8001334 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	6810      	ldr	r0, [r2, #0]
 800125e:	f107 020c 	add.w	r2, r7, #12
 8001262:	2101      	movs	r1, #1
 8001264:	4798      	blx	r3
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	da02      	bge.n	8001272 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 800126c:	f06f 0304 	mvn.w	r3, #4
 8001270:	e060      	b.n	8001334 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 800127c:	2301      	movs	r3, #1
 800127e:	e059      	b.n	8001334 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6810      	ldr	r0, [r2, #0]
 8001288:	f107 020c 	add.w	r2, r7, #12
 800128c:	2100      	movs	r1, #0
 800128e:	4798      	blx	r3
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	da02      	bge.n	800129c <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001296:	f06f 0304 	mvn.w	r3, #4
 800129a:	e04b      	b.n	8001334 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d11b      	bne.n	80012de <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <DP83848_GetLinkState+0x90>
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80012ba:	2302      	movs	r3, #2
 80012bc:	e03a      	b.n	8001334 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e033      	b.n	8001334 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80012d6:	2304      	movs	r3, #4
 80012d8:	e02c      	b.n	8001334 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80012da:	2305      	movs	r3, #5
 80012dc:	e02a      	b.n	8001334 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6810      	ldr	r0, [r2, #0]
 80012e6:	f107 020c 	add.w	r2, r7, #12
 80012ea:	2110      	movs	r1, #16
 80012ec:	4798      	blx	r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da02      	bge.n	80012fa <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80012f4:	f06f 0304 	mvn.w	r3, #4
 80012f8:	e01c      	b.n	8001334 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001304:	2306      	movs	r3, #6
 8001306:	e015      	b.n	8001334 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0306 	and.w	r3, r3, #6
 800130e:	2b04      	cmp	r3, #4
 8001310:	d101      	bne.n	8001316 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001312:	2302      	movs	r3, #2
 8001314:	e00e      	b.n	8001334 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f003 0306 	and.w	r3, r3, #6
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001320:	2303      	movs	r3, #3
 8001322:	e007      	b.n	8001334 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 0306 	and.w	r3, r3, #6
 800132a:	2b06      	cmp	r3, #6
 800132c:	d101      	bne.n	8001332 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800132e:	2304      	movs	r3, #4
 8001330:	e000      	b.n	8001334 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001332:	2305      	movs	r3, #5
    }
  }
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <HAL_Init+0x40>)
 8001346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <HAL_Init+0x40>)
 8001352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_Init+0x40>)
 800135e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f8fc 	bl	8001562 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136a:	200f      	movs	r0, #15
 800136c:	f7ff fcd8 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001370:	f7ff fbe8 	bl	8000b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023c00 	.word	0x40023c00

08001380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x20>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x24>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4413      	add	r3, r2
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <HAL_IncTick+0x24>)
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20010cc8 	.word	0x20010cc8

080013a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <HAL_GetTick+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	20010cc8 	.word	0x20010cc8

080013c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c8:	f7ff ffee 	bl	80013a8 <HAL_GetTick>
 80013cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d005      	beq.n	80013e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013da:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <HAL_Delay+0x44>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013e6:	bf00      	nop
 80013e8:	f7ff ffde 	bl	80013a8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d8f7      	bhi.n	80013e8 <HAL_Delay+0x28>
  {
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4907      	ldr	r1, [pc, #28]	; (80014a4 <__NVIC_EnableIRQ+0x38>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	; (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	; (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	; 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ff4c 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158a:	f7ff ff61 	bl	8001450 <__NVIC_GetPriorityGrouping>
 800158e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	6978      	ldr	r0, [r7, #20]
 8001596:	f7ff ffb1 	bl	80014fc <NVIC_EncodePriority>
 800159a:	4602      	mov	r2, r0
 800159c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff80 	bl	80014a8 <__NVIC_SetPriority>
}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff54 	bl	800146c <__NVIC_EnableIRQ>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e06c      	b.n	80016b8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d106      	bne.n	80015f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2223      	movs	r2, #35	; 0x23
 80015ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f003 f8e7 	bl	80047c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b31      	ldr	r3, [pc, #196]	; (80016c0 <HAL_ETH_Init+0xf4>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	4a30      	ldr	r2, [pc, #192]	; (80016c0 <HAL_ETH_Init+0xf4>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001604:	6453      	str	r3, [r2, #68]	; 0x44
 8001606:	4b2e      	ldr	r3, [pc, #184]	; (80016c0 <HAL_ETH_Init+0xf4>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001612:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <HAL_ETH_Init+0xf8>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a2b      	ldr	r2, [pc, #172]	; (80016c4 <HAL_ETH_Init+0xf8>)
 8001618:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800161c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800161e:	4b29      	ldr	r3, [pc, #164]	; (80016c4 <HAL_ETH_Init+0xf8>)
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	4927      	ldr	r1, [pc, #156]	; (80016c4 <HAL_ETH_Init+0xf8>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <HAL_ETH_Init+0xf8>)
 800162e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 0201 	orr.w	r2, r2, #1
 8001642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001648:	f7ff feae 	bl	80013a8 <HAL_GetTick>
 800164c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800164e:	e011      	b.n	8001674 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001650:	f7ff feaa 	bl	80013a8 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800165e:	d909      	bls.n	8001674 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2204      	movs	r2, #4
 8001664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	22e0      	movs	r2, #224	; 0xe0
 800166c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e021      	b.n	80016b8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e4      	bne.n	8001650 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 ffcc 	bl	8002624 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f001 f873 	bl	8002778 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f001 f8ca 	bl	800282c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	461a      	mov	r2, r3
 800169e:	2100      	movs	r1, #0
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f001 f831 	bl	8002708 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2210      	movs	r2, #16
 80016b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40013800 	.word	0x40013800

080016c8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d154      	bne.n	8001784 <HAL_ETH_Start+0xbc>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2223      	movs	r2, #35	; 0x23
 80016de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2204      	movs	r2, #4
 80016e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fa8b 	bl	8001c04 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0208 	orr.w	r2, r2, #8
 80016fc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fe5a 	bl	80013c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0204 	orr.w	r2, r2, #4
 8001722:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff fe47 	bl	80013c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fe0d 	bl	800235a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001748:	3318      	adds	r3, #24
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	3318      	adds	r3, #24
 800175a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001764:	3318      	adds	r3, #24
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f042 0202 	orr.w	r2, r2, #2
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	3318      	adds	r3, #24
 8001776:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2223      	movs	r2, #35	; 0x23
 800177c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	e000      	b.n	8001786 <HAL_ETH_Start+0xbe>
  }
  else
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
  }
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800179c:	2b10      	cmp	r3, #16
 800179e:	f040 8086 	bne.w	80018ae <HAL_ETH_Start_IT+0x120>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2223      	movs	r2, #35	; 0x23
 80017a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017d4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80017e8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2204      	movs	r2, #4
 80017f0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fa06 	bl	8001c04 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0208 	orr.w	r2, r2, #8
 8001806:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001810:	2001      	movs	r0, #1
 8001812:	f7ff fdd5 	bl	80013c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0204 	orr.w	r2, r2, #4
 800182c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001836:	2001      	movs	r0, #1
 8001838:	f7ff fdc2 	bl	80013c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fd88 	bl	800235a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001852:	3318      	adds	r3, #24
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800185e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001862:	3318      	adds	r3, #24
 8001864:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186e:	3318      	adds	r3, #24
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0202 	orr.w	r2, r2, #2
 800187a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187e:	3318      	adds	r3, #24
 8001880:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188a:	331c      	adds	r3, #28
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 32d0 	orr.w	r2, r2, #106496	; 0x1a000
 8001896:	f042 02c1 	orr.w	r2, r2, #193	; 0xc1
 800189a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189e:	331c      	adds	r3, #28
 80018a0:	601a      	str	r2, [r3, #0]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2223      	movs	r2, #35	; 0x23
 80018a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_ETH_Start_IT+0x122>
  }
  else
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
  }
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018c6:	2b23      	cmp	r3, #35	; 0x23
 80018c8:	d176      	bne.n	80019b8 <HAL_ETH_Stop_IT+0x100>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2223      	movs	r2, #35	; 0x23
 80018ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018da:	331c      	adds	r3, #28
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 32d0 	bic.w	r2, r2, #106496	; 0x1a000
 80018e6:	f022 02c1 	bic.w	r2, r2, #193	; 0xc1
 80018ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ee:	331c      	adds	r3, #28
 80018f0:	601a      	str	r2, [r3, #0]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fa:	3318      	adds	r3, #24
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190a:	3318      	adds	r3, #24
 800190c:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001916:	3318      	adds	r3, #24
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 0202 	bic.w	r2, r2, #2
 8001922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001926:	3318      	adds	r3, #24
 8001928:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0204 	bic.w	r2, r2, #4
 8001938:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001942:	2001      	movs	r0, #1
 8001944:	f7ff fd3c 	bl	80013c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fd02 	bl	800235a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0208 	bic.w	r2, r2, #8
 8001964:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800196e:	2001      	movs	r0, #1
 8001970:	f7ff fd26 	bl	80013c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e00e      	b.n	80019a0 <HAL_ETH_Stop_IT+0xe8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	3212      	adds	r2, #18
 8001988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	3301      	adds	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d9ed      	bls.n	8001982 <HAL_ETH_Stop_IT+0xca>
    }

    heth->RxDescList.ItMode = 0U;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2210      	movs	r2, #16
 80019b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e000      	b.n	80019ba <HAL_ETH_Stop_IT+0x102>
  }
  else
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
  }
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e046      	b.n	8001a74 <HAL_ETH_Transmit_IT+0xb2>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ec:	2b23      	cmp	r3, #35	; 0x23
 80019ee:	d140      	bne.n	8001a72 <HAL_ETH_Transmit_IT+0xb0>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80019f8:	2201      	movs	r2, #1
 80019fa:	6839      	ldr	r1, [r7, #0]
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 ff83 	bl	8002908 <ETH_Prepare_Tx_Descriptors>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d009      	beq.n	8001a1c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0e:	f043 0202 	orr.w	r2, r3, #2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e02b      	b.n	8001a74 <HAL_ETH_Transmit_IT+0xb2>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a1c:	f3bf 8f4f 	dsb	sy
}
 8001a20:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d904      	bls.n	8001a3e <HAL_ETH_Transmit_IT+0x7c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	1f1a      	subs	r2, r3, #4
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a46:	3314      	adds	r3, #20
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00d      	beq.n	8001a6e <HAL_ETH_Transmit_IT+0xac>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5a:	3314      	adds	r3, #20
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	601a      	str	r2, [r3, #0]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_ETH_Transmit_IT+0xb2>

  }
  else
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
  }
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d109      	bne.n	8001aa8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0a8      	b.n	8001bfa <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aae:	2b23      	cmp	r3, #35	; 0x23
 8001ab0:	d001      	beq.n	8001ab6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0a1      	b.n	8001bfa <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aba:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	3212      	adds	r2, #18
 8001ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001acc:	f1c3 0304 	rsb	r3, r3, #4
 8001ad0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ad2:	e06a      	b.n	8001baa <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d103      	bne.n	8001b04 <HAL_ETH_ReadData+0x88>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d040      	beq.n	8001b86 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00c      	beq.n	8001b48 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	0c1b      	lsrs	r3, r3, #16
 8001b34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b38:	3b04      	subs	r3, #4
 8001b3a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b60:	461a      	mov	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f002 ffe7 	bl	8004b38 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	441a      	add	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d902      	bls.n	8001b98 <HAL_ETH_ReadData+0x11c>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b04      	subs	r3, #4
 8001b96:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	3212      	adds	r2, #18
 8001b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db06      	blt.n	8001bc0 <HAL_ETH_ReadData+0x144>
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d202      	bcs.n	8001bc0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d089      	beq.n	8001ad4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	441a      	add	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f815 	bl	8001c04 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e000      	b.n	8001bfa <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001c10:	2301      	movs	r3, #1
 8001c12:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c18:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	3212      	adds	r2, #18
 8001c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c24:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c2a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c2c:	e040      	b.n	8001cb0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d112      	bne.n	8001c5c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 ff4c 	bl	8004ad8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	74fb      	strb	r3, [r7, #19]
 8001c4a:	e007      	b.n	8001c5c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	461a      	mov	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001c5c:	7cfb      	ldrb	r3, [r7, #19]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d026      	beq.n	8001cb0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <ETH_UpdateDescriptor+0xe4>)
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	e003      	b.n	8001c7a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001c78:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c7a:	f3bf 8f5f 	dmb	sy
}
 8001c7e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d902      	bls.n	8001c9e <ETH_UpdateDescriptor+0x9a>
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	3212      	adds	r2, #18
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <ETH_UpdateDescriptor+0xb8>
 8001cb6:	7cfb      	ldrb	r3, [r7, #19]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1b8      	bne.n	8001c2e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d00c      	beq.n	8001ce0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cce:	3308      	adds	r3, #8
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	800045f8 	.word	0x800045f8

08001cec <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3318      	adds	r3, #24
 8001cf8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001d06:	2301      	movs	r3, #1
 8001d08:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d0a:	e03f      	b.n	8001d8c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d028      	beq.n	8001d8c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68d9      	ldr	r1, [r3, #12]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db1b      	blt.n	8001d88 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	3304      	adds	r3, #4
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 ff2b 	bl	8004bb8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	3304      	adds	r3, #4
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	3301      	adds	r3, #1
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d86:	e001      	b.n	8001d8c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_ETH_ReleaseTxPacket+0xac>
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1b9      	bne.n	8001d0c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db4:	3314      	adds	r3, #20
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbc:	2b40      	cmp	r3, #64	; 0x40
 8001dbe:	d113      	bne.n	8001de8 <HAL_ETH_IRQHandler+0x44>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc8:	331c      	adds	r3, #28
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd0:	2b40      	cmp	r3, #64	; 0x40
 8001dd2:	d109      	bne.n	8001de8 <HAL_ETH_IRQHandler+0x44>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ddc:	3314      	adds	r3, #20
 8001dde:	4a54      	ldr	r2, [pc, #336]	; (8001f30 <HAL_ETH_IRQHandler+0x18c>)
 8001de0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f002 fa4e 	bl	8004284 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df0:	3314      	adds	r3, #20
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d114      	bne.n	8001e26 <HAL_ETH_IRQHandler+0x82>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e04:	331c      	adds	r3, #28
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10a      	bne.n	8001e26 <HAL_ETH_IRQHandler+0x82>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	3314      	adds	r3, #20
 8001e1a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001e1e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f002 fa3f 	bl	80042a4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2e:	3314      	adds	r3, #20
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3a:	d152      	bne.n	8001ee2 <HAL_ETH_IRQHandler+0x13e>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e44:	331c      	adds	r3, #28
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e50:	d147      	bne.n	8001ee2 <HAL_ETH_IRQHandler+0x13e>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e58:	f043 0208 	orr.w	r2, r3, #8
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e76:	d11d      	bne.n	8001eb4 <HAL_ETH_IRQHandler+0x110>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e80:	3314      	adds	r3, #20
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_ETH_IRQHandler+0x190>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e96:	331c      	adds	r3, #28
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001ea2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea6:	331c      	adds	r3, #28
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	22e0      	movs	r2, #224	; 0xe0
 8001eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001eb2:	e013      	b.n	8001edc <HAL_ETH_IRQHandler+0x138>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebc:	3314      	adds	r3, #20
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed4:	3314      	adds	r3, #20
 8001ed6:	f248 6280 	movw	r2, #34432	; 0x8680
 8001eda:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f002 f9f1 	bl	80042c4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d10e      	bne.n	8001f0e <HAL_ETH_IRQHandler+0x16a>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f81b 	bl	8001f3c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <HAL_ETH_IRQHandler+0x194>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_ETH_IRQHandler+0x184>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_ETH_IRQHandler+0x194>)
 8001f1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f20:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f814 	bl	8001f50 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	00010040 	.word	0x00010040
 8001f34:	007e2000 	.word	0x007e2000
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 031c 	and.w	r3, r3, #28
 8001f80:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	02db      	lsls	r3, r3, #11
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	019b      	lsls	r3, r3, #6
 8001f92:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f023 0302 	bic.w	r3, r3, #2
 8001fa2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001fb4:	f7ff f9f8 	bl	80013a8 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fba:	e00d      	b.n	8001fd8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001fbc:	f7ff f9f4 	bl	80013a8 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fca:	d301      	bcc.n	8001fd0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e010      	b.n	8001ff2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1ec      	bne.n	8001fbc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f003 031c 	and.w	r3, r3, #28
 8002016:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	02db      	lsls	r3, r3, #11
 800201c:	b29b      	uxth	r3, r3
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	019b      	lsls	r3, r3, #6
 8002028:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002054:	f7ff f9a8 	bl	80013a8 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800205a:	e00d      	b.n	8002078 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800205c:	f7ff f9a4 	bl	80013a8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206a:	d301      	bcc.n	8002070 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e009      	b.n	8002084 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ec      	bne.n	800205c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0d9      	b.n	8002254 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf14      	ite	ne
 80020ae:	2301      	movne	r3, #1
 80020b0:	2300      	moveq	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf0c      	ite	eq
 800210e:	2301      	moveq	r3, #1
 8002110:	2300      	movne	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf14      	ite	ne
 8002128:	2301      	movne	r3, #1
 800212a:	2300      	moveq	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf0c      	ite	eq
 800215e:	2301      	moveq	r3, #1
 8002160:	2300      	movne	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf14      	ite	ne
 8002192:	2301      	movne	r3, #1
 8002194:	2300      	moveq	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf14      	ite	ne
 80021d4:	2301      	movne	r3, #1
 80021d6:	2300      	moveq	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	0c1b      	lsrs	r3, r3, #16
 8002214:	b29a      	uxth	r2, r3
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf14      	ite	ne
 8002228:	2301      	movne	r3, #1
 800222a:	2300      	moveq	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e00b      	b.n	800228c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800227a:	2b10      	cmp	r3, #16
 800227c:	d105      	bne.n	800228a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800227e:	6839      	ldr	r1, [r7, #0]
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f893 	bl	80023ac <ETH_SetMACConfig>

    return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
  }
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 031c 	bic.w	r3, r3, #28
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80022ac:	f001 fa2c 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 80022b0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	4a1d      	ldr	r2, [pc, #116]	; (800232c <HAL_ETH_SetMDIOClockRange+0x98>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d908      	bls.n	80022cc <HAL_ETH_SetMDIOClockRange+0x38>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4a1c      	ldr	r2, [pc, #112]	; (8002330 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d804      	bhi.n	80022cc <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f043 0308 	orr.w	r3, r3, #8
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	e027      	b.n	800231c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	4a18      	ldr	r2, [pc, #96]	; (8002330 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d908      	bls.n	80022e6 <HAL_ETH_SetMDIOClockRange+0x52>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d204      	bcs.n	80022e6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f043 030c 	orr.w	r3, r3, #12
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	e01a      	b.n	800231c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d303      	bcc.n	80022f6 <HAL_ETH_SetMDIOClockRange+0x62>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4a11      	ldr	r2, [pc, #68]	; (8002338 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d911      	bls.n	800231a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d908      	bls.n	8002310 <HAL_ETH_SetMDIOClockRange+0x7c>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d804      	bhi.n	8002310 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	e005      	b.n	800231c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f043 0310 	orr.w	r3, r3, #16
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e000      	b.n	800231c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800231a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	611a      	str	r2, [r3, #16]
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	01312cff 	.word	0x01312cff
 8002330:	02160ebf 	.word	0x02160ebf
 8002334:	03938700 	.word	0x03938700
 8002338:	05f5e0ff 	.word	0x05f5e0ff
 800233c:	08f0d17f 	.word	0x08f0d17f

08002340 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236e:	3318      	adds	r3, #24
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800237a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237e:	3318      	adds	r3, #24
 8002380:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238a:	3318      	adds	r3, #24
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002390:	2001      	movs	r0, #1
 8002392:	f7ff f815 	bl	80013c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a0:	3318      	adds	r3, #24
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4b51      	ldr	r3, [pc, #324]	; (8002508 <ETH_SetMACConfig+0x15c>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7c1b      	ldrb	r3, [r3, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <ETH_SetMACConfig+0x28>
 80023ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023d2:	e000      	b.n	80023d6 <ETH_SetMACConfig+0x2a>
 80023d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7c5b      	ldrb	r3, [r3, #17]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <ETH_SetMACConfig+0x38>
 80023de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023e2:	e000      	b.n	80023e6 <ETH_SetMACConfig+0x3a>
 80023e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	7fdb      	ldrb	r3, [r3, #31]
 80023f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	7f92      	ldrb	r2, [r2, #30]
 8002400:	2a00      	cmp	r2, #0
 8002402:	d102      	bne.n	800240a <ETH_SetMACConfig+0x5e>
 8002404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002408:	e000      	b.n	800240c <ETH_SetMACConfig+0x60>
 800240a:	2200      	movs	r2, #0
                        macconf->Speed |
 800240c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	7f1b      	ldrb	r3, [r3, #28]
 8002412:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002414:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800241a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	791b      	ldrb	r3, [r3, #4]
 8002420:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002422:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	f892 2020 	ldrb.w	r2, [r2, #32]
 800242a:	2a00      	cmp	r2, #0
 800242c:	d102      	bne.n	8002434 <ETH_SetMACConfig+0x88>
 800242e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002432:	e000      	b.n	8002436 <ETH_SetMACConfig+0x8a>
 8002434:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002436:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	7bdb      	ldrb	r3, [r3, #15]
 800243c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800243e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002444:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800244c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800244e:	4313      	orrs	r3, r2
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002466:	2001      	movs	r0, #1
 8002468:	f7fe ffaa 	bl	80013c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002492:	2a00      	cmp	r2, #0
 8002494:	d101      	bne.n	800249a <ETH_SetMACConfig+0xee>
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	e000      	b.n	800249c <ETH_SetMACConfig+0xf0>
 800249a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800249c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80024aa:	2a01      	cmp	r2, #1
 80024ac:	d101      	bne.n	80024b2 <ETH_SetMACConfig+0x106>
 80024ae:	2208      	movs	r2, #8
 80024b0:	e000      	b.n	80024b4 <ETH_SetMACConfig+0x108>
 80024b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024bc:	2a01      	cmp	r2, #1
 80024be:	d101      	bne.n	80024c4 <ETH_SetMACConfig+0x118>
 80024c0:	2204      	movs	r2, #4
 80024c2:	e000      	b.n	80024c6 <ETH_SetMACConfig+0x11a>
 80024c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024ce:	2a01      	cmp	r2, #1
 80024d0:	d101      	bne.n	80024d6 <ETH_SetMACConfig+0x12a>
 80024d2:	2202      	movs	r2, #2
 80024d4:	e000      	b.n	80024d8 <ETH_SetMACConfig+0x12c>
 80024d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024d8:	4313      	orrs	r3, r2
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f7fe ff65 	bl	80013c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	ff20810f 	.word	0xff20810f

0800250c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251e:	3318      	adds	r3, #24
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4b3e      	ldr	r3, [pc, #248]	; (8002620 <ETH_SetDMAConfig+0x114>)
 8002528:	4013      	ands	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	7b1b      	ldrb	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <ETH_SetDMAConfig+0x2e>
 8002534:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002538:	e000      	b.n	800253c <ETH_SetDMAConfig+0x30>
 800253a:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7b5b      	ldrb	r3, [r3, #13]
 8002540:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002542:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	7f52      	ldrb	r2, [r2, #29]
 8002548:	2a00      	cmp	r2, #0
 800254a:	d102      	bne.n	8002552 <ETH_SetDMAConfig+0x46>
 800254c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002550:	e000      	b.n	8002554 <ETH_SetDMAConfig+0x48>
 8002552:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002554:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	7b9b      	ldrb	r3, [r3, #14]
 800255a:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800255c:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002562:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	7f1b      	ldrb	r3, [r3, #28]
 8002568:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800256a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	7f9b      	ldrb	r3, [r3, #30]
 8002570:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002572:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002578:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002580:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002582:	4313      	orrs	r3, r2
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002592:	3318      	adds	r3, #24
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a0:	3318      	adds	r3, #24
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025a6:	2001      	movs	r0, #1
 80025a8:	f7fe ff0a 	bl	80013c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b4:	3318      	adds	r3, #24
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	791b      	ldrb	r3, [r3, #4]
 80025be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025e8:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f6:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002604:	2001      	movs	r0, #1
 8002606:	f7fe fedb 	bl	80013c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	f8de3f23 	.word	0xf8de3f23

08002624 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b0a6      	sub	sp, #152	; 0x98
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800262c:	2301      	movs	r3, #1
 800262e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002638:	2300      	movs	r3, #0
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002642:	2301      	movs	r3, #1
 8002644:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002660:	2300      	movs	r3, #0
 8002662:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800266a:	2300      	movs	r3, #0
 800266c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002686:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800268a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800268c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002690:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002698:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800269c:	4619      	mov	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fe84 	bl	80023ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026c6:	2300      	movs	r3, #0
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026f4:	f107 0308 	add.w	r3, r7, #8
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ff06 	bl	800250c <ETH_SetDMAConfig>
}
 8002700:	bf00      	nop
 8002702:	3798      	adds	r7, #152	; 0x98
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3305      	adds	r3, #5
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	3204      	adds	r2, #4
 8002720:	7812      	ldrb	r2, [r2, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <ETH_MACAddressConfig+0x68>)
 800272a:	4413      	add	r3, r2
 800272c:	461a      	mov	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3303      	adds	r3, #3
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	061a      	lsls	r2, r3, #24
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3302      	adds	r3, #2
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3301      	adds	r3, #1
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	4313      	orrs	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <ETH_MACAddressConfig+0x6c>)
 800275a:	4413      	add	r3, r2
 800275c:	461a      	mov	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	6013      	str	r3, [r2, #0]
}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40028040 	.word	0x40028040
 8002774:	40028044 	.word	0x40028044

08002778 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e03e      	b.n	8002804 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68d9      	ldr	r1, [r3, #12]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2200      	movs	r2, #0
 80027a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2200      	movs	r2, #0
 80027ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	3206      	adds	r2, #6
 80027b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d80c      	bhi.n	80027e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68d9      	ldr	r1, [r3, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	461a      	mov	r2, r3
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	e004      	b.n	80027f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	3301      	adds	r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b03      	cmp	r3, #3
 8002808:	d9bd      	bls.n	8002786 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281c:	3310      	adds	r3, #16
 800281e:	601a      	str	r2, [r3, #0]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e046      	b.n	80028c8 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6919      	ldr	r1, [r3, #16]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	4613      	mov	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2200      	movs	r2, #0
 8002856:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2200      	movs	r2, #0
 800285c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2200      	movs	r2, #0
 8002862:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2200      	movs	r2, #0
 8002868:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2200      	movs	r2, #0
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002876:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800287e:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	3212      	adds	r2, #18
 8002894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d80c      	bhi.n	80028b8 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6919      	ldr	r1, [r3, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	e004      	b.n	80028c2 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	461a      	mov	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d9b5      	bls.n	800283a <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f8:	330c      	adds	r3, #12
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002908:	b480      	push	{r7}
 800290a:	b08d      	sub	sp, #52	; 0x34
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3318      	adds	r3, #24
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002932:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800294a:	d007      	beq.n	800295c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	3304      	adds	r3, #4
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800295c:	2302      	movs	r3, #2
 800295e:	e103      	b.n	8002b68 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	3301      	adds	r3, #1
 8002964:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002978:	f023 031f 	bic.w	r3, r3, #31
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	6852      	ldr	r2, [r2, #4]
 8002980:	431a      	orrs	r2, r3
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	431a      	orrs	r2, r3
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	431a      	orrs	r2, r3
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80029e6:	f3bf 8f5f 	dmb	sy
}
 80029ea:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80029f8:	e084      	b.n	8002b04 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d006      	beq.n	8002a1a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e005      	b.n	8002a26 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	3301      	adds	r3, #1
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d902      	bls.n	8002a38 <ETH_Prepare_Tx_Descriptors+0x130>
 8002a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a34:	3b04      	subs	r3, #4
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a40:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a5a:	d007      	beq.n	8002a6c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a60:	3304      	adds	r3, #4
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d029      	beq.n	8002ac0 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a78:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a7e:	e019      	b.n	8002ab4 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002a80:	f3bf 8f5f 	dmb	sy
}
 8002a84:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a94:	3301      	adds	r3, #1
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d902      	bls.n	8002aa4 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	3b04      	subs	r3, #4
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aac:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d3e1      	bcc.n	8002a80 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002abc:	2302      	movs	r3, #2
 8002abe:	e053      	b.n	8002b68 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002ade:	f023 031f 	bic.w	r3, r3, #31
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	6852      	ldr	r2, [r2, #4]
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	3301      	adds	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002af2:	f3bf 8f5f 	dmb	sy
}
 8002af6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f47f af76 	bne.w	80029fa <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d006      	beq.n	8002b22 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e005      	b.n	8002b2e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b3e:	6979      	ldr	r1, [r7, #20]
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	3304      	adds	r3, #4
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b4e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b50:	b672      	cpsid	i
}
 8002b52:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002b62:	b662      	cpsie	i
}
 8002b64:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3734      	adds	r7, #52	; 0x34
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e16b      	b.n	8002e68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b90:	2201      	movs	r2, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	f040 815a 	bne.w	8002e62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d005      	beq.n	8002bc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d130      	bne.n	8002c28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 0201 	and.w	r2, r3, #1
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d017      	beq.n	8002c64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f003 0303 	and.w	r3, r3, #3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d123      	bne.n	8002cb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	08da      	lsrs	r2, r3, #3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3208      	adds	r2, #8
 8002c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	08da      	lsrs	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3208      	adds	r2, #8
 8002cb2:	69b9      	ldr	r1, [r7, #24]
 8002cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0203 	and.w	r2, r3, #3
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 80b4 	beq.w	8002e62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b60      	ldr	r3, [pc, #384]	; (8002e80 <HAL_GPIO_Init+0x30c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a5f      	ldr	r2, [pc, #380]	; (8002e80 <HAL_GPIO_Init+0x30c>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b5d      	ldr	r3, [pc, #372]	; (8002e80 <HAL_GPIO_Init+0x30c>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d16:	4a5b      	ldr	r2, [pc, #364]	; (8002e84 <HAL_GPIO_Init+0x310>)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a52      	ldr	r2, [pc, #328]	; (8002e88 <HAL_GPIO_Init+0x314>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d02b      	beq.n	8002d9a <HAL_GPIO_Init+0x226>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a51      	ldr	r2, [pc, #324]	; (8002e8c <HAL_GPIO_Init+0x318>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d025      	beq.n	8002d96 <HAL_GPIO_Init+0x222>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a50      	ldr	r2, [pc, #320]	; (8002e90 <HAL_GPIO_Init+0x31c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01f      	beq.n	8002d92 <HAL_GPIO_Init+0x21e>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4f      	ldr	r2, [pc, #316]	; (8002e94 <HAL_GPIO_Init+0x320>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d019      	beq.n	8002d8e <HAL_GPIO_Init+0x21a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4e      	ldr	r2, [pc, #312]	; (8002e98 <HAL_GPIO_Init+0x324>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d013      	beq.n	8002d8a <HAL_GPIO_Init+0x216>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4d      	ldr	r2, [pc, #308]	; (8002e9c <HAL_GPIO_Init+0x328>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00d      	beq.n	8002d86 <HAL_GPIO_Init+0x212>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a4c      	ldr	r2, [pc, #304]	; (8002ea0 <HAL_GPIO_Init+0x32c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d007      	beq.n	8002d82 <HAL_GPIO_Init+0x20e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a4b      	ldr	r2, [pc, #300]	; (8002ea4 <HAL_GPIO_Init+0x330>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d101      	bne.n	8002d7e <HAL_GPIO_Init+0x20a>
 8002d7a:	2307      	movs	r3, #7
 8002d7c:	e00e      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d7e:	2308      	movs	r3, #8
 8002d80:	e00c      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d82:	2306      	movs	r3, #6
 8002d84:	e00a      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d86:	2305      	movs	r3, #5
 8002d88:	e008      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e004      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e002      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_GPIO_Init+0x228>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	f002 0203 	and.w	r2, r2, #3
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	4093      	lsls	r3, r2
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dac:	4935      	ldr	r1, [pc, #212]	; (8002e84 <HAL_GPIO_Init+0x310>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dde:	4a32      	ldr	r2, [pc, #200]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de4:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e08:	4a27      	ldr	r2, [pc, #156]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3301      	adds	r3, #1
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	f67f ae90 	bls.w	8002b90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40013800 	.word	0x40013800
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	40020400 	.word	0x40020400
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40021400 	.word	0x40021400
 8002ea0:	40021800 	.word	0x40021800
 8002ea4:	40021c00 	.word	0x40021c00
 8002ea8:	40013c00 	.word	0x40013c00

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec8:	e003      	b.n	8002ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	041a      	lsls	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	619a      	str	r2, [r3, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e264      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d075      	beq.n	8002fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002efe:	4ba3      	ldr	r3, [pc, #652]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d00c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f0a:	4ba0      	ldr	r3, [pc, #640]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d112      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f16:	4b9d      	ldr	r3, [pc, #628]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f22:	d10b      	bne.n	8002f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d05b      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x108>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d157      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e23f      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_OscConfig+0x74>
 8002f46:	4b91      	ldr	r3, [pc, #580]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a90      	ldr	r2, [pc, #576]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	e01d      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x98>
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a8a      	ldr	r2, [pc, #552]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b88      	ldr	r3, [pc, #544]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a87      	ldr	r2, [pc, #540]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCC_OscConfig+0xb0>
 8002f78:	4b84      	ldr	r3, [pc, #528]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a83      	ldr	r2, [pc, #524]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b81      	ldr	r3, [pc, #516]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a80      	ldr	r2, [pc, #512]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d013      	beq.n	8002fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7fe fa06 	bl	80013a8 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fe fa02 	bl	80013a8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e204      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b76      	ldr	r3, [pc, #472]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xc0>
 8002fbe:	e014      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe f9f2 	bl	80013a8 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe f9ee 	bl	80013a8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e1f0      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	4b6c      	ldr	r3, [pc, #432]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0xe8>
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d063      	beq.n	80030be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00b      	beq.n	800301a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003002:	4b62      	ldr	r3, [pc, #392]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300a:	2b08      	cmp	r3, #8
 800300c:	d11c      	bne.n	8003048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b5f      	ldr	r3, [pc, #380]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d116      	bne.n	8003048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_RCC_OscConfig+0x152>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1c4      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003032:	4b56      	ldr	r3, [pc, #344]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	4952      	ldr	r1, [pc, #328]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003042:	4313      	orrs	r3, r2
 8003044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	e03a      	b.n	80030be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d020      	beq.n	8003092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003050:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <HAL_RCC_OscConfig+0x2b0>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fe f9a7 	bl	80013a8 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800305e:	f7fe f9a3 	bl	80013a8 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e1a5      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	4b46      	ldr	r3, [pc, #280]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307c:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4940      	ldr	r1, [pc, #256]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]
 8003090:	e015      	b.n	80030be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_RCC_OscConfig+0x2b0>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe f986 	bl	80013a8 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe f982 	bl	80013a8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e184      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	4b36      	ldr	r3, [pc, #216]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d030      	beq.n	800312c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_RCC_OscConfig+0x2b4>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe f966 	bl	80013a8 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e0:	f7fe f962 	bl	80013a8 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e164      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	4b26      	ldr	r3, [pc, #152]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 80030f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x200>
 80030fe:	e015      	b.n	800312c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCC_OscConfig+0x2b4>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003106:	f7fe f94f 	bl	80013a8 <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800310e:	f7fe f94b 	bl	80013a8 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e14d      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f0      	bne.n	800310e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a0 	beq.w	800327a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	4a0e      	ldr	r2, [pc, #56]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003158:	6413      	str	r3, [r2, #64]	; 0x40
 800315a:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_RCC_OscConfig+0x2ac>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d121      	bne.n	80031ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_RCC_OscConfig+0x2b8>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003182:	f7fe f911 	bl	80013a8 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	e011      	b.n	80031ae <HAL_RCC_OscConfig+0x2ce>
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	42470000 	.word	0x42470000
 8003194:	42470e80 	.word	0x42470e80
 8003198:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319c:	f7fe f904 	bl	80013a8 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e106      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b85      	ldr	r3, [pc, #532]	; (80033c4 <HAL_RCC_OscConfig+0x4e4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2f0>
 80031c2:	4b81      	ldr	r3, [pc, #516]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a80      	ldr	r2, [pc, #512]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	e01c      	b.n	800320a <HAL_RCC_OscConfig+0x32a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x312>
 80031d8:	4b7b      	ldr	r3, [pc, #492]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	4a7a      	ldr	r2, [pc, #488]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6713      	str	r3, [r2, #112]	; 0x70
 80031e4:	4b78      	ldr	r3, [pc, #480]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a77      	ldr	r2, [pc, #476]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	e00b      	b.n	800320a <HAL_RCC_OscConfig+0x32a>
 80031f2:	4b75      	ldr	r3, [pc, #468]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a74      	ldr	r2, [pc, #464]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	4b72      	ldr	r3, [pc, #456]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	4a71      	ldr	r2, [pc, #452]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d015      	beq.n	800323e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe f8c9 	bl	80013a8 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe f8c5 	bl	80013a8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0c5      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	4b65      	ldr	r3, [pc, #404]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RCC_OscConfig+0x33a>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe f8b3 	bl	80013a8 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe f8af 	bl	80013a8 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0af      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	4b5a      	ldr	r3, [pc, #360]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ee      	bne.n	8003246 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b56      	ldr	r3, [pc, #344]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	4a55      	ldr	r2, [pc, #340]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 809b 	beq.w	80033ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003284:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d05c      	beq.n	800334a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d141      	bne.n	800331c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b4c      	ldr	r3, [pc, #304]	; (80033cc <HAL_RCC_OscConfig+0x4ec>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe f883 	bl	80013a8 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe f87f 	bl	80013a8 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e081      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b8:	4b43      	ldr	r3, [pc, #268]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f0      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	019b      	lsls	r3, r3, #6
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	3b01      	subs	r3, #1
 80032de:	041b      	lsls	r3, r3, #16
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	4937      	ldr	r1, [pc, #220]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ee:	4b37      	ldr	r3, [pc, #220]	; (80033cc <HAL_RCC_OscConfig+0x4ec>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe f858 	bl	80013a8 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe f854 	bl	80013a8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e056      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x41c>
 800331a:	e04e      	b.n	80033ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <HAL_RCC_OscConfig+0x4ec>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fe f841 	bl	80013a8 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe f83d 	bl	80013a8 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e03f      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x44a>
 8003348:	e037      	b.n	80033ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e032      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003356:	4b1c      	ldr	r3, [pc, #112]	; (80033c8 <HAL_RCC_OscConfig+0x4e8>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d028      	beq.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d121      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d11a      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003386:	4013      	ands	r3, r2
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800338c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800338e:	4293      	cmp	r3, r2
 8003390:	d111      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	085b      	lsrs	r3, r3, #1
 800339e:	3b01      	subs	r3, #1
 80033a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d001      	beq.n	80033ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40007000 	.word	0x40007000
 80033c8:	40023800 	.word	0x40023800
 80033cc:	42470060 	.word	0x42470060

080033d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0cc      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033e4:	4b68      	ldr	r3, [pc, #416]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d90c      	bls.n	800340c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f2:	4b65      	ldr	r3, [pc, #404]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fa:	4b63      	ldr	r3, [pc, #396]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0b8      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003424:	4b59      	ldr	r3, [pc, #356]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a58      	ldr	r2, [pc, #352]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800342e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800343c:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a52      	ldr	r2, [pc, #328]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	494d      	ldr	r1, [pc, #308]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	4313      	orrs	r3, r2
 8003458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d044      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d119      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e07f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d003      	beq.n	800348e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348a:	2b03      	cmp	r3, #3
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348e:	4b3f      	ldr	r3, [pc, #252]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e06f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349e:	4b3b      	ldr	r3, [pc, #236]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e067      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4934      	ldr	r1, [pc, #208]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034c0:	f7fd ff72 	bl	80013a8 <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7fd ff6e 	bl	80013a8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e04f      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 020c 	and.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1eb      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f0:	4b25      	ldr	r3, [pc, #148]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d20c      	bcs.n	8003518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e032      	b.n	800357e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003524:	4b19      	ldr	r3, [pc, #100]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4916      	ldr	r1, [pc, #88]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	4313      	orrs	r3, r2
 8003534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	490e      	ldr	r1, [pc, #56]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003556:	f000 f821 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800355a:	4602      	mov	r2, r0
 800355c:	4b0b      	ldr	r3, [pc, #44]	; (800358c <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 030f 	and.w	r3, r3, #15
 8003566:	490a      	ldr	r1, [pc, #40]	; (8003590 <HAL_RCC_ClockConfig+0x1c0>)
 8003568:	5ccb      	ldrb	r3, [r1, r3]
 800356a:	fa22 f303 	lsr.w	r3, r2, r3
 800356e:	4a09      	ldr	r2, [pc, #36]	; (8003594 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fd fbd2 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40023c00 	.word	0x40023c00
 800358c:	40023800 	.word	0x40023800
 8003590:	0801fe48 	.word	0x0801fe48
 8003594:	20000000 	.word	0x20000000
 8003598:	20000004 	.word	0x20000004

0800359c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	b5b0      	push	{r4, r5, r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035a2:	2100      	movs	r1, #0
 80035a4:	6079      	str	r1, [r7, #4]
 80035a6:	2100      	movs	r1, #0
 80035a8:	60f9      	str	r1, [r7, #12]
 80035aa:	2100      	movs	r1, #0
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035ae:	2100      	movs	r1, #0
 80035b0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035b2:	4952      	ldr	r1, [pc, #328]	; (80036fc <HAL_RCC_GetSysClockFreq+0x160>)
 80035b4:	6889      	ldr	r1, [r1, #8]
 80035b6:	f001 010c 	and.w	r1, r1, #12
 80035ba:	2908      	cmp	r1, #8
 80035bc:	d00d      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x3e>
 80035be:	2908      	cmp	r1, #8
 80035c0:	f200 8094 	bhi.w	80036ec <HAL_RCC_GetSysClockFreq+0x150>
 80035c4:	2900      	cmp	r1, #0
 80035c6:	d002      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x32>
 80035c8:	2904      	cmp	r1, #4
 80035ca:	d003      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x38>
 80035cc:	e08e      	b.n	80036ec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ce:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <HAL_RCC_GetSysClockFreq+0x164>)
 80035d0:	60bb      	str	r3, [r7, #8]
       break;
 80035d2:	e08e      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035d4:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <HAL_RCC_GetSysClockFreq+0x168>)
 80035d6:	60bb      	str	r3, [r7, #8]
      break;
 80035d8:	e08b      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035da:	4948      	ldr	r1, [pc, #288]	; (80036fc <HAL_RCC_GetSysClockFreq+0x160>)
 80035dc:	6849      	ldr	r1, [r1, #4]
 80035de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035e2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035e4:	4945      	ldr	r1, [pc, #276]	; (80036fc <HAL_RCC_GetSysClockFreq+0x160>)
 80035e6:	6849      	ldr	r1, [r1, #4]
 80035e8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80035ec:	2900      	cmp	r1, #0
 80035ee:	d024      	beq.n	800363a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f0:	4942      	ldr	r1, [pc, #264]	; (80036fc <HAL_RCC_GetSysClockFreq+0x160>)
 80035f2:	6849      	ldr	r1, [r1, #4]
 80035f4:	0989      	lsrs	r1, r1, #6
 80035f6:	4608      	mov	r0, r1
 80035f8:	f04f 0100 	mov.w	r1, #0
 80035fc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003600:	f04f 0500 	mov.w	r5, #0
 8003604:	ea00 0204 	and.w	r2, r0, r4
 8003608:	ea01 0305 	and.w	r3, r1, r5
 800360c:	493d      	ldr	r1, [pc, #244]	; (8003704 <HAL_RCC_GetSysClockFreq+0x168>)
 800360e:	fb01 f003 	mul.w	r0, r1, r3
 8003612:	2100      	movs	r1, #0
 8003614:	fb01 f102 	mul.w	r1, r1, r2
 8003618:	1844      	adds	r4, r0, r1
 800361a:	493a      	ldr	r1, [pc, #232]	; (8003704 <HAL_RCC_GetSysClockFreq+0x168>)
 800361c:	fba2 0101 	umull	r0, r1, r2, r1
 8003620:	1863      	adds	r3, r4, r1
 8003622:	4619      	mov	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	461a      	mov	r2, r3
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	f7fc fe28 	bl	8000280 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4613      	mov	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e04a      	b.n	80036d0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363a:	4b30      	ldr	r3, [pc, #192]	; (80036fc <HAL_RCC_GetSysClockFreq+0x160>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	099b      	lsrs	r3, r3, #6
 8003640:	461a      	mov	r2, r3
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	f240 10ff 	movw	r0, #511	; 0x1ff
 800364a:	f04f 0100 	mov.w	r1, #0
 800364e:	ea02 0400 	and.w	r4, r2, r0
 8003652:	ea03 0501 	and.w	r5, r3, r1
 8003656:	4620      	mov	r0, r4
 8003658:	4629      	mov	r1, r5
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	014b      	lsls	r3, r1, #5
 8003664:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003668:	0142      	lsls	r2, r0, #5
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	1b00      	subs	r0, r0, r4
 8003670:	eb61 0105 	sbc.w	r1, r1, r5
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	018b      	lsls	r3, r1, #6
 800367e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003682:	0182      	lsls	r2, r0, #6
 8003684:	1a12      	subs	r2, r2, r0
 8003686:	eb63 0301 	sbc.w	r3, r3, r1
 800368a:	f04f 0000 	mov.w	r0, #0
 800368e:	f04f 0100 	mov.w	r1, #0
 8003692:	00d9      	lsls	r1, r3, #3
 8003694:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003698:	00d0      	lsls	r0, r2, #3
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	1912      	adds	r2, r2, r4
 80036a0:	eb45 0303 	adc.w	r3, r5, r3
 80036a4:	f04f 0000 	mov.w	r0, #0
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	0299      	lsls	r1, r3, #10
 80036ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036b2:	0290      	lsls	r0, r2, #10
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	461a      	mov	r2, r3
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	f7fc fddc 	bl	8000280 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4613      	mov	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036d0:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <HAL_RCC_GetSysClockFreq+0x160>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0c1b      	lsrs	r3, r3, #16
 80036d6:	f003 0303 	and.w	r3, r3, #3
 80036da:	3301      	adds	r3, #1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	60bb      	str	r3, [r7, #8]
      break;
 80036ea:	e002      	b.n	80036f2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_RCC_GetSysClockFreq+0x164>)
 80036ee:	60bb      	str	r3, [r7, #8]
      break;
 80036f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f2:	68bb      	ldr	r3, [r7, #8]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bdb0      	pop	{r4, r5, r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	00f42400 	.word	0x00f42400
 8003704:	017d7840 	.word	0x017d7840

08003708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <HAL_RCC_GetHCLKFreq+0x14>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000000 	.word	0x20000000

08003720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003724:	f7ff fff0 	bl	8003708 <HAL_RCC_GetHCLKFreq>
 8003728:	4602      	mov	r2, r0
 800372a:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	0a9b      	lsrs	r3, r3, #10
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	4903      	ldr	r1, [pc, #12]	; (8003744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003736:	5ccb      	ldrb	r3, [r1, r3]
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40023800 	.word	0x40023800
 8003744:	0801fe58 	.word	0x0801fe58

08003748 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	220f      	movs	r2, #15
 8003756:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_RCC_GetClockConfig+0x5c>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f003 0203 	and.w	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_GetClockConfig+0x5c>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	08db      	lsrs	r3, r3, #3
 8003782:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <HAL_RCC_GetClockConfig+0x60>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0207 	and.w	r2, r3, #7
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	601a      	str	r2, [r3, #0]
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40023c00 	.word	0x40023c00

080037ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07b      	b.n	80038b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ce:	d009      	beq.n	80037e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
 80037d6:	e005      	b.n	80037e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd f9cc 	bl	8000b9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003868:	ea42 0103 	orr.w	r1, r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	f003 0104 	and.w	r1, r3, #4
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	f003 0210 	and.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e041      	b.n	8003954 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7fd f9a1 	bl	8000c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f000 fa95 	bl	8003e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d001      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e04e      	b.n	8003a12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a23      	ldr	r2, [pc, #140]	; (8003a20 <HAL_TIM_Base_Start_IT+0xc4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d022      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399e:	d01d      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1f      	ldr	r2, [pc, #124]	; (8003a24 <HAL_TIM_Base_Start_IT+0xc8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1e      	ldr	r2, [pc, #120]	; (8003a28 <HAL_TIM_Base_Start_IT+0xcc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1c      	ldr	r2, [pc, #112]	; (8003a2c <HAL_TIM_Base_Start_IT+0xd0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a1b      	ldr	r2, [pc, #108]	; (8003a30 <HAL_TIM_Base_Start_IT+0xd4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a19      	ldr	r2, [pc, #100]	; (8003a34 <HAL_TIM_Base_Start_IT+0xd8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x80>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a18      	ldr	r2, [pc, #96]	; (8003a38 <HAL_TIM_Base_Start_IT+0xdc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d111      	bne.n	8003a00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d010      	beq.n	8003a10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fe:	e007      	b.n	8003a10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40000c00 	.word	0x40000c00
 8003a30:	40010400 	.word	0x40010400
 8003a34:	40014000 	.word	0x40014000
 8003a38:	40001800 	.word	0x40001800

08003a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d122      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d11b      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0202 	mvn.w	r2, #2
 8003a68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f9b5 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f9a7 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f9b8 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d122      	bne.n	8003aec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d11b      	bne.n	8003aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0204 	mvn.w	r2, #4
 8003abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f98b 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f97d 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f98e 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d122      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d11b      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0208 	mvn.w	r2, #8
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2204      	movs	r2, #4
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f961 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f953 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f964 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d122      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b10      	cmp	r3, #16
 8003b5a:	d11b      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0210 	mvn.w	r2, #16
 8003b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2208      	movs	r2, #8
 8003b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f937 	bl	8003dee <HAL_TIM_IC_CaptureCallback>
 8003b80:	e005      	b.n	8003b8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f929 	bl	8003dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f93a 	bl	8003e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d107      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0201 	mvn.w	r2, #1
 8003bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fc ffaa 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	2b80      	cmp	r3, #128	; 0x80
 8003bcc:	d10e      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd8:	2b80      	cmp	r3, #128	; 0x80
 8003bda:	d107      	bne.n	8003bec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fae0 	bl	80041ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b40      	cmp	r3, #64	; 0x40
 8003bf8:	d10e      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	d107      	bne.n	8003c18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f8ff 	bl	8003e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d10e      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d107      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0220 	mvn.w	r2, #32
 8003c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 faaa 	bl	8004198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_TIM_ConfigClockSource+0x1c>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e0b4      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x186>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca0:	d03e      	beq.n	8003d20 <HAL_TIM_ConfigClockSource+0xd4>
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca6:	f200 8087 	bhi.w	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cae:	f000 8086 	beq.w	8003dbe <HAL_TIM_ConfigClockSource+0x172>
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	d87f      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b70      	cmp	r3, #112	; 0x70
 8003cba:	d01a      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0xa6>
 8003cbc:	2b70      	cmp	r3, #112	; 0x70
 8003cbe:	d87b      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b60      	cmp	r3, #96	; 0x60
 8003cc2:	d050      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x11a>
 8003cc4:	2b60      	cmp	r3, #96	; 0x60
 8003cc6:	d877      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b50      	cmp	r3, #80	; 0x50
 8003cca:	d03c      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0xfa>
 8003ccc:	2b50      	cmp	r3, #80	; 0x50
 8003cce:	d873      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b40      	cmp	r3, #64	; 0x40
 8003cd2:	d058      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0x13a>
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d86f      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b30      	cmp	r3, #48	; 0x30
 8003cda:	d064      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	2b30      	cmp	r3, #48	; 0x30
 8003cde:	d86b      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d060      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d867      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d05c      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d05a      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x15a>
 8003cf0:	e062      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6899      	ldr	r1, [r3, #8]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f000 f9ad 	bl	8004060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68ba      	ldr	r2, [r7, #8]
 8003d1c:	609a      	str	r2, [r3, #8]
      break;
 8003d1e:	e04f      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	6899      	ldr	r1, [r3, #8]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f000 f996 	bl	8004060 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d42:	609a      	str	r2, [r3, #8]
      break;
 8003d44:	e03c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f000 f90a 	bl	8003f6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2150      	movs	r1, #80	; 0x50
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f963 	bl	800402a <TIM_ITRx_SetConfig>
      break;
 8003d64:	e02c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f000 f929 	bl	8003fca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2160      	movs	r1, #96	; 0x60
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f953 	bl	800402a <TIM_ITRx_SetConfig>
      break;
 8003d84:	e01c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f000 f8ea 	bl	8003f6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2140      	movs	r1, #64	; 0x40
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 f943 	bl	800402a <TIM_ITRx_SetConfig>
      break;
 8003da4:	e00c      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f000 f93a 	bl	800402a <TIM_ITRx_SetConfig>
      break;
 8003db6:	e003      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbc:	e000      	b.n	8003dc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a40      	ldr	r2, [pc, #256]	; (8003f40 <TIM_Base_SetConfig+0x114>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d013      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4a:	d00f      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3d      	ldr	r2, [pc, #244]	; (8003f44 <TIM_Base_SetConfig+0x118>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3c      	ldr	r2, [pc, #240]	; (8003f48 <TIM_Base_SetConfig+0x11c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d007      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a3b      	ldr	r2, [pc, #236]	; (8003f4c <TIM_Base_SetConfig+0x120>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3a      	ldr	r2, [pc, #232]	; (8003f50 <TIM_Base_SetConfig+0x124>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d108      	bne.n	8003e7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2f      	ldr	r2, [pc, #188]	; (8003f40 <TIM_Base_SetConfig+0x114>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d02b      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d027      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <TIM_Base_SetConfig+0x118>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d023      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2b      	ldr	r2, [pc, #172]	; (8003f48 <TIM_Base_SetConfig+0x11c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01f      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a2a      	ldr	r2, [pc, #168]	; (8003f4c <TIM_Base_SetConfig+0x120>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01b      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a29      	ldr	r2, [pc, #164]	; (8003f50 <TIM_Base_SetConfig+0x124>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d017      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a28      	ldr	r2, [pc, #160]	; (8003f54 <TIM_Base_SetConfig+0x128>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a27      	ldr	r2, [pc, #156]	; (8003f58 <TIM_Base_SetConfig+0x12c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00f      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <TIM_Base_SetConfig+0x130>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a25      	ldr	r2, [pc, #148]	; (8003f60 <TIM_Base_SetConfig+0x134>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a24      	ldr	r2, [pc, #144]	; (8003f64 <TIM_Base_SetConfig+0x138>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d003      	beq.n	8003ede <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <TIM_Base_SetConfig+0x13c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <TIM_Base_SetConfig+0x114>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_Base_SetConfig+0xf8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a0c      	ldr	r2, [pc, #48]	; (8003f50 <TIM_Base_SetConfig+0x124>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d103      	bne.n	8003f2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	615a      	str	r2, [r3, #20]
}
 8003f32:	bf00      	nop
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800
 8003f60:	40001800 	.word	0x40001800
 8003f64:	40001c00 	.word	0x40001c00
 8003f68:	40002000 	.word	0x40002000

08003f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b087      	sub	sp, #28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	f023 0201 	bic.w	r2, r3, #1
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f023 030a 	bic.w	r3, r3, #10
 8003fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b087      	sub	sp, #28
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f023 0210 	bic.w	r2, r3, #16
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ff4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	031b      	lsls	r3, r3, #12
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004006:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	f043 0307 	orr.w	r3, r3, #7
 800404c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	609a      	str	r2, [r3, #8]
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800407a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	021a      	lsls	r2, r3, #8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	431a      	orrs	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4313      	orrs	r3, r2
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e05a      	b.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a21      	ldr	r2, [pc, #132]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d022      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004104:	d01d      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d018      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a18      	ldr	r2, [pc, #96]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a17      	ldr	r2, [pc, #92]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a15      	ldr	r2, [pc, #84]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d10c      	bne.n	800415c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4313      	orrs	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40010000 	.word	0x40010000
 8004180:	40000400 	.word	0x40000400
 8004184:	40000800 	.word	0x40000800
 8004188:	40000c00 	.word	0x40000c00
 800418c:	40010400 	.word	0x40010400
 8004190:	40014000 	.word	0x40014000
 8004194:	40001800 	.word	0x40001800

08004198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80041c0:	b5b0      	push	{r4, r5, r7, lr}
 80041c2:	b08c      	sub	sp, #48	; 0x30
 80041c4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80041c6:	2100      	movs	r1, #0
 80041c8:	2000      	movs	r0, #0
 80041ca:	f007 fd3f 	bl	800bc4c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80041ce:	4b20      	ldr	r3, [pc, #128]	; (8004250 <MX_LWIP_Init+0x90>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80041d4:	4b1f      	ldr	r3, [pc, #124]	; (8004254 <MX_LWIP_Init+0x94>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80041da:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <MX_LWIP_Init+0x98>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80041e0:	4b1e      	ldr	r3, [pc, #120]	; (800425c <MX_LWIP_Init+0x9c>)
 80041e2:	9302      	str	r3, [sp, #8]
 80041e4:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <MX_LWIP_Init+0xa0>)
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	2300      	movs	r3, #0
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <MX_LWIP_Init+0x98>)
 80041ee:	4a19      	ldr	r2, [pc, #100]	; (8004254 <MX_LWIP_Init+0x94>)
 80041f0:	4917      	ldr	r1, [pc, #92]	; (8004250 <MX_LWIP_Init+0x90>)
 80041f2:	481c      	ldr	r0, [pc, #112]	; (8004264 <MX_LWIP_Init+0xa4>)
 80041f4:	f008 faf4 	bl	800c7e0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80041f8:	481a      	ldr	r0, [pc, #104]	; (8004264 <MX_LWIP_Init+0xa4>)
 80041fa:	f008 fcab 	bl	800cb54 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80041fe:	4b19      	ldr	r3, [pc, #100]	; (8004264 <MX_LWIP_Init+0xa4>)
 8004200:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004204:	089b      	lsrs	r3, r3, #2
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004210:	4814      	ldr	r0, [pc, #80]	; (8004264 <MX_LWIP_Init+0xa4>)
 8004212:	f008 fcaf 	bl	800cb74 <netif_set_up>
 8004216:	e002      	b.n	800421e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004218:	4812      	ldr	r0, [pc, #72]	; (8004264 <MX_LWIP_Init+0xa4>)
 800421a:	f008 fd17 	bl	800cc4c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800421e:	4912      	ldr	r1, [pc, #72]	; (8004268 <MX_LWIP_Init+0xa8>)
 8004220:	4810      	ldr	r0, [pc, #64]	; (8004264 <MX_LWIP_Init+0xa4>)
 8004222:	f008 fdad 	bl	800cd80 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <MX_LWIP_Init+0xac>)
 8004228:	1d3c      	adds	r4, r7, #4
 800422a:	461d      	mov	r5, r3
 800422c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800422e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004230:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004238:	1d3b      	adds	r3, r7, #4
 800423a:	490a      	ldr	r1, [pc, #40]	; (8004264 <MX_LWIP_Init+0xa4>)
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fd07 	bl	8004c50 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004242:	4808      	ldr	r0, [pc, #32]	; (8004264 <MX_LWIP_Init+0xa4>)
 8004244:	f010 ff62 	bl	801510c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004248:	bf00      	nop
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bdb0      	pop	{r4, r5, r7, pc}
 8004250:	20010d04 	.word	0x20010d04
 8004254:	20010d08 	.word	0x20010d08
 8004258:	20010d0c 	.word	0x20010d0c
 800425c:	0800bb5d 	.word	0x0800bb5d
 8004260:	08004719 	.word	0x08004719
 8004264:	20010ccc 	.word	0x20010ccc
 8004268:	08004271 	.word	0x08004271
 800426c:	0801bfa4 	.word	0x0801bfa4

08004270 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <HAL_ETH_RxCpltCallback+0x1c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fe59 	bl	8004f48 <osSemaphoreRelease>
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000580 	.word	0x20000580

080042a4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80042ac:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <HAL_ETH_TxCpltCallback+0x1c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 fe49 	bl	8004f48 <osSemaphoreRelease>
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000584 	.word	0x20000584

080042c4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fe f837 	bl	8002340 <HAL_ETH_GetDMAError>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d104      	bne.n	80042e6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <HAL_ETH_ErrorCallback+0x2c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fe31 	bl	8004f48 <osSemaphoreRelease>
  }
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000580 	.word	0x20000580

080042f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80042f4:	b5b0      	push	{r4, r5, r7, lr}
 80042f6:	b0a8      	sub	sp, #160	; 0xa0
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800430e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004312:	2264      	movs	r2, #100	; 0x64
 8004314:	2100      	movs	r1, #0
 8004316:	4618      	mov	r0, r3
 8004318:	f016 fc86 	bl	801ac28 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800431c:	4b85      	ldr	r3, [pc, #532]	; (8004534 <low_level_init+0x240>)
 800431e:	4a86      	ldr	r2, [pc, #536]	; (8004538 <low_level_init+0x244>)
 8004320:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004322:	2300      	movs	r3, #0
 8004324:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004328:	2380      	movs	r3, #128	; 0x80
 800432a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800432e:	23e1      	movs	r3, #225	; 0xe1
 8004330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8004334:	2300      	movs	r3, #0
 8004336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800433a:	2300      	movs	r3, #0
 800433c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8004340:	2300      	movs	r3, #0
 8004342:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8004346:	4a7b      	ldr	r2, [pc, #492]	; (8004534 <low_level_init+0x240>)
 8004348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800434c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800434e:	4b79      	ldr	r3, [pc, #484]	; (8004534 <low_level_init+0x240>)
 8004350:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004354:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004356:	4b77      	ldr	r3, [pc, #476]	; (8004534 <low_level_init+0x240>)
 8004358:	4a78      	ldr	r2, [pc, #480]	; (800453c <low_level_init+0x248>)
 800435a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800435c:	4b75      	ldr	r3, [pc, #468]	; (8004534 <low_level_init+0x240>)
 800435e:	4a78      	ldr	r2, [pc, #480]	; (8004540 <low_level_init+0x24c>)
 8004360:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004362:	4b74      	ldr	r3, [pc, #464]	; (8004534 <low_level_init+0x240>)
 8004364:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004368:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800436a:	4872      	ldr	r0, [pc, #456]	; (8004534 <low_level_init+0x240>)
 800436c:	f7fd f92e 	bl	80015cc <HAL_ETH_Init>
 8004370:	4603      	mov	r3, r0
 8004372:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004376:	2238      	movs	r2, #56	; 0x38
 8004378:	2100      	movs	r1, #0
 800437a:	4872      	ldr	r0, [pc, #456]	; (8004544 <low_level_init+0x250>)
 800437c:	f016 fc54 	bl	801ac28 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004380:	4b70      	ldr	r3, [pc, #448]	; (8004544 <low_level_init+0x250>)
 8004382:	2221      	movs	r2, #33	; 0x21
 8004384:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004386:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <low_level_init+0x250>)
 8004388:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800438c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <low_level_init+0x250>)
 8004390:	2200      	movs	r2, #0
 8004392:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004394:	486c      	ldr	r0, [pc, #432]	; (8004548 <low_level_init+0x254>)
 8004396:	f008 f8dd 	bl	800c554 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2206      	movs	r2, #6
 800439e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80043a2:	4b64      	ldr	r3, [pc, #400]	; (8004534 <low_level_init+0x240>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80043ae:	4b61      	ldr	r3, [pc, #388]	; (8004534 <low_level_init+0x240>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	785a      	ldrb	r2, [r3, #1]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80043ba:	4b5e      	ldr	r3, [pc, #376]	; (8004534 <low_level_init+0x240>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	789a      	ldrb	r2, [r3, #2]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80043c6:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <low_level_init+0x240>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	78da      	ldrb	r2, [r3, #3]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80043d2:	4b58      	ldr	r3, [pc, #352]	; (8004534 <low_level_init+0x240>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	791a      	ldrb	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80043de:	4b55      	ldr	r3, [pc, #340]	; (8004534 <low_level_init+0x240>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	795a      	ldrb	r2, [r3, #5]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043f8:	f043 030a 	orr.w	r3, r3, #10
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8004404:	2203      	movs	r2, #3
 8004406:	2100      	movs	r1, #0
 8004408:	2001      	movs	r0, #1
 800440a:	f001 f881 	bl	8005510 <xQueueGenericCreate>
 800440e:	4603      	mov	r3, r0
 8004410:	4a4e      	ldr	r2, [pc, #312]	; (800454c <low_level_init+0x258>)
 8004412:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004414:	2203      	movs	r2, #3
 8004416:	2100      	movs	r1, #0
 8004418:	2001      	movs	r0, #1
 800441a:	f001 f879 	bl	8005510 <xQueueGenericCreate>
 800441e:	4603      	mov	r3, r0
 8004420:	4a4b      	ldr	r2, [pc, #300]	; (8004550 <low_level_init+0x25c>)
 8004422:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004424:	4b4b      	ldr	r3, [pc, #300]	; (8004554 <low_level_init+0x260>)
 8004426:	f107 0408 	add.w	r4, r7, #8
 800442a:	461d      	mov	r5, r3
 800442c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800442e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004430:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004434:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004438:	f107 0308 	add.w	r3, r7, #8
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 fc06 	bl	8004c50 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8004444:	4944      	ldr	r1, [pc, #272]	; (8004558 <low_level_init+0x264>)
 8004446:	4845      	ldr	r0, [pc, #276]	; (800455c <low_level_init+0x268>)
 8004448:	f7fc fe17 	bl	800107a <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 800444c:	4843      	ldr	r0, [pc, #268]	; (800455c <low_level_init+0x268>)
 800444e:	f7fc fe46 	bl	80010de <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8004452:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004456:	2b00      	cmp	r3, #0
 8004458:	d165      	bne.n	8004526 <low_level_init+0x232>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 800445a:	4840      	ldr	r0, [pc, #256]	; (800455c <low_level_init+0x268>)
 800445c:	f7fc fee7 	bl	800122e <DP83848_GetLinkState>
 8004460:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8004464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004468:	2b01      	cmp	r3, #1
 800446a:	dc06      	bgt.n	800447a <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f008 fc57 	bl	800cd20 <netif_set_link_down>
      netif_set_down(netif);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f008 fbea 	bl	800cc4c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004478:	e057      	b.n	800452a <low_level_init+0x236>
 800447a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800447e:	3b02      	subs	r3, #2
 8004480:	2b03      	cmp	r3, #3
 8004482:	d82b      	bhi.n	80044dc <low_level_init+0x1e8>
 8004484:	a201      	add	r2, pc, #4	; (adr r2, 800448c <low_level_init+0x198>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	0800449d 	.word	0x0800449d
 8004490:	080044af 	.word	0x080044af
 8004494:	080044bf 	.word	0x080044bf
 8004498:	080044cf 	.word	0x080044cf
        duplex = ETH_FULLDUPLEX_MODE;
 800449c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80044a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80044ac:	e01f      	b.n	80044ee <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80044b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80044bc:	e017      	b.n	80044ee <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80044be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80044c6:	2300      	movs	r3, #0
 80044c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80044cc:	e00f      	b.n	80044ee <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80044da:	e008      	b.n	80044ee <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80044dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80044e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80044ec:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80044ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044f2:	4619      	mov	r1, r3
 80044f4:	480f      	ldr	r0, [pc, #60]	; (8004534 <low_level_init+0x240>)
 80044f6:	f7fd fdc9 	bl	800208c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80044fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044fe:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8004500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004504:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800450a:	4619      	mov	r1, r3
 800450c:	4809      	ldr	r0, [pc, #36]	; (8004534 <low_level_init+0x240>)
 800450e:	f7fd fea7 	bl	8002260 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004512:	4808      	ldr	r0, [pc, #32]	; (8004534 <low_level_init+0x240>)
 8004514:	f7fd f93b 	bl	800178e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f008 fb2b 	bl	800cb74 <netif_set_up>
    netif_set_link_up(netif);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f008 fbc6 	bl	800ccb0 <netif_set_link_up>
}
 8004524:	e001      	b.n	800452a <low_level_init+0x236>
    Error_Handler();
 8004526:	f7fc fb07 	bl	8000b38 <Error_Handler>
}
 800452a:	bf00      	nop
 800452c:	37a0      	adds	r7, #160	; 0xa0
 800452e:	46bd      	mov	sp, r7
 8004530:	bdb0      	pop	{r4, r5, r7, pc}
 8004532:	bf00      	nop
 8004534:	200157f4 	.word	0x200157f4
 8004538:	40028000 	.word	0x40028000
 800453c:	20010d10 	.word	0x20010d10
 8004540:	20015754 	.word	0x20015754
 8004544:	200158a4 	.word	0x200158a4
 8004548:	0801fe60 	.word	0x0801fe60
 800454c:	20000580 	.word	0x20000580
 8004550:	20000584 	.word	0x20000584
 8004554:	0801bfc8 	.word	0x0801bfc8
 8004558:	2000000c 	.word	0x2000000c
 800455c:	20015734 	.word	0x20015734

08004560 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b092      	sub	sp, #72	; 0x48
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004578:	f107 030c 	add.w	r3, r7, #12
 800457c:	2230      	movs	r2, #48	; 0x30
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f016 fb51 	bl	801ac28 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004586:	f107 030c 	add.w	r3, r7, #12
 800458a:	2230      	movs	r2, #48	; 0x30
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f016 fb4a 	bl	801ac28 <memset>

  for(q = p; q != NULL; q = q->next)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	643b      	str	r3, [r7, #64]	; 0x40
 8004598:	e049      	b.n	800462e <low_level_output+0xce>
  {
    if(i >= ETH_TX_DESC_CNT)
 800459a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459c:	2b03      	cmp	r3, #3
 800459e:	d902      	bls.n	80045a6 <low_level_output+0x46>
      return ERR_IF;
 80045a0:	f06f 030b 	mvn.w	r3, #11
 80045a4:	e069      	b.n	800467a <low_level_output+0x11a>

    Txbuffer[i].buffer = q->payload;
 80045a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045ac:	4613      	mov	r3, r2
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045b8:	4413      	add	r3, r2
 80045ba:	3b3c      	subs	r3, #60	; 0x3c
 80045bc:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80045be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045c0:	895b      	ldrh	r3, [r3, #10]
 80045c2:	4619      	mov	r1, r3
 80045c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045d2:	4413      	add	r3, r2
 80045d4:	3b38      	subs	r3, #56	; 0x38
 80045d6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80045d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d012      	beq.n	8004604 <low_level_output+0xa4>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80045de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	f107 000c 	add.w	r0, r7, #12
 80045e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045e8:	460b      	mov	r3, r1
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	440b      	add	r3, r1
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	18c1      	adds	r1, r0, r3
 80045f2:	4613      	mov	r3, r2
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045fe:	4413      	add	r3, r2
 8004600:	3b34      	subs	r3, #52	; 0x34
 8004602:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <low_level_output+0xc2>
    {
      Txbuffer[i].next = NULL;
 800460c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800461a:	4413      	add	r3, r2
 800461c:	3b34      	subs	r3, #52	; 0x34
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004624:	3301      	adds	r3, #1
 8004626:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	643b      	str	r3, [r7, #64]	; 0x40
 800462e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1b2      	bne.n	800459a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	891b      	ldrh	r3, [r3, #8]
 8004638:	461a      	mov	r2, r3
 800463a:	4b12      	ldr	r3, [pc, #72]	; (8004684 <low_level_output+0x124>)
 800463c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800463e:	4a11      	ldr	r2, [pc, #68]	; (8004684 <low_level_output+0x124>)
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004646:	4a0f      	ldr	r2, [pc, #60]	; (8004684 <low_level_output+0x124>)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800464c:	6838      	ldr	r0, [r7, #0]
 800464e:	f009 f855 	bl	800d6fc <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004652:	490c      	ldr	r1, [pc, #48]	; (8004684 <low_level_output+0x124>)
 8004654:	480c      	ldr	r0, [pc, #48]	; (8004688 <low_level_output+0x128>)
 8004656:	f7fd f9b4 	bl	80019c2 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800465a:	bf00      	nop
 800465c:	4b0b      	ldr	r3, [pc, #44]	; (800468c <low_level_output+0x12c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f04f 31ff 	mov.w	r1, #4294967295
 8004664:	4618      	mov	r0, r3
 8004666:	f000 fc21 	bl	8004eac <osSemaphoreWait>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1f5      	bne.n	800465c <low_level_output+0xfc>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004670:	4805      	ldr	r0, [pc, #20]	; (8004688 <low_level_output+0x128>)
 8004672:	f7fd fb3b 	bl	8001cec <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004676:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800467a:	4618      	mov	r0, r3
 800467c:	3748      	adds	r7, #72	; 0x48
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	200158a4 	.word	0x200158a4
 8004688:	200157f4 	.word	0x200157f4
 800468c:	20000584 	.word	0x20000584

08004690 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <low_level_input+0x2c>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80046a4:	f107 030c 	add.w	r3, r7, #12
 80046a8:	4619      	mov	r1, r3
 80046aa:	4805      	ldr	r0, [pc, #20]	; (80046c0 <low_level_input+0x30>)
 80046ac:	f7fd f9e6 	bl	8001a7c <HAL_ETH_ReadData>
  }

  return p;
 80046b0:	68fb      	ldr	r3, [r7, #12]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	2000057c 	.word	0x2000057c
 80046c0:	200157f4 	.word	0x200157f4

080046c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80046d4:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <ethernetif_input+0x50>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f04f 31ff 	mov.w	r1, #4294967295
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fbe5 	bl	8004eac <osSemaphoreWait>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f5      	bne.n	80046d4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80046e8:	68b8      	ldr	r0, [r7, #8]
 80046ea:	f7ff ffd1 	bl	8004690 <low_level_input>
 80046ee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	4798      	blx	r3
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f008 ff52 	bl	800d5b0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ea      	bne.n	80046e8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004712:	e7df      	b.n	80046d4 <ethernetif_input+0x10>
 8004714:	20000580 	.word	0x20000580

08004718 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <ethernetif_init+0x1c>
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <ethernetif_init+0x48>)
 8004728:	f240 12df 	movw	r2, #479	; 0x1df
 800472c:	490d      	ldr	r1, [pc, #52]	; (8004764 <ethernetif_init+0x4c>)
 800472e:	480e      	ldr	r0, [pc, #56]	; (8004768 <ethernetif_init+0x50>)
 8004730:	f016 fe1a 	bl	801b368 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2273      	movs	r2, #115	; 0x73
 8004738:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2274      	movs	r2, #116	; 0x74
 8004740:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a09      	ldr	r2, [pc, #36]	; (800476c <ethernetif_init+0x54>)
 8004748:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a08      	ldr	r2, [pc, #32]	; (8004770 <ethernetif_init+0x58>)
 800474e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff fdcf 	bl	80042f4 <low_level_init>

  return ERR_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	0801bfe4 	.word	0x0801bfe4
 8004764:	0801c000 	.word	0x0801c000
 8004768:	0801c010 	.word	0x0801c010
 800476c:	08016fd9 	.word	0x08016fd9
 8004770:	08004561 	.word	0x08004561

08004774 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004780:	68f9      	ldr	r1, [r7, #12]
 8004782:	4809      	ldr	r0, [pc, #36]	; (80047a8 <pbuf_free_custom+0x34>)
 8004784:	f007 ffd6 	bl	800c734 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004788:	4b08      	ldr	r3, [pc, #32]	; (80047ac <pbuf_free_custom+0x38>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d107      	bne.n	80047a0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <pbuf_free_custom+0x38>)
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004796:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <pbuf_free_custom+0x3c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fbd4 	bl	8004f48 <osSemaphoreRelease>
  }
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	0801fe60 	.word	0x0801fe60
 80047ac:	2000057c 	.word	0x2000057c
 80047b0:	20000580 	.word	0x20000580

080047b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047b8:	f7fc fdf6 	bl	80013a8 <HAL_GetTick>
 80047bc:	4603      	mov	r3, r0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08e      	sub	sp, #56	; 0x38
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	60da      	str	r2, [r3, #12]
 80047da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a4a      	ldr	r2, [pc, #296]	; (800490c <HAL_ETH_MspInit+0x148>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	f040 808d 	bne.w	8004902 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80047e8:	2300      	movs	r3, #0
 80047ea:	623b      	str	r3, [r7, #32]
 80047ec:	4b48      	ldr	r3, [pc, #288]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f0:	4a47      	ldr	r2, [pc, #284]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 80047f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047f6:	6313      	str	r3, [r2, #48]	; 0x30
 80047f8:	4b45      	ldr	r3, [pc, #276]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	4b41      	ldr	r3, [pc, #260]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	4a40      	ldr	r2, [pc, #256]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 800480e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004812:	6313      	str	r3, [r2, #48]	; 0x30
 8004814:	4b3e      	ldr	r3, [pc, #248]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	2300      	movs	r3, #0
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	4a39      	ldr	r2, [pc, #228]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 800482a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800482e:	6313      	str	r3, [r2, #48]	; 0x30
 8004830:	4b37      	ldr	r3, [pc, #220]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	4b33      	ldr	r3, [pc, #204]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	4a32      	ldr	r2, [pc, #200]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 8004846:	f043 0304 	orr.w	r3, r3, #4
 800484a:	6313      	str	r3, [r2, #48]	; 0x30
 800484c:	4b30      	ldr	r3, [pc, #192]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	4b2c      	ldr	r3, [pc, #176]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	4a2b      	ldr	r2, [pc, #172]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6313      	str	r3, [r2, #48]	; 0x30
 8004868:	4b29      	ldr	r3, [pc, #164]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	4b25      	ldr	r3, [pc, #148]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	4a24      	ldr	r2, [pc, #144]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 800487e:	f043 0302 	orr.w	r3, r3, #2
 8004882:	6313      	str	r3, [r2, #48]	; 0x30
 8004884:	4b22      	ldr	r3, [pc, #136]	; (8004910 <HAL_ETH_MspInit+0x14c>)
 8004886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004890:	2332      	movs	r3, #50	; 0x32
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004894:	2302      	movs	r3, #2
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004898:	2300      	movs	r3, #0
 800489a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800489c:	2303      	movs	r3, #3
 800489e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048a0:	230b      	movs	r3, #11
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048a8:	4619      	mov	r1, r3
 80048aa:	481a      	ldr	r0, [pc, #104]	; (8004914 <HAL_ETH_MspInit+0x150>)
 80048ac:	f7fe f962 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80048b0:	2386      	movs	r3, #134	; 0x86
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b4:	2302      	movs	r3, #2
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b8:	2300      	movs	r3, #0
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048bc:	2303      	movs	r3, #3
 80048be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048c0:	230b      	movs	r3, #11
 80048c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048c8:	4619      	mov	r1, r3
 80048ca:	4813      	ldr	r0, [pc, #76]	; (8004918 <HAL_ETH_MspInit+0x154>)
 80048cc:	f7fe f952 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80048d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d6:	2302      	movs	r3, #2
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048de:	2303      	movs	r3, #3
 80048e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048e2:	230b      	movs	r3, #11
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ea:	4619      	mov	r1, r3
 80048ec:	480b      	ldr	r0, [pc, #44]	; (800491c <HAL_ETH_MspInit+0x158>)
 80048ee:	f7fe f941 	bl	8002b74 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80048f2:	2200      	movs	r2, #0
 80048f4:	2105      	movs	r1, #5
 80048f6:	203d      	movs	r0, #61	; 0x3d
 80048f8:	f7fc fe3e 	bl	8001578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80048fc:	203d      	movs	r0, #61	; 0x3d
 80048fe:	f7fc fe57 	bl	80015b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004902:	bf00      	nop
 8004904:	3738      	adds	r7, #56	; 0x38
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40028000 	.word	0x40028000
 8004910:	40023800 	.word	0x40023800
 8004914:	40020800 	.word	0x40020800
 8004918:	40020000 	.word	0x40020000
 800491c:	40020400 	.word	0x40020400

08004920 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004924:	4802      	ldr	r0, [pc, #8]	; (8004930 <ETH_PHY_IO_Init+0x10>)
 8004926:	f7fd fcb5 	bl	8002294 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	200157f4 	.word	0x200157f4

08004934 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  return 0;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	68f9      	ldr	r1, [r7, #12]
 8004956:	4807      	ldr	r0, [pc, #28]	; (8004974 <ETH_PHY_IO_ReadReg+0x30>)
 8004958:	f7fd fb04 	bl	8001f64 <HAL_ETH_ReadPHYRegister>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	e000      	b.n	800496a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	200157f4 	.word	0x200157f4

08004978 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	68f9      	ldr	r1, [r7, #12]
 800498a:	4807      	ldr	r0, [pc, #28]	; (80049a8 <ETH_PHY_IO_WriteReg+0x30>)
 800498c:	f7fd fb35 	bl	8001ffa <HAL_ETH_WritePHYRegister>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004996:	f04f 33ff 	mov.w	r3, #4294967295
 800499a:	e000      	b.n	800499e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	200157f4 	.word	0x200157f4

080049ac <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80049b0:	f7fc fcfa 	bl	80013a8 <HAL_GetTick>
 80049b4:	4603      	mov	r3, r0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b0a0      	sub	sp, #128	; 0x80
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80049c4:	f107 0308 	add.w	r3, r7, #8
 80049c8:	2264      	movs	r2, #100	; 0x64
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f016 f92b 	bl	801ac28 <memset>
  int32_t PHYLinkState = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049da:	2300      	movs	r3, #0
 80049dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80049de:	2300      	movs	r3, #0
 80049e0:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80049e6:	483a      	ldr	r0, [pc, #232]	; (8004ad0 <ethernet_link_thread+0x114>)
 80049e8:	f7fc fc21 	bl	800122e <DP83848_GetLinkState>
 80049ec:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80049ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049f4:	089b      	lsrs	r3, r3, #2
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00c      	beq.n	8004a1a <ethernet_link_thread+0x5e>
 8004a00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	dc09      	bgt.n	8004a1a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8004a06:	4833      	ldr	r0, [pc, #204]	; (8004ad4 <ethernet_link_thread+0x118>)
 8004a08:	f7fc ff56 	bl	80018b8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004a0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a0e:	f008 f91d 	bl	800cc4c <netif_set_down>
    netif_set_link_down(netif);
 8004a12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a14:	f008 f984 	bl	800cd20 <netif_set_link_down>
 8004a18:	e055      	b.n	8004ac6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d14e      	bne.n	8004ac6 <ethernet_link_thread+0x10a>
 8004a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	dd4b      	ble.n	8004ac6 <ethernet_link_thread+0x10a>
 8004a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a30:	3b02      	subs	r3, #2
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d82a      	bhi.n	8004a8c <ethernet_link_thread+0xd0>
 8004a36:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <ethernet_link_thread+0x80>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a4d 	.word	0x08004a4d
 8004a40:	08004a5f 	.word	0x08004a5f
 8004a44:	08004a6f 	.word	0x08004a6f
 8004a48:	08004a7f 	.word	0x08004a7f
  {
    switch (PHYLinkState)
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a50:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a56:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a5c:	e017      	b.n	8004a8e <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a66:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a6c:	e00f      	b.n	8004a8e <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a72:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004a74:	2300      	movs	r3, #0
 8004a76:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a7c:	e007      	b.n	8004a8e <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004a82:	2300      	movs	r3, #0
 8004a84:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a86:	2301      	movs	r3, #1
 8004a88:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a8a:	e000      	b.n	8004a8e <ethernet_link_thread+0xd2>
    default:
      break;
 8004a8c:	bf00      	nop
    }

    if(linkchanged)
 8004a8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d018      	beq.n	8004ac6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004a94:	f107 0308 	add.w	r3, r7, #8
 8004a98:	4619      	mov	r1, r3
 8004a9a:	480e      	ldr	r0, [pc, #56]	; (8004ad4 <ethernet_link_thread+0x118>)
 8004a9c:	f7fd faf6 	bl	800208c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004aa8:	f107 0308 	add.w	r3, r7, #8
 8004aac:	4619      	mov	r1, r3
 8004aae:	4809      	ldr	r0, [pc, #36]	; (8004ad4 <ethernet_link_thread+0x118>)
 8004ab0:	f7fd fbd6 	bl	8002260 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004ab4:	4807      	ldr	r0, [pc, #28]	; (8004ad4 <ethernet_link_thread+0x118>)
 8004ab6:	f7fc fe07 	bl	80016c8 <HAL_ETH_Start>
      netif_set_up(netif);
 8004aba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004abc:	f008 f85a 	bl	800cb74 <netif_set_up>
      netif_set_link_up(netif);
 8004ac0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ac2:	f008 f8f5 	bl	800ccb0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004ac6:	2064      	movs	r0, #100	; 0x64
 8004ac8:	f000 f90e 	bl	8004ce8 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004acc:	e78b      	b.n	80049e6 <ethernet_link_thread+0x2a>
 8004ace:	bf00      	nop
 8004ad0:	20015734 	.word	0x20015734
 8004ad4:	200157f4 	.word	0x200157f4

08004ad8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004ae0:	4812      	ldr	r0, [pc, #72]	; (8004b2c <HAL_ETH_RxAllocateCallback+0x54>)
 8004ae2:	f007 fdb3 	bl	800c64c <memp_malloc_pool>
 8004ae6:	60f8      	str	r0, [r7, #12]
  if (p)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d014      	beq.n	8004b18 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f103 0220 	add.w	r2, r3, #32
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a0d      	ldr	r2, [pc, #52]	; (8004b30 <HAL_ETH_RxAllocateCallback+0x58>)
 8004afc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004b06:	9201      	str	r2, [sp, #4]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2241      	movs	r2, #65	; 0x41
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2000      	movs	r0, #0
 8004b12:	f008 fb61 	bl	800d1d8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004b16:	e005      	b.n	8004b24 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004b18:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	0801fe60 	.word	0x0801fe60
 8004b30:	08004775 	.word	0x08004775
 8004b34:	2000057c 	.word	0x2000057c

08004b38 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b089      	sub	sp, #36	; 0x24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3b20      	subs	r3, #32
 8004b56:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	2200      	movs	r2, #0
 8004b62:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	887a      	ldrh	r2, [r7, #2]
 8004b68:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e003      	b.n	8004b82 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	e009      	b.n	8004ba4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	891a      	ldrh	r2, [r3, #8]
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	4413      	add	r3, r2
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f2      	bne.n	8004b90 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004baa:	bf00      	nop
 8004bac:	bf00      	nop
 8004bae:	3724      	adds	r7, #36	; 0x24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f008 fcf5 	bl	800d5b0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004be0:	2b84      	cmp	r3, #132	; 0x84
 8004be2:	d005      	beq.n	8004bf0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004be4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	3303      	adds	r3, #3
 8004bee:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c04:	f3ef 8305 	mrs	r3, IPSR
 8004c08:	607b      	str	r3, [r7, #4]
  return(result);
 8004c0a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c26:	f001 fdcb 	bl	80067c0 <vTaskStartScheduler>
  
  return osOK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004c34:	f7ff ffe3 	bl	8004bfe <inHandlerMode>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004c3e:	f001 fee3 	bl	8006a08 <xTaskGetTickCountFromISR>
 8004c42:	4603      	mov	r3, r0
 8004c44:	e002      	b.n	8004c4c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004c46:	f001 fecf 	bl	80069e8 <xTaskGetTickCount>
 8004c4a:	4603      	mov	r3, r0
  }
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c52:	b089      	sub	sp, #36	; 0x24
 8004c54:	af04      	add	r7, sp, #16
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d020      	beq.n	8004ca4 <osThreadCreate+0x54>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01c      	beq.n	8004ca4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685c      	ldr	r4, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681d      	ldr	r5, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691e      	ldr	r6, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff ffa6 	bl	8004bce <makeFreeRtosPriority>
 8004c82:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c8c:	9202      	str	r2, [sp, #8]
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	9100      	str	r1, [sp, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	4632      	mov	r2, r6
 8004c96:	4629      	mov	r1, r5
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f001 fb23 	bl	80062e4 <xTaskCreateStatic>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e01c      	b.n	8004cde <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685c      	ldr	r4, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cb0:	b29e      	uxth	r6, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff ff88 	bl	8004bce <makeFreeRtosPriority>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	f107 030c 	add.w	r3, r7, #12
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	9200      	str	r2, [sp, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	4632      	mov	r2, r6
 8004ccc:	4629      	mov	r1, r5
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f001 fb65 	bl	800639e <xTaskCreate>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d001      	beq.n	8004cde <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004cde:	68fb      	ldr	r3, [r7, #12]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ce8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <osDelay+0x16>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	e000      	b.n	8004d00 <osDelay+0x18>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 fd29 	bl	8006758 <vTaskDelay>
  
  return osOK;
 8004d06:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4619      	mov	r1, r3
 8004d26:	2001      	movs	r0, #1
 8004d28:	f000 fc7d 	bl	8005626 <xQueueCreateMutexStatic>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	e003      	b.n	8004d38 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004d30:	2001      	movs	r0, #1
 8004d32:	f000 fc60 	bl	80055f6 <xQueueCreateMutex>
 8004d36:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <osMutexWait+0x18>
    return osErrorParameter;
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	e03a      	b.n	8004dce <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d103      	bne.n	8004d6c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004d64:	f04f 33ff 	mov.w	r3, #4294967295
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	e009      	b.n	8004d80 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d006      	beq.n	8004d80 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <osMutexWait+0x40>
      ticks = 1;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004d80:	f7ff ff3d 	bl	8004bfe <inHandlerMode>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d017      	beq.n	8004dba <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004d8a:	f107 0308 	add.w	r3, r7, #8
 8004d8e:	461a      	mov	r2, r3
 8004d90:	2100      	movs	r1, #0
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 f874 	bl	8005e80 <xQueueReceiveFromISR>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d001      	beq.n	8004da2 <osMutexWait+0x62>
      return osErrorOS;
 8004d9e:	23ff      	movs	r3, #255	; 0xff
 8004da0:	e015      	b.n	8004dce <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d011      	beq.n	8004dcc <osMutexWait+0x8c>
 8004da8:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <osMutexWait+0x98>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	e008      	b.n	8004dcc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004dba:	68f9      	ldr	r1, [r7, #12]
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 ff53 	bl	8005c68 <xQueueSemaphoreTake>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d001      	beq.n	8004dcc <osMutexWait+0x8c>
    return osErrorOS;
 8004dc8:	23ff      	movs	r3, #255	; 0xff
 8004dca:	e000      	b.n	8004dce <osMutexWait+0x8e>
  }
  
  return osOK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	e000ed04 	.word	0xe000ed04

08004ddc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004dec:	f7ff ff07 	bl	8004bfe <inHandlerMode>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d016      	beq.n	8004e24 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fdc6 	bl	800598e <xQueueGiveFromISR>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d001      	beq.n	8004e0c <osMutexRelease+0x30>
      return osErrorOS;
 8004e08:	23ff      	movs	r3, #255	; 0xff
 8004e0a:	e017      	b.n	8004e3c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d013      	beq.n	8004e3a <osMutexRelease+0x5e>
 8004e12:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <osMutexRelease+0x68>)
 8004e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	e00a      	b.n	8004e3a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004e24:	2300      	movs	r3, #0
 8004e26:	2200      	movs	r2, #0
 8004e28:	2100      	movs	r1, #0
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fc16 	bl	800565c <xQueueGenericSend>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d001      	beq.n	8004e3a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004e36:	23ff      	movs	r3, #255	; 0xff
 8004e38:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00f      	beq.n	8004e7a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10a      	bne.n	8004e76 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2203      	movs	r2, #3
 8004e66:	9200      	str	r2, [sp, #0]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	2001      	movs	r0, #1
 8004e6e:	f000 fad7 	bl	8005420 <xQueueGenericCreateStatic>
 8004e72:	4603      	mov	r3, r0
 8004e74:	e016      	b.n	8004ea4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e014      	b.n	8004ea4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d110      	bne.n	8004ea2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004e80:	2203      	movs	r2, #3
 8004e82:	2100      	movs	r1, #0
 8004e84:	2001      	movs	r0, #1
 8004e86:	f000 fb43 	bl	8005510 <xQueueGenericCreate>
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <osSemaphoreCreate+0x56>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2200      	movs	r2, #0
 8004e96:	2100      	movs	r1, #0
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fbdf 	bl	800565c <xQueueGenericSend>
      return sema;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	e000      	b.n	8004ea4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004ea2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	e03a      	b.n	8004f3a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d103      	bne.n	8004ed8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	e009      	b.n	8004eec <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d006      	beq.n	8004eec <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <osSemaphoreWait+0x40>
      ticks = 1;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004eec:	f7ff fe87 	bl	8004bfe <inHandlerMode>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d017      	beq.n	8004f26 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004ef6:	f107 0308 	add.w	r3, r7, #8
 8004efa:	461a      	mov	r2, r3
 8004efc:	2100      	movs	r1, #0
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 ffbe 	bl	8005e80 <xQueueReceiveFromISR>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d001      	beq.n	8004f0e <osSemaphoreWait+0x62>
      return osErrorOS;
 8004f0a:	23ff      	movs	r3, #255	; 0xff
 8004f0c:	e015      	b.n	8004f3a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d011      	beq.n	8004f38 <osSemaphoreWait+0x8c>
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <osSemaphoreWait+0x98>)
 8004f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	e008      	b.n	8004f38 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fe9d 	bl	8005c68 <xQueueSemaphoreTake>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d001      	beq.n	8004f38 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004f34:	23ff      	movs	r3, #255	; 0xff
 8004f36:	e000      	b.n	8004f3a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004f58:	f7ff fe51 	bl	8004bfe <inHandlerMode>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d016      	beq.n	8004f90 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004f62:	f107 0308 	add.w	r3, r7, #8
 8004f66:	4619      	mov	r1, r3
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fd10 	bl	800598e <xQueueGiveFromISR>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d001      	beq.n	8004f78 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004f74:	23ff      	movs	r3, #255	; 0xff
 8004f76:	e017      	b.n	8004fa8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d013      	beq.n	8004fa6 <osSemaphoreRelease+0x5e>
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <osSemaphoreRelease+0x68>)
 8004f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	e00a      	b.n	8004fa6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004f90:	2300      	movs	r3, #0
 8004f92:	2200      	movs	r2, #0
 8004f94:	2100      	movs	r1, #0
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fb60 	bl	800565c <xQueueGenericSend>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d001      	beq.n	8004fa6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004fa2:	23ff      	movs	r3, #255	; 0xff
 8004fa4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	e000ed04 	.word	0xe000ed04

08004fb4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004fbc:	f7ff fe1f 	bl	8004bfe <inHandlerMode>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004fc6:	2382      	movs	r3, #130	; 0x82
 8004fc8:	e003      	b.n	8004fd2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 f814 	bl	8005ff8 <vQueueDelete>

  return osOK; 
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004fda:	b590      	push	{r4, r7, lr}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af02      	add	r7, sp, #8
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d011      	beq.n	8005010 <osMessageCreate+0x36>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00d      	beq.n	8005010 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6859      	ldr	r1, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2400      	movs	r4, #0
 8005006:	9400      	str	r4, [sp, #0]
 8005008:	f000 fa0a 	bl	8005420 <xQueueGenericCreateStatic>
 800500c:	4603      	mov	r3, r0
 800500e:	e008      	b.n	8005022 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	4619      	mov	r1, r3
 800501c:	f000 fa78 	bl	8005510 <xQueueGenericCreate>
 8005020:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	bd90      	pop	{r4, r7, pc}
	...

0800502c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <osMessagePut+0x1e>
    ticks = 1;
 8005046:	2301      	movs	r3, #1
 8005048:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800504a:	f7ff fdd8 	bl	8004bfe <inHandlerMode>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d018      	beq.n	8005086 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005054:	f107 0210 	add.w	r2, r7, #16
 8005058:	f107 0108 	add.w	r1, r7, #8
 800505c:	2300      	movs	r3, #0
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fbfa 	bl	8005858 <xQueueGenericSendFromISR>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d001      	beq.n	800506e <osMessagePut+0x42>
      return osErrorOS;
 800506a:	23ff      	movs	r3, #255	; 0xff
 800506c:	e018      	b.n	80050a0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d014      	beq.n	800509e <osMessagePut+0x72>
 8005074:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <osMessagePut+0x7c>)
 8005076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	e00b      	b.n	800509e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005086:	f107 0108 	add.w	r1, r7, #8
 800508a:	2300      	movs	r3, #0
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fae4 	bl	800565c <xQueueGenericSend>
 8005094:	4603      	mov	r3, r0
 8005096:	2b01      	cmp	r3, #1
 8005098:	d001      	beq.n	800509e <osMessagePut+0x72>
      return osErrorOS;
 800509a:	23ff      	movs	r3, #255	; 0xff
 800509c:	e000      	b.n	80050a0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b08b      	sub	sp, #44	; 0x2c
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	617b      	str	r3, [r7, #20]
    return event;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	461c      	mov	r4, r3
 80050ce:	f107 0314 	add.w	r3, r7, #20
 80050d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80050da:	e054      	b.n	8005186 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80050dc:	2300      	movs	r3, #0
 80050de:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d103      	bne.n	80050f4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
 80050f2:	e009      	b.n	8005108 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d006      	beq.n	8005108 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <osMessageGet+0x5c>
      ticks = 1;
 8005104:	2301      	movs	r3, #1
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005108:	f7ff fd79 	bl	8004bfe <inHandlerMode>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01c      	beq.n	800514c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005112:	f107 0220 	add.w	r2, r7, #32
 8005116:	f107 0314 	add.w	r3, r7, #20
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	68b8      	ldr	r0, [r7, #8]
 8005120:	f000 feae 	bl	8005e80 <xQueueReceiveFromISR>
 8005124:	4603      	mov	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d102      	bne.n	8005130 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800512a:	2310      	movs	r3, #16
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	e001      	b.n	8005134 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01d      	beq.n	8005176 <osMessageGet+0xca>
 800513a:	4b15      	ldr	r3, [pc, #84]	; (8005190 <osMessageGet+0xe4>)
 800513c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	e014      	b.n	8005176 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	3304      	adds	r3, #4
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	4619      	mov	r1, r3
 8005156:	68b8      	ldr	r0, [r7, #8]
 8005158:	f000 fca6 	bl	8005aa8 <xQueueReceive>
 800515c:	4603      	mov	r3, r0
 800515e:	2b01      	cmp	r3, #1
 8005160:	d102      	bne.n	8005168 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005162:	2310      	movs	r3, #16
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	e006      	b.n	8005176 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <osMessageGet+0xc6>
 800516e:	2300      	movs	r3, #0
 8005170:	e000      	b.n	8005174 <osMessageGet+0xc8>
 8005172:	2340      	movs	r3, #64	; 0x40
 8005174:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	461c      	mov	r4, r3
 800517a:	f107 0314 	add.w	r3, r7, #20
 800517e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	372c      	adds	r7, #44	; 0x2c
 800518a:	46bd      	mov	sp, r7
 800518c:	bd90      	pop	{r4, r7, pc}
 800518e:	bf00      	nop
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800519c:	f7ff fd2f 	bl	8004bfe <inHandlerMode>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d004      	beq.n	80051b0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 ff08 	bl	8005fbc <uxQueueMessagesWaitingFromISR>
 80051ac:	4603      	mov	r3, r0
 80051ae:	e003      	b.n	80051b8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fee5 	bl	8005f80 <uxQueueMessagesWaiting>
 80051b6:	4603      	mov	r3, r0
  }
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80051c8:	f7ff fd19 	bl	8004bfe <inHandlerMode>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <osMessageDelete+0x16>
    return osErrorISR;
 80051d2:	2382      	movs	r3, #130	; 0x82
 80051d4:	e003      	b.n	80051de <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 ff0e 	bl	8005ff8 <vQueueDelete>

  return osOK; 
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f103 0208 	add.w	r2, r3, #8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f04f 32ff 	mov.w	r2, #4294967295
 80051fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f103 0208 	add.w	r2, r3, #8
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f103 0208 	add.w	r2, r3, #8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	601a      	str	r2, [r3, #0]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529e:	d103      	bne.n	80052a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e00c      	b.n	80052c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3308      	adds	r3, #8
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e002      	b.n	80052b6 <vListInsert+0x2e>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d2f6      	bcs.n	80052b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	601a      	str	r2, [r3, #0]
}
 80052ee:	bf00      	nop
 80052f0:	3714      	adds	r7, #20
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052fa:	b480      	push	{r7}
 80052fc:	b085      	sub	sp, #20
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6892      	ldr	r2, [r2, #8]
 8005310:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6852      	ldr	r2, [r2, #4]
 800531a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	429a      	cmp	r2, r3
 8005324:	d103      	bne.n	800532e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	1e5a      	subs	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
	...

08005350 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800537a:	f002 f9a3 	bl	80076c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005386:	68f9      	ldr	r1, [r7, #12]
 8005388:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800538a:	fb01 f303 	mul.w	r3, r1, r3
 800538e:	441a      	add	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	3b01      	subs	r3, #1
 80053ac:	68f9      	ldr	r1, [r7, #12]
 80053ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	441a      	add	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	22ff      	movs	r2, #255	; 0xff
 80053be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	22ff      	movs	r2, #255	; 0xff
 80053c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d114      	bne.n	80053fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01a      	beq.n	800540e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3310      	adds	r3, #16
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 fc63 	bl	8006ca8 <xTaskRemoveFromEventList>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d012      	beq.n	800540e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053e8:	4b0c      	ldr	r3, [pc, #48]	; (800541c <xQueueGenericReset+0xcc>)
 80053ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	e009      	b.n	800540e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3310      	adds	r3, #16
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff fef1 	bl	80051e6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3324      	adds	r3, #36	; 0x24
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff feec 	bl	80051e6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800540e:	f002 f989 	bl	8007724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005412:	2301      	movs	r3, #1
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08e      	sub	sp, #56	; 0x38
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <xQueueGenericCreateStatic+0x52>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <xQueueGenericCreateStatic+0x56>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <xQueueGenericCreateStatic+0x58>
 8005476:	2300      	movs	r3, #0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10a      	bne.n	8005492 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	623b      	str	r3, [r7, #32]
}
 800548e:	bf00      	nop
 8005490:	e7fe      	b.n	8005490 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <xQueueGenericCreateStatic+0x7e>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <xQueueGenericCreateStatic+0x82>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <xQueueGenericCreateStatic+0x84>
 80054a2:	2300      	movs	r3, #0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	61fb      	str	r3, [r7, #28]
}
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054be:	2348      	movs	r3, #72	; 0x48
 80054c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b48      	cmp	r3, #72	; 0x48
 80054c6:	d00a      	beq.n	80054de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	61bb      	str	r3, [r7, #24]
}
 80054da:	bf00      	nop
 80054dc:	e7fe      	b.n	80054dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00d      	beq.n	8005506 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	9300      	str	r3, [sp, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f83f 	bl	8005584 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005508:	4618      	mov	r0, r3
 800550a:	3730      	adds	r7, #48	; 0x30
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	; 0x28
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10a      	bne.n	800553a <xQueueGenericCreate+0x2a>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	613b      	str	r3, [r7, #16]
}
 8005536:	bf00      	nop
 8005538:	e7fe      	b.n	8005538 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	fb02 f303 	mul.w	r3, r2, r3
 8005542:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	3348      	adds	r3, #72	; 0x48
 8005548:	4618      	mov	r0, r3
 800554a:	f002 f9dd 	bl	8007908 <pvPortMalloc>
 800554e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d011      	beq.n	800557a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	3348      	adds	r3, #72	; 0x48
 800555e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005568:	79fa      	ldrb	r2, [r7, #7]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	4613      	mov	r3, r2
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	68b9      	ldr	r1, [r7, #8]
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f805 	bl	8005584 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800557a:	69bb      	ldr	r3, [r7, #24]
	}
 800557c:	4618      	mov	r0, r3
 800557e:	3720      	adds	r7, #32
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d103      	bne.n	80055a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	e002      	b.n	80055a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055b2:	2101      	movs	r1, #1
 80055b4:	69b8      	ldr	r0, [r7, #24]
 80055b6:	f7ff fecb 	bl	8005350 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b082      	sub	sp, #8
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00e      	beq.n	80055ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80055e2:	2300      	movs	r3, #0
 80055e4:	2200      	movs	r2, #0
 80055e6:	2100      	movs	r1, #0
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f837 	bl	800565c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80055ee:	bf00      	nop
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b086      	sub	sp, #24
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	4603      	mov	r3, r0
 80055fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005600:	2301      	movs	r3, #1
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	2300      	movs	r3, #0
 8005606:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	461a      	mov	r2, r3
 800560c:	6939      	ldr	r1, [r7, #16]
 800560e:	6978      	ldr	r0, [r7, #20]
 8005610:	f7ff ff7e 	bl	8005510 <xQueueGenericCreate>
 8005614:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7ff ffd3 	bl	80055c2 <prvInitialiseMutex>

		return xNewQueue;
 800561c:	68fb      	ldr	r3, [r7, #12]
	}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005626:	b580      	push	{r7, lr}
 8005628:	b088      	sub	sp, #32
 800562a:	af02      	add	r7, sp, #8
 800562c:	4603      	mov	r3, r0
 800562e:	6039      	str	r1, [r7, #0]
 8005630:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005632:	2301      	movs	r3, #1
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2200      	movs	r2, #0
 8005642:	6939      	ldr	r1, [r7, #16]
 8005644:	6978      	ldr	r0, [r7, #20]
 8005646:	f7ff feeb 	bl	8005420 <xQueueGenericCreateStatic>
 800564a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff ffb8 	bl	80055c2 <prvInitialiseMutex>

		return xNewQueue;
 8005652:	68fb      	ldr	r3, [r7, #12]
	}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08e      	sub	sp, #56	; 0x38
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800566a:	2300      	movs	r3, #0
 800566c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <xQueueGenericSend+0x32>
	__asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800568a:	bf00      	nop
 800568c:	e7fe      	b.n	800568c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <xQueueGenericSend+0x40>
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <xQueueGenericSend+0x44>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <xQueueGenericSend+0x46>
 80056a0:	2300      	movs	r3, #0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10a      	bne.n	80056bc <xQueueGenericSend+0x60>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056b8:	bf00      	nop
 80056ba:	e7fe      	b.n	80056ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d103      	bne.n	80056ca <xQueueGenericSend+0x6e>
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <xQueueGenericSend+0x72>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xQueueGenericSend+0x74>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <xQueueGenericSend+0x8e>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	623b      	str	r3, [r7, #32]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ea:	f001 fc9d 	bl	8007028 <xTaskGetSchedulerState>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d102      	bne.n	80056fa <xQueueGenericSend+0x9e>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <xQueueGenericSend+0xa2>
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <xQueueGenericSend+0xa4>
 80056fe:	2300      	movs	r3, #0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <xQueueGenericSend+0xbe>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	61fb      	str	r3, [r7, #28]
}
 8005716:	bf00      	nop
 8005718:	e7fe      	b.n	8005718 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800571a:	f001 ffd3 	bl	80076c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005726:	429a      	cmp	r2, r3
 8005728:	d302      	bcc.n	8005730 <xQueueGenericSend+0xd4>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d129      	bne.n	8005784 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005736:	f000 fc9a 	bl	800606e <prvCopyDataToQueue>
 800573a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d010      	beq.n	8005766 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	3324      	adds	r3, #36	; 0x24
 8005748:	4618      	mov	r0, r3
 800574a:	f001 faad 	bl	8006ca8 <xTaskRemoveFromEventList>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d013      	beq.n	800577c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005754:	4b3f      	ldr	r3, [pc, #252]	; (8005854 <xQueueGenericSend+0x1f8>)
 8005756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	e00a      	b.n	800577c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800576c:	4b39      	ldr	r3, [pc, #228]	; (8005854 <xQueueGenericSend+0x1f8>)
 800576e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800577c:	f001 ffd2 	bl	8007724 <vPortExitCritical>
				return pdPASS;
 8005780:	2301      	movs	r3, #1
 8005782:	e063      	b.n	800584c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800578a:	f001 ffcb 	bl	8007724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800578e:	2300      	movs	r3, #0
 8005790:	e05c      	b.n	800584c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	4618      	mov	r0, r3
 800579e:	f001 fae5 	bl	8006d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057a2:	2301      	movs	r3, #1
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057a6:	f001 ffbd 	bl	8007724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057aa:	f001 f873 	bl	8006894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057ae:	f001 ff89 	bl	80076c4 <vPortEnterCritical>
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b8:	b25b      	sxtb	r3, r3
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057be:	d103      	bne.n	80057c8 <xQueueGenericSend+0x16c>
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057ce:	b25b      	sxtb	r3, r3
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d103      	bne.n	80057de <xQueueGenericSend+0x182>
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057de:	f001 ffa1 	bl	8007724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057e2:	1d3a      	adds	r2, r7, #4
 80057e4:	f107 0314 	add.w	r3, r7, #20
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 fad4 	bl	8006d98 <xTaskCheckForTimeOut>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d124      	bne.n	8005840 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057f8:	f000 fd31 	bl	800625e <prvIsQueueFull>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d018      	beq.n	8005834 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005804:	3310      	adds	r3, #16
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	4611      	mov	r1, r2
 800580a:	4618      	mov	r0, r3
 800580c:	f001 fa28 	bl	8006c60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005812:	f000 fcbc 	bl	800618e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005816:	f001 f84b 	bl	80068b0 <xTaskResumeAll>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	f47f af7c 	bne.w	800571a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005822:	4b0c      	ldr	r3, [pc, #48]	; (8005854 <xQueueGenericSend+0x1f8>)
 8005824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	e772      	b.n	800571a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005836:	f000 fcaa 	bl	800618e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800583a:	f001 f839 	bl	80068b0 <xTaskResumeAll>
 800583e:	e76c      	b.n	800571a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005842:	f000 fca4 	bl	800618e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005846:	f001 f833 	bl	80068b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800584a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800584c:	4618      	mov	r0, r3
 800584e:	3738      	adds	r7, #56	; 0x38
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b090      	sub	sp, #64	; 0x40
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005882:	bf00      	nop
 8005884:	e7fe      	b.n	8005884 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d103      	bne.n	8005894 <xQueueGenericSendFromISR+0x3c>
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <xQueueGenericSendFromISR+0x40>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <xQueueGenericSendFromISR+0x42>
 8005898:	2300      	movs	r3, #0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d103      	bne.n	80058c2 <xQueueGenericSendFromISR+0x6a>
 80058ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d101      	bne.n	80058c6 <xQueueGenericSendFromISR+0x6e>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e000      	b.n	80058c8 <xQueueGenericSendFromISR+0x70>
 80058c6:	2300      	movs	r3, #0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10a      	bne.n	80058e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	623b      	str	r3, [r7, #32]
}
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058e2:	f001 ffd1 	bl	8007888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058e6:	f3ef 8211 	mrs	r2, BASEPRI
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	61fa      	str	r2, [r7, #28]
 80058fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590a:	429a      	cmp	r2, r3
 800590c:	d302      	bcc.n	8005914 <xQueueGenericSendFromISR+0xbc>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d12f      	bne.n	8005974 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800591a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800591e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800592a:	f000 fba0 	bl	800606e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800592e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d112      	bne.n	800595e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	d016      	beq.n	800596e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	3324      	adds	r3, #36	; 0x24
 8005944:	4618      	mov	r0, r3
 8005946:	f001 f9af 	bl	8006ca8 <xTaskRemoveFromEventList>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00e      	beq.n	800596e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00b      	beq.n	800596e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	e007      	b.n	800596e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800595e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005962:	3301      	adds	r3, #1
 8005964:	b2db      	uxtb	r3, r3
 8005966:	b25a      	sxtb	r2, r3
 8005968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800596e:	2301      	movs	r3, #1
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005972:	e001      	b.n	8005978 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005974:	2300      	movs	r3, #0
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005982:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005986:	4618      	mov	r0, r3
 8005988:	3740      	adds	r7, #64	; 0x40
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b08e      	sub	sp, #56	; 0x38
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10a      	bne.n	80059b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	623b      	str	r3, [r7, #32]
}
 80059b4:	bf00      	nop
 80059b6:	e7fe      	b.n	80059b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	61fb      	str	r3, [r7, #28]
}
 80059d2:	bf00      	nop
 80059d4:	e7fe      	b.n	80059d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d103      	bne.n	80059e6 <xQueueGiveFromISR+0x58>
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <xQueueGiveFromISR+0x5c>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <xQueueGiveFromISR+0x5e>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueGiveFromISR+0x78>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	61bb      	str	r3, [r7, #24]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a06:	f001 ff3f 	bl	8007888 <vPortValidateInterruptPriority>
	__asm volatile
 8005a0a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	617a      	str	r2, [r7, #20]
 8005a20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005a22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d22b      	bcs.n	8005a8e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005a48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d112      	bne.n	8005a78 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d016      	beq.n	8005a88 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5c:	3324      	adds	r3, #36	; 0x24
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f922 	bl	8006ca8 <xTaskRemoveFromEventList>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00e      	beq.n	8005a88 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2201      	movs	r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	e007      	b.n	8005a88 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	b25a      	sxtb	r2, r3
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a8c:	e001      	b.n	8005a92 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f383 8811 	msr	BASEPRI, r3
}
 8005a9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3738      	adds	r7, #56	; 0x38
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08c      	sub	sp, #48	; 0x30
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <xQueueReceive+0x30>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	623b      	str	r3, [r7, #32]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <xQueueReceive+0x3e>
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <xQueueReceive+0x42>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <xQueueReceive+0x44>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10a      	bne.n	8005b06 <xQueueReceive+0x5e>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	61fb      	str	r3, [r7, #28]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b06:	f001 fa8f 	bl	8007028 <xTaskGetSchedulerState>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <xQueueReceive+0x6e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <xQueueReceive+0x72>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <xQueueReceive+0x74>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueReceive+0x8e>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	61bb      	str	r3, [r7, #24]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b36:	f001 fdc5 	bl	80076c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d01f      	beq.n	8005b86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4a:	f000 fafa 	bl	8006142 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	1e5a      	subs	r2, r3, #1
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00f      	beq.n	8005b7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	3310      	adds	r3, #16
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 f8a0 	bl	8006ca8 <xTaskRemoveFromEventList>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005b6e:	4b3d      	ldr	r3, [pc, #244]	; (8005c64 <xQueueReceive+0x1bc>)
 8005b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005b7e:	f001 fdd1 	bl	8007724 <vPortExitCritical>
				return pdPASS;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e069      	b.n	8005c5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d103      	bne.n	8005b94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b8c:	f001 fdca 	bl	8007724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e062      	b.n	8005c5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b9a:	f107 0310 	add.w	r3, r7, #16
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 f8e4 	bl	8006d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ba8:	f001 fdbc 	bl	8007724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bac:	f000 fe72 	bl	8006894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bb0:	f001 fd88 	bl	80076c4 <vPortEnterCritical>
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d103      	bne.n	8005bca <xQueueReceive+0x122>
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd0:	b25b      	sxtb	r3, r3
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d103      	bne.n	8005be0 <xQueueReceive+0x138>
 8005bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be0:	f001 fda0 	bl	8007724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005be4:	1d3a      	adds	r2, r7, #4
 8005be6:	f107 0310 	add.w	r3, r7, #16
 8005bea:	4611      	mov	r1, r2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 f8d3 	bl	8006d98 <xTaskCheckForTimeOut>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d123      	bne.n	8005c40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bfa:	f000 fb1a 	bl	8006232 <prvIsQueueEmpty>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d017      	beq.n	8005c34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	3324      	adds	r3, #36	; 0x24
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 f827 	bl	8006c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c14:	f000 fabb 	bl	800618e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c18:	f000 fe4a 	bl	80068b0 <xTaskResumeAll>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d189      	bne.n	8005b36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005c22:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <xQueueReceive+0x1bc>)
 8005c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	e780      	b.n	8005b36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c36:	f000 faaa 	bl	800618e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c3a:	f000 fe39 	bl	80068b0 <xTaskResumeAll>
 8005c3e:	e77a      	b.n	8005b36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c42:	f000 faa4 	bl	800618e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c46:	f000 fe33 	bl	80068b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c4c:	f000 faf1 	bl	8006232 <prvIsQueueEmpty>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f43f af6f 	beq.w	8005b36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005c58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3730      	adds	r7, #48	; 0x30
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	e000ed04 	.word	0xe000ed04

08005c68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	623b      	str	r3, [r7, #32]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	61fb      	str	r3, [r7, #28]
}
 8005cb4:	bf00      	nop
 8005cb6:	e7fe      	b.n	8005cb6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cb8:	f001 f9b6 	bl	8007028 <xTaskGetSchedulerState>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d102      	bne.n	8005cc8 <xQueueSemaphoreTake+0x60>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <xQueueSemaphoreTake+0x64>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <xQueueSemaphoreTake+0x66>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	61bb      	str	r3, [r7, #24]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ce8:	f001 fcec 	bl	80076c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d024      	beq.n	8005d42 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	1e5a      	subs	r2, r3, #1
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d104      	bne.n	8005d12 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005d08:	f001 fb36 	bl	8007378 <pvTaskIncrementMutexHeldCount>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00f      	beq.n	8005d3a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	3310      	adds	r3, #16
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 ffc2 	bl	8006ca8 <xTaskRemoveFromEventList>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d2a:	4b54      	ldr	r3, [pc, #336]	; (8005e7c <xQueueSemaphoreTake+0x214>)
 8005d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	f3bf 8f4f 	dsb	sy
 8005d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d3a:	f001 fcf3 	bl	8007724 <vPortExitCritical>
				return pdPASS;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e097      	b.n	8005e72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d111      	bne.n	8005d6c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	617b      	str	r3, [r7, #20]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005d64:	f001 fcde 	bl	8007724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e082      	b.n	8005e72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d72:	f107 030c 	add.w	r3, r7, #12
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fff8 	bl	8006d6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d80:	f001 fcd0 	bl	8007724 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d84:	f000 fd86 	bl	8006894 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d88:	f001 fc9c 	bl	80076c4 <vPortEnterCritical>
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d92:	b25b      	sxtb	r3, r3
 8005d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d98:	d103      	bne.n	8005da2 <xQueueSemaphoreTake+0x13a>
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005da8:	b25b      	sxtb	r3, r3
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dae:	d103      	bne.n	8005db8 <xQueueSemaphoreTake+0x150>
 8005db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db8:	f001 fcb4 	bl	8007724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dbc:	463a      	mov	r2, r7
 8005dbe:	f107 030c 	add.w	r3, r7, #12
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 ffe7 	bl	8006d98 <xTaskCheckForTimeOut>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d132      	bne.n	8005e36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005dd2:	f000 fa2e 	bl	8006232 <prvIsQueueEmpty>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d026      	beq.n	8005e2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005de4:	f001 fc6e 	bl	80076c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f001 f939 	bl	8007064 <xTaskPriorityInherit>
 8005df2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005df4:	f001 fc96 	bl	8007724 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfa:	3324      	adds	r3, #36	; 0x24
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 ff2d 	bl	8006c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e08:	f000 f9c1 	bl	800618e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e0c:	f000 fd50 	bl	80068b0 <xTaskResumeAll>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f47f af68 	bne.w	8005ce8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <xQueueSemaphoreTake+0x214>)
 8005e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	e75e      	b.n	8005ce8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005e2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e2c:	f000 f9af 	bl	800618e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e30:	f000 fd3e 	bl	80068b0 <xTaskResumeAll>
 8005e34:	e758      	b.n	8005ce8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e38:	f000 f9a9 	bl	800618e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e3c:	f000 fd38 	bl	80068b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e42:	f000 f9f6 	bl	8006232 <prvIsQueueEmpty>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f43f af4d 	beq.w	8005ce8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005e54:	f001 fc36 	bl	80076c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e5a:	f000 f8f0 	bl	800603e <prvGetDisinheritPriorityAfterTimeout>
 8005e5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e66:	4618      	mov	r0, r3
 8005e68:	f001 f9f8 	bl	800725c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005e6c:	f001 fc5a 	bl	8007724 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3738      	adds	r7, #56	; 0x38
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08e      	sub	sp, #56	; 0x38
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10a      	bne.n	8005eac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	623b      	str	r3, [r7, #32]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <xQueueReceiveFromISR+0x3a>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <xQueueReceiveFromISR+0x3e>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <xQueueReceiveFromISR+0x40>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10a      	bne.n	8005eda <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	61fb      	str	r3, [r7, #28]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eda:	f001 fcd5 	bl	8007888 <vPortValidateInterruptPriority>
	__asm volatile
 8005ede:	f3ef 8211 	mrs	r2, BASEPRI
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	61ba      	str	r2, [r7, #24]
 8005ef4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ef6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d02f      	beq.n	8005f66 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f14:	f000 f915 	bl	8006142 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	1e5a      	subs	r2, r3, #1
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d112      	bne.n	8005f50 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d016      	beq.n	8005f60 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	3310      	adds	r3, #16
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 feb6 	bl	8006ca8 <xTaskRemoveFromEventList>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00e      	beq.n	8005f60 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e007      	b.n	8005f60 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f54:	3301      	adds	r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	b25a      	sxtb	r2, r3
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005f60:	2301      	movs	r3, #1
 8005f62:	637b      	str	r3, [r7, #52]	; 0x34
 8005f64:	e001      	b.n	8005f6a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005f66:	2300      	movs	r3, #0
 8005f68:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f383 8811 	msr	BASEPRI, r3
}
 8005f74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3738      	adds	r7, #56	; 0x38
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	60bb      	str	r3, [r7, #8]
}
 8005fa0:	bf00      	nop
 8005fa2:	e7fe      	b.n	8005fa2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005fa4:	f001 fb8e 	bl	80076c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005fae:	f001 fbb9 	bl	8007724 <vPortExitCritical>

	return uxReturn;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	60fb      	str	r3, [r7, #12]
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005fea:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005fec:	4618      	mov	r0, r3
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <vQueueDelete+0x28>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	60bb      	str	r3, [r7, #8]
}
 800601c:	bf00      	nop
 800601e:	e7fe      	b.n	800601e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f935 	bl	8006290 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f001 fd35 	bl	8007aa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	2b00      	cmp	r3, #0
 800604c:	d006      	beq.n	800605c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f1c3 0307 	rsb	r3, r3, #7
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	e001      	b.n	8006060 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006060:	68fb      	ldr	r3, [r7, #12]
	}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b086      	sub	sp, #24
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800607a:	2300      	movs	r3, #0
 800607c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10d      	bne.n	80060a8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d14d      	bne.n	8006130 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4618      	mov	r0, r3
 800609a:	f001 f859 	bl	8007150 <xTaskPriorityDisinherit>
 800609e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	609a      	str	r2, [r3, #8]
 80060a6:	e043      	b.n	8006130 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d119      	bne.n	80060e2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6858      	ldr	r0, [r3, #4]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	461a      	mov	r2, r3
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	f014 fd8d 	bl	801abd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	441a      	add	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d32b      	bcc.n	8006130 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	605a      	str	r2, [r3, #4]
 80060e0:	e026      	b.n	8006130 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68d8      	ldr	r0, [r3, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	461a      	mov	r2, r3
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	f014 fd73 	bl	801abd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	425b      	negs	r3, r3
 80060fc:	441a      	add	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	429a      	cmp	r2, r3
 800610c:	d207      	bcs.n	800611e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	425b      	negs	r3, r3
 8006118:	441a      	add	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d105      	bne.n	8006130 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	3b01      	subs	r3, #1
 800612e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006138:	697b      	ldr	r3, [r7, #20]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	2b00      	cmp	r3, #0
 8006152:	d018      	beq.n	8006186 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	441a      	add	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d303      	bcc.n	8006176 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68d9      	ldr	r1, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	461a      	mov	r2, r3
 8006180:	6838      	ldr	r0, [r7, #0]
 8006182:	f014 fd29 	bl	801abd8 <memcpy>
	}
}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006196:	f001 fa95 	bl	80076c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061a2:	e011      	b.n	80061c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d012      	beq.n	80061d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3324      	adds	r3, #36	; 0x24
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fd79 	bl	8006ca8 <xTaskRemoveFromEventList>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061bc:	f000 fe4e 	bl	8006e5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	dce9      	bgt.n	80061a4 <prvUnlockQueue+0x16>
 80061d0:	e000      	b.n	80061d4 <prvUnlockQueue+0x46>
					break;
 80061d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	22ff      	movs	r2, #255	; 0xff
 80061d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061dc:	f001 faa2 	bl	8007724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061e0:	f001 fa70 	bl	80076c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061ec:	e011      	b.n	8006212 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d012      	beq.n	800621c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3310      	adds	r3, #16
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fd54 	bl	8006ca8 <xTaskRemoveFromEventList>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006206:	f000 fe29 	bl	8006e5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	3b01      	subs	r3, #1
 800620e:	b2db      	uxtb	r3, r3
 8006210:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006212:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006216:	2b00      	cmp	r3, #0
 8006218:	dce9      	bgt.n	80061ee <prvUnlockQueue+0x60>
 800621a:	e000      	b.n	800621e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800621c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	22ff      	movs	r2, #255	; 0xff
 8006222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006226:	f001 fa7d 	bl	8007724 <vPortExitCritical>
}
 800622a:	bf00      	nop
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800623a:	f001 fa43 	bl	80076c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	2b00      	cmp	r3, #0
 8006244:	d102      	bne.n	800624c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006246:	2301      	movs	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	e001      	b.n	8006250 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006250:	f001 fa68 	bl	8007724 <vPortExitCritical>

	return xReturn;
 8006254:	68fb      	ldr	r3, [r7, #12]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006266:	f001 fa2d 	bl	80076c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006272:	429a      	cmp	r2, r3
 8006274:	d102      	bne.n	800627c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006276:	2301      	movs	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	e001      	b.n	8006280 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006280:	f001 fa50 	bl	8007724 <vPortExitCritical>

	return xReturn;
 8006284:	68fb      	ldr	r3, [r7, #12]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e016      	b.n	80062cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800629e:	4a10      	ldr	r2, [pc, #64]	; (80062e0 <vQueueUnregisterQueue+0x50>)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4413      	add	r3, r2
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d10b      	bne.n	80062c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80062ae:	4a0c      	ldr	r2, [pc, #48]	; (80062e0 <vQueueUnregisterQueue+0x50>)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2100      	movs	r1, #0
 80062b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80062b8:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <vQueueUnregisterQueue+0x50>)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4413      	add	r3, r2
 80062c0:	2200      	movs	r2, #0
 80062c2:	605a      	str	r2, [r3, #4]
				break;
 80062c4:	e006      	b.n	80062d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b07      	cmp	r3, #7
 80062d0:	d9e5      	bls.n	800629e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	200158dc 	.word	0x200158dc

080062e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08e      	sub	sp, #56	; 0x38
 80062e8:	af04      	add	r7, sp, #16
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80062f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10a      	bne.n	800630e <xTaskCreateStatic+0x2a>
	__asm volatile
 80062f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fc:	f383 8811 	msr	BASEPRI, r3
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	623b      	str	r3, [r7, #32]
}
 800630a:	bf00      	nop
 800630c:	e7fe      	b.n	800630c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <xTaskCreateStatic+0x46>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	61fb      	str	r3, [r7, #28]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800632a:	23b4      	movs	r3, #180	; 0xb4
 800632c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2bb4      	cmp	r3, #180	; 0xb4
 8006332:	d00a      	beq.n	800634a <xTaskCreateStatic+0x66>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	61bb      	str	r3, [r7, #24]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800634a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	2b00      	cmp	r3, #0
 8006350:	d01e      	beq.n	8006390 <xTaskCreateStatic+0xac>
 8006352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01b      	beq.n	8006390 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006360:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	2202      	movs	r2, #2
 8006366:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800636a:	2300      	movs	r3, #0
 800636c:	9303      	str	r3, [sp, #12]
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	9302      	str	r3, [sp, #8]
 8006372:	f107 0314 	add.w	r3, r7, #20
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f850 	bl	8006428 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006388:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800638a:	f000 f8eb 	bl	8006564 <prvAddNewTaskToReadyList>
 800638e:	e001      	b.n	8006394 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006394:	697b      	ldr	r3, [r7, #20]
	}
 8006396:	4618      	mov	r0, r3
 8006398:	3728      	adds	r7, #40	; 0x28
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b08c      	sub	sp, #48	; 0x30
 80063a2:	af04      	add	r7, sp, #16
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	603b      	str	r3, [r7, #0]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 faa8 	bl	8007908 <pvPortMalloc>
 80063b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00e      	beq.n	80063de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80063c0:	20b4      	movs	r0, #180	; 0xb4
 80063c2:	f001 faa1 	bl	8007908 <pvPortMalloc>
 80063c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
 80063d4:	e005      	b.n	80063e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f001 fb62 	bl	8007aa0 <vPortFree>
 80063dc:	e001      	b.n	80063e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d017      	beq.n	8006418 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063f0:	88fa      	ldrh	r2, [r7, #6]
 80063f2:	2300      	movs	r3, #0
 80063f4:	9303      	str	r3, [sp, #12]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68b9      	ldr	r1, [r7, #8]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f80e 	bl	8006428 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800640c:	69f8      	ldr	r0, [r7, #28]
 800640e:	f000 f8a9 	bl	8006564 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006412:	2301      	movs	r3, #1
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	e002      	b.n	800641e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006418:	f04f 33ff 	mov.w	r3, #4294967295
 800641c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800641e:	69bb      	ldr	r3, [r7, #24]
	}
 8006420:	4618      	mov	r0, r3
 8006422:	3720      	adds	r7, #32
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b088      	sub	sp, #32
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006440:	3b01      	subs	r3, #1
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	f023 0307 	bic.w	r3, r3, #7
 800644e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <prvInitialiseNewTask+0x48>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	617b      	str	r3, [r7, #20]
}
 800646c:	bf00      	nop
 800646e:	e7fe      	b.n	800646e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01f      	beq.n	80064b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006476:	2300      	movs	r3, #0
 8006478:	61fb      	str	r3, [r7, #28]
 800647a:	e012      	b.n	80064a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	7819      	ldrb	r1, [r3, #0]
 8006484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4413      	add	r3, r2
 800648a:	3334      	adds	r3, #52	; 0x34
 800648c:	460a      	mov	r2, r1
 800648e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d006      	beq.n	80064aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	3301      	adds	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2b0f      	cmp	r3, #15
 80064a6:	d9e9      	bls.n	800647c <prvInitialiseNewTask+0x54>
 80064a8:	e000      	b.n	80064ac <prvInitialiseNewTask+0x84>
			{
				break;
 80064aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064b4:	e003      	b.n	80064be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	2b06      	cmp	r3, #6
 80064c2:	d901      	bls.n	80064c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064c4:	2306      	movs	r3, #6
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80064d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d6:	2200      	movs	r2, #0
 80064d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	3304      	adds	r3, #4
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fea1 	bl	8005226 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	3318      	adds	r3, #24
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe fe9c 	bl	8005226 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	f1c3 0207 	rsb	r2, r3, #7
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006502:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	2200      	movs	r2, #0
 8006508:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	2200      	movs	r2, #0
 8006510:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	334c      	adds	r3, #76	; 0x4c
 8006518:	2260      	movs	r2, #96	; 0x60
 800651a:	2100      	movs	r1, #0
 800651c:	4618      	mov	r0, r3
 800651e:	f014 fb83 	bl	801ac28 <memset>
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <prvInitialiseNewTask+0x130>)
 8006526:	651a      	str	r2, [r3, #80]	; 0x50
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	4a0c      	ldr	r2, [pc, #48]	; (800655c <prvInitialiseNewTask+0x134>)
 800652c:	655a      	str	r2, [r3, #84]	; 0x54
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	4a0b      	ldr	r2, [pc, #44]	; (8006560 <prvInitialiseNewTask+0x138>)
 8006532:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	68f9      	ldr	r1, [r7, #12]
 8006538:	69b8      	ldr	r0, [r7, #24]
 800653a:	f000 ff97 	bl	800746c <pxPortInitialiseStack>
 800653e:	4602      	mov	r2, r0
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006550:	bf00      	nop
 8006552:	3720      	adds	r7, #32
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	0802017c 	.word	0x0802017c
 800655c:	0802019c 	.word	0x0802019c
 8006560:	0802015c 	.word	0x0802015c

08006564 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800656c:	f001 f8aa 	bl	80076c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006570:	4b2a      	ldr	r3, [pc, #168]	; (800661c <prvAddNewTaskToReadyList+0xb8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a29      	ldr	r2, [pc, #164]	; (800661c <prvAddNewTaskToReadyList+0xb8>)
 8006578:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800657a:	4b29      	ldr	r3, [pc, #164]	; (8006620 <prvAddNewTaskToReadyList+0xbc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006582:	4a27      	ldr	r2, [pc, #156]	; (8006620 <prvAddNewTaskToReadyList+0xbc>)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006588:	4b24      	ldr	r3, [pc, #144]	; (800661c <prvAddNewTaskToReadyList+0xb8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d110      	bne.n	80065b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006590:	f000 fc88 	bl	8006ea4 <prvInitialiseTaskLists>
 8006594:	e00d      	b.n	80065b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006596:	4b23      	ldr	r3, [pc, #140]	; (8006624 <prvAddNewTaskToReadyList+0xc0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800659e:	4b20      	ldr	r3, [pc, #128]	; (8006620 <prvAddNewTaskToReadyList+0xbc>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d802      	bhi.n	80065b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065ac:	4a1c      	ldr	r2, [pc, #112]	; (8006620 <prvAddNewTaskToReadyList+0xbc>)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065b2:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <prvAddNewTaskToReadyList+0xc4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3301      	adds	r3, #1
 80065b8:	4a1b      	ldr	r2, [pc, #108]	; (8006628 <prvAddNewTaskToReadyList+0xc4>)
 80065ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	2201      	movs	r2, #1
 80065c2:	409a      	lsls	r2, r3
 80065c4:	4b19      	ldr	r3, [pc, #100]	; (800662c <prvAddNewTaskToReadyList+0xc8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	4a18      	ldr	r2, [pc, #96]	; (800662c <prvAddNewTaskToReadyList+0xc8>)
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4a15      	ldr	r2, [pc, #84]	; (8006630 <prvAddNewTaskToReadyList+0xcc>)
 80065dc:	441a      	add	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3304      	adds	r3, #4
 80065e2:	4619      	mov	r1, r3
 80065e4:	4610      	mov	r0, r2
 80065e6:	f7fe fe2b 	bl	8005240 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80065ea:	f001 f89b 	bl	8007724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065ee:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <prvAddNewTaskToReadyList+0xc0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00e      	beq.n	8006614 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065f6:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <prvAddNewTaskToReadyList+0xbc>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	429a      	cmp	r2, r3
 8006602:	d207      	bcs.n	8006614 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006604:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <prvAddNewTaskToReadyList+0xd0>)
 8006606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000688 	.word	0x20000688
 8006620:	20000588 	.word	0x20000588
 8006624:	20000694 	.word	0x20000694
 8006628:	200006a4 	.word	0x200006a4
 800662c:	20000690 	.word	0x20000690
 8006630:	2000058c 	.word	0x2000058c
 8006634:	e000ed04 	.word	0xe000ed04

08006638 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006640:	f001 f840 	bl	80076c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <vTaskDelete+0x18>
 800664a:	4b39      	ldr	r3, [pc, #228]	; (8006730 <vTaskDelete+0xf8>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	e000      	b.n	8006652 <vTaskDelete+0x1a>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3304      	adds	r3, #4
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fe4e 	bl	80052fa <uxListRemove>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d115      	bne.n	8006690 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006668:	4932      	ldr	r1, [pc, #200]	; (8006734 <vTaskDelete+0xfc>)
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <vTaskDelete+0x58>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	2201      	movs	r2, #1
 8006680:	fa02 f303 	lsl.w	r3, r2, r3
 8006684:	43da      	mvns	r2, r3
 8006686:	4b2c      	ldr	r3, [pc, #176]	; (8006738 <vTaskDelete+0x100>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4013      	ands	r3, r2
 800668c:	4a2a      	ldr	r2, [pc, #168]	; (8006738 <vTaskDelete+0x100>)
 800668e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006694:	2b00      	cmp	r3, #0
 8006696:	d004      	beq.n	80066a2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3318      	adds	r3, #24
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe fe2c 	bl	80052fa <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80066a2:	4b26      	ldr	r3, [pc, #152]	; (800673c <vTaskDelete+0x104>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	4a24      	ldr	r2, [pc, #144]	; (800673c <vTaskDelete+0x104>)
 80066aa:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80066ac:	4b20      	ldr	r3, [pc, #128]	; (8006730 <vTaskDelete+0xf8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d10b      	bne.n	80066ce <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4619      	mov	r1, r3
 80066bc:	4820      	ldr	r0, [pc, #128]	; (8006740 <vTaskDelete+0x108>)
 80066be:	f7fe fdbf 	bl	8005240 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80066c2:	4b20      	ldr	r3, [pc, #128]	; (8006744 <vTaskDelete+0x10c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3301      	adds	r3, #1
 80066c8:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <vTaskDelete+0x10c>)
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	e009      	b.n	80066e2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80066ce:	4b1e      	ldr	r3, [pc, #120]	; (8006748 <vTaskDelete+0x110>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <vTaskDelete+0x110>)
 80066d6:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fc51 	bl	8006f80 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80066de:	f000 fc83 	bl	8006fe8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80066e2:	f001 f81f 	bl	8007724 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80066e6:	4b19      	ldr	r3, [pc, #100]	; (800674c <vTaskDelete+0x114>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01b      	beq.n	8006726 <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80066ee:	4b10      	ldr	r3, [pc, #64]	; (8006730 <vTaskDelete+0xf8>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d116      	bne.n	8006726 <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80066f8:	4b15      	ldr	r3, [pc, #84]	; (8006750 <vTaskDelete+0x118>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <vTaskDelete+0xde>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60bb      	str	r3, [r7, #8]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8006716:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <vTaskDelete+0x11c>)
 8006718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000588 	.word	0x20000588
 8006734:	2000058c 	.word	0x2000058c
 8006738:	20000690 	.word	0x20000690
 800673c:	200006a4 	.word	0x200006a4
 8006740:	2000065c 	.word	0x2000065c
 8006744:	20000670 	.word	0x20000670
 8006748:	20000688 	.word	0x20000688
 800674c:	20000694 	.word	0x20000694
 8006750:	200006b0 	.word	0x200006b0
 8006754:	e000ed04 	.word	0xe000ed04

08006758 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006760:	2300      	movs	r3, #0
 8006762:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d017      	beq.n	800679a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800676a:	4b13      	ldr	r3, [pc, #76]	; (80067b8 <vTaskDelay+0x60>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <vTaskDelay+0x30>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60bb      	str	r3, [r7, #8]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006788:	f000 f884 	bl	8006894 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800678c:	2100      	movs	r1, #0
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fe06 	bl	80073a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006794:	f000 f88c 	bl	80068b0 <xTaskResumeAll>
 8006798:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d107      	bne.n	80067b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80067a0:	4b06      	ldr	r3, [pc, #24]	; (80067bc <vTaskDelay+0x64>)
 80067a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067b0:	bf00      	nop
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	200006b0 	.word	0x200006b0
 80067bc:	e000ed04 	.word	0xe000ed04

080067c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08a      	sub	sp, #40	; 0x28
 80067c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067ce:	463a      	mov	r2, r7
 80067d0:	1d39      	adds	r1, r7, #4
 80067d2:	f107 0308 	add.w	r3, r7, #8
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7f9 fece 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	9202      	str	r2, [sp, #8]
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	2300      	movs	r3, #0
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	2300      	movs	r3, #0
 80067ec:	460a      	mov	r2, r1
 80067ee:	4921      	ldr	r1, [pc, #132]	; (8006874 <vTaskStartScheduler+0xb4>)
 80067f0:	4821      	ldr	r0, [pc, #132]	; (8006878 <vTaskStartScheduler+0xb8>)
 80067f2:	f7ff fd77 	bl	80062e4 <xTaskCreateStatic>
 80067f6:	4603      	mov	r3, r0
 80067f8:	4a20      	ldr	r2, [pc, #128]	; (800687c <vTaskStartScheduler+0xbc>)
 80067fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067fc:	4b1f      	ldr	r3, [pc, #124]	; (800687c <vTaskStartScheduler+0xbc>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006804:	2301      	movs	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	e001      	b.n	800680e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d11b      	bne.n	800684c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	613b      	str	r3, [r7, #16]
}
 8006826:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006828:	4b15      	ldr	r3, [pc, #84]	; (8006880 <vTaskStartScheduler+0xc0>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	334c      	adds	r3, #76	; 0x4c
 800682e:	4a15      	ldr	r2, [pc, #84]	; (8006884 <vTaskStartScheduler+0xc4>)
 8006830:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <vTaskStartScheduler+0xc8>)
 8006834:	f04f 32ff 	mov.w	r2, #4294967295
 8006838:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800683a:	4b14      	ldr	r3, [pc, #80]	; (800688c <vTaskStartScheduler+0xcc>)
 800683c:	2201      	movs	r2, #1
 800683e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006840:	4b13      	ldr	r3, [pc, #76]	; (8006890 <vTaskStartScheduler+0xd0>)
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006846:	f000 fe9b 	bl	8007580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800684a:	e00e      	b.n	800686a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d10a      	bne.n	800686a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	60fb      	str	r3, [r7, #12]
}
 8006866:	bf00      	nop
 8006868:	e7fe      	b.n	8006868 <vTaskStartScheduler+0xa8>
}
 800686a:	bf00      	nop
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	0801c038 	.word	0x0801c038
 8006878:	08006e75 	.word	0x08006e75
 800687c:	200006ac 	.word	0x200006ac
 8006880:	20000588 	.word	0x20000588
 8006884:	20000040 	.word	0x20000040
 8006888:	200006a8 	.word	0x200006a8
 800688c:	20000694 	.word	0x20000694
 8006890:	2000068c 	.word	0x2000068c

08006894 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006898:	4b04      	ldr	r3, [pc, #16]	; (80068ac <vTaskSuspendAll+0x18>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3301      	adds	r3, #1
 800689e:	4a03      	ldr	r2, [pc, #12]	; (80068ac <vTaskSuspendAll+0x18>)
 80068a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068a2:	bf00      	nop
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	200006b0 	.word	0x200006b0

080068b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068be:	4b41      	ldr	r3, [pc, #260]	; (80069c4 <xTaskResumeAll+0x114>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10a      	bne.n	80068dc <xTaskResumeAll+0x2c>
	__asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	603b      	str	r3, [r7, #0]
}
 80068d8:	bf00      	nop
 80068da:	e7fe      	b.n	80068da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068dc:	f000 fef2 	bl	80076c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068e0:	4b38      	ldr	r3, [pc, #224]	; (80069c4 <xTaskResumeAll+0x114>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	4a37      	ldr	r2, [pc, #220]	; (80069c4 <xTaskResumeAll+0x114>)
 80068e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ea:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <xTaskResumeAll+0x114>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d161      	bne.n	80069b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068f2:	4b35      	ldr	r3, [pc, #212]	; (80069c8 <xTaskResumeAll+0x118>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d05d      	beq.n	80069b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068fa:	e02e      	b.n	800695a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068fc:	4b33      	ldr	r3, [pc, #204]	; (80069cc <xTaskResumeAll+0x11c>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3318      	adds	r3, #24
 8006908:	4618      	mov	r0, r3
 800690a:	f7fe fcf6 	bl	80052fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3304      	adds	r3, #4
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe fcf1 	bl	80052fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691c:	2201      	movs	r2, #1
 800691e:	409a      	lsls	r2, r3
 8006920:	4b2b      	ldr	r3, [pc, #172]	; (80069d0 <xTaskResumeAll+0x120>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4313      	orrs	r3, r2
 8006926:	4a2a      	ldr	r2, [pc, #168]	; (80069d0 <xTaskResumeAll+0x120>)
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4a27      	ldr	r2, [pc, #156]	; (80069d4 <xTaskResumeAll+0x124>)
 8006938:	441a      	add	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3304      	adds	r3, #4
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f7fe fc7d 	bl	8005240 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694a:	4b23      	ldr	r3, [pc, #140]	; (80069d8 <xTaskResumeAll+0x128>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	429a      	cmp	r2, r3
 8006952:	d302      	bcc.n	800695a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006954:	4b21      	ldr	r3, [pc, #132]	; (80069dc <xTaskResumeAll+0x12c>)
 8006956:	2201      	movs	r2, #1
 8006958:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800695a:	4b1c      	ldr	r3, [pc, #112]	; (80069cc <xTaskResumeAll+0x11c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1cc      	bne.n	80068fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006968:	f000 fb3e 	bl	8006fe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800696c:	4b1c      	ldr	r3, [pc, #112]	; (80069e0 <xTaskResumeAll+0x130>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d010      	beq.n	800699a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006978:	f000 f858 	bl	8006a2c <xTaskIncrementTick>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006982:	4b16      	ldr	r3, [pc, #88]	; (80069dc <xTaskResumeAll+0x12c>)
 8006984:	2201      	movs	r2, #1
 8006986:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3b01      	subs	r3, #1
 800698c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1f1      	bne.n	8006978 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006994:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <xTaskResumeAll+0x130>)
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800699a:	4b10      	ldr	r3, [pc, #64]	; (80069dc <xTaskResumeAll+0x12c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069a2:	2301      	movs	r3, #1
 80069a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <xTaskResumeAll+0x134>)
 80069a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069b6:	f000 feb5 	bl	8007724 <vPortExitCritical>

	return xAlreadyYielded;
 80069ba:	68bb      	ldr	r3, [r7, #8]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	200006b0 	.word	0x200006b0
 80069c8:	20000688 	.word	0x20000688
 80069cc:	20000648 	.word	0x20000648
 80069d0:	20000690 	.word	0x20000690
 80069d4:	2000058c 	.word	0x2000058c
 80069d8:	20000588 	.word	0x20000588
 80069dc:	2000069c 	.word	0x2000069c
 80069e0:	20000698 	.word	0x20000698
 80069e4:	e000ed04 	.word	0xe000ed04

080069e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069ee:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <xTaskGetTickCount+0x1c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069f4:	687b      	ldr	r3, [r7, #4]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	2000068c 	.word	0x2000068c

08006a08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a0e:	f000 ff3b 	bl	8007888 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006a12:	2300      	movs	r3, #0
 8006a14:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006a16:	4b04      	ldr	r3, [pc, #16]	; (8006a28 <xTaskGetTickCountFromISR+0x20>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a1c:	683b      	ldr	r3, [r7, #0]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	2000068c 	.word	0x2000068c

08006a2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a36:	4b4e      	ldr	r3, [pc, #312]	; (8006b70 <xTaskIncrementTick+0x144>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f040 808e 	bne.w	8006b5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a40:	4b4c      	ldr	r3, [pc, #304]	; (8006b74 <xTaskIncrementTick+0x148>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a48:	4a4a      	ldr	r2, [pc, #296]	; (8006b74 <xTaskIncrementTick+0x148>)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d120      	bne.n	8006a96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a54:	4b48      	ldr	r3, [pc, #288]	; (8006b78 <xTaskIncrementTick+0x14c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <xTaskIncrementTick+0x48>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	603b      	str	r3, [r7, #0]
}
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <xTaskIncrementTick+0x46>
 8006a74:	4b40      	ldr	r3, [pc, #256]	; (8006b78 <xTaskIncrementTick+0x14c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60fb      	str	r3, [r7, #12]
 8006a7a:	4b40      	ldr	r3, [pc, #256]	; (8006b7c <xTaskIncrementTick+0x150>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a3e      	ldr	r2, [pc, #248]	; (8006b78 <xTaskIncrementTick+0x14c>)
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	4a3e      	ldr	r2, [pc, #248]	; (8006b7c <xTaskIncrementTick+0x150>)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	4b3d      	ldr	r3, [pc, #244]	; (8006b80 <xTaskIncrementTick+0x154>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	4a3c      	ldr	r2, [pc, #240]	; (8006b80 <xTaskIncrementTick+0x154>)
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	f000 faa9 	bl	8006fe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a96:	4b3b      	ldr	r3, [pc, #236]	; (8006b84 <xTaskIncrementTick+0x158>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d348      	bcc.n	8006b32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa0:	4b35      	ldr	r3, [pc, #212]	; (8006b78 <xTaskIncrementTick+0x14c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d104      	bne.n	8006ab4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aaa:	4b36      	ldr	r3, [pc, #216]	; (8006b84 <xTaskIncrementTick+0x158>)
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	601a      	str	r2, [r3, #0]
					break;
 8006ab2:	e03e      	b.n	8006b32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ab4:	4b30      	ldr	r3, [pc, #192]	; (8006b78 <xTaskIncrementTick+0x14c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d203      	bcs.n	8006ad4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006acc:	4a2d      	ldr	r2, [pc, #180]	; (8006b84 <xTaskIncrementTick+0x158>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ad2:	e02e      	b.n	8006b32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe fc0e 	bl	80052fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	3318      	adds	r3, #24
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fc05 	bl	80052fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	2201      	movs	r2, #1
 8006af6:	409a      	lsls	r2, r3
 8006af8:	4b23      	ldr	r3, [pc, #140]	; (8006b88 <xTaskIncrementTick+0x15c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	4a22      	ldr	r2, [pc, #136]	; (8006b88 <xTaskIncrementTick+0x15c>)
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4a1f      	ldr	r2, [pc, #124]	; (8006b8c <xTaskIncrementTick+0x160>)
 8006b10:	441a      	add	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f7fe fb91 	bl	8005240 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b22:	4b1b      	ldr	r3, [pc, #108]	; (8006b90 <xTaskIncrementTick+0x164>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d3b9      	bcc.n	8006aa0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b30:	e7b6      	b.n	8006aa0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b32:	4b17      	ldr	r3, [pc, #92]	; (8006b90 <xTaskIncrementTick+0x164>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b38:	4914      	ldr	r1, [pc, #80]	; (8006b8c <xTaskIncrementTick+0x160>)
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d901      	bls.n	8006b4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b4e:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <xTaskIncrementTick+0x168>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006b56:	2301      	movs	r3, #1
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	e004      	b.n	8006b66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b5c:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <xTaskIncrementTick+0x16c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3301      	adds	r3, #1
 8006b62:	4a0d      	ldr	r2, [pc, #52]	; (8006b98 <xTaskIncrementTick+0x16c>)
 8006b64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b66:	697b      	ldr	r3, [r7, #20]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	200006b0 	.word	0x200006b0
 8006b74:	2000068c 	.word	0x2000068c
 8006b78:	20000640 	.word	0x20000640
 8006b7c:	20000644 	.word	0x20000644
 8006b80:	200006a0 	.word	0x200006a0
 8006b84:	200006a8 	.word	0x200006a8
 8006b88:	20000690 	.word	0x20000690
 8006b8c:	2000058c 	.word	0x2000058c
 8006b90:	20000588 	.word	0x20000588
 8006b94:	2000069c 	.word	0x2000069c
 8006b98:	20000698 	.word	0x20000698

08006b9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ba2:	4b29      	ldr	r3, [pc, #164]	; (8006c48 <vTaskSwitchContext+0xac>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d003      	beq.n	8006bb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006baa:	4b28      	ldr	r3, [pc, #160]	; (8006c4c <vTaskSwitchContext+0xb0>)
 8006bac:	2201      	movs	r2, #1
 8006bae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bb0:	e044      	b.n	8006c3c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006bb2:	4b26      	ldr	r3, [pc, #152]	; (8006c4c <vTaskSwitchContext+0xb0>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bb8:	4b25      	ldr	r3, [pc, #148]	; (8006c50 <vTaskSwitchContext+0xb4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	fab3 f383 	clz	r3, r3
 8006bc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	f1c3 031f 	rsb	r3, r3, #31
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	4921      	ldr	r1, [pc, #132]	; (8006c54 <vTaskSwitchContext+0xb8>)
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	607b      	str	r3, [r7, #4]
}
 8006bf4:	bf00      	nop
 8006bf6:	e7fe      	b.n	8006bf6 <vTaskSwitchContext+0x5a>
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	4a14      	ldr	r2, [pc, #80]	; (8006c54 <vTaskSwitchContext+0xb8>)
 8006c04:	4413      	add	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d104      	bne.n	8006c28 <vTaskSwitchContext+0x8c>
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	605a      	str	r2, [r3, #4]
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	4a0a      	ldr	r2, [pc, #40]	; (8006c58 <vTaskSwitchContext+0xbc>)
 8006c30:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c32:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <vTaskSwitchContext+0xbc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	334c      	adds	r3, #76	; 0x4c
 8006c38:	4a08      	ldr	r2, [pc, #32]	; (8006c5c <vTaskSwitchContext+0xc0>)
 8006c3a:	6013      	str	r3, [r2, #0]
}
 8006c3c:	bf00      	nop
 8006c3e:	371c      	adds	r7, #28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	200006b0 	.word	0x200006b0
 8006c4c:	2000069c 	.word	0x2000069c
 8006c50:	20000690 	.word	0x20000690
 8006c54:	2000058c 	.word	0x2000058c
 8006c58:	20000588 	.word	0x20000588
 8006c5c:	20000040 	.word	0x20000040

08006c60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	60fb      	str	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c86:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <vTaskPlaceOnEventList+0x44>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3318      	adds	r3, #24
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fe fafa 	bl	8005288 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c94:	2101      	movs	r1, #1
 8006c96:	6838      	ldr	r0, [r7, #0]
 8006c98:	f000 fb82 	bl	80073a0 <prvAddCurrentTaskToDelayedList>
}
 8006c9c:	bf00      	nop
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	20000588 	.word	0x20000588

08006ca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60fb      	str	r3, [r7, #12]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	3318      	adds	r3, #24
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe fb0e 	bl	80052fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cde:	4b1d      	ldr	r3, [pc, #116]	; (8006d54 <xTaskRemoveFromEventList+0xac>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d11c      	bne.n	8006d20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe fb05 	bl	80052fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	409a      	lsls	r2, r3
 8006cf8:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <xTaskRemoveFromEventList+0xb0>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	4a16      	ldr	r2, [pc, #88]	; (8006d58 <xTaskRemoveFromEventList+0xb0>)
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4a13      	ldr	r2, [pc, #76]	; (8006d5c <xTaskRemoveFromEventList+0xb4>)
 8006d10:	441a      	add	r2, r3
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	3304      	adds	r3, #4
 8006d16:	4619      	mov	r1, r3
 8006d18:	4610      	mov	r0, r2
 8006d1a:	f7fe fa91 	bl	8005240 <vListInsertEnd>
 8006d1e:	e005      	b.n	8006d2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	3318      	adds	r3, #24
 8006d24:	4619      	mov	r1, r3
 8006d26:	480e      	ldr	r0, [pc, #56]	; (8006d60 <xTaskRemoveFromEventList+0xb8>)
 8006d28:	f7fe fa8a 	bl	8005240 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d30:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <xTaskRemoveFromEventList+0xbc>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d905      	bls.n	8006d46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <xTaskRemoveFromEventList+0xc0>)
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e001      	b.n	8006d4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d4a:	697b      	ldr	r3, [r7, #20]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	200006b0 	.word	0x200006b0
 8006d58:	20000690 	.word	0x20000690
 8006d5c:	2000058c 	.word	0x2000058c
 8006d60:	20000648 	.word	0x20000648
 8006d64:	20000588 	.word	0x20000588
 8006d68:	2000069c 	.word	0x2000069c

08006d6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d74:	4b06      	ldr	r3, [pc, #24]	; (8006d90 <vTaskInternalSetTimeOutState+0x24>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <vTaskInternalSetTimeOutState+0x28>)
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	605a      	str	r2, [r3, #4]
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	200006a0 	.word	0x200006a0
 8006d94:	2000068c 	.word	0x2000068c

08006d98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b088      	sub	sp, #32
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	613b      	str	r3, [r7, #16]
}
 8006dba:	bf00      	nop
 8006dbc:	e7fe      	b.n	8006dbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	60fb      	str	r3, [r7, #12]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006dda:	f000 fc73 	bl	80076c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006dde:	4b1d      	ldr	r3, [pc, #116]	; (8006e54 <xTaskCheckForTimeOut+0xbc>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df6:	d102      	bne.n	8006dfe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	61fb      	str	r3, [r7, #28]
 8006dfc:	e023      	b.n	8006e46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <xTaskCheckForTimeOut+0xc0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d007      	beq.n	8006e1a <xTaskCheckForTimeOut+0x82>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d302      	bcc.n	8006e1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e14:	2301      	movs	r3, #1
 8006e16:	61fb      	str	r3, [r7, #28]
 8006e18:	e015      	b.n	8006e46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d20b      	bcs.n	8006e3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	1ad2      	subs	r2, r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff ff9b 	bl	8006d6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	e004      	b.n	8006e46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e42:	2301      	movs	r3, #1
 8006e44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e46:	f000 fc6d 	bl	8007724 <vPortExitCritical>

	return xReturn;
 8006e4a:	69fb      	ldr	r3, [r7, #28]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3720      	adds	r7, #32
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	2000068c 	.word	0x2000068c
 8006e58:	200006a0 	.word	0x200006a0

08006e5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e60:	4b03      	ldr	r3, [pc, #12]	; (8006e70 <vTaskMissedYield+0x14>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
}
 8006e66:	bf00      	nop
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	2000069c 	.word	0x2000069c

08006e74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e7c:	f000 f852 	bl	8006f24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e80:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <prvIdleTask+0x28>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d9f9      	bls.n	8006e7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e88:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <prvIdleTask+0x2c>)
 8006e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e98:	e7f0      	b.n	8006e7c <prvIdleTask+0x8>
 8006e9a:	bf00      	nop
 8006e9c:	2000058c 	.word	0x2000058c
 8006ea0:	e000ed04 	.word	0xe000ed04

08006ea4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006eaa:	2300      	movs	r3, #0
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	e00c      	b.n	8006eca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4a12      	ldr	r2, [pc, #72]	; (8006f04 <prvInitialiseTaskLists+0x60>)
 8006ebc:	4413      	add	r3, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fe f991 	bl	80051e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	607b      	str	r3, [r7, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b06      	cmp	r3, #6
 8006ece:	d9ef      	bls.n	8006eb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ed0:	480d      	ldr	r0, [pc, #52]	; (8006f08 <prvInitialiseTaskLists+0x64>)
 8006ed2:	f7fe f988 	bl	80051e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ed6:	480d      	ldr	r0, [pc, #52]	; (8006f0c <prvInitialiseTaskLists+0x68>)
 8006ed8:	f7fe f985 	bl	80051e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006edc:	480c      	ldr	r0, [pc, #48]	; (8006f10 <prvInitialiseTaskLists+0x6c>)
 8006ede:	f7fe f982 	bl	80051e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ee2:	480c      	ldr	r0, [pc, #48]	; (8006f14 <prvInitialiseTaskLists+0x70>)
 8006ee4:	f7fe f97f 	bl	80051e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ee8:	480b      	ldr	r0, [pc, #44]	; (8006f18 <prvInitialiseTaskLists+0x74>)
 8006eea:	f7fe f97c 	bl	80051e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006eee:	4b0b      	ldr	r3, [pc, #44]	; (8006f1c <prvInitialiseTaskLists+0x78>)
 8006ef0:	4a05      	ldr	r2, [pc, #20]	; (8006f08 <prvInitialiseTaskLists+0x64>)
 8006ef2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <prvInitialiseTaskLists+0x7c>)
 8006ef6:	4a05      	ldr	r2, [pc, #20]	; (8006f0c <prvInitialiseTaskLists+0x68>)
 8006ef8:	601a      	str	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	2000058c 	.word	0x2000058c
 8006f08:	20000618 	.word	0x20000618
 8006f0c:	2000062c 	.word	0x2000062c
 8006f10:	20000648 	.word	0x20000648
 8006f14:	2000065c 	.word	0x2000065c
 8006f18:	20000674 	.word	0x20000674
 8006f1c:	20000640 	.word	0x20000640
 8006f20:	20000644 	.word	0x20000644

08006f24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f2a:	e019      	b.n	8006f60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f2c:	f000 fbca 	bl	80076c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f30:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <prvCheckTasksWaitingTermination+0x50>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe f9dc 	bl	80052fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f42:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <prvCheckTasksWaitingTermination+0x54>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	4a0b      	ldr	r2, [pc, #44]	; (8006f78 <prvCheckTasksWaitingTermination+0x54>)
 8006f4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f4c:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <prvCheckTasksWaitingTermination+0x58>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <prvCheckTasksWaitingTermination+0x58>)
 8006f54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f56:	f000 fbe5 	bl	8007724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f810 	bl	8006f80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f60:	4b06      	ldr	r3, [pc, #24]	; (8006f7c <prvCheckTasksWaitingTermination+0x58>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e1      	bne.n	8006f2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	2000065c 	.word	0x2000065c
 8006f78:	20000688 	.word	0x20000688
 8006f7c:	20000670 	.word	0x20000670

08006f80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	334c      	adds	r3, #76	; 0x4c
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f014 fa51 	bl	801b434 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d108      	bne.n	8006fae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fd7d 	bl	8007aa0 <vPortFree>
				vPortFree( pxTCB );
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fd7a 	bl	8007aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fac:	e018      	b.n	8006fe0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d103      	bne.n	8006fc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fd71 	bl	8007aa0 <vPortFree>
	}
 8006fbe:	e00f      	b.n	8006fe0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d00a      	beq.n	8006fe0 <prvDeleteTCB+0x60>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	60fb      	str	r3, [r7, #12]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <prvDeleteTCB+0x5e>
	}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <prvResetNextTaskUnblockTime+0x38>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <prvResetNextTaskUnblockTime+0x3c>)
 8006ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8006ffe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007000:	e008      	b.n	8007014 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007002:	4b07      	ldr	r3, [pc, #28]	; (8007020 <prvResetNextTaskUnblockTime+0x38>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	4a04      	ldr	r2, [pc, #16]	; (8007024 <prvResetNextTaskUnblockTime+0x3c>)
 8007012:	6013      	str	r3, [r2, #0]
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	20000640 	.word	0x20000640
 8007024:	200006a8 	.word	0x200006a8

08007028 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800702e:	4b0b      	ldr	r3, [pc, #44]	; (800705c <xTaskGetSchedulerState+0x34>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007036:	2301      	movs	r3, #1
 8007038:	607b      	str	r3, [r7, #4]
 800703a:	e008      	b.n	800704e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800703c:	4b08      	ldr	r3, [pc, #32]	; (8007060 <xTaskGetSchedulerState+0x38>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d102      	bne.n	800704a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007044:	2302      	movs	r3, #2
 8007046:	607b      	str	r3, [r7, #4]
 8007048:	e001      	b.n	800704e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800704e:	687b      	ldr	r3, [r7, #4]
	}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000694 	.word	0x20000694
 8007060:	200006b0 	.word	0x200006b0

08007064 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d05e      	beq.n	8007138 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707e:	4b31      	ldr	r3, [pc, #196]	; (8007144 <xTaskPriorityInherit+0xe0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007084:	429a      	cmp	r2, r3
 8007086:	d24e      	bcs.n	8007126 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	2b00      	cmp	r3, #0
 800708e:	db06      	blt.n	800709e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007090:	4b2c      	ldr	r3, [pc, #176]	; (8007144 <xTaskPriorityInherit+0xe0>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	f1c3 0207 	rsb	r2, r3, #7
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6959      	ldr	r1, [r3, #20]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4a26      	ldr	r2, [pc, #152]	; (8007148 <xTaskPriorityInherit+0xe4>)
 80070b0:	4413      	add	r3, r2
 80070b2:	4299      	cmp	r1, r3
 80070b4:	d12f      	bne.n	8007116 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	3304      	adds	r3, #4
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe f91d 	bl	80052fa <uxListRemove>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	2201      	movs	r2, #1
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	43da      	mvns	r2, r3
 80070d2:	4b1e      	ldr	r3, [pc, #120]	; (800714c <xTaskPriorityInherit+0xe8>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4013      	ands	r3, r2
 80070d8:	4a1c      	ldr	r2, [pc, #112]	; (800714c <xTaskPriorityInherit+0xe8>)
 80070da:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070dc:	4b19      	ldr	r3, [pc, #100]	; (8007144 <xTaskPriorityInherit+0xe0>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	2201      	movs	r2, #1
 80070ec:	409a      	lsls	r2, r3
 80070ee:	4b17      	ldr	r3, [pc, #92]	; (800714c <xTaskPriorityInherit+0xe8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	4a15      	ldr	r2, [pc, #84]	; (800714c <xTaskPriorityInherit+0xe8>)
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4a10      	ldr	r2, [pc, #64]	; (8007148 <xTaskPriorityInherit+0xe4>)
 8007106:	441a      	add	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	3304      	adds	r3, #4
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fe f896 	bl	8005240 <vListInsertEnd>
 8007114:	e004      	b.n	8007120 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007116:	4b0b      	ldr	r3, [pc, #44]	; (8007144 <xTaskPriorityInherit+0xe0>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007120:	2301      	movs	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	e008      	b.n	8007138 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <xTaskPriorityInherit+0xe0>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	429a      	cmp	r2, r3
 8007132:	d201      	bcs.n	8007138 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007134:	2301      	movs	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007138:	68fb      	ldr	r3, [r7, #12]
	}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000588 	.word	0x20000588
 8007148:	2000058c 	.word	0x2000058c
 800714c:	20000690 	.word	0x20000690

08007150 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800715c:	2300      	movs	r3, #0
 800715e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d06e      	beq.n	8007244 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007166:	4b3a      	ldr	r3, [pc, #232]	; (8007250 <xTaskPriorityDisinherit+0x100>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	429a      	cmp	r2, r3
 800716e:	d00a      	beq.n	8007186 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60fb      	str	r3, [r7, #12]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	60bb      	str	r3, [r7, #8]
}
 80071a0:	bf00      	nop
 80071a2:	e7fe      	b.n	80071a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a8:	1e5a      	subs	r2, r3, #1
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d044      	beq.n	8007244 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d140      	bne.n	8007244 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	3304      	adds	r3, #4
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7fe f897 	bl	80052fa <uxListRemove>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d115      	bne.n	80071fe <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	491f      	ldr	r1, [pc, #124]	; (8007254 <xTaskPriorityDisinherit+0x104>)
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <xTaskPriorityDisinherit+0xae>
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	2201      	movs	r2, #1
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	43da      	mvns	r2, r3
 80071f4:	4b18      	ldr	r3, [pc, #96]	; (8007258 <xTaskPriorityDisinherit+0x108>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4013      	ands	r3, r2
 80071fa:	4a17      	ldr	r2, [pc, #92]	; (8007258 <xTaskPriorityDisinherit+0x108>)
 80071fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	f1c3 0207 	rsb	r2, r3, #7
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007216:	2201      	movs	r2, #1
 8007218:	409a      	lsls	r2, r3
 800721a:	4b0f      	ldr	r3, [pc, #60]	; (8007258 <xTaskPriorityDisinherit+0x108>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4313      	orrs	r3, r2
 8007220:	4a0d      	ldr	r2, [pc, #52]	; (8007258 <xTaskPriorityDisinherit+0x108>)
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4a08      	ldr	r2, [pc, #32]	; (8007254 <xTaskPriorityDisinherit+0x104>)
 8007232:	441a      	add	r2, r3
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	3304      	adds	r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7fe f800 	bl	8005240 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007240:	2301      	movs	r3, #1
 8007242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007244:	697b      	ldr	r3, [r7, #20]
	}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000588 	.word	0x20000588
 8007254:	2000058c 	.word	0x2000058c
 8007258:	20000690 	.word	0x20000690

0800725c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800726a:	2301      	movs	r3, #1
 800726c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d077      	beq.n	8007364 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800727c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007280:	f383 8811 	msr	BASEPRI, r3
 8007284:	f3bf 8f6f 	isb	sy
 8007288:	f3bf 8f4f 	dsb	sy
 800728c:	60fb      	str	r3, [r7, #12]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d902      	bls.n	80072a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	e002      	b.n	80072a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d058      	beq.n	8007364 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d153      	bne.n	8007364 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80072bc:	4b2b      	ldr	r3, [pc, #172]	; (800736c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d10a      	bne.n	80072dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	60bb      	str	r3, [r7, #8]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	db04      	blt.n	80072fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	f1c3 0207 	rsb	r2, r3, #7
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	6959      	ldr	r1, [r3, #20]
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4a19      	ldr	r2, [pc, #100]	; (8007370 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800730a:	4413      	add	r3, r2
 800730c:	4299      	cmp	r1, r3
 800730e:	d129      	bne.n	8007364 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	3304      	adds	r3, #4
 8007314:	4618      	mov	r0, r3
 8007316:	f7fd fff0 	bl	80052fa <uxListRemove>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	2201      	movs	r2, #1
 8007326:	fa02 f303 	lsl.w	r3, r2, r3
 800732a:	43da      	mvns	r2, r3
 800732c:	4b11      	ldr	r3, [pc, #68]	; (8007374 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4013      	ands	r3, r2
 8007332:	4a10      	ldr	r2, [pc, #64]	; (8007374 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007334:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	2201      	movs	r2, #1
 800733c:	409a      	lsls	r2, r3
 800733e:	4b0d      	ldr	r3, [pc, #52]	; (8007374 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4313      	orrs	r3, r2
 8007344:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4a06      	ldr	r2, [pc, #24]	; (8007370 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007356:	441a      	add	r2, r3
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	3304      	adds	r3, #4
 800735c:	4619      	mov	r1, r3
 800735e:	4610      	mov	r0, r2
 8007360:	f7fd ff6e 	bl	8005240 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007364:	bf00      	nop
 8007366:	3720      	adds	r7, #32
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000588 	.word	0x20000588
 8007370:	2000058c 	.word	0x2000058c
 8007374:	20000690 	.word	0x20000690

08007378 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800737c:	4b07      	ldr	r3, [pc, #28]	; (800739c <pvTaskIncrementMutexHeldCount+0x24>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <pvTaskIncrementMutexHeldCount+0x24>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800738a:	3201      	adds	r2, #1
 800738c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800738e:	4b03      	ldr	r3, [pc, #12]	; (800739c <pvTaskIncrementMutexHeldCount+0x24>)
 8007390:	681b      	ldr	r3, [r3, #0]
	}
 8007392:	4618      	mov	r0, r3
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	20000588 	.word	0x20000588

080073a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073aa:	4b29      	ldr	r3, [pc, #164]	; (8007450 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073b0:	4b28      	ldr	r3, [pc, #160]	; (8007454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fd ff9f 	bl	80052fa <uxListRemove>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073c2:	4b24      	ldr	r3, [pc, #144]	; (8007454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c8:	2201      	movs	r2, #1
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	43da      	mvns	r2, r3
 80073d0:	4b21      	ldr	r3, [pc, #132]	; (8007458 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4013      	ands	r3, r2
 80073d6:	4a20      	ldr	r2, [pc, #128]	; (8007458 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e0:	d10a      	bne.n	80073f8 <prvAddCurrentTaskToDelayedList+0x58>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d007      	beq.n	80073f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e8:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3304      	adds	r3, #4
 80073ee:	4619      	mov	r1, r3
 80073f0:	481a      	ldr	r0, [pc, #104]	; (800745c <prvAddCurrentTaskToDelayedList+0xbc>)
 80073f2:	f7fd ff25 	bl	8005240 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073f6:	e026      	b.n	8007446 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4413      	add	r3, r2
 80073fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007400:	4b14      	ldr	r3, [pc, #80]	; (8007454 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007408:	68ba      	ldr	r2, [r7, #8]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	429a      	cmp	r2, r3
 800740e:	d209      	bcs.n	8007424 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007410:	4b13      	ldr	r3, [pc, #76]	; (8007460 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3304      	adds	r3, #4
 800741a:	4619      	mov	r1, r3
 800741c:	4610      	mov	r0, r2
 800741e:	f7fd ff33 	bl	8005288 <vListInsert>
}
 8007422:	e010      	b.n	8007446 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007424:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <prvAddCurrentTaskToDelayedList+0xb4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3304      	adds	r3, #4
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f7fd ff29 	bl	8005288 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	429a      	cmp	r2, r3
 800743e:	d202      	bcs.n	8007446 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007440:	4a09      	ldr	r2, [pc, #36]	; (8007468 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	6013      	str	r3, [r2, #0]
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	2000068c 	.word	0x2000068c
 8007454:	20000588 	.word	0x20000588
 8007458:	20000690 	.word	0x20000690
 800745c:	20000674 	.word	0x20000674
 8007460:	20000644 	.word	0x20000644
 8007464:	20000640 	.word	0x20000640
 8007468:	200006a8 	.word	0x200006a8

0800746c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	3b04      	subs	r3, #4
 800747c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3b04      	subs	r3, #4
 800748a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f023 0201 	bic.w	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3b04      	subs	r3, #4
 800749a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800749c:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <pxPortInitialiseStack+0x64>)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3b14      	subs	r3, #20
 80074a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3b04      	subs	r3, #4
 80074b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f06f 0202 	mvn.w	r2, #2
 80074ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3b20      	subs	r3, #32
 80074c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074c2:	68fb      	ldr	r3, [r7, #12]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	080074d5 	.word	0x080074d5

080074d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <prvTaskExitError+0x54>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d00a      	beq.n	80074fe <prvTaskExitError+0x2a>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	60fb      	str	r3, [r7, #12]
}
 80074fa:	bf00      	nop
 80074fc:	e7fe      	b.n	80074fc <prvTaskExitError+0x28>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	60bb      	str	r3, [r7, #8]
}
 8007510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007512:	bf00      	nop
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0fc      	beq.n	8007514 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800751a:	bf00      	nop
 800751c:	bf00      	nop
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	20000020 	.word	0x20000020
 800752c:	00000000 	.word	0x00000000

08007530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <pxCurrentTCBConst2>)
 8007532:	6819      	ldr	r1, [r3, #0]
 8007534:	6808      	ldr	r0, [r1, #0]
 8007536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800753a:	f380 8809 	msr	PSP, r0
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f380 8811 	msr	BASEPRI, r0
 800754a:	4770      	bx	lr
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst2>:
 8007550:	20000588 	.word	0x20000588
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007558:	4808      	ldr	r0, [pc, #32]	; (800757c <prvPortStartFirstTask+0x24>)
 800755a:	6800      	ldr	r0, [r0, #0]
 800755c:	6800      	ldr	r0, [r0, #0]
 800755e:	f380 8808 	msr	MSP, r0
 8007562:	f04f 0000 	mov.w	r0, #0
 8007566:	f380 8814 	msr	CONTROL, r0
 800756a:	b662      	cpsie	i
 800756c:	b661      	cpsie	f
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	df00      	svc	0
 8007578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800757a:	bf00      	nop
 800757c:	e000ed08 	.word	0xe000ed08

08007580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007586:	4b46      	ldr	r3, [pc, #280]	; (80076a0 <xPortStartScheduler+0x120>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a46      	ldr	r2, [pc, #280]	; (80076a4 <xPortStartScheduler+0x124>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10a      	bne.n	80075a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	613b      	str	r3, [r7, #16]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80075a6:	4b3e      	ldr	r3, [pc, #248]	; (80076a0 <xPortStartScheduler+0x120>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a3f      	ldr	r2, [pc, #252]	; (80076a8 <xPortStartScheduler+0x128>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d10a      	bne.n	80075c6 <xPortStartScheduler+0x46>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	60fb      	str	r3, [r7, #12]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80075c6:	4b39      	ldr	r3, [pc, #228]	; (80076ac <xPortStartScheduler+0x12c>)
 80075c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	22ff      	movs	r2, #255	; 0xff
 80075d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	4b31      	ldr	r3, [pc, #196]	; (80076b0 <xPortStartScheduler+0x130>)
 80075ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075ee:	4b31      	ldr	r3, [pc, #196]	; (80076b4 <xPortStartScheduler+0x134>)
 80075f0:	2207      	movs	r2, #7
 80075f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075f4:	e009      	b.n	800760a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80075f6:	4b2f      	ldr	r3, [pc, #188]	; (80076b4 <xPortStartScheduler+0x134>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	4a2d      	ldr	r2, [pc, #180]	; (80076b4 <xPortStartScheduler+0x134>)
 80075fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	b2db      	uxtb	r3, r3
 8007608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800760a:	78fb      	ldrb	r3, [r7, #3]
 800760c:	b2db      	uxtb	r3, r3
 800760e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007612:	2b80      	cmp	r3, #128	; 0x80
 8007614:	d0ef      	beq.n	80075f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007616:	4b27      	ldr	r3, [pc, #156]	; (80076b4 <xPortStartScheduler+0x134>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1c3 0307 	rsb	r3, r3, #7
 800761e:	2b04      	cmp	r3, #4
 8007620:	d00a      	beq.n	8007638 <xPortStartScheduler+0xb8>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	60bb      	str	r3, [r7, #8]
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007638:	4b1e      	ldr	r3, [pc, #120]	; (80076b4 <xPortStartScheduler+0x134>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	021b      	lsls	r3, r3, #8
 800763e:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <xPortStartScheduler+0x134>)
 8007640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007642:	4b1c      	ldr	r3, [pc, #112]	; (80076b4 <xPortStartScheduler+0x134>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800764a:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <xPortStartScheduler+0x134>)
 800764c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007656:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <xPortStartScheduler+0x138>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <xPortStartScheduler+0x138>)
 800765c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007662:	4b15      	ldr	r3, [pc, #84]	; (80076b8 <xPortStartScheduler+0x138>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a14      	ldr	r2, [pc, #80]	; (80076b8 <xPortStartScheduler+0x138>)
 8007668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800766c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800766e:	f000 f8dd 	bl	800782c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007672:	4b12      	ldr	r3, [pc, #72]	; (80076bc <xPortStartScheduler+0x13c>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007678:	f000 f8fc 	bl	8007874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800767c:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <xPortStartScheduler+0x140>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a0f      	ldr	r2, [pc, #60]	; (80076c0 <xPortStartScheduler+0x140>)
 8007682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007688:	f7ff ff66 	bl	8007558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800768c:	f7ff fa86 	bl	8006b9c <vTaskSwitchContext>
	prvTaskExitError();
 8007690:	f7ff ff20 	bl	80074d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	e000ed00 	.word	0xe000ed00
 80076a4:	410fc271 	.word	0x410fc271
 80076a8:	410fc270 	.word	0x410fc270
 80076ac:	e000e400 	.word	0xe000e400
 80076b0:	200006b4 	.word	0x200006b4
 80076b4:	200006b8 	.word	0x200006b8
 80076b8:	e000ed20 	.word	0xe000ed20
 80076bc:	20000020 	.word	0x20000020
 80076c0:	e000ef34 	.word	0xe000ef34

080076c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	607b      	str	r3, [r7, #4]
}
 80076dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <vPortEnterCritical+0x58>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	4a0d      	ldr	r2, [pc, #52]	; (800771c <vPortEnterCritical+0x58>)
 80076e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80076e8:	4b0c      	ldr	r3, [pc, #48]	; (800771c <vPortEnterCritical+0x58>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d10f      	bne.n	8007710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <vPortEnterCritical+0x5c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00a      	beq.n	8007710 <vPortEnterCritical+0x4c>
	__asm volatile
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	603b      	str	r3, [r7, #0]
}
 800770c:	bf00      	nop
 800770e:	e7fe      	b.n	800770e <vPortEnterCritical+0x4a>
	}
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	20000020 	.word	0x20000020
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <vPortExitCritical+0x50>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10a      	bne.n	8007748 <vPortExitCritical+0x24>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	607b      	str	r3, [r7, #4]
}
 8007744:	bf00      	nop
 8007746:	e7fe      	b.n	8007746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <vPortExitCritical+0x50>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	3b01      	subs	r3, #1
 800774e:	4a09      	ldr	r2, [pc, #36]	; (8007774 <vPortExitCritical+0x50>)
 8007750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007752:	4b08      	ldr	r3, [pc, #32]	; (8007774 <vPortExitCritical+0x50>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d105      	bne.n	8007766 <vPortExitCritical+0x42>
 800775a:	2300      	movs	r3, #0
 800775c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	f383 8811 	msr	BASEPRI, r3
}
 8007764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20000020 	.word	0x20000020
	...

08007780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007780:	f3ef 8009 	mrs	r0, PSP
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	4b15      	ldr	r3, [pc, #84]	; (80077e0 <pxCurrentTCBConst>)
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	f01e 0f10 	tst.w	lr, #16
 8007790:	bf08      	it	eq
 8007792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	6010      	str	r0, [r2, #0]
 800779c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80077a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077a4:	f380 8811 	msr	BASEPRI, r0
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	f3bf 8f6f 	isb	sy
 80077b0:	f7ff f9f4 	bl	8006b9c <vTaskSwitchContext>
 80077b4:	f04f 0000 	mov.w	r0, #0
 80077b8:	f380 8811 	msr	BASEPRI, r0
 80077bc:	bc09      	pop	{r0, r3}
 80077be:	6819      	ldr	r1, [r3, #0]
 80077c0:	6808      	ldr	r0, [r1, #0]
 80077c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c6:	f01e 0f10 	tst.w	lr, #16
 80077ca:	bf08      	it	eq
 80077cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80077d0:	f380 8809 	msr	PSP, r0
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	f3af 8000 	nop.w

080077e0 <pxCurrentTCBConst>:
 80077e0:	20000588 	.word	0x20000588
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80077e4:	bf00      	nop
 80077e6:	bf00      	nop

080077e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	607b      	str	r3, [r7, #4]
}
 8007800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007802:	f7ff f913 	bl	8006a2c <xTaskIncrementTick>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d003      	beq.n	8007814 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <SysTick_Handler+0x40>)
 800780e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	2300      	movs	r3, #0
 8007816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	f383 8811 	msr	BASEPRI, r3
}
 800781e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007830:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <vPortSetupTimerInterrupt+0x34>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007836:	4b0b      	ldr	r3, [pc, #44]	; (8007864 <vPortSetupTimerInterrupt+0x38>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800783c:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <vPortSetupTimerInterrupt+0x3c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a0a      	ldr	r2, [pc, #40]	; (800786c <vPortSetupTimerInterrupt+0x40>)
 8007842:	fba2 2303 	umull	r2, r3, r2, r3
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	4a09      	ldr	r2, [pc, #36]	; (8007870 <vPortSetupTimerInterrupt+0x44>)
 800784a:	3b01      	subs	r3, #1
 800784c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800784e:	4b04      	ldr	r3, [pc, #16]	; (8007860 <vPortSetupTimerInterrupt+0x34>)
 8007850:	2207      	movs	r2, #7
 8007852:	601a      	str	r2, [r3, #0]
}
 8007854:	bf00      	nop
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	e000e010 	.word	0xe000e010
 8007864:	e000e018 	.word	0xe000e018
 8007868:	20000000 	.word	0x20000000
 800786c:	10624dd3 	.word	0x10624dd3
 8007870:	e000e014 	.word	0xe000e014

08007874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007884 <vPortEnableVFP+0x10>
 8007878:	6801      	ldr	r1, [r0, #0]
 800787a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800787e:	6001      	str	r1, [r0, #0]
 8007880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007882:	bf00      	nop
 8007884:	e000ed88 	.word	0xe000ed88

08007888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800788e:	f3ef 8305 	mrs	r3, IPSR
 8007892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b0f      	cmp	r3, #15
 8007898:	d914      	bls.n	80078c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800789a:	4a17      	ldr	r2, [pc, #92]	; (80078f8 <vPortValidateInterruptPriority+0x70>)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078a4:	4b15      	ldr	r3, [pc, #84]	; (80078fc <vPortValidateInterruptPriority+0x74>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	7afa      	ldrb	r2, [r7, #11]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d20a      	bcs.n	80078c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80078ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b2:	f383 8811 	msr	BASEPRI, r3
 80078b6:	f3bf 8f6f 	isb	sy
 80078ba:	f3bf 8f4f 	dsb	sy
 80078be:	607b      	str	r3, [r7, #4]
}
 80078c0:	bf00      	nop
 80078c2:	e7fe      	b.n	80078c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <vPortValidateInterruptPriority+0x78>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078cc:	4b0d      	ldr	r3, [pc, #52]	; (8007904 <vPortValidateInterruptPriority+0x7c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d90a      	bls.n	80078ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	603b      	str	r3, [r7, #0]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <vPortValidateInterruptPriority+0x60>
	}
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	e000e3f0 	.word	0xe000e3f0
 80078fc:	200006b4 	.word	0x200006b4
 8007900:	e000ed0c 	.word	0xe000ed0c
 8007904:	200006b8 	.word	0x200006b8

08007908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08a      	sub	sp, #40	; 0x28
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007910:	2300      	movs	r3, #0
 8007912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007914:	f7fe ffbe 	bl	8006894 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007918:	4b5b      	ldr	r3, [pc, #364]	; (8007a88 <pvPortMalloc+0x180>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007920:	f000 f920 	bl	8007b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007924:	4b59      	ldr	r3, [pc, #356]	; (8007a8c <pvPortMalloc+0x184>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4013      	ands	r3, r2
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 8093 	bne.w	8007a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01d      	beq.n	8007974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007938:	2208      	movs	r2, #8
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4413      	add	r3, r2
 800793e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f003 0307 	and.w	r3, r3, #7
 8007946:	2b00      	cmp	r3, #0
 8007948:	d014      	beq.n	8007974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f023 0307 	bic.w	r3, r3, #7
 8007950:	3308      	adds	r3, #8
 8007952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00a      	beq.n	8007974 <pvPortMalloc+0x6c>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	617b      	str	r3, [r7, #20]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d06e      	beq.n	8007a58 <pvPortMalloc+0x150>
 800797a:	4b45      	ldr	r3, [pc, #276]	; (8007a90 <pvPortMalloc+0x188>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d869      	bhi.n	8007a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007984:	4b43      	ldr	r3, [pc, #268]	; (8007a94 <pvPortMalloc+0x18c>)
 8007986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007988:	4b42      	ldr	r3, [pc, #264]	; (8007a94 <pvPortMalloc+0x18c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800798e:	e004      	b.n	800799a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d903      	bls.n	80079ac <pvPortMalloc+0xa4>
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1f1      	bne.n	8007990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079ac:	4b36      	ldr	r3, [pc, #216]	; (8007a88 <pvPortMalloc+0x180>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d050      	beq.n	8007a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2208      	movs	r2, #8
 80079bc:	4413      	add	r3, r2
 80079be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	2308      	movs	r3, #8
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d91f      	bls.n	8007a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <pvPortMalloc+0xf8>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	613b      	str	r3, [r7, #16]
}
 80079fc:	bf00      	nop
 80079fe:	e7fe      	b.n	80079fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	1ad2      	subs	r2, r2, r3
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a12:	69b8      	ldr	r0, [r7, #24]
 8007a14:	f000 f908 	bl	8007c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a18:	4b1d      	ldr	r3, [pc, #116]	; (8007a90 <pvPortMalloc+0x188>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	4a1b      	ldr	r2, [pc, #108]	; (8007a90 <pvPortMalloc+0x188>)
 8007a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a26:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <pvPortMalloc+0x188>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4b1b      	ldr	r3, [pc, #108]	; (8007a98 <pvPortMalloc+0x190>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d203      	bcs.n	8007a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a32:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <pvPortMalloc+0x188>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a18      	ldr	r2, [pc, #96]	; (8007a98 <pvPortMalloc+0x190>)
 8007a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	4b13      	ldr	r3, [pc, #76]	; (8007a8c <pvPortMalloc+0x184>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007a4e:	4b13      	ldr	r3, [pc, #76]	; (8007a9c <pvPortMalloc+0x194>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3301      	adds	r3, #1
 8007a54:	4a11      	ldr	r2, [pc, #68]	; (8007a9c <pvPortMalloc+0x194>)
 8007a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a58:	f7fe ff2a 	bl	80068b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <pvPortMalloc+0x174>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	60fb      	str	r3, [r7, #12]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <pvPortMalloc+0x172>
	return pvReturn;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3728      	adds	r7, #40	; 0x28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	200106c4 	.word	0x200106c4
 8007a8c:	200106d8 	.word	0x200106d8
 8007a90:	200106c8 	.word	0x200106c8
 8007a94:	200106bc 	.word	0x200106bc
 8007a98:	200106cc 	.word	0x200106cc
 8007a9c:	200106d0 	.word	0x200106d0

08007aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d04d      	beq.n	8007b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ab2:	2308      	movs	r3, #8
 8007ab4:	425b      	negs	r3, r3
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4413      	add	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	4b24      	ldr	r3, [pc, #144]	; (8007b58 <vPortFree+0xb8>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <vPortFree+0x44>
	__asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	60fb      	str	r3, [r7, #12]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <vPortFree+0x62>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60bb      	str	r3, [r7, #8]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <vPortFree+0xb8>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01e      	beq.n	8007b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d11a      	bne.n	8007b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <vPortFree+0xb8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	43db      	mvns	r3, r3
 8007b22:	401a      	ands	r2, r3
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b28:	f7fe feb4 	bl	8006894 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <vPortFree+0xbc>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4413      	add	r3, r2
 8007b36:	4a09      	ldr	r2, [pc, #36]	; (8007b5c <vPortFree+0xbc>)
 8007b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b3a:	6938      	ldr	r0, [r7, #16]
 8007b3c:	f000 f874 	bl	8007c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007b40:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <vPortFree+0xc0>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	4a06      	ldr	r2, [pc, #24]	; (8007b60 <vPortFree+0xc0>)
 8007b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007b4a:	f7fe feb1 	bl	80068b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b4e:	bf00      	nop
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	200106d8 	.word	0x200106d8
 8007b5c:	200106c8 	.word	0x200106c8
 8007b60:	200106d4 	.word	0x200106d4

08007b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b70:	4b27      	ldr	r3, [pc, #156]	; (8007c10 <prvHeapInit+0xac>)
 8007b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00c      	beq.n	8007b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3307      	adds	r3, #7
 8007b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0307 	bic.w	r3, r3, #7
 8007b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	4a1f      	ldr	r2, [pc, #124]	; (8007c10 <prvHeapInit+0xac>)
 8007b94:	4413      	add	r3, r2
 8007b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b9c:	4a1d      	ldr	r2, [pc, #116]	; (8007c14 <prvHeapInit+0xb0>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ba2:	4b1c      	ldr	r3, [pc, #112]	; (8007c14 <prvHeapInit+0xb0>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007bb0:	2208      	movs	r2, #8
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	1a9b      	subs	r3, r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f023 0307 	bic.w	r3, r3, #7
 8007bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <prvHeapInit+0xb4>)
 8007bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007bc6:	4b14      	ldr	r3, [pc, #80]	; (8007c18 <prvHeapInit+0xb4>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <prvHeapInit+0xb4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	1ad2      	subs	r2, r2, r3
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <prvHeapInit+0xb4>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <prvHeapInit+0xb8>)
 8007bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4a09      	ldr	r2, [pc, #36]	; (8007c20 <prvHeapInit+0xbc>)
 8007bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <prvHeapInit+0xc0>)
 8007bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007c02:	601a      	str	r2, [r3, #0]
}
 8007c04:	bf00      	nop
 8007c06:	3714      	adds	r7, #20
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr
 8007c10:	200006bc 	.word	0x200006bc
 8007c14:	200106bc 	.word	0x200106bc
 8007c18:	200106c4 	.word	0x200106c4
 8007c1c:	200106cc 	.word	0x200106cc
 8007c20:	200106c8 	.word	0x200106c8
 8007c24:	200106d8 	.word	0x200106d8

08007c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c30:	4b28      	ldr	r3, [pc, #160]	; (8007cd4 <prvInsertBlockIntoFreeList+0xac>)
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	e002      	b.n	8007c3c <prvInsertBlockIntoFreeList+0x14>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d8f7      	bhi.n	8007c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	4413      	add	r3, r2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d108      	bne.n	8007c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	441a      	add	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	441a      	add	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d118      	bne.n	8007cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d00d      	beq.n	8007ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	441a      	add	r2, r3
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	e008      	b.n	8007cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e003      	b.n	8007cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d002      	beq.n	8007cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cc6:	bf00      	nop
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	200106bc 	.word	0x200106bc
 8007cd8:	200106c4 	.word	0x200106c4

08007cdc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	330c      	adds	r3, #12
 8007cec:	461a      	mov	r2, r3
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f003 ff95 	bl	800bc20 <tcpip_send_msg_wait_sem>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <netconn_apimsg+0x2e>
    return apimsg->err;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007d08:	e001      	b.n	8007d0e <netconn_apimsg+0x32>
  }
  return err;
 8007d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08c      	sub	sp, #48	; 0x30
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	603a      	str	r2, [r7, #0]
 8007d22:	71fb      	strb	r3, [r7, #7]
 8007d24:	460b      	mov	r3, r1
 8007d26:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 f9a3 	bl	8009078 <netconn_alloc>
 8007d32:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d054      	beq.n	8007de4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007d3a:	79bb      	ldrb	r3, [r7, #6]
 8007d3c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007d42:	f107 0308 	add.w	r3, r7, #8
 8007d46:	4619      	mov	r1, r3
 8007d48:	4829      	ldr	r0, [pc, #164]	; (8007df0 <netconn_new_with_proto_and_callback+0xd8>)
 8007d4a:	f7ff ffc7 	bl	8007cdc <netconn_apimsg>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007d54:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d043      	beq.n	8007de4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <netconn_new_with_proto_and_callback+0x58>
 8007d64:	4b23      	ldr	r3, [pc, #140]	; (8007df4 <netconn_new_with_proto_and_callback+0xdc>)
 8007d66:	22a3      	movs	r2, #163	; 0xa3
 8007d68:	4923      	ldr	r1, [pc, #140]	; (8007df8 <netconn_new_with_proto_and_callback+0xe0>)
 8007d6a:	4824      	ldr	r0, [pc, #144]	; (8007dfc <netconn_new_with_proto_and_callback+0xe4>)
 8007d6c:	f013 fafc 	bl	801b368 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	3310      	adds	r3, #16
 8007d74:	4618      	mov	r0, r3
 8007d76:	f011 f8ec 	bl	8018f52 <sys_mbox_valid>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d105      	bne.n	8007d8c <netconn_new_with_proto_and_callback+0x74>
 8007d80:	4b1c      	ldr	r3, [pc, #112]	; (8007df4 <netconn_new_with_proto_and_callback+0xdc>)
 8007d82:	22a4      	movs	r2, #164	; 0xa4
 8007d84:	491e      	ldr	r1, [pc, #120]	; (8007e00 <netconn_new_with_proto_and_callback+0xe8>)
 8007d86:	481d      	ldr	r0, [pc, #116]	; (8007dfc <netconn_new_with_proto_and_callback+0xe4>)
 8007d88:	f013 faee 	bl	801b368 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	3314      	adds	r3, #20
 8007d90:	4618      	mov	r0, r3
 8007d92:	f011 f8de 	bl	8018f52 <sys_mbox_valid>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <netconn_new_with_proto_and_callback+0x90>
 8007d9c:	4b15      	ldr	r3, [pc, #84]	; (8007df4 <netconn_new_with_proto_and_callback+0xdc>)
 8007d9e:	22a6      	movs	r2, #166	; 0xa6
 8007da0:	4918      	ldr	r1, [pc, #96]	; (8007e04 <netconn_new_with_proto_and_callback+0xec>)
 8007da2:	4816      	ldr	r0, [pc, #88]	; (8007dfc <netconn_new_with_proto_and_callback+0xe4>)
 8007da4:	f013 fae0 	bl	801b368 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	330c      	adds	r3, #12
 8007dac:	4618      	mov	r0, r3
 8007dae:	f011 f961 	bl	8019074 <sys_sem_valid>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <netconn_new_with_proto_and_callback+0xac>
 8007db8:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <netconn_new_with_proto_and_callback+0xdc>)
 8007dba:	22a9      	movs	r2, #169	; 0xa9
 8007dbc:	4912      	ldr	r1, [pc, #72]	; (8007e08 <netconn_new_with_proto_and_callback+0xf0>)
 8007dbe:	480f      	ldr	r0, [pc, #60]	; (8007dfc <netconn_new_with_proto_and_callback+0xe4>)
 8007dc0:	f013 fad2 	bl	801b368 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc6:	330c      	adds	r3, #12
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f011 f946 	bl	801905a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f011 f836 	bl	8018e44 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007dd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dda:	2007      	movs	r0, #7
 8007ddc:	f004 fcce 	bl	800c77c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e000      	b.n	8007de6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3730      	adds	r7, #48	; 0x30
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	0800904d 	.word	0x0800904d
 8007df4:	0801c040 	.word	0x0801c040
 8007df8:	0801c074 	.word	0x0801c074
 8007dfc:	0801c098 	.word	0x0801c098
 8007e00:	0801c0c0 	.word	0x0801c0c0
 8007e04:	0801c0d8 	.word	0x0801c0d8
 8007e08:	0801c0fc 	.word	0x0801c0fc

08007e0c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08c      	sub	sp, #48	; 0x30
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e014      	b.n	8007e48 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007e22:	2329      	movs	r3, #41	; 0x29
 8007e24:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007e26:	f107 030c 	add.w	r3, r7, #12
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4808      	ldr	r0, [pc, #32]	; (8007e50 <netconn_prepare_delete+0x44>)
 8007e2e:	f7ff ff55 	bl	8007cdc <netconn_apimsg>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007e38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <netconn_prepare_delete+0x3a>
    return err;
 8007e40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e44:	e000      	b.n	8007e48 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3730      	adds	r7, #48	; 0x30
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	080095b1 	.word	0x080095b1

08007e54 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <netconn_delete+0x12>
    return ERR_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	e00d      	b.n	8007e82 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff ffd0 	bl	8007e0c <netconn_prepare_delete>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d102      	bne.n	8007e7e <netconn_delete+0x2a>
    netconn_free(conn);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 f96b 	bl	8009154 <netconn_free>
  }
  return err;
 8007e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08e      	sub	sp, #56	; 0x38
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d109      	bne.n	8007eb4 <netconn_getaddr+0x28>
 8007ea0:	4b1d      	ldr	r3, [pc, #116]	; (8007f18 <netconn_getaddr+0x8c>)
 8007ea2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007ea6:	491d      	ldr	r1, [pc, #116]	; (8007f1c <netconn_getaddr+0x90>)
 8007ea8:	481d      	ldr	r0, [pc, #116]	; (8007f20 <netconn_getaddr+0x94>)
 8007eaa:	f013 fa5d 	bl	801b368 <iprintf>
 8007eae:	f06f 030f 	mvn.w	r3, #15
 8007eb2:	e02d      	b.n	8007f10 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <netconn_getaddr+0x42>
 8007eba:	4b17      	ldr	r3, [pc, #92]	; (8007f18 <netconn_getaddr+0x8c>)
 8007ebc:	f240 1213 	movw	r2, #275	; 0x113
 8007ec0:	4918      	ldr	r1, [pc, #96]	; (8007f24 <netconn_getaddr+0x98>)
 8007ec2:	4817      	ldr	r0, [pc, #92]	; (8007f20 <netconn_getaddr+0x94>)
 8007ec4:	f013 fa50 	bl	801b368 <iprintf>
 8007ec8:	f06f 030f 	mvn.w	r3, #15
 8007ecc:	e020      	b.n	8007f10 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d109      	bne.n	8007ee8 <netconn_getaddr+0x5c>
 8007ed4:	4b10      	ldr	r3, [pc, #64]	; (8007f18 <netconn_getaddr+0x8c>)
 8007ed6:	f44f 728a 	mov.w	r2, #276	; 0x114
 8007eda:	4913      	ldr	r1, [pc, #76]	; (8007f28 <netconn_getaddr+0x9c>)
 8007edc:	4810      	ldr	r0, [pc, #64]	; (8007f20 <netconn_getaddr+0x94>)
 8007ede:	f013 fa43 	bl	801b368 <iprintf>
 8007ee2:	f06f 030f 	mvn.w	r3, #15
 8007ee6:	e013      	b.n	8007f10 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8007efa:	f107 0314 	add.w	r3, r7, #20
 8007efe:	4619      	mov	r1, r3
 8007f00:	480a      	ldr	r0, [pc, #40]	; (8007f2c <netconn_getaddr+0xa0>)
 8007f02:	f7ff feeb 	bl	8007cdc <netconn_apimsg>
 8007f06:	4603      	mov	r3, r0
 8007f08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8007f0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3738      	adds	r7, #56	; 0x38
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	0801c040 	.word	0x0801c040
 8007f1c:	0801c118 	.word	0x0801c118
 8007f20:	0801c098 	.word	0x0801c098
 8007f24:	0801c138 	.word	0x0801c138
 8007f28:	0801c158 	.word	0x0801c158
 8007f2c:	08009ed1 	.word	0x08009ed1

08007f30 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08e      	sub	sp, #56	; 0x38
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d109      	bne.n	8007f58 <netconn_bind+0x28>
 8007f44:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <netconn_bind+0x5c>)
 8007f46:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007f4a:	4911      	ldr	r1, [pc, #68]	; (8007f90 <netconn_bind+0x60>)
 8007f4c:	4811      	ldr	r0, [pc, #68]	; (8007f94 <netconn_bind+0x64>)
 8007f4e:	f013 fa0b 	bl	801b368 <iprintf>
 8007f52:	f06f 030f 	mvn.w	r3, #15
 8007f56:	e015      	b.n	8007f84 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007f5e:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <netconn_bind+0x68>)
 8007f60:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007f6a:	88fb      	ldrh	r3, [r7, #6]
 8007f6c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007f6e:	f107 0314 	add.w	r3, r7, #20
 8007f72:	4619      	mov	r1, r3
 8007f74:	4809      	ldr	r0, [pc, #36]	; (8007f9c <netconn_bind+0x6c>)
 8007f76:	f7ff feb1 	bl	8007cdc <netconn_apimsg>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007f80:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3738      	adds	r7, #56	; 0x38
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	0801c040 	.word	0x0801c040
 8007f90:	0801c178 	.word	0x0801c178
 8007f94:	0801c098 	.word	0x0801c098
 8007f98:	0801ffd4 	.word	0x0801ffd4
 8007f9c:	08009779 	.word	0x08009779

08007fa0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08c      	sub	sp, #48	; 0x30
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <netconn_listen_with_backlog+0x26>
 8007fb2:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <netconn_listen_with_backlog+0x48>)
 8007fb4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007fb8:	490c      	ldr	r1, [pc, #48]	; (8007fec <netconn_listen_with_backlog+0x4c>)
 8007fba:	480d      	ldr	r0, [pc, #52]	; (8007ff0 <netconn_listen_with_backlog+0x50>)
 8007fbc:	f013 f9d4 	bl	801b368 <iprintf>
 8007fc0:	f06f 030f 	mvn.w	r3, #15
 8007fc4:	e00c      	b.n	8007fe0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007fca:	f107 030c 	add.w	r3, r7, #12
 8007fce:	4619      	mov	r1, r3
 8007fd0:	4808      	ldr	r0, [pc, #32]	; (8007ff4 <netconn_listen_with_backlog+0x54>)
 8007fd2:	f7ff fe83 	bl	8007cdc <netconn_apimsg>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007fdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3730      	adds	r7, #48	; 0x30
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	0801c040 	.word	0x0801c040
 8007fec:	0801c1f8 	.word	0x0801c1f8
 8007ff0:	0801c098 	.word	0x0801c098
 8007ff4:	080097ed 	.word	0x080097ed

08007ff8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d109      	bne.n	800801c <netconn_accept+0x24>
 8008008:	4b3d      	ldr	r3, [pc, #244]	; (8008100 <netconn_accept+0x108>)
 800800a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800800e:	493d      	ldr	r1, [pc, #244]	; (8008104 <netconn_accept+0x10c>)
 8008010:	483d      	ldr	r0, [pc, #244]	; (8008108 <netconn_accept+0x110>)
 8008012:	f013 f9a9 	bl	801b368 <iprintf>
 8008016:	f06f 030f 	mvn.w	r3, #15
 800801a:	e06c      	b.n	80080f6 <netconn_accept+0xfe>
  *new_conn = NULL;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d109      	bne.n	800803c <netconn_accept+0x44>
 8008028:	4b35      	ldr	r3, [pc, #212]	; (8008100 <netconn_accept+0x108>)
 800802a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800802e:	4937      	ldr	r1, [pc, #220]	; (800810c <netconn_accept+0x114>)
 8008030:	4835      	ldr	r0, [pc, #212]	; (8008108 <netconn_accept+0x110>)
 8008032:	f013 f999 	bl	801b368 <iprintf>
 8008036:	f06f 030f 	mvn.w	r3, #15
 800803a:	e05c      	b.n	80080f6 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fb99 	bl	8008774 <netconn_err>
 8008042:	4603      	mov	r3, r0
 8008044:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008046:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800804e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008052:	e050      	b.n	80080f6 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	3314      	adds	r3, #20
 8008058:	4618      	mov	r0, r3
 800805a:	f010 ff7a 	bl	8018f52 <sys_mbox_valid>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <netconn_accept+0x78>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	7f1b      	ldrb	r3, [r3, #28]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008070:	f06f 030e 	mvn.w	r3, #14
 8008074:	e03f      	b.n	80080f6 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	7f1b      	ldrb	r3, [r3, #28]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00e      	beq.n	80080a0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3314      	adds	r3, #20
 8008086:	f107 020c 	add.w	r2, r7, #12
 800808a:	4611      	mov	r1, r2
 800808c:	4618      	mov	r0, r3
 800808e:	f010 ff44 	bl	8018f1a <sys_arch_mbox_tryfetch>
 8008092:	4603      	mov	r3, r0
 8008094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008098:	d10a      	bne.n	80080b0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800809a:	f06f 0306 	mvn.w	r3, #6
 800809e:	e02a      	b.n	80080f6 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3314      	adds	r3, #20
 80080a4:	f107 010c 	add.w	r1, r7, #12
 80080a8:	2200      	movs	r2, #0
 80080aa:	4618      	mov	r0, r3
 80080ac:	f010 fef6 	bl	8018e9c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d005      	beq.n	80080c4 <netconn_accept+0xcc>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	2200      	movs	r2, #0
 80080be:	2101      	movs	r1, #1
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f107 0213 	add.w	r2, r7, #19
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fba3 	bl	8008818 <lwip_netconn_is_err_msg>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d002      	beq.n	80080de <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80080d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080dc:	e00b      	b.n	80080f6 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d102      	bne.n	80080ea <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80080e4:	f06f 030e 	mvn.w	r3, #14
 80080e8:	e005      	b.n	80080f6 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80080f4:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	0801c040 	.word	0x0801c040
 8008104:	0801c218 	.word	0x0801c218
 8008108:	0801c098 	.word	0x0801c098
 800810c:	0801c238 	.word	0x0801c238

08008110 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	4613      	mov	r3, r2
 800811c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d109      	bne.n	800813c <netconn_recv_data+0x2c>
 8008128:	4b58      	ldr	r3, [pc, #352]	; (800828c <netconn_recv_data+0x17c>)
 800812a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800812e:	4958      	ldr	r1, [pc, #352]	; (8008290 <netconn_recv_data+0x180>)
 8008130:	4858      	ldr	r0, [pc, #352]	; (8008294 <netconn_recv_data+0x184>)
 8008132:	f013 f919 	bl	801b368 <iprintf>
 8008136:	f06f 030f 	mvn.w	r3, #15
 800813a:	e0a2      	b.n	8008282 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d109      	bne.n	800815c <netconn_recv_data+0x4c>
 8008148:	4b50      	ldr	r3, [pc, #320]	; (800828c <netconn_recv_data+0x17c>)
 800814a:	f240 224a 	movw	r2, #586	; 0x24a
 800814e:	4952      	ldr	r1, [pc, #328]	; (8008298 <netconn_recv_data+0x188>)
 8008150:	4850      	ldr	r0, [pc, #320]	; (8008294 <netconn_recv_data+0x184>)
 8008152:	f013 f909 	bl	801b368 <iprintf>
 8008156:	f06f 030f 	mvn.w	r3, #15
 800815a:	e092      	b.n	8008282 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	3310      	adds	r3, #16
 8008160:	4618      	mov	r0, r3
 8008162:	f010 fef6 	bl	8018f52 <sys_mbox_valid>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10e      	bne.n	800818a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 fb01 	bl	8008774 <netconn_err>
 8008172:	4603      	mov	r3, r0
 8008174:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008176:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d002      	beq.n	8008184 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800817e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008182:	e07e      	b.n	8008282 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008184:	f06f 030a 	mvn.w	r3, #10
 8008188:	e07b      	b.n	8008282 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	7f1b      	ldrb	r3, [r3, #28]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10f      	bne.n	80081b6 <netconn_recv_data+0xa6>
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	7f1b      	ldrb	r3, [r3, #28]
 80081a4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d023      	beq.n	80081fe <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3310      	adds	r3, #16
 80081ba:	f107 0218 	add.w	r2, r7, #24
 80081be:	4611      	mov	r1, r2
 80081c0:	4618      	mov	r0, r3
 80081c2:	f010 feaa 	bl	8018f1a <sys_arch_mbox_tryfetch>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081cc:	d11f      	bne.n	800820e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 fad0 	bl	8008774 <netconn_err>
 80081d4:	4603      	mov	r3, r0
 80081d6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80081d8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80081e0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80081e4:	e04d      	b.n	8008282 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	7f1b      	ldrb	r3, [r3, #28]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80081f2:	f06f 030a 	mvn.w	r3, #10
 80081f6:	e044      	b.n	8008282 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80081f8:	f06f 0306 	mvn.w	r3, #6
 80081fc:	e041      	b.n	8008282 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3310      	adds	r3, #16
 8008202:	f107 0118 	add.w	r1, r7, #24
 8008206:	2200      	movs	r2, #0
 8008208:	4618      	mov	r0, r3
 800820a:	f010 fe47 	bl	8018e9c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008216:	2b10      	cmp	r3, #16
 8008218:	d117      	bne.n	800824a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	f107 0217 	add.w	r2, r7, #23
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f000 faf8 	bl	8008818 <lwip_netconn_is_err_msg>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d009      	beq.n	8008242 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800822e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008232:	f113 0f0f 	cmn.w	r3, #15
 8008236:	d101      	bne.n	800823c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	e022      	b.n	8008282 <netconn_recv_data+0x172>
      }
      return err;
 800823c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008240:	e01f      	b.n	8008282 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	891b      	ldrh	r3, [r3, #8]
 8008246:	83fb      	strh	r3, [r7, #30]
 8008248:	e00d      	b.n	8008266 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800824a:	69bb      	ldr	r3, [r7, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d106      	bne.n	800825e <netconn_recv_data+0x14e>
 8008250:	4b0e      	ldr	r3, [pc, #56]	; (800828c <netconn_recv_data+0x17c>)
 8008252:	f240 2291 	movw	r2, #657	; 0x291
 8008256:	4911      	ldr	r1, [pc, #68]	; (800829c <netconn_recv_data+0x18c>)
 8008258:	480e      	ldr	r0, [pc, #56]	; (8008294 <netconn_recv_data+0x184>)
 800825a:	f013 f885 	bl	801b368 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	891b      	ldrh	r3, [r3, #8]
 8008264:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	2b00      	cmp	r3, #0
 800826c:	d005      	beq.n	800827a <netconn_recv_data+0x16a>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	8bfa      	ldrh	r2, [r7, #30]
 8008274:	2101      	movs	r1, #1
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3720      	adds	r7, #32
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	0801c040 	.word	0x0801c040
 8008290:	0801c258 	.word	0x0801c258
 8008294:	0801c098 	.word	0x0801c098
 8008298:	0801c278 	.word	0x0801c278
 800829c:	0801c294 	.word	0x0801c294

080082a0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <netconn_tcp_recvd_msg+0x1e>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d009      	beq.n	80082d2 <netconn_tcp_recvd_msg+0x32>
 80082be:	4b0c      	ldr	r3, [pc, #48]	; (80082f0 <netconn_tcp_recvd_msg+0x50>)
 80082c0:	f240 22a7 	movw	r2, #679	; 0x2a7
 80082c4:	490b      	ldr	r1, [pc, #44]	; (80082f4 <netconn_tcp_recvd_msg+0x54>)
 80082c6:	480c      	ldr	r0, [pc, #48]	; (80082f8 <netconn_tcp_recvd_msg+0x58>)
 80082c8:	f013 f84e 	bl	801b368 <iprintf>
 80082cc:	f06f 030f 	mvn.w	r3, #15
 80082d0:	e00a      	b.n	80082e8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	4806      	ldr	r0, [pc, #24]	; (80082fc <netconn_tcp_recvd_msg+0x5c>)
 80082e2:	f7ff fcfb 	bl	8007cdc <netconn_apimsg>
 80082e6:	4603      	mov	r3, r0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	0801c040 	.word	0x0801c040
 80082f4:	0801c2a0 	.word	0x0801c2a0
 80082f8:	0801c098 	.word	0x0801c098
 80082fc:	080099b7 	.word	0x080099b7

08008300 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b08c      	sub	sp, #48	; 0x30
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <netconn_tcp_recvd+0x1c>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008318:	2b10      	cmp	r3, #16
 800831a:	d009      	beq.n	8008330 <netconn_tcp_recvd+0x30>
 800831c:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <netconn_tcp_recvd+0x50>)
 800831e:	f240 22b5 	movw	r2, #693	; 0x2b5
 8008322:	490c      	ldr	r1, [pc, #48]	; (8008354 <netconn_tcp_recvd+0x54>)
 8008324:	480c      	ldr	r0, [pc, #48]	; (8008358 <netconn_tcp_recvd+0x58>)
 8008326:	f013 f81f 	bl	801b368 <iprintf>
 800832a:	f06f 030f 	mvn.w	r3, #15
 800832e:	e00b      	b.n	8008348 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	461a      	mov	r2, r3
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff ffb1 	bl	80082a0 <netconn_tcp_recvd_msg>
 800833e:	4603      	mov	r3, r0
 8008340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8008344:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008348:	4618      	mov	r0, r3
 800834a:	3730      	adds	r7, #48	; 0x30
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	0801c040 	.word	0x0801c040
 8008354:	0801c2a0 	.word	0x0801c2a0
 8008358:	0801c098 	.word	0x0801c098

0800835c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b090      	sub	sp, #64	; 0x40
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3310      	adds	r3, #16
 800836e:	4618      	mov	r0, r3
 8008370:	f010 fdef 	bl	8018f52 <sys_mbox_valid>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d102      	bne.n	8008380 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800837a:	f06f 030a 	mvn.w	r3, #10
 800837e:	e06d      	b.n	800845c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	7f1b      	ldrb	r3, [r3, #28]
 8008384:	b25b      	sxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	da07      	bge.n	800839a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	7f1b      	ldrb	r3, [r3, #28]
 800838e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008392:	b2da      	uxtb	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008398:	e039      	b.n	800840e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800839a:	79fb      	ldrb	r3, [r7, #7]
 800839c:	461a      	mov	r2, r3
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7ff feb5 	bl	8008110 <netconn_recv_data>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80083ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80083b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083b8:	e050      	b.n	800845c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	f003 0308 	and.w	r3, r3, #8
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10e      	bne.n	80083e8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80083ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d002      	beq.n	80083d6 <netconn_recv_data_tcp+0x7a>
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	891b      	ldrh	r3, [r3, #8]
 80083d4:	e000      	b.n	80083d8 <netconn_recv_data_tcp+0x7c>
 80083d6:	2301      	movs	r3, #1
 80083d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80083da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083dc:	f107 0214 	add.w	r2, r7, #20
 80083e0:	4619      	mov	r1, r3
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f7ff ff5c 	bl	80082a0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d134      	bne.n	8008458 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	f003 0310 	and.w	r3, r3, #16
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	7f1b      	ldrb	r3, [r3, #28]
 80083fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008400:	b2da      	uxtb	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008406:	f06f 0306 	mvn.w	r3, #6
 800840a:	e027      	b.n	800845c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800840c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	2b00      	cmp	r3, #0
 8008414:	d005      	beq.n	8008422 <netconn_recv_data_tcp+0xc6>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	2200      	movs	r2, #0
 800841c:	2101      	movs	r1, #1
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10f      	bne.n	800844a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f000 f9a2 	bl	8008774 <netconn_err>
 8008430:	4603      	mov	r3, r0
 8008432:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008436:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <netconn_recv_data_tcp+0xe8>
          return err;
 800843e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008442:	e00b      	b.n	800845c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008444:	f06f 030d 	mvn.w	r3, #13
 8008448:	e008      	b.n	800845c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800844a:	2101      	movs	r1, #1
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f000 f961 	bl	8008714 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008452:	f06f 030e 	mvn.w	r3, #14
 8008456:	e001      	b.n	800845c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008458:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800845c:	4618      	mov	r0, r3
 800845e:	3740      	adds	r7, #64	; 0x40
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	4613      	mov	r3, r2
 8008470:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <netconn_recv_tcp_pbuf_flags+0x20>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008480:	2b10      	cmp	r3, #16
 8008482:	d009      	beq.n	8008498 <netconn_recv_tcp_pbuf_flags+0x34>
 8008484:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8008486:	f240 3225 	movw	r2, #805	; 0x325
 800848a:	490a      	ldr	r1, [pc, #40]	; (80084b4 <netconn_recv_tcp_pbuf_flags+0x50>)
 800848c:	480a      	ldr	r0, [pc, #40]	; (80084b8 <netconn_recv_tcp_pbuf_flags+0x54>)
 800848e:	f012 ff6b 	bl	801b368 <iprintf>
 8008492:	f06f 030f 	mvn.w	r3, #15
 8008496:	e006      	b.n	80084a6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	461a      	mov	r2, r3
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7ff ff5c 	bl	800835c <netconn_recv_data_tcp>
 80084a4:	4603      	mov	r3, r0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	0801c040 	.word	0x0801c040
 80084b4:	0801c2a0 	.word	0x0801c2a0
 80084b8:	0801c098 	.word	0x0801c098

080084bc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	4613      	mov	r3, r2
 80084c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <netconn_recv_udp_raw_netbuf_flags+0x20>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084d8:	2b10      	cmp	r3, #16
 80084da:	d109      	bne.n	80084f0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80084de:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80084e2:	490a      	ldr	r1, [pc, #40]	; (800850c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 80084e4:	480a      	ldr	r0, [pc, #40]	; (8008510 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 80084e6:	f012 ff3f 	bl	801b368 <iprintf>
 80084ea:	f06f 030f 	mvn.w	r3, #15
 80084ee:	e006      	b.n	80084fe <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	461a      	mov	r2, r3
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f7ff fe0a 	bl	8008110 <netconn_recv_data>
 80084fc:	4603      	mov	r3, r0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	0801c040 	.word	0x0801c040
 800850c:	0801c2c4 	.word	0x0801c2c4
 8008510:	0801c098 	.word	0x0801c098

08008514 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08c      	sub	sp, #48	; 0x30
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d109      	bne.n	8008538 <netconn_send+0x24>
 8008524:	4b0e      	ldr	r3, [pc, #56]	; (8008560 <netconn_send+0x4c>)
 8008526:	f240 32b2 	movw	r2, #946	; 0x3b2
 800852a:	490e      	ldr	r1, [pc, #56]	; (8008564 <netconn_send+0x50>)
 800852c:	480e      	ldr	r0, [pc, #56]	; (8008568 <netconn_send+0x54>)
 800852e:	f012 ff1b 	bl	801b368 <iprintf>
 8008532:	f06f 030f 	mvn.w	r3, #15
 8008536:	e00e      	b.n	8008556 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8008540:	f107 030c 	add.w	r3, r7, #12
 8008544:	4619      	mov	r1, r3
 8008546:	4809      	ldr	r0, [pc, #36]	; (800856c <netconn_send+0x58>)
 8008548:	f7ff fbc8 	bl	8007cdc <netconn_apimsg>
 800854c:	4603      	mov	r3, r0
 800854e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008552:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008556:	4618      	mov	r0, r3
 8008558:	3730      	adds	r7, #48	; 0x30
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	0801c040 	.word	0x0801c040
 8008564:	0801c2fc 	.word	0x0801c2fc
 8008568:	0801c098 	.word	0x0801c098
 800856c:	0800991d 	.word	0x0800991d

08008570 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af02      	add	r7, sp, #8
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	f107 0110 	add.w	r1, r7, #16
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	4613      	mov	r3, r2
 8008592:	2201      	movs	r2, #1
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 f805 	bl	80085a4 <netconn_write_vectors_partly>
 800859a:	4603      	mov	r3, r0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b092      	sub	sp, #72	; 0x48
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	60f8      	str	r0, [r7, #12]
 80085ac:	60b9      	str	r1, [r7, #8]
 80085ae:	4611      	mov	r1, r2
 80085b0:	461a      	mov	r2, r3
 80085b2:	460b      	mov	r3, r1
 80085b4:	80fb      	strh	r3, [r7, #6]
 80085b6:	4613      	mov	r3, r2
 80085b8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d109      	bne.n	80085d4 <netconn_write_vectors_partly+0x30>
 80085c0:	4b4e      	ldr	r3, [pc, #312]	; (80086fc <netconn_write_vectors_partly+0x158>)
 80085c2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80085c6:	494e      	ldr	r1, [pc, #312]	; (8008700 <netconn_write_vectors_partly+0x15c>)
 80085c8:	484e      	ldr	r0, [pc, #312]	; (8008704 <netconn_write_vectors_partly+0x160>)
 80085ca:	f012 fecd 	bl	801b368 <iprintf>
 80085ce:	f06f 030f 	mvn.w	r3, #15
 80085d2:	e08e      	b.n	80086f2 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085dc:	2b10      	cmp	r3, #16
 80085de:	d009      	beq.n	80085f4 <netconn_write_vectors_partly+0x50>
 80085e0:	4b46      	ldr	r3, [pc, #280]	; (80086fc <netconn_write_vectors_partly+0x158>)
 80085e2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80085e6:	4948      	ldr	r1, [pc, #288]	; (8008708 <netconn_write_vectors_partly+0x164>)
 80085e8:	4846      	ldr	r0, [pc, #280]	; (8008704 <netconn_write_vectors_partly+0x160>)
 80085ea:	f012 febd 	bl	801b368 <iprintf>
 80085ee:	f06f 0305 	mvn.w	r3, #5
 80085f2:	e07e      	b.n	80086f2 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	7f1b      	ldrb	r3, [r3, #28]
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d104      	bne.n	800860a <netconn_write_vectors_partly+0x66>
 8008600:	797b      	ldrb	r3, [r7, #5]
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <netconn_write_vectors_partly+0x6a>
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <netconn_write_vectors_partly+0x6c>
 800860e:	2300      	movs	r3, #0
 8008610:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008614:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <netconn_write_vectors_partly+0x84>
 800861c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800861e:	2b00      	cmp	r3, #0
 8008620:	d102      	bne.n	8008628 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008622:	f06f 0305 	mvn.w	r3, #5
 8008626:	e064      	b.n	80086f2 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008628:	2300      	movs	r3, #0
 800862a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800862c:	2300      	movs	r3, #0
 800862e:	643b      	str	r3, [r7, #64]	; 0x40
 8008630:	e015      	b.n	800865e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008634:	00db      	lsls	r3, r3, #3
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	4413      	add	r3, r2
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800863e:	4413      	add	r3, r2
 8008640:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008644:	00db      	lsls	r3, r3, #3
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	4413      	add	r3, r2
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800864e:	429a      	cmp	r2, r3
 8008650:	d202      	bcs.n	8008658 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008652:	f06f 0305 	mvn.w	r3, #5
 8008656:	e04c      	b.n	80086f2 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800865a:	3301      	adds	r3, #1
 800865c:	643b      	str	r3, [r7, #64]	; 0x40
 800865e:	88fb      	ldrh	r3, [r7, #6]
 8008660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008662:	429a      	cmp	r2, r3
 8008664:	dbe5      	blt.n	8008632 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	e040      	b.n	80086f2 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008672:	2b00      	cmp	r3, #0
 8008674:	da0a      	bge.n	800868c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008678:	2b00      	cmp	r3, #0
 800867a:	d102      	bne.n	8008682 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800867c:	f06f 0305 	mvn.w	r3, #5
 8008680:	e037      	b.n	80086f2 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008682:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008686:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008694:	88fb      	ldrh	r3, [r7, #6]
 8008696:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800869c:	797b      	ldrb	r3, [r7, #5]
 800869e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80086a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80086aa:	f107 0314 	add.w	r3, r7, #20
 80086ae:	4619      	mov	r1, r3
 80086b0:	4816      	ldr	r0, [pc, #88]	; (800870c <netconn_write_vectors_partly+0x168>)
 80086b2:	f7ff fb13 	bl	8007cdc <netconn_apimsg>
 80086b6:	4603      	mov	r3, r0
 80086b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80086bc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d114      	bne.n	80086ee <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80086c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d002      	beq.n	80086d0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80086ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ce:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80086d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086dc:	429a      	cmp	r2, r3
 80086de:	d006      	beq.n	80086ee <netconn_write_vectors_partly+0x14a>
 80086e0:	4b06      	ldr	r3, [pc, #24]	; (80086fc <netconn_write_vectors_partly+0x158>)
 80086e2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80086e6:	490a      	ldr	r1, [pc, #40]	; (8008710 <netconn_write_vectors_partly+0x16c>)
 80086e8:	4806      	ldr	r0, [pc, #24]	; (8008704 <netconn_write_vectors_partly+0x160>)
 80086ea:	f012 fe3d 	bl	801b368 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80086ee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3748      	adds	r7, #72	; 0x48
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	0801c040 	.word	0x0801c040
 8008700:	0801c318 	.word	0x0801c318
 8008704:	0801c098 	.word	0x0801c098
 8008708:	0801c334 	.word	0x0801c334
 800870c:	08009db9 	.word	0x08009db9
 8008710:	0801c358 	.word	0x0801c358

08008714 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08c      	sub	sp, #48	; 0x30
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	460b      	mov	r3, r1
 800871e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d109      	bne.n	800873a <netconn_close_shutdown+0x26>
 8008726:	4b0f      	ldr	r3, [pc, #60]	; (8008764 <netconn_close_shutdown+0x50>)
 8008728:	f240 4247 	movw	r2, #1095	; 0x447
 800872c:	490e      	ldr	r1, [pc, #56]	; (8008768 <netconn_close_shutdown+0x54>)
 800872e:	480f      	ldr	r0, [pc, #60]	; (800876c <netconn_close_shutdown+0x58>)
 8008730:	f012 fe1a 	bl	801b368 <iprintf>
 8008734:	f06f 030f 	mvn.w	r3, #15
 8008738:	e010      	b.n	800875c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800873e:	78fb      	ldrb	r3, [r7, #3]
 8008740:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008742:	2329      	movs	r3, #41	; 0x29
 8008744:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008746:	f107 030c 	add.w	r3, r7, #12
 800874a:	4619      	mov	r1, r3
 800874c:	4808      	ldr	r0, [pc, #32]	; (8008770 <netconn_close_shutdown+0x5c>)
 800874e:	f7ff fac5 	bl	8007cdc <netconn_apimsg>
 8008752:	4603      	mov	r3, r0
 8008754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008758:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800875c:	4618      	mov	r0, r3
 800875e:	3730      	adds	r7, #48	; 0x30
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	0801c040 	.word	0x0801c040
 8008768:	0801c37c 	.word	0x0801c37c
 800876c:	0801c098 	.word	0x0801c098
 8008770:	08009fdd 	.word	0x08009fdd

08008774 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <netconn_err+0x12>
    return ERR_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	e00d      	b.n	80087a2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008786:	f010 fcff 	bl	8019188 <sys_arch_protect>
 800878a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	7a1b      	ldrb	r3, [r3, #8]
 8008790:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f010 fd03 	bl	80191a4 <sys_arch_unprotect>
  return err;
 800879e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80087b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087ba:	f113 0f0d 	cmn.w	r3, #13
 80087be:	d009      	beq.n	80087d4 <lwip_netconn_err_to_msg+0x28>
 80087c0:	f113 0f0d 	cmn.w	r3, #13
 80087c4:	dc0c      	bgt.n	80087e0 <lwip_netconn_err_to_msg+0x34>
 80087c6:	f113 0f0f 	cmn.w	r3, #15
 80087ca:	d007      	beq.n	80087dc <lwip_netconn_err_to_msg+0x30>
 80087cc:	f113 0f0e 	cmn.w	r3, #14
 80087d0:	d002      	beq.n	80087d8 <lwip_netconn_err_to_msg+0x2c>
 80087d2:	e005      	b.n	80087e0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80087d4:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <lwip_netconn_err_to_msg+0x54>)
 80087d6:	e00e      	b.n	80087f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80087d8:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <lwip_netconn_err_to_msg+0x58>)
 80087da:	e00c      	b.n	80087f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80087dc:	4b0a      	ldr	r3, [pc, #40]	; (8008808 <lwip_netconn_err_to_msg+0x5c>)
 80087de:	e00a      	b.n	80087f6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80087e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d005      	beq.n	80087f4 <lwip_netconn_err_to_msg+0x48>
 80087e8:	4b08      	ldr	r3, [pc, #32]	; (800880c <lwip_netconn_err_to_msg+0x60>)
 80087ea:	227d      	movs	r2, #125	; 0x7d
 80087ec:	4908      	ldr	r1, [pc, #32]	; (8008810 <lwip_netconn_err_to_msg+0x64>)
 80087ee:	4809      	ldr	r0, [pc, #36]	; (8008814 <lwip_netconn_err_to_msg+0x68>)
 80087f0:	f012 fdba 	bl	801b368 <iprintf>
      return NULL;
 80087f4:	2300      	movs	r3, #0
  }
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	0801fe6c 	.word	0x0801fe6c
 8008804:	0801fe6d 	.word	0x0801fe6d
 8008808:	0801fe6e 	.word	0x0801fe6e
 800880c:	0801c398 	.word	0x0801c398
 8008810:	0801c3cc 	.word	0x0801c3cc
 8008814:	0801c3dc 	.word	0x0801c3dc

08008818 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d105      	bne.n	8008834 <lwip_netconn_is_err_msg+0x1c>
 8008828:	4b12      	ldr	r3, [pc, #72]	; (8008874 <lwip_netconn_is_err_msg+0x5c>)
 800882a:	2285      	movs	r2, #133	; 0x85
 800882c:	4912      	ldr	r1, [pc, #72]	; (8008878 <lwip_netconn_is_err_msg+0x60>)
 800882e:	4813      	ldr	r0, [pc, #76]	; (800887c <lwip_netconn_is_err_msg+0x64>)
 8008830:	f012 fd9a 	bl	801b368 <iprintf>

  if (msg == &netconn_aborted) {
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a12      	ldr	r2, [pc, #72]	; (8008880 <lwip_netconn_is_err_msg+0x68>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d104      	bne.n	8008846 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	22f3      	movs	r2, #243	; 0xf3
 8008840:	701a      	strb	r2, [r3, #0]
    return 1;
 8008842:	2301      	movs	r3, #1
 8008844:	e012      	b.n	800886c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a0e      	ldr	r2, [pc, #56]	; (8008884 <lwip_netconn_is_err_msg+0x6c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d104      	bne.n	8008858 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	22f2      	movs	r2, #242	; 0xf2
 8008852:	701a      	strb	r2, [r3, #0]
    return 1;
 8008854:	2301      	movs	r3, #1
 8008856:	e009      	b.n	800886c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a0b      	ldr	r2, [pc, #44]	; (8008888 <lwip_netconn_is_err_msg+0x70>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d104      	bne.n	800886a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	22f1      	movs	r2, #241	; 0xf1
 8008864:	701a      	strb	r2, [r3, #0]
    return 1;
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	0801c398 	.word	0x0801c398
 8008878:	0801c404 	.word	0x0801c404
 800887c:	0801c3dc 	.word	0x0801c3dc
 8008880:	0801fe6c 	.word	0x0801fe6c
 8008884:	0801fe6d 	.word	0x0801fe6d
 8008888:	0801fe6e 	.word	0x0801fe6e

0800888c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b088      	sub	sp, #32
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
 8008898:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <recv_udp+0x20>
 80088a0:	4b34      	ldr	r3, [pc, #208]	; (8008974 <recv_udp+0xe8>)
 80088a2:	22e5      	movs	r2, #229	; 0xe5
 80088a4:	4934      	ldr	r1, [pc, #208]	; (8008978 <recv_udp+0xec>)
 80088a6:	4835      	ldr	r0, [pc, #212]	; (800897c <recv_udp+0xf0>)
 80088a8:	f012 fd5e 	bl	801b368 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d105      	bne.n	80088be <recv_udp+0x32>
 80088b2:	4b30      	ldr	r3, [pc, #192]	; (8008974 <recv_udp+0xe8>)
 80088b4:	22e6      	movs	r2, #230	; 0xe6
 80088b6:	4932      	ldr	r1, [pc, #200]	; (8008980 <recv_udp+0xf4>)
 80088b8:	4830      	ldr	r0, [pc, #192]	; (800897c <recv_udp+0xf0>)
 80088ba:	f012 fd55 	bl	801b368 <iprintf>
  conn = (struct netconn *)arg;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d103      	bne.n	80088d0 <recv_udp+0x44>
    pbuf_free(p);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f004 fe71 	bl	800d5b0 <pbuf_free>
    return;
 80088ce:	e04d      	b.n	800896c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d005      	beq.n	80088e6 <recv_udp+0x5a>
 80088da:	4b26      	ldr	r3, [pc, #152]	; (8008974 <recv_udp+0xe8>)
 80088dc:	22ee      	movs	r2, #238	; 0xee
 80088de:	4929      	ldr	r1, [pc, #164]	; (8008984 <recv_udp+0xf8>)
 80088e0:	4826      	ldr	r0, [pc, #152]	; (800897c <recv_udp+0xf0>)
 80088e2:	f012 fd41 	bl	801b368 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	3310      	adds	r3, #16
 80088ea:	4618      	mov	r0, r3
 80088ec:	f010 fb31 	bl	8018f52 <sys_mbox_valid>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d103      	bne.n	80088fe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f004 fe5a 	bl	800d5b0 <pbuf_free>
    return;
 80088fc:	e036      	b.n	800896c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80088fe:	2006      	movs	r0, #6
 8008900:	f003 fec6 	bl	800c690 <memp_malloc>
 8008904:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d103      	bne.n	8008914 <recv_udp+0x88>
    pbuf_free(p);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f004 fe4f 	bl	800d5b0 <pbuf_free>
    return;
 8008912:	e02b      	b.n	800896c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <recv_udp+0xa0>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	e000      	b.n	800892e <recv_udp+0xa2>
 800892c:	2300      	movs	r3, #0
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008936:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	891b      	ldrh	r3, [r3, #8]
 800893c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	3310      	adds	r3, #16
 8008942:	69b9      	ldr	r1, [r7, #24]
 8008944:	4618      	mov	r0, r3
 8008946:	f010 fa8f 	bl	8018e68 <sys_mbox_trypost>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008950:	69b8      	ldr	r0, [r7, #24]
 8008952:	f001 fbed 	bl	800a130 <netbuf_delete>
    return;
 8008956:	e009      	b.n	800896c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <recv_udp+0xe0>
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	8afa      	ldrh	r2, [r7, #22]
 8008966:	2100      	movs	r1, #0
 8008968:	69f8      	ldr	r0, [r7, #28]
 800896a:	4798      	blx	r3
  }
}
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	0801c398 	.word	0x0801c398
 8008978:	0801c410 	.word	0x0801c410
 800897c:	0801c3dc 	.word	0x0801c3dc
 8008980:	0801c434 	.word	0x0801c434
 8008984:	0801c454 	.word	0x0801c454

08008988 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b088      	sub	sp, #32
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d106      	bne.n	80089aa <recv_tcp+0x22>
 800899c:	4b36      	ldr	r3, [pc, #216]	; (8008a78 <recv_tcp+0xf0>)
 800899e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80089a2:	4936      	ldr	r1, [pc, #216]	; (8008a7c <recv_tcp+0xf4>)
 80089a4:	4836      	ldr	r0, [pc, #216]	; (8008a80 <recv_tcp+0xf8>)
 80089a6:	f012 fcdf 	bl	801b368 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <recv_tcp+0x36>
 80089b0:	4b31      	ldr	r3, [pc, #196]	; (8008a78 <recv_tcp+0xf0>)
 80089b2:	f240 122d 	movw	r2, #301	; 0x12d
 80089b6:	4933      	ldr	r1, [pc, #204]	; (8008a84 <recv_tcp+0xfc>)
 80089b8:	4831      	ldr	r0, [pc, #196]	; (8008a80 <recv_tcp+0xf8>)
 80089ba:	f012 fcd5 	bl	801b368 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80089be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d006      	beq.n	80089d4 <recv_tcp+0x4c>
 80089c6:	4b2c      	ldr	r3, [pc, #176]	; (8008a78 <recv_tcp+0xf0>)
 80089c8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80089cc:	492e      	ldr	r1, [pc, #184]	; (8008a88 <recv_tcp+0x100>)
 80089ce:	482c      	ldr	r0, [pc, #176]	; (8008a80 <recv_tcp+0xf8>)
 80089d0:	f012 fcca 	bl	801b368 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d102      	bne.n	80089e4 <recv_tcp+0x5c>
    return ERR_VAL;
 80089de:	f06f 0305 	mvn.w	r3, #5
 80089e2:	e045      	b.n	8008a70 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d006      	beq.n	80089fc <recv_tcp+0x74>
 80089ee:	4b22      	ldr	r3, [pc, #136]	; (8008a78 <recv_tcp+0xf0>)
 80089f0:	f240 1235 	movw	r2, #309	; 0x135
 80089f4:	4925      	ldr	r1, [pc, #148]	; (8008a8c <recv_tcp+0x104>)
 80089f6:	4822      	ldr	r0, [pc, #136]	; (8008a80 <recv_tcp+0xf8>)
 80089f8:	f012 fcb6 	bl	801b368 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	3310      	adds	r3, #16
 8008a00:	4618      	mov	r0, r3
 8008a02:	f010 faa6 	bl	8018f52 <sys_mbox_valid>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10d      	bne.n	8008a28 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d008      	beq.n	8008a24 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	891b      	ldrh	r3, [r3, #8]
 8008a16:	4619      	mov	r1, r3
 8008a18:	68b8      	ldr	r0, [r7, #8]
 8008a1a:	f005 fdab 	bl	800e574 <tcp_recved>
      pbuf_free(p);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f004 fdc6 	bl	800d5b0 <pbuf_free>
    }
    return ERR_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e023      	b.n	8008a70 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d005      	beq.n	8008a3a <recv_tcp+0xb2>
    msg = p;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	891b      	ldrh	r3, [r3, #8]
 8008a36:	83fb      	strh	r3, [r7, #30]
 8008a38:	e003      	b.n	8008a42 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008a3a:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <recv_tcp+0x108>)
 8008a3c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	3310      	adds	r3, #16
 8008a46:	69b9      	ldr	r1, [r7, #24]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f010 fa0d 	bl	8018e68 <sys_mbox_trypost>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008a54:	f04f 33ff 	mov.w	r3, #4294967295
 8008a58:	e00a      	b.n	8008a70 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d005      	beq.n	8008a6e <recv_tcp+0xe6>
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	8bfa      	ldrh	r2, [r7, #30]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	6978      	ldr	r0, [r7, #20]
 8008a6c:	4798      	blx	r3
  }

  return ERR_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3720      	adds	r7, #32
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	0801c398 	.word	0x0801c398
 8008a7c:	0801c474 	.word	0x0801c474
 8008a80:	0801c3dc 	.word	0x0801c3dc
 8008a84:	0801c498 	.word	0x0801c498
 8008a88:	0801c4b8 	.word	0x0801c4b8
 8008a8c:	0801c4d0 	.word	0x0801c4d0
 8008a90:	0801fe6e 	.word	0x0801fe6e

08008a94 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <poll_tcp+0x22>
 8008aa8:	4b29      	ldr	r3, [pc, #164]	; (8008b50 <poll_tcp+0xbc>)
 8008aaa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008aae:	4929      	ldr	r1, [pc, #164]	; (8008b54 <poll_tcp+0xc0>)
 8008ab0:	4829      	ldr	r0, [pc, #164]	; (8008b58 <poll_tcp+0xc4>)
 8008ab2:	f012 fc59 	bl	801b368 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	785b      	ldrb	r3, [r3, #1]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d104      	bne.n	8008ac8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008abe:	2101      	movs	r1, #1
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 ffad 	bl	8009a20 <lwip_netconn_do_writemore>
 8008ac6:	e016      	b.n	8008af6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d112      	bne.n	8008af6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00a      	beq.n	8008aee <poll_tcp+0x5a>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	7a5b      	ldrb	r3, [r3, #9]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d005      	beq.n	8008aee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	7a5a      	ldrb	r2, [r3, #9]
 8008ae8:	3a01      	subs	r2, #1
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008aee:	2101      	movs	r1, #1
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f000 fbf7 	bl	80092e4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	7f1b      	ldrb	r3, [r3, #28]
 8008afa:	f003 0310 	and.w	r3, r3, #16
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d021      	beq.n	8008b46 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d01d      	beq.n	8008b46 <poll_tcp+0xb2>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008b12:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008b16:	d316      	bcc.n	8008b46 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d810      	bhi.n	8008b46 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	7f1b      	ldrb	r3, [r3, #28]
 8008b28:	f023 0310 	bic.w	r3, r3, #16
 8008b2c:	b2da      	uxtb	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d005      	beq.n	8008b46 <poll_tcp+0xb2>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2102      	movs	r1, #2
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	0801c398 	.word	0x0801c398
 8008b54:	0801c4f0 	.word	0x0801c4f0
 8008b58:	0801c3dc 	.word	0x0801c3dc

08008b5c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d106      	bne.n	8008b82 <sent_tcp+0x26>
 8008b74:	4b20      	ldr	r3, [pc, #128]	; (8008bf8 <sent_tcp+0x9c>)
 8008b76:	f240 1293 	movw	r2, #403	; 0x193
 8008b7a:	4920      	ldr	r1, [pc, #128]	; (8008bfc <sent_tcp+0xa0>)
 8008b7c:	4820      	ldr	r0, [pc, #128]	; (8008c00 <sent_tcp+0xa4>)
 8008b7e:	f012 fbf3 	bl	801b368 <iprintf>

  if (conn) {
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d032      	beq.n	8008bee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	785b      	ldrb	r3, [r3, #1]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d104      	bne.n	8008b9a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008b90:	2101      	movs	r1, #1
 8008b92:	6978      	ldr	r0, [r7, #20]
 8008b94:	f000 ff44 	bl	8009a20 <lwip_netconn_do_writemore>
 8008b98:	e007      	b.n	8008baa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	785b      	ldrb	r3, [r3, #1]
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	d103      	bne.n	8008baa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	6978      	ldr	r0, [r7, #20]
 8008ba6:	f000 fb9d 	bl	80092e4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d01d      	beq.n	8008bee <sent_tcp+0x92>
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008bba:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008bbe:	d316      	bcc.n	8008bee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d810      	bhi.n	8008bee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	7f1b      	ldrb	r3, [r3, #28]
 8008bd0:	f023 0310 	bic.w	r3, r3, #16
 8008bd4:	b2da      	uxtb	r2, r3
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d005      	beq.n	8008bee <sent_tcp+0x92>
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	88fa      	ldrh	r2, [r7, #6]
 8008be8:	2102      	movs	r1, #2
 8008bea:	6978      	ldr	r0, [r7, #20]
 8008bec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3718      	adds	r7, #24
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	0801c398 	.word	0x0801c398
 8008bfc:	0801c4f0 	.word	0x0801c4f0
 8008c00:	0801c3dc 	.word	0x0801c3dc

08008c04 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <err_tcp+0x24>
 8008c1a:	4b5f      	ldr	r3, [pc, #380]	; (8008d98 <err_tcp+0x194>)
 8008c1c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008c20:	495e      	ldr	r1, [pc, #376]	; (8008d9c <err_tcp+0x198>)
 8008c22:	485f      	ldr	r0, [pc, #380]	; (8008da0 <err_tcp+0x19c>)
 8008c24:	f012 fba0 	bl	801b368 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008c28:	f010 faae 	bl	8019188 <sys_arch_protect>
 8008c2c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	2200      	movs	r2, #0
 8008c32:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	7f1b      	ldrb	r3, [r3, #28]
 8008c3e:	f043 0301 	orr.w	r3, r3, #1
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	2200      	movs	r2, #0
 8008c52:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008c54:	69b8      	ldr	r0, [r7, #24]
 8008c56:	f010 faa5 	bl	80191a4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d005      	beq.n	8008c6e <err_tcp+0x6a>
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c66:	2200      	movs	r2, #0
 8008c68:	2104      	movs	r1, #4
 8008c6a:	69f8      	ldr	r0, [r7, #28]
 8008c6c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <err_tcp+0x7e>
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	69f8      	ldr	r0, [r7, #28]
 8008c80:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d005      	beq.n	8008c96 <err_tcp+0x92>
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2102      	movs	r1, #2
 8008c92:	69f8      	ldr	r0, [r7, #28]
 8008c94:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff fd86 	bl	80087ac <lwip_netconn_err_to_msg>
 8008ca0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	3310      	adds	r3, #16
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f010 f953 	bl	8018f52 <sys_mbox_valid>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d005      	beq.n	8008cbe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	3310      	adds	r3, #16
 8008cb6:	6939      	ldr	r1, [r7, #16]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f010 f8d5 	bl	8018e68 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	3314      	adds	r3, #20
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f010 f945 	bl	8018f52 <sys_mbox_valid>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	3314      	adds	r3, #20
 8008cd2:	6939      	ldr	r1, [r7, #16]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f010 f8c7 	bl	8018e68 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008cda:	7dfb      	ldrb	r3, [r7, #23]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d005      	beq.n	8008cec <err_tcp+0xe8>
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d002      	beq.n	8008cec <err_tcp+0xe8>
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d143      	bne.n	8008d74 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	7f1b      	ldrb	r3, [r3, #28]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bf14      	ite	ne
 8008cf8:	2301      	movne	r3, #1
 8008cfa:	2300      	moveq	r3, #0
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	7f1b      	ldrb	r3, [r3, #28]
 8008d04:	f023 0304 	bic.w	r3, r3, #4
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d13b      	bne.n	8008d8c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <err_tcp+0x126>
 8008d1c:	4b1e      	ldr	r3, [pc, #120]	; (8008d98 <err_tcp+0x194>)
 8008d1e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008d22:	4920      	ldr	r1, [pc, #128]	; (8008da4 <err_tcp+0x1a0>)
 8008d24:	481e      	ldr	r0, [pc, #120]	; (8008da0 <err_tcp+0x19c>)
 8008d26:	f012 fb1f 	bl	801b368 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8008d2a:	7dfb      	ldrb	r3, [r7, #23]
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d104      	bne.n	8008d3a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	2200      	movs	r2, #0
 8008d36:	711a      	strb	r2, [r3, #4]
 8008d38:	e003      	b.n	8008d42 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	78fa      	ldrb	r2, [r7, #3]
 8008d40:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008d4c:	68b8      	ldr	r0, [r7, #8]
 8008d4e:	f010 f991 	bl	8019074 <sys_sem_valid>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d106      	bne.n	8008d66 <err_tcp+0x162>
 8008d58:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <err_tcp+0x194>)
 8008d5a:	f240 12ef 	movw	r2, #495	; 0x1ef
 8008d5e:	4912      	ldr	r1, [pc, #72]	; (8008da8 <err_tcp+0x1a4>)
 8008d60:	480f      	ldr	r0, [pc, #60]	; (8008da0 <err_tcp+0x19c>)
 8008d62:	f012 fb01 	bl	801b368 <iprintf>
      conn->current_msg = NULL;
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8008d6c:	68b8      	ldr	r0, [r7, #8]
 8008d6e:	f010 f967 	bl	8019040 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008d72:	e00b      	b.n	8008d8c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d008      	beq.n	8008d8e <err_tcp+0x18a>
 8008d7c:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <err_tcp+0x194>)
 8008d7e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008d82:	490a      	ldr	r1, [pc, #40]	; (8008dac <err_tcp+0x1a8>)
 8008d84:	4806      	ldr	r0, [pc, #24]	; (8008da0 <err_tcp+0x19c>)
 8008d86:	f012 faef 	bl	801b368 <iprintf>
  }
}
 8008d8a:	e000      	b.n	8008d8e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8008d8c:	bf00      	nop
}
 8008d8e:	bf00      	nop
 8008d90:	3720      	adds	r7, #32
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	0801c398 	.word	0x0801c398
 8008d9c:	0801c4f0 	.word	0x0801c4f0
 8008da0:	0801c3dc 	.word	0x0801c3dc
 8008da4:	0801c500 	.word	0x0801c500
 8008da8:	0801c51c 	.word	0x0801c51c
 8008dac:	0801c538 	.word	0x0801c538

08008db0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008dbe:	6879      	ldr	r1, [r7, #4]
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f006 fa9d 	bl	800f300 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008dc6:	490a      	ldr	r1, [pc, #40]	; (8008df0 <setup_tcp+0x40>)
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f006 faab 	bl	800f324 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008dce:	4909      	ldr	r1, [pc, #36]	; (8008df4 <setup_tcp+0x44>)
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f006 fac9 	bl	800f368 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	4907      	ldr	r1, [pc, #28]	; (8008df8 <setup_tcp+0x48>)
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f006 fb20 	bl	800f420 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008de0:	4906      	ldr	r1, [pc, #24]	; (8008dfc <setup_tcp+0x4c>)
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f006 fae2 	bl	800f3ac <tcp_err>
}
 8008de8:	bf00      	nop
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	08008989 	.word	0x08008989
 8008df4:	08008b5d 	.word	0x08008b5d
 8008df8:	08008a95 	.word	0x08008a95
 8008dfc:	08008c05 	.word	0x08008c05

08008e00 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008e00:	b590      	push	{r4, r7, lr}
 8008e02:	b089      	sub	sp, #36	; 0x24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d102      	bne.n	8008e1e <accept_function+0x1e>
    return ERR_VAL;
 8008e18:	f06f 0305 	mvn.w	r3, #5
 8008e1c:	e0a1      	b.n	8008f62 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	3314      	adds	r3, #20
 8008e22:	4618      	mov	r0, r3
 8008e24:	f010 f895 	bl	8018f52 <sys_mbox_valid>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008e2e:	f06f 0305 	mvn.w	r3, #5
 8008e32:	e096      	b.n	8008f62 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d11b      	bne.n	8008e72 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	f103 0414 	add.w	r4, r3, #20
 8008e40:	f06f 000c 	mvn.w	r0, #12
 8008e44:	f7ff fcb2 	bl	80087ac <lwip_netconn_err_to_msg>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f010 f80b 	bl	8018e68 <sys_mbox_trypost>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d109      	bne.n	8008e6c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <accept_function+0x6c>
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	2200      	movs	r2, #0
 8008e66:	2100      	movs	r1, #0
 8008e68:	69f8      	ldr	r0, [r7, #28]
 8008e6a:	4798      	blx	r3
    }
    return ERR_VAL;
 8008e6c:	f06f 0305 	mvn.w	r3, #5
 8008e70:	e077      	b.n	8008f62 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d006      	beq.n	8008e88 <accept_function+0x88>
 8008e7a:	4b3c      	ldr	r3, [pc, #240]	; (8008f6c <accept_function+0x16c>)
 8008e7c:	f240 222a 	movw	r2, #554	; 0x22a
 8008e80:	493b      	ldr	r1, [pc, #236]	; (8008f70 <accept_function+0x170>)
 8008e82:	483c      	ldr	r0, [pc, #240]	; (8008f74 <accept_function+0x174>)
 8008e84:	f012 fa70 	bl	801b368 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	781a      	ldrb	r2, [r3, #0]
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	4619      	mov	r1, r3
 8008e92:	4610      	mov	r0, r2
 8008e94:	f000 f8f0 	bl	8009078 <netconn_alloc>
 8008e98:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d11b      	bne.n	8008ed8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	f103 0414 	add.w	r4, r3, #20
 8008ea6:	f06f 000c 	mvn.w	r0, #12
 8008eaa:	f7ff fc7f 	bl	80087ac <lwip_netconn_err_to_msg>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f00f ffd8 	bl	8018e68 <sys_mbox_trypost>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d005      	beq.n	8008ed2 <accept_function+0xd2>
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2100      	movs	r1, #0
 8008ece:	69f8      	ldr	r0, [r7, #28]
 8008ed0:	4798      	blx	r3
    }
    return ERR_MEM;
 8008ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed6:	e044      	b.n	8008f62 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008ede:	69b8      	ldr	r0, [r7, #24]
 8008ee0:	f7ff ff66 	bl	8008db0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	3314      	adds	r3, #20
 8008ee8:	69b9      	ldr	r1, [r7, #24]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f00f ffbc 	bl	8018e68 <sys_mbox_trypost>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d02a      	beq.n	8008f4c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008efc:	2100      	movs	r1, #0
 8008efe:	6978      	ldr	r0, [r7, #20]
 8008f00:	f006 f9fe 	bl	800f300 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008f04:	2100      	movs	r1, #0
 8008f06:	6978      	ldr	r0, [r7, #20]
 8008f08:	f006 fa0c 	bl	800f324 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	6978      	ldr	r0, [r7, #20]
 8008f10:	f006 fa2a 	bl	800f368 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008f14:	2200      	movs	r2, #0
 8008f16:	2100      	movs	r1, #0
 8008f18:	6978      	ldr	r0, [r7, #20]
 8008f1a:	f006 fa81 	bl	800f420 <tcp_poll>
    tcp_err(pcb, NULL);
 8008f1e:	2100      	movs	r1, #0
 8008f20:	6978      	ldr	r0, [r7, #20]
 8008f22:	f006 fa43 	bl	800f3ac <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	3310      	adds	r3, #16
 8008f30:	4618      	mov	r0, r3
 8008f32:	f00f ff87 	bl	8018e44 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	3310      	adds	r3, #16
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f010 f81a 	bl	8018f74 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008f40:	69b8      	ldr	r0, [r7, #24]
 8008f42:	f000 f907 	bl	8009154 <netconn_free>
    return ERR_MEM;
 8008f46:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4a:	e00a      	b.n	8008f62 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d005      	beq.n	8008f60 <accept_function+0x160>
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	69f8      	ldr	r0, [r7, #28]
 8008f5e:	4798      	blx	r3
  }

  return ERR_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3724      	adds	r7, #36	; 0x24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd90      	pop	{r4, r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	0801c398 	.word	0x0801c398
 8008f70:	0801c554 	.word	0x0801c554
 8008f74:	0801c3dc 	.word	0x0801c3dc

08008f78 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008f78:	b590      	push	{r4, r7, lr}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d006      	beq.n	8008f9c <pcb_new+0x24>
 8008f8e:	4b2b      	ldr	r3, [pc, #172]	; (800903c <pcb_new+0xc4>)
 8008f90:	f240 2265 	movw	r2, #613	; 0x265
 8008f94:	492a      	ldr	r1, [pc, #168]	; (8009040 <pcb_new+0xc8>)
 8008f96:	482b      	ldr	r0, [pc, #172]	; (8009044 <pcb_new+0xcc>)
 8008f98:	f012 f9e6 	bl	801b368 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fa6:	2b10      	cmp	r3, #16
 8008fa8:	d022      	beq.n	8008ff0 <pcb_new+0x78>
 8008faa:	2b20      	cmp	r3, #32
 8008fac:	d133      	bne.n	8009016 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681c      	ldr	r4, [r3, #0]
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f00b fcf0 	bl	801499a <udp_new_ip_type>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d02a      	beq.n	800901e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b22      	cmp	r3, #34	; 0x22
 8008fd0:	d104      	bne.n	8008fdc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6858      	ldr	r0, [r3, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	4917      	ldr	r1, [pc, #92]	; (8009048 <pcb_new+0xd0>)
 8008fea:	f00b fc5d 	bl	80148a8 <udp_recv>
      }
      break;
 8008fee:	e016      	b.n	800901e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681c      	ldr	r4, [r3, #0]
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f006 f974 	bl	800f2e4 <tcp_new_ip_type>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00b      	beq.n	8009022 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff fece 	bl	8008db0 <setup_tcp>
      }
      break;
 8009014:	e005      	b.n	8009022 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	22fa      	movs	r2, #250	; 0xfa
 800901a:	711a      	strb	r2, [r3, #4]
      return;
 800901c:	e00a      	b.n	8009034 <pcb_new+0xbc>
      break;
 800901e:	bf00      	nop
 8009020:	e000      	b.n	8009024 <pcb_new+0xac>
      break;
 8009022:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d102      	bne.n	8009034 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	22ff      	movs	r2, #255	; 0xff
 8009032:	711a      	strb	r2, [r3, #4]
  }
}
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	bd90      	pop	{r4, r7, pc}
 800903a:	bf00      	nop
 800903c:	0801c398 	.word	0x0801c398
 8009040:	0801c57c 	.word	0x0801c57c
 8009044:	0801c3dc 	.word	0x0801c3dc
 8009048:	0800888d 	.word	0x0800888d

0800904c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f7ff ff85 	bl	8008f78 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800906e:	bf00      	nop
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	6039      	str	r1, [r7, #0]
 8009082:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009088:	2007      	movs	r0, #7
 800908a:	f003 fb01 	bl	800c690 <memp_malloc>
 800908e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <netconn_alloc+0x22>
    return NULL;
 8009096:	2300      	movs	r3, #0
 8009098:	e052      	b.n	8009140 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	79fa      	ldrb	r2, [r7, #7]
 80090a4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090b2:	2b10      	cmp	r3, #16
 80090b4:	d004      	beq.n	80090c0 <netconn_alloc+0x48>
 80090b6:	2b20      	cmp	r3, #32
 80090b8:	d105      	bne.n	80090c6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80090ba:	2306      	movs	r3, #6
 80090bc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80090be:	e00a      	b.n	80090d6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80090c0:	2306      	movs	r3, #6
 80090c2:	617b      	str	r3, [r7, #20]
      break;
 80090c4:	e007      	b.n	80090d6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80090c6:	4b20      	ldr	r3, [pc, #128]	; (8009148 <netconn_alloc+0xd0>)
 80090c8:	f240 22e5 	movw	r2, #741	; 0x2e5
 80090cc:	491f      	ldr	r1, [pc, #124]	; (800914c <netconn_alloc+0xd4>)
 80090ce:	4820      	ldr	r0, [pc, #128]	; (8009150 <netconn_alloc+0xd8>)
 80090d0:	f012 f94a 	bl	801b368 <iprintf>
      goto free_and_return;
 80090d4:	e02f      	b.n	8009136 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3310      	adds	r3, #16
 80090da:	6979      	ldr	r1, [r7, #20]
 80090dc:	4618      	mov	r0, r3
 80090de:	f00f fe8f 	bl	8018e00 <sys_mbox_new>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d125      	bne.n	8009134 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	330c      	adds	r3, #12
 80090ec:	2100      	movs	r1, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f00f ff4d 	bl	8018f8e <sys_sem_new>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d005      	beq.n	8009106 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	3310      	adds	r3, #16
 80090fe:	4618      	mov	r0, r3
 8009100:	f00f fea0 	bl	8018e44 <sys_mbox_free>
    goto free_and_return;
 8009104:	e017      	b.n	8009136 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3314      	adds	r3, #20
 800910a:	4618      	mov	r0, r3
 800910c:	f00f ff32 	bl	8018f74 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f04f 32ff 	mov.w	r2, #4294967295
 800911c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	7cfa      	ldrb	r2, [r7, #19]
 800912e:	771a      	strb	r2, [r3, #28]
  return conn;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	e005      	b.n	8009140 <netconn_alloc+0xc8>
    goto free_and_return;
 8009134:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009136:	68f9      	ldr	r1, [r7, #12]
 8009138:	2007      	movs	r0, #7
 800913a:	f003 fb1f 	bl	800c77c <memp_free>
  return NULL;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	0801c398 	.word	0x0801c398
 800914c:	0801c59c 	.word	0x0801c59c
 8009150:	0801c3dc 	.word	0x0801c3dc

08009154 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d006      	beq.n	8009172 <netconn_free+0x1e>
 8009164:	4b1b      	ldr	r3, [pc, #108]	; (80091d4 <netconn_free+0x80>)
 8009166:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800916a:	491b      	ldr	r1, [pc, #108]	; (80091d8 <netconn_free+0x84>)
 800916c:	481b      	ldr	r0, [pc, #108]	; (80091dc <netconn_free+0x88>)
 800916e:	f012 f8fb 	bl	801b368 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	3310      	adds	r3, #16
 8009176:	4618      	mov	r0, r3
 8009178:	f00f feeb 	bl	8018f52 <sys_mbox_valid>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d006      	beq.n	8009190 <netconn_free+0x3c>
 8009182:	4b14      	ldr	r3, [pc, #80]	; (80091d4 <netconn_free+0x80>)
 8009184:	f240 3223 	movw	r2, #803	; 0x323
 8009188:	4915      	ldr	r1, [pc, #84]	; (80091e0 <netconn_free+0x8c>)
 800918a:	4814      	ldr	r0, [pc, #80]	; (80091dc <netconn_free+0x88>)
 800918c:	f012 f8ec 	bl	801b368 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3314      	adds	r3, #20
 8009194:	4618      	mov	r0, r3
 8009196:	f00f fedc 	bl	8018f52 <sys_mbox_valid>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d006      	beq.n	80091ae <netconn_free+0x5a>
 80091a0:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <netconn_free+0x80>)
 80091a2:	f240 3226 	movw	r2, #806	; 0x326
 80091a6:	490f      	ldr	r1, [pc, #60]	; (80091e4 <netconn_free+0x90>)
 80091a8:	480c      	ldr	r0, [pc, #48]	; (80091dc <netconn_free+0x88>)
 80091aa:	f012 f8dd 	bl	801b368 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	330c      	adds	r3, #12
 80091b2:	4618      	mov	r0, r3
 80091b4:	f00f ff51 	bl	801905a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	330c      	adds	r3, #12
 80091bc:	4618      	mov	r0, r3
 80091be:	f00f ff6a 	bl	8019096 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	2007      	movs	r0, #7
 80091c6:	f003 fad9 	bl	800c77c <memp_free>
}
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	0801c398 	.word	0x0801c398
 80091d8:	0801c5c4 	.word	0x0801c5c4
 80091dc:	0801c3dc 	.word	0x0801c3dc
 80091e0:	0801c5f4 	.word	0x0801c5f4
 80091e4:	0801c630 	.word	0x0801c630

080091e8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3310      	adds	r3, #16
 80091f4:	4618      	mov	r0, r3
 80091f6:	f00f feac 	bl	8018f52 <sys_mbox_valid>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d02f      	beq.n	8009260 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009200:	e018      	b.n	8009234 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800920a:	2b10      	cmp	r3, #16
 800920c:	d10e      	bne.n	800922c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f107 020f 	add.w	r2, r7, #15
 8009214:	4611      	mov	r1, r2
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff fafe 	bl	8008818 <lwip_netconn_is_err_msg>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d108      	bne.n	8009234 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	4618      	mov	r0, r3
 8009226:	f004 f9c3 	bl	800d5b0 <pbuf_free>
 800922a:	e003      	b.n	8009234 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	4618      	mov	r0, r3
 8009230:	f000 ff7e 	bl	800a130 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	3310      	adds	r3, #16
 8009238:	f107 0210 	add.w	r2, r7, #16
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f00f fe6b 	bl	8018f1a <sys_arch_mbox_tryfetch>
 8009244:	4603      	mov	r3, r0
 8009246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924a:	d1da      	bne.n	8009202 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	3310      	adds	r3, #16
 8009250:	4618      	mov	r0, r3
 8009252:	f00f fdf7 	bl	8018e44 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	3310      	adds	r3, #16
 800925a:	4618      	mov	r0, r3
 800925c:	f00f fe8a 	bl	8018f74 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3314      	adds	r3, #20
 8009264:	4618      	mov	r0, r3
 8009266:	f00f fe74 	bl	8018f52 <sys_mbox_valid>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d034      	beq.n	80092da <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009270:	e01d      	b.n	80092ae <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f107 020e 	add.w	r2, r7, #14
 8009278:	4611      	mov	r1, r2
 800927a:	4618      	mov	r0, r3
 800927c:	f7ff facc 	bl	8008818 <lwip_netconn_is_err_msg>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d113      	bne.n	80092ae <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800928a:	6978      	ldr	r0, [r7, #20]
 800928c:	f7ff ffac 	bl	80091e8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d007      	beq.n	80092a8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	4618      	mov	r0, r3
 800929e:	f004 ff87 	bl	800e1b0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2200      	movs	r2, #0
 80092a6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80092a8:	6978      	ldr	r0, [r7, #20]
 80092aa:	f7ff ff53 	bl	8009154 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3314      	adds	r3, #20
 80092b2:	f107 0210 	add.w	r2, r7, #16
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f00f fe2e 	bl	8018f1a <sys_arch_mbox_tryfetch>
 80092be:	4603      	mov	r3, r0
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d1d5      	bne.n	8009272 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3314      	adds	r3, #20
 80092ca:	4618      	mov	r0, r3
 80092cc:	f00f fdba 	bl	8018e44 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3314      	adds	r3, #20
 80092d4:	4618      	mov	r0, r3
 80092d6:	f00f fe4d 	bl	8018f74 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80092da:	bf00      	nop
 80092dc:	3718      	adds	r7, #24
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
	...

080092e4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d106      	bne.n	8009308 <lwip_netconn_do_close_internal+0x24>
 80092fa:	4ba1      	ldr	r3, [pc, #644]	; (8009580 <lwip_netconn_do_close_internal+0x29c>)
 80092fc:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009300:	49a0      	ldr	r1, [pc, #640]	; (8009584 <lwip_netconn_do_close_internal+0x2a0>)
 8009302:	48a1      	ldr	r0, [pc, #644]	; (8009588 <lwip_netconn_do_close_internal+0x2a4>)
 8009304:	f012 f830 	bl	801b368 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009310:	2b10      	cmp	r3, #16
 8009312:	d006      	beq.n	8009322 <lwip_netconn_do_close_internal+0x3e>
 8009314:	4b9a      	ldr	r3, [pc, #616]	; (8009580 <lwip_netconn_do_close_internal+0x29c>)
 8009316:	f240 32a3 	movw	r2, #931	; 0x3a3
 800931a:	499c      	ldr	r1, [pc, #624]	; (800958c <lwip_netconn_do_close_internal+0x2a8>)
 800931c:	489a      	ldr	r0, [pc, #616]	; (8009588 <lwip_netconn_do_close_internal+0x2a4>)
 800931e:	f012 f823 	bl	801b368 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b04      	cmp	r3, #4
 8009328:	d006      	beq.n	8009338 <lwip_netconn_do_close_internal+0x54>
 800932a:	4b95      	ldr	r3, [pc, #596]	; (8009580 <lwip_netconn_do_close_internal+0x29c>)
 800932c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009330:	4997      	ldr	r1, [pc, #604]	; (8009590 <lwip_netconn_do_close_internal+0x2ac>)
 8009332:	4895      	ldr	r0, [pc, #596]	; (8009588 <lwip_netconn_do_close_internal+0x2a4>)
 8009334:	f012 f818 	bl	801b368 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d106      	bne.n	800934e <lwip_netconn_do_close_internal+0x6a>
 8009340:	4b8f      	ldr	r3, [pc, #572]	; (8009580 <lwip_netconn_do_close_internal+0x29c>)
 8009342:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009346:	4993      	ldr	r1, [pc, #588]	; (8009594 <lwip_netconn_do_close_internal+0x2b0>)
 8009348:	488f      	ldr	r0, [pc, #572]	; (8009588 <lwip_netconn_do_close_internal+0x2a4>)
 800934a:	f012 f80d 	bl	801b368 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a1b      	ldr	r3, [r3, #32]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d106      	bne.n	8009364 <lwip_netconn_do_close_internal+0x80>
 8009356:	4b8a      	ldr	r3, [pc, #552]	; (8009580 <lwip_netconn_do_close_internal+0x29c>)
 8009358:	f240 32a6 	movw	r2, #934	; 0x3a6
 800935c:	498e      	ldr	r1, [pc, #568]	; (8009598 <lwip_netconn_do_close_internal+0x2b4>)
 800935e:	488a      	ldr	r0, [pc, #552]	; (8009588 <lwip_netconn_do_close_internal+0x2a4>)
 8009360:	f012 f802 	bl	801b368 <iprintf>

  tpcb = conn->pcb.tcp;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	7a1b      	ldrb	r3, [r3, #8]
 8009370:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	2b03      	cmp	r3, #3
 8009386:	d102      	bne.n	800938e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009388:	2301      	movs	r3, #1
 800938a:	75bb      	strb	r3, [r7, #22]
 800938c:	e01f      	b.n	80093ce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00e      	beq.n	80093b2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009398:	2b05      	cmp	r3, #5
 800939a:	d007      	beq.n	80093ac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80093a0:	2b06      	cmp	r3, #6
 80093a2:	d003      	beq.n	80093ac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80093a8:	2b08      	cmp	r3, #8
 80093aa:	d102      	bne.n	80093b2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80093ac:	2301      	movs	r3, #1
 80093ae:	75bb      	strb	r3, [r7, #22]
 80093b0:	e00d      	b.n	80093ce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80093b2:	7b7b      	ldrb	r3, [r7, #13]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d008      	beq.n	80093ca <lwip_netconn_do_close_internal+0xe6>
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	8b5b      	ldrh	r3, [r3, #26]
 80093bc:	f003 0310 	and.w	r3, r3, #16
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d002      	beq.n	80093ca <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80093c4:	2301      	movs	r3, #1
 80093c6:	75bb      	strb	r3, [r7, #22]
 80093c8:	e001      	b.n	80093ce <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80093ce:	7dbb      	ldrb	r3, [r7, #22]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80093d4:	2100      	movs	r1, #0
 80093d6:	6938      	ldr	r0, [r7, #16]
 80093d8:	f005 ff92 	bl	800f300 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	7d1b      	ldrb	r3, [r3, #20]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d104      	bne.n	80093ee <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80093e4:	2100      	movs	r1, #0
 80093e6:	6938      	ldr	r0, [r7, #16]
 80093e8:	f006 f802 	bl	800f3f0 <tcp_accept>
 80093ec:	e01d      	b.n	800942a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80093ee:	7bbb      	ldrb	r3, [r7, #14]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d007      	beq.n	8009404 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80093f4:	2100      	movs	r1, #0
 80093f6:	6938      	ldr	r0, [r7, #16]
 80093f8:	f005 ff94 	bl	800f324 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80093fc:	2100      	movs	r1, #0
 80093fe:	6938      	ldr	r0, [r7, #16]
 8009400:	f005 fff6 	bl	800f3f0 <tcp_accept>
    }
    if (shut_tx) {
 8009404:	7b7b      	ldrb	r3, [r7, #13]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800940a:	2100      	movs	r1, #0
 800940c:	6938      	ldr	r0, [r7, #16]
 800940e:	f005 ffab 	bl	800f368 <tcp_sent>
    }
    if (shut_close) {
 8009412:	7dbb      	ldrb	r3, [r7, #22]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d008      	beq.n	800942a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009418:	2200      	movs	r2, #0
 800941a:	2100      	movs	r1, #0
 800941c:	6938      	ldr	r0, [r7, #16]
 800941e:	f005 ffff 	bl	800f420 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009422:	2100      	movs	r1, #0
 8009424:	6938      	ldr	r0, [r7, #16]
 8009426:	f005 ffc1 	bl	800f3ac <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800942a:	7dbb      	ldrb	r3, [r7, #22]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009430:	6938      	ldr	r0, [r7, #16]
 8009432:	f004 fd77 	bl	800df24 <tcp_close>
 8009436:	4603      	mov	r3, r0
 8009438:	75fb      	strb	r3, [r7, #23]
 800943a:	e007      	b.n	800944c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	7b7a      	ldrb	r2, [r7, #13]
 8009440:	4619      	mov	r1, r3
 8009442:	6938      	ldr	r0, [r7, #16]
 8009444:	f004 fd9a 	bl	800df7c <tcp_shutdown>
 8009448:	4603      	mov	r3, r0
 800944a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800944c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d102      	bne.n	800945a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009454:	2301      	movs	r3, #1
 8009456:	757b      	strb	r3, [r7, #21]
 8009458:	e016      	b.n	8009488 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800945a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800945e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009462:	d10f      	bne.n	8009484 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a1b      	ldr	r3, [r3, #32]
 8009468:	7a5b      	ldrb	r3, [r3, #9]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d10c      	bne.n	8009488 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800946e:	2301      	movs	r3, #1
 8009470:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009472:	7dbb      	ldrb	r3, [r7, #22]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d007      	beq.n	8009488 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009478:	6938      	ldr	r0, [r7, #16]
 800947a:	f004 fe99 	bl	800e1b0 <tcp_abort>
          err = ERR_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	75fb      	strb	r3, [r7, #23]
 8009482:	e001      	b.n	8009488 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009484:	2301      	movs	r3, #1
 8009486:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009488:	7d7b      	ldrb	r3, [r7, #21]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d044      	beq.n	8009518 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	330c      	adds	r3, #12
 8009496:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	7dfa      	ldrb	r2, [r7, #23]
 800949e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80094ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d129      	bne.n	8009508 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80094b4:	7dbb      	ldrb	r3, [r7, #22]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00c      	beq.n	80094d4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d005      	beq.n	80094d4 <lwip_netconn_do_close_internal+0x1f0>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	2200      	movs	r2, #0
 80094ce:	2104      	movs	r1, #4
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	4798      	blx	r3
      }
      if (shut_rx) {
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d009      	beq.n	80094ee <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d005      	beq.n	80094ee <lwip_netconn_do_close_internal+0x20a>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e6:	2200      	movs	r2, #0
 80094e8:	2100      	movs	r1, #0
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	4798      	blx	r3
      }
      if (shut_tx) {
 80094ee:	7b7b      	ldrb	r3, [r7, #13]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d009      	beq.n	8009508 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d005      	beq.n	8009508 <lwip_netconn_do_close_internal+0x224>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	2200      	movs	r2, #0
 8009502:	2102      	movs	r1, #2
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800950e:	68b8      	ldr	r0, [r7, #8]
 8009510:	f00f fd96 	bl	8019040 <sys_sem_signal>
    }
    return ERR_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	e02e      	b.n	8009576 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009518:	7d7b      	ldrb	r3, [r7, #21]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d11e      	bne.n	800955c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	7d1b      	ldrb	r3, [r3, #20]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d106      	bne.n	8009534 <lwip_netconn_do_close_internal+0x250>
 8009526:	4b16      	ldr	r3, [pc, #88]	; (8009580 <lwip_netconn_do_close_internal+0x29c>)
 8009528:	f240 4241 	movw	r2, #1089	; 0x441
 800952c:	491b      	ldr	r1, [pc, #108]	; (800959c <lwip_netconn_do_close_internal+0x2b8>)
 800952e:	4816      	ldr	r0, [pc, #88]	; (8009588 <lwip_netconn_do_close_internal+0x2a4>)
 8009530:	f011 ff1a 	bl	801b368 <iprintf>
    if (shut_tx) {
 8009534:	7b7b      	ldrb	r3, [r7, #13]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d003      	beq.n	8009542 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800953a:	4919      	ldr	r1, [pc, #100]	; (80095a0 <lwip_netconn_do_close_internal+0x2bc>)
 800953c:	6938      	ldr	r0, [r7, #16]
 800953e:	f005 ff13 	bl	800f368 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009542:	2201      	movs	r2, #1
 8009544:	4917      	ldr	r1, [pc, #92]	; (80095a4 <lwip_netconn_do_close_internal+0x2c0>)
 8009546:	6938      	ldr	r0, [r7, #16]
 8009548:	f005 ff6a 	bl	800f420 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800954c:	4916      	ldr	r1, [pc, #88]	; (80095a8 <lwip_netconn_do_close_internal+0x2c4>)
 800954e:	6938      	ldr	r0, [r7, #16]
 8009550:	f005 ff2c 	bl	800f3ac <tcp_err>
    tcp_arg(tpcb, conn);
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	6938      	ldr	r0, [r7, #16]
 8009558:	f005 fed2 	bl	800f300 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800955c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d106      	bne.n	8009572 <lwip_netconn_do_close_internal+0x28e>
 8009564:	4b06      	ldr	r3, [pc, #24]	; (8009580 <lwip_netconn_do_close_internal+0x29c>)
 8009566:	f240 424d 	movw	r2, #1101	; 0x44d
 800956a:	4910      	ldr	r1, [pc, #64]	; (80095ac <lwip_netconn_do_close_internal+0x2c8>)
 800956c:	4806      	ldr	r0, [pc, #24]	; (8009588 <lwip_netconn_do_close_internal+0x2a4>)
 800956e:	f011 fefb 	bl	801b368 <iprintf>
  return err;
 8009572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009576:	4618      	mov	r0, r3
 8009578:	3718      	adds	r7, #24
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	0801c398 	.word	0x0801c398
 8009584:	0801c66c 	.word	0x0801c66c
 8009588:	0801c3dc 	.word	0x0801c3dc
 800958c:	0801c67c 	.word	0x0801c67c
 8009590:	0801c69c 	.word	0x0801c69c
 8009594:	0801c6c0 	.word	0x0801c6c0
 8009598:	0801c500 	.word	0x0801c500
 800959c:	0801c6d4 	.word	0x0801c6d4
 80095a0:	08008b5d 	.word	0x08008b5d
 80095a4:	08008a95 	.word	0x08008a95
 80095a8:	08008c05 	.word	0x08008c05
 80095ac:	0801c6f8 	.word	0x0801c6f8

080095b0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	785b      	ldrb	r3, [r3, #1]
 80095c2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00d      	beq.n	80095e6 <lwip_netconn_do_delconn+0x36>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095d4:	2b10      	cmp	r3, #16
 80095d6:	d006      	beq.n	80095e6 <lwip_netconn_do_delconn+0x36>
 80095d8:	4b60      	ldr	r3, [pc, #384]	; (800975c <lwip_netconn_do_delconn+0x1ac>)
 80095da:	f240 425e 	movw	r2, #1118	; 0x45e
 80095de:	4960      	ldr	r1, [pc, #384]	; (8009760 <lwip_netconn_do_delconn+0x1b0>)
 80095e0:	4860      	ldr	r0, [pc, #384]	; (8009764 <lwip_netconn_do_delconn+0x1b4>)
 80095e2:	f011 fec1 	bl	801b368 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80095e6:	7afb      	ldrb	r3, [r7, #11]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d005      	beq.n	80095f8 <lwip_netconn_do_delconn+0x48>
 80095ec:	7afb      	ldrb	r3, [r7, #11]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d002      	beq.n	80095f8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80095f2:	7afb      	ldrb	r3, [r7, #11]
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d109      	bne.n	800960c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d10a      	bne.n	8009614 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	7f1b      	ldrb	r3, [r3, #28]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d103      	bne.n	8009614 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	22fb      	movs	r2, #251	; 0xfb
 8009610:	711a      	strb	r2, [r3, #4]
 8009612:	e097      	b.n	8009744 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009614:	7afb      	ldrb	r3, [r7, #11]
 8009616:	2b03      	cmp	r3, #3
 8009618:	d10d      	bne.n	8009636 <lwip_netconn_do_delconn+0x86>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	7f1b      	ldrb	r3, [r3, #28]
 8009620:	f003 0304 	and.w	r3, r3, #4
 8009624:	2b00      	cmp	r3, #0
 8009626:	d106      	bne.n	8009636 <lwip_netconn_do_delconn+0x86>
 8009628:	4b4c      	ldr	r3, [pc, #304]	; (800975c <lwip_netconn_do_delconn+0x1ac>)
 800962a:	f240 427a 	movw	r2, #1146	; 0x47a
 800962e:	494e      	ldr	r1, [pc, #312]	; (8009768 <lwip_netconn_do_delconn+0x1b8>)
 8009630:	484c      	ldr	r0, [pc, #304]	; (8009764 <lwip_netconn_do_delconn+0x1b4>)
 8009632:	f011 fe99 	bl	801b368 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4618      	mov	r0, r3
 8009642:	f7ff fdd1 	bl	80091e8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d05f      	beq.n	8009710 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800965a:	2b10      	cmp	r3, #16
 800965c:	d00d      	beq.n	800967a <lwip_netconn_do_delconn+0xca>
 800965e:	2b20      	cmp	r3, #32
 8009660:	d151      	bne.n	8009706 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	4618      	mov	r0, r3
 8009674:	f00b f938 	bl	80148e8 <udp_remove>
          break;
 8009678:	e046      	b.n	8009708 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <lwip_netconn_do_delconn+0xe2>
 8009684:	4b35      	ldr	r3, [pc, #212]	; (800975c <lwip_netconn_do_delconn+0x1ac>)
 8009686:	f240 4294 	movw	r2, #1172	; 0x494
 800968a:	4938      	ldr	r1, [pc, #224]	; (800976c <lwip_netconn_do_delconn+0x1bc>)
 800968c:	4835      	ldr	r0, [pc, #212]	; (8009764 <lwip_netconn_do_delconn+0x1b4>)
 800968e:	f011 fe6b 	bl	801b368 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2204      	movs	r2, #4
 8009698:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2203      	movs	r2, #3
 800969e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	68fa      	ldr	r2, [r7, #12]
 80096a6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2100      	movs	r1, #0
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fe18 	bl	80092e4 <lwip_netconn_do_close_internal>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d04b      	beq.n	8009752 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	785b      	ldrb	r3, [r3, #1]
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d006      	beq.n	80096d2 <lwip_netconn_do_delconn+0x122>
 80096c4:	4b25      	ldr	r3, [pc, #148]	; (800975c <lwip_netconn_do_delconn+0x1ac>)
 80096c6:	f240 429a 	movw	r2, #1178	; 0x49a
 80096ca:	4929      	ldr	r1, [pc, #164]	; (8009770 <lwip_netconn_do_delconn+0x1c0>)
 80096cc:	4825      	ldr	r0, [pc, #148]	; (8009764 <lwip_netconn_do_delconn+0x1b4>)
 80096ce:	f011 fe4b 	bl	801b368 <iprintf>
            UNLOCK_TCPIP_CORE();
 80096d2:	4828      	ldr	r0, [pc, #160]	; (8009774 <lwip_netconn_do_delconn+0x1c4>)
 80096d4:	f00f fd25 	bl	8019122 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	330c      	adds	r3, #12
 80096de:	2100      	movs	r1, #0
 80096e0:	4618      	mov	r0, r3
 80096e2:	f00f fc7c 	bl	8018fde <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80096e6:	4823      	ldr	r0, [pc, #140]	; (8009774 <lwip_netconn_do_delconn+0x1c4>)
 80096e8:	f00f fd0c 	bl	8019104 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d02d      	beq.n	8009752 <lwip_netconn_do_delconn+0x1a2>
 80096f6:	4b19      	ldr	r3, [pc, #100]	; (800975c <lwip_netconn_do_delconn+0x1ac>)
 80096f8:	f240 429e 	movw	r2, #1182	; 0x49e
 80096fc:	491c      	ldr	r1, [pc, #112]	; (8009770 <lwip_netconn_do_delconn+0x1c0>)
 80096fe:	4819      	ldr	r0, [pc, #100]	; (8009764 <lwip_netconn_do_delconn+0x1b4>)
 8009700:	f011 fe32 	bl	801b368 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009704:	e025      	b.n	8009752 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8009706:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2200      	movs	r2, #0
 800970e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	2b00      	cmp	r3, #0
 8009718:	d007      	beq.n	800972a <lwip_netconn_do_delconn+0x17a>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	6810      	ldr	r0, [r2, #0]
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <lwip_netconn_do_delconn+0x194>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	6810      	ldr	r0, [r2, #0]
 800973e:	2200      	movs	r2, #0
 8009740:	2102      	movs	r1, #2
 8009742:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	330c      	adds	r3, #12
 800974a:	4618      	mov	r0, r3
 800974c:	f00f fc92 	bl	8019074 <sys_sem_valid>
 8009750:	e000      	b.n	8009754 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009752:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009754:	3710      	adds	r7, #16
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	0801c398 	.word	0x0801c398
 8009760:	0801c708 	.word	0x0801c708
 8009764:	0801c3dc 	.word	0x0801c3dc
 8009768:	0801c71c 	.word	0x0801c71c
 800976c:	0801c73c 	.word	0x0801c73c
 8009770:	0801c758 	.word	0x0801c758
 8009774:	2001591c 	.word	0x2001591c

08009778 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d025      	beq.n	80097da <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009798:	2b10      	cmp	r3, #16
 800979a:	d00e      	beq.n	80097ba <lwip_netconn_do_bind+0x42>
 800979c:	2b20      	cmp	r3, #32
 800979e:	d119      	bne.n	80097d4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	6858      	ldr	r0, [r3, #4]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	6899      	ldr	r1, [r3, #8]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	899b      	ldrh	r3, [r3, #12]
 80097ae:	461a      	mov	r2, r3
 80097b0:	f00a ff6a 	bl	8014688 <udp_bind>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]
        break;
 80097b8:	e011      	b.n	80097de <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6858      	ldr	r0, [r3, #4]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6899      	ldr	r1, [r3, #8]
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	899b      	ldrh	r3, [r3, #12]
 80097c8:	461a      	mov	r2, r3
 80097ca:	f004 fcfd 	bl	800e1c8 <tcp_bind>
 80097ce:	4603      	mov	r3, r0
 80097d0:	73fb      	strb	r3, [r7, #15]
        break;
 80097d2:	e004      	b.n	80097de <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80097d4:	23fa      	movs	r3, #250	; 0xfa
 80097d6:	73fb      	strb	r3, [r7, #15]
        break;
 80097d8:	e001      	b.n	80097de <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80097da:	23fa      	movs	r3, #250	; 0xfa
 80097dc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	7bfa      	ldrb	r2, [r7, #15]
 80097e2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d07f      	beq.n	8009902 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800980c:	2b10      	cmp	r3, #16
 800980e:	d175      	bne.n	80098fc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	785b      	ldrb	r3, [r3, #1]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d165      	bne.n	80098e6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	7d1b      	ldrb	r3, [r3, #20]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009826:	23fa      	movs	r3, #250	; 0xfa
 8009828:	72fb      	strb	r3, [r7, #11]
 800982a:	e06c      	b.n	8009906 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800982c:	23ff      	movs	r3, #255	; 0xff
 800982e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f107 020b 	add.w	r2, r7, #11
 800983a:	7cf9      	ldrb	r1, [r7, #19]
 800983c:	4618      	mov	r0, r3
 800983e:	f004 fd95 	bl	800e36c <tcp_listen_with_backlog_and_err>
 8009842:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d05d      	beq.n	8009906 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3310      	adds	r3, #16
 8009850:	4618      	mov	r0, r3
 8009852:	f00f fb7e 	bl	8018f52 <sys_mbox_valid>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00b      	beq.n	8009874 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3310      	adds	r3, #16
 8009862:	4618      	mov	r0, r3
 8009864:	f00f faee 	bl	8018e44 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3310      	adds	r3, #16
 800986e:	4618      	mov	r0, r3
 8009870:	f00f fb80 	bl	8018f74 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3314      	adds	r3, #20
 800987e:	4618      	mov	r0, r3
 8009880:	f00f fb67 	bl	8018f52 <sys_mbox_valid>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d108      	bne.n	800989c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3314      	adds	r3, #20
 8009890:	2106      	movs	r1, #6
 8009892:	4618      	mov	r0, r3
 8009894:	f00f fab4 	bl	8018e00 <sys_mbox_new>
 8009898:	4603      	mov	r3, r0
 800989a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800989c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d118      	bne.n	80098d6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2202      	movs	r2, #2
 80098aa:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4619      	mov	r1, r3
 80098c0:	4610      	mov	r0, r2
 80098c2:	f005 fd1d 	bl	800f300 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	4912      	ldr	r1, [pc, #72]	; (8009918 <lwip_netconn_do_listen+0x12c>)
 80098ce:	4618      	mov	r0, r3
 80098d0:	f005 fd8e 	bl	800f3f0 <tcp_accept>
 80098d4:	e017      	b.n	8009906 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f004 fb24 	bl	800df24 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2200      	movs	r2, #0
 80098e2:	605a      	str	r2, [r3, #4]
 80098e4:	e00f      	b.n	8009906 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	785b      	ldrb	r3, [r3, #1]
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d102      	bne.n	80098f6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	72fb      	strb	r3, [r7, #11]
 80098f4:	e007      	b.n	8009906 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80098f6:	23f5      	movs	r3, #245	; 0xf5
 80098f8:	72fb      	strb	r3, [r7, #11]
 80098fa:	e004      	b.n	8009906 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80098fc:	23f0      	movs	r3, #240	; 0xf0
 80098fe:	72fb      	strb	r3, [r7, #11]
 8009900:	e001      	b.n	8009906 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009902:	23f5      	movs	r3, #245	; 0xf5
 8009904:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8009906:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800990e:	bf00      	nop
 8009910:	3718      	adds	r7, #24
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	08008e01 	.word	0x08008e01

0800991c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe ff21 	bl	8008774 <netconn_err>
 8009932:	4603      	mov	r3, r0
 8009934:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d134      	bne.n	80099a8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d02d      	beq.n	80099a4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009952:	2b20      	cmp	r3, #32
 8009954:	d123      	bne.n	800999e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10c      	bne.n	800997a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685a      	ldr	r2, [r3, #4]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4619      	mov	r1, r3
 800996e:	4610      	mov	r0, r2
 8009970:	f00a fca0 	bl	80142b4 <udp_send>
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8009978:	e016      	b.n	80099a8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6858      	ldr	r0, [r3, #4]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	6819      	ldr	r1, [r3, #0]
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	f103 0208 	add.w	r2, r3, #8
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	899b      	ldrh	r3, [r3, #12]
 8009994:	f00a fcc2 	bl	801431c <udp_sendto>
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]
          break;
 800999c:	e004      	b.n	80099a8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800999e:	23f5      	movs	r3, #245	; 0xf5
 80099a0:	73fb      	strb	r3, [r7, #15]
          break;
 80099a2:	e001      	b.n	80099a8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 80099a4:	23f5      	movs	r3, #245	; 0xf5
 80099a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	7bfa      	ldrb	r2, [r7, #15]
 80099ac:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80099ae:	bf00      	nop
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b086      	sub	sp, #24
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2200      	movs	r2, #0
 80099c6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d022      	beq.n	8009a18 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099dc:	2b10      	cmp	r3, #16
 80099de:	d11b      	bne.n	8009a18 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ec:	d202      	bcs.n	80099f4 <lwip_netconn_do_recv+0x3e>
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	e001      	b.n	80099f8 <lwip_netconn_do_recv+0x42>
 80099f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80099f8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	89fa      	ldrh	r2, [r7, #14]
 8009a02:	4611      	mov	r1, r2
 8009a04:	4618      	mov	r0, r3
 8009a06:	f004 fdb5 	bl	800e574 <tcp_recved>
        remaining -= recved;
 8009a0a:	89fb      	ldrh	r3, [r7, #14]
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1e6      	bne.n	80099e6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009a18:	bf00      	nop
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b088      	sub	sp, #32
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d106      	bne.n	8009a44 <lwip_netconn_do_writemore+0x24>
 8009a36:	4b96      	ldr	r3, [pc, #600]	; (8009c90 <lwip_netconn_do_writemore+0x270>)
 8009a38:	f240 6273 	movw	r2, #1651	; 0x673
 8009a3c:	4995      	ldr	r1, [pc, #596]	; (8009c94 <lwip_netconn_do_writemore+0x274>)
 8009a3e:	4896      	ldr	r0, [pc, #600]	; (8009c98 <lwip_netconn_do_writemore+0x278>)
 8009a40:	f011 fc92 	bl	801b368 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	785b      	ldrb	r3, [r3, #1]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d006      	beq.n	8009a5a <lwip_netconn_do_writemore+0x3a>
 8009a4c:	4b90      	ldr	r3, [pc, #576]	; (8009c90 <lwip_netconn_do_writemore+0x270>)
 8009a4e:	f240 6274 	movw	r2, #1652	; 0x674
 8009a52:	4992      	ldr	r1, [pc, #584]	; (8009c9c <lwip_netconn_do_writemore+0x27c>)
 8009a54:	4890      	ldr	r0, [pc, #576]	; (8009c98 <lwip_netconn_do_writemore+0x278>)
 8009a56:	f011 fc87 	bl	801b368 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d106      	bne.n	8009a70 <lwip_netconn_do_writemore+0x50>
 8009a62:	4b8b      	ldr	r3, [pc, #556]	; (8009c90 <lwip_netconn_do_writemore+0x270>)
 8009a64:	f240 6275 	movw	r2, #1653	; 0x675
 8009a68:	498d      	ldr	r1, [pc, #564]	; (8009ca0 <lwip_netconn_do_writemore+0x280>)
 8009a6a:	488b      	ldr	r0, [pc, #556]	; (8009c98 <lwip_netconn_do_writemore+0x278>)
 8009a6c:	f011 fc7c 	bl	801b368 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d106      	bne.n	8009a86 <lwip_netconn_do_writemore+0x66>
 8009a78:	4b85      	ldr	r3, [pc, #532]	; (8009c90 <lwip_netconn_do_writemore+0x270>)
 8009a7a:	f240 6276 	movw	r2, #1654	; 0x676
 8009a7e:	4989      	ldr	r1, [pc, #548]	; (8009ca4 <lwip_netconn_do_writemore+0x284>)
 8009a80:	4885      	ldr	r0, [pc, #532]	; (8009c98 <lwip_netconn_do_writemore+0x278>)
 8009a82:	f011 fc71 	bl	801b368 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a1b      	ldr	r3, [r3, #32]
 8009a8a:	699a      	ldr	r2, [r3, #24]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a1b      	ldr	r3, [r3, #32]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d306      	bcc.n	8009aa4 <lwip_netconn_do_writemore+0x84>
 8009a96:	4b7e      	ldr	r3, [pc, #504]	; (8009c90 <lwip_netconn_do_writemore+0x270>)
 8009a98:	f240 6277 	movw	r2, #1655	; 0x677
 8009a9c:	4982      	ldr	r1, [pc, #520]	; (8009ca8 <lwip_netconn_do_writemore+0x288>)
 8009a9e:	487e      	ldr	r0, [pc, #504]	; (8009c98 <lwip_netconn_do_writemore+0x278>)
 8009aa0:	f011 fc62 	bl	801b368 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a1b      	ldr	r3, [r3, #32]
 8009aa8:	899b      	ldrh	r3, [r3, #12]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <lwip_netconn_do_writemore+0x9c>
 8009aae:	4b78      	ldr	r3, [pc, #480]	; (8009c90 <lwip_netconn_do_writemore+0x270>)
 8009ab0:	f240 6279 	movw	r2, #1657	; 0x679
 8009ab4:	497d      	ldr	r1, [pc, #500]	; (8009cac <lwip_netconn_do_writemore+0x28c>)
 8009ab6:	4878      	ldr	r0, [pc, #480]	; (8009c98 <lwip_netconn_do_writemore+0x278>)
 8009ab8:	f011 fc56 	bl	801b368 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	7f1b      	ldrb	r3, [r3, #28]
 8009ac2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	7f1b      	ldrb	r3, [r3, #28]
 8009ac8:	f003 0302 	and.w	r3, r3, #2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d104      	bne.n	8009ada <lwip_netconn_do_writemore+0xba>
 8009ad0:	7ebb      	ldrb	r3, [r7, #26]
 8009ad2:	f003 0304 	and.w	r3, r3, #4
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d001      	beq.n	8009ade <lwip_netconn_do_writemore+0xbe>
 8009ada:	2301      	movs	r3, #1
 8009adc:	e000      	b.n	8009ae0 <lwip_netconn_do_writemore+0xc0>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	4413      	add	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b0c:	d307      	bcc.n	8009b1e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b12:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009b14:	7ebb      	ldrb	r3, [r7, #26]
 8009b16:	f043 0302 	orr.w	r3, r3, #2
 8009b1a:	76bb      	strb	r3, [r7, #26]
 8009b1c:	e001      	b.n	8009b22 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b2a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009b2c:	89fa      	ldrh	r2, [r7, #14]
 8009b2e:	8bbb      	ldrh	r3, [r7, #28]
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d216      	bcs.n	8009b62 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8009b34:	89fb      	ldrh	r3, [r7, #14]
 8009b36:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009b38:	7e3b      	ldrb	r3, [r7, #24]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00d      	beq.n	8009b5a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009b3e:	8bbb      	ldrh	r3, [r7, #28]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10e      	bne.n	8009b62 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a1b      	ldr	r3, [r3, #32]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d102      	bne.n	8009b54 <lwip_netconn_do_writemore+0x134>
 8009b4e:	f06f 0306 	mvn.w	r3, #6
 8009b52:	e000      	b.n	8009b56 <lwip_netconn_do_writemore+0x136>
 8009b54:	2300      	movs	r3, #0
 8009b56:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009b58:	e07d      	b.n	8009c56 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009b5a:	7ebb      	ldrb	r3, [r7, #26]
 8009b5c:	f043 0302 	orr.w	r3, r3, #2
 8009b60:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	691a      	ldr	r2, [r3, #16]
 8009b68:	8bbb      	ldrh	r3, [r7, #28]
 8009b6a:	441a      	add	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d906      	bls.n	8009b86 <lwip_netconn_do_writemore+0x166>
 8009b78:	4b45      	ldr	r3, [pc, #276]	; (8009c90 <lwip_netconn_do_writemore+0x270>)
 8009b7a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8009b7e:	494c      	ldr	r1, [pc, #304]	; (8009cb0 <lwip_netconn_do_writemore+0x290>)
 8009b80:	4845      	ldr	r0, [pc, #276]	; (8009c98 <lwip_netconn_do_writemore+0x278>)
 8009b82:	f011 fbf1 	bl	801b368 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009b86:	8bbb      	ldrh	r3, [r7, #28]
 8009b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d103      	bne.n	8009b98 <lwip_netconn_do_writemore+0x178>
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b96:	d209      	bcs.n	8009bac <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009b9c:	8bba      	ldrh	r2, [r7, #28]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d10b      	bne.n	8009bba <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6a1b      	ldr	r3, [r3, #32]
 8009ba6:	899b      	ldrh	r3, [r3, #12]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d906      	bls.n	8009bba <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009bac:	2301      	movs	r3, #1
 8009bae:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009bb0:	7ebb      	ldrb	r3, [r7, #26]
 8009bb2:	f043 0302 	orr.w	r3, r3, #2
 8009bb6:	76bb      	strb	r3, [r7, #26]
 8009bb8:	e001      	b.n	8009bbe <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6858      	ldr	r0, [r3, #4]
 8009bc2:	7ebb      	ldrb	r3, [r7, #26]
 8009bc4:	8bba      	ldrh	r2, [r7, #28]
 8009bc6:	6979      	ldr	r1, [r7, #20]
 8009bc8:	f008 fad8 	bl	801217c <tcp_write>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009bd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d12c      	bne.n	8009c32 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	6999      	ldr	r1, [r3, #24]
 8009bde:	8bba      	ldrh	r2, [r7, #28]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	440a      	add	r2, r1
 8009be6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	6919      	ldr	r1, [r3, #16]
 8009bee:	8bba      	ldrh	r2, [r7, #28]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	440a      	add	r2, r1
 8009bf6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	691a      	ldr	r2, [r3, #16]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d113      	bne.n	8009c32 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	899a      	ldrh	r2, [r3, #12]
 8009c10:	3a01      	subs	r2, #1
 8009c12:	b292      	uxth	r2, r2
 8009c14:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	899b      	ldrh	r3, [r3, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d008      	beq.n	8009c32 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	689a      	ldr	r2, [r3, #8]
 8009c26:	3208      	adds	r2, #8
 8009c28:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8009c32:	7e7b      	ldrb	r3, [r7, #25]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d004      	beq.n	8009c42 <lwip_netconn_do_writemore+0x222>
 8009c38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f43f af50 	beq.w	8009ae2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009c42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d004      	beq.n	8009c54 <lwip_netconn_do_writemore+0x234>
 8009c4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c52:	d146      	bne.n	8009ce2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8009c54:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8009c56:	7e3b      	ldrb	r3, [r7, #24]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d02b      	beq.n	8009cb4 <lwip_netconn_do_writemore+0x294>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d223      	bcs.n	8009cb4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d005      	beq.n	8009c80 <lwip_netconn_do_writemore+0x260>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	2200      	movs	r2, #0
 8009c7a:	2103      	movs	r1, #3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	7f1b      	ldrb	r3, [r3, #28]
 8009c84:	f043 0310 	orr.w	r3, r3, #16
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	771a      	strb	r2, [r3, #28]
 8009c8e:	e028      	b.n	8009ce2 <lwip_netconn_do_writemore+0x2c2>
 8009c90:	0801c398 	.word	0x0801c398
 8009c94:	0801c4f0 	.word	0x0801c4f0
 8009c98:	0801c3dc 	.word	0x0801c3dc
 8009c9c:	0801c7f8 	.word	0x0801c7f8
 8009ca0:	0801c500 	.word	0x0801c500
 8009ca4:	0801c818 	.word	0x0801c818
 8009ca8:	0801c830 	.word	0x0801c830
 8009cac:	0801c870 	.word	0x0801c870
 8009cb0:	0801c898 	.word	0x0801c898
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009cbc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009cc0:	d305      	bcc.n	8009cce <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d909      	bls.n	8009ce2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d005      	beq.n	8009ce2 <lwip_netconn_do_writemore+0x2c2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2103      	movs	r1, #3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009ce2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d11d      	bne.n	8009d26 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a1b      	ldr	r3, [r3, #32]
 8009cee:	699a      	ldr	r2, [r3, #24]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a1b      	ldr	r3, [r3, #32]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d002      	beq.n	8009d00 <lwip_netconn_do_writemore+0x2e0>
 8009cfa:	7e3b      	ldrb	r3, [r7, #24]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009d00:	2301      	movs	r3, #1
 8009d02:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f009 f821 	bl	8012d50 <tcp_output>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8009d12:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009d16:	f113 0f04 	cmn.w	r3, #4
 8009d1a:	d12c      	bne.n	8009d76 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009d1c:	7b3b      	ldrb	r3, [r7, #12]
 8009d1e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009d20:	2301      	movs	r3, #1
 8009d22:	76fb      	strb	r3, [r7, #27]
 8009d24:	e027      	b.n	8009d76 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009d26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2e:	d120      	bne.n	8009d72 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f009 f80b 	bl	8012d50 <tcp_output>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009d3e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009d42:	f113 0f04 	cmn.w	r3, #4
 8009d46:	d104      	bne.n	8009d52 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009d48:	7b7b      	ldrb	r3, [r7, #13]
 8009d4a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	76fb      	strb	r3, [r7, #27]
 8009d50:	e011      	b.n	8009d76 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8009d52:	7e3b      	ldrb	r3, [r7, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00e      	beq.n	8009d76 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d102      	bne.n	8009d68 <lwip_netconn_do_writemore+0x348>
 8009d62:	f06f 0306 	mvn.w	r3, #6
 8009d66:	e000      	b.n	8009d6a <lwip_netconn_do_writemore+0x34a>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	76fb      	strb	r3, [r7, #27]
 8009d70:	e001      	b.n	8009d76 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009d72:	2301      	movs	r3, #1
 8009d74:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8009d76:	7efb      	ldrb	r3, [r7, #27]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d015      	beq.n	8009da8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a1b      	ldr	r3, [r3, #32]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	330c      	adds	r3, #12
 8009d84:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	7ffa      	ldrb	r2, [r7, #31]
 8009d8c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009d9a:	78fb      	ldrb	r3, [r7, #3]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d006      	beq.n	8009dae <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009da0:	68b8      	ldr	r0, [r7, #8]
 8009da2:	f00f f94d 	bl	8019040 <sys_sem_signal>
 8009da6:	e002      	b.n	8009dae <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009da8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dac:	e000      	b.n	8009db0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3720      	adds	r7, #32
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fe fcd3 	bl	8008774 <netconn_err>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8009dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d166      	bne.n	8009ea8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009de4:	2b10      	cmp	r3, #16
 8009de6:	d15d      	bne.n	8009ea4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d002      	beq.n	8009df8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8009df2:	23fb      	movs	r3, #251	; 0xfb
 8009df4:	73fb      	strb	r3, [r7, #15]
 8009df6:	e057      	b.n	8009ea8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d04d      	beq.n	8009e9e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2201      	movs	r2, #1
 8009e08:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6a1b      	ldr	r3, [r3, #32]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d006      	beq.n	8009e22 <lwip_netconn_do_write+0x6a>
 8009e14:	4b28      	ldr	r3, [pc, #160]	; (8009eb8 <lwip_netconn_do_write+0x100>)
 8009e16:	f240 7223 	movw	r2, #1827	; 0x723
 8009e1a:	4928      	ldr	r1, [pc, #160]	; (8009ebc <lwip_netconn_do_write+0x104>)
 8009e1c:	4828      	ldr	r0, [pc, #160]	; (8009ec0 <lwip_netconn_do_write+0x108>)
 8009e1e:	f011 faa3 	bl	801b368 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	695b      	ldr	r3, [r3, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d106      	bne.n	8009e38 <lwip_netconn_do_write+0x80>
 8009e2a:	4b23      	ldr	r3, [pc, #140]	; (8009eb8 <lwip_netconn_do_write+0x100>)
 8009e2c:	f240 7224 	movw	r2, #1828	; 0x724
 8009e30:	4924      	ldr	r1, [pc, #144]	; (8009ec4 <lwip_netconn_do_write+0x10c>)
 8009e32:	4823      	ldr	r0, [pc, #140]	; (8009ec0 <lwip_netconn_do_write+0x108>)
 8009e34:	f011 fa98 	bl	801b368 <iprintf>
        msg->conn->current_msg = msg;
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2100      	movs	r1, #0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7ff fdea 	bl	8009a20 <lwip_netconn_do_writemore>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d02e      	beq.n	8009eb0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d006      	beq.n	8009e6a <lwip_netconn_do_write+0xb2>
 8009e5c:	4b16      	ldr	r3, [pc, #88]	; (8009eb8 <lwip_netconn_do_write+0x100>)
 8009e5e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8009e62:	4919      	ldr	r1, [pc, #100]	; (8009ec8 <lwip_netconn_do_write+0x110>)
 8009e64:	4816      	ldr	r0, [pc, #88]	; (8009ec0 <lwip_netconn_do_write+0x108>)
 8009e66:	f011 fa7f 	bl	801b368 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009e6a:	4818      	ldr	r0, [pc, #96]	; (8009ecc <lwip_netconn_do_write+0x114>)
 8009e6c:	f00f f959 	bl	8019122 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	330c      	adds	r3, #12
 8009e76:	2100      	movs	r1, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f00f f8b0 	bl	8018fde <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009e7e:	4813      	ldr	r0, [pc, #76]	; (8009ecc <lwip_netconn_do_write+0x114>)
 8009e80:	f00f f940 	bl	8019104 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d110      	bne.n	8009eb0 <lwip_netconn_do_write+0xf8>
 8009e8e:	4b0a      	ldr	r3, [pc, #40]	; (8009eb8 <lwip_netconn_do_write+0x100>)
 8009e90:	f240 722c 	movw	r2, #1836	; 0x72c
 8009e94:	490c      	ldr	r1, [pc, #48]	; (8009ec8 <lwip_netconn_do_write+0x110>)
 8009e96:	480a      	ldr	r0, [pc, #40]	; (8009ec0 <lwip_netconn_do_write+0x108>)
 8009e98:	f011 fa66 	bl	801b368 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009e9c:	e008      	b.n	8009eb0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009e9e:	23f5      	movs	r3, #245	; 0xf5
 8009ea0:	73fb      	strb	r3, [r7, #15]
 8009ea2:	e001      	b.n	8009ea8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009ea4:	23fa      	movs	r3, #250	; 0xfa
 8009ea6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	7bfa      	ldrb	r2, [r7, #15]
 8009eac:	711a      	strb	r2, [r3, #4]
 8009eae:	e000      	b.n	8009eb2 <lwip_netconn_do_write+0xfa>
        return;
 8009eb0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	0801c398 	.word	0x0801c398
 8009ebc:	0801c73c 	.word	0x0801c73c
 8009ec0:	0801c3dc 	.word	0x0801c3dc
 8009ec4:	0801c8c4 	.word	0x0801c8c4
 8009ec8:	0801c758 	.word	0x0801c758
 8009ecc:	2001591c 	.word	0x2001591c

08009ed0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d06b      	beq.n	8009fbe <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	7c1b      	ldrb	r3, [r3, #16]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d007      	beq.n	8009efe <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	6812      	ldr	r2, [r2, #0]
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	e006      	b.n	8009f0c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685a      	ldr	r2, [r3, #4]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	6852      	ldr	r2, [r2, #4]
 8009f0a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f1c:	2b10      	cmp	r3, #16
 8009f1e:	d021      	beq.n	8009f64 <lwip_netconn_do_getaddr+0x94>
 8009f20:	2b20      	cmp	r3, #32
 8009f22:	d144      	bne.n	8009fae <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	7c1b      	ldrb	r3, [r3, #16]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d007      	beq.n	8009f3c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	8a52      	ldrh	r2, [r2, #18]
 8009f38:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 8009f3a:	e044      	b.n	8009fc6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	7c1b      	ldrb	r3, [r3, #16]
 8009f44:	f003 0304 	and.w	r3, r3, #4
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d103      	bne.n	8009f54 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	22f5      	movs	r2, #245	; 0xf5
 8009f50:	711a      	strb	r2, [r3, #4]
        break;
 8009f52:	e038      	b.n	8009fc6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	8a92      	ldrh	r2, [r2, #20]
 8009f60:	801a      	strh	r2, [r3, #0]
        break;
 8009f62:	e030      	b.n	8009fc6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	7c1b      	ldrb	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10f      	bne.n	8009f8c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	7d1b      	ldrb	r3, [r3, #20]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d103      	bne.n	8009f8c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	22f5      	movs	r2, #245	; 0xf5
 8009f88:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 8009f8a:	e01c      	b.n	8009fc6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	7c1b      	ldrb	r3, [r3, #16]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d004      	beq.n	8009f9e <lwip_netconn_do_getaddr+0xce>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	8adb      	ldrh	r3, [r3, #22]
 8009f9c:	e003      	b.n	8009fa6 <lwip_netconn_do_getaddr+0xd6>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	8b1b      	ldrh	r3, [r3, #24]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	68d2      	ldr	r2, [r2, #12]
 8009faa:	8013      	strh	r3, [r2, #0]
        break;
 8009fac:	e00b      	b.n	8009fc6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 8009fae:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <lwip_netconn_do_getaddr+0x100>)
 8009fb0:	f240 727d 	movw	r2, #1917	; 0x77d
 8009fb4:	4907      	ldr	r1, [pc, #28]	; (8009fd4 <lwip_netconn_do_getaddr+0x104>)
 8009fb6:	4808      	ldr	r0, [pc, #32]	; (8009fd8 <lwip_netconn_do_getaddr+0x108>)
 8009fb8:	f011 f9d6 	bl	801b368 <iprintf>
        break;
 8009fbc:	e003      	b.n	8009fc6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	22f5      	movs	r2, #245	; 0xf5
 8009fc2:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	0801c398 	.word	0x0801c398
 8009fd4:	0801c8d8 	.word	0x0801c8d8
 8009fd8:	0801c3dc 	.word	0x0801c3dc

08009fdc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	785b      	ldrb	r3, [r3, #1]
 8009fee:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d069      	beq.n	800a0ce <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a004:	2b10      	cmp	r3, #16
 800a006:	d162      	bne.n	800a0ce <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d002      	beq.n	800a016 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d05b      	beq.n	800a0ce <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a016:	7afb      	ldrb	r3, [r7, #11]
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d103      	bne.n	800a024 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	22f5      	movs	r2, #245	; 0xf5
 800a020:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a022:	e059      	b.n	800a0d8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a024:	7afb      	ldrb	r3, [r7, #11]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d103      	bne.n	800a032 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	22fb      	movs	r2, #251	; 0xfb
 800a02e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a030:	e052      	b.n	800a0d8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	7a1b      	ldrb	r3, [r3, #8]
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d004      	beq.n	800a048 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4618      	mov	r0, r3
 800a044:	f7ff f8d0 	bl	80091e8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d006      	beq.n	800a060 <lwip_netconn_do_close+0x84>
 800a052:	4b23      	ldr	r3, [pc, #140]	; (800a0e0 <lwip_netconn_do_close+0x104>)
 800a054:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a058:	4922      	ldr	r1, [pc, #136]	; (800a0e4 <lwip_netconn_do_close+0x108>)
 800a05a:	4823      	ldr	r0, [pc, #140]	; (800a0e8 <lwip_netconn_do_close+0x10c>)
 800a05c:	f011 f984 	bl	801b368 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2204      	movs	r2, #4
 800a066:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2100      	movs	r1, #0
 800a076:	4618      	mov	r0, r3
 800a078:	f7ff f934 	bl	80092e4 <lwip_netconn_do_close_internal>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d029      	beq.n	800a0d6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	785b      	ldrb	r3, [r3, #1]
 800a088:	2b04      	cmp	r3, #4
 800a08a:	d006      	beq.n	800a09a <lwip_netconn_do_close+0xbe>
 800a08c:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <lwip_netconn_do_close+0x104>)
 800a08e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a092:	4916      	ldr	r1, [pc, #88]	; (800a0ec <lwip_netconn_do_close+0x110>)
 800a094:	4814      	ldr	r0, [pc, #80]	; (800a0e8 <lwip_netconn_do_close+0x10c>)
 800a096:	f011 f967 	bl	801b368 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a09a:	4815      	ldr	r0, [pc, #84]	; (800a0f0 <lwip_netconn_do_close+0x114>)
 800a09c:	f00f f841 	bl	8019122 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	330c      	adds	r3, #12
 800a0a6:	2100      	movs	r1, #0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f00e ff98 	bl	8018fde <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a0ae:	4810      	ldr	r0, [pc, #64]	; (800a0f0 <lwip_netconn_do_close+0x114>)
 800a0b0:	f00f f828 	bl	8019104 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	785b      	ldrb	r3, [r3, #1]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00b      	beq.n	800a0d6 <lwip_netconn_do_close+0xfa>
 800a0be:	4b08      	ldr	r3, [pc, #32]	; (800a0e0 <lwip_netconn_do_close+0x104>)
 800a0c0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a0c4:	4909      	ldr	r1, [pc, #36]	; (800a0ec <lwip_netconn_do_close+0x110>)
 800a0c6:	4808      	ldr	r0, [pc, #32]	; (800a0e8 <lwip_netconn_do_close+0x10c>)
 800a0c8:	f011 f94e 	bl	801b368 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a0cc:	e003      	b.n	800a0d6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	22f5      	movs	r2, #245	; 0xf5
 800a0d2:	711a      	strb	r2, [r3, #4]
 800a0d4:	e000      	b.n	800a0d8 <lwip_netconn_do_close+0xfc>
      return;
 800a0d6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	0801c398 	.word	0x0801c398
 800a0e4:	0801c73c 	.word	0x0801c73c
 800a0e8:	0801c3dc 	.word	0x0801c3dc
 800a0ec:	0801c758 	.word	0x0801c758
 800a0f0:	2001591c 	.word	0x2001591c

0800a0f4 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800a0fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a102:	2b00      	cmp	r3, #0
 800a104:	dc04      	bgt.n	800a110 <err_to_errno+0x1c>
 800a106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a10a:	f113 0f10 	cmn.w	r3, #16
 800a10e:	da01      	bge.n	800a114 <err_to_errno+0x20>
    return EIO;
 800a110:	2305      	movs	r3, #5
 800a112:	e005      	b.n	800a120 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800a114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a118:	425b      	negs	r3, r3
 800a11a:	4a04      	ldr	r2, [pc, #16]	; (800a12c <err_to_errno+0x38>)
 800a11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	0801fe70 	.word	0x0801fe70

0800a130 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b082      	sub	sp, #8
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d013      	beq.n	800a166 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00b      	beq.n	800a15e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f003 fa30 	bl	800d5b0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	605a      	str	r2, [r3, #4]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685a      	ldr	r2, [r3, #4]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	2006      	movs	r0, #6
 800a162:	f002 fb0b 	bl	800c77c <memp_free>
  }
}
 800a166:	bf00      	nop
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <netbuf_free+0x1c>
 800a17e:	4b0d      	ldr	r3, [pc, #52]	; (800a1b4 <netbuf_free+0x44>)
 800a180:	2281      	movs	r2, #129	; 0x81
 800a182:	490d      	ldr	r1, [pc, #52]	; (800a1b8 <netbuf_free+0x48>)
 800a184:	480d      	ldr	r0, [pc, #52]	; (800a1bc <netbuf_free+0x4c>)
 800a186:	f011 f8ef 	bl	801b368 <iprintf>
 800a18a:	e00f      	b.n	800a1ac <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d004      	beq.n	800a19e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4618      	mov	r0, r3
 800a19a:	f003 fa09 	bl	800d5b0 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	605a      	str	r2, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685a      	ldr	r2, [r3, #4]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	0801c8f0 	.word	0x0801c8f0
 800a1b8:	0801c98c 	.word	0x0801c98c
 800a1bc:	0801c940 	.word	0x0801c940

0800a1c0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d108      	bne.n	800a1e6 <netbuf_ref+0x26>
 800a1d4:	4b1c      	ldr	r3, [pc, #112]	; (800a248 <netbuf_ref+0x88>)
 800a1d6:	2299      	movs	r2, #153	; 0x99
 800a1d8:	491c      	ldr	r1, [pc, #112]	; (800a24c <netbuf_ref+0x8c>)
 800a1da:	481d      	ldr	r0, [pc, #116]	; (800a250 <netbuf_ref+0x90>)
 800a1dc:	f011 f8c4 	bl	801b368 <iprintf>
 800a1e0:	f06f 030f 	mvn.w	r3, #15
 800a1e4:	e02b      	b.n	800a23e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d004      	beq.n	800a1f8 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f003 f9dc 	bl	800d5b0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800a1f8:	2241      	movs	r2, #65	; 0x41
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	2036      	movs	r0, #54	; 0x36
 800a1fe:	f002 fec1 	bl	800cf84 <pbuf_alloc>
 800a202:	4602      	mov	r2, r0
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d105      	bne.n	800a21c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800a216:	f04f 33ff 	mov.w	r3, #4294967295
 800a21a:	e010      	b.n	800a23e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	88fa      	ldrh	r2, [r7, #6]
 800a22a:	811a      	strh	r2, [r3, #8]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	6812      	ldr	r2, [r2, #0]
 800a230:	891b      	ldrh	r3, [r3, #8]
 800a232:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3710      	adds	r7, #16
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	0801c8f0 	.word	0x0801c8f0
 800a24c:	0801c9a8 	.word	0x0801c9a8
 800a250:	0801c940 	.word	0x0801c940

0800a254 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	db02      	blt.n	800a26c <tryget_socket_unconn_nouse+0x18>
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b03      	cmp	r3, #3
 800a26a:	dd01      	ble.n	800a270 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800a26c:	2300      	movs	r3, #0
 800a26e:	e003      	b.n	800a278 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	011b      	lsls	r3, r3, #4
 800a274:	4a03      	ldr	r2, [pc, #12]	; (800a284 <tryget_socket_unconn_nouse+0x30>)
 800a276:	4413      	add	r3, r2
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3714      	adds	r7, #20
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	200106dc 	.word	0x200106dc

0800a288 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7ff ffdf 	bl	800a254 <tryget_socket_unconn_nouse>
 800a296:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800a298:	68fb      	ldr	r3, [r7, #12]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b084      	sub	sp, #16
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7ff ffec 	bl	800a288 <tryget_socket_unconn>
 800a2b0:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d005      	beq.n	800a2c4 <tryget_socket+0x22>
    if (sock->conn) {
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <tryget_socket+0x22>
      return sock;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	e000      	b.n	800a2c6 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b084      	sub	sp, #16
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f7ff ffe2 	bl	800a2a2 <tryget_socket>
 800a2de:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d104      	bne.n	800a2f0 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800a2e6:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <get_socket+0x2c>)
 800a2e8:	2209      	movs	r2, #9
 800a2ea:	601a      	str	r2, [r3, #0]
    return NULL;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	e000      	b.n	800a2f2 <get_socket+0x22>
  }
  return sock;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20019200 	.word	0x20019200

0800a300 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a30a:	2300      	movs	r3, #0
 800a30c:	60fb      	str	r3, [r7, #12]
 800a30e:	e052      	b.n	800a3b6 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800a310:	f00e ff3a 	bl	8019188 <sys_arch_protect>
 800a314:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800a316:	4a2c      	ldr	r2, [pc, #176]	; (800a3c8 <alloc_socket+0xc8>)
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	4413      	add	r3, r2
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d142      	bne.n	800a3aa <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800a324:	4a28      	ldr	r2, [pc, #160]	; (800a3c8 <alloc_socket+0xc8>)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	011b      	lsls	r3, r3, #4
 800a32a:	4413      	add	r3, r2
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800a330:	68b8      	ldr	r0, [r7, #8]
 800a332:	f00e ff37 	bl	80191a4 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800a336:	4a24      	ldr	r2, [pc, #144]	; (800a3c8 <alloc_socket+0xc8>)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	011b      	lsls	r3, r3, #4
 800a33c:	4413      	add	r3, r2
 800a33e:	3304      	adds	r3, #4
 800a340:	2200      	movs	r2, #0
 800a342:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800a344:	4a20      	ldr	r2, [pc, #128]	; (800a3c8 <alloc_socket+0xc8>)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	4413      	add	r3, r2
 800a34c:	330e      	adds	r3, #14
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d006      	beq.n	800a362 <alloc_socket+0x62>
 800a354:	4b1d      	ldr	r3, [pc, #116]	; (800a3cc <alloc_socket+0xcc>)
 800a356:	f240 220e 	movw	r2, #526	; 0x20e
 800a35a:	491d      	ldr	r1, [pc, #116]	; (800a3d0 <alloc_socket+0xd0>)
 800a35c:	481d      	ldr	r0, [pc, #116]	; (800a3d4 <alloc_socket+0xd4>)
 800a35e:	f011 f803 	bl	801b368 <iprintf>
      sockets[i].rcvevent   = 0;
 800a362:	4a19      	ldr	r2, [pc, #100]	; (800a3c8 <alloc_socket+0xc8>)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	4413      	add	r3, r2
 800a36a:	3308      	adds	r3, #8
 800a36c:	2200      	movs	r2, #0
 800a36e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a378:	2b10      	cmp	r3, #16
 800a37a:	d102      	bne.n	800a382 <alloc_socket+0x82>
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <alloc_socket+0x86>
 800a382:	2301      	movs	r3, #1
 800a384:	e000      	b.n	800a388 <alloc_socket+0x88>
 800a386:	2300      	movs	r3, #0
 800a388:	b299      	uxth	r1, r3
 800a38a:	4a0f      	ldr	r2, [pc, #60]	; (800a3c8 <alloc_socket+0xc8>)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	011b      	lsls	r3, r3, #4
 800a390:	4413      	add	r3, r2
 800a392:	330a      	adds	r3, #10
 800a394:	460a      	mov	r2, r1
 800a396:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800a398:	4a0b      	ldr	r2, [pc, #44]	; (800a3c8 <alloc_socket+0xc8>)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	011b      	lsls	r3, r3, #4
 800a39e:	4413      	add	r3, r2
 800a3a0:	330c      	adds	r3, #12
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	e00a      	b.n	800a3c0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800a3aa:	68b8      	ldr	r0, [r7, #8]
 800a3ac:	f00e fefa 	bl	80191a4 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	60fb      	str	r3, [r7, #12]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	dda9      	ble.n	800a310 <alloc_socket+0x10>
  }
  return -1;
 800a3bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	200106dc 	.word	0x200106dc
 800a3cc:	0801ca88 	.word	0x0801ca88
 800a3d0:	0801cabc 	.word	0x0801cabc
 800a3d4:	0801cadc 	.word	0x0801cadc

0800a3d8 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	6852      	ldr	r2, [r2, #4]
 800a3ec:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
  return 1;
 800a402:	2301      	movs	r3, #1
}
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00d      	beq.n	800a440 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d005      	beq.n	800a436 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4618      	mov	r0, r3
 800a430:	f003 f8be 	bl	800d5b0 <pbuf_free>
 800a434:	e004      	b.n	800a440 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fe78 	bl	800a130 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d002      	beq.n	800a44c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800a446:	68b8      	ldr	r0, [r7, #8]
 800a448:	f7fd fd04 	bl	8007e54 <netconn_delete>
  }
}
 800a44c:	bf00      	nop
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800a45e:	f00e fe93 	bl	8019188 <sys_arch_protect>
 800a462:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800a464:	f107 0308 	add.w	r3, r7, #8
 800a468:	f107 020c 	add.w	r2, r7, #12
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7ff ffb2 	bl	800a3d8 <free_socket_locked>
 800a474:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800a476:	6978      	ldr	r0, [r7, #20]
 800a478:	f00e fe94 	bl	80191a4 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d006      	beq.n	800a490 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f107 0208 	add.w	r2, r7, #8
 800a488:	4619      	mov	r1, r3
 800a48a:	6838      	ldr	r0, [r7, #0]
 800a48c:	f7ff ffc0 	bl	800a410 <free_socket_free_elements>
  }
}
 800a490:	bf00      	nop
 800a492:	3718      	adds	r7, #24
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800a498:	b590      	push	{r4, r7, lr}
 800a49a:	b099      	sub	sp, #100	; 0x64
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff ff11 	bl	800a2d0 <get_socket>
 800a4ae:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800a4b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d102      	bne.n	800a4bc <lwip_accept+0x24>
    return -1;
 800a4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ba:	e0f8      	b.n	800a6ae <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800a4bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fd fd96 	bl	8007ff8 <netconn_accept>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800a4d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d02c      	beq.n	800a534 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800a4da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4e4:	2b10      	cmp	r3, #16
 800a4e6:	d008      	beq.n	800a4fa <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800a4e8:	235f      	movs	r3, #95	; 0x5f
 800a4ea:	633b      	str	r3, [r7, #48]	; 0x30
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d01d      	beq.n	800a52e <lwip_accept+0x96>
 800a4f2:	4a71      	ldr	r2, [pc, #452]	; (800a6b8 <lwip_accept+0x220>)
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	e019      	b.n	800a52e <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800a4fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a4fe:	f113 0f0f 	cmn.w	r3, #15
 800a502:	d108      	bne.n	800a516 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800a504:	2316      	movs	r3, #22
 800a506:	637b      	str	r3, [r7, #52]	; 0x34
 800a508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00f      	beq.n	800a52e <lwip_accept+0x96>
 800a50e:	4a6a      	ldr	r2, [pc, #424]	; (800a6b8 <lwip_accept+0x220>)
 800a510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	e00b      	b.n	800a52e <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800a516:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff fdea 	bl	800a0f4 <err_to_errno>
 800a520:	63b8      	str	r0, [r7, #56]	; 0x38
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <lwip_accept+0x96>
 800a528:	4a63      	ldr	r2, [pc, #396]	; (800a6b8 <lwip_accept+0x220>)
 800a52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52c:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800a52e:	f04f 33ff 	mov.w	r3, #4294967295
 800a532:	e0bc      	b.n	800a6ae <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	2b00      	cmp	r3, #0
 800a538:	d106      	bne.n	800a548 <lwip_accept+0xb0>
 800a53a:	4b60      	ldr	r3, [pc, #384]	; (800a6bc <lwip_accept+0x224>)
 800a53c:	f240 228b 	movw	r2, #651	; 0x28b
 800a540:	495f      	ldr	r1, [pc, #380]	; (800a6c0 <lwip_accept+0x228>)
 800a542:	4860      	ldr	r0, [pc, #384]	; (800a6c4 <lwip_accept+0x22c>)
 800a544:	f010 ff10 	bl	801b368 <iprintf>

  newsock = alloc_socket(newconn, 1);
 800a548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54a:	2101      	movs	r1, #1
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fed7 	bl	800a300 <alloc_socket>
 800a552:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800a554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55a:	d10e      	bne.n	800a57a <lwip_accept+0xe2>
    netconn_delete(newconn);
 800a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fd fc78 	bl	8007e54 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800a564:	2317      	movs	r3, #23
 800a566:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d002      	beq.n	800a574 <lwip_accept+0xdc>
 800a56e:	4a52      	ldr	r2, [pc, #328]	; (800a6b8 <lwip_accept+0x220>)
 800a570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a572:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a574:	f04f 33ff 	mov.w	r3, #4294967295
 800a578:	e099      	b.n	800a6ae <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800a57a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	db02      	blt.n	800a586 <lwip_accept+0xee>
 800a580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a582:	2b03      	cmp	r3, #3
 800a584:	dd06      	ble.n	800a594 <lwip_accept+0xfc>
 800a586:	4b4d      	ldr	r3, [pc, #308]	; (800a6bc <lwip_accept+0x224>)
 800a588:	f44f 7225 	mov.w	r2, #660	; 0x294
 800a58c:	494e      	ldr	r1, [pc, #312]	; (800a6c8 <lwip_accept+0x230>)
 800a58e:	484d      	ldr	r0, [pc, #308]	; (800a6c4 <lwip_accept+0x22c>)
 800a590:	f010 feea 	bl	801b368 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800a594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a596:	011b      	lsls	r3, r3, #4
 800a598:	4a4c      	ldr	r2, [pc, #304]	; (800a6cc <lwip_accept+0x234>)
 800a59a:	4413      	add	r3, r2
 800a59c:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800a59e:	f00e fdf3 	bl	8019188 <sys_arch_protect>
 800a5a2:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	b21b      	sxth	r3, r3
 800a5aa:	43db      	mvns	r3, r3
 800a5ac:	b21b      	sxth	r3, r3
 800a5ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5b4:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800a5b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a5b8:	f00e fdf4 	bl	80191a4 <sys_arch_unprotect>

  if (newconn->callback) {
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d012      	beq.n	800a5ea <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800a5c4:	4842      	ldr	r0, [pc, #264]	; (800a6d0 <lwip_accept+0x238>)
 800a5c6:	f00e fd9d 	bl	8019104 <sys_mutex_lock>
    while (recvevent > 0) {
 800a5ca:	e008      	b.n	800a5de <lwip_accept+0x146>
      recvevent--;
 800a5cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2100      	movs	r1, #0
 800a5dc:	4798      	blx	r3
    while (recvevent > 0) {
 800a5de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	dcf3      	bgt.n	800a5cc <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800a5e4:	483a      	ldr	r0, [pc, #232]	; (800a6d0 <lwip_accept+0x238>)
 800a5e6:	f00e fd9c 	bl	8019122 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d055      	beq.n	800a69c <lwip_accept+0x204>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d052      	beq.n	800a69c <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800a5f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5f8:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800a5fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a600:	2300      	movs	r3, #0
 800a602:	f7fd fc43 	bl	8007e8c <netconn_getaddr>
 800a606:	4603      	mov	r3, r0
 800a608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800a60c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a610:	2b00      	cmp	r3, #0
 800a612:	d016      	beq.n	800a642 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800a614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a616:	4618      	mov	r0, r3
 800a618:	f7fd fc1c 	bl	8007e54 <netconn_delete>
      free_socket(nsock, 1);
 800a61c:	2101      	movs	r1, #1
 800a61e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a620:	f7ff ff18 	bl	800a454 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800a624:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a628:	4618      	mov	r0, r3
 800a62a:	f7ff fd63 	bl	800a0f4 <err_to_errno>
 800a62e:	6478      	str	r0, [r7, #68]	; 0x44
 800a630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <lwip_accept+0x1a4>
 800a636:	4a20      	ldr	r2, [pc, #128]	; (800a6b8 <lwip_accept+0x220>)
 800a638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a63a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800a63c:	f04f 33ff 	mov.w	r3, #4294967295
 800a640:	e035      	b.n	800a6ae <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800a642:	f107 0314 	add.w	r3, r7, #20
 800a646:	2210      	movs	r2, #16
 800a648:	701a      	strb	r2, [r3, #0]
 800a64a:	f107 0314 	add.w	r3, r7, #20
 800a64e:	2202      	movs	r2, #2
 800a650:	705a      	strb	r2, [r3, #1]
 800a652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a654:	f107 0414 	add.w	r4, r7, #20
 800a658:	4618      	mov	r0, r3
 800a65a:	f001 fb41 	bl	800bce0 <lwip_htons>
 800a65e:	4603      	mov	r3, r0
 800a660:	8063      	strh	r3, [r4, #2]
 800a662:	f107 0314 	add.w	r3, r7, #20
 800a666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a668:	605a      	str	r2, [r3, #4]
 800a66a:	f107 0314 	add.w	r3, r7, #20
 800a66e:	3308      	adds	r3, #8
 800a670:	2208      	movs	r2, #8
 800a672:	2100      	movs	r1, #0
 800a674:	4618      	mov	r0, r3
 800a676:	f010 fad7 	bl	801ac28 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	7d3a      	ldrb	r2, [r7, #20]
 800a680:	4293      	cmp	r3, r2
 800a682:	d903      	bls.n	800a68c <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800a684:	7d3b      	ldrb	r3, [r7, #20]
 800a686:	461a      	mov	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	f107 0314 	add.w	r3, r7, #20
 800a694:	4619      	mov	r1, r3
 800a696:	68b8      	ldr	r0, [r7, #8]
 800a698:	f010 fa9e 	bl	801abd8 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800a69c:	2300      	movs	r3, #0
 800a69e:	643b      	str	r3, [r7, #64]	; 0x40
 800a6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <lwip_accept+0x214>
 800a6a6:	4a04      	ldr	r2, [pc, #16]	; (800a6b8 <lwip_accept+0x220>)
 800a6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6aa:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800a6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3764      	adds	r7, #100	; 0x64
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd90      	pop	{r4, r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	20019200 	.word	0x20019200
 800a6bc:	0801ca88 	.word	0x0801ca88
 800a6c0:	0801cb04 	.word	0x0801cb04
 800a6c4:	0801cadc 	.word	0x0801cadc
 800a6c8:	0801cb14 	.word	0x0801cb14
 800a6cc:	200106dc 	.word	0x200106dc
 800a6d0:	2001591c 	.word	0x2001591c

0800a6d4 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b08a      	sub	sp, #40	; 0x28
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	60b9      	str	r1, [r7, #8]
 800a6de:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7ff fdf5 	bl	800a2d0 <get_socket>
 800a6e6:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d102      	bne.n	800a6f4 <lwip_bind+0x20>
    return -1;
 800a6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f2:	e051      	b.n	800a798 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b10      	cmp	r3, #16
 800a6f8:	d108      	bne.n	800a70c <lwip_bind+0x38>
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	785b      	ldrb	r3, [r3, #1]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d104      	bne.n	800a70c <lwip_bind+0x38>
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	f003 0303 	and.w	r3, r3, #3
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d014      	beq.n	800a736 <lwip_bind+0x62>
 800a70c:	4b24      	ldr	r3, [pc, #144]	; (800a7a0 <lwip_bind+0xcc>)
 800a70e:	f240 22e2 	movw	r2, #738	; 0x2e2
 800a712:	4924      	ldr	r1, [pc, #144]	; (800a7a4 <lwip_bind+0xd0>)
 800a714:	4824      	ldr	r0, [pc, #144]	; (800a7a8 <lwip_bind+0xd4>)
 800a716:	f010 fe27 	bl	801b368 <iprintf>
 800a71a:	f06f 000f 	mvn.w	r0, #15
 800a71e:	f7ff fce9 	bl	800a0f4 <err_to_errno>
 800a722:	6178      	str	r0, [r7, #20]
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d002      	beq.n	800a730 <lwip_bind+0x5c>
 800a72a:	4a20      	ldr	r2, [pc, #128]	; (800a7ac <lwip_bind+0xd8>)
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	f04f 33ff 	mov.w	r3, #4294967295
 800a734:	e030      	b.n	800a798 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	613b      	str	r3, [r7, #16]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	885b      	ldrh	r3, [r3, #2]
 800a740:	4618      	mov	r0, r3
 800a742:	f001 facd 	bl	800bce0 <lwip_htons>
 800a746:	4603      	mov	r3, r0
 800a748:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a750:	f107 0110 	add.w	r1, r7, #16
 800a754:	4618      	mov	r0, r3
 800a756:	f7fd fbeb 	bl	8007f30 <netconn_bind>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800a760:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00e      	beq.n	800a786 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800a768:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff fcc1 	bl	800a0f4 <err_to_errno>
 800a772:	61b8      	str	r0, [r7, #24]
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d002      	beq.n	800a780 <lwip_bind+0xac>
 800a77a:	4a0c      	ldr	r2, [pc, #48]	; (800a7ac <lwip_bind+0xd8>)
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a780:	f04f 33ff 	mov.w	r3, #4294967295
 800a784:	e008      	b.n	800a798 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800a786:	2300      	movs	r3, #0
 800a788:	61fb      	str	r3, [r7, #28]
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <lwip_bind+0xc2>
 800a790:	4a06      	ldr	r2, [pc, #24]	; (800a7ac <lwip_bind+0xd8>)
 800a792:	69fb      	ldr	r3, [r7, #28]
 800a794:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3728      	adds	r7, #40	; 0x28
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	0801ca88 	.word	0x0801ca88
 800a7a4:	0801cb2c 	.word	0x0801cb2c
 800a7a8:	0801cadc 	.word	0x0801cadc
 800a7ac:	20019200 	.word	0x20019200

0800a7b0 <lwip_close>:

int
lwip_close(int s)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7ff fd87 	bl	800a2d0 <get_socket>
 800a7c2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d102      	bne.n	800a7d0 <lwip_close+0x20>
    return -1;
 800a7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ce:	e039      	b.n	800a844 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00b      	beq.n	800a7f0 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7e2:	2b10      	cmp	r3, #16
 800a7e4:	bf0c      	ite	eq
 800a7e6:	2301      	moveq	r3, #1
 800a7e8:	2300      	movne	r3, #0
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	617b      	str	r3, [r7, #20]
 800a7ee:	e00a      	b.n	800a806 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d006      	beq.n	800a806 <lwip_close+0x56>
 800a7f8:	4b14      	ldr	r3, [pc, #80]	; (800a84c <lwip_close+0x9c>)
 800a7fa:	f44f 7245 	mov.w	r2, #788	; 0x314
 800a7fe:	4914      	ldr	r1, [pc, #80]	; (800a850 <lwip_close+0xa0>)
 800a800:	4814      	ldr	r0, [pc, #80]	; (800a854 <lwip_close+0xa4>)
 800a802:	f010 fdb1 	bl	801b368 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f7fd fafe 	bl	8007e0c <netconn_prepare_delete>
 800a810:	4603      	mov	r3, r0
 800a812:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00e      	beq.n	800a83a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800a81c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff fc67 	bl	800a0f4 <err_to_errno>
 800a826:	60b8      	str	r0, [r7, #8]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <lwip_close+0x84>
 800a82e:	4a0a      	ldr	r2, [pc, #40]	; (800a858 <lwip_close+0xa8>)
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800a834:	f04f 33ff 	mov.w	r3, #4294967295
 800a838:	e004      	b.n	800a844 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800a83a:	6979      	ldr	r1, [r7, #20]
 800a83c:	6938      	ldr	r0, [r7, #16]
 800a83e:	f7ff fe09 	bl	800a454 <free_socket>
  set_errno(0);
  return 0;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	0801ca88 	.word	0x0801ca88
 800a850:	0801cb48 	.word	0x0801cb48
 800a854:	0801cadc 	.word	0x0801cadc
 800a858:	20019200 	.word	0x20019200

0800a85c <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b088      	sub	sp, #32
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff fd32 	bl	800a2d0 <get_socket>
 800a86c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800a86e:	69fb      	ldr	r3, [r7, #28]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d102      	bne.n	800a87a <lwip_listen+0x1e>
    return -1;
 800a874:	f04f 33ff 	mov.w	r3, #4294967295
 800a878:	e03e      	b.n	800a8f8 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	2bfe      	cmp	r3, #254	; 0xfe
 800a87e:	dc03      	bgt.n	800a888 <lwip_listen+0x2c>
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a886:	e000      	b.n	800a88a <lwip_listen+0x2e>
 800a888:	23ff      	movs	r3, #255	; 0xff
 800a88a:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	b2d2      	uxtb	r2, r2
 800a894:	4611      	mov	r1, r2
 800a896:	4618      	mov	r0, r3
 800a898:	f7fd fb82 	bl	8007fa0 <netconn_listen_with_backlog>
 800a89c:	4603      	mov	r3, r0
 800a89e:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800a8a0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d01e      	beq.n	800a8e6 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8b2:	2b10      	cmp	r3, #16
 800a8b4:	d008      	beq.n	800a8c8 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800a8b6:	235f      	movs	r3, #95	; 0x5f
 800a8b8:	60fb      	str	r3, [r7, #12]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00f      	beq.n	800a8e0 <lwip_listen+0x84>
 800a8c0:	4a0f      	ldr	r2, [pc, #60]	; (800a900 <lwip_listen+0xa4>)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6013      	str	r3, [r2, #0]
 800a8c6:	e00b      	b.n	800a8e0 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800a8c8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7ff fc11 	bl	800a0f4 <err_to_errno>
 800a8d2:	6138      	str	r0, [r7, #16]
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d002      	beq.n	800a8e0 <lwip_listen+0x84>
 800a8da:	4a09      	ldr	r2, [pc, #36]	; (800a900 <lwip_listen+0xa4>)
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800a8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e4:	e008      	b.n	800a8f8 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <lwip_listen+0x9a>
 800a8f0:	4a03      	ldr	r2, [pc, #12]	; (800a900 <lwip_listen+0xa4>)
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3720      	adds	r7, #32
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20019200 	.word	0x20019200

0800a904 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08c      	sub	sp, #48	; 0x30
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800a912:	2308      	movs	r3, #8
 800a914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	db01      	blt.n	800a926 <lwip_recv_tcp+0x22>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	e001      	b.n	800a92a <lwip_recv_tcp+0x26>
 800a926:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d106      	bne.n	800a940 <lwip_recv_tcp+0x3c>
 800a932:	4b74      	ldr	r3, [pc, #464]	; (800ab04 <lwip_recv_tcp+0x200>)
 800a934:	f240 329e 	movw	r2, #926	; 0x39e
 800a938:	4973      	ldr	r1, [pc, #460]	; (800ab08 <lwip_recv_tcp+0x204>)
 800a93a:	4874      	ldr	r0, [pc, #464]	; (800ab0c <lwip_recv_tcp+0x208>)
 800a93c:	f010 fd14 	bl	801b368 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a94a:	2b10      	cmp	r3, #16
 800a94c:	d006      	beq.n	800a95c <lwip_recv_tcp+0x58>
 800a94e:	4b6d      	ldr	r3, [pc, #436]	; (800ab04 <lwip_recv_tcp+0x200>)
 800a950:	f240 329f 	movw	r2, #927	; 0x39f
 800a954:	496e      	ldr	r1, [pc, #440]	; (800ab10 <lwip_recv_tcp+0x20c>)
 800a956:	486d      	ldr	r0, [pc, #436]	; (800ab0c <lwip_recv_tcp+0x208>)
 800a958:	f010 fd06 	bl	801b368 <iprintf>

  if (flags & MSG_DONTWAIT) {
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	f003 0308 	and.w	r3, r3, #8
 800a962:	2b00      	cmp	r3, #0
 800a964:	d005      	beq.n	800a972 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800a966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a96a:	f043 0304 	orr.w	r3, r3, #4
 800a96e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	617b      	str	r3, [r7, #20]
 800a980:	e036      	b.n	800a9f0 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a98a:	f107 0114 	add.w	r1, r7, #20
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fd fd68 	bl	8008464 <netconn_recv_tcp_pbuf_flags>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800a99a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d019      	beq.n	800a9d6 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f300 808d 	bgt.w	800aac4 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800a9aa:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7ff fba0 	bl	800a0f4 <err_to_errno>
 800a9b4:	61f8      	str	r0, [r7, #28]
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <lwip_recv_tcp+0xbe>
 800a9bc:	4a55      	ldr	r2, [pc, #340]	; (800ab14 <lwip_recv_tcp+0x210>)
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800a9c2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800a9c6:	f113 0f0f 	cmn.w	r3, #15
 800a9ca:	d101      	bne.n	800a9d0 <lwip_recv_tcp+0xcc>
          return 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e094      	b.n	800aafa <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d4:	e091      	b.n	800aafa <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d106      	bne.n	800a9ea <lwip_recv_tcp+0xe6>
 800a9dc:	4b49      	ldr	r3, [pc, #292]	; (800ab04 <lwip_recv_tcp+0x200>)
 800a9de:	f240 32c5 	movw	r2, #965	; 0x3c5
 800a9e2:	494d      	ldr	r1, [pc, #308]	; (800ab18 <lwip_recv_tcp+0x214>)
 800a9e4:	4849      	ldr	r0, [pc, #292]	; (800ab0c <lwip_recv_tcp+0x208>)
 800a9e6:	f010 fcbf 	bl	801b368 <iprintf>
      sock->lastdata.pbuf = p;
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	891b      	ldrh	r3, [r3, #8]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	dd03      	ble.n	800aa04 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	891b      	ldrh	r3, [r3, #8]
 800aa00:	847b      	strh	r3, [r7, #34]	; 0x22
 800aa02:	e001      	b.n	800aa08 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800aa08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0c:	4413      	add	r3, r2
 800aa0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa10:	429a      	cmp	r2, r3
 800aa12:	dd03      	ble.n	800aa1c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800aa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	43db      	mvns	r3, r3
 800aa1a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800aa1c:	6978      	ldr	r0, [r7, #20]
 800aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	18d1      	adds	r1, r2, r3
 800aa24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa26:	2300      	movs	r3, #0
 800aa28:	f002 ffc8 	bl	800d9bc <pbuf_copy_partial>

    recvd += copylen;
 800aa2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa30:	4413      	add	r3, r2
 800aa32:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800aa34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	da06      	bge.n	800aa4a <lwip_recv_tcp+0x146>
 800aa3c:	4b31      	ldr	r3, [pc, #196]	; (800ab04 <lwip_recv_tcp+0x200>)
 800aa3e:	f240 32dd 	movw	r2, #989	; 0x3dd
 800aa42:	4936      	ldr	r1, [pc, #216]	; (800ab1c <lwip_recv_tcp+0x218>)
 800aa44:	4831      	ldr	r0, [pc, #196]	; (800ab0c <lwip_recv_tcp+0x208>)
 800aa46:	f010 fc8f 	bl	801b368 <iprintf>
    recv_left -= copylen;
 800aa4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d123      	bne.n	800aaa4 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	891b      	ldrh	r3, [r3, #8]
 800aa60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d906      	bls.n	800aa74 <lwip_recv_tcp+0x170>
 800aa66:	4b27      	ldr	r3, [pc, #156]	; (800ab04 <lwip_recv_tcp+0x200>)
 800aa68:	f240 32e3 	movw	r2, #995	; 0x3e3
 800aa6c:	492c      	ldr	r1, [pc, #176]	; (800ab20 <lwip_recv_tcp+0x21c>)
 800aa6e:	4827      	ldr	r0, [pc, #156]	; (800ab0c <lwip_recv_tcp+0x208>)
 800aa70:	f010 fc7a 	bl	801b368 <iprintf>
      if (p->tot_len - copylen > 0) {
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	891b      	ldrh	r3, [r3, #8]
 800aa78:	461a      	mov	r2, r3
 800aa7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	dd09      	ble.n	800aa96 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa86:	4611      	mov	r1, r2
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f002 fd5e 	bl	800d54a <pbuf_free_header>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	605a      	str	r2, [r3, #4]
 800aa94:	e006      	b.n	800aaa4 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f002 fd86 	bl	800d5b0 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800aaa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaa8:	f043 0314 	orr.w	r3, r3, #20
 800aaac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	dd08      	ble.n	800aac8 <lwip_recv_tcp+0x1c4>
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f43f af58 	beq.w	800a972 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800aac2:	e001      	b.n	800aac8 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800aac4:	bf00      	nop
 800aac6:	e000      	b.n	800aaca <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800aac8:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800aaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aacc:	2b00      	cmp	r3, #0
 800aace:	dd0b      	ble.n	800aae8 <lwip_recv_tcp+0x1e4>
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	f003 0301 	and.w	r3, r3, #1
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d106      	bne.n	800aae8 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae0:	4611      	mov	r1, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fd fc0c 	bl	8008300 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800aae8:	2300      	movs	r3, #0
 800aaea:	61bb      	str	r3, [r7, #24]
 800aaec:	69bb      	ldr	r3, [r7, #24]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <lwip_recv_tcp+0x1f4>
 800aaf2:	4a08      	ldr	r2, [pc, #32]	; (800ab14 <lwip_recv_tcp+0x210>)
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	6013      	str	r3, [r2, #0]
  return recvd;
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3730      	adds	r7, #48	; 0x30
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	0801ca88 	.word	0x0801ca88
 800ab08:	0801cb80 	.word	0x0801cb80
 800ab0c:	0801cadc 	.word	0x0801cadc
 800ab10:	0801cb90 	.word	0x0801cb90
 800ab14:	20019200 	.word	0x20019200
 800ab18:	0801cbb4 	.word	0x0801cbb4
 800ab1c:	0801cbc0 	.word	0x0801cbc0
 800ab20:	0801cbe8 	.word	0x0801cbe8

0800ab24 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800ab24:	b590      	push	{r4, r7, lr}
 800ab26:	b08b      	sub	sp, #44	; 0x2c
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	603b      	str	r3, [r7, #0]
 800ab30:	4613      	mov	r3, r2
 800ab32:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d106      	bne.n	800ab4c <lwip_sock_make_addr+0x28>
 800ab3e:	4b2b      	ldr	r3, [pc, #172]	; (800abec <lwip_sock_make_addr+0xc8>)
 800ab40:	f240 4207 	movw	r2, #1031	; 0x407
 800ab44:	492a      	ldr	r1, [pc, #168]	; (800abf0 <lwip_sock_make_addr+0xcc>)
 800ab46:	482b      	ldr	r0, [pc, #172]	; (800abf4 <lwip_sock_make_addr+0xd0>)
 800ab48:	f010 fc0e 	bl	801b368 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d106      	bne.n	800ab60 <lwip_sock_make_addr+0x3c>
 800ab52:	4b26      	ldr	r3, [pc, #152]	; (800abec <lwip_sock_make_addr+0xc8>)
 800ab54:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ab58:	4927      	ldr	r1, [pc, #156]	; (800abf8 <lwip_sock_make_addr+0xd4>)
 800ab5a:	4826      	ldr	r0, [pc, #152]	; (800abf4 <lwip_sock_make_addr+0xd0>)
 800ab5c:	f010 fc04 	bl	801b368 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800ab60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d106      	bne.n	800ab74 <lwip_sock_make_addr+0x50>
 800ab66:	4b21      	ldr	r3, [pc, #132]	; (800abec <lwip_sock_make_addr+0xc8>)
 800ab68:	f240 4209 	movw	r2, #1033	; 0x409
 800ab6c:	4923      	ldr	r1, [pc, #140]	; (800abfc <lwip_sock_make_addr+0xd8>)
 800ab6e:	4821      	ldr	r0, [pc, #132]	; (800abf4 <lwip_sock_make_addr+0xd0>)
 800ab70:	f010 fbfa 	bl	801b368 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800ab74:	f107 0314 	add.w	r3, r7, #20
 800ab78:	2210      	movs	r2, #16
 800ab7a:	701a      	strb	r2, [r3, #0]
 800ab7c:	f107 0314 	add.w	r3, r7, #20
 800ab80:	2202      	movs	r2, #2
 800ab82:	705a      	strb	r2, [r3, #1]
 800ab84:	f107 0414 	add.w	r4, r7, #20
 800ab88:	88fb      	ldrh	r3, [r7, #6]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f001 f8a8 	bl	800bce0 <lwip_htons>
 800ab90:	4603      	mov	r3, r0
 800ab92:	8063      	strh	r3, [r4, #2]
 800ab94:	f107 0314 	add.w	r3, r7, #20
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	6812      	ldr	r2, [r2, #0]
 800ab9c:	605a      	str	r2, [r3, #4]
 800ab9e:	f107 0314 	add.w	r3, r7, #20
 800aba2:	3308      	adds	r3, #8
 800aba4:	2208      	movs	r2, #8
 800aba6:	2100      	movs	r1, #0
 800aba8:	4618      	mov	r0, r3
 800abaa:	f010 f83d 	bl	801ac28 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	7d3a      	ldrb	r2, [r7, #20]
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d202      	bcs.n	800abbe <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800abb8:	2301      	movs	r3, #1
 800abba:	627b      	str	r3, [r7, #36]	; 0x24
 800abbc:	e008      	b.n	800abd0 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800abbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	7d3a      	ldrb	r2, [r7, #20]
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d903      	bls.n	800abd0 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800abc8:	7d3b      	ldrb	r3, [r7, #20]
 800abca:	461a      	mov	r2, r3
 800abcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abce:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800abd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	f107 0314 	add.w	r3, r7, #20
 800abd8:	4619      	mov	r1, r3
 800abda:	6838      	ldr	r0, [r7, #0]
 800abdc:	f00f fffc 	bl	801abd8 <memcpy>
  return truncated;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	372c      	adds	r7, #44	; 0x2c
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd90      	pop	{r4, r7, pc}
 800abea:	bf00      	nop
 800abec:	0801ca88 	.word	0x0801ca88
 800abf0:	0801cbf8 	.word	0x0801cbf8
 800abf4:	0801cadc 	.word	0x0801cadc
 800abf8:	0801cc0c 	.word	0x0801cc0c
 800abfc:	0801cc1c 	.word	0x0801cc1c

0800ac00 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af02      	add	r7, sp, #8
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <lwip_recv_tcp_from+0x18>
    return 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	e021      	b.n	800ac5c <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d01d      	beq.n	800ac5a <lwip_recv_tcp_from+0x5a>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01a      	beq.n	800ac5a <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	f107 0216 	add.w	r2, r7, #22
 800ac2c:	f107 0110 	add.w	r1, r7, #16
 800ac30:	2300      	movs	r3, #0
 800ac32:	f7fd f92b 	bl	8007e8c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00e      	beq.n	800ac5a <lwip_recv_tcp_from+0x5a>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6818      	ldr	r0, [r3, #0]
 800ac46:	8afa      	ldrh	r2, [r7, #22]
 800ac48:	f107 0110 	add.w	r1, r7, #16
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	f7ff ff67 	bl	800ab24 <lwip_sock_make_addr>
 800ac56:	4603      	mov	r3, r0
 800ac58:	e000      	b.n	800ac5c <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3718      	adds	r7, #24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800ac64:	b590      	push	{r4, r7, lr}
 800ac66:	b08d      	sub	sp, #52	; 0x34
 800ac68:	af02      	add	r7, sp, #8
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
 800ac70:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10d      	bne.n	800ac96 <lwip_recvfrom_udp_raw+0x32>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dd09      	ble.n	800ac96 <lwip_recvfrom_udp_raw+0x32>
 800ac82:	4b5e      	ldr	r3, [pc, #376]	; (800adfc <lwip_recvfrom_udp_raw+0x198>)
 800ac84:	f240 4249 	movw	r2, #1097	; 0x449
 800ac88:	495d      	ldr	r1, [pc, #372]	; (800ae00 <lwip_recvfrom_udp_raw+0x19c>)
 800ac8a:	485e      	ldr	r0, [pc, #376]	; (800ae04 <lwip_recvfrom_udp_raw+0x1a0>)
 800ac8c:	f010 fb6c 	bl	801b368 <iprintf>
 800ac90:	f06f 030f 	mvn.w	r3, #15
 800ac94:	e0ad      	b.n	800adf2 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	f003 0308 	and.w	r3, r3, #8
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800aca0:	2304      	movs	r3, #4
 800aca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aca6:	e002      	b.n	800acae <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800aca8:	2300      	movs	r3, #0
 800acaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d11e      	bne.n	800acf8 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800acc2:	f107 0110 	add.w	r1, r7, #16
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fd fbf8 	bl	80084bc <netconn_recv_udp_raw_netbuf_flags>
 800accc:	4603      	mov	r3, r0
 800acce:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800acd0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800acd8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800acdc:	e089      	b.n	800adf2 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d106      	bne.n	800acf2 <lwip_recvfrom_udp_raw+0x8e>
 800ace4:	4b45      	ldr	r3, [pc, #276]	; (800adfc <lwip_recvfrom_udp_raw+0x198>)
 800ace6:	f240 425e 	movw	r2, #1118	; 0x45e
 800acea:	4947      	ldr	r1, [pc, #284]	; (800ae08 <lwip_recvfrom_udp_raw+0x1a4>)
 800acec:	4845      	ldr	r0, [pc, #276]	; (800ae04 <lwip_recvfrom_udp_raw+0x1a0>)
 800acee:	f010 fb3b 	bl	801b368 <iprintf>
    sock->lastdata.netbuf = buf;
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	891b      	ldrh	r3, [r3, #8]
 800acfe:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ad04:	2300      	movs	r3, #0
 800ad06:	61fb      	str	r3, [r7, #28]
 800ad08:	e029      	b.n	800ad5e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800ad0a:	8b3a      	ldrh	r2, [r7, #24]
 800ad0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689a      	ldr	r2, [r3, #8]
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	4413      	add	r3, r2
 800ad1c:	685a      	ldr	r2, [r3, #4]
 800ad1e:	8afb      	ldrh	r3, [r7, #22]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d902      	bls.n	800ad2a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800ad24:	8afb      	ldrh	r3, [r7, #22]
 800ad26:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ad28:	e006      	b.n	800ad38 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689a      	ldr	r2, [r3, #8]
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	00db      	lsls	r3, r3, #3
 800ad32:	4413      	add	r3, r2
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	6818      	ldr	r0, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	689a      	ldr	r2, [r3, #8]
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	4413      	add	r3, r2
 800ad46:	6819      	ldr	r1, [r3, #0]
 800ad48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ad4c:	f002 fe36 	bl	800d9bc <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800ad50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ad52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad54:	4413      	add	r3, r2
 800ad56:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	61fb      	str	r3, [r7, #28]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	68db      	ldr	r3, [r3, #12]
 800ad62:	69fa      	ldr	r2, [r7, #28]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	da03      	bge.n	800ad70 <lwip_recvfrom_udp_raw+0x10c>
 800ad68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ad6a:	8b3b      	ldrh	r3, [r7, #24]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d3cc      	bcc.n	800ad0a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d01a      	beq.n	800adae <lwip_recvfrom_udp_raw+0x14a>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d016      	beq.n	800adae <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d012      	beq.n	800adae <lwip_recvfrom_udp_raw+0x14a>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00e      	beq.n	800adae <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6818      	ldr	r0, [r3, #0]
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	f103 0108 	add.w	r1, r3, #8
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	3304      	adds	r3, #4
 800ada6:	9300      	str	r3, [sp, #0]
 800ada8:	4623      	mov	r3, r4
 800adaa:	f7ff febb 	bl	800ab24 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d007      	beq.n	800adcc <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800adbc:	2300      	movs	r3, #0
 800adbe:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800adc0:	7d7b      	ldrb	r3, [r7, #21]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d102      	bne.n	800adcc <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d106      	bne.n	800ade4 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2200      	movs	r2, #0
 800adda:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff f9a6 	bl	800a130 <netbuf_delete>
  }
  if (datagram_len) {
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d002      	beq.n	800adf0 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	8b3a      	ldrh	r2, [r7, #24]
 800adee:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	372c      	adds	r7, #44	; 0x2c
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd90      	pop	{r4, r7, pc}
 800adfa:	bf00      	nop
 800adfc:	0801ca88 	.word	0x0801ca88
 800ae00:	0801cc2c 	.word	0x0801cc2c
 800ae04:	0801cadc 	.word	0x0801cadc
 800ae08:	0801cc58 	.word	0x0801cc58

0800ae0c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b096      	sub	sp, #88	; 0x58
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]
 800ae18:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f7ff fa58 	bl	800a2d0 <get_socket>
 800ae20:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800ae22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d102      	bne.n	800ae2e <lwip_recvfrom+0x22>
    return -1;
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2c:	e078      	b.n	800af20 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ae2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae38:	2b10      	cmp	r3, #16
 800ae3a:	d112      	bne.n	800ae62 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	68b9      	ldr	r1, [r7, #8]
 800ae42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ae44:	f7ff fd5e 	bl	800a904 <lwip_recv_tcp>
 800ae48:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800ae4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	4b35      	ldr	r3, [pc, #212]	; (800af28 <lwip_recvfrom+0x11c>)
 800ae54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae58:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ae5a:	f7ff fed1 	bl	800ac00 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800ae5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae60:	e05e      	b.n	800af20 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800ae62:	2300      	movs	r3, #0
 800ae64:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800ae7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae7e:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800ae80:	2301      	movs	r3, #1
 800ae82:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800ae84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae86:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800ae88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d002      	beq.n	800ae94 <lwip_recvfrom+0x88>
 800ae8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	e000      	b.n	800ae96 <lwip_recvfrom+0x8a>
 800ae94:	2300      	movs	r3, #0
 800ae96:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ae98:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800ae9c:	f107 0214 	add.w	r2, r7, #20
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	460b      	mov	r3, r1
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800aeaa:	f7ff fedb 	bl	800ac64 <lwip_recvfrom_udp_raw>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800aeb4:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00e      	beq.n	800aeda <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800aebc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff f917 	bl	800a0f4 <err_to_errno>
 800aec6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800aec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d002      	beq.n	800aed4 <lwip_recvfrom+0xc8>
 800aece:	4a17      	ldr	r2, [pc, #92]	; (800af2c <lwip_recvfrom+0x120>)
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800aed4:	f04f 33ff 	mov.w	r3, #4294967295
 800aed8:	e022      	b.n	800af20 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800aeda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aedc:	461a      	mov	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4293      	cmp	r3, r2
 800aee2:	bf28      	it	cs
 800aee4:	4613      	movcs	r3, r2
 800aee6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d206      	bcs.n	800aefc <lwip_recvfrom+0xf0>
 800aeee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aef0:	461a      	mov	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4293      	cmp	r3, r2
 800aef6:	bf28      	it	cs
 800aef8:	4613      	movcs	r3, r2
 800aefa:	e001      	b.n	800af00 <lwip_recvfrom+0xf4>
 800aefc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800af00:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800af02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800af08:	69ba      	ldr	r2, [r7, #24]
 800af0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af0c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800af0e:	2300      	movs	r3, #0
 800af10:	643b      	str	r3, [r7, #64]	; 0x40
 800af12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <lwip_recvfrom+0x112>
 800af18:	4a04      	ldr	r2, [pc, #16]	; (800af2c <lwip_recvfrom+0x120>)
 800af1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af1c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800af1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800af20:	4618      	mov	r0, r3
 800af22:	3750      	adds	r7, #80	; 0x50
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	0801cc64 	.word	0x0801cc64
 800af2c:	20019200 	.word	0x20019200

0800af30 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af02      	add	r7, sp, #8
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800af3e:	2300      	movs	r3, #0
 800af40:	9301      	str	r3, [sp, #4]
 800af42:	2300      	movs	r3, #0
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	68b9      	ldr	r1, [r7, #8]
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f7ff ff5d 	bl	800ae0c <lwip_recvfrom>
 800af52:	4603      	mov	r3, r0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b08a      	sub	sp, #40	; 0x28
 800af60:	af02      	add	r7, sp, #8
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	607a      	str	r2, [r7, #4]
 800af68:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f7ff f9b0 	bl	800a2d0 <get_socket>
 800af70:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d102      	bne.n	800af7e <lwip_send+0x22>
    return -1;
 800af78:	f04f 33ff 	mov.w	r3, #4294967295
 800af7c:	e046      	b.n	800b00c <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af88:	2b10      	cmp	r3, #16
 800af8a:	d00b      	beq.n	800afa4 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800af8c:	2300      	movs	r3, #0
 800af8e:	9301      	str	r3, [sp, #4]
 800af90:	2300      	movs	r3, #0
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	68b9      	ldr	r1, [r7, #8]
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f000 f83c 	bl	800b018 <lwip_sendto>
 800afa0:	4603      	mov	r3, r0
 800afa2:	e033      	b.n	800b00c <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <lwip_send+0x56>
 800afae:	2203      	movs	r2, #3
 800afb0:	e000      	b.n	800afb4 <lwip_send+0x58>
 800afb2:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	105b      	asrs	r3, r3, #1
 800afb8:	b25b      	sxtb	r3, r3
 800afba:	f003 0304 	and.w	r3, r3, #4
 800afbe:	b25b      	sxtb	r3, r3
 800afc0:	4313      	orrs	r3, r2
 800afc2:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800afc4:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	6818      	ldr	r0, [r3, #0]
 800afce:	7efa      	ldrb	r2, [r7, #27]
 800afd0:	f107 0310 	add.w	r3, r7, #16
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	4613      	mov	r3, r2
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	68b9      	ldr	r1, [r7, #8]
 800afdc:	f7fd fac8 	bl	8008570 <netconn_write_partly>
 800afe0:	4603      	mov	r3, r0
 800afe2:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800afe4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff f883 	bl	800a0f4 <err_to_errno>
 800afee:	6178      	str	r0, [r7, #20]
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <lwip_send+0xa0>
 800aff6:	4a07      	ldr	r2, [pc, #28]	; (800b014 <lwip_send+0xb8>)
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800affc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <lwip_send+0xac>
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	e001      	b.n	800b00c <lwip_send+0xb0>
 800b008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3720      	adds	r7, #32
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	20019200 	.word	0x20019200

0800b018 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08e      	sub	sp, #56	; 0x38
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f7ff f952 	bl	800a2d0 <get_socket>
 800b02c:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b030:	2b00      	cmp	r3, #0
 800b032:	d102      	bne.n	800b03a <lwip_sendto+0x22>
    return -1;
 800b034:	f04f 33ff 	mov.w	r3, #4294967295
 800b038:	e093      	b.n	800b162 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b044:	2b10      	cmp	r3, #16
 800b046:	d107      	bne.n	800b058 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	68b9      	ldr	r1, [r7, #8]
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f7ff ff84 	bl	800af5c <lwip_send>
 800b054:	4603      	mov	r3, r0
 800b056:	e084      	b.n	800b162 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b05e:	d30a      	bcc.n	800b076 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800b060:	235a      	movs	r3, #90	; 0x5a
 800b062:	623b      	str	r3, [r7, #32]
 800b064:	6a3b      	ldr	r3, [r7, #32]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <lwip_sendto+0x58>
 800b06a:	4a40      	ldr	r2, [pc, #256]	; (800b16c <lwip_sendto+0x154>)
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b070:	f04f 33ff 	mov.w	r3, #4294967295
 800b074:	e075      	b.n	800b162 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800b07a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d102      	bne.n	800b086 <lwip_sendto+0x6e>
 800b080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b082:	2b00      	cmp	r3, #0
 800b084:	d023      	beq.n	800b0ce <lwip_sendto+0xb6>
 800b086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b088:	2b10      	cmp	r3, #16
 800b08a:	d10b      	bne.n	800b0a4 <lwip_sendto+0x8c>
 800b08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d008      	beq.n	800b0a4 <lwip_sendto+0x8c>
 800b092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b094:	785b      	ldrb	r3, [r3, #1]
 800b096:	2b02      	cmp	r3, #2
 800b098:	d104      	bne.n	800b0a4 <lwip_sendto+0x8c>
 800b09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b09c:	f003 0303 	and.w	r3, r3, #3
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d014      	beq.n	800b0ce <lwip_sendto+0xb6>
 800b0a4:	4b32      	ldr	r3, [pc, #200]	; (800b170 <lwip_sendto+0x158>)
 800b0a6:	f240 6252 	movw	r2, #1618	; 0x652
 800b0aa:	4932      	ldr	r1, [pc, #200]	; (800b174 <lwip_sendto+0x15c>)
 800b0ac:	4832      	ldr	r0, [pc, #200]	; (800b178 <lwip_sendto+0x160>)
 800b0ae:	f010 f95b 	bl	801b368 <iprintf>
 800b0b2:	f06f 000f 	mvn.w	r0, #15
 800b0b6:	f7ff f81d 	bl	800a0f4 <err_to_errno>
 800b0ba:	62b8      	str	r0, [r7, #40]	; 0x28
 800b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <lwip_sendto+0xb0>
 800b0c2:	4a2a      	ldr	r2, [pc, #168]	; (800b16c <lwip_sendto+0x154>)
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	6013      	str	r3, [r2, #0]
 800b0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0cc:	e049      	b.n	800b162 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	617b      	str	r3, [r7, #20]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800b0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00a      	beq.n	800b0f2 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800b0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	61bb      	str	r3, [r7, #24]
 800b0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e4:	885b      	ldrh	r3, [r3, #2]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f000 fdfa 	bl	800bce0 <lwip_htons>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	86bb      	strh	r3, [r7, #52]	; 0x34
 800b0f0:	e003      	b.n	800b0fa <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800b0fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b0fc:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800b0fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b100:	f107 0310 	add.w	r3, r7, #16
 800b104:	68b9      	ldr	r1, [r7, #8]
 800b106:	4618      	mov	r0, r3
 800b108:	f7ff f85a 	bl	800a1c0 <netbuf_ref>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800b112:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800b11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f107 0210 	add.w	r2, r7, #16
 800b122:	4611      	mov	r1, r2
 800b124:	4618      	mov	r0, r3
 800b126:	f7fd f9f5 	bl	8008514 <netconn_send>
 800b12a:	4603      	mov	r3, r0
 800b12c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800b130:	f107 0310 	add.w	r3, r7, #16
 800b134:	4618      	mov	r0, r3
 800b136:	f7ff f81b 	bl	800a170 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800b13a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fe ffd8 	bl	800a0f4 <err_to_errno>
 800b144:	6278      	str	r0, [r7, #36]	; 0x24
 800b146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <lwip_sendto+0x13a>
 800b14c:	4a07      	ldr	r2, [pc, #28]	; (800b16c <lwip_sendto+0x154>)
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800b152:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b156:	2b00      	cmp	r3, #0
 800b158:	d101      	bne.n	800b15e <lwip_sendto+0x146>
 800b15a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b15c:	e001      	b.n	800b162 <lwip_sendto+0x14a>
 800b15e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b162:	4618      	mov	r0, r3
 800b164:	3738      	adds	r7, #56	; 0x38
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20019200 	.word	0x20019200
 800b170:	0801ca88 	.word	0x0801ca88
 800b174:	0801cd68 	.word	0x0801cd68
 800b178:	0801cadc 	.word	0x0801cadc

0800b17c <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b086      	sub	sp, #24
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d009      	beq.n	800b1a2 <lwip_socket+0x26>
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	2b03      	cmp	r3, #3
 800b192:	dc23      	bgt.n	800b1dc <lwip_socket+0x60>
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d019      	beq.n	800b1ce <lwip_socket+0x52>
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d009      	beq.n	800b1b4 <lwip_socket+0x38>
 800b1a0:	e01c      	b.n	800b1dc <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	4a22      	ldr	r2, [pc, #136]	; (800b230 <lwip_socket+0xb4>)
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	2040      	movs	r0, #64	; 0x40
 800b1ac:	f7fc fdb4 	bl	8007d18 <netconn_new_with_proto_and_callback>
 800b1b0:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800b1b2:	e019      	b.n	800b1e8 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b88      	cmp	r3, #136	; 0x88
 800b1b8:	d101      	bne.n	800b1be <lwip_socket+0x42>
 800b1ba:	2321      	movs	r3, #33	; 0x21
 800b1bc:	e000      	b.n	800b1c0 <lwip_socket+0x44>
 800b1be:	2320      	movs	r3, #32
 800b1c0:	4a1b      	ldr	r2, [pc, #108]	; (800b230 <lwip_socket+0xb4>)
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fc fda7 	bl	8007d18 <netconn_new_with_proto_and_callback>
 800b1ca:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b1cc:	e00c      	b.n	800b1e8 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800b1ce:	4a18      	ldr	r2, [pc, #96]	; (800b230 <lwip_socket+0xb4>)
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	2010      	movs	r0, #16
 800b1d4:	f7fc fda0 	bl	8007d18 <netconn_new_with_proto_and_callback>
 800b1d8:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800b1da:	e005      	b.n	800b1e8 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800b1dc:	4b15      	ldr	r3, [pc, #84]	; (800b234 <lwip_socket+0xb8>)
 800b1de:	2216      	movs	r2, #22
 800b1e0:	601a      	str	r2, [r3, #0]
      return -1;
 800b1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e6:	e01e      	b.n	800b226 <lwip_socket+0xaa>
  }

  if (!conn) {
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d105      	bne.n	800b1fa <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800b1ee:	4b11      	ldr	r3, [pc, #68]	; (800b234 <lwip_socket+0xb8>)
 800b1f0:	2269      	movs	r2, #105	; 0x69
 800b1f2:	601a      	str	r2, [r3, #0]
    return -1;
 800b1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1f8:	e015      	b.n	800b226 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	6978      	ldr	r0, [r7, #20]
 800b1fe:	f7ff f87f 	bl	800a300 <alloc_socket>
 800b202:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b20a:	d108      	bne.n	800b21e <lwip_socket+0xa2>
    netconn_delete(conn);
 800b20c:	6978      	ldr	r0, [r7, #20]
 800b20e:	f7fc fe21 	bl	8007e54 <netconn_delete>
    set_errno(ENFILE);
 800b212:	4b08      	ldr	r3, [pc, #32]	; (800b234 <lwip_socket+0xb8>)
 800b214:	2217      	movs	r2, #23
 800b216:	601a      	str	r2, [r3, #0]
    return -1;
 800b218:	f04f 33ff 	mov.w	r3, #4294967295
 800b21c:	e003      	b.n	800b226 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800b224:	693b      	ldr	r3, [r7, #16]
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	0800b2c1 	.word	0x0800b2c1
 800b234:	20019200 	.word	0x20019200

0800b238 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800b238:	b480      	push	{r7}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
 800b24a:	e02c      	b.n	800b2a6 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	695a      	ldr	r2, [r3, #20]
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	00db      	lsls	r3, r3, #3
 800b254:	4413      	add	r3, r2
 800b256:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d11e      	bne.n	800b2a0 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d009      	beq.n	800b27c <lwip_poll_should_wake+0x44>
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <lwip_poll_should_wake+0x44>
        return 1;
 800b278:	2301      	movs	r3, #1
 800b27a:	e01a      	b.n	800b2b2 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d009      	beq.n	800b296 <lwip_poll_should_wake+0x5e>
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <lwip_poll_should_wake+0x5e>
        return 1;
 800b292:	2301      	movs	r3, #1
 800b294:	e00d      	b.n	800b2b2 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e008      	b.n	800b2b2 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	617b      	str	r3, [r7, #20]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d3cd      	bcc.n	800b24c <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	371c      	adds	r7, #28
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
	...

0800b2c0 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b08a      	sub	sp, #40	; 0x28
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	70fb      	strb	r3, [r7, #3]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 80a4 	beq.w	800b420 <event_callback+0x160>
    s = conn->socket;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	da18      	bge.n	800b316 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800b2e4:	f00d ff50 	bl	8019188 <sys_arch_protect>
 800b2e8:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	da0b      	bge.n	800b30a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800b2f2:	78fb      	ldrb	r3, [r7, #3]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d104      	bne.n	800b302 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	1e5a      	subs	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800b302:	69f8      	ldr	r0, [r7, #28]
 800b304:	f00d ff4e 	bl	80191a4 <sys_arch_unprotect>
        return;
 800b308:	e08d      	b.n	800b426 <event_callback+0x166>
      }
      s = conn->socket;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800b310:	69f8      	ldr	r0, [r7, #28]
 800b312:	f00d ff47 	bl	80191a4 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800b316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b318:	f7fe ffda 	bl	800a2d0 <get_socket>
 800b31c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d07f      	beq.n	800b424 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800b324:	2301      	movs	r3, #1
 800b326:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800b328:	f00d ff2e 	bl	8019188 <sys_arch_protect>
 800b32c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800b32e:	78fb      	ldrb	r3, [r7, #3]
 800b330:	2b04      	cmp	r3, #4
 800b332:	d83e      	bhi.n	800b3b2 <event_callback+0xf2>
 800b334:	a201      	add	r2, pc, #4	; (adr r2, 800b33c <event_callback+0x7c>)
 800b336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b33a:	bf00      	nop
 800b33c:	0800b351 	.word	0x0800b351
 800b340:	0800b373 	.word	0x0800b373
 800b344:	0800b38b 	.word	0x0800b38b
 800b348:	0800b39f 	.word	0x0800b39f
 800b34c:	0800b3ab 	.word	0x0800b3ab
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b356:	b29b      	uxth	r3, r3
 800b358:	3301      	adds	r3, #1
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	b21a      	sxth	r2, r3
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	dd2a      	ble.n	800b3c2 <event_callback+0x102>
        check_waiters = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	623b      	str	r3, [r7, #32]
      }
      break;
 800b370:	e027      	b.n	800b3c2 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b378:	b29b      	uxth	r3, r3
 800b37a:	3b01      	subs	r3, #1
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	b21a      	sxth	r2, r3
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	623b      	str	r3, [r7, #32]
      break;
 800b388:	e01c      	b.n	800b3c4 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	895b      	ldrh	r3, [r3, #10]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d001      	beq.n	800b396 <event_callback+0xd6>
        check_waiters = 0;
 800b392:	2300      	movs	r3, #0
 800b394:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	2201      	movs	r2, #1
 800b39a:	815a      	strh	r2, [r3, #10]
      break;
 800b39c:	e012      	b.n	800b3c4 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	623b      	str	r3, [r7, #32]
      break;
 800b3a8:	e00c      	b.n	800b3c4 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	819a      	strh	r2, [r3, #12]
      break;
 800b3b0:	e008      	b.n	800b3c4 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800b3b2:	4b1e      	ldr	r3, [pc, #120]	; (800b42c <event_callback+0x16c>)
 800b3b4:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800b3b8:	491d      	ldr	r1, [pc, #116]	; (800b430 <event_callback+0x170>)
 800b3ba:	481e      	ldr	r0, [pc, #120]	; (800b434 <event_callback+0x174>)
 800b3bc:	f00f ffd4 	bl	801b368 <iprintf>
      break;
 800b3c0:	e000      	b.n	800b3c4 <event_callback+0x104>
      break;
 800b3c2:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	7b9b      	ldrb	r3, [r3, #14]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d025      	beq.n	800b418 <event_callback+0x158>
 800b3cc:	6a3b      	ldr	r3, [r7, #32]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d022      	beq.n	800b418 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800b3d2:	69bb      	ldr	r3, [r7, #24]
 800b3d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	bfcc      	ite	gt
 800b3dc:	2301      	movgt	r3, #1
 800b3de:	2300      	movle	r3, #0
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	895b      	ldrh	r3, [r3, #10]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	bf14      	ite	ne
 800b3ec:	2301      	movne	r3, #1
 800b3ee:	2300      	moveq	r3, #0
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	899b      	ldrh	r3, [r3, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	bf14      	ite	ne
 800b3fc:	2301      	movne	r3, #1
 800b3fe:	2300      	moveq	r3, #0
 800b400:	b2db      	uxtb	r3, r3
 800b402:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800b404:	69f8      	ldr	r0, [r7, #28]
 800b406:	f00d fecd 	bl	80191a4 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	693a      	ldr	r2, [r7, #16]
 800b40e:	6979      	ldr	r1, [r7, #20]
 800b410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b412:	f000 f811 	bl	800b438 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800b416:	e006      	b.n	800b426 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800b418:	69f8      	ldr	r0, [r7, #28]
 800b41a:	f00d fec3 	bl	80191a4 <sys_arch_unprotect>
 800b41e:	e002      	b.n	800b426 <event_callback+0x166>
    return;
 800b420:	bf00      	nop
 800b422:	e000      	b.n	800b426 <event_callback+0x166>
      return;
 800b424:	bf00      	nop
  }
  done_socket(sock);
}
 800b426:	3728      	adds	r7, #40	; 0x28
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	0801ca88 	.word	0x0801ca88
 800b430:	0801ce04 	.word	0x0801ce04
 800b434:	0801cadc 	.word	0x0801cadc

0800b438 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b088      	sub	sp, #32
 800b43c:	af02      	add	r7, sp, #8
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800b446:	4b3e      	ldr	r3, [pc, #248]	; (800b540 <select_check_waiters+0x108>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	617b      	str	r3, [r7, #20]
 800b44c:	e06f      	b.n	800b52e <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	69db      	ldr	r3, [r3, #28]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d168      	bne.n	800b528 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800b456:	2300      	movs	r3, #0
 800b458:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	68f9      	ldr	r1, [r7, #12]
 800b46c:	6978      	ldr	r0, [r7, #20]
 800b46e:	f7ff fee3 	bl	800b238 <lwip_poll_should_wake>
 800b472:	6138      	str	r0, [r7, #16]
 800b474:	e04d      	b.n	800b512 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d014      	beq.n	800b4a6 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d010      	beq.n	800b4a6 <select_check_waiters+0x6e>
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	0952      	lsrs	r2, r2, #5
 800b48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	f002 021f 	and.w	r2, r2, #31
 800b496:	2101      	movs	r1, #1
 800b498:	fa01 f202 	lsl.w	r2, r1, r2
 800b49c:	4013      	ands	r3, r2
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d001      	beq.n	800b4a6 <select_check_waiters+0x6e>
            do_signal = 1;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d017      	beq.n	800b4dc <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d114      	bne.n	800b4dc <select_check_waiters+0xa4>
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d010      	beq.n	800b4dc <select_check_waiters+0xa4>
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	68fa      	ldr	r2, [r7, #12]
 800b4c0:	0952      	lsrs	r2, r2, #5
 800b4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	f002 021f 	and.w	r2, r2, #31
 800b4cc:	2101      	movs	r1, #1
 800b4ce:	fa01 f202 	lsl.w	r2, r1, r2
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <select_check_waiters+0xa4>
            do_signal = 1;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d017      	beq.n	800b512 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d114      	bne.n	800b512 <select_check_waiters+0xda>
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d010      	beq.n	800b512 <select_check_waiters+0xda>
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	0952      	lsrs	r2, r2, #5
 800b4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	f002 021f 	and.w	r2, r2, #31
 800b502:	2101      	movs	r1, #1
 800b504:	fa01 f202 	lsl.w	r2, r1, r2
 800b508:	4013      	ands	r3, r2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <select_check_waiters+0xda>
            do_signal = 1;
 800b50e:	2301      	movs	r3, #1
 800b510:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d007      	beq.n	800b528 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	2201      	movs	r2, #1
 800b51c:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	3320      	adds	r3, #32
 800b522:	4618      	mov	r0, r3
 800b524:	f00d fd8c 	bl	8019040 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	617b      	str	r3, [r7, #20]
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d18c      	bne.n	800b44e <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop
 800b538:	3718      	adds	r7, #24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	2001071c 	.word	0x2001071c

0800b544 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b20      	cmp	r3, #32
 800b550:	d009      	beq.n	800b566 <lwip_sockopt_to_ipopt+0x22>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b20      	cmp	r3, #32
 800b556:	dc0c      	bgt.n	800b572 <lwip_sockopt_to_ipopt+0x2e>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b04      	cmp	r3, #4
 800b55c:	d007      	beq.n	800b56e <lwip_sockopt_to_ipopt+0x2a>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b08      	cmp	r3, #8
 800b562:	d002      	beq.n	800b56a <lwip_sockopt_to_ipopt+0x26>
 800b564:	e005      	b.n	800b572 <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800b566:	2320      	movs	r3, #32
 800b568:	e00b      	b.n	800b582 <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800b56a:	2308      	movs	r3, #8
 800b56c:	e009      	b.n	800b582 <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800b56e:	2304      	movs	r3, #4
 800b570:	e007      	b.n	800b582 <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800b572:	4b06      	ldr	r3, [pc, #24]	; (800b58c <lwip_sockopt_to_ipopt+0x48>)
 800b574:	f640 3239 	movw	r2, #2873	; 0xb39
 800b578:	4905      	ldr	r1, [pc, #20]	; (800b590 <lwip_sockopt_to_ipopt+0x4c>)
 800b57a:	4806      	ldr	r0, [pc, #24]	; (800b594 <lwip_sockopt_to_ipopt+0x50>)
 800b57c:	f00f fef4 	bl	801b368 <iprintf>
    return 0;
 800b580:	2300      	movs	r3, #0
  }
}
 800b582:	4618      	mov	r0, r3
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	0801ca88 	.word	0x0801ca88
 800b590:	0801ce14 	.word	0x0801ce14
 800b594:	0801cadc 	.word	0x0801cadc

0800b598 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b08a      	sub	sp, #40	; 0x28
 800b59c:	af02      	add	r7, sp, #8
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	603b      	str	r3, [r7, #0]
  int err = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f7fe fe90 	bl	800a2d0 <get_socket>
 800b5b0:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d102      	bne.n	800b5be <lwip_setsockopt+0x26>
    return -1;
 800b5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5bc:	e02b      	b.n	800b616 <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800b5c4:	230e      	movs	r3, #14
 800b5c6:	613b      	str	r3, [r7, #16]
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <lwip_setsockopt+0x3c>
 800b5ce:	4a14      	ldr	r2, [pc, #80]	; (800b620 <lwip_setsockopt+0x88>)
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b5d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d8:	e01d      	b.n	800b616 <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800b5da:	4812      	ldr	r0, [pc, #72]	; (800b624 <lwip_setsockopt+0x8c>)
 800b5dc:	f00d fd92 	bl	8019104 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800b5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	68b9      	ldr	r1, [r7, #8]
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f000 f81c 	bl	800b628 <lwip_setsockopt_impl>
 800b5f0:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800b5f2:	480c      	ldr	r0, [pc, #48]	; (800b624 <lwip_setsockopt+0x8c>)
 800b5f4:	f00d fd95 	bl	8019122 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	617b      	str	r3, [r7, #20]
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d002      	beq.n	800b608 <lwip_setsockopt+0x70>
 800b602:	4a07      	ldr	r2, [pc, #28]	; (800b620 <lwip_setsockopt+0x88>)
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d002      	beq.n	800b614 <lwip_setsockopt+0x7c>
 800b60e:	f04f 33ff 	mov.w	r3, #4294967295
 800b612:	e000      	b.n	800b616 <lwip_setsockopt+0x7e>
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3720      	adds	r7, #32
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20019200 	.word	0x20019200
 800b624:	2001591c 	.word	0x2001591c

0800b628 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	603b      	str	r3, [r7, #0]
  int err = 0;
 800b636:	2300      	movs	r3, #0
 800b638:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f7fe fe31 	bl	800a2a2 <tryget_socket>
 800b640:	6178      	str	r0, [r7, #20]
  if (!sock) {
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d101      	bne.n	800b64c <lwip_setsockopt_impl+0x24>
    return EBADF;
 800b648:	2309      	movs	r3, #9
 800b64a:	e187      	b.n	800b95c <lwip_setsockopt_impl+0x334>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800b652:	4293      	cmp	r3, r2
 800b654:	d015      	beq.n	800b682 <lwip_setsockopt_impl+0x5a>
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b65c:	f280 817a 	bge.w	800b954 <lwip_setsockopt_impl+0x32c>
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2bff      	cmp	r3, #255	; 0xff
 800b664:	f000 8172 	beq.w	800b94c <lwip_setsockopt_impl+0x324>
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2bff      	cmp	r3, #255	; 0xff
 800b66c:	f300 8172 	bgt.w	800b954 <lwip_setsockopt_impl+0x32c>
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	2b00      	cmp	r3, #0
 800b674:	f000 80e0 	beq.w	800b838 <lwip_setsockopt_impl+0x210>
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2b06      	cmp	r3, #6
 800b67c:	f000 8116 	beq.w	800b8ac <lwip_setsockopt_impl+0x284>
 800b680:	e168      	b.n	800b954 <lwip_setsockopt_impl+0x32c>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f241 020b 	movw	r2, #4107	; 0x100b
 800b688:	4293      	cmp	r3, r2
 800b68a:	f000 8091 	beq.w	800b7b0 <lwip_setsockopt_impl+0x188>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f241 020b 	movw	r2, #4107	; 0x100b
 800b694:	4293      	cmp	r3, r2
 800b696:	f300 80cb 	bgt.w	800b830 <lwip_setsockopt_impl+0x208>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f241 020a 	movw	r2, #4106	; 0x100a
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d050      	beq.n	800b746 <lwip_setsockopt_impl+0x11e>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f241 020a 	movw	r2, #4106	; 0x100a
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	f300 80c0 	bgt.w	800b830 <lwip_setsockopt_impl+0x208>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b08      	cmp	r3, #8
 800b6b4:	d003      	beq.n	800b6be <lwip_setsockopt_impl+0x96>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b20      	cmp	r3, #32
 800b6ba:	f040 80b9 	bne.w	800b830 <lwip_setsockopt_impl+0x208>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b20      	cmp	r3, #32
 800b6c2:	d108      	bne.n	800b6d6 <lwip_setsockopt_impl+0xae>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 800b6ce:	2b20      	cmp	r3, #32
 800b6d0:	d001      	beq.n	800b6d6 <lwip_setsockopt_impl+0xae>
            done_socket(sock);
            return ENOPROTOOPT;
 800b6d2:	235c      	movs	r3, #92	; 0x5c
 800b6d4:	e142      	b.n	800b95c <lwip_setsockopt_impl+0x334>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7ff ff34 	bl	800b544 <lwip_sockopt_to_ipopt>
 800b6dc:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	2b03      	cmp	r3, #3
 800b6e2:	d801      	bhi.n	800b6e8 <lwip_setsockopt_impl+0xc0>
 800b6e4:	2316      	movs	r3, #22
 800b6e6:	e139      	b.n	800b95c <lwip_setsockopt_impl+0x334>
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d004      	beq.n	800b6fa <lwip_setsockopt_impl+0xd2>
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d101      	bne.n	800b6fe <lwip_setsockopt_impl+0xd6>
 800b6fa:	2316      	movs	r3, #22
 800b6fc:	e12e      	b.n	800b95c <lwip_setsockopt_impl+0x334>
          if (*(const int *)optval) {
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00e      	beq.n	800b724 <lwip_setsockopt_impl+0xfc>
            ip_set_option(sock->conn->pcb.ip, optname);
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	7a5b      	ldrb	r3, [r3, #9]
 800b70e:	b25a      	sxtb	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	b25b      	sxtb	r3, r3
 800b714:	4313      	orrs	r3, r2
 800b716:	b25a      	sxtb	r2, r3
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800b722:	e088      	b.n	800b836 <lwip_setsockopt_impl+0x20e>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	7a5b      	ldrb	r3, [r3, #9]
 800b72c:	b25a      	sxtb	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	b25b      	sxtb	r3, r3
 800b732:	43db      	mvns	r3, r3
 800b734:	b25b      	sxtb	r3, r3
 800b736:	4013      	ands	r3, r2
 800b738:	b25a      	sxtb	r2, r3
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	b2d2      	uxtb	r2, r2
 800b742:	725a      	strb	r2, [r3, #9]
          break;
 800b744:	e077      	b.n	800b836 <lwip_setsockopt_impl+0x20e>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800b746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b748:	2b03      	cmp	r3, #3
 800b74a:	d801      	bhi.n	800b750 <lwip_setsockopt_impl+0x128>
 800b74c:	2316      	movs	r3, #22
 800b74e:	e105      	b.n	800b95c <lwip_setsockopt_impl+0x334>
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d004      	beq.n	800b762 <lwip_setsockopt_impl+0x13a>
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d101      	bne.n	800b766 <lwip_setsockopt_impl+0x13e>
 800b762:	2316      	movs	r3, #22
 800b764:	e0fa      	b.n	800b95c <lwip_setsockopt_impl+0x334>
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b770:	2b20      	cmp	r3, #32
 800b772:	d001      	beq.n	800b778 <lwip_setsockopt_impl+0x150>
 800b774:	235c      	movs	r3, #92	; 0x5c
 800b776:	e0f1      	b.n	800b95c <lwip_setsockopt_impl+0x334>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00b      	beq.n	800b798 <lwip_setsockopt_impl+0x170>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	7c1a      	ldrb	r2, [r3, #16]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	f042 0201 	orr.w	r2, r2, #1
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800b796:	e04e      	b.n	800b836 <lwip_setsockopt_impl+0x20e>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	7c1a      	ldrb	r2, [r3, #16]
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	f022 0201 	bic.w	r2, r2, #1
 800b7aa:	b2d2      	uxtb	r2, r2
 800b7ac:	741a      	strb	r2, [r3, #16]
          break;
 800b7ae:	e042      	b.n	800b836 <lwip_setsockopt_impl+0x20e>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800b7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b6:	2b05      	cmp	r3, #5
 800b7b8:	d801      	bhi.n	800b7be <lwip_setsockopt_impl+0x196>
 800b7ba:	2316      	movs	r3, #22
 800b7bc:	e0ce      	b.n	800b95c <lwip_setsockopt_impl+0x334>
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <lwip_setsockopt_impl+0x1a2>
 800b7c6:	2316      	movs	r3, #22
 800b7c8:	e0c8      	b.n	800b95c <lwip_setsockopt_impl+0x334>

          iface = (const struct ifreq *)optval;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d009      	beq.n	800b7ea <lwip_setsockopt_impl+0x1c2>
            n = netif_find(iface->ifr_name);
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f001 fb17 	bl	800ce0c <netif_find>
 800b7de:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <lwip_setsockopt_impl+0x1c2>
              done_socket(sock);
              return ENODEV;
 800b7e6:	2313      	movs	r3, #19
 800b7e8:	e0b8      	b.n	800b95c <lwip_setsockopt_impl+0x334>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7f4:	2b10      	cmp	r3, #16
 800b7f6:	d002      	beq.n	800b7fe <lwip_setsockopt_impl+0x1d6>
 800b7f8:	2b20      	cmp	r3, #32
 800b7fa:	d008      	beq.n	800b80e <lwip_setsockopt_impl+0x1e6>
 800b7fc:	e00f      	b.n	800b81e <lwip_setsockopt_impl+0x1f6>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	69b9      	ldr	r1, [r7, #24]
 800b806:	4618      	mov	r0, r3
 800b808:	f002 fd76 	bl	800e2f8 <tcp_bind_netif>
              break;
 800b80c:	e00f      	b.n	800b82e <lwip_setsockopt_impl+0x206>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	69b9      	ldr	r1, [r7, #24]
 800b816:	4618      	mov	r0, r3
 800b818:	f008 ffbe 	bl	8014798 <udp_bind_netif>
              break;
 800b81c:	e007      	b.n	800b82e <lwip_setsockopt_impl+0x206>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800b81e:	4b51      	ldr	r3, [pc, #324]	; (800b964 <lwip_setsockopt_impl+0x33c>)
 800b820:	f640 527d 	movw	r2, #3453	; 0xd7d
 800b824:	4950      	ldr	r1, [pc, #320]	; (800b968 <lwip_setsockopt_impl+0x340>)
 800b826:	4851      	ldr	r0, [pc, #324]	; (800b96c <lwip_setsockopt_impl+0x344>)
 800b828:	f00f fd9e 	bl	801b368 <iprintf>
              break;
 800b82c:	bf00      	nop
          }
        }
        break;
 800b82e:	e002      	b.n	800b836 <lwip_setsockopt_impl+0x20e>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800b830:	235c      	movs	r3, #92	; 0x5c
 800b832:	61fb      	str	r3, [r7, #28]
          break;
 800b834:	bf00      	nop
      }  /* switch (optname) */
      break;
 800b836:	e090      	b.n	800b95a <lwip_setsockopt_impl+0x332>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d01a      	beq.n	800b874 <lwip_setsockopt_impl+0x24c>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b02      	cmp	r3, #2
 800b842:	d12f      	bne.n	800b8a4 <lwip_setsockopt_impl+0x27c>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	2b03      	cmp	r3, #3
 800b848:	d801      	bhi.n	800b84e <lwip_setsockopt_impl+0x226>
 800b84a:	2316      	movs	r3, #22
 800b84c:	e086      	b.n	800b95c <lwip_setsockopt_impl+0x334>
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d004      	beq.n	800b860 <lwip_setsockopt_impl+0x238>
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d101      	bne.n	800b864 <lwip_setsockopt_impl+0x23c>
 800b860:	2316      	movs	r3, #22
 800b862:	e07b      	b.n	800b95c <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	b2d2      	uxtb	r2, r2
 800b870:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800b872:	e01a      	b.n	800b8aa <lwip_setsockopt_impl+0x282>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	2b03      	cmp	r3, #3
 800b878:	d801      	bhi.n	800b87e <lwip_setsockopt_impl+0x256>
 800b87a:	2316      	movs	r3, #22
 800b87c:	e06e      	b.n	800b95c <lwip_setsockopt_impl+0x334>
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d004      	beq.n	800b890 <lwip_setsockopt_impl+0x268>
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d101      	bne.n	800b894 <lwip_setsockopt_impl+0x26c>
 800b890:	2316      	movs	r3, #22
 800b892:	e063      	b.n	800b95c <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	b2d2      	uxtb	r2, r2
 800b8a0:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800b8a2:	e002      	b.n	800b8aa <lwip_setsockopt_impl+0x282>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800b8a4:	235c      	movs	r3, #92	; 0x5c
 800b8a6:	61fb      	str	r3, [r7, #28]
          break;
 800b8a8:	bf00      	nop
      }  /* switch (optname) */
      break;
 800b8aa:	e056      	b.n	800b95a <lwip_setsockopt_impl+0x332>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800b8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ae:	2b03      	cmp	r3, #3
 800b8b0:	d801      	bhi.n	800b8b6 <lwip_setsockopt_impl+0x28e>
 800b8b2:	2316      	movs	r3, #22
 800b8b4:	e052      	b.n	800b95c <lwip_setsockopt_impl+0x334>
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d004      	beq.n	800b8c8 <lwip_setsockopt_impl+0x2a0>
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <lwip_setsockopt_impl+0x2a4>
 800b8c8:	2316      	movs	r3, #22
 800b8ca:	e047      	b.n	800b95c <lwip_setsockopt_impl+0x334>
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	781b      	ldrb	r3, [r3, #0]
 800b8d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8d6:	2b10      	cmp	r3, #16
 800b8d8:	d001      	beq.n	800b8de <lwip_setsockopt_impl+0x2b6>
 800b8da:	235c      	movs	r3, #92	; 0x5c
 800b8dc:	e03e      	b.n	800b95c <lwip_setsockopt_impl+0x334>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	7d1b      	ldrb	r3, [r3, #20]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d101      	bne.n	800b8ee <lwip_setsockopt_impl+0x2c6>
        done_socket(sock);
        return EINVAL;
 800b8ea:	2316      	movs	r3, #22
 800b8ec:	e036      	b.n	800b95c <lwip_setsockopt_impl+0x334>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d003      	beq.n	800b8fc <lwip_setsockopt_impl+0x2d4>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d01c      	beq.n	800b934 <lwip_setsockopt_impl+0x30c>
 800b8fa:	e023      	b.n	800b944 <lwip_setsockopt_impl+0x31c>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d00b      	beq.n	800b91c <lwip_setsockopt_impl+0x2f4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	8b5a      	ldrh	r2, [r3, #26]
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b916:	b292      	uxth	r2, r2
 800b918:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800b91a:	e016      	b.n	800b94a <lwip_setsockopt_impl+0x322>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	8b5a      	ldrh	r2, [r3, #26]
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b92e:	b292      	uxth	r2, r2
 800b930:	835a      	strh	r2, [r3, #26]
          break;
 800b932:	e00a      	b.n	800b94a <lwip_setsockopt_impl+0x322>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800b942:	e002      	b.n	800b94a <lwip_setsockopt_impl+0x322>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800b944:	235c      	movs	r3, #92	; 0x5c
 800b946:	61fb      	str	r3, [r7, #28]
          break;
 800b948:	bf00      	nop
      }  /* switch (optname) */
      break;
 800b94a:	e006      	b.n	800b95a <lwip_setsockopt_impl+0x332>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800b94c:	235c      	movs	r3, #92	; 0x5c
 800b94e:	61fb      	str	r3, [r7, #28]
          break;
 800b950:	bf00      	nop
      }  /* switch (optname) */
      break;
 800b952:	e002      	b.n	800b95a <lwip_setsockopt_impl+0x332>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800b954:	235c      	movs	r3, #92	; 0x5c
 800b956:	61fb      	str	r3, [r7, #28]
      break;
 800b958:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800b95a:	69fb      	ldr	r3, [r7, #28]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3720      	adds	r7, #32
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	0801ca88 	.word	0x0801ca88
 800b968:	0801ce2c 	.word	0x0801ce2c
 800b96c:	0801cadc 	.word	0x0801cadc

0800b970 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b97a:	f008 faa1 	bl	8013ec0 <sys_timeouts_sleeptime>
 800b97e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b986:	d10b      	bne.n	800b9a0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b988:	4813      	ldr	r0, [pc, #76]	; (800b9d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b98a:	f00d fbca 	bl	8019122 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b98e:	2200      	movs	r2, #0
 800b990:	6839      	ldr	r1, [r7, #0]
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f00d fa82 	bl	8018e9c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b998:	480f      	ldr	r0, [pc, #60]	; (800b9d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b99a:	f00d fbb3 	bl	8019104 <sys_mutex_lock>
    return;
 800b99e:	e018      	b.n	800b9d2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d102      	bne.n	800b9ac <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b9a6:	f008 fa51 	bl	8013e4c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b9aa:	e7e6      	b.n	800b97a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b9ac:	480a      	ldr	r0, [pc, #40]	; (800b9d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b9ae:	f00d fbb8 	bl	8019122 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f00d fa70 	bl	8018e9c <sys_arch_mbox_fetch>
 800b9bc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b9be:	4806      	ldr	r0, [pc, #24]	; (800b9d8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b9c0:	f00d fba0 	bl	8019104 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ca:	d102      	bne.n	800b9d2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b9cc:	f008 fa3e 	bl	8013e4c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b9d0:	e7d3      	b.n	800b97a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	2001591c 	.word	0x2001591c

0800b9dc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b9e4:	4810      	ldr	r0, [pc, #64]	; (800ba28 <tcpip_thread+0x4c>)
 800b9e6:	f00d fb8d 	bl	8019104 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b9ea:	4b10      	ldr	r3, [pc, #64]	; (800ba2c <tcpip_thread+0x50>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d005      	beq.n	800b9fe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b9f2:	4b0e      	ldr	r3, [pc, #56]	; (800ba2c <tcpip_thread+0x50>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a0e      	ldr	r2, [pc, #56]	; (800ba30 <tcpip_thread+0x54>)
 800b9f8:	6812      	ldr	r2, [r2, #0]
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b9fe:	f107 030c 	add.w	r3, r7, #12
 800ba02:	4619      	mov	r1, r3
 800ba04:	480b      	ldr	r0, [pc, #44]	; (800ba34 <tcpip_thread+0x58>)
 800ba06:	f7ff ffb3 	bl	800b970 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d106      	bne.n	800ba1e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ba10:	4b09      	ldr	r3, [pc, #36]	; (800ba38 <tcpip_thread+0x5c>)
 800ba12:	2291      	movs	r2, #145	; 0x91
 800ba14:	4909      	ldr	r1, [pc, #36]	; (800ba3c <tcpip_thread+0x60>)
 800ba16:	480a      	ldr	r0, [pc, #40]	; (800ba40 <tcpip_thread+0x64>)
 800ba18:	f00f fca6 	bl	801b368 <iprintf>
      continue;
 800ba1c:	e003      	b.n	800ba26 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f000 f80f 	bl	800ba44 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ba26:	e7ea      	b.n	800b9fe <tcpip_thread+0x22>
 800ba28:	2001591c 	.word	0x2001591c
 800ba2c:	20010720 	.word	0x20010720
 800ba30:	20010724 	.word	0x20010724
 800ba34:	20010728 	.word	0x20010728
 800ba38:	0801ce58 	.word	0x0801ce58
 800ba3c:	0801ce88 	.word	0x0801ce88
 800ba40:	0801cea8 	.word	0x0801cea8

0800ba44 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d026      	beq.n	800baa2 <tcpip_thread_handle_msg+0x5e>
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	dc2b      	bgt.n	800bab0 <tcpip_thread_handle_msg+0x6c>
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d002      	beq.n	800ba62 <tcpip_thread_handle_msg+0x1e>
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d015      	beq.n	800ba8c <tcpip_thread_handle_msg+0x48>
 800ba60:	e026      	b.n	800bab0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	6850      	ldr	r0, [r2, #4]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6892      	ldr	r2, [r2, #8]
 800ba6e:	4611      	mov	r1, r2
 800ba70:	4798      	blx	r3
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d004      	beq.n	800ba82 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f001 fd97 	bl	800d5b0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ba82:	6879      	ldr	r1, [r7, #4]
 800ba84:	2009      	movs	r0, #9
 800ba86:	f000 fe79 	bl	800c77c <memp_free>
      break;
 800ba8a:	e018      	b.n	800babe <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	6892      	ldr	r2, [r2, #8]
 800ba94:	4610      	mov	r0, r2
 800ba96:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ba98:	6879      	ldr	r1, [r7, #4]
 800ba9a:	2008      	movs	r0, #8
 800ba9c:	f000 fe6e 	bl	800c77c <memp_free>
      break;
 800baa0:	e00d      	b.n	800babe <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	6892      	ldr	r2, [r2, #8]
 800baaa:	4610      	mov	r0, r2
 800baac:	4798      	blx	r3
      break;
 800baae:	e006      	b.n	800babe <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bab0:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <tcpip_thread_handle_msg+0x84>)
 800bab2:	22cf      	movs	r2, #207	; 0xcf
 800bab4:	4905      	ldr	r1, [pc, #20]	; (800bacc <tcpip_thread_handle_msg+0x88>)
 800bab6:	4806      	ldr	r0, [pc, #24]	; (800bad0 <tcpip_thread_handle_msg+0x8c>)
 800bab8:	f00f fc56 	bl	801b368 <iprintf>
      break;
 800babc:	bf00      	nop
  }
}
 800babe:	bf00      	nop
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	0801ce58 	.word	0x0801ce58
 800bacc:	0801ce88 	.word	0x0801ce88
 800bad0:	0801cea8 	.word	0x0801cea8

0800bad4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bae0:	481a      	ldr	r0, [pc, #104]	; (800bb4c <tcpip_inpkt+0x78>)
 800bae2:	f00d fa36 	bl	8018f52 <sys_mbox_valid>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d105      	bne.n	800baf8 <tcpip_inpkt+0x24>
 800baec:	4b18      	ldr	r3, [pc, #96]	; (800bb50 <tcpip_inpkt+0x7c>)
 800baee:	22fc      	movs	r2, #252	; 0xfc
 800baf0:	4918      	ldr	r1, [pc, #96]	; (800bb54 <tcpip_inpkt+0x80>)
 800baf2:	4819      	ldr	r0, [pc, #100]	; (800bb58 <tcpip_inpkt+0x84>)
 800baf4:	f00f fc38 	bl	801b368 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800baf8:	2009      	movs	r0, #9
 800bafa:	f000 fdc9 	bl	800c690 <memp_malloc>
 800bafe:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d102      	bne.n	800bb0c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800bb06:	f04f 33ff 	mov.w	r3, #4294967295
 800bb0a:	e01a      	b.n	800bb42 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bb24:	6979      	ldr	r1, [r7, #20]
 800bb26:	4809      	ldr	r0, [pc, #36]	; (800bb4c <tcpip_inpkt+0x78>)
 800bb28:	f00d f99e 	bl	8018e68 <sys_mbox_trypost>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d006      	beq.n	800bb40 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bb32:	6979      	ldr	r1, [r7, #20]
 800bb34:	2009      	movs	r0, #9
 800bb36:	f000 fe21 	bl	800c77c <memp_free>
    return ERR_MEM;
 800bb3a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb3e:	e000      	b.n	800bb42 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800bb40:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	20010728 	.word	0x20010728
 800bb50:	0801ce58 	.word	0x0801ce58
 800bb54:	0801ced0 	.word	0x0801ced0
 800bb58:	0801cea8 	.word	0x0801cea8

0800bb5c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb6c:	f003 0318 	and.w	r3, r3, #24
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d006      	beq.n	800bb82 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bb74:	4a08      	ldr	r2, [pc, #32]	; (800bb98 <tcpip_input+0x3c>)
 800bb76:	6839      	ldr	r1, [r7, #0]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f7ff ffab 	bl	800bad4 <tcpip_inpkt>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	e005      	b.n	800bb8e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bb82:	4a06      	ldr	r2, [pc, #24]	; (800bb9c <tcpip_input+0x40>)
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff ffa4 	bl	800bad4 <tcpip_inpkt>
 800bb8c:	4603      	mov	r3, r0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3708      	adds	r7, #8
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	08018c55 	.word	0x08018c55
 800bb9c:	08017a29 	.word	0x08017a29

0800bba0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bbaa:	4819      	ldr	r0, [pc, #100]	; (800bc10 <tcpip_try_callback+0x70>)
 800bbac:	f00d f9d1 	bl	8018f52 <sys_mbox_valid>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d106      	bne.n	800bbc4 <tcpip_try_callback+0x24>
 800bbb6:	4b17      	ldr	r3, [pc, #92]	; (800bc14 <tcpip_try_callback+0x74>)
 800bbb8:	f240 125d 	movw	r2, #349	; 0x15d
 800bbbc:	4916      	ldr	r1, [pc, #88]	; (800bc18 <tcpip_try_callback+0x78>)
 800bbbe:	4817      	ldr	r0, [pc, #92]	; (800bc1c <tcpip_try_callback+0x7c>)
 800bbc0:	f00f fbd2 	bl	801b368 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bbc4:	2008      	movs	r0, #8
 800bbc6:	f000 fd63 	bl	800c690 <memp_malloc>
 800bbca:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d102      	bne.n	800bbd8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800bbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd6:	e017      	b.n	800bc08 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bbea:	68f9      	ldr	r1, [r7, #12]
 800bbec:	4808      	ldr	r0, [pc, #32]	; (800bc10 <tcpip_try_callback+0x70>)
 800bbee:	f00d f93b 	bl	8018e68 <sys_mbox_trypost>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d006      	beq.n	800bc06 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800bbf8:	68f9      	ldr	r1, [r7, #12]
 800bbfa:	2008      	movs	r0, #8
 800bbfc:	f000 fdbe 	bl	800c77c <memp_free>
    return ERR_MEM;
 800bc00:	f04f 33ff 	mov.w	r3, #4294967295
 800bc04:	e000      	b.n	800bc08 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20010728 	.word	0x20010728
 800bc14:	0801ce58 	.word	0x0801ce58
 800bc18:	0801ced0 	.word	0x0801ced0
 800bc1c:	0801cea8 	.word	0x0801cea8

0800bc20 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800bc2c:	4806      	ldr	r0, [pc, #24]	; (800bc48 <tcpip_send_msg_wait_sem+0x28>)
 800bc2e:	f00d fa69 	bl	8019104 <sys_mutex_lock>
  fn(apimsg);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	68b8      	ldr	r0, [r7, #8]
 800bc36:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800bc38:	4803      	ldr	r0, [pc, #12]	; (800bc48 <tcpip_send_msg_wait_sem+0x28>)
 800bc3a:	f00d fa72 	bl	8019122 <sys_mutex_unlock>
  return ERR_OK;
 800bc3e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}
 800bc48:	2001591c 	.word	0x2001591c

0800bc4c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af02      	add	r7, sp, #8
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bc56:	f000 f871 	bl	800bd3c <lwip_init>

  tcpip_init_done = initfunc;
 800bc5a:	4a17      	ldr	r2, [pc, #92]	; (800bcb8 <tcpip_init+0x6c>)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bc60:	4a16      	ldr	r2, [pc, #88]	; (800bcbc <tcpip_init+0x70>)
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bc66:	2106      	movs	r1, #6
 800bc68:	4815      	ldr	r0, [pc, #84]	; (800bcc0 <tcpip_init+0x74>)
 800bc6a:	f00d f8c9 	bl	8018e00 <sys_mbox_new>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d006      	beq.n	800bc82 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bc74:	4b13      	ldr	r3, [pc, #76]	; (800bcc4 <tcpip_init+0x78>)
 800bc76:	f240 2261 	movw	r2, #609	; 0x261
 800bc7a:	4913      	ldr	r1, [pc, #76]	; (800bcc8 <tcpip_init+0x7c>)
 800bc7c:	4813      	ldr	r0, [pc, #76]	; (800bccc <tcpip_init+0x80>)
 800bc7e:	f00f fb73 	bl	801b368 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bc82:	4813      	ldr	r0, [pc, #76]	; (800bcd0 <tcpip_init+0x84>)
 800bc84:	f00d fa22 	bl	80190cc <sys_mutex_new>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d006      	beq.n	800bc9c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bc8e:	4b0d      	ldr	r3, [pc, #52]	; (800bcc4 <tcpip_init+0x78>)
 800bc90:	f240 2265 	movw	r2, #613	; 0x265
 800bc94:	490f      	ldr	r1, [pc, #60]	; (800bcd4 <tcpip_init+0x88>)
 800bc96:	480d      	ldr	r0, [pc, #52]	; (800bccc <tcpip_init+0x80>)
 800bc98:	f00f fb66 	bl	801b368 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bca4:	2200      	movs	r2, #0
 800bca6:	490c      	ldr	r1, [pc, #48]	; (800bcd8 <tcpip_init+0x8c>)
 800bca8:	480c      	ldr	r0, [pc, #48]	; (800bcdc <tcpip_init+0x90>)
 800bcaa:	f00d fa47 	bl	801913c <sys_thread_new>
}
 800bcae:	bf00      	nop
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20010720 	.word	0x20010720
 800bcbc:	20010724 	.word	0x20010724
 800bcc0:	20010728 	.word	0x20010728
 800bcc4:	0801ce58 	.word	0x0801ce58
 800bcc8:	0801cee0 	.word	0x0801cee0
 800bccc:	0801cea8 	.word	0x0801cea8
 800bcd0:	2001591c 	.word	0x2001591c
 800bcd4:	0801cf04 	.word	0x0801cf04
 800bcd8:	0800b9dd 	.word	0x0800b9dd
 800bcdc:	0801cf28 	.word	0x0801cf28

0800bce0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	4603      	mov	r3, r0
 800bce8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bcea:	88fb      	ldrh	r3, [r7, #6]
 800bcec:	021b      	lsls	r3, r3, #8
 800bcee:	b21a      	sxth	r2, r3
 800bcf0:	88fb      	ldrh	r3, [r7, #6]
 800bcf2:	0a1b      	lsrs	r3, r3, #8
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	b21b      	sxth	r3, r3
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	b21b      	sxth	r3, r3
 800bcfc:	b29b      	uxth	r3, r3
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bd0a:	b480      	push	{r7}
 800bd0c:	b083      	sub	sp, #12
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	061a      	lsls	r2, r3, #24
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	021b      	lsls	r3, r3, #8
 800bd1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd28:	431a      	orrs	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	0e1b      	lsrs	r3, r3, #24
 800bd2e:	4313      	orrs	r3, r2
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bd46:	f00d f9b3 	bl	80190b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bd4a:	f000 f8d5 	bl	800bef8 <mem_init>
  memp_init();
 800bd4e:	f000 fc31 	bl	800c5b4 <memp_init>
  pbuf_init();
  netif_init();
 800bd52:	f000 fd3d 	bl	800c7d0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bd56:	f008 f8eb 	bl	8013f30 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bd5a:	f001 fed3 	bl	800db04 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bd5e:	f008 f82d 	bl	8013dbc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bd62:	bf00      	nop
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
	...

0800bd6c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bd76:	4b05      	ldr	r3, [pc, #20]	; (800bd8c <ptr_to_mem+0x20>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	88fb      	ldrh	r3, [r7, #6]
 800bd7c:	4413      	add	r3, r2
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	370c      	adds	r7, #12
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	2001072c 	.word	0x2001072c

0800bd90 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bd98:	4b05      	ldr	r3, [pc, #20]	; (800bdb0 <mem_to_ptr+0x20>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	b29b      	uxth	r3, r3
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	370c      	adds	r7, #12
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	2001072c 	.word	0x2001072c

0800bdb4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bdb4:	b590      	push	{r4, r7, lr}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bdbc:	4b45      	ldr	r3, [pc, #276]	; (800bed4 <plug_holes+0x120>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d206      	bcs.n	800bdd4 <plug_holes+0x20>
 800bdc6:	4b44      	ldr	r3, [pc, #272]	; (800bed8 <plug_holes+0x124>)
 800bdc8:	f240 12df 	movw	r2, #479	; 0x1df
 800bdcc:	4943      	ldr	r1, [pc, #268]	; (800bedc <plug_holes+0x128>)
 800bdce:	4844      	ldr	r0, [pc, #272]	; (800bee0 <plug_holes+0x12c>)
 800bdd0:	f00f faca 	bl	801b368 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bdd4:	4b43      	ldr	r3, [pc, #268]	; (800bee4 <plug_holes+0x130>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d306      	bcc.n	800bdec <plug_holes+0x38>
 800bdde:	4b3e      	ldr	r3, [pc, #248]	; (800bed8 <plug_holes+0x124>)
 800bde0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bde4:	4940      	ldr	r1, [pc, #256]	; (800bee8 <plug_holes+0x134>)
 800bde6:	483e      	ldr	r0, [pc, #248]	; (800bee0 <plug_holes+0x12c>)
 800bde8:	f00f fabe 	bl	801b368 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	791b      	ldrb	r3, [r3, #4]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d006      	beq.n	800be02 <plug_holes+0x4e>
 800bdf4:	4b38      	ldr	r3, [pc, #224]	; (800bed8 <plug_holes+0x124>)
 800bdf6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bdfa:	493c      	ldr	r1, [pc, #240]	; (800beec <plug_holes+0x138>)
 800bdfc:	4838      	ldr	r0, [pc, #224]	; (800bee0 <plug_holes+0x12c>)
 800bdfe:	f00f fab3 	bl	801b368 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be0a:	d906      	bls.n	800be1a <plug_holes+0x66>
 800be0c:	4b32      	ldr	r3, [pc, #200]	; (800bed8 <plug_holes+0x124>)
 800be0e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800be12:	4937      	ldr	r1, [pc, #220]	; (800bef0 <plug_holes+0x13c>)
 800be14:	4832      	ldr	r0, [pc, #200]	; (800bee0 <plug_holes+0x12c>)
 800be16:	f00f faa7 	bl	801b368 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	881b      	ldrh	r3, [r3, #0]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff ffa4 	bl	800bd6c <ptr_to_mem>
 800be24:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d024      	beq.n	800be78 <plug_holes+0xc4>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	791b      	ldrb	r3, [r3, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d120      	bne.n	800be78 <plug_holes+0xc4>
 800be36:	4b2b      	ldr	r3, [pc, #172]	; (800bee4 <plug_holes+0x130>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d01b      	beq.n	800be78 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800be40:	4b2c      	ldr	r3, [pc, #176]	; (800bef4 <plug_holes+0x140>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	429a      	cmp	r2, r3
 800be48:	d102      	bne.n	800be50 <plug_holes+0x9c>
      lfree = mem;
 800be4a:	4a2a      	ldr	r2, [pc, #168]	; (800bef4 <plug_holes+0x140>)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	881a      	ldrh	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	881b      	ldrh	r3, [r3, #0]
 800be5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be60:	d00a      	beq.n	800be78 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff ff80 	bl	800bd6c <ptr_to_mem>
 800be6c:	4604      	mov	r4, r0
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7ff ff8e 	bl	800bd90 <mem_to_ptr>
 800be74:	4603      	mov	r3, r0
 800be76:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	885b      	ldrh	r3, [r3, #2]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff ff75 	bl	800bd6c <ptr_to_mem>
 800be82:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d01f      	beq.n	800becc <plug_holes+0x118>
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	791b      	ldrb	r3, [r3, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d11b      	bne.n	800becc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800be94:	4b17      	ldr	r3, [pc, #92]	; (800bef4 <plug_holes+0x140>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d102      	bne.n	800bea4 <plug_holes+0xf0>
      lfree = pmem;
 800be9e:	4a15      	ldr	r2, [pc, #84]	; (800bef4 <plug_holes+0x140>)
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	881a      	ldrh	r2, [r3, #0]
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800beb4:	d00a      	beq.n	800becc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	881b      	ldrh	r3, [r3, #0]
 800beba:	4618      	mov	r0, r3
 800bebc:	f7ff ff56 	bl	800bd6c <ptr_to_mem>
 800bec0:	4604      	mov	r4, r0
 800bec2:	68b8      	ldr	r0, [r7, #8]
 800bec4:	f7ff ff64 	bl	800bd90 <mem_to_ptr>
 800bec8:	4603      	mov	r3, r0
 800beca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800becc:	bf00      	nop
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd90      	pop	{r4, r7, pc}
 800bed4:	2001072c 	.word	0x2001072c
 800bed8:	0801cf38 	.word	0x0801cf38
 800bedc:	0801cf68 	.word	0x0801cf68
 800bee0:	0801cf80 	.word	0x0801cf80
 800bee4:	20010730 	.word	0x20010730
 800bee8:	0801cfa8 	.word	0x0801cfa8
 800beec:	0801cfc4 	.word	0x0801cfc4
 800bef0:	0801cfe0 	.word	0x0801cfe0
 800bef4:	20010738 	.word	0x20010738

0800bef8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800befe:	4b1f      	ldr	r3, [pc, #124]	; (800bf7c <mem_init+0x84>)
 800bf00:	3303      	adds	r3, #3
 800bf02:	f023 0303 	bic.w	r3, r3, #3
 800bf06:	461a      	mov	r2, r3
 800bf08:	4b1d      	ldr	r3, [pc, #116]	; (800bf80 <mem_init+0x88>)
 800bf0a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bf0c:	4b1c      	ldr	r3, [pc, #112]	; (800bf80 <mem_init+0x88>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bf18:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bf26:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800bf2a:	f7ff ff1f 	bl	800bd6c <ptr_to_mem>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	4a14      	ldr	r2, [pc, #80]	; (800bf84 <mem_init+0x8c>)
 800bf32:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bf34:	4b13      	ldr	r3, [pc, #76]	; (800bf84 <mem_init+0x8c>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bf3c:	4b11      	ldr	r3, [pc, #68]	; (800bf84 <mem_init+0x8c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bf44:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bf46:	4b0f      	ldr	r3, [pc, #60]	; (800bf84 <mem_init+0x8c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bf4e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bf50:	4b0b      	ldr	r3, [pc, #44]	; (800bf80 <mem_init+0x88>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a0c      	ldr	r2, [pc, #48]	; (800bf88 <mem_init+0x90>)
 800bf56:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bf58:	480c      	ldr	r0, [pc, #48]	; (800bf8c <mem_init+0x94>)
 800bf5a:	f00d f8b7 	bl	80190cc <sys_mutex_new>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d006      	beq.n	800bf72 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bf64:	4b0a      	ldr	r3, [pc, #40]	; (800bf90 <mem_init+0x98>)
 800bf66:	f240 221f 	movw	r2, #543	; 0x21f
 800bf6a:	490a      	ldr	r1, [pc, #40]	; (800bf94 <mem_init+0x9c>)
 800bf6c:	480a      	ldr	r0, [pc, #40]	; (800bf98 <mem_init+0xa0>)
 800bf6e:	f00f f9fb 	bl	801b368 <iprintf>
  }
}
 800bf72:	bf00      	nop
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20015938 	.word	0x20015938
 800bf80:	2001072c 	.word	0x2001072c
 800bf84:	20010730 	.word	0x20010730
 800bf88:	20010738 	.word	0x20010738
 800bf8c:	20010734 	.word	0x20010734
 800bf90:	0801cf38 	.word	0x0801cf38
 800bf94:	0801d00c 	.word	0x0801d00c
 800bf98:	0801cf80 	.word	0x0801cf80

0800bf9c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b086      	sub	sp, #24
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f7ff fef3 	bl	800bd90 <mem_to_ptr>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff feda 	bl	800bd6c <ptr_to_mem>
 800bfb8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	885b      	ldrh	r3, [r3, #2]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7ff fed4 	bl	800bd6c <ptr_to_mem>
 800bfc4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	881b      	ldrh	r3, [r3, #0]
 800bfca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfce:	d818      	bhi.n	800c002 <mem_link_valid+0x66>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	885b      	ldrh	r3, [r3, #2]
 800bfd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bfd8:	d813      	bhi.n	800c002 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bfde:	8afa      	ldrh	r2, [r7, #22]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d004      	beq.n	800bfee <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	8afa      	ldrh	r2, [r7, #22]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d109      	bne.n	800c002 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bfee:	4b08      	ldr	r3, [pc, #32]	; (800c010 <mem_link_valid+0x74>)
 800bff0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bff2:	693a      	ldr	r2, [r7, #16]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d006      	beq.n	800c006 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	885b      	ldrh	r3, [r3, #2]
 800bffc:	8afa      	ldrh	r2, [r7, #22]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d001      	beq.n	800c006 <mem_link_valid+0x6a>
    return 0;
 800c002:	2300      	movs	r3, #0
 800c004:	e000      	b.n	800c008 <mem_link_valid+0x6c>
  }
  return 1;
 800c006:	2301      	movs	r3, #1
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	20010730 	.word	0x20010730

0800c014 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b088      	sub	sp, #32
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d070      	beq.n	800c104 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f003 0303 	and.w	r3, r3, #3
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00d      	beq.n	800c048 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c02c:	4b37      	ldr	r3, [pc, #220]	; (800c10c <mem_free+0xf8>)
 800c02e:	f240 2273 	movw	r2, #627	; 0x273
 800c032:	4937      	ldr	r1, [pc, #220]	; (800c110 <mem_free+0xfc>)
 800c034:	4837      	ldr	r0, [pc, #220]	; (800c114 <mem_free+0x100>)
 800c036:	f00f f997 	bl	801b368 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c03a:	f00d f8a5 	bl	8019188 <sys_arch_protect>
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f00d f8af 	bl	80191a4 <sys_arch_unprotect>
    return;
 800c046:	e05e      	b.n	800c106 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	3b08      	subs	r3, #8
 800c04c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c04e:	4b32      	ldr	r3, [pc, #200]	; (800c118 <mem_free+0x104>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	69fa      	ldr	r2, [r7, #28]
 800c054:	429a      	cmp	r2, r3
 800c056:	d306      	bcc.n	800c066 <mem_free+0x52>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f103 020c 	add.w	r2, r3, #12
 800c05e:	4b2f      	ldr	r3, [pc, #188]	; (800c11c <mem_free+0x108>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	429a      	cmp	r2, r3
 800c064:	d90d      	bls.n	800c082 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c066:	4b29      	ldr	r3, [pc, #164]	; (800c10c <mem_free+0xf8>)
 800c068:	f240 227f 	movw	r2, #639	; 0x27f
 800c06c:	492c      	ldr	r1, [pc, #176]	; (800c120 <mem_free+0x10c>)
 800c06e:	4829      	ldr	r0, [pc, #164]	; (800c114 <mem_free+0x100>)
 800c070:	f00f f97a 	bl	801b368 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c074:	f00d f888 	bl	8019188 <sys_arch_protect>
 800c078:	6138      	str	r0, [r7, #16]
 800c07a:	6938      	ldr	r0, [r7, #16]
 800c07c:	f00d f892 	bl	80191a4 <sys_arch_unprotect>
    return;
 800c080:	e041      	b.n	800c106 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c082:	4828      	ldr	r0, [pc, #160]	; (800c124 <mem_free+0x110>)
 800c084:	f00d f83e 	bl	8019104 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	791b      	ldrb	r3, [r3, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d110      	bne.n	800c0b2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c090:	4b1e      	ldr	r3, [pc, #120]	; (800c10c <mem_free+0xf8>)
 800c092:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c096:	4924      	ldr	r1, [pc, #144]	; (800c128 <mem_free+0x114>)
 800c098:	481e      	ldr	r0, [pc, #120]	; (800c114 <mem_free+0x100>)
 800c09a:	f00f f965 	bl	801b368 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c09e:	4821      	ldr	r0, [pc, #132]	; (800c124 <mem_free+0x110>)
 800c0a0:	f00d f83f 	bl	8019122 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c0a4:	f00d f870 	bl	8019188 <sys_arch_protect>
 800c0a8:	6178      	str	r0, [r7, #20]
 800c0aa:	6978      	ldr	r0, [r7, #20]
 800c0ac:	f00d f87a 	bl	80191a4 <sys_arch_unprotect>
    return;
 800c0b0:	e029      	b.n	800c106 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c0b2:	69f8      	ldr	r0, [r7, #28]
 800c0b4:	f7ff ff72 	bl	800bf9c <mem_link_valid>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d110      	bne.n	800c0e0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c0be:	4b13      	ldr	r3, [pc, #76]	; (800c10c <mem_free+0xf8>)
 800c0c0:	f240 2295 	movw	r2, #661	; 0x295
 800c0c4:	4919      	ldr	r1, [pc, #100]	; (800c12c <mem_free+0x118>)
 800c0c6:	4813      	ldr	r0, [pc, #76]	; (800c114 <mem_free+0x100>)
 800c0c8:	f00f f94e 	bl	801b368 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c0cc:	4815      	ldr	r0, [pc, #84]	; (800c124 <mem_free+0x110>)
 800c0ce:	f00d f828 	bl	8019122 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c0d2:	f00d f859 	bl	8019188 <sys_arch_protect>
 800c0d6:	61b8      	str	r0, [r7, #24]
 800c0d8:	69b8      	ldr	r0, [r7, #24]
 800c0da:	f00d f863 	bl	80191a4 <sys_arch_unprotect>
    return;
 800c0de:	e012      	b.n	800c106 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c0e6:	4b12      	ldr	r3, [pc, #72]	; (800c130 <mem_free+0x11c>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	69fa      	ldr	r2, [r7, #28]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d202      	bcs.n	800c0f6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c0f0:	4a0f      	ldr	r2, [pc, #60]	; (800c130 <mem_free+0x11c>)
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c0f6:	69f8      	ldr	r0, [r7, #28]
 800c0f8:	f7ff fe5c 	bl	800bdb4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c0fc:	4809      	ldr	r0, [pc, #36]	; (800c124 <mem_free+0x110>)
 800c0fe:	f00d f810 	bl	8019122 <sys_mutex_unlock>
 800c102:	e000      	b.n	800c106 <mem_free+0xf2>
    return;
 800c104:	bf00      	nop
}
 800c106:	3720      	adds	r7, #32
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	0801cf38 	.word	0x0801cf38
 800c110:	0801d028 	.word	0x0801d028
 800c114:	0801cf80 	.word	0x0801cf80
 800c118:	2001072c 	.word	0x2001072c
 800c11c:	20010730 	.word	0x20010730
 800c120:	0801d04c 	.word	0x0801d04c
 800c124:	20010734 	.word	0x20010734
 800c128:	0801d068 	.word	0x0801d068
 800c12c:	0801d090 	.word	0x0801d090
 800c130:	20010738 	.word	0x20010738

0800c134 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b088      	sub	sp, #32
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	460b      	mov	r3, r1
 800c13e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c140:	887b      	ldrh	r3, [r7, #2]
 800c142:	3303      	adds	r3, #3
 800c144:	b29b      	uxth	r3, r3
 800c146:	f023 0303 	bic.w	r3, r3, #3
 800c14a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c14c:	8bfb      	ldrh	r3, [r7, #30]
 800c14e:	2b0b      	cmp	r3, #11
 800c150:	d801      	bhi.n	800c156 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c152:	230c      	movs	r3, #12
 800c154:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c156:	8bfb      	ldrh	r3, [r7, #30]
 800c158:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c15c:	d803      	bhi.n	800c166 <mem_trim+0x32>
 800c15e:	8bfa      	ldrh	r2, [r7, #30]
 800c160:	887b      	ldrh	r3, [r7, #2]
 800c162:	429a      	cmp	r2, r3
 800c164:	d201      	bcs.n	800c16a <mem_trim+0x36>
    return NULL;
 800c166:	2300      	movs	r3, #0
 800c168:	e0d8      	b.n	800c31c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c16a:	4b6e      	ldr	r3, [pc, #440]	; (800c324 <mem_trim+0x1f0>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	429a      	cmp	r2, r3
 800c172:	d304      	bcc.n	800c17e <mem_trim+0x4a>
 800c174:	4b6c      	ldr	r3, [pc, #432]	; (800c328 <mem_trim+0x1f4>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d306      	bcc.n	800c18c <mem_trim+0x58>
 800c17e:	4b6b      	ldr	r3, [pc, #428]	; (800c32c <mem_trim+0x1f8>)
 800c180:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c184:	496a      	ldr	r1, [pc, #424]	; (800c330 <mem_trim+0x1fc>)
 800c186:	486b      	ldr	r0, [pc, #428]	; (800c334 <mem_trim+0x200>)
 800c188:	f00f f8ee 	bl	801b368 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c18c:	4b65      	ldr	r3, [pc, #404]	; (800c324 <mem_trim+0x1f0>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	429a      	cmp	r2, r3
 800c194:	d304      	bcc.n	800c1a0 <mem_trim+0x6c>
 800c196:	4b64      	ldr	r3, [pc, #400]	; (800c328 <mem_trim+0x1f4>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d307      	bcc.n	800c1b0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c1a0:	f00c fff2 	bl	8019188 <sys_arch_protect>
 800c1a4:	60b8      	str	r0, [r7, #8]
 800c1a6:	68b8      	ldr	r0, [r7, #8]
 800c1a8:	f00c fffc 	bl	80191a4 <sys_arch_unprotect>
    return rmem;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	e0b5      	b.n	800c31c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	3b08      	subs	r3, #8
 800c1b4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c1b6:	69b8      	ldr	r0, [r7, #24]
 800c1b8:	f7ff fdea 	bl	800bd90 <mem_to_ptr>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	881a      	ldrh	r2, [r3, #0]
 800c1c4:	8afb      	ldrh	r3, [r7, #22]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	3b08      	subs	r3, #8
 800c1cc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c1ce:	8bfa      	ldrh	r2, [r7, #30]
 800c1d0:	8abb      	ldrh	r3, [r7, #20]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d906      	bls.n	800c1e4 <mem_trim+0xb0>
 800c1d6:	4b55      	ldr	r3, [pc, #340]	; (800c32c <mem_trim+0x1f8>)
 800c1d8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c1dc:	4956      	ldr	r1, [pc, #344]	; (800c338 <mem_trim+0x204>)
 800c1de:	4855      	ldr	r0, [pc, #340]	; (800c334 <mem_trim+0x200>)
 800c1e0:	f00f f8c2 	bl	801b368 <iprintf>
  if (newsize > size) {
 800c1e4:	8bfa      	ldrh	r2, [r7, #30]
 800c1e6:	8abb      	ldrh	r3, [r7, #20]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d901      	bls.n	800c1f0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	e095      	b.n	800c31c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c1f0:	8bfa      	ldrh	r2, [r7, #30]
 800c1f2:	8abb      	ldrh	r3, [r7, #20]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d101      	bne.n	800c1fc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	e08f      	b.n	800c31c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c1fc:	484f      	ldr	r0, [pc, #316]	; (800c33c <mem_trim+0x208>)
 800c1fe:	f00c ff81 	bl	8019104 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	4618      	mov	r0, r3
 800c208:	f7ff fdb0 	bl	800bd6c <ptr_to_mem>
 800c20c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	791b      	ldrb	r3, [r3, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d13f      	bne.n	800c296 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c216:	69bb      	ldr	r3, [r7, #24]
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c21e:	d106      	bne.n	800c22e <mem_trim+0xfa>
 800c220:	4b42      	ldr	r3, [pc, #264]	; (800c32c <mem_trim+0x1f8>)
 800c222:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c226:	4946      	ldr	r1, [pc, #280]	; (800c340 <mem_trim+0x20c>)
 800c228:	4842      	ldr	r0, [pc, #264]	; (800c334 <mem_trim+0x200>)
 800c22a:	f00f f89d 	bl	801b368 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c234:	8afa      	ldrh	r2, [r7, #22]
 800c236:	8bfb      	ldrh	r3, [r7, #30]
 800c238:	4413      	add	r3, r2
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	3308      	adds	r3, #8
 800c23e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c240:	4b40      	ldr	r3, [pc, #256]	; (800c344 <mem_trim+0x210>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	429a      	cmp	r2, r3
 800c248:	d106      	bne.n	800c258 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c24a:	89fb      	ldrh	r3, [r7, #14]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7ff fd8d 	bl	800bd6c <ptr_to_mem>
 800c252:	4603      	mov	r3, r0
 800c254:	4a3b      	ldr	r2, [pc, #236]	; (800c344 <mem_trim+0x210>)
 800c256:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c258:	89fb      	ldrh	r3, [r7, #14]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7ff fd86 	bl	800bd6c <ptr_to_mem>
 800c260:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2200      	movs	r2, #0
 800c266:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	89ba      	ldrh	r2, [r7, #12]
 800c26c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	8afa      	ldrh	r2, [r7, #22]
 800c272:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	89fa      	ldrh	r2, [r7, #14]
 800c278:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	881b      	ldrh	r3, [r3, #0]
 800c27e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c282:	d047      	beq.n	800c314 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	4618      	mov	r0, r3
 800c28a:	f7ff fd6f 	bl	800bd6c <ptr_to_mem>
 800c28e:	4602      	mov	r2, r0
 800c290:	89fb      	ldrh	r3, [r7, #14]
 800c292:	8053      	strh	r3, [r2, #2]
 800c294:	e03e      	b.n	800c314 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c296:	8bfb      	ldrh	r3, [r7, #30]
 800c298:	f103 0214 	add.w	r2, r3, #20
 800c29c:	8abb      	ldrh	r3, [r7, #20]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d838      	bhi.n	800c314 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c2a2:	8afa      	ldrh	r2, [r7, #22]
 800c2a4:	8bfb      	ldrh	r3, [r7, #30]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	3308      	adds	r3, #8
 800c2ac:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	881b      	ldrh	r3, [r3, #0]
 800c2b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2b6:	d106      	bne.n	800c2c6 <mem_trim+0x192>
 800c2b8:	4b1c      	ldr	r3, [pc, #112]	; (800c32c <mem_trim+0x1f8>)
 800c2ba:	f240 3216 	movw	r2, #790	; 0x316
 800c2be:	4920      	ldr	r1, [pc, #128]	; (800c340 <mem_trim+0x20c>)
 800c2c0:	481c      	ldr	r0, [pc, #112]	; (800c334 <mem_trim+0x200>)
 800c2c2:	f00f f851 	bl	801b368 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c2c6:	89fb      	ldrh	r3, [r7, #14]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff fd4f 	bl	800bd6c <ptr_to_mem>
 800c2ce:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c2d0:	4b1c      	ldr	r3, [pc, #112]	; (800c344 <mem_trim+0x210>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d202      	bcs.n	800c2e0 <mem_trim+0x1ac>
      lfree = mem2;
 800c2da:	4a1a      	ldr	r2, [pc, #104]	; (800c344 <mem_trim+0x210>)
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	881a      	ldrh	r2, [r3, #0]
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	8afa      	ldrh	r2, [r7, #22]
 800c2f2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	89fa      	ldrh	r2, [r7, #14]
 800c2f8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c302:	d007      	beq.n	800c314 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	4618      	mov	r0, r3
 800c30a:	f7ff fd2f 	bl	800bd6c <ptr_to_mem>
 800c30e:	4602      	mov	r2, r0
 800c310:	89fb      	ldrh	r3, [r7, #14]
 800c312:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c314:	4809      	ldr	r0, [pc, #36]	; (800c33c <mem_trim+0x208>)
 800c316:	f00c ff04 	bl	8019122 <sys_mutex_unlock>
  return rmem;
 800c31a:	687b      	ldr	r3, [r7, #4]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3720      	adds	r7, #32
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	2001072c 	.word	0x2001072c
 800c328:	20010730 	.word	0x20010730
 800c32c:	0801cf38 	.word	0x0801cf38
 800c330:	0801d0c4 	.word	0x0801d0c4
 800c334:	0801cf80 	.word	0x0801cf80
 800c338:	0801d0dc 	.word	0x0801d0dc
 800c33c:	20010734 	.word	0x20010734
 800c340:	0801d0fc 	.word	0x0801d0fc
 800c344:	20010738 	.word	0x20010738

0800c348 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c352:	88fb      	ldrh	r3, [r7, #6]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d101      	bne.n	800c35c <mem_malloc+0x14>
    return NULL;
 800c358:	2300      	movs	r3, #0
 800c35a:	e0e2      	b.n	800c522 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c35c:	88fb      	ldrh	r3, [r7, #6]
 800c35e:	3303      	adds	r3, #3
 800c360:	b29b      	uxth	r3, r3
 800c362:	f023 0303 	bic.w	r3, r3, #3
 800c366:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c368:	8bbb      	ldrh	r3, [r7, #28]
 800c36a:	2b0b      	cmp	r3, #11
 800c36c:	d801      	bhi.n	800c372 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c36e:	230c      	movs	r3, #12
 800c370:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c372:	8bbb      	ldrh	r3, [r7, #28]
 800c374:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c378:	d803      	bhi.n	800c382 <mem_malloc+0x3a>
 800c37a:	8bba      	ldrh	r2, [r7, #28]
 800c37c:	88fb      	ldrh	r3, [r7, #6]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d201      	bcs.n	800c386 <mem_malloc+0x3e>
    return NULL;
 800c382:	2300      	movs	r3, #0
 800c384:	e0cd      	b.n	800c522 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c386:	4869      	ldr	r0, [pc, #420]	; (800c52c <mem_malloc+0x1e4>)
 800c388:	f00c febc 	bl	8019104 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c38c:	4b68      	ldr	r3, [pc, #416]	; (800c530 <mem_malloc+0x1e8>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	4618      	mov	r0, r3
 800c392:	f7ff fcfd 	bl	800bd90 <mem_to_ptr>
 800c396:	4603      	mov	r3, r0
 800c398:	83fb      	strh	r3, [r7, #30]
 800c39a:	e0b7      	b.n	800c50c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c39c:	8bfb      	ldrh	r3, [r7, #30]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff fce4 	bl	800bd6c <ptr_to_mem>
 800c3a4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	791b      	ldrb	r3, [r3, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f040 80a7 	bne.w	800c4fe <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	8bfb      	ldrh	r3, [r7, #30]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	f1a3 0208 	sub.w	r2, r3, #8
 800c3be:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	f0c0 809c 	bcc.w	800c4fe <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	8bfb      	ldrh	r3, [r7, #30]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	f1a3 0208 	sub.w	r2, r3, #8
 800c3d4:	8bbb      	ldrh	r3, [r7, #28]
 800c3d6:	3314      	adds	r3, #20
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d333      	bcc.n	800c444 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c3dc:	8bfa      	ldrh	r2, [r7, #30]
 800c3de:	8bbb      	ldrh	r3, [r7, #28]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c3e8:	8a7b      	ldrh	r3, [r7, #18]
 800c3ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3ee:	d106      	bne.n	800c3fe <mem_malloc+0xb6>
 800c3f0:	4b50      	ldr	r3, [pc, #320]	; (800c534 <mem_malloc+0x1ec>)
 800c3f2:	f240 3287 	movw	r2, #903	; 0x387
 800c3f6:	4950      	ldr	r1, [pc, #320]	; (800c538 <mem_malloc+0x1f0>)
 800c3f8:	4850      	ldr	r0, [pc, #320]	; (800c53c <mem_malloc+0x1f4>)
 800c3fa:	f00e ffb5 	bl	801b368 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c3fe:	8a7b      	ldrh	r3, [r7, #18]
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff fcb3 	bl	800bd6c <ptr_to_mem>
 800c406:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2200      	movs	r2, #0
 800c40c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	881a      	ldrh	r2, [r3, #0]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	8bfa      	ldrh	r2, [r7, #30]
 800c41a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	8a7a      	ldrh	r2, [r7, #18]
 800c420:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	2201      	movs	r2, #1
 800c426:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	881b      	ldrh	r3, [r3, #0]
 800c42c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c430:	d00b      	beq.n	800c44a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	881b      	ldrh	r3, [r3, #0]
 800c436:	4618      	mov	r0, r3
 800c438:	f7ff fc98 	bl	800bd6c <ptr_to_mem>
 800c43c:	4602      	mov	r2, r0
 800c43e:	8a7b      	ldrh	r3, [r7, #18]
 800c440:	8053      	strh	r3, [r2, #2]
 800c442:	e002      	b.n	800c44a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2201      	movs	r2, #1
 800c448:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c44a:	4b39      	ldr	r3, [pc, #228]	; (800c530 <mem_malloc+0x1e8>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	429a      	cmp	r2, r3
 800c452:	d127      	bne.n	800c4a4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c454:	4b36      	ldr	r3, [pc, #216]	; (800c530 <mem_malloc+0x1e8>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c45a:	e005      	b.n	800c468 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c45c:	69bb      	ldr	r3, [r7, #24]
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	4618      	mov	r0, r3
 800c462:	f7ff fc83 	bl	800bd6c <ptr_to_mem>
 800c466:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	791b      	ldrb	r3, [r3, #4]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d004      	beq.n	800c47a <mem_malloc+0x132>
 800c470:	4b33      	ldr	r3, [pc, #204]	; (800c540 <mem_malloc+0x1f8>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	69ba      	ldr	r2, [r7, #24]
 800c476:	429a      	cmp	r2, r3
 800c478:	d1f0      	bne.n	800c45c <mem_malloc+0x114>
          }
          lfree = cur;
 800c47a:	4a2d      	ldr	r2, [pc, #180]	; (800c530 <mem_malloc+0x1e8>)
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c480:	4b2b      	ldr	r3, [pc, #172]	; (800c530 <mem_malloc+0x1e8>)
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	4b2e      	ldr	r3, [pc, #184]	; (800c540 <mem_malloc+0x1f8>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d00b      	beq.n	800c4a4 <mem_malloc+0x15c>
 800c48c:	4b28      	ldr	r3, [pc, #160]	; (800c530 <mem_malloc+0x1e8>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	791b      	ldrb	r3, [r3, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d006      	beq.n	800c4a4 <mem_malloc+0x15c>
 800c496:	4b27      	ldr	r3, [pc, #156]	; (800c534 <mem_malloc+0x1ec>)
 800c498:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c49c:	4929      	ldr	r1, [pc, #164]	; (800c544 <mem_malloc+0x1fc>)
 800c49e:	4827      	ldr	r0, [pc, #156]	; (800c53c <mem_malloc+0x1f4>)
 800c4a0:	f00e ff62 	bl	801b368 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c4a4:	4821      	ldr	r0, [pc, #132]	; (800c52c <mem_malloc+0x1e4>)
 800c4a6:	f00c fe3c 	bl	8019122 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c4aa:	8bba      	ldrh	r2, [r7, #28]
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	3308      	adds	r3, #8
 800c4b2:	4a23      	ldr	r2, [pc, #140]	; (800c540 <mem_malloc+0x1f8>)
 800c4b4:	6812      	ldr	r2, [r2, #0]
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d906      	bls.n	800c4c8 <mem_malloc+0x180>
 800c4ba:	4b1e      	ldr	r3, [pc, #120]	; (800c534 <mem_malloc+0x1ec>)
 800c4bc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c4c0:	4921      	ldr	r1, [pc, #132]	; (800c548 <mem_malloc+0x200>)
 800c4c2:	481e      	ldr	r0, [pc, #120]	; (800c53c <mem_malloc+0x1f4>)
 800c4c4:	f00e ff50 	bl	801b368 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	f003 0303 	and.w	r3, r3, #3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d006      	beq.n	800c4e0 <mem_malloc+0x198>
 800c4d2:	4b18      	ldr	r3, [pc, #96]	; (800c534 <mem_malloc+0x1ec>)
 800c4d4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c4d8:	491c      	ldr	r1, [pc, #112]	; (800c54c <mem_malloc+0x204>)
 800c4da:	4818      	ldr	r0, [pc, #96]	; (800c53c <mem_malloc+0x1f4>)
 800c4dc:	f00e ff44 	bl	801b368 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	f003 0303 	and.w	r3, r3, #3
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d006      	beq.n	800c4f8 <mem_malloc+0x1b0>
 800c4ea:	4b12      	ldr	r3, [pc, #72]	; (800c534 <mem_malloc+0x1ec>)
 800c4ec:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c4f0:	4917      	ldr	r1, [pc, #92]	; (800c550 <mem_malloc+0x208>)
 800c4f2:	4812      	ldr	r0, [pc, #72]	; (800c53c <mem_malloc+0x1f4>)
 800c4f4:	f00e ff38 	bl	801b368 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	3308      	adds	r3, #8
 800c4fc:	e011      	b.n	800c522 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c4fe:	8bfb      	ldrh	r3, [r7, #30]
 800c500:	4618      	mov	r0, r3
 800c502:	f7ff fc33 	bl	800bd6c <ptr_to_mem>
 800c506:	4603      	mov	r3, r0
 800c508:	881b      	ldrh	r3, [r3, #0]
 800c50a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c50c:	8bfa      	ldrh	r2, [r7, #30]
 800c50e:	8bbb      	ldrh	r3, [r7, #28]
 800c510:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c514:	429a      	cmp	r2, r3
 800c516:	f4ff af41 	bcc.w	800c39c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c51a:	4804      	ldr	r0, [pc, #16]	; (800c52c <mem_malloc+0x1e4>)
 800c51c:	f00c fe01 	bl	8019122 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3720      	adds	r7, #32
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20010734 	.word	0x20010734
 800c530:	20010738 	.word	0x20010738
 800c534:	0801cf38 	.word	0x0801cf38
 800c538:	0801d0fc 	.word	0x0801d0fc
 800c53c:	0801cf80 	.word	0x0801cf80
 800c540:	20010730 	.word	0x20010730
 800c544:	0801d110 	.word	0x0801d110
 800c548:	0801d12c 	.word	0x0801d12c
 800c54c:	0801d15c 	.word	0x0801d15c
 800c550:	0801d18c 	.word	0x0801d18c

0800c554 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	689b      	ldr	r3, [r3, #8]
 800c560:	2200      	movs	r2, #0
 800c562:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	3303      	adds	r3, #3
 800c56a:	f023 0303 	bic.w	r3, r3, #3
 800c56e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c570:	2300      	movs	r3, #0
 800c572:	60fb      	str	r3, [r7, #12]
 800c574:	e011      	b.n	800c59a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	68ba      	ldr	r2, [r7, #8]
 800c586:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	881b      	ldrh	r3, [r3, #0]
 800c58c:	461a      	mov	r2, r3
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	4413      	add	r3, r2
 800c592:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	3301      	adds	r3, #1
 800c598:	60fb      	str	r3, [r7, #12]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	885b      	ldrh	r3, [r3, #2]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	dbe7      	blt.n	800c576 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c5a6:	bf00      	nop
 800c5a8:	bf00      	nop
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	80fb      	strh	r3, [r7, #6]
 800c5be:	e009      	b.n	800c5d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c5c0:	88fb      	ldrh	r3, [r7, #6]
 800c5c2:	4a08      	ldr	r2, [pc, #32]	; (800c5e4 <memp_init+0x30>)
 800c5c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff ffc3 	bl	800c554 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c5ce:	88fb      	ldrh	r3, [r7, #6]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	80fb      	strh	r3, [r7, #6]
 800c5d4:	88fb      	ldrh	r3, [r7, #6]
 800c5d6:	2b0c      	cmp	r3, #12
 800c5d8:	d9f2      	bls.n	800c5c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c5da:	bf00      	nop
 800c5dc:	bf00      	nop
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	0801ff50 	.word	0x0801ff50

0800c5e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c5f0:	f00c fdca 	bl	8019188 <sys_arch_protect>
 800c5f4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d015      	beq.n	800c630 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	6812      	ldr	r2, [r2, #0]
 800c60c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	f003 0303 	and.w	r3, r3, #3
 800c614:	2b00      	cmp	r3, #0
 800c616:	d006      	beq.n	800c626 <do_memp_malloc_pool+0x3e>
 800c618:	4b09      	ldr	r3, [pc, #36]	; (800c640 <do_memp_malloc_pool+0x58>)
 800c61a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c61e:	4909      	ldr	r1, [pc, #36]	; (800c644 <do_memp_malloc_pool+0x5c>)
 800c620:	4809      	ldr	r0, [pc, #36]	; (800c648 <do_memp_malloc_pool+0x60>)
 800c622:	f00e fea1 	bl	801b368 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f00c fdbc 	bl	80191a4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	e003      	b.n	800c638 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f00c fdb7 	bl	80191a4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c636:	2300      	movs	r3, #0
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	0801d1b0 	.word	0x0801d1b0
 800c644:	0801d1e0 	.word	0x0801d1e0
 800c648:	0801d204 	.word	0x0801d204

0800c64c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b082      	sub	sp, #8
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <memp_malloc_pool+0x1c>
 800c65a:	4b0a      	ldr	r3, [pc, #40]	; (800c684 <memp_malloc_pool+0x38>)
 800c65c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c660:	4909      	ldr	r1, [pc, #36]	; (800c688 <memp_malloc_pool+0x3c>)
 800c662:	480a      	ldr	r0, [pc, #40]	; (800c68c <memp_malloc_pool+0x40>)
 800c664:	f00e fe80 	bl	801b368 <iprintf>
  if (desc == NULL) {
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <memp_malloc_pool+0x26>
    return NULL;
 800c66e:	2300      	movs	r3, #0
 800c670:	e003      	b.n	800c67a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f7ff ffb8 	bl	800c5e8 <do_memp_malloc_pool>
 800c678:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	0801d1b0 	.word	0x0801d1b0
 800c688:	0801d22c 	.word	0x0801d22c
 800c68c:	0801d204 	.word	0x0801d204

0800c690 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c69a:	79fb      	ldrb	r3, [r7, #7]
 800c69c:	2b0c      	cmp	r3, #12
 800c69e:	d908      	bls.n	800c6b2 <memp_malloc+0x22>
 800c6a0:	4b0a      	ldr	r3, [pc, #40]	; (800c6cc <memp_malloc+0x3c>)
 800c6a2:	f240 1257 	movw	r2, #343	; 0x157
 800c6a6:	490a      	ldr	r1, [pc, #40]	; (800c6d0 <memp_malloc+0x40>)
 800c6a8:	480a      	ldr	r0, [pc, #40]	; (800c6d4 <memp_malloc+0x44>)
 800c6aa:	f00e fe5d 	bl	801b368 <iprintf>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e008      	b.n	800c6c4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c6b2:	79fb      	ldrb	r3, [r7, #7]
 800c6b4:	4a08      	ldr	r2, [pc, #32]	; (800c6d8 <memp_malloc+0x48>)
 800c6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7ff ff94 	bl	800c5e8 <do_memp_malloc_pool>
 800c6c0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	0801d1b0 	.word	0x0801d1b0
 800c6d0:	0801d240 	.word	0x0801d240
 800c6d4:	0801d204 	.word	0x0801d204
 800c6d8:	0801ff50 	.word	0x0801ff50

0800c6dc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	f003 0303 	and.w	r3, r3, #3
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d006      	beq.n	800c6fe <do_memp_free_pool+0x22>
 800c6f0:	4b0d      	ldr	r3, [pc, #52]	; (800c728 <do_memp_free_pool+0x4c>)
 800c6f2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c6f6:	490d      	ldr	r1, [pc, #52]	; (800c72c <do_memp_free_pool+0x50>)
 800c6f8:	480d      	ldr	r0, [pc, #52]	; (800c730 <do_memp_free_pool+0x54>)
 800c6fa:	f00e fe35 	bl	801b368 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c702:	f00c fd41 	bl	8019188 <sys_arch_protect>
 800c706:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c71a:	68b8      	ldr	r0, [r7, #8]
 800c71c:	f00c fd42 	bl	80191a4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c720:	bf00      	nop
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	0801d1b0 	.word	0x0801d1b0
 800c72c:	0801d260 	.word	0x0801d260
 800c730:	0801d204 	.word	0x0801d204

0800c734 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d106      	bne.n	800c752 <memp_free_pool+0x1e>
 800c744:	4b0a      	ldr	r3, [pc, #40]	; (800c770 <memp_free_pool+0x3c>)
 800c746:	f240 1295 	movw	r2, #405	; 0x195
 800c74a:	490a      	ldr	r1, [pc, #40]	; (800c774 <memp_free_pool+0x40>)
 800c74c:	480a      	ldr	r0, [pc, #40]	; (800c778 <memp_free_pool+0x44>)
 800c74e:	f00e fe0b 	bl	801b368 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d007      	beq.n	800c768 <memp_free_pool+0x34>
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d004      	beq.n	800c768 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff ffbb 	bl	800c6dc <do_memp_free_pool>
 800c766:	e000      	b.n	800c76a <memp_free_pool+0x36>
    return;
 800c768:	bf00      	nop
}
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	0801d1b0 	.word	0x0801d1b0
 800c774:	0801d22c 	.word	0x0801d22c
 800c778:	0801d204 	.word	0x0801d204

0800c77c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b082      	sub	sp, #8
 800c780:	af00      	add	r7, sp, #0
 800c782:	4603      	mov	r3, r0
 800c784:	6039      	str	r1, [r7, #0]
 800c786:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c788:	79fb      	ldrb	r3, [r7, #7]
 800c78a:	2b0c      	cmp	r3, #12
 800c78c:	d907      	bls.n	800c79e <memp_free+0x22>
 800c78e:	4b0c      	ldr	r3, [pc, #48]	; (800c7c0 <memp_free+0x44>)
 800c790:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c794:	490b      	ldr	r1, [pc, #44]	; (800c7c4 <memp_free+0x48>)
 800c796:	480c      	ldr	r0, [pc, #48]	; (800c7c8 <memp_free+0x4c>)
 800c798:	f00e fde6 	bl	801b368 <iprintf>
 800c79c:	e00c      	b.n	800c7b8 <memp_free+0x3c>

  if (mem == NULL) {
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d008      	beq.n	800c7b6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c7a4:	79fb      	ldrb	r3, [r7, #7]
 800c7a6:	4a09      	ldr	r2, [pc, #36]	; (800c7cc <memp_free+0x50>)
 800c7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ac:	6839      	ldr	r1, [r7, #0]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7ff ff94 	bl	800c6dc <do_memp_free_pool>
 800c7b4:	e000      	b.n	800c7b8 <memp_free+0x3c>
    return;
 800c7b6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	0801d1b0 	.word	0x0801d1b0
 800c7c4:	0801d280 	.word	0x0801d280
 800c7c8:	0801d204 	.word	0x0801d204
 800c7cc:	0801ff50 	.word	0x0801ff50

0800c7d0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c7d4:	bf00      	nop
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
	...

0800c7e0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
 800c7ec:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d108      	bne.n	800c806 <netif_add+0x26>
 800c7f4:	4b5b      	ldr	r3, [pc, #364]	; (800c964 <netif_add+0x184>)
 800c7f6:	f240 1227 	movw	r2, #295	; 0x127
 800c7fa:	495b      	ldr	r1, [pc, #364]	; (800c968 <netif_add+0x188>)
 800c7fc:	485b      	ldr	r0, [pc, #364]	; (800c96c <netif_add+0x18c>)
 800c7fe:	f00e fdb3 	bl	801b368 <iprintf>
 800c802:	2300      	movs	r3, #0
 800c804:	e0a9      	b.n	800c95a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d108      	bne.n	800c81e <netif_add+0x3e>
 800c80c:	4b55      	ldr	r3, [pc, #340]	; (800c964 <netif_add+0x184>)
 800c80e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c812:	4957      	ldr	r1, [pc, #348]	; (800c970 <netif_add+0x190>)
 800c814:	4855      	ldr	r0, [pc, #340]	; (800c96c <netif_add+0x18c>)
 800c816:	f00e fda7 	bl	801b368 <iprintf>
 800c81a:	2300      	movs	r3, #0
 800c81c:	e09d      	b.n	800c95a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d101      	bne.n	800c828 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c824:	4b53      	ldr	r3, [pc, #332]	; (800c974 <netif_add+0x194>)
 800c826:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c82e:	4b51      	ldr	r3, [pc, #324]	; (800c974 <netif_add+0x194>)
 800c830:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d101      	bne.n	800c83c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c838:	4b4e      	ldr	r3, [pc, #312]	; (800c974 <netif_add+0x194>)
 800c83a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	2200      	movs	r2, #0
 800c840:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2200      	movs	r2, #0
 800c846:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	4a49      	ldr	r2, [pc, #292]	; (800c978 <netif_add+0x198>)
 800c852:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2200      	movs	r2, #0
 800c858:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3324      	adds	r3, #36	; 0x24
 800c866:	2204      	movs	r2, #4
 800c868:	2100      	movs	r1, #0
 800c86a:	4618      	mov	r0, r3
 800c86c:	f00e f9dc 	bl	801ac28 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2200      	movs	r2, #0
 800c874:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a3a      	ldr	r2, [r7, #32]
 800c87a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c87c:	4b3f      	ldr	r3, [pc, #252]	; (800c97c <netif_add+0x19c>)
 800c87e:	781a      	ldrb	r2, [r3, #0]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c88a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	68b9      	ldr	r1, [r7, #8]
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f000 f914 	bl	800cac0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	4798      	blx	r3
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d001      	beq.n	800c8a8 <netif_add+0xc8>
    return NULL;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	e058      	b.n	800c95a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8ae:	2bff      	cmp	r3, #255	; 0xff
 800c8b0:	d103      	bne.n	800c8ba <netif_add+0xda>
        netif->num = 0;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c8be:	4b30      	ldr	r3, [pc, #192]	; (800c980 <netif_add+0x1a0>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	617b      	str	r3, [r7, #20]
 800c8c4:	e02b      	b.n	800c91e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c8c6:	697a      	ldr	r2, [r7, #20]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d106      	bne.n	800c8dc <netif_add+0xfc>
 800c8ce:	4b25      	ldr	r3, [pc, #148]	; (800c964 <netif_add+0x184>)
 800c8d0:	f240 128b 	movw	r2, #395	; 0x18b
 800c8d4:	492b      	ldr	r1, [pc, #172]	; (800c984 <netif_add+0x1a4>)
 800c8d6:	4825      	ldr	r0, [pc, #148]	; (800c96c <netif_add+0x18c>)
 800c8d8:	f00e fd46 	bl	801b368 <iprintf>
        num_netifs++;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	3301      	adds	r3, #1
 800c8e0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	2bff      	cmp	r3, #255	; 0xff
 800c8e6:	dd06      	ble.n	800c8f6 <netif_add+0x116>
 800c8e8:	4b1e      	ldr	r3, [pc, #120]	; (800c964 <netif_add+0x184>)
 800c8ea:	f240 128d 	movw	r2, #397	; 0x18d
 800c8ee:	4926      	ldr	r1, [pc, #152]	; (800c988 <netif_add+0x1a8>)
 800c8f0:	481e      	ldr	r0, [pc, #120]	; (800c96c <netif_add+0x18c>)
 800c8f2:	f00e fd39 	bl	801b368 <iprintf>
        if (netif2->num == netif->num) {
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c902:	429a      	cmp	r2, r3
 800c904:	d108      	bne.n	800c918 <netif_add+0x138>
          netif->num++;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c90c:	3301      	adds	r3, #1
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c916:	e005      	b.n	800c924 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	617b      	str	r3, [r7, #20]
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1d0      	bne.n	800c8c6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1be      	bne.n	800c8a8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c930:	2bfe      	cmp	r3, #254	; 0xfe
 800c932:	d103      	bne.n	800c93c <netif_add+0x15c>
    netif_num = 0;
 800c934:	4b11      	ldr	r3, [pc, #68]	; (800c97c <netif_add+0x19c>)
 800c936:	2200      	movs	r2, #0
 800c938:	701a      	strb	r2, [r3, #0]
 800c93a:	e006      	b.n	800c94a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c942:	3301      	adds	r3, #1
 800c944:	b2da      	uxtb	r2, r3
 800c946:	4b0d      	ldr	r3, [pc, #52]	; (800c97c <netif_add+0x19c>)
 800c948:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c94a:	4b0d      	ldr	r3, [pc, #52]	; (800c980 <netif_add+0x1a0>)
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c952:	4a0b      	ldr	r2, [pc, #44]	; (800c980 <netif_add+0x1a0>)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c958:	68fb      	ldr	r3, [r7, #12]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3718      	adds	r7, #24
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	0801d29c 	.word	0x0801d29c
 800c968:	0801d330 	.word	0x0801d330
 800c96c:	0801d2ec 	.word	0x0801d2ec
 800c970:	0801d34c 	.word	0x0801d34c
 800c974:	0801ffd4 	.word	0x0801ffd4
 800c978:	0800cda3 	.word	0x0800cda3
 800c97c:	20010770 	.word	0x20010770
 800c980:	20019044 	.word	0x20019044
 800c984:	0801d370 	.word	0x0801d370
 800c988:	0801d384 	.word	0x0801d384

0800c98c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f002 fee7 	bl	800f76c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c99e:	6839      	ldr	r1, [r7, #0]
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f008 f807 	bl	80149b4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c9a6:	bf00      	nop
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
	...

0800c9b0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d106      	bne.n	800c9d0 <netif_do_set_ipaddr+0x20>
 800c9c2:	4b1d      	ldr	r3, [pc, #116]	; (800ca38 <netif_do_set_ipaddr+0x88>)
 800c9c4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c9c8:	491c      	ldr	r1, [pc, #112]	; (800ca3c <netif_do_set_ipaddr+0x8c>)
 800c9ca:	481d      	ldr	r0, [pc, #116]	; (800ca40 <netif_do_set_ipaddr+0x90>)
 800c9cc:	f00e fccc 	bl	801b368 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d106      	bne.n	800c9e4 <netif_do_set_ipaddr+0x34>
 800c9d6:	4b18      	ldr	r3, [pc, #96]	; (800ca38 <netif_do_set_ipaddr+0x88>)
 800c9d8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c9dc:	4917      	ldr	r1, [pc, #92]	; (800ca3c <netif_do_set_ipaddr+0x8c>)
 800c9de:	4818      	ldr	r0, [pc, #96]	; (800ca40 <netif_do_set_ipaddr+0x90>)
 800c9e0:	f00e fcc2 	bl	801b368 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3304      	adds	r3, #4
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d01c      	beq.n	800ca2c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ca02:	f107 0314 	add.w	r3, r7, #20
 800ca06:	4619      	mov	r1, r3
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7ff ffbf 	bl	800c98c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <netif_do_set_ipaddr+0x6a>
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	e000      	b.n	800ca1c <netif_do_set_ipaddr+0x6c>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ca20:	2101      	movs	r1, #1
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f000 f8d2 	bl	800cbcc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e000      	b.n	800ca2e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ca2c:	2300      	movs	r3, #0
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	0801d29c 	.word	0x0801d29c
 800ca3c:	0801d3b4 	.word	0x0801d3b4
 800ca40:	0801d2ec 	.word	0x0801d2ec

0800ca44 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	3308      	adds	r3, #8
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d00a      	beq.n	800ca74 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d002      	beq.n	800ca6a <netif_do_set_netmask+0x26>
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	e000      	b.n	800ca6c <netif_do_set_netmask+0x28>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ca70:	2301      	movs	r3, #1
 800ca72:	e000      	b.n	800ca76 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3714      	adds	r7, #20
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr

0800ca82 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ca82:	b480      	push	{r7}
 800ca84:	b085      	sub	sp, #20
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	60f8      	str	r0, [r7, #12]
 800ca8a:	60b9      	str	r1, [r7, #8]
 800ca8c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	330c      	adds	r3, #12
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d00a      	beq.n	800cab2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d002      	beq.n	800caa8 <netif_do_set_gw+0x26>
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	e000      	b.n	800caaa <netif_do_set_gw+0x28>
 800caa8:	2300      	movs	r3, #0
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800caae:	2301      	movs	r3, #1
 800cab0:	e000      	b.n	800cab4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
 800cacc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cace:	2300      	movs	r3, #0
 800cad0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cad2:	2300      	movs	r3, #0
 800cad4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d101      	bne.n	800cae0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cadc:	4b1c      	ldr	r3, [pc, #112]	; (800cb50 <netif_set_addr+0x90>)
 800cade:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d101      	bne.n	800caea <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cae6:	4b1a      	ldr	r3, [pc, #104]	; (800cb50 <netif_set_addr+0x90>)
 800cae8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d101      	bne.n	800caf4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800caf0:	4b17      	ldr	r3, [pc, #92]	; (800cb50 <netif_set_addr+0x90>)
 800caf2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <netif_set_addr+0x42>
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d101      	bne.n	800cb06 <netif_set_addr+0x46>
 800cb02:	2301      	movs	r3, #1
 800cb04:	e000      	b.n	800cb08 <netif_set_addr+0x48>
 800cb06:	2300      	movs	r3, #0
 800cb08:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d006      	beq.n	800cb1e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cb10:	f107 0310 	add.w	r3, r7, #16
 800cb14:	461a      	mov	r2, r3
 800cb16:	68b9      	ldr	r1, [r7, #8]
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f7ff ff49 	bl	800c9b0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cb1e:	69fa      	ldr	r2, [r7, #28]
 800cb20:	6879      	ldr	r1, [r7, #4]
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f7ff ff8e 	bl	800ca44 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cb28:	69ba      	ldr	r2, [r7, #24]
 800cb2a:	6839      	ldr	r1, [r7, #0]
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f7ff ffa8 	bl	800ca82 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d106      	bne.n	800cb46 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cb38:	f107 0310 	add.w	r3, r7, #16
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	68b9      	ldr	r1, [r7, #8]
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f7ff ff35 	bl	800c9b0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cb46:	bf00      	nop
 800cb48:	3720      	adds	r7, #32
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	0801ffd4 	.word	0x0801ffd4

0800cb54 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cb5c:	4a04      	ldr	r2, [pc, #16]	; (800cb70 <netif_set_default+0x1c>)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cb62:	bf00      	nop
 800cb64:	370c      	adds	r7, #12
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	20019048 	.word	0x20019048

0800cb74 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d107      	bne.n	800cb92 <netif_set_up+0x1e>
 800cb82:	4b0f      	ldr	r3, [pc, #60]	; (800cbc0 <netif_set_up+0x4c>)
 800cb84:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cb88:	490e      	ldr	r1, [pc, #56]	; (800cbc4 <netif_set_up+0x50>)
 800cb8a:	480f      	ldr	r0, [pc, #60]	; (800cbc8 <netif_set_up+0x54>)
 800cb8c:	f00e fbec 	bl	801b368 <iprintf>
 800cb90:	e013      	b.n	800cbba <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb98:	f003 0301 	and.w	r3, r3, #1
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10c      	bne.n	800cbba <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cba6:	f043 0301 	orr.w	r3, r3, #1
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cbb2:	2103      	movs	r1, #3
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f809 	bl	800cbcc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}
 800cbc0:	0801d29c 	.word	0x0801d29c
 800cbc4:	0801d424 	.word	0x0801d424
 800cbc8:	0801d2ec 	.word	0x0801d2ec

0800cbcc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d106      	bne.n	800cbec <netif_issue_reports+0x20>
 800cbde:	4b18      	ldr	r3, [pc, #96]	; (800cc40 <netif_issue_reports+0x74>)
 800cbe0:	f240 326d 	movw	r2, #877	; 0x36d
 800cbe4:	4917      	ldr	r1, [pc, #92]	; (800cc44 <netif_issue_reports+0x78>)
 800cbe6:	4818      	ldr	r0, [pc, #96]	; (800cc48 <netif_issue_reports+0x7c>)
 800cbe8:	f00e fbbe 	bl	801b368 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cbf2:	f003 0304 	and.w	r3, r3, #4
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d01e      	beq.n	800cc38 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc00:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d017      	beq.n	800cc38 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cc08:	78fb      	ldrb	r3, [r7, #3]
 800cc0a:	f003 0301 	and.w	r3, r3, #1
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d013      	beq.n	800cc3a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	3304      	adds	r3, #4
 800cc16:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00e      	beq.n	800cc3a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc22:	f003 0308 	and.w	r3, r3, #8
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d007      	beq.n	800cc3a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	3304      	adds	r3, #4
 800cc2e:	4619      	mov	r1, r3
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f00a fcbf 	bl	80175b4 <etharp_request>
 800cc36:	e000      	b.n	800cc3a <netif_issue_reports+0x6e>
    return;
 800cc38:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	0801d29c 	.word	0x0801d29c
 800cc44:	0801d440 	.word	0x0801d440
 800cc48:	0801d2ec 	.word	0x0801d2ec

0800cc4c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d107      	bne.n	800cc6a <netif_set_down+0x1e>
 800cc5a:	4b12      	ldr	r3, [pc, #72]	; (800cca4 <netif_set_down+0x58>)
 800cc5c:	f240 329b 	movw	r2, #923	; 0x39b
 800cc60:	4911      	ldr	r1, [pc, #68]	; (800cca8 <netif_set_down+0x5c>)
 800cc62:	4812      	ldr	r0, [pc, #72]	; (800ccac <netif_set_down+0x60>)
 800cc64:	f00e fb80 	bl	801b368 <iprintf>
 800cc68:	e019      	b.n	800cc9e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc70:	f003 0301 	and.w	r3, r3, #1
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d012      	beq.n	800cc9e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc7e:	f023 0301 	bic.w	r3, r3, #1
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc90:	f003 0308 	and.w	r3, r3, #8
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d002      	beq.n	800cc9e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f00a f845 	bl	8016d28 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	0801d29c 	.word	0x0801d29c
 800cca8:	0801d464 	.word	0x0801d464
 800ccac:	0801d2ec 	.word	0x0801d2ec

0800ccb0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d107      	bne.n	800ccce <netif_set_link_up+0x1e>
 800ccbe:	4b15      	ldr	r3, [pc, #84]	; (800cd14 <netif_set_link_up+0x64>)
 800ccc0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ccc4:	4914      	ldr	r1, [pc, #80]	; (800cd18 <netif_set_link_up+0x68>)
 800ccc6:	4815      	ldr	r0, [pc, #84]	; (800cd1c <netif_set_link_up+0x6c>)
 800ccc8:	f00e fb4e 	bl	801b368 <iprintf>
 800cccc:	e01e      	b.n	800cd0c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ccd4:	f003 0304 	and.w	r3, r3, #4
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d117      	bne.n	800cd0c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cce2:	f043 0304 	orr.w	r3, r3, #4
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f008 fa8a 	bl	8015208 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ccf4:	2103      	movs	r1, #3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7ff ff68 	bl	800cbcc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	69db      	ldr	r3, [r3, #28]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d003      	beq.n	800cd0c <netif_set_link_up+0x5c>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	69db      	ldr	r3, [r3, #28]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	0801d29c 	.word	0x0801d29c
 800cd18:	0801d484 	.word	0x0801d484
 800cd1c:	0801d2ec 	.word	0x0801d2ec

0800cd20 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d107      	bne.n	800cd3e <netif_set_link_down+0x1e>
 800cd2e:	4b11      	ldr	r3, [pc, #68]	; (800cd74 <netif_set_link_down+0x54>)
 800cd30:	f240 4206 	movw	r2, #1030	; 0x406
 800cd34:	4910      	ldr	r1, [pc, #64]	; (800cd78 <netif_set_link_down+0x58>)
 800cd36:	4811      	ldr	r0, [pc, #68]	; (800cd7c <netif_set_link_down+0x5c>)
 800cd38:	f00e fb16 	bl	801b368 <iprintf>
 800cd3c:	e017      	b.n	800cd6e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd44:	f003 0304 	and.w	r3, r3, #4
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d010      	beq.n	800cd6e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd52:	f023 0304 	bic.w	r3, r3, #4
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	69db      	ldr	r3, [r3, #28]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <netif_set_link_down+0x4e>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	69db      	ldr	r3, [r3, #28]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	0801d29c 	.word	0x0801d29c
 800cd78:	0801d4a8 	.word	0x0801d4a8
 800cd7c:	0801d2ec 	.word	0x0801d2ec

0800cd80 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	61da      	str	r2, [r3, #28]
  }
}
 800cd96:	bf00      	nop
 800cd98:	370c      	adds	r7, #12
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr

0800cda2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cda2:	b480      	push	{r7}
 800cda4:	b085      	sub	sp, #20
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	60f8      	str	r0, [r7, #12]
 800cdaa:	60b9      	str	r1, [r7, #8]
 800cdac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cdae:	f06f 030b 	mvn.w	r3, #11
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
	...

0800cdc0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cdca:	79fb      	ldrb	r3, [r7, #7]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d013      	beq.n	800cdf8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cdd0:	4b0d      	ldr	r3, [pc, #52]	; (800ce08 <netif_get_by_index+0x48>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	60fb      	str	r3, [r7, #12]
 800cdd6:	e00c      	b.n	800cdf2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cdde:	3301      	adds	r3, #1
 800cde0:	b2db      	uxtb	r3, r3
 800cde2:	79fa      	ldrb	r2, [r7, #7]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d101      	bne.n	800cdec <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	e006      	b.n	800cdfa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	60fb      	str	r3, [r7, #12]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1ef      	bne.n	800cdd8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	20019044 	.word	0x20019044

0800ce0c <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d101      	bne.n	800ce1e <netif_find+0x12>
    return NULL;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e028      	b.n	800ce70 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	3302      	adds	r3, #2
 800ce22:	4618      	mov	r0, r3
 800ce24:	f00d fd86 	bl	801a934 <atoi>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 800ce2c:	4b12      	ldr	r3, [pc, #72]	; (800ce78 <netif_find+0x6c>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	60fb      	str	r3, [r7, #12]
 800ce32:	e019      	b.n	800ce68 <netif_find+0x5c>
    if (num == netif->num &&
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce3a:	7afa      	ldrb	r2, [r7, #11]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d110      	bne.n	800ce62 <netif_find+0x56>
        name[0] == netif->name[0] &&
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	781a      	ldrb	r2, [r3, #0]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if (num == netif->num &&
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d109      	bne.n	800ce62 <netif_find+0x56>
        name[1] == netif->name[1]) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	3301      	adds	r3, #1
 800ce52:	781a      	ldrb	r2, [r3, #0]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
        name[0] == netif->name[0] &&
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d101      	bne.n	800ce62 <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	e006      	b.n	800ce70 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1e2      	bne.n	800ce34 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 800ce6e:	2300      	movs	r3, #0
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	20019044 	.word	0x20019044

0800ce7c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ce82:	f00c f981 	bl	8019188 <sys_arch_protect>
 800ce86:	6038      	str	r0, [r7, #0]
 800ce88:	4b0d      	ldr	r3, [pc, #52]	; (800cec0 <pbuf_free_ooseq+0x44>)
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	701a      	strb	r2, [r3, #0]
 800ce8e:	6838      	ldr	r0, [r7, #0]
 800ce90:	f00c f988 	bl	80191a4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ce94:	4b0b      	ldr	r3, [pc, #44]	; (800cec4 <pbuf_free_ooseq+0x48>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	607b      	str	r3, [r7, #4]
 800ce9a:	e00a      	b.n	800ceb2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d003      	beq.n	800ceac <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f002 fc9f 	bl	800f7e8 <tcp_free_ooseq>
      return;
 800ceaa:	e005      	b.n	800ceb8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	607b      	str	r3, [r7, #4]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1f1      	bne.n	800ce9c <pbuf_free_ooseq+0x20>
    }
  }
}
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	2001904c 	.word	0x2001904c
 800cec4:	20019054 	.word	0x20019054

0800cec8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ced0:	f7ff ffd4 	bl	800ce7c <pbuf_free_ooseq>
}
 800ced4:	bf00      	nop
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cee2:	f00c f951 	bl	8019188 <sys_arch_protect>
 800cee6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cee8:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <pbuf_pool_is_empty+0x4c>)
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ceee:	4b0e      	ldr	r3, [pc, #56]	; (800cf28 <pbuf_pool_is_empty+0x4c>)
 800cef0:	2201      	movs	r2, #1
 800cef2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f00c f955 	bl	80191a4 <sys_arch_unprotect>

  if (!queued) {
 800cefa:	78fb      	ldrb	r3, [r7, #3]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10f      	bne.n	800cf20 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cf00:	2100      	movs	r1, #0
 800cf02:	480a      	ldr	r0, [pc, #40]	; (800cf2c <pbuf_pool_is_empty+0x50>)
 800cf04:	f7fe fe4c 	bl	800bba0 <tcpip_try_callback>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d008      	beq.n	800cf20 <pbuf_pool_is_empty+0x44>
 800cf0e:	f00c f93b 	bl	8019188 <sys_arch_protect>
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	4b04      	ldr	r3, [pc, #16]	; (800cf28 <pbuf_pool_is_empty+0x4c>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	701a      	strb	r2, [r3, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f00c f942 	bl	80191a4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	2001904c 	.word	0x2001904c
 800cf2c:	0800cec9 	.word	0x0800cec9

0800cf30 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	4611      	mov	r1, r2
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	460b      	mov	r3, r1
 800cf40:	80fb      	strh	r3, [r7, #6]
 800cf42:	4613      	mov	r3, r2
 800cf44:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	88fa      	ldrh	r2, [r7, #6]
 800cf56:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	88ba      	ldrh	r2, [r7, #4]
 800cf5c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cf5e:	8b3b      	ldrh	r3, [r7, #24]
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	7f3a      	ldrb	r2, [r7, #28]
 800cf6a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	73da      	strb	r2, [r3, #15]
}
 800cf78:	bf00      	nop
 800cf7a:	3714      	adds	r7, #20
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b08c      	sub	sp, #48	; 0x30
 800cf88:	af02      	add	r7, sp, #8
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	71fb      	strb	r3, [r7, #7]
 800cf8e:	460b      	mov	r3, r1
 800cf90:	80bb      	strh	r3, [r7, #4]
 800cf92:	4613      	mov	r3, r2
 800cf94:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cf96:	79fb      	ldrb	r3, [r7, #7]
 800cf98:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cf9a:	887b      	ldrh	r3, [r7, #2]
 800cf9c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cfa0:	d07f      	beq.n	800d0a2 <pbuf_alloc+0x11e>
 800cfa2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cfa6:	f300 80c8 	bgt.w	800d13a <pbuf_alloc+0x1b6>
 800cfaa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cfae:	d010      	beq.n	800cfd2 <pbuf_alloc+0x4e>
 800cfb0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cfb4:	f300 80c1 	bgt.w	800d13a <pbuf_alloc+0x1b6>
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d002      	beq.n	800cfc2 <pbuf_alloc+0x3e>
 800cfbc:	2b41      	cmp	r3, #65	; 0x41
 800cfbe:	f040 80bc 	bne.w	800d13a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cfc2:	887a      	ldrh	r2, [r7, #2]
 800cfc4:	88bb      	ldrh	r3, [r7, #4]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	2000      	movs	r0, #0
 800cfca:	f000 f8d1 	bl	800d170 <pbuf_alloc_reference>
 800cfce:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cfd0:	e0bd      	b.n	800d14e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cfda:	88bb      	ldrh	r3, [r7, #4]
 800cfdc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cfde:	200c      	movs	r0, #12
 800cfe0:	f7ff fb56 	bl	800c690 <memp_malloc>
 800cfe4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d109      	bne.n	800d000 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cfec:	f7ff ff76 	bl	800cedc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <pbuf_alloc+0x78>
            pbuf_free(p);
 800cff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cff8:	f000 fada 	bl	800d5b0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cffc:	2300      	movs	r3, #0
 800cffe:	e0a7      	b.n	800d150 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d002:	3303      	adds	r3, #3
 800d004:	b29b      	uxth	r3, r3
 800d006:	f023 0303 	bic.w	r3, r3, #3
 800d00a:	b29b      	uxth	r3, r3
 800d00c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d010:	b29b      	uxth	r3, r3
 800d012:	8b7a      	ldrh	r2, [r7, #26]
 800d014:	4293      	cmp	r3, r2
 800d016:	bf28      	it	cs
 800d018:	4613      	movcs	r3, r2
 800d01a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d01c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d01e:	3310      	adds	r3, #16
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	4413      	add	r3, r2
 800d024:	3303      	adds	r3, #3
 800d026:	f023 0303 	bic.w	r3, r3, #3
 800d02a:	4618      	mov	r0, r3
 800d02c:	89f9      	ldrh	r1, [r7, #14]
 800d02e:	8b7a      	ldrh	r2, [r7, #26]
 800d030:	2300      	movs	r3, #0
 800d032:	9301      	str	r3, [sp, #4]
 800d034:	887b      	ldrh	r3, [r7, #2]
 800d036:	9300      	str	r3, [sp, #0]
 800d038:	460b      	mov	r3, r1
 800d03a:	4601      	mov	r1, r0
 800d03c:	6938      	ldr	r0, [r7, #16]
 800d03e:	f7ff ff77 	bl	800cf30 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	f003 0303 	and.w	r3, r3, #3
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d006      	beq.n	800d05c <pbuf_alloc+0xd8>
 800d04e:	4b42      	ldr	r3, [pc, #264]	; (800d158 <pbuf_alloc+0x1d4>)
 800d050:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d054:	4941      	ldr	r1, [pc, #260]	; (800d15c <pbuf_alloc+0x1d8>)
 800d056:	4842      	ldr	r0, [pc, #264]	; (800d160 <pbuf_alloc+0x1dc>)
 800d058:	f00e f986 	bl	801b368 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d05c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d05e:	3303      	adds	r3, #3
 800d060:	f023 0303 	bic.w	r3, r3, #3
 800d064:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d068:	d106      	bne.n	800d078 <pbuf_alloc+0xf4>
 800d06a:	4b3b      	ldr	r3, [pc, #236]	; (800d158 <pbuf_alloc+0x1d4>)
 800d06c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d070:	493c      	ldr	r1, [pc, #240]	; (800d164 <pbuf_alloc+0x1e0>)
 800d072:	483b      	ldr	r0, [pc, #236]	; (800d160 <pbuf_alloc+0x1dc>)
 800d074:	f00e f978 	bl	801b368 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d102      	bne.n	800d084 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	627b      	str	r3, [r7, #36]	; 0x24
 800d082:	e002      	b.n	800d08a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	693a      	ldr	r2, [r7, #16]
 800d088:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d08e:	8b7a      	ldrh	r2, [r7, #26]
 800d090:	89fb      	ldrh	r3, [r7, #14]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d09a:	8b7b      	ldrh	r3, [r7, #26]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d19e      	bne.n	800cfde <pbuf_alloc+0x5a>
      break;
 800d0a0:	e055      	b.n	800d14e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d0a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0a4:	3303      	adds	r3, #3
 800d0a6:	b29b      	uxth	r3, r3
 800d0a8:	f023 0303 	bic.w	r3, r3, #3
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	88bb      	ldrh	r3, [r7, #4]
 800d0b0:	3303      	adds	r3, #3
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	f023 0303 	bic.w	r3, r3, #3
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	4413      	add	r3, r2
 800d0bc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d0be:	8b3b      	ldrh	r3, [r7, #24]
 800d0c0:	3310      	adds	r3, #16
 800d0c2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d0c4:	8b3a      	ldrh	r2, [r7, #24]
 800d0c6:	88bb      	ldrh	r3, [r7, #4]
 800d0c8:	3303      	adds	r3, #3
 800d0ca:	f023 0303 	bic.w	r3, r3, #3
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d306      	bcc.n	800d0e0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d0d2:	8afa      	ldrh	r2, [r7, #22]
 800d0d4:	88bb      	ldrh	r3, [r7, #4]
 800d0d6:	3303      	adds	r3, #3
 800d0d8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d201      	bcs.n	800d0e4 <pbuf_alloc+0x160>
        return NULL;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	e035      	b.n	800d150 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d0e4:	8afb      	ldrh	r3, [r7, #22]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7ff f92e 	bl	800c348 <mem_malloc>
 800d0ec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d101      	bne.n	800d0f8 <pbuf_alloc+0x174>
        return NULL;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	e02b      	b.n	800d150 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d0f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0fa:	3310      	adds	r3, #16
 800d0fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0fe:	4413      	add	r3, r2
 800d100:	3303      	adds	r3, #3
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	4618      	mov	r0, r3
 800d108:	88b9      	ldrh	r1, [r7, #4]
 800d10a:	88ba      	ldrh	r2, [r7, #4]
 800d10c:	2300      	movs	r3, #0
 800d10e:	9301      	str	r3, [sp, #4]
 800d110:	887b      	ldrh	r3, [r7, #2]
 800d112:	9300      	str	r3, [sp, #0]
 800d114:	460b      	mov	r3, r1
 800d116:	4601      	mov	r1, r0
 800d118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d11a:	f7ff ff09 	bl	800cf30 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	f003 0303 	and.w	r3, r3, #3
 800d126:	2b00      	cmp	r3, #0
 800d128:	d010      	beq.n	800d14c <pbuf_alloc+0x1c8>
 800d12a:	4b0b      	ldr	r3, [pc, #44]	; (800d158 <pbuf_alloc+0x1d4>)
 800d12c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d130:	490d      	ldr	r1, [pc, #52]	; (800d168 <pbuf_alloc+0x1e4>)
 800d132:	480b      	ldr	r0, [pc, #44]	; (800d160 <pbuf_alloc+0x1dc>)
 800d134:	f00e f918 	bl	801b368 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d138:	e008      	b.n	800d14c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d13a:	4b07      	ldr	r3, [pc, #28]	; (800d158 <pbuf_alloc+0x1d4>)
 800d13c:	f240 1227 	movw	r2, #295	; 0x127
 800d140:	490a      	ldr	r1, [pc, #40]	; (800d16c <pbuf_alloc+0x1e8>)
 800d142:	4807      	ldr	r0, [pc, #28]	; (800d160 <pbuf_alloc+0x1dc>)
 800d144:	f00e f910 	bl	801b368 <iprintf>
      return NULL;
 800d148:	2300      	movs	r3, #0
 800d14a:	e001      	b.n	800d150 <pbuf_alloc+0x1cc>
      break;
 800d14c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d150:	4618      	mov	r0, r3
 800d152:	3728      	adds	r7, #40	; 0x28
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	0801d4cc 	.word	0x0801d4cc
 800d15c:	0801d4fc 	.word	0x0801d4fc
 800d160:	0801d52c 	.word	0x0801d52c
 800d164:	0801d554 	.word	0x0801d554
 800d168:	0801d588 	.word	0x0801d588
 800d16c:	0801d5b4 	.word	0x0801d5b4

0800d170 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af02      	add	r7, sp, #8
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	807b      	strh	r3, [r7, #2]
 800d17c:	4613      	mov	r3, r2
 800d17e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d180:	883b      	ldrh	r3, [r7, #0]
 800d182:	2b41      	cmp	r3, #65	; 0x41
 800d184:	d009      	beq.n	800d19a <pbuf_alloc_reference+0x2a>
 800d186:	883b      	ldrh	r3, [r7, #0]
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d006      	beq.n	800d19a <pbuf_alloc_reference+0x2a>
 800d18c:	4b0f      	ldr	r3, [pc, #60]	; (800d1cc <pbuf_alloc_reference+0x5c>)
 800d18e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d192:	490f      	ldr	r1, [pc, #60]	; (800d1d0 <pbuf_alloc_reference+0x60>)
 800d194:	480f      	ldr	r0, [pc, #60]	; (800d1d4 <pbuf_alloc_reference+0x64>)
 800d196:	f00e f8e7 	bl	801b368 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d19a:	200b      	movs	r0, #11
 800d19c:	f7ff fa78 	bl	800c690 <memp_malloc>
 800d1a0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d101      	bne.n	800d1ac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e00b      	b.n	800d1c4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d1ac:	8879      	ldrh	r1, [r7, #2]
 800d1ae:	887a      	ldrh	r2, [r7, #2]
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	9301      	str	r3, [sp, #4]
 800d1b4:	883b      	ldrh	r3, [r7, #0]
 800d1b6:	9300      	str	r3, [sp, #0]
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	6879      	ldr	r1, [r7, #4]
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f7ff feb7 	bl	800cf30 <pbuf_init_alloced_pbuf>
  return p;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}
 800d1cc:	0801d4cc 	.word	0x0801d4cc
 800d1d0:	0801d5d0 	.word	0x0801d5d0
 800d1d4:	0801d52c 	.word	0x0801d52c

0800d1d8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b088      	sub	sp, #32
 800d1dc:	af02      	add	r7, sp, #8
 800d1de:	607b      	str	r3, [r7, #4]
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73fb      	strb	r3, [r7, #15]
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	81bb      	strh	r3, [r7, #12]
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d1f0:	8a7b      	ldrh	r3, [r7, #18]
 800d1f2:	3303      	adds	r3, #3
 800d1f4:	f023 0203 	bic.w	r2, r3, #3
 800d1f8:	89bb      	ldrh	r3, [r7, #12]
 800d1fa:	441a      	add	r2, r3
 800d1fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d901      	bls.n	800d206 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d202:	2300      	movs	r3, #0
 800d204:	e018      	b.n	800d238 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d007      	beq.n	800d21c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d20c:	8a7b      	ldrh	r3, [r7, #18]
 800d20e:	3303      	adds	r3, #3
 800d210:	f023 0303 	bic.w	r3, r3, #3
 800d214:	6a3a      	ldr	r2, [r7, #32]
 800d216:	4413      	add	r3, r2
 800d218:	617b      	str	r3, [r7, #20]
 800d21a:	e001      	b.n	800d220 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d21c:	2300      	movs	r3, #0
 800d21e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	89b9      	ldrh	r1, [r7, #12]
 800d224:	89ba      	ldrh	r2, [r7, #12]
 800d226:	2302      	movs	r3, #2
 800d228:	9301      	str	r3, [sp, #4]
 800d22a:	897b      	ldrh	r3, [r7, #10]
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	460b      	mov	r3, r1
 800d230:	6979      	ldr	r1, [r7, #20]
 800d232:	f7ff fe7d 	bl	800cf30 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d236:	687b      	ldr	r3, [r7, #4]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3718      	adds	r7, #24
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b084      	sub	sp, #16
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	460b      	mov	r3, r1
 800d24a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <pbuf_realloc+0x20>
 800d252:	4b3a      	ldr	r3, [pc, #232]	; (800d33c <pbuf_realloc+0xfc>)
 800d254:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d258:	4939      	ldr	r1, [pc, #228]	; (800d340 <pbuf_realloc+0x100>)
 800d25a:	483a      	ldr	r0, [pc, #232]	; (800d344 <pbuf_realloc+0x104>)
 800d25c:	f00e f884 	bl	801b368 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	891b      	ldrh	r3, [r3, #8]
 800d264:	887a      	ldrh	r2, [r7, #2]
 800d266:	429a      	cmp	r2, r3
 800d268:	d263      	bcs.n	800d332 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	891a      	ldrh	r2, [r3, #8]
 800d26e:	887b      	ldrh	r3, [r7, #2]
 800d270:	1ad3      	subs	r3, r2, r3
 800d272:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d274:	887b      	ldrh	r3, [r7, #2]
 800d276:	817b      	strh	r3, [r7, #10]
  q = p;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d27c:	e018      	b.n	800d2b0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	895b      	ldrh	r3, [r3, #10]
 800d282:	897a      	ldrh	r2, [r7, #10]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	891a      	ldrh	r2, [r3, #8]
 800d28c:	893b      	ldrh	r3, [r7, #8]
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	b29a      	uxth	r2, r3
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d106      	bne.n	800d2b0 <pbuf_realloc+0x70>
 800d2a2:	4b26      	ldr	r3, [pc, #152]	; (800d33c <pbuf_realloc+0xfc>)
 800d2a4:	f240 12af 	movw	r2, #431	; 0x1af
 800d2a8:	4927      	ldr	r1, [pc, #156]	; (800d348 <pbuf_realloc+0x108>)
 800d2aa:	4826      	ldr	r0, [pc, #152]	; (800d344 <pbuf_realloc+0x104>)
 800d2ac:	f00e f85c 	bl	801b368 <iprintf>
  while (rem_len > q->len) {
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	895b      	ldrh	r3, [r3, #10]
 800d2b4:	897a      	ldrh	r2, [r7, #10]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d8e1      	bhi.n	800d27e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	7b1b      	ldrb	r3, [r3, #12]
 800d2be:	f003 030f 	and.w	r3, r3, #15
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d121      	bne.n	800d30a <pbuf_realloc+0xca>
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	895b      	ldrh	r3, [r3, #10]
 800d2ca:	897a      	ldrh	r2, [r7, #10]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d01c      	beq.n	800d30a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	7b5b      	ldrb	r3, [r3, #13]
 800d2d4:	f003 0302 	and.w	r3, r3, #2
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d116      	bne.n	800d30a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	897b      	ldrh	r3, [r7, #10]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f7fe ff20 	bl	800c134 <mem_trim>
 800d2f4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d106      	bne.n	800d30a <pbuf_realloc+0xca>
 800d2fc:	4b0f      	ldr	r3, [pc, #60]	; (800d33c <pbuf_realloc+0xfc>)
 800d2fe:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d302:	4912      	ldr	r1, [pc, #72]	; (800d34c <pbuf_realloc+0x10c>)
 800d304:	480f      	ldr	r0, [pc, #60]	; (800d344 <pbuf_realloc+0x104>)
 800d306:	f00e f82f 	bl	801b368 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	897a      	ldrh	r2, [r7, #10]
 800d30e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	895a      	ldrh	r2, [r3, #10]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d004      	beq.n	800d32a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4618      	mov	r0, r3
 800d326:	f000 f943 	bl	800d5b0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	601a      	str	r2, [r3, #0]
 800d330:	e000      	b.n	800d334 <pbuf_realloc+0xf4>
    return;
 800d332:	bf00      	nop

}
 800d334:	3710      	adds	r7, #16
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	0801d4cc 	.word	0x0801d4cc
 800d340:	0801d5e4 	.word	0x0801d5e4
 800d344:	0801d52c 	.word	0x0801d52c
 800d348:	0801d5fc 	.word	0x0801d5fc
 800d34c:	0801d614 	.word	0x0801d614

0800d350 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	4613      	mov	r3, r2
 800d35c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d106      	bne.n	800d372 <pbuf_add_header_impl+0x22>
 800d364:	4b2b      	ldr	r3, [pc, #172]	; (800d414 <pbuf_add_header_impl+0xc4>)
 800d366:	f240 12df 	movw	r2, #479	; 0x1df
 800d36a:	492b      	ldr	r1, [pc, #172]	; (800d418 <pbuf_add_header_impl+0xc8>)
 800d36c:	482b      	ldr	r0, [pc, #172]	; (800d41c <pbuf_add_header_impl+0xcc>)
 800d36e:	f00d fffb 	bl	801b368 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d003      	beq.n	800d380 <pbuf_add_header_impl+0x30>
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d37e:	d301      	bcc.n	800d384 <pbuf_add_header_impl+0x34>
    return 1;
 800d380:	2301      	movs	r3, #1
 800d382:	e043      	b.n	800d40c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d101      	bne.n	800d38e <pbuf_add_header_impl+0x3e>
    return 0;
 800d38a:	2300      	movs	r3, #0
 800d38c:	e03e      	b.n	800d40c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	891a      	ldrh	r2, [r3, #8]
 800d396:	8a7b      	ldrh	r3, [r7, #18]
 800d398:	4413      	add	r3, r2
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	8a7a      	ldrh	r2, [r7, #18]
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d901      	bls.n	800d3a6 <pbuf_add_header_impl+0x56>
    return 1;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e032      	b.n	800d40c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	7b1b      	ldrb	r3, [r3, #12]
 800d3aa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d3ac:	8a3b      	ldrh	r3, [r7, #16]
 800d3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00c      	beq.n	800d3d0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	685a      	ldr	r2, [r3, #4]
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	425b      	negs	r3, r3
 800d3be:	4413      	add	r3, r2
 800d3c0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	3310      	adds	r3, #16
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d20d      	bcs.n	800d3e8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e01d      	b.n	800d40c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d3d0:	79fb      	ldrb	r3, [r7, #7]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d006      	beq.n	800d3e4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	685a      	ldr	r2, [r3, #4]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	425b      	negs	r3, r3
 800d3de:	4413      	add	r3, r2
 800d3e0:	617b      	str	r3, [r7, #20]
 800d3e2:	e001      	b.n	800d3e8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e011      	b.n	800d40c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	697a      	ldr	r2, [r7, #20]
 800d3ec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	895a      	ldrh	r2, [r3, #10]
 800d3f2:	8a7b      	ldrh	r3, [r7, #18]
 800d3f4:	4413      	add	r3, r2
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	891a      	ldrh	r2, [r3, #8]
 800d400:	8a7b      	ldrh	r3, [r7, #18]
 800d402:	4413      	add	r3, r2
 800d404:	b29a      	uxth	r2, r3
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	811a      	strh	r2, [r3, #8]


  return 0;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	0801d4cc 	.word	0x0801d4cc
 800d418:	0801d630 	.word	0x0801d630
 800d41c:	0801d52c 	.word	0x0801d52c

0800d420 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d42a:	2200      	movs	r2, #0
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7ff ff8e 	bl	800d350 <pbuf_add_header_impl>
 800d434:	4603      	mov	r3, r0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
	...

0800d440 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d106      	bne.n	800d45e <pbuf_remove_header+0x1e>
 800d450:	4b20      	ldr	r3, [pc, #128]	; (800d4d4 <pbuf_remove_header+0x94>)
 800d452:	f240 224b 	movw	r2, #587	; 0x24b
 800d456:	4920      	ldr	r1, [pc, #128]	; (800d4d8 <pbuf_remove_header+0x98>)
 800d458:	4820      	ldr	r0, [pc, #128]	; (800d4dc <pbuf_remove_header+0x9c>)
 800d45a:	f00d ff85 	bl	801b368 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d003      	beq.n	800d46c <pbuf_remove_header+0x2c>
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d46a:	d301      	bcc.n	800d470 <pbuf_remove_header+0x30>
    return 1;
 800d46c:	2301      	movs	r3, #1
 800d46e:	e02c      	b.n	800d4ca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <pbuf_remove_header+0x3a>
    return 0;
 800d476:	2300      	movs	r3, #0
 800d478:	e027      	b.n	800d4ca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	895b      	ldrh	r3, [r3, #10]
 800d482:	89fa      	ldrh	r2, [r7, #14]
 800d484:	429a      	cmp	r2, r3
 800d486:	d908      	bls.n	800d49a <pbuf_remove_header+0x5a>
 800d488:	4b12      	ldr	r3, [pc, #72]	; (800d4d4 <pbuf_remove_header+0x94>)
 800d48a:	f240 2255 	movw	r2, #597	; 0x255
 800d48e:	4914      	ldr	r1, [pc, #80]	; (800d4e0 <pbuf_remove_header+0xa0>)
 800d490:	4812      	ldr	r0, [pc, #72]	; (800d4dc <pbuf_remove_header+0x9c>)
 800d492:	f00d ff69 	bl	801b368 <iprintf>
 800d496:	2301      	movs	r3, #1
 800d498:	e017      	b.n	800d4ca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	685a      	ldr	r2, [r3, #4]
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	441a      	add	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	895a      	ldrh	r2, [r3, #10]
 800d4b0:	89fb      	ldrh	r3, [r7, #14]
 800d4b2:	1ad3      	subs	r3, r2, r3
 800d4b4:	b29a      	uxth	r2, r3
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	891a      	ldrh	r2, [r3, #8]
 800d4be:	89fb      	ldrh	r3, [r7, #14]
 800d4c0:	1ad3      	subs	r3, r2, r3
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3710      	adds	r7, #16
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	0801d4cc 	.word	0x0801d4cc
 800d4d8:	0801d630 	.word	0x0801d630
 800d4dc:	0801d52c 	.word	0x0801d52c
 800d4e0:	0801d63c 	.word	0x0801d63c

0800d4e4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	807b      	strh	r3, [r7, #2]
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d4f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	da08      	bge.n	800d50e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d4fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d500:	425b      	negs	r3, r3
 800d502:	4619      	mov	r1, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7ff ff9b 	bl	800d440 <pbuf_remove_header>
 800d50a:	4603      	mov	r3, r0
 800d50c:	e007      	b.n	800d51e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d50e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d512:	787a      	ldrb	r2, [r7, #1]
 800d514:	4619      	mov	r1, r3
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7ff ff1a 	bl	800d350 <pbuf_add_header_impl>
 800d51c:	4603      	mov	r3, r0
  }
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b082      	sub	sp, #8
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	460b      	mov	r3, r1
 800d530:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d532:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d536:	2201      	movs	r2, #1
 800d538:	4619      	mov	r1, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f7ff ffd2 	bl	800d4e4 <pbuf_header_impl>
 800d540:	4603      	mov	r3, r0
}
 800d542:	4618      	mov	r0, r3
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b086      	sub	sp, #24
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	460b      	mov	r3, r1
 800d554:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800d55a:	887b      	ldrh	r3, [r7, #2]
 800d55c:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800d55e:	e01c      	b.n	800d59a <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	895b      	ldrh	r3, [r3, #10]
 800d564:	8a7a      	ldrh	r2, [r7, #18]
 800d566:	429a      	cmp	r2, r3
 800d568:	d310      	bcc.n	800d58c <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	895b      	ldrh	r3, [r3, #10]
 800d572:	8a7a      	ldrh	r2, [r7, #18]
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2200      	movs	r2, #0
 800d582:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f000 f813 	bl	800d5b0 <pbuf_free>
 800d58a:	e006      	b.n	800d59a <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800d58c:	8a7b      	ldrh	r3, [r7, #18]
 800d58e:	4619      	mov	r1, r3
 800d590:	6978      	ldr	r0, [r7, #20]
 800d592:	f7ff ff55 	bl	800d440 <pbuf_remove_header>
      free_left = 0;
 800d596:	2300      	movs	r3, #0
 800d598:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800d59a:	8a7b      	ldrh	r3, [r7, #18]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d002      	beq.n	800d5a6 <pbuf_free_header+0x5c>
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1dc      	bne.n	800d560 <pbuf_free_header+0x16>
    }
  }
  return p;
 800d5a6:	697b      	ldr	r3, [r7, #20]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3718      	adds	r7, #24
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b088      	sub	sp, #32
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10b      	bne.n	800d5d6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d106      	bne.n	800d5d2 <pbuf_free+0x22>
 800d5c4:	4b3b      	ldr	r3, [pc, #236]	; (800d6b4 <pbuf_free+0x104>)
 800d5c6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d5ca:	493b      	ldr	r1, [pc, #236]	; (800d6b8 <pbuf_free+0x108>)
 800d5cc:	483b      	ldr	r0, [pc, #236]	; (800d6bc <pbuf_free+0x10c>)
 800d5ce:	f00d fecb 	bl	801b368 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	e069      	b.n	800d6aa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d5da:	e062      	b.n	800d6a2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d5dc:	f00b fdd4 	bl	8019188 <sys_arch_protect>
 800d5e0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	7b9b      	ldrb	r3, [r3, #14]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d106      	bne.n	800d5f8 <pbuf_free+0x48>
 800d5ea:	4b32      	ldr	r3, [pc, #200]	; (800d6b4 <pbuf_free+0x104>)
 800d5ec:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d5f0:	4933      	ldr	r1, [pc, #204]	; (800d6c0 <pbuf_free+0x110>)
 800d5f2:	4832      	ldr	r0, [pc, #200]	; (800d6bc <pbuf_free+0x10c>)
 800d5f4:	f00d feb8 	bl	801b368 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	7b9b      	ldrb	r3, [r3, #14]
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	b2da      	uxtb	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	739a      	strb	r2, [r3, #14]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	7b9b      	ldrb	r3, [r3, #14]
 800d608:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d60a:	69b8      	ldr	r0, [r7, #24]
 800d60c:	f00b fdca 	bl	80191a4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d610:	7dfb      	ldrb	r3, [r7, #23]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d143      	bne.n	800d69e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	7b1b      	ldrb	r3, [r3, #12]
 800d620:	f003 030f 	and.w	r3, r3, #15
 800d624:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	7b5b      	ldrb	r3, [r3, #13]
 800d62a:	f003 0302 	and.w	r3, r3, #2
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d011      	beq.n	800d656 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	691b      	ldr	r3, [r3, #16]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d106      	bne.n	800d64c <pbuf_free+0x9c>
 800d63e:	4b1d      	ldr	r3, [pc, #116]	; (800d6b4 <pbuf_free+0x104>)
 800d640:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d644:	491f      	ldr	r1, [pc, #124]	; (800d6c4 <pbuf_free+0x114>)
 800d646:	481d      	ldr	r0, [pc, #116]	; (800d6bc <pbuf_free+0x10c>)
 800d648:	f00d fe8e 	bl	801b368 <iprintf>
        pc->custom_free_function(p);
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	691b      	ldr	r3, [r3, #16]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	4798      	blx	r3
 800d654:	e01d      	b.n	800d692 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d656:	7bfb      	ldrb	r3, [r7, #15]
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d104      	bne.n	800d666 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	200c      	movs	r0, #12
 800d660:	f7ff f88c 	bl	800c77c <memp_free>
 800d664:	e015      	b.n	800d692 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d666:	7bfb      	ldrb	r3, [r7, #15]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d104      	bne.n	800d676 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d66c:	6879      	ldr	r1, [r7, #4]
 800d66e:	200b      	movs	r0, #11
 800d670:	f7ff f884 	bl	800c77c <memp_free>
 800d674:	e00d      	b.n	800d692 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d676:	7bfb      	ldrb	r3, [r7, #15]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d103      	bne.n	800d684 <pbuf_free+0xd4>
          mem_free(p);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7fe fcc9 	bl	800c014 <mem_free>
 800d682:	e006      	b.n	800d692 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d684:	4b0b      	ldr	r3, [pc, #44]	; (800d6b4 <pbuf_free+0x104>)
 800d686:	f240 320f 	movw	r2, #783	; 0x30f
 800d68a:	490f      	ldr	r1, [pc, #60]	; (800d6c8 <pbuf_free+0x118>)
 800d68c:	480b      	ldr	r0, [pc, #44]	; (800d6bc <pbuf_free+0x10c>)
 800d68e:	f00d fe6b 	bl	801b368 <iprintf>
        }
      }
      count++;
 800d692:	7ffb      	ldrb	r3, [r7, #31]
 800d694:	3301      	adds	r3, #1
 800d696:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	607b      	str	r3, [r7, #4]
 800d69c:	e001      	b.n	800d6a2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d199      	bne.n	800d5dc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d6a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3720      	adds	r7, #32
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	0801d4cc 	.word	0x0801d4cc
 800d6b8:	0801d630 	.word	0x0801d630
 800d6bc:	0801d52c 	.word	0x0801d52c
 800d6c0:	0801d65c 	.word	0x0801d65c
 800d6c4:	0801d674 	.word	0x0801d674
 800d6c8:	0801d698 	.word	0x0801d698

0800d6cc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b085      	sub	sp, #20
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d6d8:	e005      	b.n	800d6e6 <pbuf_clen+0x1a>
    ++len;
 800d6da:	89fb      	ldrh	r3, [r7, #14]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1f6      	bne.n	800d6da <pbuf_clen+0xe>
  }
  return len;
 800d6ec:	89fb      	ldrh	r3, [r7, #14]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
	...

0800d6fc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d016      	beq.n	800d738 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d70a:	f00b fd3d 	bl	8019188 <sys_arch_protect>
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	7b9b      	ldrb	r3, [r3, #14]
 800d714:	3301      	adds	r3, #1
 800d716:	b2da      	uxtb	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	739a      	strb	r2, [r3, #14]
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f00b fd41 	bl	80191a4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	7b9b      	ldrb	r3, [r3, #14]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d106      	bne.n	800d738 <pbuf_ref+0x3c>
 800d72a:	4b05      	ldr	r3, [pc, #20]	; (800d740 <pbuf_ref+0x44>)
 800d72c:	f240 3242 	movw	r2, #834	; 0x342
 800d730:	4904      	ldr	r1, [pc, #16]	; (800d744 <pbuf_ref+0x48>)
 800d732:	4805      	ldr	r0, [pc, #20]	; (800d748 <pbuf_ref+0x4c>)
 800d734:	f00d fe18 	bl	801b368 <iprintf>
  }
}
 800d738:	bf00      	nop
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	0801d4cc 	.word	0x0801d4cc
 800d744:	0801d6ac 	.word	0x0801d6ac
 800d748:	0801d52c 	.word	0x0801d52c

0800d74c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d002      	beq.n	800d762 <pbuf_cat+0x16>
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d107      	bne.n	800d772 <pbuf_cat+0x26>
 800d762:	4b20      	ldr	r3, [pc, #128]	; (800d7e4 <pbuf_cat+0x98>)
 800d764:	f240 3259 	movw	r2, #857	; 0x359
 800d768:	491f      	ldr	r1, [pc, #124]	; (800d7e8 <pbuf_cat+0x9c>)
 800d76a:	4820      	ldr	r0, [pc, #128]	; (800d7ec <pbuf_cat+0xa0>)
 800d76c:	f00d fdfc 	bl	801b368 <iprintf>
 800d770:	e034      	b.n	800d7dc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	60fb      	str	r3, [r7, #12]
 800d776:	e00a      	b.n	800d78e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	891a      	ldrh	r2, [r3, #8]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	891b      	ldrh	r3, [r3, #8]
 800d780:	4413      	add	r3, r2
 800d782:	b29a      	uxth	r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	60fb      	str	r3, [r7, #12]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1f0      	bne.n	800d778 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	891a      	ldrh	r2, [r3, #8]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	895b      	ldrh	r3, [r3, #10]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d006      	beq.n	800d7b0 <pbuf_cat+0x64>
 800d7a2:	4b10      	ldr	r3, [pc, #64]	; (800d7e4 <pbuf_cat+0x98>)
 800d7a4:	f240 3262 	movw	r2, #866	; 0x362
 800d7a8:	4911      	ldr	r1, [pc, #68]	; (800d7f0 <pbuf_cat+0xa4>)
 800d7aa:	4810      	ldr	r0, [pc, #64]	; (800d7ec <pbuf_cat+0xa0>)
 800d7ac:	f00d fddc 	bl	801b368 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d006      	beq.n	800d7c6 <pbuf_cat+0x7a>
 800d7b8:	4b0a      	ldr	r3, [pc, #40]	; (800d7e4 <pbuf_cat+0x98>)
 800d7ba:	f240 3263 	movw	r2, #867	; 0x363
 800d7be:	490d      	ldr	r1, [pc, #52]	; (800d7f4 <pbuf_cat+0xa8>)
 800d7c0:	480a      	ldr	r0, [pc, #40]	; (800d7ec <pbuf_cat+0xa0>)
 800d7c2:	f00d fdd1 	bl	801b368 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	891a      	ldrh	r2, [r3, #8]
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	891b      	ldrh	r3, [r3, #8]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	b29a      	uxth	r2, r3
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	683a      	ldr	r2, [r7, #0]
 800d7da:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	0801d4cc 	.word	0x0801d4cc
 800d7e8:	0801d6c0 	.word	0x0801d6c0
 800d7ec:	0801d52c 	.word	0x0801d52c
 800d7f0:	0801d6f8 	.word	0x0801d6f8
 800d7f4:	0801d728 	.word	0x0801d728

0800d7f8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7ff ffa1 	bl	800d74c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d80a:	6838      	ldr	r0, [r7, #0]
 800d80c:	f7ff ff76 	bl	800d6fc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d810:	bf00      	nop
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d822:	2300      	movs	r3, #0
 800d824:	617b      	str	r3, [r7, #20]
 800d826:	2300      	movs	r3, #0
 800d828:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d008      	beq.n	800d842 <pbuf_copy+0x2a>
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d005      	beq.n	800d842 <pbuf_copy+0x2a>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	891a      	ldrh	r2, [r3, #8]
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	891b      	ldrh	r3, [r3, #8]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d209      	bcs.n	800d856 <pbuf_copy+0x3e>
 800d842:	4b57      	ldr	r3, [pc, #348]	; (800d9a0 <pbuf_copy+0x188>)
 800d844:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d848:	4956      	ldr	r1, [pc, #344]	; (800d9a4 <pbuf_copy+0x18c>)
 800d84a:	4857      	ldr	r0, [pc, #348]	; (800d9a8 <pbuf_copy+0x190>)
 800d84c:	f00d fd8c 	bl	801b368 <iprintf>
 800d850:	f06f 030f 	mvn.w	r3, #15
 800d854:	e09f      	b.n	800d996 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	895b      	ldrh	r3, [r3, #10]
 800d85a:	461a      	mov	r2, r3
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	1ad2      	subs	r2, r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	895b      	ldrh	r3, [r3, #10]
 800d864:	4619      	mov	r1, r3
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	1acb      	subs	r3, r1, r3
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d306      	bcc.n	800d87c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	895b      	ldrh	r3, [r3, #10]
 800d872:	461a      	mov	r2, r3
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	60fb      	str	r3, [r7, #12]
 800d87a:	e005      	b.n	800d888 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	895b      	ldrh	r3, [r3, #10]
 800d880:	461a      	mov	r2, r3
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	685a      	ldr	r2, [r3, #4]
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	18d0      	adds	r0, r2, r3
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	685a      	ldr	r2, [r3, #4]
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	4413      	add	r3, r2
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	4619      	mov	r1, r3
 800d89c:	f00d f99c 	bl	801abd8 <memcpy>
    offset_to += len;
 800d8a0:	697a      	ldr	r2, [r7, #20]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	4413      	add	r3, r2
 800d8a6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d8a8:	693a      	ldr	r2, [r7, #16]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	895b      	ldrh	r3, [r3, #10]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d906      	bls.n	800d8ca <pbuf_copy+0xb2>
 800d8bc:	4b38      	ldr	r3, [pc, #224]	; (800d9a0 <pbuf_copy+0x188>)
 800d8be:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d8c2:	493a      	ldr	r1, [pc, #232]	; (800d9ac <pbuf_copy+0x194>)
 800d8c4:	4838      	ldr	r0, [pc, #224]	; (800d9a8 <pbuf_copy+0x190>)
 800d8c6:	f00d fd4f 	bl	801b368 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	895b      	ldrh	r3, [r3, #10]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d906      	bls.n	800d8e4 <pbuf_copy+0xcc>
 800d8d6:	4b32      	ldr	r3, [pc, #200]	; (800d9a0 <pbuf_copy+0x188>)
 800d8d8:	f240 32da 	movw	r2, #986	; 0x3da
 800d8dc:	4934      	ldr	r1, [pc, #208]	; (800d9b0 <pbuf_copy+0x198>)
 800d8de:	4832      	ldr	r0, [pc, #200]	; (800d9a8 <pbuf_copy+0x190>)
 800d8e0:	f00d fd42 	bl	801b368 <iprintf>
    if (offset_from >= p_from->len) {
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	895b      	ldrh	r3, [r3, #10]
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d304      	bcc.n	800d8fa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	895b      	ldrh	r3, [r3, #10]
 800d8fe:	461a      	mov	r2, r3
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	4293      	cmp	r3, r2
 800d904:	d114      	bne.n	800d930 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d906:	2300      	movs	r3, #0
 800d908:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10c      	bne.n	800d930 <pbuf_copy+0x118>
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d009      	beq.n	800d930 <pbuf_copy+0x118>
 800d91c:	4b20      	ldr	r3, [pc, #128]	; (800d9a0 <pbuf_copy+0x188>)
 800d91e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d922:	4924      	ldr	r1, [pc, #144]	; (800d9b4 <pbuf_copy+0x19c>)
 800d924:	4820      	ldr	r0, [pc, #128]	; (800d9a8 <pbuf_copy+0x190>)
 800d926:	f00d fd1f 	bl	801b368 <iprintf>
 800d92a:	f06f 030f 	mvn.w	r3, #15
 800d92e:	e032      	b.n	800d996 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d013      	beq.n	800d95e <pbuf_copy+0x146>
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	895a      	ldrh	r2, [r3, #10]
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	891b      	ldrh	r3, [r3, #8]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d10d      	bne.n	800d95e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d009      	beq.n	800d95e <pbuf_copy+0x146>
 800d94a:	4b15      	ldr	r3, [pc, #84]	; (800d9a0 <pbuf_copy+0x188>)
 800d94c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d950:	4919      	ldr	r1, [pc, #100]	; (800d9b8 <pbuf_copy+0x1a0>)
 800d952:	4815      	ldr	r0, [pc, #84]	; (800d9a8 <pbuf_copy+0x190>)
 800d954:	f00d fd08 	bl	801b368 <iprintf>
 800d958:	f06f 0305 	mvn.w	r3, #5
 800d95c:	e01b      	b.n	800d996 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d013      	beq.n	800d98c <pbuf_copy+0x174>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	895a      	ldrh	r2, [r3, #10]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	891b      	ldrh	r3, [r3, #8]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d10d      	bne.n	800d98c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d009      	beq.n	800d98c <pbuf_copy+0x174>
 800d978:	4b09      	ldr	r3, [pc, #36]	; (800d9a0 <pbuf_copy+0x188>)
 800d97a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d97e:	490e      	ldr	r1, [pc, #56]	; (800d9b8 <pbuf_copy+0x1a0>)
 800d980:	4809      	ldr	r0, [pc, #36]	; (800d9a8 <pbuf_copy+0x190>)
 800d982:	f00d fcf1 	bl	801b368 <iprintf>
 800d986:	f06f 0305 	mvn.w	r3, #5
 800d98a:	e004      	b.n	800d996 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	f47f af61 	bne.w	800d856 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	0801d4cc 	.word	0x0801d4cc
 800d9a4:	0801d774 	.word	0x0801d774
 800d9a8:	0801d52c 	.word	0x0801d52c
 800d9ac:	0801d7a4 	.word	0x0801d7a4
 800d9b0:	0801d7bc 	.word	0x0801d7bc
 800d9b4:	0801d7d8 	.word	0x0801d7d8
 800d9b8:	0801d7e8 	.word	0x0801d7e8

0800d9bc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	80fb      	strh	r3, [r7, #6]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d108      	bne.n	800d9f2 <pbuf_copy_partial+0x36>
 800d9e0:	4b2b      	ldr	r3, [pc, #172]	; (800da90 <pbuf_copy_partial+0xd4>)
 800d9e2:	f240 420a 	movw	r2, #1034	; 0x40a
 800d9e6:	492b      	ldr	r1, [pc, #172]	; (800da94 <pbuf_copy_partial+0xd8>)
 800d9e8:	482b      	ldr	r0, [pc, #172]	; (800da98 <pbuf_copy_partial+0xdc>)
 800d9ea:	f00d fcbd 	bl	801b368 <iprintf>
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	e04a      	b.n	800da88 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d108      	bne.n	800da0a <pbuf_copy_partial+0x4e>
 800d9f8:	4b25      	ldr	r3, [pc, #148]	; (800da90 <pbuf_copy_partial+0xd4>)
 800d9fa:	f240 420b 	movw	r2, #1035	; 0x40b
 800d9fe:	4927      	ldr	r1, [pc, #156]	; (800da9c <pbuf_copy_partial+0xe0>)
 800da00:	4825      	ldr	r0, [pc, #148]	; (800da98 <pbuf_copy_partial+0xdc>)
 800da02:	f00d fcb1 	bl	801b368 <iprintf>
 800da06:	2300      	movs	r3, #0
 800da08:	e03e      	b.n	800da88 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	61fb      	str	r3, [r7, #28]
 800da0e:	e034      	b.n	800da7a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800da10:	88bb      	ldrh	r3, [r7, #4]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00a      	beq.n	800da2c <pbuf_copy_partial+0x70>
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	895b      	ldrh	r3, [r3, #10]
 800da1a:	88ba      	ldrh	r2, [r7, #4]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d305      	bcc.n	800da2c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	895b      	ldrh	r3, [r3, #10]
 800da24:	88ba      	ldrh	r2, [r7, #4]
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	80bb      	strh	r3, [r7, #4]
 800da2a:	e023      	b.n	800da74 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	895a      	ldrh	r2, [r3, #10]
 800da30:	88bb      	ldrh	r3, [r7, #4]
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800da36:	8b3a      	ldrh	r2, [r7, #24]
 800da38:	88fb      	ldrh	r3, [r7, #6]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d901      	bls.n	800da42 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800da3e:	88fb      	ldrh	r3, [r7, #6]
 800da40:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800da42:	8b7b      	ldrh	r3, [r7, #26]
 800da44:	68ba      	ldr	r2, [r7, #8]
 800da46:	18d0      	adds	r0, r2, r3
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	88bb      	ldrh	r3, [r7, #4]
 800da4e:	4413      	add	r3, r2
 800da50:	8b3a      	ldrh	r2, [r7, #24]
 800da52:	4619      	mov	r1, r3
 800da54:	f00d f8c0 	bl	801abd8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800da58:	8afa      	ldrh	r2, [r7, #22]
 800da5a:	8b3b      	ldrh	r3, [r7, #24]
 800da5c:	4413      	add	r3, r2
 800da5e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800da60:	8b7a      	ldrh	r2, [r7, #26]
 800da62:	8b3b      	ldrh	r3, [r7, #24]
 800da64:	4413      	add	r3, r2
 800da66:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800da68:	88fa      	ldrh	r2, [r7, #6]
 800da6a:	8b3b      	ldrh	r3, [r7, #24]
 800da6c:	1ad3      	subs	r3, r2, r3
 800da6e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800da70:	2300      	movs	r3, #0
 800da72:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800da74:	69fb      	ldr	r3, [r7, #28]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	61fb      	str	r3, [r7, #28]
 800da7a:	88fb      	ldrh	r3, [r7, #6]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d002      	beq.n	800da86 <pbuf_copy_partial+0xca>
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1c4      	bne.n	800da10 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800da86:	8afb      	ldrh	r3, [r7, #22]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3720      	adds	r7, #32
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	0801d4cc 	.word	0x0801d4cc
 800da94:	0801d814 	.word	0x0801d814
 800da98:	0801d52c 	.word	0x0801d52c
 800da9c:	0801d834 	.word	0x0801d834

0800daa0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	4603      	mov	r3, r0
 800daa8:	603a      	str	r2, [r7, #0]
 800daaa:	71fb      	strb	r3, [r7, #7]
 800daac:	460b      	mov	r3, r1
 800daae:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	8919      	ldrh	r1, [r3, #8]
 800dab4:	88ba      	ldrh	r2, [r7, #4]
 800dab6:	79fb      	ldrb	r3, [r7, #7]
 800dab8:	4618      	mov	r0, r3
 800daba:	f7ff fa63 	bl	800cf84 <pbuf_alloc>
 800dabe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d101      	bne.n	800daca <pbuf_clone+0x2a>
    return NULL;
 800dac6:	2300      	movs	r3, #0
 800dac8:	e011      	b.n	800daee <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800daca:	6839      	ldr	r1, [r7, #0]
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f7ff fea3 	bl	800d818 <pbuf_copy>
 800dad2:	4603      	mov	r3, r0
 800dad4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dad6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d006      	beq.n	800daec <pbuf_clone+0x4c>
 800dade:	4b06      	ldr	r3, [pc, #24]	; (800daf8 <pbuf_clone+0x58>)
 800dae0:	f240 5224 	movw	r2, #1316	; 0x524
 800dae4:	4905      	ldr	r1, [pc, #20]	; (800dafc <pbuf_clone+0x5c>)
 800dae6:	4806      	ldr	r0, [pc, #24]	; (800db00 <pbuf_clone+0x60>)
 800dae8:	f00d fc3e 	bl	801b368 <iprintf>
  return q;
 800daec:	68fb      	ldr	r3, [r7, #12]
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	0801d4cc 	.word	0x0801d4cc
 800dafc:	0801d940 	.word	0x0801d940
 800db00:	0801d52c 	.word	0x0801d52c

0800db04 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800db08:	f00d fc46 	bl	801b398 <rand>
 800db0c:	4603      	mov	r3, r0
 800db0e:	b29b      	uxth	r3, r3
 800db10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800db14:	b29b      	uxth	r3, r3
 800db16:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	4b01      	ldr	r3, [pc, #4]	; (800db24 <tcp_init+0x20>)
 800db1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800db20:	bf00      	nop
 800db22:	bd80      	pop	{r7, pc}
 800db24:	20000024 	.word	0x20000024

0800db28 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	7d1b      	ldrb	r3, [r3, #20]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d105      	bne.n	800db44 <tcp_free+0x1c>
 800db38:	4b06      	ldr	r3, [pc, #24]	; (800db54 <tcp_free+0x2c>)
 800db3a:	22d4      	movs	r2, #212	; 0xd4
 800db3c:	4906      	ldr	r1, [pc, #24]	; (800db58 <tcp_free+0x30>)
 800db3e:	4807      	ldr	r0, [pc, #28]	; (800db5c <tcp_free+0x34>)
 800db40:	f00d fc12 	bl	801b368 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800db44:	6879      	ldr	r1, [r7, #4]
 800db46:	2001      	movs	r0, #1
 800db48:	f7fe fe18 	bl	800c77c <memp_free>
}
 800db4c:	bf00      	nop
 800db4e:	3708      	adds	r7, #8
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	0801d9cc 	.word	0x0801d9cc
 800db58:	0801d9fc 	.word	0x0801d9fc
 800db5c:	0801da10 	.word	0x0801da10

0800db60 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	7d1b      	ldrb	r3, [r3, #20]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d105      	bne.n	800db7c <tcp_free_listen+0x1c>
 800db70:	4b06      	ldr	r3, [pc, #24]	; (800db8c <tcp_free_listen+0x2c>)
 800db72:	22df      	movs	r2, #223	; 0xdf
 800db74:	4906      	ldr	r1, [pc, #24]	; (800db90 <tcp_free_listen+0x30>)
 800db76:	4807      	ldr	r0, [pc, #28]	; (800db94 <tcp_free_listen+0x34>)
 800db78:	f00d fbf6 	bl	801b368 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800db7c:	6879      	ldr	r1, [r7, #4]
 800db7e:	2002      	movs	r0, #2
 800db80:	f7fe fdfc 	bl	800c77c <memp_free>
}
 800db84:	bf00      	nop
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	0801d9cc 	.word	0x0801d9cc
 800db90:	0801da38 	.word	0x0801da38
 800db94:	0801da10 	.word	0x0801da10

0800db98 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800db9c:	f001 f8c0 	bl	800ed20 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dba0:	4b07      	ldr	r3, [pc, #28]	; (800dbc0 <tcp_tmr+0x28>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	3301      	adds	r3, #1
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	4b05      	ldr	r3, [pc, #20]	; (800dbc0 <tcp_tmr+0x28>)
 800dbaa:	701a      	strb	r2, [r3, #0]
 800dbac:	4b04      	ldr	r3, [pc, #16]	; (800dbc0 <tcp_tmr+0x28>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	f003 0301 	and.w	r3, r3, #1
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d001      	beq.n	800dbbc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dbb8:	f000 fd72 	bl	800e6a0 <tcp_slowtmr>
  }
}
 800dbbc:	bf00      	nop
 800dbbe:	bd80      	pop	{r7, pc}
 800dbc0:	20010771 	.word	0x20010771

0800dbc4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d105      	bne.n	800dbe0 <tcp_remove_listener+0x1c>
 800dbd4:	4b0d      	ldr	r3, [pc, #52]	; (800dc0c <tcp_remove_listener+0x48>)
 800dbd6:	22ff      	movs	r2, #255	; 0xff
 800dbd8:	490d      	ldr	r1, [pc, #52]	; (800dc10 <tcp_remove_listener+0x4c>)
 800dbda:	480e      	ldr	r0, [pc, #56]	; (800dc14 <tcp_remove_listener+0x50>)
 800dbdc:	f00d fbc4 	bl	801b368 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	60fb      	str	r3, [r7, #12]
 800dbe4:	e00a      	b.n	800dbfc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbea:	683a      	ldr	r2, [r7, #0]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d102      	bne.n	800dbf6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	60fb      	str	r3, [r7, #12]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d1f1      	bne.n	800dbe6 <tcp_remove_listener+0x22>
    }
  }
}
 800dc02:	bf00      	nop
 800dc04:	bf00      	nop
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	0801d9cc 	.word	0x0801d9cc
 800dc10:	0801da54 	.word	0x0801da54
 800dc14:	0801da10 	.word	0x0801da10

0800dc18 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d106      	bne.n	800dc34 <tcp_listen_closed+0x1c>
 800dc26:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <tcp_listen_closed+0x60>)
 800dc28:	f240 1211 	movw	r2, #273	; 0x111
 800dc2c:	4913      	ldr	r1, [pc, #76]	; (800dc7c <tcp_listen_closed+0x64>)
 800dc2e:	4814      	ldr	r0, [pc, #80]	; (800dc80 <tcp_listen_closed+0x68>)
 800dc30:	f00d fb9a 	bl	801b368 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	7d1b      	ldrb	r3, [r3, #20]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d006      	beq.n	800dc4a <tcp_listen_closed+0x32>
 800dc3c:	4b0e      	ldr	r3, [pc, #56]	; (800dc78 <tcp_listen_closed+0x60>)
 800dc3e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800dc42:	4910      	ldr	r1, [pc, #64]	; (800dc84 <tcp_listen_closed+0x6c>)
 800dc44:	480e      	ldr	r0, [pc, #56]	; (800dc80 <tcp_listen_closed+0x68>)
 800dc46:	f00d fb8f 	bl	801b368 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	60fb      	str	r3, [r7, #12]
 800dc4e:	e00b      	b.n	800dc68 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dc50:	4a0d      	ldr	r2, [pc, #52]	; (800dc88 <tcp_listen_closed+0x70>)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	6879      	ldr	r1, [r7, #4]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7ff ffb1 	bl	800dbc4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	3301      	adds	r3, #1
 800dc66:	60fb      	str	r3, [r7, #12]
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2b03      	cmp	r3, #3
 800dc6c:	d9f0      	bls.n	800dc50 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dc6e:	bf00      	nop
 800dc70:	bf00      	nop
 800dc72:	3710      	adds	r7, #16
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	0801d9cc 	.word	0x0801d9cc
 800dc7c:	0801da7c 	.word	0x0801da7c
 800dc80:	0801da10 	.word	0x0801da10
 800dc84:	0801da88 	.word	0x0801da88
 800dc88:	0801ff9c 	.word	0x0801ff9c

0800dc8c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dc8c:	b5b0      	push	{r4, r5, r7, lr}
 800dc8e:	b088      	sub	sp, #32
 800dc90:	af04      	add	r7, sp, #16
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	460b      	mov	r3, r1
 800dc96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d106      	bne.n	800dcac <tcp_close_shutdown+0x20>
 800dc9e:	4b63      	ldr	r3, [pc, #396]	; (800de2c <tcp_close_shutdown+0x1a0>)
 800dca0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800dca4:	4962      	ldr	r1, [pc, #392]	; (800de30 <tcp_close_shutdown+0x1a4>)
 800dca6:	4863      	ldr	r0, [pc, #396]	; (800de34 <tcp_close_shutdown+0x1a8>)
 800dca8:	f00d fb5e 	bl	801b368 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dcac:	78fb      	ldrb	r3, [r7, #3]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d066      	beq.n	800dd80 <tcp_close_shutdown+0xf4>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	7d1b      	ldrb	r3, [r3, #20]
 800dcb6:	2b04      	cmp	r3, #4
 800dcb8:	d003      	beq.n	800dcc2 <tcp_close_shutdown+0x36>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	7d1b      	ldrb	r3, [r3, #20]
 800dcbe:	2b07      	cmp	r3, #7
 800dcc0:	d15e      	bne.n	800dd80 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d104      	bne.n	800dcd4 <tcp_close_shutdown+0x48>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dcd2:	d055      	beq.n	800dd80 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	8b5b      	ldrh	r3, [r3, #26]
 800dcd8:	f003 0310 	and.w	r3, r3, #16
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d106      	bne.n	800dcee <tcp_close_shutdown+0x62>
 800dce0:	4b52      	ldr	r3, [pc, #328]	; (800de2c <tcp_close_shutdown+0x1a0>)
 800dce2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800dce6:	4954      	ldr	r1, [pc, #336]	; (800de38 <tcp_close_shutdown+0x1ac>)
 800dce8:	4852      	ldr	r0, [pc, #328]	; (800de34 <tcp_close_shutdown+0x1a8>)
 800dcea:	f00d fb3d 	bl	801b368 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dcf6:	687d      	ldr	r5, [r7, #4]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	3304      	adds	r3, #4
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	8ad2      	ldrh	r2, [r2, #22]
 800dd00:	6879      	ldr	r1, [r7, #4]
 800dd02:	8b09      	ldrh	r1, [r1, #24]
 800dd04:	9102      	str	r1, [sp, #8]
 800dd06:	9201      	str	r2, [sp, #4]
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	462b      	mov	r3, r5
 800dd0c:	4622      	mov	r2, r4
 800dd0e:	4601      	mov	r1, r0
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f005 fdd1 	bl	80138b8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f001 fbb2 	bl	800f480 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dd1c:	4b47      	ldr	r3, [pc, #284]	; (800de3c <tcp_close_shutdown+0x1b0>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d105      	bne.n	800dd32 <tcp_close_shutdown+0xa6>
 800dd26:	4b45      	ldr	r3, [pc, #276]	; (800de3c <tcp_close_shutdown+0x1b0>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	68db      	ldr	r3, [r3, #12]
 800dd2c:	4a43      	ldr	r2, [pc, #268]	; (800de3c <tcp_close_shutdown+0x1b0>)
 800dd2e:	6013      	str	r3, [r2, #0]
 800dd30:	e013      	b.n	800dd5a <tcp_close_shutdown+0xce>
 800dd32:	4b42      	ldr	r3, [pc, #264]	; (800de3c <tcp_close_shutdown+0x1b0>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	e00c      	b.n	800dd54 <tcp_close_shutdown+0xc8>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d104      	bne.n	800dd4e <tcp_close_shutdown+0xc2>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68da      	ldr	r2, [r3, #12]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	60da      	str	r2, [r3, #12]
 800dd4c:	e005      	b.n	800dd5a <tcp_close_shutdown+0xce>
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1ef      	bne.n	800dd3a <tcp_close_shutdown+0xae>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	60da      	str	r2, [r3, #12]
 800dd60:	4b37      	ldr	r3, [pc, #220]	; (800de40 <tcp_close_shutdown+0x1b4>)
 800dd62:	2201      	movs	r2, #1
 800dd64:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dd66:	4b37      	ldr	r3, [pc, #220]	; (800de44 <tcp_close_shutdown+0x1b8>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d102      	bne.n	800dd76 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dd70:	f004 f846 	bl	8011e00 <tcp_trigger_input_pcb_close>
 800dd74:	e002      	b.n	800dd7c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff fed6 	bl	800db28 <tcp_free>
      }
      return ERR_OK;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	e050      	b.n	800de22 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	7d1b      	ldrb	r3, [r3, #20]
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d03b      	beq.n	800de00 <tcp_close_shutdown+0x174>
 800dd88:	2b02      	cmp	r3, #2
 800dd8a:	dc44      	bgt.n	800de16 <tcp_close_shutdown+0x18a>
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <tcp_close_shutdown+0x10a>
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d02a      	beq.n	800ddea <tcp_close_shutdown+0x15e>
 800dd94:	e03f      	b.n	800de16 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	8adb      	ldrh	r3, [r3, #22]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d021      	beq.n	800dde2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd9e:	4b2a      	ldr	r3, [pc, #168]	; (800de48 <tcp_close_shutdown+0x1bc>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d105      	bne.n	800ddb4 <tcp_close_shutdown+0x128>
 800dda8:	4b27      	ldr	r3, [pc, #156]	; (800de48 <tcp_close_shutdown+0x1bc>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	4a26      	ldr	r2, [pc, #152]	; (800de48 <tcp_close_shutdown+0x1bc>)
 800ddb0:	6013      	str	r3, [r2, #0]
 800ddb2:	e013      	b.n	800dddc <tcp_close_shutdown+0x150>
 800ddb4:	4b24      	ldr	r3, [pc, #144]	; (800de48 <tcp_close_shutdown+0x1bc>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	60bb      	str	r3, [r7, #8]
 800ddba:	e00c      	b.n	800ddd6 <tcp_close_shutdown+0x14a>
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d104      	bne.n	800ddd0 <tcp_close_shutdown+0x144>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	68da      	ldr	r2, [r3, #12]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	60da      	str	r2, [r3, #12]
 800ddce:	e005      	b.n	800dddc <tcp_close_shutdown+0x150>
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	68db      	ldr	r3, [r3, #12]
 800ddd4:	60bb      	str	r3, [r7, #8]
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1ef      	bne.n	800ddbc <tcp_close_shutdown+0x130>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f7ff fea0 	bl	800db28 <tcp_free>
      break;
 800dde8:	e01a      	b.n	800de20 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f7ff ff14 	bl	800dc18 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ddf0:	6879      	ldr	r1, [r7, #4]
 800ddf2:	4816      	ldr	r0, [pc, #88]	; (800de4c <tcp_close_shutdown+0x1c0>)
 800ddf4:	f001 fb94 	bl	800f520 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f7ff feb1 	bl	800db60 <tcp_free_listen>
      break;
 800ddfe:	e00f      	b.n	800de20 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800de00:	6879      	ldr	r1, [r7, #4]
 800de02:	480e      	ldr	r0, [pc, #56]	; (800de3c <tcp_close_shutdown+0x1b0>)
 800de04:	f001 fb8c 	bl	800f520 <tcp_pcb_remove>
 800de08:	4b0d      	ldr	r3, [pc, #52]	; (800de40 <tcp_close_shutdown+0x1b4>)
 800de0a:	2201      	movs	r2, #1
 800de0c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f7ff fe8a 	bl	800db28 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800de14:	e004      	b.n	800de20 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f000 f81a 	bl	800de50 <tcp_close_shutdown_fin>
 800de1c:	4603      	mov	r3, r0
 800de1e:	e000      	b.n	800de22 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800de20:	2300      	movs	r3, #0
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bdb0      	pop	{r4, r5, r7, pc}
 800de2a:	bf00      	nop
 800de2c:	0801d9cc 	.word	0x0801d9cc
 800de30:	0801daa0 	.word	0x0801daa0
 800de34:	0801da10 	.word	0x0801da10
 800de38:	0801dac0 	.word	0x0801dac0
 800de3c:	20019054 	.word	0x20019054
 800de40:	20019050 	.word	0x20019050
 800de44:	20019068 	.word	0x20019068
 800de48:	20019060 	.word	0x20019060
 800de4c:	2001905c 	.word	0x2001905c

0800de50 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d106      	bne.n	800de6c <tcp_close_shutdown_fin+0x1c>
 800de5e:	4b2e      	ldr	r3, [pc, #184]	; (800df18 <tcp_close_shutdown_fin+0xc8>)
 800de60:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800de64:	492d      	ldr	r1, [pc, #180]	; (800df1c <tcp_close_shutdown_fin+0xcc>)
 800de66:	482e      	ldr	r0, [pc, #184]	; (800df20 <tcp_close_shutdown_fin+0xd0>)
 800de68:	f00d fa7e 	bl	801b368 <iprintf>

  switch (pcb->state) {
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	7d1b      	ldrb	r3, [r3, #20]
 800de70:	2b07      	cmp	r3, #7
 800de72:	d020      	beq.n	800deb6 <tcp_close_shutdown_fin+0x66>
 800de74:	2b07      	cmp	r3, #7
 800de76:	dc2b      	bgt.n	800ded0 <tcp_close_shutdown_fin+0x80>
 800de78:	2b03      	cmp	r3, #3
 800de7a:	d002      	beq.n	800de82 <tcp_close_shutdown_fin+0x32>
 800de7c:	2b04      	cmp	r3, #4
 800de7e:	d00d      	beq.n	800de9c <tcp_close_shutdown_fin+0x4c>
 800de80:	e026      	b.n	800ded0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f004 fe26 	bl	8012ad4 <tcp_send_fin>
 800de88:	4603      	mov	r3, r0
 800de8a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d11f      	bne.n	800ded4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2205      	movs	r2, #5
 800de98:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de9a:	e01b      	b.n	800ded4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f004 fe19 	bl	8012ad4 <tcp_send_fin>
 800dea2:	4603      	mov	r3, r0
 800dea4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d114      	bne.n	800ded8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2205      	movs	r2, #5
 800deb2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800deb4:	e010      	b.n	800ded8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f004 fe0c 	bl	8012ad4 <tcp_send_fin>
 800debc:	4603      	mov	r3, r0
 800debe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d109      	bne.n	800dedc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2209      	movs	r2, #9
 800decc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dece:	e005      	b.n	800dedc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	e01c      	b.n	800df0e <tcp_close_shutdown_fin+0xbe>
      break;
 800ded4:	bf00      	nop
 800ded6:	e002      	b.n	800dede <tcp_close_shutdown_fin+0x8e>
      break;
 800ded8:	bf00      	nop
 800deda:	e000      	b.n	800dede <tcp_close_shutdown_fin+0x8e>
      break;
 800dedc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d103      	bne.n	800deee <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f004 ff32 	bl	8012d50 <tcp_output>
 800deec:	e00d      	b.n	800df0a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800deee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800def2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def6:	d108      	bne.n	800df0a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	8b5b      	ldrh	r3, [r3, #26]
 800defc:	f043 0308 	orr.w	r3, r3, #8
 800df00:	b29a      	uxth	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800df06:	2300      	movs	r3, #0
 800df08:	e001      	b.n	800df0e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800df0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	0801d9cc 	.word	0x0801d9cc
 800df1c:	0801da7c 	.word	0x0801da7c
 800df20:	0801da10 	.word	0x0801da10

0800df24 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d109      	bne.n	800df46 <tcp_close+0x22>
 800df32:	4b0f      	ldr	r3, [pc, #60]	; (800df70 <tcp_close+0x4c>)
 800df34:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800df38:	490e      	ldr	r1, [pc, #56]	; (800df74 <tcp_close+0x50>)
 800df3a:	480f      	ldr	r0, [pc, #60]	; (800df78 <tcp_close+0x54>)
 800df3c:	f00d fa14 	bl	801b368 <iprintf>
 800df40:	f06f 030f 	mvn.w	r3, #15
 800df44:	e00f      	b.n	800df66 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	7d1b      	ldrb	r3, [r3, #20]
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d006      	beq.n	800df5c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	8b5b      	ldrh	r3, [r3, #26]
 800df52:	f043 0310 	orr.w	r3, r3, #16
 800df56:	b29a      	uxth	r2, r3
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800df5c:	2101      	movs	r1, #1
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f7ff fe94 	bl	800dc8c <tcp_close_shutdown>
 800df64:	4603      	mov	r3, r0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3708      	adds	r7, #8
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	0801d9cc 	.word	0x0801d9cc
 800df74:	0801dadc 	.word	0x0801dadc
 800df78:	0801da10 	.word	0x0801da10

0800df7c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d109      	bne.n	800dfa2 <tcp_shutdown+0x26>
 800df8e:	4b26      	ldr	r3, [pc, #152]	; (800e028 <tcp_shutdown+0xac>)
 800df90:	f240 2207 	movw	r2, #519	; 0x207
 800df94:	4925      	ldr	r1, [pc, #148]	; (800e02c <tcp_shutdown+0xb0>)
 800df96:	4826      	ldr	r0, [pc, #152]	; (800e030 <tcp_shutdown+0xb4>)
 800df98:	f00d f9e6 	bl	801b368 <iprintf>
 800df9c:	f06f 030f 	mvn.w	r3, #15
 800dfa0:	e03d      	b.n	800e01e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	7d1b      	ldrb	r3, [r3, #20]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	d102      	bne.n	800dfb0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800dfaa:	f06f 030a 	mvn.w	r3, #10
 800dfae:	e036      	b.n	800e01e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d01b      	beq.n	800dfee <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	8b5b      	ldrh	r3, [r3, #26]
 800dfba:	f043 0310 	orr.w	r3, r3, #16
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d005      	beq.n	800dfd6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dfca:	2101      	movs	r1, #1
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	f7ff fe5d 	bl	800dc8c <tcp_close_shutdown>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	e023      	b.n	800e01e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d007      	beq.n	800dfee <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7ff fae4 	bl	800d5b0 <pbuf_free>
      pcb->refused_data = NULL;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2200      	movs	r2, #0
 800dfec:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d013      	beq.n	800e01c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	7d1b      	ldrb	r3, [r3, #20]
 800dff8:	2b04      	cmp	r3, #4
 800dffa:	dc02      	bgt.n	800e002 <tcp_shutdown+0x86>
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	da02      	bge.n	800e006 <tcp_shutdown+0x8a>
 800e000:	e009      	b.n	800e016 <tcp_shutdown+0x9a>
 800e002:	2b07      	cmp	r3, #7
 800e004:	d107      	bne.n	800e016 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	4619      	mov	r1, r3
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f7ff fe3d 	bl	800dc8c <tcp_close_shutdown>
 800e012:	4603      	mov	r3, r0
 800e014:	e003      	b.n	800e01e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e016:	f06f 030a 	mvn.w	r3, #10
 800e01a:	e000      	b.n	800e01e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e01c:	2300      	movs	r3, #0
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	0801d9cc 	.word	0x0801d9cc
 800e02c:	0801daf4 	.word	0x0801daf4
 800e030:	0801da10 	.word	0x0801da10

0800e034 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b08e      	sub	sp, #56	; 0x38
 800e038:	af04      	add	r7, sp, #16
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d107      	bne.n	800e054 <tcp_abandon+0x20>
 800e044:	4b52      	ldr	r3, [pc, #328]	; (800e190 <tcp_abandon+0x15c>)
 800e046:	f240 223d 	movw	r2, #573	; 0x23d
 800e04a:	4952      	ldr	r1, [pc, #328]	; (800e194 <tcp_abandon+0x160>)
 800e04c:	4852      	ldr	r0, [pc, #328]	; (800e198 <tcp_abandon+0x164>)
 800e04e:	f00d f98b 	bl	801b368 <iprintf>
 800e052:	e099      	b.n	800e188 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	7d1b      	ldrb	r3, [r3, #20]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d106      	bne.n	800e06a <tcp_abandon+0x36>
 800e05c:	4b4c      	ldr	r3, [pc, #304]	; (800e190 <tcp_abandon+0x15c>)
 800e05e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e062:	494e      	ldr	r1, [pc, #312]	; (800e19c <tcp_abandon+0x168>)
 800e064:	484c      	ldr	r0, [pc, #304]	; (800e198 <tcp_abandon+0x164>)
 800e066:	f00d f97f 	bl	801b368 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	7d1b      	ldrb	r3, [r3, #20]
 800e06e:	2b0a      	cmp	r3, #10
 800e070:	d107      	bne.n	800e082 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e072:	6879      	ldr	r1, [r7, #4]
 800e074:	484a      	ldr	r0, [pc, #296]	; (800e1a0 <tcp_abandon+0x16c>)
 800e076:	f001 fa53 	bl	800f520 <tcp_pcb_remove>
    tcp_free(pcb);
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f7ff fd54 	bl	800db28 <tcp_free>
 800e080:	e082      	b.n	800e188 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e082:	2300      	movs	r3, #0
 800e084:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e086:	2300      	movs	r3, #0
 800e088:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e08e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e094:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e09c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	7d1b      	ldrb	r3, [r3, #20]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d126      	bne.n	800e0fa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	8adb      	ldrh	r3, [r3, #22]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d02e      	beq.n	800e112 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e0b4:	4b3b      	ldr	r3, [pc, #236]	; (800e1a4 <tcp_abandon+0x170>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d105      	bne.n	800e0ca <tcp_abandon+0x96>
 800e0be:	4b39      	ldr	r3, [pc, #228]	; (800e1a4 <tcp_abandon+0x170>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	68db      	ldr	r3, [r3, #12]
 800e0c4:	4a37      	ldr	r2, [pc, #220]	; (800e1a4 <tcp_abandon+0x170>)
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	e013      	b.n	800e0f2 <tcp_abandon+0xbe>
 800e0ca:	4b36      	ldr	r3, [pc, #216]	; (800e1a4 <tcp_abandon+0x170>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	61fb      	str	r3, [r7, #28]
 800e0d0:	e00c      	b.n	800e0ec <tcp_abandon+0xb8>
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d104      	bne.n	800e0e6 <tcp_abandon+0xb2>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	68da      	ldr	r2, [r3, #12]
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	60da      	str	r2, [r3, #12]
 800e0e4:	e005      	b.n	800e0f2 <tcp_abandon+0xbe>
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	68db      	ldr	r3, [r3, #12]
 800e0ea:	61fb      	str	r3, [r7, #28]
 800e0ec:	69fb      	ldr	r3, [r7, #28]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1ef      	bne.n	800e0d2 <tcp_abandon+0x9e>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	60da      	str	r2, [r3, #12]
 800e0f8:	e00b      	b.n	800e112 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	8adb      	ldrh	r3, [r3, #22]
 800e102:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	4828      	ldr	r0, [pc, #160]	; (800e1a8 <tcp_abandon+0x174>)
 800e108:	f001 fa0a 	bl	800f520 <tcp_pcb_remove>
 800e10c:	4b27      	ldr	r3, [pc, #156]	; (800e1ac <tcp_abandon+0x178>)
 800e10e:	2201      	movs	r2, #1
 800e110:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e116:	2b00      	cmp	r3, #0
 800e118:	d004      	beq.n	800e124 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11e:	4618      	mov	r0, r3
 800e120:	f000 fede 	bl	800eee0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d004      	beq.n	800e136 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e130:	4618      	mov	r0, r3
 800e132:	f000 fed5 	bl	800eee0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d004      	beq.n	800e148 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e142:	4618      	mov	r0, r3
 800e144:	f000 fecc 	bl	800eee0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00e      	beq.n	800e16c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e14e:	6879      	ldr	r1, [r7, #4]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	3304      	adds	r3, #4
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	8b12      	ldrh	r2, [r2, #24]
 800e158:	9202      	str	r2, [sp, #8]
 800e15a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e15c:	9201      	str	r2, [sp, #4]
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	460b      	mov	r3, r1
 800e162:	697a      	ldr	r2, [r7, #20]
 800e164:	69b9      	ldr	r1, [r7, #24]
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f005 fba6 	bl	80138b8 <tcp_rst>
    }
    last_state = pcb->state;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	7d1b      	ldrb	r3, [r3, #20]
 800e170:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7ff fcd8 	bl	800db28 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d004      	beq.n	800e188 <tcp_abandon+0x154>
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	f06f 010c 	mvn.w	r1, #12
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	4798      	blx	r3
  }
}
 800e188:	3728      	adds	r7, #40	; 0x28
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	0801d9cc 	.word	0x0801d9cc
 800e194:	0801db10 	.word	0x0801db10
 800e198:	0801da10 	.word	0x0801da10
 800e19c:	0801db2c 	.word	0x0801db2c
 800e1a0:	20019064 	.word	0x20019064
 800e1a4:	20019060 	.word	0x20019060
 800e1a8:	20019054 	.word	0x20019054
 800e1ac:	20019050 	.word	0x20019050

0800e1b0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b082      	sub	sp, #8
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e1b8:	2101      	movs	r1, #1
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff ff3a 	bl	800e034 <tcp_abandon>
}
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	4613      	mov	r3, r2
 800e1d4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e1d6:	2304      	movs	r3, #4
 800e1d8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d101      	bne.n	800e1e4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e1e0:	4b3e      	ldr	r3, [pc, #248]	; (800e2dc <tcp_bind+0x114>)
 800e1e2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d109      	bne.n	800e1fe <tcp_bind+0x36>
 800e1ea:	4b3d      	ldr	r3, [pc, #244]	; (800e2e0 <tcp_bind+0x118>)
 800e1ec:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e1f0:	493c      	ldr	r1, [pc, #240]	; (800e2e4 <tcp_bind+0x11c>)
 800e1f2:	483d      	ldr	r0, [pc, #244]	; (800e2e8 <tcp_bind+0x120>)
 800e1f4:	f00d f8b8 	bl	801b368 <iprintf>
 800e1f8:	f06f 030f 	mvn.w	r3, #15
 800e1fc:	e06a      	b.n	800e2d4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	7d1b      	ldrb	r3, [r3, #20]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d009      	beq.n	800e21a <tcp_bind+0x52>
 800e206:	4b36      	ldr	r3, [pc, #216]	; (800e2e0 <tcp_bind+0x118>)
 800e208:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e20c:	4937      	ldr	r1, [pc, #220]	; (800e2ec <tcp_bind+0x124>)
 800e20e:	4836      	ldr	r0, [pc, #216]	; (800e2e8 <tcp_bind+0x120>)
 800e210:	f00d f8aa 	bl	801b368 <iprintf>
 800e214:	f06f 0305 	mvn.w	r3, #5
 800e218:	e05c      	b.n	800e2d4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e21a:	88fb      	ldrh	r3, [r7, #6]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d109      	bne.n	800e234 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e220:	f000 f9f8 	bl	800e614 <tcp_new_port>
 800e224:	4603      	mov	r3, r0
 800e226:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e228:	88fb      	ldrh	r3, [r7, #6]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d135      	bne.n	800e29a <tcp_bind+0xd2>
      return ERR_BUF;
 800e22e:	f06f 0301 	mvn.w	r3, #1
 800e232:	e04f      	b.n	800e2d4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e234:	2300      	movs	r3, #0
 800e236:	61fb      	str	r3, [r7, #28]
 800e238:	e02b      	b.n	800e292 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e23a:	4a2d      	ldr	r2, [pc, #180]	; (800e2f0 <tcp_bind+0x128>)
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	61bb      	str	r3, [r7, #24]
 800e246:	e01e      	b.n	800e286 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	8adb      	ldrh	r3, [r3, #22]
 800e24c:	88fa      	ldrh	r2, [r7, #6]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d116      	bne.n	800e280 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e252:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e254:	2b00      	cmp	r3, #0
 800e256:	d010      	beq.n	800e27a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e258:	69bb      	ldr	r3, [r7, #24]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00c      	beq.n	800e27a <tcp_bind+0xb2>
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d009      	beq.n	800e27a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d005      	beq.n	800e27a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e276:	429a      	cmp	r2, r3
 800e278:	d102      	bne.n	800e280 <tcp_bind+0xb8>
              return ERR_USE;
 800e27a:	f06f 0307 	mvn.w	r3, #7
 800e27e:	e029      	b.n	800e2d4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e280:	69bb      	ldr	r3, [r7, #24]
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	61bb      	str	r3, [r7, #24]
 800e286:	69bb      	ldr	r3, [r7, #24]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d1dd      	bne.n	800e248 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	3301      	adds	r3, #1
 800e290:	61fb      	str	r3, [r7, #28]
 800e292:	69fa      	ldr	r2, [r7, #28]
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	429a      	cmp	r2, r3
 800e298:	dbcf      	blt.n	800e23a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00c      	beq.n	800e2ba <tcp_bind+0xf2>
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d008      	beq.n	800e2ba <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d002      	beq.n	800e2b4 <tcp_bind+0xec>
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	e000      	b.n	800e2b6 <tcp_bind+0xee>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	68fa      	ldr	r2, [r7, #12]
 800e2b8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	88fa      	ldrh	r2, [r7, #6]
 800e2be:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e2c0:	4b0c      	ldr	r3, [pc, #48]	; (800e2f4 <tcp_bind+0x12c>)
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	60da      	str	r2, [r3, #12]
 800e2c8:	4a0a      	ldr	r2, [pc, #40]	; (800e2f4 <tcp_bind+0x12c>)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	6013      	str	r3, [r2, #0]
 800e2ce:	f005 fcb5 	bl	8013c3c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3720      	adds	r7, #32
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	0801ffd4 	.word	0x0801ffd4
 800e2e0:	0801d9cc 	.word	0x0801d9cc
 800e2e4:	0801db60 	.word	0x0801db60
 800e2e8:	0801da10 	.word	0x0801da10
 800e2ec:	0801db78 	.word	0x0801db78
 800e2f0:	0801ff9c 	.word	0x0801ff9c
 800e2f4:	20019060 	.word	0x20019060

0800e2f8 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d007      	beq.n	800e318 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e30e:	3301      	adds	r3, #1
 800e310:	b2da      	uxtb	r2, r3
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 800e316:	e002      	b.n	800e31e <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	721a      	strb	r2, [r3, #8]
}
 800e31e:	bf00      	nop
 800e320:	370c      	adds	r7, #12
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr
	...

0800e32c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	4613      	mov	r3, r2
 800e338:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d106      	bne.n	800e34e <tcp_accept_null+0x22>
 800e340:	4b07      	ldr	r3, [pc, #28]	; (800e360 <tcp_accept_null+0x34>)
 800e342:	f240 320f 	movw	r2, #783	; 0x30f
 800e346:	4907      	ldr	r1, [pc, #28]	; (800e364 <tcp_accept_null+0x38>)
 800e348:	4807      	ldr	r0, [pc, #28]	; (800e368 <tcp_accept_null+0x3c>)
 800e34a:	f00d f80d 	bl	801b368 <iprintf>

  tcp_abort(pcb);
 800e34e:	68b8      	ldr	r0, [r7, #8]
 800e350:	f7ff ff2e 	bl	800e1b0 <tcp_abort>

  return ERR_ABRT;
 800e354:	f06f 030c 	mvn.w	r3, #12
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	0801d9cc 	.word	0x0801d9cc
 800e364:	0801dba0 	.word	0x0801dba0
 800e368:	0801da10 	.word	0x0801da10

0800e36c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b088      	sub	sp, #32
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	460b      	mov	r3, r1
 800e376:	607a      	str	r2, [r7, #4]
 800e378:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e37a:	2300      	movs	r3, #0
 800e37c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d109      	bne.n	800e398 <tcp_listen_with_backlog_and_err+0x2c>
 800e384:	4b47      	ldr	r3, [pc, #284]	; (800e4a4 <tcp_listen_with_backlog_and_err+0x138>)
 800e386:	f240 3259 	movw	r2, #857	; 0x359
 800e38a:	4947      	ldr	r1, [pc, #284]	; (800e4a8 <tcp_listen_with_backlog_and_err+0x13c>)
 800e38c:	4847      	ldr	r0, [pc, #284]	; (800e4ac <tcp_listen_with_backlog_and_err+0x140>)
 800e38e:	f00c ffeb 	bl	801b368 <iprintf>
 800e392:	23f0      	movs	r3, #240	; 0xf0
 800e394:	76fb      	strb	r3, [r7, #27]
 800e396:	e079      	b.n	800e48c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	7d1b      	ldrb	r3, [r3, #20]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d009      	beq.n	800e3b4 <tcp_listen_with_backlog_and_err+0x48>
 800e3a0:	4b40      	ldr	r3, [pc, #256]	; (800e4a4 <tcp_listen_with_backlog_and_err+0x138>)
 800e3a2:	f240 325a 	movw	r2, #858	; 0x35a
 800e3a6:	4942      	ldr	r1, [pc, #264]	; (800e4b0 <tcp_listen_with_backlog_and_err+0x144>)
 800e3a8:	4840      	ldr	r0, [pc, #256]	; (800e4ac <tcp_listen_with_backlog_and_err+0x140>)
 800e3aa:	f00c ffdd 	bl	801b368 <iprintf>
 800e3ae:	23f1      	movs	r3, #241	; 0xf1
 800e3b0:	76fb      	strb	r3, [r7, #27]
 800e3b2:	e06b      	b.n	800e48c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	7d1b      	ldrb	r3, [r3, #20]
 800e3b8:	2b01      	cmp	r3, #1
 800e3ba:	d104      	bne.n	800e3c6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e3c0:	23f7      	movs	r3, #247	; 0xf7
 800e3c2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e3c4:	e062      	b.n	800e48c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e3c6:	2002      	movs	r0, #2
 800e3c8:	f7fe f962 	bl	800c690 <memp_malloc>
 800e3cc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d102      	bne.n	800e3da <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e3d4:	23ff      	movs	r3, #255	; 0xff
 800e3d6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e3d8:	e058      	b.n	800e48c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	691a      	ldr	r2, [r3, #16]
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	8ada      	ldrh	r2, [r3, #22]
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	7d5a      	ldrb	r2, [r3, #21]
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	7a5a      	ldrb	r2, [r3, #9]
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	2200      	movs	r2, #0
 800e404:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	7ada      	ldrb	r2, [r3, #11]
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	7a9a      	ldrb	r2, [r3, #10]
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	8adb      	ldrh	r3, [r3, #22]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d021      	beq.n	800e46a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e426:	4b23      	ldr	r3, [pc, #140]	; (800e4b4 <tcp_listen_with_backlog_and_err+0x148>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	68fa      	ldr	r2, [r7, #12]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d105      	bne.n	800e43c <tcp_listen_with_backlog_and_err+0xd0>
 800e430:	4b20      	ldr	r3, [pc, #128]	; (800e4b4 <tcp_listen_with_backlog_and_err+0x148>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	4a1f      	ldr	r2, [pc, #124]	; (800e4b4 <tcp_listen_with_backlog_and_err+0x148>)
 800e438:	6013      	str	r3, [r2, #0]
 800e43a:	e013      	b.n	800e464 <tcp_listen_with_backlog_and_err+0xf8>
 800e43c:	4b1d      	ldr	r3, [pc, #116]	; (800e4b4 <tcp_listen_with_backlog_and_err+0x148>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	617b      	str	r3, [r7, #20]
 800e442:	e00c      	b.n	800e45e <tcp_listen_with_backlog_and_err+0xf2>
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	68fa      	ldr	r2, [r7, #12]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d104      	bne.n	800e458 <tcp_listen_with_backlog_and_err+0xec>
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	68da      	ldr	r2, [r3, #12]
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	60da      	str	r2, [r3, #12]
 800e456:	e005      	b.n	800e464 <tcp_listen_with_backlog_and_err+0xf8>
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	617b      	str	r3, [r7, #20]
 800e45e:	697b      	ldr	r3, [r7, #20]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1ef      	bne.n	800e444 <tcp_listen_with_backlog_and_err+0xd8>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2200      	movs	r2, #0
 800e468:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7ff fb5c 	bl	800db28 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	4a11      	ldr	r2, [pc, #68]	; (800e4b8 <tcp_listen_with_backlog_and_err+0x14c>)
 800e474:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e476:	4b11      	ldr	r3, [pc, #68]	; (800e4bc <tcp_listen_with_backlog_and_err+0x150>)
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	69fb      	ldr	r3, [r7, #28]
 800e47c:	60da      	str	r2, [r3, #12]
 800e47e:	4a0f      	ldr	r2, [pc, #60]	; (800e4bc <tcp_listen_with_backlog_and_err+0x150>)
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	6013      	str	r3, [r2, #0]
 800e484:	f005 fbda 	bl	8013c3c <tcp_timer_needed>
  res = ERR_OK;
 800e488:	2300      	movs	r3, #0
 800e48a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d002      	beq.n	800e498 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	7efa      	ldrb	r2, [r7, #27]
 800e496:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e498:	69fb      	ldr	r3, [r7, #28]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3720      	adds	r7, #32
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	0801d9cc 	.word	0x0801d9cc
 800e4a8:	0801dbc0 	.word	0x0801dbc0
 800e4ac:	0801da10 	.word	0x0801da10
 800e4b0:	0801dbf0 	.word	0x0801dbf0
 800e4b4:	20019060 	.word	0x20019060
 800e4b8:	0800e32d 	.word	0x0800e32d
 800e4bc:	2001905c 	.word	0x2001905c

0800e4c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b084      	sub	sp, #16
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d106      	bne.n	800e4dc <tcp_update_rcv_ann_wnd+0x1c>
 800e4ce:	4b25      	ldr	r3, [pc, #148]	; (800e564 <tcp_update_rcv_ann_wnd+0xa4>)
 800e4d0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e4d4:	4924      	ldr	r1, [pc, #144]	; (800e568 <tcp_update_rcv_ann_wnd+0xa8>)
 800e4d6:	4825      	ldr	r0, [pc, #148]	; (800e56c <tcp_update_rcv_ann_wnd+0xac>)
 800e4d8:	f00c ff46 	bl	801b368 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e4e4:	4413      	add	r3, r2
 800e4e6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e4f0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e4f4:	bf28      	it	cs
 800e4f6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e4fa:	b292      	uxth	r2, r2
 800e4fc:	4413      	add	r3, r2
 800e4fe:	68fa      	ldr	r2, [r7, #12]
 800e500:	1ad3      	subs	r3, r2, r3
 800e502:	2b00      	cmp	r3, #0
 800e504:	db08      	blt.n	800e518 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e512:	68fa      	ldr	r2, [r7, #12]
 800e514:	1ad3      	subs	r3, r2, r3
 800e516:	e020      	b.n	800e55a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	dd03      	ble.n	800e52e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e52c:	e014      	b.n	800e558 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e536:	1ad3      	subs	r3, r2, r3
 800e538:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e540:	d306      	bcc.n	800e550 <tcp_update_rcv_ann_wnd+0x90>
 800e542:	4b08      	ldr	r3, [pc, #32]	; (800e564 <tcp_update_rcv_ann_wnd+0xa4>)
 800e544:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e548:	4909      	ldr	r1, [pc, #36]	; (800e570 <tcp_update_rcv_ann_wnd+0xb0>)
 800e54a:	4808      	ldr	r0, [pc, #32]	; (800e56c <tcp_update_rcv_ann_wnd+0xac>)
 800e54c:	f00c ff0c 	bl	801b368 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	b29a      	uxth	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e558:	2300      	movs	r3, #0
  }
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	0801d9cc 	.word	0x0801d9cc
 800e568:	0801dc28 	.word	0x0801dc28
 800e56c:	0801da10 	.word	0x0801da10
 800e570:	0801dc4c 	.word	0x0801dc4c

0800e574 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	460b      	mov	r3, r1
 800e57e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d107      	bne.n	800e596 <tcp_recved+0x22>
 800e586:	4b1f      	ldr	r3, [pc, #124]	; (800e604 <tcp_recved+0x90>)
 800e588:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e58c:	491e      	ldr	r1, [pc, #120]	; (800e608 <tcp_recved+0x94>)
 800e58e:	481f      	ldr	r0, [pc, #124]	; (800e60c <tcp_recved+0x98>)
 800e590:	f00c feea 	bl	801b368 <iprintf>
 800e594:	e032      	b.n	800e5fc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	7d1b      	ldrb	r3, [r3, #20]
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d106      	bne.n	800e5ac <tcp_recved+0x38>
 800e59e:	4b19      	ldr	r3, [pc, #100]	; (800e604 <tcp_recved+0x90>)
 800e5a0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e5a4:	491a      	ldr	r1, [pc, #104]	; (800e610 <tcp_recved+0x9c>)
 800e5a6:	4819      	ldr	r0, [pc, #100]	; (800e60c <tcp_recved+0x98>)
 800e5a8:	f00c fede 	bl	801b368 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e5b0:	887b      	ldrh	r3, [r7, #2]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e5b6:	89fb      	ldrh	r3, [r7, #14]
 800e5b8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e5bc:	d804      	bhi.n	800e5c8 <tcp_recved+0x54>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e5c2:	89fa      	ldrh	r2, [r7, #14]
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d204      	bcs.n	800e5d2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e5ce:	851a      	strh	r2, [r3, #40]	; 0x28
 800e5d0:	e002      	b.n	800e5d8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	89fa      	ldrh	r2, [r7, #14]
 800e5d6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7ff ff71 	bl	800e4c0 <tcp_update_rcv_ann_wnd>
 800e5de:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e5e6:	d309      	bcc.n	800e5fc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	8b5b      	ldrh	r3, [r3, #26]
 800e5ec:	f043 0302 	orr.w	r3, r3, #2
 800e5f0:	b29a      	uxth	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f004 fbaa 	bl	8012d50 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	0801d9cc 	.word	0x0801d9cc
 800e608:	0801dc68 	.word	0x0801dc68
 800e60c:	0801da10 	.word	0x0801da10
 800e610:	0801dc80 	.word	0x0801dc80

0800e614 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e61a:	2300      	movs	r3, #0
 800e61c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e61e:	4b1e      	ldr	r3, [pc, #120]	; (800e698 <tcp_new_port+0x84>)
 800e620:	881b      	ldrh	r3, [r3, #0]
 800e622:	3301      	adds	r3, #1
 800e624:	b29a      	uxth	r2, r3
 800e626:	4b1c      	ldr	r3, [pc, #112]	; (800e698 <tcp_new_port+0x84>)
 800e628:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e62a:	4b1b      	ldr	r3, [pc, #108]	; (800e698 <tcp_new_port+0x84>)
 800e62c:	881b      	ldrh	r3, [r3, #0]
 800e62e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e632:	4293      	cmp	r3, r2
 800e634:	d103      	bne.n	800e63e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e636:	4b18      	ldr	r3, [pc, #96]	; (800e698 <tcp_new_port+0x84>)
 800e638:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e63c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e63e:	2300      	movs	r3, #0
 800e640:	71fb      	strb	r3, [r7, #7]
 800e642:	e01e      	b.n	800e682 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e644:	79fb      	ldrb	r3, [r7, #7]
 800e646:	4a15      	ldr	r2, [pc, #84]	; (800e69c <tcp_new_port+0x88>)
 800e648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	603b      	str	r3, [r7, #0]
 800e650:	e011      	b.n	800e676 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	8ada      	ldrh	r2, [r3, #22]
 800e656:	4b10      	ldr	r3, [pc, #64]	; (800e698 <tcp_new_port+0x84>)
 800e658:	881b      	ldrh	r3, [r3, #0]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d108      	bne.n	800e670 <tcp_new_port+0x5c>
        n++;
 800e65e:	88bb      	ldrh	r3, [r7, #4]
 800e660:	3301      	adds	r3, #1
 800e662:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e664:	88bb      	ldrh	r3, [r7, #4]
 800e666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e66a:	d3d8      	bcc.n	800e61e <tcp_new_port+0xa>
          return 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	e00d      	b.n	800e68c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	603b      	str	r3, [r7, #0]
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1ea      	bne.n	800e652 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	3301      	adds	r3, #1
 800e680:	71fb      	strb	r3, [r7, #7]
 800e682:	79fb      	ldrb	r3, [r7, #7]
 800e684:	2b03      	cmp	r3, #3
 800e686:	d9dd      	bls.n	800e644 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e688:	4b03      	ldr	r3, [pc, #12]	; (800e698 <tcp_new_port+0x84>)
 800e68a:	881b      	ldrh	r3, [r3, #0]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr
 800e698:	20000024 	.word	0x20000024
 800e69c:	0801ff9c 	.word	0x0801ff9c

0800e6a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e6a0:	b5b0      	push	{r4, r5, r7, lr}
 800e6a2:	b090      	sub	sp, #64	; 0x40
 800e6a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e6ac:	4b94      	ldr	r3, [pc, #592]	; (800e900 <tcp_slowtmr+0x260>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	4a93      	ldr	r2, [pc, #588]	; (800e900 <tcp_slowtmr+0x260>)
 800e6b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e6b6:	4b93      	ldr	r3, [pc, #588]	; (800e904 <tcp_slowtmr+0x264>)
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	b2da      	uxtb	r2, r3
 800e6be:	4b91      	ldr	r3, [pc, #580]	; (800e904 <tcp_slowtmr+0x264>)
 800e6c0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e6c6:	4b90      	ldr	r3, [pc, #576]	; (800e908 <tcp_slowtmr+0x268>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e6cc:	e29f      	b.n	800ec0e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d0:	7d1b      	ldrb	r3, [r3, #20]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d106      	bne.n	800e6e4 <tcp_slowtmr+0x44>
 800e6d6:	4b8d      	ldr	r3, [pc, #564]	; (800e90c <tcp_slowtmr+0x26c>)
 800e6d8:	f240 42be 	movw	r2, #1214	; 0x4be
 800e6dc:	498c      	ldr	r1, [pc, #560]	; (800e910 <tcp_slowtmr+0x270>)
 800e6de:	488d      	ldr	r0, [pc, #564]	; (800e914 <tcp_slowtmr+0x274>)
 800e6e0:	f00c fe42 	bl	801b368 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d106      	bne.n	800e6fa <tcp_slowtmr+0x5a>
 800e6ec:	4b87      	ldr	r3, [pc, #540]	; (800e90c <tcp_slowtmr+0x26c>)
 800e6ee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e6f2:	4989      	ldr	r1, [pc, #548]	; (800e918 <tcp_slowtmr+0x278>)
 800e6f4:	4887      	ldr	r0, [pc, #540]	; (800e914 <tcp_slowtmr+0x274>)
 800e6f6:	f00c fe37 	bl	801b368 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fc:	7d1b      	ldrb	r3, [r3, #20]
 800e6fe:	2b0a      	cmp	r3, #10
 800e700:	d106      	bne.n	800e710 <tcp_slowtmr+0x70>
 800e702:	4b82      	ldr	r3, [pc, #520]	; (800e90c <tcp_slowtmr+0x26c>)
 800e704:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e708:	4984      	ldr	r1, [pc, #528]	; (800e91c <tcp_slowtmr+0x27c>)
 800e70a:	4882      	ldr	r0, [pc, #520]	; (800e914 <tcp_slowtmr+0x274>)
 800e70c:	f00c fe2c 	bl	801b368 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e712:	7f9a      	ldrb	r2, [r3, #30]
 800e714:	4b7b      	ldr	r3, [pc, #492]	; (800e904 <tcp_slowtmr+0x264>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d105      	bne.n	800e728 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e726:	e272      	b.n	800ec0e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e728:	4b76      	ldr	r3, [pc, #472]	; (800e904 <tcp_slowtmr+0x264>)
 800e72a:	781a      	ldrb	r2, [r3, #0]
 800e72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e730:	2300      	movs	r3, #0
 800e732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73e:	7d1b      	ldrb	r3, [r3, #20]
 800e740:	2b02      	cmp	r3, #2
 800e742:	d10a      	bne.n	800e75a <tcp_slowtmr+0xba>
 800e744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e74a:	2b05      	cmp	r3, #5
 800e74c:	d905      	bls.n	800e75a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e74e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e752:	3301      	adds	r3, #1
 800e754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e758:	e11e      	b.n	800e998 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e760:	2b0b      	cmp	r3, #11
 800e762:	d905      	bls.n	800e770 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e768:	3301      	adds	r3, #1
 800e76a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e76e:	e113      	b.n	800e998 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e772:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e776:	2b00      	cmp	r3, #0
 800e778:	d075      	beq.n	800e866 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d006      	beq.n	800e790 <tcp_slowtmr+0xf0>
 800e782:	4b62      	ldr	r3, [pc, #392]	; (800e90c <tcp_slowtmr+0x26c>)
 800e784:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e788:	4965      	ldr	r1, [pc, #404]	; (800e920 <tcp_slowtmr+0x280>)
 800e78a:	4862      	ldr	r0, [pc, #392]	; (800e914 <tcp_slowtmr+0x274>)
 800e78c:	f00c fdec 	bl	801b368 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e794:	2b00      	cmp	r3, #0
 800e796:	d106      	bne.n	800e7a6 <tcp_slowtmr+0x106>
 800e798:	4b5c      	ldr	r3, [pc, #368]	; (800e90c <tcp_slowtmr+0x26c>)
 800e79a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e79e:	4961      	ldr	r1, [pc, #388]	; (800e924 <tcp_slowtmr+0x284>)
 800e7a0:	485c      	ldr	r0, [pc, #368]	; (800e914 <tcp_slowtmr+0x274>)
 800e7a2:	f00c fde1 	bl	801b368 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e7ac:	2b0b      	cmp	r3, #11
 800e7ae:	d905      	bls.n	800e7bc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7ba:	e0ed      	b.n	800e998 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e7c2:	3b01      	subs	r3, #1
 800e7c4:	4a58      	ldr	r2, [pc, #352]	; (800e928 <tcp_slowtmr+0x288>)
 800e7c6:	5cd3      	ldrb	r3, [r2, r3]
 800e7c8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e7d0:	7c7a      	ldrb	r2, [r7, #17]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d907      	bls.n	800e7e6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e7dc:	3301      	adds	r3, #1
 800e7de:	b2da      	uxtb	r2, r3
 800e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e7ec:	7c7a      	ldrb	r2, [r7, #17]
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	f200 80d2 	bhi.w	800e998 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d108      	bne.n	800e814 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e804:	f005 f94c 	bl	8013aa0 <tcp_zero_window_probe>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d014      	beq.n	800e838 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e80e:	2300      	movs	r3, #0
 800e810:	623b      	str	r3, [r7, #32]
 800e812:	e011      	b.n	800e838 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e81a:	4619      	mov	r1, r3
 800e81c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e81e:	f004 f811 	bl	8012844 <tcp_split_unsent_seg>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d107      	bne.n	800e838 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e82a:	f004 fa91 	bl	8012d50 <tcp_output>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d101      	bne.n	800e838 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e834:	2300      	movs	r3, #0
 800e836:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f000 80ac 	beq.w	800e998 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e842:	2200      	movs	r2, #0
 800e844:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e84e:	2b06      	cmp	r3, #6
 800e850:	f200 80a2 	bhi.w	800e998 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e85a:	3301      	adds	r3, #1
 800e85c:	b2da      	uxtb	r2, r3
 800e85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e860:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e864:	e098      	b.n	800e998 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e868:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	db0f      	blt.n	800e890 <tcp_slowtmr+0x1f0>
 800e870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e872:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e876:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d008      	beq.n	800e890 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e880:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e884:	b29b      	uxth	r3, r3
 800e886:	3301      	adds	r3, #1
 800e888:	b29b      	uxth	r3, r3
 800e88a:	b21a      	sxth	r2, r3
 800e88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e892:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e898:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e89c:	429a      	cmp	r2, r3
 800e89e:	db7b      	blt.n	800e998 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e8a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8a2:	f004 fd47 	bl	8013334 <tcp_rexmit_rto_prepare>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d007      	beq.n	800e8bc <tcp_slowtmr+0x21c>
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d171      	bne.n	800e998 <tcp_slowtmr+0x2f8>
 800e8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d06d      	beq.n	800e998 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	7d1b      	ldrb	r3, [r3, #20]
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	d03a      	beq.n	800e93a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8ca:	2b0c      	cmp	r3, #12
 800e8cc:	bf28      	it	cs
 800e8ce:	230c      	movcs	r3, #12
 800e8d0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e8d8:	10db      	asrs	r3, r3, #3
 800e8da:	b21b      	sxth	r3, r3
 800e8dc:	461a      	mov	r2, r3
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e8e4:	4413      	add	r3, r2
 800e8e6:	7efa      	ldrb	r2, [r7, #27]
 800e8e8:	4910      	ldr	r1, [pc, #64]	; (800e92c <tcp_slowtmr+0x28c>)
 800e8ea:	5c8a      	ldrb	r2, [r1, r2]
 800e8ec:	4093      	lsls	r3, r2
 800e8ee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	dc1a      	bgt.n	800e930 <tcp_slowtmr+0x290>
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	b21a      	sxth	r2, r3
 800e8fe:	e019      	b.n	800e934 <tcp_slowtmr+0x294>
 800e900:	20019058 	.word	0x20019058
 800e904:	20010772 	.word	0x20010772
 800e908:	20019054 	.word	0x20019054
 800e90c:	0801d9cc 	.word	0x0801d9cc
 800e910:	0801dd10 	.word	0x0801dd10
 800e914:	0801da10 	.word	0x0801da10
 800e918:	0801dd3c 	.word	0x0801dd3c
 800e91c:	0801dd68 	.word	0x0801dd68
 800e920:	0801dd98 	.word	0x0801dd98
 800e924:	0801ddcc 	.word	0x0801ddcc
 800e928:	0801ff94 	.word	0x0801ff94
 800e92c:	0801ff84 	.word	0x0801ff84
 800e930:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93c:	2200      	movs	r2, #0
 800e93e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e942:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e94c:	4293      	cmp	r3, r2
 800e94e:	bf28      	it	cs
 800e950:	4613      	movcs	r3, r2
 800e952:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e954:	8a7b      	ldrh	r3, [r7, #18]
 800e956:	085b      	lsrs	r3, r3, #1
 800e958:	b29a      	uxth	r2, r3
 800e95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e962:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e96a:	005b      	lsls	r3, r3, #1
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	429a      	cmp	r2, r3
 800e970:	d206      	bcs.n	800e980 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e976:	005b      	lsls	r3, r3, #1
 800e978:	b29a      	uxth	r2, r3
 800e97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e986:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98c:	2200      	movs	r2, #0
 800e98e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e994:	f004 fd3e 	bl	8013414 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99a:	7d1b      	ldrb	r3, [r3, #20]
 800e99c:	2b06      	cmp	r3, #6
 800e99e:	d111      	bne.n	800e9c4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a2:	8b5b      	ldrh	r3, [r3, #26]
 800e9a4:	f003 0310 	and.w	r3, r3, #16
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00b      	beq.n	800e9c4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e9ac:	4b9d      	ldr	r3, [pc, #628]	; (800ec24 <tcp_slowtmr+0x584>)
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b2:	6a1b      	ldr	r3, [r3, #32]
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	2b28      	cmp	r3, #40	; 0x28
 800e9b8:	d904      	bls.n	800e9c4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e9ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9be:	3301      	adds	r3, #1
 800e9c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c6:	7a5b      	ldrb	r3, [r3, #9]
 800e9c8:	f003 0308 	and.w	r3, r3, #8
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d04c      	beq.n	800ea6a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e9d4:	2b04      	cmp	r3, #4
 800e9d6:	d003      	beq.n	800e9e0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9da:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e9dc:	2b07      	cmp	r3, #7
 800e9de:	d144      	bne.n	800ea6a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e9e0:	4b90      	ldr	r3, [pc, #576]	; (800ec24 <tcp_slowtmr+0x584>)
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e6:	6a1b      	ldr	r3, [r3, #32]
 800e9e8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e9f0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e9f4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e9f8:	498b      	ldr	r1, [pc, #556]	; (800ec28 <tcp_slowtmr+0x588>)
 800e9fa:	fba1 1303 	umull	r1, r3, r1, r3
 800e9fe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d90a      	bls.n	800ea1a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ea04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea08:	3301      	adds	r3, #1
 800ea0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ea0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea12:	3301      	adds	r3, #1
 800ea14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ea18:	e027      	b.n	800ea6a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea1a:	4b82      	ldr	r3, [pc, #520]	; (800ec24 <tcp_slowtmr+0x584>)
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	6a1b      	ldr	r3, [r3, #32]
 800ea22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ea24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea26:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ea2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ea30:	4618      	mov	r0, r3
 800ea32:	4b7e      	ldr	r3, [pc, #504]	; (800ec2c <tcp_slowtmr+0x58c>)
 800ea34:	fb03 f300 	mul.w	r3, r3, r0
 800ea38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ea3a:	497b      	ldr	r1, [pc, #492]	; (800ec28 <tcp_slowtmr+0x588>)
 800ea3c:	fba1 1303 	umull	r1, r3, r1, r3
 800ea40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d911      	bls.n	800ea6a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ea46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea48:	f004 ffea 	bl	8013a20 <tcp_keepalive>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ea52:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d107      	bne.n	800ea6a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ea5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ea60:	3301      	adds	r3, #1
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea66:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ea6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d011      	beq.n	800ea96 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ea72:	4b6c      	ldr	r3, [pc, #432]	; (800ec24 <tcp_slowtmr+0x584>)
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea78:	6a1b      	ldr	r3, [r3, #32]
 800ea7a:	1ad2      	subs	r2, r2, r3
 800ea7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ea82:	4619      	mov	r1, r3
 800ea84:	460b      	mov	r3, r1
 800ea86:	005b      	lsls	r3, r3, #1
 800ea88:	440b      	add	r3, r1
 800ea8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d302      	bcc.n	800ea96 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ea90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea92:	f000 fea9 	bl	800f7e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ea96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea98:	7d1b      	ldrb	r3, [r3, #20]
 800ea9a:	2b03      	cmp	r3, #3
 800ea9c:	d10b      	bne.n	800eab6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ea9e:	4b61      	ldr	r3, [pc, #388]	; (800ec24 <tcp_slowtmr+0x584>)
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa4:	6a1b      	ldr	r3, [r3, #32]
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	2b28      	cmp	r3, #40	; 0x28
 800eaaa:	d904      	bls.n	800eab6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800eaac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eab0:	3301      	adds	r3, #1
 800eab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800eab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab8:	7d1b      	ldrb	r3, [r3, #20]
 800eaba:	2b09      	cmp	r3, #9
 800eabc:	d10b      	bne.n	800ead6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eabe:	4b59      	ldr	r3, [pc, #356]	; (800ec24 <tcp_slowtmr+0x584>)
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	6a1b      	ldr	r3, [r3, #32]
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	2bf0      	cmp	r3, #240	; 0xf0
 800eaca:	d904      	bls.n	800ead6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800eacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ead0:	3301      	adds	r3, #1
 800ead2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ead6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d060      	beq.n	800eba0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800eade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eae4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800eae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eae8:	f000 fcca 	bl	800f480 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800eaec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d010      	beq.n	800eb14 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800eaf2:	4b4f      	ldr	r3, [pc, #316]	; (800ec30 <tcp_slowtmr+0x590>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d106      	bne.n	800eb0a <tcp_slowtmr+0x46a>
 800eafc:	4b4d      	ldr	r3, [pc, #308]	; (800ec34 <tcp_slowtmr+0x594>)
 800eafe:	f240 526d 	movw	r2, #1389	; 0x56d
 800eb02:	494d      	ldr	r1, [pc, #308]	; (800ec38 <tcp_slowtmr+0x598>)
 800eb04:	484d      	ldr	r0, [pc, #308]	; (800ec3c <tcp_slowtmr+0x59c>)
 800eb06:	f00c fc2f 	bl	801b368 <iprintf>
        prev->next = pcb->next;
 800eb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0c:	68da      	ldr	r2, [r3, #12]
 800eb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb10:	60da      	str	r2, [r3, #12]
 800eb12:	e00f      	b.n	800eb34 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800eb14:	4b46      	ldr	r3, [pc, #280]	; (800ec30 <tcp_slowtmr+0x590>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d006      	beq.n	800eb2c <tcp_slowtmr+0x48c>
 800eb1e:	4b45      	ldr	r3, [pc, #276]	; (800ec34 <tcp_slowtmr+0x594>)
 800eb20:	f240 5271 	movw	r2, #1393	; 0x571
 800eb24:	4946      	ldr	r1, [pc, #280]	; (800ec40 <tcp_slowtmr+0x5a0>)
 800eb26:	4845      	ldr	r0, [pc, #276]	; (800ec3c <tcp_slowtmr+0x59c>)
 800eb28:	f00c fc1e 	bl	801b368 <iprintf>
        tcp_active_pcbs = pcb->next;
 800eb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	4a3f      	ldr	r2, [pc, #252]	; (800ec30 <tcp_slowtmr+0x590>)
 800eb32:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800eb34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d013      	beq.n	800eb64 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb3e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800eb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb42:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800eb44:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800eb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb48:	3304      	adds	r3, #4
 800eb4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb4c:	8ad2      	ldrh	r2, [r2, #22]
 800eb4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb50:	8b09      	ldrh	r1, [r1, #24]
 800eb52:	9102      	str	r1, [sp, #8]
 800eb54:	9201      	str	r2, [sp, #4]
 800eb56:	9300      	str	r3, [sp, #0]
 800eb58:	462b      	mov	r3, r5
 800eb5a:	4622      	mov	r2, r4
 800eb5c:	4601      	mov	r1, r0
 800eb5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb60:	f004 feaa 	bl	80138b8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800eb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800eb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6c:	7d1b      	ldrb	r3, [r3, #20]
 800eb6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800eb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800eb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800eb7a:	6838      	ldr	r0, [r7, #0]
 800eb7c:	f7fe ffd4 	bl	800db28 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800eb80:	4b30      	ldr	r3, [pc, #192]	; (800ec44 <tcp_slowtmr+0x5a4>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d004      	beq.n	800eb96 <tcp_slowtmr+0x4f6>
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	f06f 010c 	mvn.w	r1, #12
 800eb92:	68b8      	ldr	r0, [r7, #8]
 800eb94:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800eb96:	4b2b      	ldr	r3, [pc, #172]	; (800ec44 <tcp_slowtmr+0x5a4>)
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d037      	beq.n	800ec0e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800eb9e:	e590      	b.n	800e6c2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800eba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ebaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebac:	7f1b      	ldrb	r3, [r3, #28]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	b2da      	uxtb	r2, r3
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ebb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb8:	7f1a      	ldrb	r2, [r3, #28]
 800ebba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbc:	7f5b      	ldrb	r3, [r3, #29]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d325      	bcc.n	800ec0e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ebc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ebc8:	4b1e      	ldr	r3, [pc, #120]	; (800ec44 <tcp_slowtmr+0x5a4>)
 800ebca:	2200      	movs	r2, #0
 800ebcc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ebce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00b      	beq.n	800ebf0 <tcp_slowtmr+0x550>
 800ebd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebe0:	6912      	ldr	r2, [r2, #16]
 800ebe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ebe4:	4610      	mov	r0, r2
 800ebe6:	4798      	blx	r3
 800ebe8:	4603      	mov	r3, r0
 800ebea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ebee:	e002      	b.n	800ebf6 <tcp_slowtmr+0x556>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ebf6:	4b13      	ldr	r3, [pc, #76]	; (800ec44 <tcp_slowtmr+0x5a4>)
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d000      	beq.n	800ec00 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ebfe:	e560      	b.n	800e6c2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ec00:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d102      	bne.n	800ec0e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ec08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec0a:	f004 f8a1 	bl	8012d50 <tcp_output>
  while (pcb != NULL) {
 800ec0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f47f ad5c 	bne.w	800e6ce <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ec16:	2300      	movs	r3, #0
 800ec18:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ec1a:	4b0b      	ldr	r3, [pc, #44]	; (800ec48 <tcp_slowtmr+0x5a8>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ec20:	e067      	b.n	800ecf2 <tcp_slowtmr+0x652>
 800ec22:	bf00      	nop
 800ec24:	20019058 	.word	0x20019058
 800ec28:	10624dd3 	.word	0x10624dd3
 800ec2c:	000124f8 	.word	0x000124f8
 800ec30:	20019054 	.word	0x20019054
 800ec34:	0801d9cc 	.word	0x0801d9cc
 800ec38:	0801de04 	.word	0x0801de04
 800ec3c:	0801da10 	.word	0x0801da10
 800ec40:	0801de30 	.word	0x0801de30
 800ec44:	20019050 	.word	0x20019050
 800ec48:	20019064 	.word	0x20019064
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ec4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4e:	7d1b      	ldrb	r3, [r3, #20]
 800ec50:	2b0a      	cmp	r3, #10
 800ec52:	d006      	beq.n	800ec62 <tcp_slowtmr+0x5c2>
 800ec54:	4b2b      	ldr	r3, [pc, #172]	; (800ed04 <tcp_slowtmr+0x664>)
 800ec56:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ec5a:	492b      	ldr	r1, [pc, #172]	; (800ed08 <tcp_slowtmr+0x668>)
 800ec5c:	482b      	ldr	r0, [pc, #172]	; (800ed0c <tcp_slowtmr+0x66c>)
 800ec5e:	f00c fb83 	bl	801b368 <iprintf>
    pcb_remove = 0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ec68:	4b29      	ldr	r3, [pc, #164]	; (800ed10 <tcp_slowtmr+0x670>)
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6e:	6a1b      	ldr	r3, [r3, #32]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	2bf0      	cmp	r3, #240	; 0xf0
 800ec74:	d904      	bls.n	800ec80 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ec76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ec80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d02f      	beq.n	800ece8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ec88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec8a:	f000 fbf9 	bl	800f480 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ec8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d010      	beq.n	800ecb6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ec94:	4b1f      	ldr	r3, [pc, #124]	; (800ed14 <tcp_slowtmr+0x674>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d106      	bne.n	800ecac <tcp_slowtmr+0x60c>
 800ec9e:	4b19      	ldr	r3, [pc, #100]	; (800ed04 <tcp_slowtmr+0x664>)
 800eca0:	f240 52af 	movw	r2, #1455	; 0x5af
 800eca4:	491c      	ldr	r1, [pc, #112]	; (800ed18 <tcp_slowtmr+0x678>)
 800eca6:	4819      	ldr	r0, [pc, #100]	; (800ed0c <tcp_slowtmr+0x66c>)
 800eca8:	f00c fb5e 	bl	801b368 <iprintf>
        prev->next = pcb->next;
 800ecac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecae:	68da      	ldr	r2, [r3, #12]
 800ecb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb2:	60da      	str	r2, [r3, #12]
 800ecb4:	e00f      	b.n	800ecd6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ecb6:	4b17      	ldr	r3, [pc, #92]	; (800ed14 <tcp_slowtmr+0x674>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d006      	beq.n	800ecce <tcp_slowtmr+0x62e>
 800ecc0:	4b10      	ldr	r3, [pc, #64]	; (800ed04 <tcp_slowtmr+0x664>)
 800ecc2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ecc6:	4915      	ldr	r1, [pc, #84]	; (800ed1c <tcp_slowtmr+0x67c>)
 800ecc8:	4810      	ldr	r0, [pc, #64]	; (800ed0c <tcp_slowtmr+0x66c>)
 800ecca:	f00c fb4d 	bl	801b368 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ecce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	4a10      	ldr	r2, [pc, #64]	; (800ed14 <tcp_slowtmr+0x674>)
 800ecd4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ecd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ecda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ece0:	69f8      	ldr	r0, [r7, #28]
 800ece2:	f7fe ff21 	bl	800db28 <tcp_free>
 800ece6:	e004      	b.n	800ecf2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ece8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecee:	68db      	ldr	r3, [r3, #12]
 800ecf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d1a9      	bne.n	800ec4c <tcp_slowtmr+0x5ac>
    }
  }
}
 800ecf8:	bf00      	nop
 800ecfa:	bf00      	nop
 800ecfc:	3730      	adds	r7, #48	; 0x30
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bdb0      	pop	{r4, r5, r7, pc}
 800ed02:	bf00      	nop
 800ed04:	0801d9cc 	.word	0x0801d9cc
 800ed08:	0801de5c 	.word	0x0801de5c
 800ed0c:	0801da10 	.word	0x0801da10
 800ed10:	20019058 	.word	0x20019058
 800ed14:	20019064 	.word	0x20019064
 800ed18:	0801de8c 	.word	0x0801de8c
 800ed1c:	0801deb4 	.word	0x0801deb4

0800ed20 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ed26:	4b2d      	ldr	r3, [pc, #180]	; (800eddc <tcp_fasttmr+0xbc>)
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	4b2b      	ldr	r3, [pc, #172]	; (800eddc <tcp_fasttmr+0xbc>)
 800ed30:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ed32:	4b2b      	ldr	r3, [pc, #172]	; (800ede0 <tcp_fasttmr+0xc0>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed38:	e048      	b.n	800edcc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	7f9a      	ldrb	r2, [r3, #30]
 800ed3e:	4b27      	ldr	r3, [pc, #156]	; (800eddc <tcp_fasttmr+0xbc>)
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d03f      	beq.n	800edc6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ed46:	4b25      	ldr	r3, [pc, #148]	; (800eddc <tcp_fasttmr+0xbc>)
 800ed48:	781a      	ldrb	r2, [r3, #0]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	8b5b      	ldrh	r3, [r3, #26]
 800ed52:	f003 0301 	and.w	r3, r3, #1
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d010      	beq.n	800ed7c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	8b5b      	ldrh	r3, [r3, #26]
 800ed5e:	f043 0302 	orr.w	r3, r3, #2
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f003 fff1 	bl	8012d50 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	8b5b      	ldrh	r3, [r3, #26]
 800ed72:	f023 0303 	bic.w	r3, r3, #3
 800ed76:	b29a      	uxth	r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	8b5b      	ldrh	r3, [r3, #26]
 800ed80:	f003 0308 	and.w	r3, r3, #8
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d009      	beq.n	800ed9c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	8b5b      	ldrh	r3, [r3, #26]
 800ed8c:	f023 0308 	bic.w	r3, r3, #8
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f7ff f85a 	bl	800de50 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	68db      	ldr	r3, [r3, #12]
 800eda0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d00a      	beq.n	800edc0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800edaa:	4b0e      	ldr	r3, [pc, #56]	; (800ede4 <tcp_fasttmr+0xc4>)
 800edac:	2200      	movs	r2, #0
 800edae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 f819 	bl	800ede8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800edb6:	4b0b      	ldr	r3, [pc, #44]	; (800ede4 <tcp_fasttmr+0xc4>)
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d000      	beq.n	800edc0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800edbe:	e7b8      	b.n	800ed32 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	607b      	str	r3, [r7, #4]
 800edc4:	e002      	b.n	800edcc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1b3      	bne.n	800ed3a <tcp_fasttmr+0x1a>
    }
  }
}
 800edd2:	bf00      	nop
 800edd4:	bf00      	nop
 800edd6:	3708      	adds	r7, #8
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}
 800eddc:	20010772 	.word	0x20010772
 800ede0:	20019054 	.word	0x20019054
 800ede4:	20019050 	.word	0x20019050

0800ede8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ede8:	b590      	push	{r4, r7, lr}
 800edea:	b085      	sub	sp, #20
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d109      	bne.n	800ee0a <tcp_process_refused_data+0x22>
 800edf6:	4b37      	ldr	r3, [pc, #220]	; (800eed4 <tcp_process_refused_data+0xec>)
 800edf8:	f240 6209 	movw	r2, #1545	; 0x609
 800edfc:	4936      	ldr	r1, [pc, #216]	; (800eed8 <tcp_process_refused_data+0xf0>)
 800edfe:	4837      	ldr	r0, [pc, #220]	; (800eedc <tcp_process_refused_data+0xf4>)
 800ee00:	f00c fab2 	bl	801b368 <iprintf>
 800ee04:	f06f 030f 	mvn.w	r3, #15
 800ee08:	e060      	b.n	800eecc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee0e:	7b5b      	ldrb	r3, [r3, #13]
 800ee10:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee16:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00b      	beq.n	800ee40 <tcp_process_refused_data+0x58>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6918      	ldr	r0, [r3, #16]
 800ee32:	2300      	movs	r3, #0
 800ee34:	68ba      	ldr	r2, [r7, #8]
 800ee36:	6879      	ldr	r1, [r7, #4]
 800ee38:	47a0      	blx	r4
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	73fb      	strb	r3, [r7, #15]
 800ee3e:	e007      	b.n	800ee50 <tcp_process_refused_data+0x68>
 800ee40:	2300      	movs	r3, #0
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	6879      	ldr	r1, [r7, #4]
 800ee46:	2000      	movs	r0, #0
 800ee48:	f000 f8a4 	bl	800ef94 <tcp_recv_null>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ee50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d12a      	bne.n	800eeae <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ee58:	7bbb      	ldrb	r3, [r7, #14]
 800ee5a:	f003 0320 	and.w	r3, r3, #32
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d033      	beq.n	800eeca <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ee6a:	d005      	beq.n	800ee78 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee70:	3301      	adds	r3, #1
 800ee72:	b29a      	uxth	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d00b      	beq.n	800ee9a <tcp_process_refused_data+0xb2>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6918      	ldr	r0, [r3, #16]
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	2200      	movs	r2, #0
 800ee90:	6879      	ldr	r1, [r7, #4]
 800ee92:	47a0      	blx	r4
 800ee94:	4603      	mov	r3, r0
 800ee96:	73fb      	strb	r3, [r7, #15]
 800ee98:	e001      	b.n	800ee9e <tcp_process_refused_data+0xb6>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ee9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eea2:	f113 0f0d 	cmn.w	r3, #13
 800eea6:	d110      	bne.n	800eeca <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800eea8:	f06f 030c 	mvn.w	r3, #12
 800eeac:	e00e      	b.n	800eecc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800eeae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eeb2:	f113 0f0d 	cmn.w	r3, #13
 800eeb6:	d102      	bne.n	800eebe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800eeb8:	f06f 030c 	mvn.w	r3, #12
 800eebc:	e006      	b.n	800eecc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	68ba      	ldr	r2, [r7, #8]
 800eec2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800eec4:	f06f 0304 	mvn.w	r3, #4
 800eec8:	e000      	b.n	800eecc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800eeca:	2300      	movs	r3, #0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3714      	adds	r7, #20
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd90      	pop	{r4, r7, pc}
 800eed4:	0801d9cc 	.word	0x0801d9cc
 800eed8:	0801dedc 	.word	0x0801dedc
 800eedc:	0801da10 	.word	0x0801da10

0800eee0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b084      	sub	sp, #16
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800eee8:	e007      	b.n	800eefa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 f80a 	bl	800ef0a <tcp_seg_free>
    seg = next;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1f4      	bne.n	800eeea <tcp_segs_free+0xa>
  }
}
 800ef00:	bf00      	nop
 800ef02:	bf00      	nop
 800ef04:	3710      	adds	r7, #16
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b082      	sub	sp, #8
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00c      	beq.n	800ef32 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d004      	beq.n	800ef2a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7fe fb43 	bl	800d5b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ef2a:	6879      	ldr	r1, [r7, #4]
 800ef2c:	2003      	movs	r0, #3
 800ef2e:	f7fd fc25 	bl	800c77c <memp_free>
  }
}
 800ef32:	bf00      	nop
 800ef34:	3708      	adds	r7, #8
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
	...

0800ef3c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d106      	bne.n	800ef58 <tcp_seg_copy+0x1c>
 800ef4a:	4b0f      	ldr	r3, [pc, #60]	; (800ef88 <tcp_seg_copy+0x4c>)
 800ef4c:	f240 6282 	movw	r2, #1666	; 0x682
 800ef50:	490e      	ldr	r1, [pc, #56]	; (800ef8c <tcp_seg_copy+0x50>)
 800ef52:	480f      	ldr	r0, [pc, #60]	; (800ef90 <tcp_seg_copy+0x54>)
 800ef54:	f00c fa08 	bl	801b368 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ef58:	2003      	movs	r0, #3
 800ef5a:	f7fd fb99 	bl	800c690 <memp_malloc>
 800ef5e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d101      	bne.n	800ef6a <tcp_seg_copy+0x2e>
    return NULL;
 800ef66:	2300      	movs	r3, #0
 800ef68:	e00a      	b.n	800ef80 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ef6a:	2210      	movs	r2, #16
 800ef6c:	6879      	ldr	r1, [r7, #4]
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	f00b fe32 	bl	801abd8 <memcpy>
  pbuf_ref(cseg->p);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f7fe fbbf 	bl	800d6fc <pbuf_ref>
  return cseg;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3710      	adds	r7, #16
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	0801d9cc 	.word	0x0801d9cc
 800ef8c:	0801df20 	.word	0x0801df20
 800ef90:	0801da10 	.word	0x0801da10

0800ef94 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b084      	sub	sp, #16
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	607a      	str	r2, [r7, #4]
 800efa0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d109      	bne.n	800efbc <tcp_recv_null+0x28>
 800efa8:	4b12      	ldr	r3, [pc, #72]	; (800eff4 <tcp_recv_null+0x60>)
 800efaa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800efae:	4912      	ldr	r1, [pc, #72]	; (800eff8 <tcp_recv_null+0x64>)
 800efb0:	4812      	ldr	r0, [pc, #72]	; (800effc <tcp_recv_null+0x68>)
 800efb2:	f00c f9d9 	bl	801b368 <iprintf>
 800efb6:	f06f 030f 	mvn.w	r3, #15
 800efba:	e016      	b.n	800efea <tcp_recv_null+0x56>

  if (p != NULL) {
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d009      	beq.n	800efd6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	891b      	ldrh	r3, [r3, #8]
 800efc6:	4619      	mov	r1, r3
 800efc8:	68b8      	ldr	r0, [r7, #8]
 800efca:	f7ff fad3 	bl	800e574 <tcp_recved>
    pbuf_free(p);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7fe faee 	bl	800d5b0 <pbuf_free>
 800efd4:	e008      	b.n	800efe8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800efd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d104      	bne.n	800efe8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800efde:	68b8      	ldr	r0, [r7, #8]
 800efe0:	f7fe ffa0 	bl	800df24 <tcp_close>
 800efe4:	4603      	mov	r3, r0
 800efe6:	e000      	b.n	800efea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800efe8:	2300      	movs	r3, #0
}
 800efea:	4618      	mov	r0, r3
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	0801d9cc 	.word	0x0801d9cc
 800eff8:	0801df3c 	.word	0x0801df3c
 800effc:	0801da10 	.word	0x0801da10

0800f000 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	4603      	mov	r3, r0
 800f008:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f00a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	db01      	blt.n	800f016 <tcp_kill_prio+0x16>
 800f012:	79fb      	ldrb	r3, [r7, #7]
 800f014:	e000      	b.n	800f018 <tcp_kill_prio+0x18>
 800f016:	237f      	movs	r3, #127	; 0x7f
 800f018:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f01a:	7afb      	ldrb	r3, [r7, #11]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d034      	beq.n	800f08a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f020:	7afb      	ldrb	r3, [r7, #11]
 800f022:	3b01      	subs	r3, #1
 800f024:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f02a:	2300      	movs	r3, #0
 800f02c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f02e:	4b19      	ldr	r3, [pc, #100]	; (800f094 <tcp_kill_prio+0x94>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	617b      	str	r3, [r7, #20]
 800f034:	e01f      	b.n	800f076 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	7d5b      	ldrb	r3, [r3, #21]
 800f03a:	7afa      	ldrb	r2, [r7, #11]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d80c      	bhi.n	800f05a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f044:	7afa      	ldrb	r2, [r7, #11]
 800f046:	429a      	cmp	r2, r3
 800f048:	d112      	bne.n	800f070 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f04a:	4b13      	ldr	r3, [pc, #76]	; (800f098 <tcp_kill_prio+0x98>)
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	6a1b      	ldr	r3, [r3, #32]
 800f052:	1ad3      	subs	r3, r2, r3
 800f054:	68fa      	ldr	r2, [r7, #12]
 800f056:	429a      	cmp	r2, r3
 800f058:	d80a      	bhi.n	800f070 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f05a:	4b0f      	ldr	r3, [pc, #60]	; (800f098 <tcp_kill_prio+0x98>)
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	6a1b      	ldr	r3, [r3, #32]
 800f062:	1ad3      	subs	r3, r2, r3
 800f064:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	7d5b      	ldrb	r3, [r3, #21]
 800f06e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	68db      	ldr	r3, [r3, #12]
 800f074:	617b      	str	r3, [r7, #20]
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d1dc      	bne.n	800f036 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d004      	beq.n	800f08c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f082:	6938      	ldr	r0, [r7, #16]
 800f084:	f7ff f894 	bl	800e1b0 <tcp_abort>
 800f088:	e000      	b.n	800f08c <tcp_kill_prio+0x8c>
    return;
 800f08a:	bf00      	nop
  }
}
 800f08c:	3718      	adds	r7, #24
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	20019054 	.word	0x20019054
 800f098:	20019058 	.word	0x20019058

0800f09c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b086      	sub	sp, #24
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f0a6:	79fb      	ldrb	r3, [r7, #7]
 800f0a8:	2b08      	cmp	r3, #8
 800f0aa:	d009      	beq.n	800f0c0 <tcp_kill_state+0x24>
 800f0ac:	79fb      	ldrb	r3, [r7, #7]
 800f0ae:	2b09      	cmp	r3, #9
 800f0b0:	d006      	beq.n	800f0c0 <tcp_kill_state+0x24>
 800f0b2:	4b1a      	ldr	r3, [pc, #104]	; (800f11c <tcp_kill_state+0x80>)
 800f0b4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f0b8:	4919      	ldr	r1, [pc, #100]	; (800f120 <tcp_kill_state+0x84>)
 800f0ba:	481a      	ldr	r0, [pc, #104]	; (800f124 <tcp_kill_state+0x88>)
 800f0bc:	f00c f954 	bl	801b368 <iprintf>

  inactivity = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0c8:	4b17      	ldr	r3, [pc, #92]	; (800f128 <tcp_kill_state+0x8c>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	617b      	str	r3, [r7, #20]
 800f0ce:	e017      	b.n	800f100 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	7d1b      	ldrb	r3, [r3, #20]
 800f0d4:	79fa      	ldrb	r2, [r7, #7]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d10f      	bne.n	800f0fa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f0da:	4b14      	ldr	r3, [pc, #80]	; (800f12c <tcp_kill_state+0x90>)
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	6a1b      	ldr	r3, [r3, #32]
 800f0e2:	1ad3      	subs	r3, r2, r3
 800f0e4:	68fa      	ldr	r2, [r7, #12]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d807      	bhi.n	800f0fa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f0ea:	4b10      	ldr	r3, [pc, #64]	; (800f12c <tcp_kill_state+0x90>)
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	6a1b      	ldr	r3, [r3, #32]
 800f0f2:	1ad3      	subs	r3, r2, r3
 800f0f4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	617b      	str	r3, [r7, #20]
 800f100:	697b      	ldr	r3, [r7, #20]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d1e4      	bne.n	800f0d0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d003      	beq.n	800f114 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f10c:	2100      	movs	r1, #0
 800f10e:	6938      	ldr	r0, [r7, #16]
 800f110:	f7fe ff90 	bl	800e034 <tcp_abandon>
  }
}
 800f114:	bf00      	nop
 800f116:	3718      	adds	r7, #24
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	0801d9cc 	.word	0x0801d9cc
 800f120:	0801df58 	.word	0x0801df58
 800f124:	0801da10 	.word	0x0801da10
 800f128:	20019054 	.word	0x20019054
 800f12c:	20019058 	.word	0x20019058

0800f130 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f136:	2300      	movs	r3, #0
 800f138:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f13a:	2300      	movs	r3, #0
 800f13c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f13e:	4b12      	ldr	r3, [pc, #72]	; (800f188 <tcp_kill_timewait+0x58>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	60fb      	str	r3, [r7, #12]
 800f144:	e012      	b.n	800f16c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f146:	4b11      	ldr	r3, [pc, #68]	; (800f18c <tcp_kill_timewait+0x5c>)
 800f148:	681a      	ldr	r2, [r3, #0]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	6a1b      	ldr	r3, [r3, #32]
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	429a      	cmp	r2, r3
 800f154:	d807      	bhi.n	800f166 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f156:	4b0d      	ldr	r3, [pc, #52]	; (800f18c <tcp_kill_timewait+0x5c>)
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	6a1b      	ldr	r3, [r3, #32]
 800f15e:	1ad3      	subs	r3, r2, r3
 800f160:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	60fb      	str	r3, [r7, #12]
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1e9      	bne.n	800f146 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f178:	68b8      	ldr	r0, [r7, #8]
 800f17a:	f7ff f819 	bl	800e1b0 <tcp_abort>
  }
}
 800f17e:	bf00      	nop
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	20019064 	.word	0x20019064
 800f18c:	20019058 	.word	0x20019058

0800f190 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f196:	4b10      	ldr	r3, [pc, #64]	; (800f1d8 <tcp_handle_closepend+0x48>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f19c:	e014      	b.n	800f1c8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	68db      	ldr	r3, [r3, #12]
 800f1a2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	8b5b      	ldrh	r3, [r3, #26]
 800f1a8:	f003 0308 	and.w	r3, r3, #8
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d009      	beq.n	800f1c4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	8b5b      	ldrh	r3, [r3, #26]
 800f1b4:	f023 0308 	bic.w	r3, r3, #8
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f7fe fe46 	bl	800de50 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d1e7      	bne.n	800f19e <tcp_handle_closepend+0xe>
  }
}
 800f1ce:	bf00      	nop
 800f1d0:	bf00      	nop
 800f1d2:	3708      	adds	r7, #8
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}
 800f1d8:	20019054 	.word	0x20019054

0800f1dc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f1e6:	2001      	movs	r0, #1
 800f1e8:	f7fd fa52 	bl	800c690 <memp_malloc>
 800f1ec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d126      	bne.n	800f242 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f1f4:	f7ff ffcc 	bl	800f190 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f1f8:	f7ff ff9a 	bl	800f130 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f1fc:	2001      	movs	r0, #1
 800f1fe:	f7fd fa47 	bl	800c690 <memp_malloc>
 800f202:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d11b      	bne.n	800f242 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f20a:	2009      	movs	r0, #9
 800f20c:	f7ff ff46 	bl	800f09c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f210:	2001      	movs	r0, #1
 800f212:	f7fd fa3d 	bl	800c690 <memp_malloc>
 800f216:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d111      	bne.n	800f242 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f21e:	2008      	movs	r0, #8
 800f220:	f7ff ff3c 	bl	800f09c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f224:	2001      	movs	r0, #1
 800f226:	f7fd fa33 	bl	800c690 <memp_malloc>
 800f22a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d107      	bne.n	800f242 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f232:	79fb      	ldrb	r3, [r7, #7]
 800f234:	4618      	mov	r0, r3
 800f236:	f7ff fee3 	bl	800f000 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f23a:	2001      	movs	r0, #1
 800f23c:	f7fd fa28 	bl	800c690 <memp_malloc>
 800f240:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d03f      	beq.n	800f2c8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f248:	229c      	movs	r2, #156	; 0x9c
 800f24a:	2100      	movs	r1, #0
 800f24c:	68f8      	ldr	r0, [r7, #12]
 800f24e:	f00b fceb 	bl	801ac28 <memset>
    pcb->prio = prio;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	79fa      	ldrb	r2, [r7, #7]
 800f256:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f25e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f268:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	22ff      	movs	r2, #255	; 0xff
 800f276:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f27e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	2206      	movs	r2, #6
 800f284:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2206      	movs	r2, #6
 800f28c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f294:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2201      	movs	r2, #1
 800f29a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f29e:	4b0d      	ldr	r3, [pc, #52]	; (800f2d4 <tcp_alloc+0xf8>)
 800f2a0:	681a      	ldr	r2, [r3, #0]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f2a6:	4b0c      	ldr	r3, [pc, #48]	; (800f2d8 <tcp_alloc+0xfc>)
 800f2a8:	781a      	ldrb	r2, [r3, #0]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f2b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	4a08      	ldr	r2, [pc, #32]	; (800f2dc <tcp_alloc+0x100>)
 800f2bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	4a07      	ldr	r2, [pc, #28]	; (800f2e0 <tcp_alloc+0x104>)
 800f2c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	20019058 	.word	0x20019058
 800f2d8:	20010772 	.word	0x20010772
 800f2dc:	0800ef95 	.word	0x0800ef95
 800f2e0:	006ddd00 	.word	0x006ddd00

0800f2e4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f2ee:	2040      	movs	r0, #64	; 0x40
 800f2f0:	f7ff ff74 	bl	800f1dc <tcp_alloc>
 800f2f4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d002      	beq.n	800f316 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	683a      	ldr	r2, [r7, #0]
 800f314:	611a      	str	r2, [r3, #16]
  }
}
 800f316:	bf00      	nop
 800f318:	370c      	adds	r7, #12
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr
	...

0800f324 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d00e      	beq.n	800f352 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	7d1b      	ldrb	r3, [r3, #20]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d106      	bne.n	800f34a <tcp_recv+0x26>
 800f33c:	4b07      	ldr	r3, [pc, #28]	; (800f35c <tcp_recv+0x38>)
 800f33e:	f240 72df 	movw	r2, #2015	; 0x7df
 800f342:	4907      	ldr	r1, [pc, #28]	; (800f360 <tcp_recv+0x3c>)
 800f344:	4807      	ldr	r0, [pc, #28]	; (800f364 <tcp_recv+0x40>)
 800f346:	f00c f80f 	bl	801b368 <iprintf>
    pcb->recv = recv;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	683a      	ldr	r2, [r7, #0]
 800f34e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f352:	bf00      	nop
 800f354:	3708      	adds	r7, #8
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	0801d9cc 	.word	0x0801d9cc
 800f360:	0801df68 	.word	0x0801df68
 800f364:	0801da10 	.word	0x0801da10

0800f368 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00e      	beq.n	800f396 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	7d1b      	ldrb	r3, [r3, #20]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d106      	bne.n	800f38e <tcp_sent+0x26>
 800f380:	4b07      	ldr	r3, [pc, #28]	; (800f3a0 <tcp_sent+0x38>)
 800f382:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f386:	4907      	ldr	r1, [pc, #28]	; (800f3a4 <tcp_sent+0x3c>)
 800f388:	4807      	ldr	r0, [pc, #28]	; (800f3a8 <tcp_sent+0x40>)
 800f38a:	f00b ffed 	bl	801b368 <iprintf>
    pcb->sent = sent;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	683a      	ldr	r2, [r7, #0]
 800f392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f396:	bf00      	nop
 800f398:	3708      	adds	r7, #8
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	0801d9cc 	.word	0x0801d9cc
 800f3a4:	0801df90 	.word	0x0801df90
 800f3a8:	0801da10 	.word	0x0801da10

0800f3ac <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00e      	beq.n	800f3da <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	7d1b      	ldrb	r3, [r3, #20]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d106      	bne.n	800f3d2 <tcp_err+0x26>
 800f3c4:	4b07      	ldr	r3, [pc, #28]	; (800f3e4 <tcp_err+0x38>)
 800f3c6:	f640 020d 	movw	r2, #2061	; 0x80d
 800f3ca:	4907      	ldr	r1, [pc, #28]	; (800f3e8 <tcp_err+0x3c>)
 800f3cc:	4807      	ldr	r0, [pc, #28]	; (800f3ec <tcp_err+0x40>)
 800f3ce:	f00b ffcb 	bl	801b368 <iprintf>
    pcb->errf = err;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	683a      	ldr	r2, [r7, #0]
 800f3d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f3da:	bf00      	nop
 800f3dc:	3708      	adds	r7, #8
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	0801d9cc 	.word	0x0801d9cc
 800f3e8:	0801dfb8 	.word	0x0801dfb8
 800f3ec:	0801da10 	.word	0x0801da10

0800f3f0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b085      	sub	sp, #20
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d008      	beq.n	800f412 <tcp_accept+0x22>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	7d1b      	ldrb	r3, [r3, #20]
 800f404:	2b01      	cmp	r3, #1
 800f406:	d104      	bne.n	800f412 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	683a      	ldr	r2, [r7, #0]
 800f410:	619a      	str	r2, [r3, #24]
  }
}
 800f412:	bf00      	nop
 800f414:	3714      	adds	r7, #20
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
	...

0800f420 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	4613      	mov	r3, r2
 800f42c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d107      	bne.n	800f444 <tcp_poll+0x24>
 800f434:	4b0e      	ldr	r3, [pc, #56]	; (800f470 <tcp_poll+0x50>)
 800f436:	f640 023d 	movw	r2, #2109	; 0x83d
 800f43a:	490e      	ldr	r1, [pc, #56]	; (800f474 <tcp_poll+0x54>)
 800f43c:	480e      	ldr	r0, [pc, #56]	; (800f478 <tcp_poll+0x58>)
 800f43e:	f00b ff93 	bl	801b368 <iprintf>
 800f442:	e011      	b.n	800f468 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	7d1b      	ldrb	r3, [r3, #20]
 800f448:	2b01      	cmp	r3, #1
 800f44a:	d106      	bne.n	800f45a <tcp_poll+0x3a>
 800f44c:	4b08      	ldr	r3, [pc, #32]	; (800f470 <tcp_poll+0x50>)
 800f44e:	f640 023e 	movw	r2, #2110	; 0x83e
 800f452:	490a      	ldr	r1, [pc, #40]	; (800f47c <tcp_poll+0x5c>)
 800f454:	4808      	ldr	r0, [pc, #32]	; (800f478 <tcp_poll+0x58>)
 800f456:	f00b ff87 	bl	801b368 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	68ba      	ldr	r2, [r7, #8]
 800f45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	79fa      	ldrb	r2, [r7, #7]
 800f466:	775a      	strb	r2, [r3, #29]
}
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	0801d9cc 	.word	0x0801d9cc
 800f474:	0801dfe0 	.word	0x0801dfe0
 800f478:	0801da10 	.word	0x0801da10
 800f47c:	0801dff8 	.word	0x0801dff8

0800f480 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d107      	bne.n	800f49e <tcp_pcb_purge+0x1e>
 800f48e:	4b21      	ldr	r3, [pc, #132]	; (800f514 <tcp_pcb_purge+0x94>)
 800f490:	f640 0251 	movw	r2, #2129	; 0x851
 800f494:	4920      	ldr	r1, [pc, #128]	; (800f518 <tcp_pcb_purge+0x98>)
 800f496:	4821      	ldr	r0, [pc, #132]	; (800f51c <tcp_pcb_purge+0x9c>)
 800f498:	f00b ff66 	bl	801b368 <iprintf>
 800f49c:	e037      	b.n	800f50e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	7d1b      	ldrb	r3, [r3, #20]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d033      	beq.n	800f50e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f4aa:	2b0a      	cmp	r3, #10
 800f4ac:	d02f      	beq.n	800f50e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	d02b      	beq.n	800f50e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d007      	beq.n	800f4ce <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fe f874 	bl	800d5b0 <pbuf_free>
      pcb->refused_data = NULL;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d002      	beq.n	800f4dc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 f986 	bl	800f7e8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4e2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7ff fcf9 	bl	800eee0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7ff fcf4 	bl	800eee0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	66da      	str	r2, [r3, #108]	; 0x6c
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}
 800f514:	0801d9cc 	.word	0x0801d9cc
 800f518:	0801e018 	.word	0x0801e018
 800f51c:	0801da10 	.word	0x0801da10

0800f520 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f52a:	683b      	ldr	r3, [r7, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d106      	bne.n	800f53e <tcp_pcb_remove+0x1e>
 800f530:	4b3e      	ldr	r3, [pc, #248]	; (800f62c <tcp_pcb_remove+0x10c>)
 800f532:	f640 0283 	movw	r2, #2179	; 0x883
 800f536:	493e      	ldr	r1, [pc, #248]	; (800f630 <tcp_pcb_remove+0x110>)
 800f538:	483e      	ldr	r0, [pc, #248]	; (800f634 <tcp_pcb_remove+0x114>)
 800f53a:	f00b ff15 	bl	801b368 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d106      	bne.n	800f552 <tcp_pcb_remove+0x32>
 800f544:	4b39      	ldr	r3, [pc, #228]	; (800f62c <tcp_pcb_remove+0x10c>)
 800f546:	f640 0284 	movw	r2, #2180	; 0x884
 800f54a:	493b      	ldr	r1, [pc, #236]	; (800f638 <tcp_pcb_remove+0x118>)
 800f54c:	4839      	ldr	r0, [pc, #228]	; (800f634 <tcp_pcb_remove+0x114>)
 800f54e:	f00b ff0b 	bl	801b368 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	683a      	ldr	r2, [r7, #0]
 800f558:	429a      	cmp	r2, r3
 800f55a:	d105      	bne.n	800f568 <tcp_pcb_remove+0x48>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	68da      	ldr	r2, [r3, #12]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	601a      	str	r2, [r3, #0]
 800f566:	e013      	b.n	800f590 <tcp_pcb_remove+0x70>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	60fb      	str	r3, [r7, #12]
 800f56e:	e00c      	b.n	800f58a <tcp_pcb_remove+0x6a>
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	683a      	ldr	r2, [r7, #0]
 800f576:	429a      	cmp	r2, r3
 800f578:	d104      	bne.n	800f584 <tcp_pcb_remove+0x64>
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	68da      	ldr	r2, [r3, #12]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	60da      	str	r2, [r3, #12]
 800f582:	e005      	b.n	800f590 <tcp_pcb_remove+0x70>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	60fb      	str	r3, [r7, #12]
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d1ef      	bne.n	800f570 <tcp_pcb_remove+0x50>
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	2200      	movs	r2, #0
 800f594:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f596:	6838      	ldr	r0, [r7, #0]
 800f598:	f7ff ff72 	bl	800f480 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	7d1b      	ldrb	r3, [r3, #20]
 800f5a0:	2b0a      	cmp	r3, #10
 800f5a2:	d013      	beq.n	800f5cc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d00f      	beq.n	800f5cc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	8b5b      	ldrh	r3, [r3, #26]
 800f5b0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d009      	beq.n	800f5cc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	8b5b      	ldrh	r3, [r3, #26]
 800f5bc:	f043 0302 	orr.w	r3, r3, #2
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f5c6:	6838      	ldr	r0, [r7, #0]
 800f5c8:	f003 fbc2 	bl	8012d50 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	7d1b      	ldrb	r3, [r3, #20]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d020      	beq.n	800f616 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d006      	beq.n	800f5ea <tcp_pcb_remove+0xca>
 800f5dc:	4b13      	ldr	r3, [pc, #76]	; (800f62c <tcp_pcb_remove+0x10c>)
 800f5de:	f640 0293 	movw	r2, #2195	; 0x893
 800f5e2:	4916      	ldr	r1, [pc, #88]	; (800f63c <tcp_pcb_remove+0x11c>)
 800f5e4:	4813      	ldr	r0, [pc, #76]	; (800f634 <tcp_pcb_remove+0x114>)
 800f5e6:	f00b febf 	bl	801b368 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d006      	beq.n	800f600 <tcp_pcb_remove+0xe0>
 800f5f2:	4b0e      	ldr	r3, [pc, #56]	; (800f62c <tcp_pcb_remove+0x10c>)
 800f5f4:	f640 0294 	movw	r2, #2196	; 0x894
 800f5f8:	4911      	ldr	r1, [pc, #68]	; (800f640 <tcp_pcb_remove+0x120>)
 800f5fa:	480e      	ldr	r0, [pc, #56]	; (800f634 <tcp_pcb_remove+0x114>)
 800f5fc:	f00b feb4 	bl	801b368 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f604:	2b00      	cmp	r3, #0
 800f606:	d006      	beq.n	800f616 <tcp_pcb_remove+0xf6>
 800f608:	4b08      	ldr	r3, [pc, #32]	; (800f62c <tcp_pcb_remove+0x10c>)
 800f60a:	f640 0296 	movw	r2, #2198	; 0x896
 800f60e:	490d      	ldr	r1, [pc, #52]	; (800f644 <tcp_pcb_remove+0x124>)
 800f610:	4808      	ldr	r0, [pc, #32]	; (800f634 <tcp_pcb_remove+0x114>)
 800f612:	f00b fea9 	bl	801b368 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	2200      	movs	r2, #0
 800f61a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	2200      	movs	r2, #0
 800f620:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f622:	bf00      	nop
 800f624:	3710      	adds	r7, #16
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
 800f62a:	bf00      	nop
 800f62c:	0801d9cc 	.word	0x0801d9cc
 800f630:	0801e034 	.word	0x0801e034
 800f634:	0801da10 	.word	0x0801da10
 800f638:	0801e050 	.word	0x0801e050
 800f63c:	0801e070 	.word	0x0801e070
 800f640:	0801e088 	.word	0x0801e088
 800f644:	0801e0a4 	.word	0x0801e0a4

0800f648 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d106      	bne.n	800f664 <tcp_next_iss+0x1c>
 800f656:	4b0a      	ldr	r3, [pc, #40]	; (800f680 <tcp_next_iss+0x38>)
 800f658:	f640 02af 	movw	r2, #2223	; 0x8af
 800f65c:	4909      	ldr	r1, [pc, #36]	; (800f684 <tcp_next_iss+0x3c>)
 800f65e:	480a      	ldr	r0, [pc, #40]	; (800f688 <tcp_next_iss+0x40>)
 800f660:	f00b fe82 	bl	801b368 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f664:	4b09      	ldr	r3, [pc, #36]	; (800f68c <tcp_next_iss+0x44>)
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	4b09      	ldr	r3, [pc, #36]	; (800f690 <tcp_next_iss+0x48>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4413      	add	r3, r2
 800f66e:	4a07      	ldr	r2, [pc, #28]	; (800f68c <tcp_next_iss+0x44>)
 800f670:	6013      	str	r3, [r2, #0]
  return iss;
 800f672:	4b06      	ldr	r3, [pc, #24]	; (800f68c <tcp_next_iss+0x44>)
 800f674:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f676:	4618      	mov	r0, r3
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	0801d9cc 	.word	0x0801d9cc
 800f684:	0801e0bc 	.word	0x0801e0bc
 800f688:	0801da10 	.word	0x0801da10
 800f68c:	20000028 	.word	0x20000028
 800f690:	20019058 	.word	0x20019058

0800f694 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b086      	sub	sp, #24
 800f698:	af00      	add	r7, sp, #0
 800f69a:	4603      	mov	r3, r0
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
 800f6a0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d106      	bne.n	800f6b6 <tcp_eff_send_mss_netif+0x22>
 800f6a8:	4b14      	ldr	r3, [pc, #80]	; (800f6fc <tcp_eff_send_mss_netif+0x68>)
 800f6aa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f6ae:	4914      	ldr	r1, [pc, #80]	; (800f700 <tcp_eff_send_mss_netif+0x6c>)
 800f6b0:	4814      	ldr	r0, [pc, #80]	; (800f704 <tcp_eff_send_mss_netif+0x70>)
 800f6b2:	f00b fe59 	bl	801b368 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d101      	bne.n	800f6c0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f6bc:	89fb      	ldrh	r3, [r7, #14]
 800f6be:	e019      	b.n	800f6f4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f6c6:	8afb      	ldrh	r3, [r7, #22]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d012      	beq.n	800f6f2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f6cc:	2328      	movs	r3, #40	; 0x28
 800f6ce:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f6d0:	8afa      	ldrh	r2, [r7, #22]
 800f6d2:	8abb      	ldrh	r3, [r7, #20]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d904      	bls.n	800f6e2 <tcp_eff_send_mss_netif+0x4e>
 800f6d8:	8afa      	ldrh	r2, [r7, #22]
 800f6da:	8abb      	ldrh	r3, [r7, #20]
 800f6dc:	1ad3      	subs	r3, r2, r3
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	e000      	b.n	800f6e4 <tcp_eff_send_mss_netif+0x50>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f6e6:	8a7a      	ldrh	r2, [r7, #18]
 800f6e8:	89fb      	ldrh	r3, [r7, #14]
 800f6ea:	4293      	cmp	r3, r2
 800f6ec:	bf28      	it	cs
 800f6ee:	4613      	movcs	r3, r2
 800f6f0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f6f2:	89fb      	ldrh	r3, [r7, #14]
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3718      	adds	r7, #24
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	0801d9cc 	.word	0x0801d9cc
 800f700:	0801e0d8 	.word	0x0801e0d8
 800f704:	0801da10 	.word	0x0801da10

0800f708 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d119      	bne.n	800f750 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f71c:	4b10      	ldr	r3, [pc, #64]	; (800f760 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f71e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f722:	4910      	ldr	r1, [pc, #64]	; (800f764 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f724:	4810      	ldr	r0, [pc, #64]	; (800f768 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f726:	f00b fe1f 	bl	801b368 <iprintf>

  while (pcb != NULL) {
 800f72a:	e011      	b.n	800f750 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	429a      	cmp	r2, r3
 800f736:	d108      	bne.n	800f74a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f73e:	68f8      	ldr	r0, [r7, #12]
 800f740:	f7fe fd36 	bl	800e1b0 <tcp_abort>
      pcb = next;
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	60fb      	str	r3, [r7, #12]
 800f748:	e002      	b.n	800f750 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	68db      	ldr	r3, [r3, #12]
 800f74e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d1ea      	bne.n	800f72c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f756:	bf00      	nop
 800f758:	bf00      	nop
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	0801d9cc 	.word	0x0801d9cc
 800f764:	0801e100 	.word	0x0801e100
 800f768:	0801da10 	.word	0x0801da10

0800f76c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d02a      	beq.n	800f7d2 <tcp_netif_ip_addr_changed+0x66>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d026      	beq.n	800f7d2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f784:	4b15      	ldr	r3, [pc, #84]	; (800f7dc <tcp_netif_ip_addr_changed+0x70>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4619      	mov	r1, r3
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f7ff ffbc 	bl	800f708 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f790:	4b13      	ldr	r3, [pc, #76]	; (800f7e0 <tcp_netif_ip_addr_changed+0x74>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4619      	mov	r1, r3
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7ff ffb6 	bl	800f708 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d017      	beq.n	800f7d2 <tcp_netif_ip_addr_changed+0x66>
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d013      	beq.n	800f7d2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f7aa:	4b0e      	ldr	r3, [pc, #56]	; (800f7e4 <tcp_netif_ip_addr_changed+0x78>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	60fb      	str	r3, [r7, #12]
 800f7b0:	e00c      	b.n	800f7cc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d103      	bne.n	800f7c6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	60fb      	str	r3, [r7, #12]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d1ef      	bne.n	800f7b2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f7d2:	bf00      	nop
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	20019054 	.word	0x20019054
 800f7e0:	20019060 	.word	0x20019060
 800f7e4:	2001905c 	.word	0x2001905c

0800f7e8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d007      	beq.n	800f808 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7ff fb6f 	bl	800eee0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f808:	bf00      	nop
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f810:	b590      	push	{r4, r7, lr}
 800f812:	b08d      	sub	sp, #52	; 0x34
 800f814:	af04      	add	r7, sp, #16
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d105      	bne.n	800f82c <tcp_input+0x1c>
 800f820:	4b9b      	ldr	r3, [pc, #620]	; (800fa90 <tcp_input+0x280>)
 800f822:	2283      	movs	r2, #131	; 0x83
 800f824:	499b      	ldr	r1, [pc, #620]	; (800fa94 <tcp_input+0x284>)
 800f826:	489c      	ldr	r0, [pc, #624]	; (800fa98 <tcp_input+0x288>)
 800f828:	f00b fd9e 	bl	801b368 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	4a9a      	ldr	r2, [pc, #616]	; (800fa9c <tcp_input+0x28c>)
 800f832:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	895b      	ldrh	r3, [r3, #10]
 800f838:	2b13      	cmp	r3, #19
 800f83a:	f240 83c4 	bls.w	800ffc6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f83e:	4b98      	ldr	r3, [pc, #608]	; (800faa0 <tcp_input+0x290>)
 800f840:	695b      	ldr	r3, [r3, #20]
 800f842:	4a97      	ldr	r2, [pc, #604]	; (800faa0 <tcp_input+0x290>)
 800f844:	6812      	ldr	r2, [r2, #0]
 800f846:	4611      	mov	r1, r2
 800f848:	4618      	mov	r0, r3
 800f84a:	f008 fb07 	bl	8017e5c <ip4_addr_isbroadcast_u32>
 800f84e:	4603      	mov	r3, r0
 800f850:	2b00      	cmp	r3, #0
 800f852:	f040 83ba 	bne.w	800ffca <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f856:	4b92      	ldr	r3, [pc, #584]	; (800faa0 <tcp_input+0x290>)
 800f858:	695b      	ldr	r3, [r3, #20]
 800f85a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f85e:	2be0      	cmp	r3, #224	; 0xe0
 800f860:	f000 83b3 	beq.w	800ffca <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f864:	4b8d      	ldr	r3, [pc, #564]	; (800fa9c <tcp_input+0x28c>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	899b      	ldrh	r3, [r3, #12]
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7fc fa37 	bl	800bce0 <lwip_htons>
 800f872:	4603      	mov	r3, r0
 800f874:	0b1b      	lsrs	r3, r3, #12
 800f876:	b29b      	uxth	r3, r3
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f87e:	7cbb      	ldrb	r3, [r7, #18]
 800f880:	2b13      	cmp	r3, #19
 800f882:	f240 83a4 	bls.w	800ffce <tcp_input+0x7be>
 800f886:	7cbb      	ldrb	r3, [r7, #18]
 800f888:	b29a      	uxth	r2, r3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	891b      	ldrh	r3, [r3, #8]
 800f88e:	429a      	cmp	r2, r3
 800f890:	f200 839d 	bhi.w	800ffce <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f894:	7cbb      	ldrb	r3, [r7, #18]
 800f896:	b29b      	uxth	r3, r3
 800f898:	3b14      	subs	r3, #20
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	4b81      	ldr	r3, [pc, #516]	; (800faa4 <tcp_input+0x294>)
 800f89e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f8a0:	4b81      	ldr	r3, [pc, #516]	; (800faa8 <tcp_input+0x298>)
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	895a      	ldrh	r2, [r3, #10]
 800f8aa:	7cbb      	ldrb	r3, [r7, #18]
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d309      	bcc.n	800f8c6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f8b2:	4b7c      	ldr	r3, [pc, #496]	; (800faa4 <tcp_input+0x294>)
 800f8b4:	881a      	ldrh	r2, [r3, #0]
 800f8b6:	4b7d      	ldr	r3, [pc, #500]	; (800faac <tcp_input+0x29c>)
 800f8b8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f8ba:	7cbb      	ldrb	r3, [r7, #18]
 800f8bc:	4619      	mov	r1, r3
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7fd fdbe 	bl	800d440 <pbuf_remove_header>
 800f8c4:	e04e      	b.n	800f964 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d105      	bne.n	800f8da <tcp_input+0xca>
 800f8ce:	4b70      	ldr	r3, [pc, #448]	; (800fa90 <tcp_input+0x280>)
 800f8d0:	22c2      	movs	r2, #194	; 0xc2
 800f8d2:	4977      	ldr	r1, [pc, #476]	; (800fab0 <tcp_input+0x2a0>)
 800f8d4:	4870      	ldr	r0, [pc, #448]	; (800fa98 <tcp_input+0x288>)
 800f8d6:	f00b fd47 	bl	801b368 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f8da:	2114      	movs	r1, #20
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f7fd fdaf 	bl	800d440 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	895a      	ldrh	r2, [r3, #10]
 800f8e6:	4b71      	ldr	r3, [pc, #452]	; (800faac <tcp_input+0x29c>)
 800f8e8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f8ea:	4b6e      	ldr	r3, [pc, #440]	; (800faa4 <tcp_input+0x294>)
 800f8ec:	881a      	ldrh	r2, [r3, #0]
 800f8ee:	4b6f      	ldr	r3, [pc, #444]	; (800faac <tcp_input+0x29c>)
 800f8f0:	881b      	ldrh	r3, [r3, #0]
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f8f6:	4b6d      	ldr	r3, [pc, #436]	; (800faac <tcp_input+0x29c>)
 800f8f8:	881b      	ldrh	r3, [r3, #0]
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f7fd fd9f 	bl	800d440 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	895b      	ldrh	r3, [r3, #10]
 800f908:	8a3a      	ldrh	r2, [r7, #16]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	f200 8361 	bhi.w	800ffd2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	4a64      	ldr	r2, [pc, #400]	; (800faa8 <tcp_input+0x298>)
 800f918:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	8a3a      	ldrh	r2, [r7, #16]
 800f920:	4611      	mov	r1, r2
 800f922:	4618      	mov	r0, r3
 800f924:	f7fd fd8c 	bl	800d440 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	891a      	ldrh	r2, [r3, #8]
 800f92c:	8a3b      	ldrh	r3, [r7, #16]
 800f92e:	1ad3      	subs	r3, r2, r3
 800f930:	b29a      	uxth	r2, r3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	895b      	ldrh	r3, [r3, #10]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d005      	beq.n	800f94a <tcp_input+0x13a>
 800f93e:	4b54      	ldr	r3, [pc, #336]	; (800fa90 <tcp_input+0x280>)
 800f940:	22df      	movs	r2, #223	; 0xdf
 800f942:	495c      	ldr	r1, [pc, #368]	; (800fab4 <tcp_input+0x2a4>)
 800f944:	4854      	ldr	r0, [pc, #336]	; (800fa98 <tcp_input+0x288>)
 800f946:	f00b fd0f 	bl	801b368 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	891a      	ldrh	r2, [r3, #8]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	891b      	ldrh	r3, [r3, #8]
 800f954:	429a      	cmp	r2, r3
 800f956:	d005      	beq.n	800f964 <tcp_input+0x154>
 800f958:	4b4d      	ldr	r3, [pc, #308]	; (800fa90 <tcp_input+0x280>)
 800f95a:	22e0      	movs	r2, #224	; 0xe0
 800f95c:	4956      	ldr	r1, [pc, #344]	; (800fab8 <tcp_input+0x2a8>)
 800f95e:	484e      	ldr	r0, [pc, #312]	; (800fa98 <tcp_input+0x288>)
 800f960:	f00b fd02 	bl	801b368 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f964:	4b4d      	ldr	r3, [pc, #308]	; (800fa9c <tcp_input+0x28c>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	881b      	ldrh	r3, [r3, #0]
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	4a4b      	ldr	r2, [pc, #300]	; (800fa9c <tcp_input+0x28c>)
 800f96e:	6814      	ldr	r4, [r2, #0]
 800f970:	4618      	mov	r0, r3
 800f972:	f7fc f9b5 	bl	800bce0 <lwip_htons>
 800f976:	4603      	mov	r3, r0
 800f978:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f97a:	4b48      	ldr	r3, [pc, #288]	; (800fa9c <tcp_input+0x28c>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	885b      	ldrh	r3, [r3, #2]
 800f980:	b29b      	uxth	r3, r3
 800f982:	4a46      	ldr	r2, [pc, #280]	; (800fa9c <tcp_input+0x28c>)
 800f984:	6814      	ldr	r4, [r2, #0]
 800f986:	4618      	mov	r0, r3
 800f988:	f7fc f9aa 	bl	800bce0 <lwip_htons>
 800f98c:	4603      	mov	r3, r0
 800f98e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f990:	4b42      	ldr	r3, [pc, #264]	; (800fa9c <tcp_input+0x28c>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	4a41      	ldr	r2, [pc, #260]	; (800fa9c <tcp_input+0x28c>)
 800f998:	6814      	ldr	r4, [r2, #0]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fc f9b5 	bl	800bd0a <lwip_htonl>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	6063      	str	r3, [r4, #4]
 800f9a4:	6863      	ldr	r3, [r4, #4]
 800f9a6:	4a45      	ldr	r2, [pc, #276]	; (800fabc <tcp_input+0x2ac>)
 800f9a8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f9aa:	4b3c      	ldr	r3, [pc, #240]	; (800fa9c <tcp_input+0x28c>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	689b      	ldr	r3, [r3, #8]
 800f9b0:	4a3a      	ldr	r2, [pc, #232]	; (800fa9c <tcp_input+0x28c>)
 800f9b2:	6814      	ldr	r4, [r2, #0]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fc f9a8 	bl	800bd0a <lwip_htonl>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	60a3      	str	r3, [r4, #8]
 800f9be:	68a3      	ldr	r3, [r4, #8]
 800f9c0:	4a3f      	ldr	r2, [pc, #252]	; (800fac0 <tcp_input+0x2b0>)
 800f9c2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f9c4:	4b35      	ldr	r3, [pc, #212]	; (800fa9c <tcp_input+0x28c>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	89db      	ldrh	r3, [r3, #14]
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	4a33      	ldr	r2, [pc, #204]	; (800fa9c <tcp_input+0x28c>)
 800f9ce:	6814      	ldr	r4, [r2, #0]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fc f985 	bl	800bce0 <lwip_htons>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f9da:	4b30      	ldr	r3, [pc, #192]	; (800fa9c <tcp_input+0x28c>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	899b      	ldrh	r3, [r3, #12]
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7fc f97c 	bl	800bce0 <lwip_htons>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f9f0:	b2da      	uxtb	r2, r3
 800f9f2:	4b34      	ldr	r3, [pc, #208]	; (800fac4 <tcp_input+0x2b4>)
 800f9f4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	891a      	ldrh	r2, [r3, #8]
 800f9fa:	4b33      	ldr	r3, [pc, #204]	; (800fac8 <tcp_input+0x2b8>)
 800f9fc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f9fe:	4b31      	ldr	r3, [pc, #196]	; (800fac4 <tcp_input+0x2b4>)
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	f003 0303 	and.w	r3, r3, #3
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d00c      	beq.n	800fa24 <tcp_input+0x214>
    tcplen++;
 800fa0a:	4b2f      	ldr	r3, [pc, #188]	; (800fac8 <tcp_input+0x2b8>)
 800fa0c:	881b      	ldrh	r3, [r3, #0]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	b29a      	uxth	r2, r3
 800fa12:	4b2d      	ldr	r3, [pc, #180]	; (800fac8 <tcp_input+0x2b8>)
 800fa14:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	891a      	ldrh	r2, [r3, #8]
 800fa1a:	4b2b      	ldr	r3, [pc, #172]	; (800fac8 <tcp_input+0x2b8>)
 800fa1c:	881b      	ldrh	r3, [r3, #0]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	f200 82d9 	bhi.w	800ffd6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fa24:	2300      	movs	r3, #0
 800fa26:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa28:	4b28      	ldr	r3, [pc, #160]	; (800facc <tcp_input+0x2bc>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	61fb      	str	r3, [r7, #28]
 800fa2e:	e09d      	b.n	800fb6c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	7d1b      	ldrb	r3, [r3, #20]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d105      	bne.n	800fa44 <tcp_input+0x234>
 800fa38:	4b15      	ldr	r3, [pc, #84]	; (800fa90 <tcp_input+0x280>)
 800fa3a:	22fb      	movs	r2, #251	; 0xfb
 800fa3c:	4924      	ldr	r1, [pc, #144]	; (800fad0 <tcp_input+0x2c0>)
 800fa3e:	4816      	ldr	r0, [pc, #88]	; (800fa98 <tcp_input+0x288>)
 800fa40:	f00b fc92 	bl	801b368 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	7d1b      	ldrb	r3, [r3, #20]
 800fa48:	2b0a      	cmp	r3, #10
 800fa4a:	d105      	bne.n	800fa58 <tcp_input+0x248>
 800fa4c:	4b10      	ldr	r3, [pc, #64]	; (800fa90 <tcp_input+0x280>)
 800fa4e:	22fc      	movs	r2, #252	; 0xfc
 800fa50:	4920      	ldr	r1, [pc, #128]	; (800fad4 <tcp_input+0x2c4>)
 800fa52:	4811      	ldr	r0, [pc, #68]	; (800fa98 <tcp_input+0x288>)
 800fa54:	f00b fc88 	bl	801b368 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	7d1b      	ldrb	r3, [r3, #20]
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d105      	bne.n	800fa6c <tcp_input+0x25c>
 800fa60:	4b0b      	ldr	r3, [pc, #44]	; (800fa90 <tcp_input+0x280>)
 800fa62:	22fd      	movs	r2, #253	; 0xfd
 800fa64:	491c      	ldr	r1, [pc, #112]	; (800fad8 <tcp_input+0x2c8>)
 800fa66:	480c      	ldr	r0, [pc, #48]	; (800fa98 <tcp_input+0x288>)
 800fa68:	f00b fc7e 	bl	801b368 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	7a1b      	ldrb	r3, [r3, #8]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d033      	beq.n	800fadc <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	7a1a      	ldrb	r2, [r3, #8]
 800fa78:	4b09      	ldr	r3, [pc, #36]	; (800faa0 <tcp_input+0x290>)
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa80:	3301      	adds	r3, #1
 800fa82:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d029      	beq.n	800fadc <tcp_input+0x2cc>
      prev = pcb;
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	61bb      	str	r3, [r7, #24]
      continue;
 800fa8c:	e06b      	b.n	800fb66 <tcp_input+0x356>
 800fa8e:	bf00      	nop
 800fa90:	0801e134 	.word	0x0801e134
 800fa94:	0801e168 	.word	0x0801e168
 800fa98:	0801e180 	.word	0x0801e180
 800fa9c:	20010784 	.word	0x20010784
 800faa0:	20015920 	.word	0x20015920
 800faa4:	20010788 	.word	0x20010788
 800faa8:	2001078c 	.word	0x2001078c
 800faac:	2001078a 	.word	0x2001078a
 800fab0:	0801e1a8 	.word	0x0801e1a8
 800fab4:	0801e1b8 	.word	0x0801e1b8
 800fab8:	0801e1c4 	.word	0x0801e1c4
 800fabc:	20010794 	.word	0x20010794
 800fac0:	20010798 	.word	0x20010798
 800fac4:	200107a0 	.word	0x200107a0
 800fac8:	2001079e 	.word	0x2001079e
 800facc:	20019054 	.word	0x20019054
 800fad0:	0801e1e4 	.word	0x0801e1e4
 800fad4:	0801e20c 	.word	0x0801e20c
 800fad8:	0801e238 	.word	0x0801e238
    }

    if (pcb->remote_port == tcphdr->src &&
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	8b1a      	ldrh	r2, [r3, #24]
 800fae0:	4b94      	ldr	r3, [pc, #592]	; (800fd34 <tcp_input+0x524>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	881b      	ldrh	r3, [r3, #0]
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	429a      	cmp	r2, r3
 800faea:	d13a      	bne.n	800fb62 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	8ada      	ldrh	r2, [r3, #22]
 800faf0:	4b90      	ldr	r3, [pc, #576]	; (800fd34 <tcp_input+0x524>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	885b      	ldrh	r3, [r3, #2]
 800faf6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800faf8:	429a      	cmp	r2, r3
 800fafa:	d132      	bne.n	800fb62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	685a      	ldr	r2, [r3, #4]
 800fb00:	4b8d      	ldr	r3, [pc, #564]	; (800fd38 <tcp_input+0x528>)
 800fb02:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d12c      	bne.n	800fb62 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	681a      	ldr	r2, [r3, #0]
 800fb0c:	4b8a      	ldr	r3, [pc, #552]	; (800fd38 <tcp_input+0x528>)
 800fb0e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d126      	bne.n	800fb62 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	69fa      	ldr	r2, [r7, #28]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d106      	bne.n	800fb2c <tcp_input+0x31c>
 800fb1e:	4b87      	ldr	r3, [pc, #540]	; (800fd3c <tcp_input+0x52c>)
 800fb20:	f240 120d 	movw	r2, #269	; 0x10d
 800fb24:	4986      	ldr	r1, [pc, #536]	; (800fd40 <tcp_input+0x530>)
 800fb26:	4887      	ldr	r0, [pc, #540]	; (800fd44 <tcp_input+0x534>)
 800fb28:	f00b fc1e 	bl	801b368 <iprintf>
      if (prev != NULL) {
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d00a      	beq.n	800fb48 <tcp_input+0x338>
        prev->next = pcb->next;
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	68da      	ldr	r2, [r3, #12]
 800fb36:	69bb      	ldr	r3, [r7, #24]
 800fb38:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fb3a:	4b83      	ldr	r3, [pc, #524]	; (800fd48 <tcp_input+0x538>)
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	69fb      	ldr	r3, [r7, #28]
 800fb40:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fb42:	4a81      	ldr	r2, [pc, #516]	; (800fd48 <tcp_input+0x538>)
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	69fa      	ldr	r2, [r7, #28]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d111      	bne.n	800fb76 <tcp_input+0x366>
 800fb52:	4b7a      	ldr	r3, [pc, #488]	; (800fd3c <tcp_input+0x52c>)
 800fb54:	f240 1215 	movw	r2, #277	; 0x115
 800fb58:	497c      	ldr	r1, [pc, #496]	; (800fd4c <tcp_input+0x53c>)
 800fb5a:	487a      	ldr	r0, [pc, #488]	; (800fd44 <tcp_input+0x534>)
 800fb5c:	f00b fc04 	bl	801b368 <iprintf>
      break;
 800fb60:	e009      	b.n	800fb76 <tcp_input+0x366>
    }
    prev = pcb;
 800fb62:	69fb      	ldr	r3, [r7, #28]
 800fb64:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	68db      	ldr	r3, [r3, #12]
 800fb6a:	61fb      	str	r3, [r7, #28]
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f47f af5e 	bne.w	800fa30 <tcp_input+0x220>
 800fb74:	e000      	b.n	800fb78 <tcp_input+0x368>
      break;
 800fb76:	bf00      	nop
  }

  if (pcb == NULL) {
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f040 8095 	bne.w	800fcaa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb80:	4b73      	ldr	r3, [pc, #460]	; (800fd50 <tcp_input+0x540>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	61fb      	str	r3, [r7, #28]
 800fb86:	e03f      	b.n	800fc08 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	7d1b      	ldrb	r3, [r3, #20]
 800fb8c:	2b0a      	cmp	r3, #10
 800fb8e:	d006      	beq.n	800fb9e <tcp_input+0x38e>
 800fb90:	4b6a      	ldr	r3, [pc, #424]	; (800fd3c <tcp_input+0x52c>)
 800fb92:	f240 121f 	movw	r2, #287	; 0x11f
 800fb96:	496f      	ldr	r1, [pc, #444]	; (800fd54 <tcp_input+0x544>)
 800fb98:	486a      	ldr	r0, [pc, #424]	; (800fd44 <tcp_input+0x534>)
 800fb9a:	f00b fbe5 	bl	801b368 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	7a1b      	ldrb	r3, [r3, #8]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d009      	beq.n	800fbba <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fba6:	69fb      	ldr	r3, [r7, #28]
 800fba8:	7a1a      	ldrb	r2, [r3, #8]
 800fbaa:	4b63      	ldr	r3, [pc, #396]	; (800fd38 <tcp_input+0x528>)
 800fbac:	685b      	ldr	r3, [r3, #4]
 800fbae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d122      	bne.n	800fc00 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	8b1a      	ldrh	r2, [r3, #24]
 800fbbe:	4b5d      	ldr	r3, [pc, #372]	; (800fd34 <tcp_input+0x524>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	881b      	ldrh	r3, [r3, #0]
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d11b      	bne.n	800fc02 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	8ada      	ldrh	r2, [r3, #22]
 800fbce:	4b59      	ldr	r3, [pc, #356]	; (800fd34 <tcp_input+0x524>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	885b      	ldrh	r3, [r3, #2]
 800fbd4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d113      	bne.n	800fc02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	685a      	ldr	r2, [r3, #4]
 800fbde:	4b56      	ldr	r3, [pc, #344]	; (800fd38 <tcp_input+0x528>)
 800fbe0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d10d      	bne.n	800fc02 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	4b53      	ldr	r3, [pc, #332]	; (800fd38 <tcp_input+0x528>)
 800fbec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d107      	bne.n	800fc02 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fbf2:	69f8      	ldr	r0, [r7, #28]
 800fbf4:	f000 fb54 	bl	80102a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fbf8:	6878      	ldr	r0, [r7, #4]
 800fbfa:	f7fd fcd9 	bl	800d5b0 <pbuf_free>
        return;
 800fbfe:	e1f0      	b.n	800ffe2 <tcp_input+0x7d2>
        continue;
 800fc00:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc02:	69fb      	ldr	r3, [r7, #28]
 800fc04:	68db      	ldr	r3, [r3, #12]
 800fc06:	61fb      	str	r3, [r7, #28]
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1bc      	bne.n	800fb88 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fc12:	4b51      	ldr	r3, [pc, #324]	; (800fd58 <tcp_input+0x548>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	617b      	str	r3, [r7, #20]
 800fc18:	e02a      	b.n	800fc70 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	7a1b      	ldrb	r3, [r3, #8]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d00c      	beq.n	800fc3c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	7a1a      	ldrb	r2, [r3, #8]
 800fc26:	4b44      	ldr	r3, [pc, #272]	; (800fd38 <tcp_input+0x528>)
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc2e:	3301      	adds	r3, #1
 800fc30:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d002      	beq.n	800fc3c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	61bb      	str	r3, [r7, #24]
        continue;
 800fc3a:	e016      	b.n	800fc6a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	8ada      	ldrh	r2, [r3, #22]
 800fc40:	4b3c      	ldr	r3, [pc, #240]	; (800fd34 <tcp_input+0x524>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	885b      	ldrh	r3, [r3, #2]
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d10c      	bne.n	800fc66 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	4b39      	ldr	r3, [pc, #228]	; (800fd38 <tcp_input+0x528>)
 800fc52:	695b      	ldr	r3, [r3, #20]
 800fc54:	429a      	cmp	r2, r3
 800fc56:	d00f      	beq.n	800fc78 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d00d      	beq.n	800fc7a <tcp_input+0x46a>
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d009      	beq.n	800fc7a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	617b      	str	r3, [r7, #20]
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1d1      	bne.n	800fc1a <tcp_input+0x40a>
 800fc76:	e000      	b.n	800fc7a <tcp_input+0x46a>
            break;
 800fc78:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d014      	beq.n	800fcaa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fc80:	69bb      	ldr	r3, [r7, #24]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d00a      	beq.n	800fc9c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	68da      	ldr	r2, [r3, #12]
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fc8e:	4b32      	ldr	r3, [pc, #200]	; (800fd58 <tcp_input+0x548>)
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fc96:	4a30      	ldr	r2, [pc, #192]	; (800fd58 <tcp_input+0x548>)
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fc9c:	6978      	ldr	r0, [r7, #20]
 800fc9e:	f000 fa01 	bl	80100a4 <tcp_listen_input>
      }
      pbuf_free(p);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f7fd fc84 	bl	800d5b0 <pbuf_free>
      return;
 800fca8:	e19b      	b.n	800ffe2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fcaa:	69fb      	ldr	r3, [r7, #28]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f000 8160 	beq.w	800ff72 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fcb2:	4b2a      	ldr	r3, [pc, #168]	; (800fd5c <tcp_input+0x54c>)
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	891a      	ldrh	r2, [r3, #8]
 800fcbc:	4b27      	ldr	r3, [pc, #156]	; (800fd5c <tcp_input+0x54c>)
 800fcbe:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fcc0:	4a26      	ldr	r2, [pc, #152]	; (800fd5c <tcp_input+0x54c>)
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fcc6:	4b1b      	ldr	r3, [pc, #108]	; (800fd34 <tcp_input+0x524>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4a24      	ldr	r2, [pc, #144]	; (800fd5c <tcp_input+0x54c>)
 800fccc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fcce:	4b24      	ldr	r3, [pc, #144]	; (800fd60 <tcp_input+0x550>)
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fcd4:	4b23      	ldr	r3, [pc, #140]	; (800fd64 <tcp_input+0x554>)
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fcda:	4b23      	ldr	r3, [pc, #140]	; (800fd68 <tcp_input+0x558>)
 800fcdc:	2200      	movs	r2, #0
 800fcde:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fce0:	4b22      	ldr	r3, [pc, #136]	; (800fd6c <tcp_input+0x55c>)
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	f003 0308 	and.w	r3, r3, #8
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d006      	beq.n	800fcfa <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	7b5b      	ldrb	r3, [r3, #13]
 800fcf0:	f043 0301 	orr.w	r3, r3, #1
 800fcf4:	b2da      	uxtb	r2, r3
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d038      	beq.n	800fd74 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fd02:	69f8      	ldr	r0, [r7, #28]
 800fd04:	f7ff f870 	bl	800ede8 <tcp_process_refused_data>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	f113 0f0d 	cmn.w	r3, #13
 800fd0e:	d007      	beq.n	800fd20 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d02d      	beq.n	800fd74 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fd18:	4b15      	ldr	r3, [pc, #84]	; (800fd70 <tcp_input+0x560>)
 800fd1a:	881b      	ldrh	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d029      	beq.n	800fd74 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f040 8104 	bne.w	800ff32 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fd2a:	69f8      	ldr	r0, [r7, #28]
 800fd2c:	f003 fe16 	bl	801395c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fd30:	e0ff      	b.n	800ff32 <tcp_input+0x722>
 800fd32:	bf00      	nop
 800fd34:	20010784 	.word	0x20010784
 800fd38:	20015920 	.word	0x20015920
 800fd3c:	0801e134 	.word	0x0801e134
 800fd40:	0801e260 	.word	0x0801e260
 800fd44:	0801e180 	.word	0x0801e180
 800fd48:	20019054 	.word	0x20019054
 800fd4c:	0801e28c 	.word	0x0801e28c
 800fd50:	20019064 	.word	0x20019064
 800fd54:	0801e2b8 	.word	0x0801e2b8
 800fd58:	2001905c 	.word	0x2001905c
 800fd5c:	20010774 	.word	0x20010774
 800fd60:	200107a4 	.word	0x200107a4
 800fd64:	200107a1 	.word	0x200107a1
 800fd68:	2001079c 	.word	0x2001079c
 800fd6c:	200107a0 	.word	0x200107a0
 800fd70:	2001079e 	.word	0x2001079e
      }
    }
    tcp_input_pcb = pcb;
 800fd74:	4a9c      	ldr	r2, [pc, #624]	; (800ffe8 <tcp_input+0x7d8>)
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fd7a:	69f8      	ldr	r0, [r7, #28]
 800fd7c:	f000 fb0a 	bl	8010394 <tcp_process>
 800fd80:	4603      	mov	r3, r0
 800fd82:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fd84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd88:	f113 0f0d 	cmn.w	r3, #13
 800fd8c:	f000 80d3 	beq.w	800ff36 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800fd90:	4b96      	ldr	r3, [pc, #600]	; (800ffec <tcp_input+0x7dc>)
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	f003 0308 	and.w	r3, r3, #8
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d015      	beq.n	800fdc8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d008      	beq.n	800fdb8 <tcp_input+0x5a8>
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdac:	69fa      	ldr	r2, [r7, #28]
 800fdae:	6912      	ldr	r2, [r2, #16]
 800fdb0:	f06f 010d 	mvn.w	r1, #13
 800fdb4:	4610      	mov	r0, r2
 800fdb6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fdb8:	69f9      	ldr	r1, [r7, #28]
 800fdba:	488d      	ldr	r0, [pc, #564]	; (800fff0 <tcp_input+0x7e0>)
 800fdbc:	f7ff fbb0 	bl	800f520 <tcp_pcb_remove>
        tcp_free(pcb);
 800fdc0:	69f8      	ldr	r0, [r7, #28]
 800fdc2:	f7fd feb1 	bl	800db28 <tcp_free>
 800fdc6:	e0c1      	b.n	800ff4c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fdcc:	4b89      	ldr	r3, [pc, #548]	; (800fff4 <tcp_input+0x7e4>)
 800fdce:	881b      	ldrh	r3, [r3, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d01d      	beq.n	800fe10 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fdd4:	4b87      	ldr	r3, [pc, #540]	; (800fff4 <tcp_input+0x7e4>)
 800fdd6:	881b      	ldrh	r3, [r3, #0]
 800fdd8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d00a      	beq.n	800fdfa <tcp_input+0x5ea>
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fdea:	69fa      	ldr	r2, [r7, #28]
 800fdec:	6910      	ldr	r0, [r2, #16]
 800fdee:	89fa      	ldrh	r2, [r7, #14]
 800fdf0:	69f9      	ldr	r1, [r7, #28]
 800fdf2:	4798      	blx	r3
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	74fb      	strb	r3, [r7, #19]
 800fdf8:	e001      	b.n	800fdfe <tcp_input+0x5ee>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fdfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe02:	f113 0f0d 	cmn.w	r3, #13
 800fe06:	f000 8098 	beq.w	800ff3a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fe0a:	4b7a      	ldr	r3, [pc, #488]	; (800fff4 <tcp_input+0x7e4>)
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fe10:	69f8      	ldr	r0, [r7, #28]
 800fe12:	f000 f907 	bl	8010024 <tcp_input_delayed_close>
 800fe16:	4603      	mov	r3, r0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f040 8090 	bne.w	800ff3e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fe1e:	4b76      	ldr	r3, [pc, #472]	; (800fff8 <tcp_input+0x7e8>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d041      	beq.n	800feaa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d006      	beq.n	800fe3c <tcp_input+0x62c>
 800fe2e:	4b73      	ldr	r3, [pc, #460]	; (800fffc <tcp_input+0x7ec>)
 800fe30:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fe34:	4972      	ldr	r1, [pc, #456]	; (8010000 <tcp_input+0x7f0>)
 800fe36:	4873      	ldr	r0, [pc, #460]	; (8010004 <tcp_input+0x7f4>)
 800fe38:	f00b fa96 	bl	801b368 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fe3c:	69fb      	ldr	r3, [r7, #28]
 800fe3e:	8b5b      	ldrh	r3, [r3, #26]
 800fe40:	f003 0310 	and.w	r3, r3, #16
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d008      	beq.n	800fe5a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fe48:	4b6b      	ldr	r3, [pc, #428]	; (800fff8 <tcp_input+0x7e8>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fd fbaf 	bl	800d5b0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fe52:	69f8      	ldr	r0, [r7, #28]
 800fe54:	f7fe f9ac 	bl	800e1b0 <tcp_abort>
            goto aborted;
 800fe58:	e078      	b.n	800ff4c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d00c      	beq.n	800fe7e <tcp_input+0x66e>
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	6918      	ldr	r0, [r3, #16]
 800fe6e:	4b62      	ldr	r3, [pc, #392]	; (800fff8 <tcp_input+0x7e8>)
 800fe70:	681a      	ldr	r2, [r3, #0]
 800fe72:	2300      	movs	r3, #0
 800fe74:	69f9      	ldr	r1, [r7, #28]
 800fe76:	47a0      	blx	r4
 800fe78:	4603      	mov	r3, r0
 800fe7a:	74fb      	strb	r3, [r7, #19]
 800fe7c:	e008      	b.n	800fe90 <tcp_input+0x680>
 800fe7e:	4b5e      	ldr	r3, [pc, #376]	; (800fff8 <tcp_input+0x7e8>)
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	2300      	movs	r3, #0
 800fe84:	69f9      	ldr	r1, [r7, #28]
 800fe86:	2000      	movs	r0, #0
 800fe88:	f7ff f884 	bl	800ef94 <tcp_recv_null>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fe90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe94:	f113 0f0d 	cmn.w	r3, #13
 800fe98:	d053      	beq.n	800ff42 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fe9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d003      	beq.n	800feaa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fea2:	4b55      	ldr	r3, [pc, #340]	; (800fff8 <tcp_input+0x7e8>)
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800feaa:	4b50      	ldr	r3, [pc, #320]	; (800ffec <tcp_input+0x7dc>)
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	f003 0320 	and.w	r3, r3, #32
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d030      	beq.n	800ff18 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800feb6:	69fb      	ldr	r3, [r7, #28]
 800feb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feba:	2b00      	cmp	r3, #0
 800febc:	d009      	beq.n	800fed2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fec2:	7b5a      	ldrb	r2, [r3, #13]
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fec8:	f042 0220 	orr.w	r2, r2, #32
 800fecc:	b2d2      	uxtb	r2, r2
 800fece:	735a      	strb	r2, [r3, #13]
 800fed0:	e022      	b.n	800ff18 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fed6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800feda:	d005      	beq.n	800fee8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fee0:	3301      	adds	r3, #1
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fee8:	69fb      	ldr	r3, [r7, #28]
 800feea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00b      	beq.n	800ff0a <tcp_input+0x6fa>
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	6918      	ldr	r0, [r3, #16]
 800fefc:	2300      	movs	r3, #0
 800fefe:	2200      	movs	r2, #0
 800ff00:	69f9      	ldr	r1, [r7, #28]
 800ff02:	47a0      	blx	r4
 800ff04:	4603      	mov	r3, r0
 800ff06:	74fb      	strb	r3, [r7, #19]
 800ff08:	e001      	b.n	800ff0e <tcp_input+0x6fe>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ff0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff12:	f113 0f0d 	cmn.w	r3, #13
 800ff16:	d016      	beq.n	800ff46 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ff18:	4b33      	ldr	r3, [pc, #204]	; (800ffe8 <tcp_input+0x7d8>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ff1e:	69f8      	ldr	r0, [r7, #28]
 800ff20:	f000 f880 	bl	8010024 <tcp_input_delayed_close>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d10f      	bne.n	800ff4a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ff2a:	69f8      	ldr	r0, [r7, #28]
 800ff2c:	f002 ff10 	bl	8012d50 <tcp_output>
 800ff30:	e00c      	b.n	800ff4c <tcp_input+0x73c>
        goto aborted;
 800ff32:	bf00      	nop
 800ff34:	e00a      	b.n	800ff4c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ff36:	bf00      	nop
 800ff38:	e008      	b.n	800ff4c <tcp_input+0x73c>
              goto aborted;
 800ff3a:	bf00      	nop
 800ff3c:	e006      	b.n	800ff4c <tcp_input+0x73c>
          goto aborted;
 800ff3e:	bf00      	nop
 800ff40:	e004      	b.n	800ff4c <tcp_input+0x73c>
            goto aborted;
 800ff42:	bf00      	nop
 800ff44:	e002      	b.n	800ff4c <tcp_input+0x73c>
              goto aborted;
 800ff46:	bf00      	nop
 800ff48:	e000      	b.n	800ff4c <tcp_input+0x73c>
          goto aborted;
 800ff4a:	bf00      	nop
    tcp_input_pcb = NULL;
 800ff4c:	4b26      	ldr	r3, [pc, #152]	; (800ffe8 <tcp_input+0x7d8>)
 800ff4e:	2200      	movs	r2, #0
 800ff50:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ff52:	4b29      	ldr	r3, [pc, #164]	; (800fff8 <tcp_input+0x7e8>)
 800ff54:	2200      	movs	r2, #0
 800ff56:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ff58:	4b2b      	ldr	r3, [pc, #172]	; (8010008 <tcp_input+0x7f8>)
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d03f      	beq.n	800ffe0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800ff60:	4b29      	ldr	r3, [pc, #164]	; (8010008 <tcp_input+0x7f8>)
 800ff62:	685b      	ldr	r3, [r3, #4]
 800ff64:	4618      	mov	r0, r3
 800ff66:	f7fd fb23 	bl	800d5b0 <pbuf_free>
      inseg.p = NULL;
 800ff6a:	4b27      	ldr	r3, [pc, #156]	; (8010008 <tcp_input+0x7f8>)
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ff70:	e036      	b.n	800ffe0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ff72:	4b26      	ldr	r3, [pc, #152]	; (801000c <tcp_input+0x7fc>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	899b      	ldrh	r3, [r3, #12]
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fb feb0 	bl	800bce0 <lwip_htons>
 800ff80:	4603      	mov	r3, r0
 800ff82:	b2db      	uxtb	r3, r3
 800ff84:	f003 0304 	and.w	r3, r3, #4
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d118      	bne.n	800ffbe <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff8c:	4b20      	ldr	r3, [pc, #128]	; (8010010 <tcp_input+0x800>)
 800ff8e:	6819      	ldr	r1, [r3, #0]
 800ff90:	4b20      	ldr	r3, [pc, #128]	; (8010014 <tcp_input+0x804>)
 800ff92:	881b      	ldrh	r3, [r3, #0]
 800ff94:	461a      	mov	r2, r3
 800ff96:	4b20      	ldr	r3, [pc, #128]	; (8010018 <tcp_input+0x808>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff9c:	4b1b      	ldr	r3, [pc, #108]	; (801000c <tcp_input+0x7fc>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffa0:	885b      	ldrh	r3, [r3, #2]
 800ffa2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffa4:	4a19      	ldr	r2, [pc, #100]	; (801000c <tcp_input+0x7fc>)
 800ffa6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffa8:	8812      	ldrh	r2, [r2, #0]
 800ffaa:	b292      	uxth	r2, r2
 800ffac:	9202      	str	r2, [sp, #8]
 800ffae:	9301      	str	r3, [sp, #4]
 800ffb0:	4b1a      	ldr	r3, [pc, #104]	; (801001c <tcp_input+0x80c>)
 800ffb2:	9300      	str	r3, [sp, #0]
 800ffb4:	4b1a      	ldr	r3, [pc, #104]	; (8010020 <tcp_input+0x810>)
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	2000      	movs	r0, #0
 800ffba:	f003 fc7d 	bl	80138b8 <tcp_rst>
    pbuf_free(p);
 800ffbe:	6878      	ldr	r0, [r7, #4]
 800ffc0:	f7fd faf6 	bl	800d5b0 <pbuf_free>
  return;
 800ffc4:	e00c      	b.n	800ffe0 <tcp_input+0x7d0>
    goto dropped;
 800ffc6:	bf00      	nop
 800ffc8:	e006      	b.n	800ffd8 <tcp_input+0x7c8>
    goto dropped;
 800ffca:	bf00      	nop
 800ffcc:	e004      	b.n	800ffd8 <tcp_input+0x7c8>
    goto dropped;
 800ffce:	bf00      	nop
 800ffd0:	e002      	b.n	800ffd8 <tcp_input+0x7c8>
      goto dropped;
 800ffd2:	bf00      	nop
 800ffd4:	e000      	b.n	800ffd8 <tcp_input+0x7c8>
      goto dropped;
 800ffd6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f7fd fae9 	bl	800d5b0 <pbuf_free>
 800ffde:	e000      	b.n	800ffe2 <tcp_input+0x7d2>
  return;
 800ffe0:	bf00      	nop
}
 800ffe2:	3724      	adds	r7, #36	; 0x24
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd90      	pop	{r4, r7, pc}
 800ffe8:	20019068 	.word	0x20019068
 800ffec:	200107a1 	.word	0x200107a1
 800fff0:	20019054 	.word	0x20019054
 800fff4:	2001079c 	.word	0x2001079c
 800fff8:	200107a4 	.word	0x200107a4
 800fffc:	0801e134 	.word	0x0801e134
 8010000:	0801e2e8 	.word	0x0801e2e8
 8010004:	0801e180 	.word	0x0801e180
 8010008:	20010774 	.word	0x20010774
 801000c:	20010784 	.word	0x20010784
 8010010:	20010798 	.word	0x20010798
 8010014:	2001079e 	.word	0x2001079e
 8010018:	20010794 	.word	0x20010794
 801001c:	20015930 	.word	0x20015930
 8010020:	20015934 	.word	0x20015934

08010024 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d106      	bne.n	8010040 <tcp_input_delayed_close+0x1c>
 8010032:	4b17      	ldr	r3, [pc, #92]	; (8010090 <tcp_input_delayed_close+0x6c>)
 8010034:	f240 225a 	movw	r2, #602	; 0x25a
 8010038:	4916      	ldr	r1, [pc, #88]	; (8010094 <tcp_input_delayed_close+0x70>)
 801003a:	4817      	ldr	r0, [pc, #92]	; (8010098 <tcp_input_delayed_close+0x74>)
 801003c:	f00b f994 	bl	801b368 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010040:	4b16      	ldr	r3, [pc, #88]	; (801009c <tcp_input_delayed_close+0x78>)
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	f003 0310 	and.w	r3, r3, #16
 8010048:	2b00      	cmp	r3, #0
 801004a:	d01c      	beq.n	8010086 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	8b5b      	ldrh	r3, [r3, #26]
 8010050:	f003 0310 	and.w	r3, r3, #16
 8010054:	2b00      	cmp	r3, #0
 8010056:	d10d      	bne.n	8010074 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801005e:	2b00      	cmp	r3, #0
 8010060:	d008      	beq.n	8010074 <tcp_input_delayed_close+0x50>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	6912      	ldr	r2, [r2, #16]
 801006c:	f06f 010e 	mvn.w	r1, #14
 8010070:	4610      	mov	r0, r2
 8010072:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010074:	6879      	ldr	r1, [r7, #4]
 8010076:	480a      	ldr	r0, [pc, #40]	; (80100a0 <tcp_input_delayed_close+0x7c>)
 8010078:	f7ff fa52 	bl	800f520 <tcp_pcb_remove>
    tcp_free(pcb);
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7fd fd53 	bl	800db28 <tcp_free>
    return 1;
 8010082:	2301      	movs	r3, #1
 8010084:	e000      	b.n	8010088 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010086:	2300      	movs	r3, #0
}
 8010088:	4618      	mov	r0, r3
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	0801e134 	.word	0x0801e134
 8010094:	0801e304 	.word	0x0801e304
 8010098:	0801e180 	.word	0x0801e180
 801009c:	200107a1 	.word	0x200107a1
 80100a0:	20019054 	.word	0x20019054

080100a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80100a4:	b590      	push	{r4, r7, lr}
 80100a6:	b08b      	sub	sp, #44	; 0x2c
 80100a8:	af04      	add	r7, sp, #16
 80100aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80100ac:	4b6f      	ldr	r3, [pc, #444]	; (801026c <tcp_listen_input+0x1c8>)
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	f003 0304 	and.w	r3, r3, #4
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f040 80d2 	bne.w	801025e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d106      	bne.n	80100ce <tcp_listen_input+0x2a>
 80100c0:	4b6b      	ldr	r3, [pc, #428]	; (8010270 <tcp_listen_input+0x1cc>)
 80100c2:	f240 2281 	movw	r2, #641	; 0x281
 80100c6:	496b      	ldr	r1, [pc, #428]	; (8010274 <tcp_listen_input+0x1d0>)
 80100c8:	486b      	ldr	r0, [pc, #428]	; (8010278 <tcp_listen_input+0x1d4>)
 80100ca:	f00b f94d 	bl	801b368 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80100ce:	4b67      	ldr	r3, [pc, #412]	; (801026c <tcp_listen_input+0x1c8>)
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	f003 0310 	and.w	r3, r3, #16
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d019      	beq.n	801010e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100da:	4b68      	ldr	r3, [pc, #416]	; (801027c <tcp_listen_input+0x1d8>)
 80100dc:	6819      	ldr	r1, [r3, #0]
 80100de:	4b68      	ldr	r3, [pc, #416]	; (8010280 <tcp_listen_input+0x1dc>)
 80100e0:	881b      	ldrh	r3, [r3, #0]
 80100e2:	461a      	mov	r2, r3
 80100e4:	4b67      	ldr	r3, [pc, #412]	; (8010284 <tcp_listen_input+0x1e0>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100ea:	4b67      	ldr	r3, [pc, #412]	; (8010288 <tcp_listen_input+0x1e4>)
 80100ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100ee:	885b      	ldrh	r3, [r3, #2]
 80100f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100f2:	4a65      	ldr	r2, [pc, #404]	; (8010288 <tcp_listen_input+0x1e4>)
 80100f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100f6:	8812      	ldrh	r2, [r2, #0]
 80100f8:	b292      	uxth	r2, r2
 80100fa:	9202      	str	r2, [sp, #8]
 80100fc:	9301      	str	r3, [sp, #4]
 80100fe:	4b63      	ldr	r3, [pc, #396]	; (801028c <tcp_listen_input+0x1e8>)
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	4b63      	ldr	r3, [pc, #396]	; (8010290 <tcp_listen_input+0x1ec>)
 8010104:	4602      	mov	r2, r0
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f003 fbd6 	bl	80138b8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801010c:	e0a9      	b.n	8010262 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801010e:	4b57      	ldr	r3, [pc, #348]	; (801026c <tcp_listen_input+0x1c8>)
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	f003 0302 	and.w	r3, r3, #2
 8010116:	2b00      	cmp	r3, #0
 8010118:	f000 80a3 	beq.w	8010262 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	7d5b      	ldrb	r3, [r3, #21]
 8010120:	4618      	mov	r0, r3
 8010122:	f7ff f85b 	bl	800f1dc <tcp_alloc>
 8010126:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d111      	bne.n	8010152 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	699b      	ldr	r3, [r3, #24]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d00a      	beq.n	801014c <tcp_listen_input+0xa8>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	699b      	ldr	r3, [r3, #24]
 801013a:	687a      	ldr	r2, [r7, #4]
 801013c:	6910      	ldr	r0, [r2, #16]
 801013e:	f04f 32ff 	mov.w	r2, #4294967295
 8010142:	2100      	movs	r1, #0
 8010144:	4798      	blx	r3
 8010146:	4603      	mov	r3, r0
 8010148:	73bb      	strb	r3, [r7, #14]
      return;
 801014a:	e08b      	b.n	8010264 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801014c:	23f0      	movs	r3, #240	; 0xf0
 801014e:	73bb      	strb	r3, [r7, #14]
      return;
 8010150:	e088      	b.n	8010264 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010152:	4b50      	ldr	r3, [pc, #320]	; (8010294 <tcp_listen_input+0x1f0>)
 8010154:	695a      	ldr	r2, [r3, #20]
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801015a:	4b4e      	ldr	r3, [pc, #312]	; (8010294 <tcp_listen_input+0x1f0>)
 801015c:	691a      	ldr	r2, [r3, #16]
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	8ada      	ldrh	r2, [r3, #22]
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801016a:	4b47      	ldr	r3, [pc, #284]	; (8010288 <tcp_listen_input+0x1e4>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	881b      	ldrh	r3, [r3, #0]
 8010170:	b29a      	uxth	r2, r3
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	2203      	movs	r2, #3
 801017a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801017c:	4b41      	ldr	r3, [pc, #260]	; (8010284 <tcp_listen_input+0x1e0>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	1c5a      	adds	r2, r3, #1
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801018e:	6978      	ldr	r0, [r7, #20]
 8010190:	f7ff fa5a 	bl	800f648 <tcp_next_iss>
 8010194:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	693a      	ldr	r2, [r7, #16]
 801019a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	693a      	ldr	r2, [r7, #16]
 80101a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80101a2:	697b      	ldr	r3, [r7, #20]
 80101a4:	693a      	ldr	r2, [r7, #16]
 80101a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	693a      	ldr	r2, [r7, #16]
 80101ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80101ae:	4b35      	ldr	r3, [pc, #212]	; (8010284 <tcp_listen_input+0x1e0>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	1e5a      	subs	r2, r3, #1
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	691a      	ldr	r2, [r3, #16]
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	7a5b      	ldrb	r3, [r3, #9]
 80101ca:	f003 030c 	and.w	r3, r3, #12
 80101ce:	b2da      	uxtb	r2, r3
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	7a1a      	ldrb	r2, [r3, #8]
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80101dc:	4b2e      	ldr	r3, [pc, #184]	; (8010298 <tcp_listen_input+0x1f4>)
 80101de:	681a      	ldr	r2, [r3, #0]
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	60da      	str	r2, [r3, #12]
 80101e4:	4a2c      	ldr	r2, [pc, #176]	; (8010298 <tcp_listen_input+0x1f4>)
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	6013      	str	r3, [r2, #0]
 80101ea:	f003 fd27 	bl	8013c3c <tcp_timer_needed>
 80101ee:	4b2b      	ldr	r3, [pc, #172]	; (801029c <tcp_listen_input+0x1f8>)
 80101f0:	2201      	movs	r2, #1
 80101f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80101f4:	6978      	ldr	r0, [r7, #20]
 80101f6:	f001 fd8d 	bl	8011d14 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80101fa:	4b23      	ldr	r3, [pc, #140]	; (8010288 <tcp_listen_input+0x1e4>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	89db      	ldrh	r3, [r3, #14]
 8010200:	b29a      	uxth	r2, r3
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	3304      	adds	r3, #4
 801021c:	4618      	mov	r0, r3
 801021e:	f007 fb69 	bl	80178f4 <ip4_route>
 8010222:	4601      	mov	r1, r0
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	3304      	adds	r3, #4
 8010228:	461a      	mov	r2, r3
 801022a:	4620      	mov	r0, r4
 801022c:	f7ff fa32 	bl	800f694 <tcp_eff_send_mss_netif>
 8010230:	4603      	mov	r3, r0
 8010232:	461a      	mov	r2, r3
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010238:	2112      	movs	r1, #18
 801023a:	6978      	ldr	r0, [r7, #20]
 801023c:	f002 fc9a 	bl	8012b74 <tcp_enqueue_flags>
 8010240:	4603      	mov	r3, r0
 8010242:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d004      	beq.n	8010256 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801024c:	2100      	movs	r1, #0
 801024e:	6978      	ldr	r0, [r7, #20]
 8010250:	f7fd fef0 	bl	800e034 <tcp_abandon>
      return;
 8010254:	e006      	b.n	8010264 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010256:	6978      	ldr	r0, [r7, #20]
 8010258:	f002 fd7a 	bl	8012d50 <tcp_output>
  return;
 801025c:	e001      	b.n	8010262 <tcp_listen_input+0x1be>
    return;
 801025e:	bf00      	nop
 8010260:	e000      	b.n	8010264 <tcp_listen_input+0x1c0>
  return;
 8010262:	bf00      	nop
}
 8010264:	371c      	adds	r7, #28
 8010266:	46bd      	mov	sp, r7
 8010268:	bd90      	pop	{r4, r7, pc}
 801026a:	bf00      	nop
 801026c:	200107a0 	.word	0x200107a0
 8010270:	0801e134 	.word	0x0801e134
 8010274:	0801e32c 	.word	0x0801e32c
 8010278:	0801e180 	.word	0x0801e180
 801027c:	20010798 	.word	0x20010798
 8010280:	2001079e 	.word	0x2001079e
 8010284:	20010794 	.word	0x20010794
 8010288:	20010784 	.word	0x20010784
 801028c:	20015930 	.word	0x20015930
 8010290:	20015934 	.word	0x20015934
 8010294:	20015920 	.word	0x20015920
 8010298:	20019054 	.word	0x20019054
 801029c:	20019050 	.word	0x20019050

080102a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b086      	sub	sp, #24
 80102a4:	af04      	add	r7, sp, #16
 80102a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80102a8:	4b2f      	ldr	r3, [pc, #188]	; (8010368 <tcp_timewait_input+0xc8>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	f003 0304 	and.w	r3, r3, #4
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d153      	bne.n	801035c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d106      	bne.n	80102c8 <tcp_timewait_input+0x28>
 80102ba:	4b2c      	ldr	r3, [pc, #176]	; (801036c <tcp_timewait_input+0xcc>)
 80102bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80102c0:	492b      	ldr	r1, [pc, #172]	; (8010370 <tcp_timewait_input+0xd0>)
 80102c2:	482c      	ldr	r0, [pc, #176]	; (8010374 <tcp_timewait_input+0xd4>)
 80102c4:	f00b f850 	bl	801b368 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80102c8:	4b27      	ldr	r3, [pc, #156]	; (8010368 <tcp_timewait_input+0xc8>)
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	f003 0302 	and.w	r3, r3, #2
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d02a      	beq.n	801032a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80102d4:	4b28      	ldr	r3, [pc, #160]	; (8010378 <tcp_timewait_input+0xd8>)
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102dc:	1ad3      	subs	r3, r2, r3
 80102de:	2b00      	cmp	r3, #0
 80102e0:	db2d      	blt.n	801033e <tcp_timewait_input+0x9e>
 80102e2:	4b25      	ldr	r3, [pc, #148]	; (8010378 <tcp_timewait_input+0xd8>)
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ea:	6879      	ldr	r1, [r7, #4]
 80102ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80102ee:	440b      	add	r3, r1
 80102f0:	1ad3      	subs	r3, r2, r3
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	dc23      	bgt.n	801033e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102f6:	4b21      	ldr	r3, [pc, #132]	; (801037c <tcp_timewait_input+0xdc>)
 80102f8:	6819      	ldr	r1, [r3, #0]
 80102fa:	4b21      	ldr	r3, [pc, #132]	; (8010380 <tcp_timewait_input+0xe0>)
 80102fc:	881b      	ldrh	r3, [r3, #0]
 80102fe:	461a      	mov	r2, r3
 8010300:	4b1d      	ldr	r3, [pc, #116]	; (8010378 <tcp_timewait_input+0xd8>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010306:	4b1f      	ldr	r3, [pc, #124]	; (8010384 <tcp_timewait_input+0xe4>)
 8010308:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801030a:	885b      	ldrh	r3, [r3, #2]
 801030c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801030e:	4a1d      	ldr	r2, [pc, #116]	; (8010384 <tcp_timewait_input+0xe4>)
 8010310:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010312:	8812      	ldrh	r2, [r2, #0]
 8010314:	b292      	uxth	r2, r2
 8010316:	9202      	str	r2, [sp, #8]
 8010318:	9301      	str	r3, [sp, #4]
 801031a:	4b1b      	ldr	r3, [pc, #108]	; (8010388 <tcp_timewait_input+0xe8>)
 801031c:	9300      	str	r3, [sp, #0]
 801031e:	4b1b      	ldr	r3, [pc, #108]	; (801038c <tcp_timewait_input+0xec>)
 8010320:	4602      	mov	r2, r0
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f003 fac8 	bl	80138b8 <tcp_rst>
      return;
 8010328:	e01b      	b.n	8010362 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801032a:	4b0f      	ldr	r3, [pc, #60]	; (8010368 <tcp_timewait_input+0xc8>)
 801032c:	781b      	ldrb	r3, [r3, #0]
 801032e:	f003 0301 	and.w	r3, r3, #1
 8010332:	2b00      	cmp	r3, #0
 8010334:	d003      	beq.n	801033e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010336:	4b16      	ldr	r3, [pc, #88]	; (8010390 <tcp_timewait_input+0xf0>)
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801033e:	4b10      	ldr	r3, [pc, #64]	; (8010380 <tcp_timewait_input+0xe0>)
 8010340:	881b      	ldrh	r3, [r3, #0]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00c      	beq.n	8010360 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	8b5b      	ldrh	r3, [r3, #26]
 801034a:	f043 0302 	orr.w	r3, r3, #2
 801034e:	b29a      	uxth	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f002 fcfb 	bl	8012d50 <tcp_output>
  }
  return;
 801035a:	e001      	b.n	8010360 <tcp_timewait_input+0xc0>
    return;
 801035c:	bf00      	nop
 801035e:	e000      	b.n	8010362 <tcp_timewait_input+0xc2>
  return;
 8010360:	bf00      	nop
}
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}
 8010368:	200107a0 	.word	0x200107a0
 801036c:	0801e134 	.word	0x0801e134
 8010370:	0801e34c 	.word	0x0801e34c
 8010374:	0801e180 	.word	0x0801e180
 8010378:	20010794 	.word	0x20010794
 801037c:	20010798 	.word	0x20010798
 8010380:	2001079e 	.word	0x2001079e
 8010384:	20010784 	.word	0x20010784
 8010388:	20015930 	.word	0x20015930
 801038c:	20015934 	.word	0x20015934
 8010390:	20019058 	.word	0x20019058

08010394 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010394:	b590      	push	{r4, r7, lr}
 8010396:	b08d      	sub	sp, #52	; 0x34
 8010398:	af04      	add	r7, sp, #16
 801039a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801039c:	2300      	movs	r3, #0
 801039e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80103a0:	2300      	movs	r3, #0
 80103a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d106      	bne.n	80103b8 <tcp_process+0x24>
 80103aa:	4ba5      	ldr	r3, [pc, #660]	; (8010640 <tcp_process+0x2ac>)
 80103ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80103b0:	49a4      	ldr	r1, [pc, #656]	; (8010644 <tcp_process+0x2b0>)
 80103b2:	48a5      	ldr	r0, [pc, #660]	; (8010648 <tcp_process+0x2b4>)
 80103b4:	f00a ffd8 	bl	801b368 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80103b8:	4ba4      	ldr	r3, [pc, #656]	; (801064c <tcp_process+0x2b8>)
 80103ba:	781b      	ldrb	r3, [r3, #0]
 80103bc:	f003 0304 	and.w	r3, r3, #4
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d04e      	beq.n	8010462 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	7d1b      	ldrb	r3, [r3, #20]
 80103c8:	2b02      	cmp	r3, #2
 80103ca:	d108      	bne.n	80103de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103d0:	4b9f      	ldr	r3, [pc, #636]	; (8010650 <tcp_process+0x2bc>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d123      	bne.n	8010420 <tcp_process+0x8c>
        acceptable = 1;
 80103d8:	2301      	movs	r3, #1
 80103da:	76fb      	strb	r3, [r7, #27]
 80103dc:	e020      	b.n	8010420 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80103e2:	4b9c      	ldr	r3, [pc, #624]	; (8010654 <tcp_process+0x2c0>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	429a      	cmp	r2, r3
 80103e8:	d102      	bne.n	80103f0 <tcp_process+0x5c>
        acceptable = 1;
 80103ea:	2301      	movs	r3, #1
 80103ec:	76fb      	strb	r3, [r7, #27]
 80103ee:	e017      	b.n	8010420 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80103f0:	4b98      	ldr	r3, [pc, #608]	; (8010654 <tcp_process+0x2c0>)
 80103f2:	681a      	ldr	r2, [r3, #0]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	db10      	blt.n	8010420 <tcp_process+0x8c>
 80103fe:	4b95      	ldr	r3, [pc, #596]	; (8010654 <tcp_process+0x2c0>)
 8010400:	681a      	ldr	r2, [r3, #0]
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010406:	6879      	ldr	r1, [r7, #4]
 8010408:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801040a:	440b      	add	r3, r1
 801040c:	1ad3      	subs	r3, r2, r3
 801040e:	2b00      	cmp	r3, #0
 8010410:	dc06      	bgt.n	8010420 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	8b5b      	ldrh	r3, [r3, #26]
 8010416:	f043 0302 	orr.w	r3, r3, #2
 801041a:	b29a      	uxth	r2, r3
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010420:	7efb      	ldrb	r3, [r7, #27]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d01b      	beq.n	801045e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	7d1b      	ldrb	r3, [r3, #20]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d106      	bne.n	801043c <tcp_process+0xa8>
 801042e:	4b84      	ldr	r3, [pc, #528]	; (8010640 <tcp_process+0x2ac>)
 8010430:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010434:	4988      	ldr	r1, [pc, #544]	; (8010658 <tcp_process+0x2c4>)
 8010436:	4884      	ldr	r0, [pc, #528]	; (8010648 <tcp_process+0x2b4>)
 8010438:	f00a ff96 	bl	801b368 <iprintf>
      recv_flags |= TF_RESET;
 801043c:	4b87      	ldr	r3, [pc, #540]	; (801065c <tcp_process+0x2c8>)
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	f043 0308 	orr.w	r3, r3, #8
 8010444:	b2da      	uxtb	r2, r3
 8010446:	4b85      	ldr	r3, [pc, #532]	; (801065c <tcp_process+0x2c8>)
 8010448:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	8b5b      	ldrh	r3, [r3, #26]
 801044e:	f023 0301 	bic.w	r3, r3, #1
 8010452:	b29a      	uxth	r2, r3
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010458:	f06f 030d 	mvn.w	r3, #13
 801045c:	e37a      	b.n	8010b54 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801045e:	2300      	movs	r3, #0
 8010460:	e378      	b.n	8010b54 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010462:	4b7a      	ldr	r3, [pc, #488]	; (801064c <tcp_process+0x2b8>)
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	f003 0302 	and.w	r3, r3, #2
 801046a:	2b00      	cmp	r3, #0
 801046c:	d010      	beq.n	8010490 <tcp_process+0xfc>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	7d1b      	ldrb	r3, [r3, #20]
 8010472:	2b02      	cmp	r3, #2
 8010474:	d00c      	beq.n	8010490 <tcp_process+0xfc>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	7d1b      	ldrb	r3, [r3, #20]
 801047a:	2b03      	cmp	r3, #3
 801047c:	d008      	beq.n	8010490 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	8b5b      	ldrh	r3, [r3, #26]
 8010482:	f043 0302 	orr.w	r3, r3, #2
 8010486:	b29a      	uxth	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801048c:	2300      	movs	r3, #0
 801048e:	e361      	b.n	8010b54 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	8b5b      	ldrh	r3, [r3, #26]
 8010494:	f003 0310 	and.w	r3, r3, #16
 8010498:	2b00      	cmp	r3, #0
 801049a:	d103      	bne.n	80104a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801049c:	4b70      	ldr	r3, [pc, #448]	; (8010660 <tcp_process+0x2cc>)
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2200      	movs	r2, #0
 80104b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f001 fc2d 	bl	8011d14 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	7d1b      	ldrb	r3, [r3, #20]
 80104be:	3b02      	subs	r3, #2
 80104c0:	2b07      	cmp	r3, #7
 80104c2:	f200 8337 	bhi.w	8010b34 <tcp_process+0x7a0>
 80104c6:	a201      	add	r2, pc, #4	; (adr r2, 80104cc <tcp_process+0x138>)
 80104c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104cc:	080104ed 	.word	0x080104ed
 80104d0:	0801071d 	.word	0x0801071d
 80104d4:	08010895 	.word	0x08010895
 80104d8:	080108bf 	.word	0x080108bf
 80104dc:	080109e3 	.word	0x080109e3
 80104e0:	08010895 	.word	0x08010895
 80104e4:	08010a6f 	.word	0x08010a6f
 80104e8:	08010aff 	.word	0x08010aff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80104ec:	4b57      	ldr	r3, [pc, #348]	; (801064c <tcp_process+0x2b8>)
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	f003 0310 	and.w	r3, r3, #16
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f000 80e4 	beq.w	80106c2 <tcp_process+0x32e>
 80104fa:	4b54      	ldr	r3, [pc, #336]	; (801064c <tcp_process+0x2b8>)
 80104fc:	781b      	ldrb	r3, [r3, #0]
 80104fe:	f003 0302 	and.w	r3, r3, #2
 8010502:	2b00      	cmp	r3, #0
 8010504:	f000 80dd 	beq.w	80106c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801050c:	1c5a      	adds	r2, r3, #1
 801050e:	4b50      	ldr	r3, [pc, #320]	; (8010650 <tcp_process+0x2bc>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	429a      	cmp	r2, r3
 8010514:	f040 80d5 	bne.w	80106c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010518:	4b4e      	ldr	r3, [pc, #312]	; (8010654 <tcp_process+0x2c0>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	1c5a      	adds	r2, r3, #1
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801052a:	4b49      	ldr	r3, [pc, #292]	; (8010650 <tcp_process+0x2bc>)
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010532:	4b4c      	ldr	r3, [pc, #304]	; (8010664 <tcp_process+0x2d0>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	89db      	ldrh	r3, [r3, #14]
 8010538:	b29a      	uxth	r2, r3
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801054c:	4b41      	ldr	r3, [pc, #260]	; (8010654 <tcp_process+0x2c0>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	1e5a      	subs	r2, r3, #1
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2204      	movs	r2, #4
 801055a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	3304      	adds	r3, #4
 8010564:	4618      	mov	r0, r3
 8010566:	f007 f9c5 	bl	80178f4 <ip4_route>
 801056a:	4601      	mov	r1, r0
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	3304      	adds	r3, #4
 8010570:	461a      	mov	r2, r3
 8010572:	4620      	mov	r0, r4
 8010574:	f7ff f88e 	bl	800f694 <tcp_eff_send_mss_netif>
 8010578:	4603      	mov	r3, r0
 801057a:	461a      	mov	r2, r3
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010584:	009a      	lsls	r2, r3, #2
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801058a:	005b      	lsls	r3, r3, #1
 801058c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010590:	428b      	cmp	r3, r1
 8010592:	bf38      	it	cc
 8010594:	460b      	movcc	r3, r1
 8010596:	429a      	cmp	r2, r3
 8010598:	d204      	bcs.n	80105a4 <tcp_process+0x210>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	e00d      	b.n	80105c0 <tcp_process+0x22c>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105a8:	005b      	lsls	r3, r3, #1
 80105aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80105ae:	4293      	cmp	r3, r2
 80105b0:	d904      	bls.n	80105bc <tcp_process+0x228>
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105b6:	005b      	lsls	r3, r3, #1
 80105b8:	b29b      	uxth	r3, r3
 80105ba:	e001      	b.n	80105c0 <tcp_process+0x22c>
 80105bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80105c0:	687a      	ldr	r2, [r7, #4]
 80105c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d106      	bne.n	80105de <tcp_process+0x24a>
 80105d0:	4b1b      	ldr	r3, [pc, #108]	; (8010640 <tcp_process+0x2ac>)
 80105d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80105d6:	4924      	ldr	r1, [pc, #144]	; (8010668 <tcp_process+0x2d4>)
 80105d8:	481b      	ldr	r0, [pc, #108]	; (8010648 <tcp_process+0x2b4>)
 80105da:	f00a fec5 	bl	801b368 <iprintf>
        --pcb->snd_queuelen;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105e4:	3b01      	subs	r3, #1
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d111      	bne.n	801061e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d106      	bne.n	8010614 <tcp_process+0x280>
 8010606:	4b0e      	ldr	r3, [pc, #56]	; (8010640 <tcp_process+0x2ac>)
 8010608:	f44f 725d 	mov.w	r2, #884	; 0x374
 801060c:	4917      	ldr	r1, [pc, #92]	; (801066c <tcp_process+0x2d8>)
 801060e:	480e      	ldr	r0, [pc, #56]	; (8010648 <tcp_process+0x2b4>)
 8010610:	f00a feaa 	bl	801b368 <iprintf>
          pcb->unsent = rseg->next;
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	66da      	str	r2, [r3, #108]	; 0x6c
 801061c:	e003      	b.n	8010626 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	681a      	ldr	r2, [r3, #0]
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010626:	69f8      	ldr	r0, [r7, #28]
 8010628:	f7fe fc6f 	bl	800ef0a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010630:	2b00      	cmp	r3, #0
 8010632:	d11d      	bne.n	8010670 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801063a:	861a      	strh	r2, [r3, #48]	; 0x30
 801063c:	e01f      	b.n	801067e <tcp_process+0x2ea>
 801063e:	bf00      	nop
 8010640:	0801e134 	.word	0x0801e134
 8010644:	0801e36c 	.word	0x0801e36c
 8010648:	0801e180 	.word	0x0801e180
 801064c:	200107a0 	.word	0x200107a0
 8010650:	20010798 	.word	0x20010798
 8010654:	20010794 	.word	0x20010794
 8010658:	0801e388 	.word	0x0801e388
 801065c:	200107a1 	.word	0x200107a1
 8010660:	20019058 	.word	0x20019058
 8010664:	20010784 	.word	0x20010784
 8010668:	0801e3a8 	.word	0x0801e3a8
 801066c:	0801e3c0 	.word	0x0801e3c0
        } else {
          pcb->rtime = 0;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010684:	2b00      	cmp	r3, #0
 8010686:	d00a      	beq.n	801069e <tcp_process+0x30a>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	6910      	ldr	r0, [r2, #16]
 8010692:	2200      	movs	r2, #0
 8010694:	6879      	ldr	r1, [r7, #4]
 8010696:	4798      	blx	r3
 8010698:	4603      	mov	r3, r0
 801069a:	76bb      	strb	r3, [r7, #26]
 801069c:	e001      	b.n	80106a2 <tcp_process+0x30e>
 801069e:	2300      	movs	r3, #0
 80106a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80106a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80106a6:	f113 0f0d 	cmn.w	r3, #13
 80106aa:	d102      	bne.n	80106b2 <tcp_process+0x31e>
          return ERR_ABRT;
 80106ac:	f06f 030c 	mvn.w	r3, #12
 80106b0:	e250      	b.n	8010b54 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	8b5b      	ldrh	r3, [r3, #26]
 80106b6:	f043 0302 	orr.w	r3, r3, #2
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80106c0:	e23a      	b.n	8010b38 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80106c2:	4b9d      	ldr	r3, [pc, #628]	; (8010938 <tcp_process+0x5a4>)
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	f003 0310 	and.w	r3, r3, #16
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f000 8234 	beq.w	8010b38 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106d0:	4b9a      	ldr	r3, [pc, #616]	; (801093c <tcp_process+0x5a8>)
 80106d2:	6819      	ldr	r1, [r3, #0]
 80106d4:	4b9a      	ldr	r3, [pc, #616]	; (8010940 <tcp_process+0x5ac>)
 80106d6:	881b      	ldrh	r3, [r3, #0]
 80106d8:	461a      	mov	r2, r3
 80106da:	4b9a      	ldr	r3, [pc, #616]	; (8010944 <tcp_process+0x5b0>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106e0:	4b99      	ldr	r3, [pc, #612]	; (8010948 <tcp_process+0x5b4>)
 80106e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106e4:	885b      	ldrh	r3, [r3, #2]
 80106e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106e8:	4a97      	ldr	r2, [pc, #604]	; (8010948 <tcp_process+0x5b4>)
 80106ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106ec:	8812      	ldrh	r2, [r2, #0]
 80106ee:	b292      	uxth	r2, r2
 80106f0:	9202      	str	r2, [sp, #8]
 80106f2:	9301      	str	r3, [sp, #4]
 80106f4:	4b95      	ldr	r3, [pc, #596]	; (801094c <tcp_process+0x5b8>)
 80106f6:	9300      	str	r3, [sp, #0]
 80106f8:	4b95      	ldr	r3, [pc, #596]	; (8010950 <tcp_process+0x5bc>)
 80106fa:	4602      	mov	r2, r0
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f003 f8db 	bl	80138b8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010708:	2b05      	cmp	r3, #5
 801070a:	f200 8215 	bhi.w	8010b38 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2200      	movs	r2, #0
 8010712:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010714:	6878      	ldr	r0, [r7, #4]
 8010716:	f002 fea5 	bl	8013464 <tcp_rexmit_rto>
      break;
 801071a:	e20d      	b.n	8010b38 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801071c:	4b86      	ldr	r3, [pc, #536]	; (8010938 <tcp_process+0x5a4>)
 801071e:	781b      	ldrb	r3, [r3, #0]
 8010720:	f003 0310 	and.w	r3, r3, #16
 8010724:	2b00      	cmp	r3, #0
 8010726:	f000 80a1 	beq.w	801086c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801072a:	4b84      	ldr	r3, [pc, #528]	; (801093c <tcp_process+0x5a8>)
 801072c:	681a      	ldr	r2, [r3, #0]
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010732:	1ad3      	subs	r3, r2, r3
 8010734:	3b01      	subs	r3, #1
 8010736:	2b00      	cmp	r3, #0
 8010738:	db7e      	blt.n	8010838 <tcp_process+0x4a4>
 801073a:	4b80      	ldr	r3, [pc, #512]	; (801093c <tcp_process+0x5a8>)
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010742:	1ad3      	subs	r3, r2, r3
 8010744:	2b00      	cmp	r3, #0
 8010746:	dc77      	bgt.n	8010838 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2204      	movs	r2, #4
 801074c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010752:	2b00      	cmp	r3, #0
 8010754:	d102      	bne.n	801075c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010756:	23fa      	movs	r3, #250	; 0xfa
 8010758:	76bb      	strb	r3, [r7, #26]
 801075a:	e01d      	b.n	8010798 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010760:	699b      	ldr	r3, [r3, #24]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d106      	bne.n	8010774 <tcp_process+0x3e0>
 8010766:	4b7b      	ldr	r3, [pc, #492]	; (8010954 <tcp_process+0x5c0>)
 8010768:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801076c:	497a      	ldr	r1, [pc, #488]	; (8010958 <tcp_process+0x5c4>)
 801076e:	487b      	ldr	r0, [pc, #492]	; (801095c <tcp_process+0x5c8>)
 8010770:	f00a fdfa 	bl	801b368 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010778:	699b      	ldr	r3, [r3, #24]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d00a      	beq.n	8010794 <tcp_process+0x400>
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010782:	699b      	ldr	r3, [r3, #24]
 8010784:	687a      	ldr	r2, [r7, #4]
 8010786:	6910      	ldr	r0, [r2, #16]
 8010788:	2200      	movs	r2, #0
 801078a:	6879      	ldr	r1, [r7, #4]
 801078c:	4798      	blx	r3
 801078e:	4603      	mov	r3, r0
 8010790:	76bb      	strb	r3, [r7, #26]
 8010792:	e001      	b.n	8010798 <tcp_process+0x404>
 8010794:	23f0      	movs	r3, #240	; 0xf0
 8010796:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010798:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00a      	beq.n	80107b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80107a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80107a4:	f113 0f0d 	cmn.w	r3, #13
 80107a8:	d002      	beq.n	80107b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f7fd fd00 	bl	800e1b0 <tcp_abort>
            }
            return ERR_ABRT;
 80107b0:	f06f 030c 	mvn.w	r3, #12
 80107b4:	e1ce      	b.n	8010b54 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f000 fae0 	bl	8010d7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80107bc:	4b68      	ldr	r3, [pc, #416]	; (8010960 <tcp_process+0x5cc>)
 80107be:	881b      	ldrh	r3, [r3, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d005      	beq.n	80107d0 <tcp_process+0x43c>
            recv_acked--;
 80107c4:	4b66      	ldr	r3, [pc, #408]	; (8010960 <tcp_process+0x5cc>)
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	3b01      	subs	r3, #1
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	4b64      	ldr	r3, [pc, #400]	; (8010960 <tcp_process+0x5cc>)
 80107ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107d4:	009a      	lsls	r2, r3, #2
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107da:	005b      	lsls	r3, r3, #1
 80107dc:	f241 111c 	movw	r1, #4380	; 0x111c
 80107e0:	428b      	cmp	r3, r1
 80107e2:	bf38      	it	cc
 80107e4:	460b      	movcc	r3, r1
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d204      	bcs.n	80107f4 <tcp_process+0x460>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	e00d      	b.n	8010810 <tcp_process+0x47c>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107f8:	005b      	lsls	r3, r3, #1
 80107fa:	f241 121c 	movw	r2, #4380	; 0x111c
 80107fe:	4293      	cmp	r3, r2
 8010800:	d904      	bls.n	801080c <tcp_process+0x478>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010806:	005b      	lsls	r3, r3, #1
 8010808:	b29b      	uxth	r3, r3
 801080a:	e001      	b.n	8010810 <tcp_process+0x47c>
 801080c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010816:	4b53      	ldr	r3, [pc, #332]	; (8010964 <tcp_process+0x5d0>)
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	f003 0320 	and.w	r3, r3, #32
 801081e:	2b00      	cmp	r3, #0
 8010820:	d037      	beq.n	8010892 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	8b5b      	ldrh	r3, [r3, #26]
 8010826:	f043 0302 	orr.w	r3, r3, #2
 801082a:	b29a      	uxth	r2, r3
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2207      	movs	r2, #7
 8010834:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010836:	e02c      	b.n	8010892 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010838:	4b40      	ldr	r3, [pc, #256]	; (801093c <tcp_process+0x5a8>)
 801083a:	6819      	ldr	r1, [r3, #0]
 801083c:	4b40      	ldr	r3, [pc, #256]	; (8010940 <tcp_process+0x5ac>)
 801083e:	881b      	ldrh	r3, [r3, #0]
 8010840:	461a      	mov	r2, r3
 8010842:	4b40      	ldr	r3, [pc, #256]	; (8010944 <tcp_process+0x5b0>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010848:	4b3f      	ldr	r3, [pc, #252]	; (8010948 <tcp_process+0x5b4>)
 801084a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801084c:	885b      	ldrh	r3, [r3, #2]
 801084e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010850:	4a3d      	ldr	r2, [pc, #244]	; (8010948 <tcp_process+0x5b4>)
 8010852:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010854:	8812      	ldrh	r2, [r2, #0]
 8010856:	b292      	uxth	r2, r2
 8010858:	9202      	str	r2, [sp, #8]
 801085a:	9301      	str	r3, [sp, #4]
 801085c:	4b3b      	ldr	r3, [pc, #236]	; (801094c <tcp_process+0x5b8>)
 801085e:	9300      	str	r3, [sp, #0]
 8010860:	4b3b      	ldr	r3, [pc, #236]	; (8010950 <tcp_process+0x5bc>)
 8010862:	4602      	mov	r2, r0
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f003 f827 	bl	80138b8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801086a:	e167      	b.n	8010b3c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801086c:	4b32      	ldr	r3, [pc, #200]	; (8010938 <tcp_process+0x5a4>)
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	f003 0302 	and.w	r3, r3, #2
 8010874:	2b00      	cmp	r3, #0
 8010876:	f000 8161 	beq.w	8010b3c <tcp_process+0x7a8>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801087e:	1e5a      	subs	r2, r3, #1
 8010880:	4b30      	ldr	r3, [pc, #192]	; (8010944 <tcp_process+0x5b0>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	429a      	cmp	r2, r3
 8010886:	f040 8159 	bne.w	8010b3c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f002 fe0c 	bl	80134a8 <tcp_rexmit>
      break;
 8010890:	e154      	b.n	8010b3c <tcp_process+0x7a8>
 8010892:	e153      	b.n	8010b3c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 fa71 	bl	8010d7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801089a:	4b32      	ldr	r3, [pc, #200]	; (8010964 <tcp_process+0x5d0>)
 801089c:	781b      	ldrb	r3, [r3, #0]
 801089e:	f003 0320 	and.w	r3, r3, #32
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f000 814c 	beq.w	8010b40 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	8b5b      	ldrh	r3, [r3, #26]
 80108ac:	f043 0302 	orr.w	r3, r3, #2
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2207      	movs	r2, #7
 80108ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80108bc:	e140      	b.n	8010b40 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f000 fa5c 	bl	8010d7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80108c4:	4b27      	ldr	r3, [pc, #156]	; (8010964 <tcp_process+0x5d0>)
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	f003 0320 	and.w	r3, r3, #32
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d071      	beq.n	80109b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108d0:	4b19      	ldr	r3, [pc, #100]	; (8010938 <tcp_process+0x5a4>)
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	f003 0310 	and.w	r3, r3, #16
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d060      	beq.n	801099e <tcp_process+0x60a>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108e0:	4b16      	ldr	r3, [pc, #88]	; (801093c <tcp_process+0x5a8>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	429a      	cmp	r2, r3
 80108e6:	d15a      	bne.n	801099e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d156      	bne.n	801099e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	8b5b      	ldrh	r3, [r3, #26]
 80108f4:	f043 0302 	orr.w	r3, r3, #2
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f7fe fdbe 	bl	800f480 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010904:	4b18      	ldr	r3, [pc, #96]	; (8010968 <tcp_process+0x5d4>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	687a      	ldr	r2, [r7, #4]
 801090a:	429a      	cmp	r2, r3
 801090c:	d105      	bne.n	801091a <tcp_process+0x586>
 801090e:	4b16      	ldr	r3, [pc, #88]	; (8010968 <tcp_process+0x5d4>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	4a14      	ldr	r2, [pc, #80]	; (8010968 <tcp_process+0x5d4>)
 8010916:	6013      	str	r3, [r2, #0]
 8010918:	e02e      	b.n	8010978 <tcp_process+0x5e4>
 801091a:	4b13      	ldr	r3, [pc, #76]	; (8010968 <tcp_process+0x5d4>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	617b      	str	r3, [r7, #20]
 8010920:	e027      	b.n	8010972 <tcp_process+0x5de>
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	687a      	ldr	r2, [r7, #4]
 8010928:	429a      	cmp	r2, r3
 801092a:	d11f      	bne.n	801096c <tcp_process+0x5d8>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	68da      	ldr	r2, [r3, #12]
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	60da      	str	r2, [r3, #12]
 8010934:	e020      	b.n	8010978 <tcp_process+0x5e4>
 8010936:	bf00      	nop
 8010938:	200107a0 	.word	0x200107a0
 801093c:	20010798 	.word	0x20010798
 8010940:	2001079e 	.word	0x2001079e
 8010944:	20010794 	.word	0x20010794
 8010948:	20010784 	.word	0x20010784
 801094c:	20015930 	.word	0x20015930
 8010950:	20015934 	.word	0x20015934
 8010954:	0801e134 	.word	0x0801e134
 8010958:	0801e3d4 	.word	0x0801e3d4
 801095c:	0801e180 	.word	0x0801e180
 8010960:	2001079c 	.word	0x2001079c
 8010964:	200107a1 	.word	0x200107a1
 8010968:	20019054 	.word	0x20019054
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	617b      	str	r3, [r7, #20]
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d1d4      	bne.n	8010922 <tcp_process+0x58e>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	60da      	str	r2, [r3, #12]
 801097e:	4b77      	ldr	r3, [pc, #476]	; (8010b5c <tcp_process+0x7c8>)
 8010980:	2201      	movs	r2, #1
 8010982:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	220a      	movs	r2, #10
 8010988:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801098a:	4b75      	ldr	r3, [pc, #468]	; (8010b60 <tcp_process+0x7cc>)
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	60da      	str	r2, [r3, #12]
 8010992:	4a73      	ldr	r2, [pc, #460]	; (8010b60 <tcp_process+0x7cc>)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6013      	str	r3, [r2, #0]
 8010998:	f003 f950 	bl	8013c3c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801099c:	e0d2      	b.n	8010b44 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	8b5b      	ldrh	r3, [r3, #26]
 80109a2:	f043 0302 	orr.w	r3, r3, #2
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2208      	movs	r2, #8
 80109b0:	751a      	strb	r2, [r3, #20]
      break;
 80109b2:	e0c7      	b.n	8010b44 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80109b4:	4b6b      	ldr	r3, [pc, #428]	; (8010b64 <tcp_process+0x7d0>)
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	f003 0310 	and.w	r3, r3, #16
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f000 80c1 	beq.w	8010b44 <tcp_process+0x7b0>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109c6:	4b68      	ldr	r3, [pc, #416]	; (8010b68 <tcp_process+0x7d4>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	429a      	cmp	r2, r3
 80109cc:	f040 80ba 	bne.w	8010b44 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f040 80b5 	bne.w	8010b44 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2206      	movs	r2, #6
 80109de:	751a      	strb	r2, [r3, #20]
      break;
 80109e0:	e0b0      	b.n	8010b44 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 f9ca 	bl	8010d7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80109e8:	4b60      	ldr	r3, [pc, #384]	; (8010b6c <tcp_process+0x7d8>)
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	f003 0320 	and.w	r3, r3, #32
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	f000 80a9 	beq.w	8010b48 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	8b5b      	ldrh	r3, [r3, #26]
 80109fa:	f043 0302 	orr.w	r3, r3, #2
 80109fe:	b29a      	uxth	r2, r3
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7fe fd3b 	bl	800f480 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010a0a:	4b59      	ldr	r3, [pc, #356]	; (8010b70 <tcp_process+0x7dc>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d105      	bne.n	8010a20 <tcp_process+0x68c>
 8010a14:	4b56      	ldr	r3, [pc, #344]	; (8010b70 <tcp_process+0x7dc>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	4a55      	ldr	r2, [pc, #340]	; (8010b70 <tcp_process+0x7dc>)
 8010a1c:	6013      	str	r3, [r2, #0]
 8010a1e:	e013      	b.n	8010a48 <tcp_process+0x6b4>
 8010a20:	4b53      	ldr	r3, [pc, #332]	; (8010b70 <tcp_process+0x7dc>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	613b      	str	r3, [r7, #16]
 8010a26:	e00c      	b.n	8010a42 <tcp_process+0x6ae>
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	68db      	ldr	r3, [r3, #12]
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d104      	bne.n	8010a3c <tcp_process+0x6a8>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	68da      	ldr	r2, [r3, #12]
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	60da      	str	r2, [r3, #12]
 8010a3a:	e005      	b.n	8010a48 <tcp_process+0x6b4>
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	613b      	str	r3, [r7, #16]
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d1ef      	bne.n	8010a28 <tcp_process+0x694>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	60da      	str	r2, [r3, #12]
 8010a4e:	4b43      	ldr	r3, [pc, #268]	; (8010b5c <tcp_process+0x7c8>)
 8010a50:	2201      	movs	r2, #1
 8010a52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	220a      	movs	r2, #10
 8010a58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010a5a:	4b41      	ldr	r3, [pc, #260]	; (8010b60 <tcp_process+0x7cc>)
 8010a5c:	681a      	ldr	r2, [r3, #0]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	60da      	str	r2, [r3, #12]
 8010a62:	4a3f      	ldr	r2, [pc, #252]	; (8010b60 <tcp_process+0x7cc>)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	6013      	str	r3, [r2, #0]
 8010a68:	f003 f8e8 	bl	8013c3c <tcp_timer_needed>
      }
      break;
 8010a6c:	e06c      	b.n	8010b48 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 f984 	bl	8010d7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010a74:	4b3b      	ldr	r3, [pc, #236]	; (8010b64 <tcp_process+0x7d0>)
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	f003 0310 	and.w	r3, r3, #16
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d065      	beq.n	8010b4c <tcp_process+0x7b8>
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a84:	4b38      	ldr	r3, [pc, #224]	; (8010b68 <tcp_process+0x7d4>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d15f      	bne.n	8010b4c <tcp_process+0x7b8>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d15b      	bne.n	8010b4c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f7fe fcf3 	bl	800f480 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010a9a:	4b35      	ldr	r3, [pc, #212]	; (8010b70 <tcp_process+0x7dc>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d105      	bne.n	8010ab0 <tcp_process+0x71c>
 8010aa4:	4b32      	ldr	r3, [pc, #200]	; (8010b70 <tcp_process+0x7dc>)
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	4a31      	ldr	r2, [pc, #196]	; (8010b70 <tcp_process+0x7dc>)
 8010aac:	6013      	str	r3, [r2, #0]
 8010aae:	e013      	b.n	8010ad8 <tcp_process+0x744>
 8010ab0:	4b2f      	ldr	r3, [pc, #188]	; (8010b70 <tcp_process+0x7dc>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	60fb      	str	r3, [r7, #12]
 8010ab6:	e00c      	b.n	8010ad2 <tcp_process+0x73e>
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d104      	bne.n	8010acc <tcp_process+0x738>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	68da      	ldr	r2, [r3, #12]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	60da      	str	r2, [r3, #12]
 8010aca:	e005      	b.n	8010ad8 <tcp_process+0x744>
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	60fb      	str	r3, [r7, #12]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d1ef      	bne.n	8010ab8 <tcp_process+0x724>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	60da      	str	r2, [r3, #12]
 8010ade:	4b1f      	ldr	r3, [pc, #124]	; (8010b5c <tcp_process+0x7c8>)
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	220a      	movs	r2, #10
 8010ae8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010aea:	4b1d      	ldr	r3, [pc, #116]	; (8010b60 <tcp_process+0x7cc>)
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	60da      	str	r2, [r3, #12]
 8010af2:	4a1b      	ldr	r2, [pc, #108]	; (8010b60 <tcp_process+0x7cc>)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	6013      	str	r3, [r2, #0]
 8010af8:	f003 f8a0 	bl	8013c3c <tcp_timer_needed>
      }
      break;
 8010afc:	e026      	b.n	8010b4c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f000 f93c 	bl	8010d7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010b04:	4b17      	ldr	r3, [pc, #92]	; (8010b64 <tcp_process+0x7d0>)
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	f003 0310 	and.w	r3, r3, #16
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d01f      	beq.n	8010b50 <tcp_process+0x7bc>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b14:	4b14      	ldr	r3, [pc, #80]	; (8010b68 <tcp_process+0x7d4>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d119      	bne.n	8010b50 <tcp_process+0x7bc>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d115      	bne.n	8010b50 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010b24:	4b11      	ldr	r3, [pc, #68]	; (8010b6c <tcp_process+0x7d8>)
 8010b26:	781b      	ldrb	r3, [r3, #0]
 8010b28:	f043 0310 	orr.w	r3, r3, #16
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	4b0f      	ldr	r3, [pc, #60]	; (8010b6c <tcp_process+0x7d8>)
 8010b30:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010b32:	e00d      	b.n	8010b50 <tcp_process+0x7bc>
    default:
      break;
 8010b34:	bf00      	nop
 8010b36:	e00c      	b.n	8010b52 <tcp_process+0x7be>
      break;
 8010b38:	bf00      	nop
 8010b3a:	e00a      	b.n	8010b52 <tcp_process+0x7be>
      break;
 8010b3c:	bf00      	nop
 8010b3e:	e008      	b.n	8010b52 <tcp_process+0x7be>
      break;
 8010b40:	bf00      	nop
 8010b42:	e006      	b.n	8010b52 <tcp_process+0x7be>
      break;
 8010b44:	bf00      	nop
 8010b46:	e004      	b.n	8010b52 <tcp_process+0x7be>
      break;
 8010b48:	bf00      	nop
 8010b4a:	e002      	b.n	8010b52 <tcp_process+0x7be>
      break;
 8010b4c:	bf00      	nop
 8010b4e:	e000      	b.n	8010b52 <tcp_process+0x7be>
      break;
 8010b50:	bf00      	nop
  }
  return ERR_OK;
 8010b52:	2300      	movs	r3, #0
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3724      	adds	r7, #36	; 0x24
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd90      	pop	{r4, r7, pc}
 8010b5c:	20019050 	.word	0x20019050
 8010b60:	20019064 	.word	0x20019064
 8010b64:	200107a0 	.word	0x200107a0
 8010b68:	20010798 	.word	0x20010798
 8010b6c:	200107a1 	.word	0x200107a1
 8010b70:	20019054 	.word	0x20019054

08010b74 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010b74:	b590      	push	{r4, r7, lr}
 8010b76:	b085      	sub	sp, #20
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
 8010b7c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d106      	bne.n	8010b92 <tcp_oos_insert_segment+0x1e>
 8010b84:	4b3b      	ldr	r3, [pc, #236]	; (8010c74 <tcp_oos_insert_segment+0x100>)
 8010b86:	f240 421f 	movw	r2, #1055	; 0x41f
 8010b8a:	493b      	ldr	r1, [pc, #236]	; (8010c78 <tcp_oos_insert_segment+0x104>)
 8010b8c:	483b      	ldr	r0, [pc, #236]	; (8010c7c <tcp_oos_insert_segment+0x108>)
 8010b8e:	f00a fbeb 	bl	801b368 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	899b      	ldrh	r3, [r3, #12]
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fb f8a0 	bl	800bce0 <lwip_htons>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	f003 0301 	and.w	r3, r3, #1
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d028      	beq.n	8010bfe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010bac:	6838      	ldr	r0, [r7, #0]
 8010bae:	f7fe f997 	bl	800eee0 <tcp_segs_free>
    next = NULL;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	603b      	str	r3, [r7, #0]
 8010bb6:	e056      	b.n	8010c66 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	68db      	ldr	r3, [r3, #12]
 8010bbc:	899b      	ldrh	r3, [r3, #12]
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fb f88d 	bl	800bce0 <lwip_htons>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	f003 0301 	and.w	r3, r3, #1
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00d      	beq.n	8010bee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	899b      	ldrh	r3, [r3, #12]
 8010bd8:	b29c      	uxth	r4, r3
 8010bda:	2001      	movs	r0, #1
 8010bdc:	f7fb f880 	bl	800bce0 <lwip_htons>
 8010be0:	4603      	mov	r3, r0
 8010be2:	461a      	mov	r2, r3
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	4322      	orrs	r2, r4
 8010bea:	b292      	uxth	r2, r2
 8010bec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010bf8:	68f8      	ldr	r0, [r7, #12]
 8010bfa:	f7fe f986 	bl	800ef0a <tcp_seg_free>
    while (next &&
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d00e      	beq.n	8010c22 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	891b      	ldrh	r3, [r3, #8]
 8010c08:	461a      	mov	r2, r3
 8010c0a:	4b1d      	ldr	r3, [pc, #116]	; (8010c80 <tcp_oos_insert_segment+0x10c>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	441a      	add	r2, r3
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	68db      	ldr	r3, [r3, #12]
 8010c14:	685b      	ldr	r3, [r3, #4]
 8010c16:	6839      	ldr	r1, [r7, #0]
 8010c18:	8909      	ldrh	r1, [r1, #8]
 8010c1a:	440b      	add	r3, r1
 8010c1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	daca      	bge.n	8010bb8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d01e      	beq.n	8010c66 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	891b      	ldrh	r3, [r3, #8]
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	4b14      	ldr	r3, [pc, #80]	; (8010c80 <tcp_oos_insert_segment+0x10c>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	441a      	add	r2, r3
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	dd12      	ble.n	8010c66 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	68db      	ldr	r3, [r3, #12]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	b29a      	uxth	r2, r3
 8010c48:	4b0d      	ldr	r3, [pc, #52]	; (8010c80 <tcp_oos_insert_segment+0x10c>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	685a      	ldr	r2, [r3, #4]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	891b      	ldrh	r3, [r3, #8]
 8010c5e:	4619      	mov	r1, r3
 8010c60:	4610      	mov	r0, r2
 8010c62:	f7fc faed 	bl	800d240 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	683a      	ldr	r2, [r7, #0]
 8010c6a:	601a      	str	r2, [r3, #0]
}
 8010c6c:	bf00      	nop
 8010c6e:	3714      	adds	r7, #20
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd90      	pop	{r4, r7, pc}
 8010c74:	0801e134 	.word	0x0801e134
 8010c78:	0801e3f4 	.word	0x0801e3f4
 8010c7c:	0801e180 	.word	0x0801e180
 8010c80:	20010794 	.word	0x20010794

08010c84 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010c84:	b5b0      	push	{r4, r5, r7, lr}
 8010c86:	b086      	sub	sp, #24
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	607a      	str	r2, [r7, #4]
 8010c90:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010c92:	e03e      	b.n	8010d12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7fc fd12 	bl	800d6cc <pbuf_clen>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cb2:	8a7a      	ldrh	r2, [r7, #18]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d906      	bls.n	8010cc6 <tcp_free_acked_segments+0x42>
 8010cb8:	4b2a      	ldr	r3, [pc, #168]	; (8010d64 <tcp_free_acked_segments+0xe0>)
 8010cba:	f240 4257 	movw	r2, #1111	; 0x457
 8010cbe:	492a      	ldr	r1, [pc, #168]	; (8010d68 <tcp_free_acked_segments+0xe4>)
 8010cc0:	482a      	ldr	r0, [pc, #168]	; (8010d6c <tcp_free_acked_segments+0xe8>)
 8010cc2:	f00a fb51 	bl	801b368 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010ccc:	8a7b      	ldrh	r3, [r7, #18]
 8010cce:	1ad3      	subs	r3, r2, r3
 8010cd0:	b29a      	uxth	r2, r3
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	891a      	ldrh	r2, [r3, #8]
 8010cdc:	4b24      	ldr	r3, [pc, #144]	; (8010d70 <tcp_free_acked_segments+0xec>)
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	4b22      	ldr	r3, [pc, #136]	; (8010d70 <tcp_free_acked_segments+0xec>)
 8010ce6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010ce8:	6978      	ldr	r0, [r7, #20]
 8010cea:	f7fe f90e 	bl	800ef0a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d00c      	beq.n	8010d12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d109      	bne.n	8010d12 <tcp_free_acked_segments+0x8e>
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d106      	bne.n	8010d12 <tcp_free_acked_segments+0x8e>
 8010d04:	4b17      	ldr	r3, [pc, #92]	; (8010d64 <tcp_free_acked_segments+0xe0>)
 8010d06:	f240 4261 	movw	r2, #1121	; 0x461
 8010d0a:	491a      	ldr	r1, [pc, #104]	; (8010d74 <tcp_free_acked_segments+0xf0>)
 8010d0c:	4817      	ldr	r0, [pc, #92]	; (8010d6c <tcp_free_acked_segments+0xe8>)
 8010d0e:	f00a fb2b 	bl	801b368 <iprintf>
  while (seg_list != NULL &&
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d020      	beq.n	8010d5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fa fff3 	bl	800bd0a <lwip_htonl>
 8010d24:	4604      	mov	r4, r0
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	891b      	ldrh	r3, [r3, #8]
 8010d2a:	461d      	mov	r5, r3
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	68db      	ldr	r3, [r3, #12]
 8010d30:	899b      	ldrh	r3, [r3, #12]
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7fa ffd3 	bl	800bce0 <lwip_htons>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	f003 0303 	and.w	r3, r3, #3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d001      	beq.n	8010d4a <tcp_free_acked_segments+0xc6>
 8010d46:	2301      	movs	r3, #1
 8010d48:	e000      	b.n	8010d4c <tcp_free_acked_segments+0xc8>
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	442b      	add	r3, r5
 8010d4e:	18e2      	adds	r2, r4, r3
 8010d50:	4b09      	ldr	r3, [pc, #36]	; (8010d78 <tcp_free_acked_segments+0xf4>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	dd9c      	ble.n	8010c94 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010d5a:	68bb      	ldr	r3, [r7, #8]
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3718      	adds	r7, #24
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bdb0      	pop	{r4, r5, r7, pc}
 8010d64:	0801e134 	.word	0x0801e134
 8010d68:	0801e41c 	.word	0x0801e41c
 8010d6c:	0801e180 	.word	0x0801e180
 8010d70:	2001079c 	.word	0x2001079c
 8010d74:	0801e444 	.word	0x0801e444
 8010d78:	20010798 	.word	0x20010798

08010d7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010d7c:	b5b0      	push	{r4, r5, r7, lr}
 8010d7e:	b094      	sub	sp, #80	; 0x50
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010d84:	2300      	movs	r3, #0
 8010d86:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d106      	bne.n	8010d9c <tcp_receive+0x20>
 8010d8e:	4ba6      	ldr	r3, [pc, #664]	; (8011028 <tcp_receive+0x2ac>)
 8010d90:	f240 427b 	movw	r2, #1147	; 0x47b
 8010d94:	49a5      	ldr	r1, [pc, #660]	; (801102c <tcp_receive+0x2b0>)
 8010d96:	48a6      	ldr	r0, [pc, #664]	; (8011030 <tcp_receive+0x2b4>)
 8010d98:	f00a fae6 	bl	801b368 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	7d1b      	ldrb	r3, [r3, #20]
 8010da0:	2b03      	cmp	r3, #3
 8010da2:	d806      	bhi.n	8010db2 <tcp_receive+0x36>
 8010da4:	4ba0      	ldr	r3, [pc, #640]	; (8011028 <tcp_receive+0x2ac>)
 8010da6:	f240 427c 	movw	r2, #1148	; 0x47c
 8010daa:	49a2      	ldr	r1, [pc, #648]	; (8011034 <tcp_receive+0x2b8>)
 8010dac:	48a0      	ldr	r0, [pc, #640]	; (8011030 <tcp_receive+0x2b4>)
 8010dae:	f00a fadb 	bl	801b368 <iprintf>

  if (flags & TCP_ACK) {
 8010db2:	4ba1      	ldr	r3, [pc, #644]	; (8011038 <tcp_receive+0x2bc>)
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	f003 0310 	and.w	r3, r3, #16
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f000 8263 	beq.w	8011286 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010dc6:	461a      	mov	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010dcc:	4413      	add	r3, r2
 8010dce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010dd4:	4b99      	ldr	r3, [pc, #612]	; (801103c <tcp_receive+0x2c0>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	1ad3      	subs	r3, r2, r3
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	db1b      	blt.n	8010e16 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010de2:	4b96      	ldr	r3, [pc, #600]	; (801103c <tcp_receive+0x2c0>)
 8010de4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d106      	bne.n	8010df8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010dee:	4b94      	ldr	r3, [pc, #592]	; (8011040 <tcp_receive+0x2c4>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	db0e      	blt.n	8010e16 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010dfc:	4b90      	ldr	r3, [pc, #576]	; (8011040 <tcp_receive+0x2c4>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d125      	bne.n	8010e50 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010e04:	4b8f      	ldr	r3, [pc, #572]	; (8011044 <tcp_receive+0x2c8>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	89db      	ldrh	r3, [r3, #14]
 8010e0a:	b29a      	uxth	r2, r3
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d91c      	bls.n	8010e50 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010e16:	4b8b      	ldr	r3, [pc, #556]	; (8011044 <tcp_receive+0x2c8>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	89db      	ldrh	r3, [r3, #14]
 8010e1c:	b29a      	uxth	r2, r3
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d205      	bcs.n	8010e40 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010e40:	4b7e      	ldr	r3, [pc, #504]	; (801103c <tcp_receive+0x2c0>)
 8010e42:	681a      	ldr	r2, [r3, #0]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010e48:	4b7d      	ldr	r3, [pc, #500]	; (8011040 <tcp_receive+0x2c4>)
 8010e4a:	681a      	ldr	r2, [r3, #0]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010e50:	4b7b      	ldr	r3, [pc, #492]	; (8011040 <tcp_receive+0x2c4>)
 8010e52:	681a      	ldr	r2, [r3, #0]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e58:	1ad3      	subs	r3, r2, r3
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	dc58      	bgt.n	8010f10 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010e5e:	4b7a      	ldr	r3, [pc, #488]	; (8011048 <tcp_receive+0x2cc>)
 8010e60:	881b      	ldrh	r3, [r3, #0]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d14b      	bne.n	8010efe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010e70:	4413      	add	r3, r2
 8010e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d142      	bne.n	8010efe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	db3d      	blt.n	8010efe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010e86:	4b6e      	ldr	r3, [pc, #440]	; (8011040 <tcp_receive+0x2c4>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d137      	bne.n	8010efe <tcp_receive+0x182>
              found_dupack = 1;
 8010e8e:	2301      	movs	r3, #1
 8010e90:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010e98:	2bff      	cmp	r3, #255	; 0xff
 8010e9a:	d007      	beq.n	8010eac <tcp_receive+0x130>
                ++pcb->dupacks;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	b2da      	uxtb	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010eb2:	2b03      	cmp	r3, #3
 8010eb4:	d91b      	bls.n	8010eee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ec0:	4413      	add	r3, r2
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d30a      	bcc.n	8010ee4 <tcp_receive+0x168>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ed8:	4413      	add	r3, r2
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010ee2:	e004      	b.n	8010eee <tcp_receive+0x172>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010eea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ef4:	2b02      	cmp	r3, #2
 8010ef6:	d902      	bls.n	8010efe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f002 fb41 	bl	8013580 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f040 8160 	bne.w	80111c6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2200      	movs	r2, #0
 8010f0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010f0e:	e15a      	b.n	80111c6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f10:	4b4b      	ldr	r3, [pc, #300]	; (8011040 <tcp_receive+0x2c4>)
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f18:	1ad3      	subs	r3, r2, r3
 8010f1a:	3b01      	subs	r3, #1
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	f2c0 814d 	blt.w	80111bc <tcp_receive+0x440>
 8010f22:	4b47      	ldr	r3, [pc, #284]	; (8011040 <tcp_receive+0x2c4>)
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f2a:	1ad3      	subs	r3, r2, r3
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f300 8145 	bgt.w	80111bc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	8b5b      	ldrh	r3, [r3, #26]
 8010f36:	f003 0304 	and.w	r3, r3, #4
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d010      	beq.n	8010f60 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	8b5b      	ldrh	r3, [r3, #26]
 8010f42:	f023 0304 	bic.w	r3, r3, #4
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2200      	movs	r2, #0
 8010f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f6e:	10db      	asrs	r3, r3, #3
 8010f70:	b21b      	sxth	r3, r3
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	4413      	add	r3, r2
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	b21a      	sxth	r2, r3
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010f88:	4b2d      	ldr	r3, [pc, #180]	; (8011040 <tcp_receive+0x2c4>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	b29a      	uxth	r2, r3
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	1ad3      	subs	r3, r2, r3
 8010f96:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010fa0:	4b27      	ldr	r3, [pc, #156]	; (8011040 <tcp_receive+0x2c4>)
 8010fa2:	681a      	ldr	r2, [r3, #0]
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	7d1b      	ldrb	r3, [r3, #20]
 8010fac:	2b03      	cmp	r3, #3
 8010fae:	f240 8096 	bls.w	80110de <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d244      	bcs.n	801104c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	8b5b      	ldrh	r3, [r3, #26]
 8010fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d001      	beq.n	8010fd2 <tcp_receive+0x256>
 8010fce:	2301      	movs	r3, #1
 8010fd0:	e000      	b.n	8010fd4 <tcp_receive+0x258>
 8010fd2:	2302      	movs	r3, #2
 8010fd4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010fd8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fe2:	fb12 f303 	smulbb	r3, r2, r3
 8010fe6:	b29b      	uxth	r3, r3
 8010fe8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010fea:	4293      	cmp	r3, r2
 8010fec:	bf28      	it	cs
 8010fee:	4613      	movcs	r3, r2
 8010ff0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ff8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ffa:	4413      	add	r3, r2
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011004:	429a      	cmp	r2, r3
 8011006:	d309      	bcc.n	801101c <tcp_receive+0x2a0>
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801100e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011010:	4413      	add	r3, r2
 8011012:	b29a      	uxth	r2, r3
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801101a:	e060      	b.n	80110de <tcp_receive+0x362>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011022:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011026:	e05a      	b.n	80110de <tcp_receive+0x362>
 8011028:	0801e134 	.word	0x0801e134
 801102c:	0801e464 	.word	0x0801e464
 8011030:	0801e180 	.word	0x0801e180
 8011034:	0801e480 	.word	0x0801e480
 8011038:	200107a0 	.word	0x200107a0
 801103c:	20010794 	.word	0x20010794
 8011040:	20010798 	.word	0x20010798
 8011044:	20010784 	.word	0x20010784
 8011048:	2001079e 	.word	0x2001079e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011052:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011054:	4413      	add	r3, r2
 8011056:	b29a      	uxth	r2, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801105e:	429a      	cmp	r2, r3
 8011060:	d309      	bcc.n	8011076 <tcp_receive+0x2fa>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011068:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801106a:	4413      	add	r3, r2
 801106c:	b29a      	uxth	r2, r3
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011074:	e004      	b.n	8011080 <tcp_receive+0x304>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801107c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801108c:	429a      	cmp	r2, r3
 801108e:	d326      	bcc.n	80110de <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801109c:	1ad3      	subs	r3, r2, r3
 801109e:	b29a      	uxth	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110b0:	4413      	add	r3, r2
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d30a      	bcc.n	80110d4 <tcp_receive+0x358>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110c8:	4413      	add	r3, r2
 80110ca:	b29a      	uxth	r2, r3
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80110d2:	e004      	b.n	80110de <tcp_receive+0x362>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110e6:	4a98      	ldr	r2, [pc, #608]	; (8011348 <tcp_receive+0x5cc>)
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7ff fdcb 	bl	8010c84 <tcp_free_acked_segments>
 80110ee:	4602      	mov	r2, r0
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110fc:	4a93      	ldr	r2, [pc, #588]	; (801134c <tcp_receive+0x5d0>)
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f7ff fdc0 	bl	8010c84 <tcp_free_acked_segments>
 8011104:	4602      	mov	r2, r0
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801110e:	2b00      	cmp	r3, #0
 8011110:	d104      	bne.n	801111c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011118:	861a      	strh	r2, [r3, #48]	; 0x30
 801111a:	e002      	b.n	8011122 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2200      	movs	r2, #0
 8011120:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2200      	movs	r2, #0
 8011126:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801112c:	2b00      	cmp	r3, #0
 801112e:	d103      	bne.n	8011138 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2200      	movs	r2, #0
 8011134:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801113e:	4b84      	ldr	r3, [pc, #528]	; (8011350 <tcp_receive+0x5d4>)
 8011140:	881b      	ldrh	r3, [r3, #0]
 8011142:	4413      	add	r3, r2
 8011144:	b29a      	uxth	r2, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	8b5b      	ldrh	r3, [r3, #26]
 8011150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011154:	2b00      	cmp	r3, #0
 8011156:	d035      	beq.n	80111c4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801115c:	2b00      	cmp	r3, #0
 801115e:	d118      	bne.n	8011192 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011164:	2b00      	cmp	r3, #0
 8011166:	d00c      	beq.n	8011182 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011170:	68db      	ldr	r3, [r3, #12]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	4618      	mov	r0, r3
 8011176:	f7fa fdc8 	bl	800bd0a <lwip_htonl>
 801117a:	4603      	mov	r3, r0
 801117c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801117e:	2b00      	cmp	r3, #0
 8011180:	dc20      	bgt.n	80111c4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	8b5b      	ldrh	r3, [r3, #26]
 8011186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801118a:	b29a      	uxth	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011190:	e018      	b.n	80111c4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	4618      	mov	r0, r3
 80111a0:	f7fa fdb3 	bl	800bd0a <lwip_htonl>
 80111a4:	4603      	mov	r3, r0
 80111a6:	1ae3      	subs	r3, r4, r3
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	dc0b      	bgt.n	80111c4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	8b5b      	ldrh	r3, [r3, #26]
 80111b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80111b4:	b29a      	uxth	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80111ba:	e003      	b.n	80111c4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f002 fbcd 	bl	801395c <tcp_send_empty_ack>
 80111c2:	e000      	b.n	80111c6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80111c4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d05b      	beq.n	8011286 <tcp_receive+0x50a>
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111d2:	4b60      	ldr	r3, [pc, #384]	; (8011354 <tcp_receive+0x5d8>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	1ad3      	subs	r3, r2, r3
 80111d8:	2b00      	cmp	r3, #0
 80111da:	da54      	bge.n	8011286 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80111dc:	4b5e      	ldr	r3, [pc, #376]	; (8011358 <tcp_receive+0x5dc>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	b29a      	uxth	r2, r3
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80111f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80111fa:	10db      	asrs	r3, r3, #3
 80111fc:	b21b      	sxth	r3, r3
 80111fe:	b29b      	uxth	r3, r3
 8011200:	1ad3      	subs	r3, r2, r3
 8011202:	b29b      	uxth	r3, r3
 8011204:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801120e:	b29a      	uxth	r2, r3
 8011210:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011214:	4413      	add	r3, r2
 8011216:	b29b      	uxth	r3, r3
 8011218:	b21a      	sxth	r2, r3
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801121e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011222:	2b00      	cmp	r3, #0
 8011224:	da05      	bge.n	8011232 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011226:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801122a:	425b      	negs	r3, r3
 801122c:	b29b      	uxth	r3, r3
 801122e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011232:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801123c:	109b      	asrs	r3, r3, #2
 801123e:	b21b      	sxth	r3, r3
 8011240:	b29b      	uxth	r3, r3
 8011242:	1ad3      	subs	r3, r2, r3
 8011244:	b29b      	uxth	r3, r3
 8011246:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011250:	b29a      	uxth	r2, r3
 8011252:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011256:	4413      	add	r3, r2
 8011258:	b29b      	uxth	r3, r3
 801125a:	b21a      	sxth	r2, r3
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011266:	10db      	asrs	r3, r3, #3
 8011268:	b21b      	sxth	r3, r3
 801126a:	b29a      	uxth	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011272:	b29b      	uxth	r3, r3
 8011274:	4413      	add	r3, r2
 8011276:	b29b      	uxth	r3, r3
 8011278:	b21a      	sxth	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2200      	movs	r2, #0
 8011284:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011286:	4b35      	ldr	r3, [pc, #212]	; (801135c <tcp_receive+0x5e0>)
 8011288:	881b      	ldrh	r3, [r3, #0]
 801128a:	2b00      	cmp	r3, #0
 801128c:	f000 84e1 	beq.w	8011c52 <tcp_receive+0xed6>
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	7d1b      	ldrb	r3, [r3, #20]
 8011294:	2b06      	cmp	r3, #6
 8011296:	f200 84dc 	bhi.w	8011c52 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801129e:	4b30      	ldr	r3, [pc, #192]	; (8011360 <tcp_receive+0x5e4>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	1ad3      	subs	r3, r2, r3
 80112a4:	3b01      	subs	r3, #1
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	f2c0 808e 	blt.w	80113c8 <tcp_receive+0x64c>
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112b0:	4b2a      	ldr	r3, [pc, #168]	; (801135c <tcp_receive+0x5e0>)
 80112b2:	881b      	ldrh	r3, [r3, #0]
 80112b4:	4619      	mov	r1, r3
 80112b6:	4b2a      	ldr	r3, [pc, #168]	; (8011360 <tcp_receive+0x5e4>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	440b      	add	r3, r1
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	3301      	adds	r3, #1
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f300 8081 	bgt.w	80113c8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80112c6:	4b27      	ldr	r3, [pc, #156]	; (8011364 <tcp_receive+0x5e8>)
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112d0:	4b23      	ldr	r3, [pc, #140]	; (8011360 <tcp_receive+0x5e4>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80112d8:	4b22      	ldr	r3, [pc, #136]	; (8011364 <tcp_receive+0x5e8>)
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d106      	bne.n	80112ee <tcp_receive+0x572>
 80112e0:	4b21      	ldr	r3, [pc, #132]	; (8011368 <tcp_receive+0x5ec>)
 80112e2:	f240 5294 	movw	r2, #1428	; 0x594
 80112e6:	4921      	ldr	r1, [pc, #132]	; (801136c <tcp_receive+0x5f0>)
 80112e8:	4821      	ldr	r0, [pc, #132]	; (8011370 <tcp_receive+0x5f4>)
 80112ea:	f00a f83d 	bl	801b368 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80112ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80112f4:	4293      	cmp	r3, r2
 80112f6:	d906      	bls.n	8011306 <tcp_receive+0x58a>
 80112f8:	4b1b      	ldr	r3, [pc, #108]	; (8011368 <tcp_receive+0x5ec>)
 80112fa:	f240 5295 	movw	r2, #1429	; 0x595
 80112fe:	491d      	ldr	r1, [pc, #116]	; (8011374 <tcp_receive+0x5f8>)
 8011300:	481b      	ldr	r0, [pc, #108]	; (8011370 <tcp_receive+0x5f4>)
 8011302:	f00a f831 	bl	801b368 <iprintf>
      off = (u16_t)off32;
 8011306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011308:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801130c:	4b15      	ldr	r3, [pc, #84]	; (8011364 <tcp_receive+0x5e8>)
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	891b      	ldrh	r3, [r3, #8]
 8011312:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011316:	429a      	cmp	r2, r3
 8011318:	d906      	bls.n	8011328 <tcp_receive+0x5ac>
 801131a:	4b13      	ldr	r3, [pc, #76]	; (8011368 <tcp_receive+0x5ec>)
 801131c:	f240 5297 	movw	r2, #1431	; 0x597
 8011320:	4915      	ldr	r1, [pc, #84]	; (8011378 <tcp_receive+0x5fc>)
 8011322:	4813      	ldr	r0, [pc, #76]	; (8011370 <tcp_receive+0x5f4>)
 8011324:	f00a f820 	bl	801b368 <iprintf>
      inseg.len -= off;
 8011328:	4b0e      	ldr	r3, [pc, #56]	; (8011364 <tcp_receive+0x5e8>)
 801132a:	891a      	ldrh	r2, [r3, #8]
 801132c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011330:	1ad3      	subs	r3, r2, r3
 8011332:	b29a      	uxth	r2, r3
 8011334:	4b0b      	ldr	r3, [pc, #44]	; (8011364 <tcp_receive+0x5e8>)
 8011336:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011338:	4b0a      	ldr	r3, [pc, #40]	; (8011364 <tcp_receive+0x5e8>)
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	891a      	ldrh	r2, [r3, #8]
 801133e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011342:	1ad3      	subs	r3, r2, r3
 8011344:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011346:	e029      	b.n	801139c <tcp_receive+0x620>
 8011348:	0801e49c 	.word	0x0801e49c
 801134c:	0801e4a4 	.word	0x0801e4a4
 8011350:	2001079c 	.word	0x2001079c
 8011354:	20010798 	.word	0x20010798
 8011358:	20019058 	.word	0x20019058
 801135c:	2001079e 	.word	0x2001079e
 8011360:	20010794 	.word	0x20010794
 8011364:	20010774 	.word	0x20010774
 8011368:	0801e134 	.word	0x0801e134
 801136c:	0801e4ac 	.word	0x0801e4ac
 8011370:	0801e180 	.word	0x0801e180
 8011374:	0801e4bc 	.word	0x0801e4bc
 8011378:	0801e4cc 	.word	0x0801e4cc
        off -= p->len;
 801137c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801137e:	895b      	ldrh	r3, [r3, #10]
 8011380:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011384:	1ad3      	subs	r3, r2, r3
 8011386:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801138a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801138c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801138e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011392:	2200      	movs	r2, #0
 8011394:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801139c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801139e:	895b      	ldrh	r3, [r3, #10]
 80113a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d8e9      	bhi.n	801137c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80113a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80113ac:	4619      	mov	r1, r3
 80113ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80113b0:	f7fc f846 	bl	800d440 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b8:	4a91      	ldr	r2, [pc, #580]	; (8011600 <tcp_receive+0x884>)
 80113ba:	6013      	str	r3, [r2, #0]
 80113bc:	4b91      	ldr	r3, [pc, #580]	; (8011604 <tcp_receive+0x888>)
 80113be:	68db      	ldr	r3, [r3, #12]
 80113c0:	4a8f      	ldr	r2, [pc, #572]	; (8011600 <tcp_receive+0x884>)
 80113c2:	6812      	ldr	r2, [r2, #0]
 80113c4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80113c6:	e00d      	b.n	80113e4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80113c8:	4b8d      	ldr	r3, [pc, #564]	; (8011600 <tcp_receive+0x884>)
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d0:	1ad3      	subs	r3, r2, r3
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	da06      	bge.n	80113e4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	8b5b      	ldrh	r3, [r3, #26]
 80113da:	f043 0302 	orr.w	r3, r3, #2
 80113de:	b29a      	uxth	r2, r3
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80113e4:	4b86      	ldr	r3, [pc, #536]	; (8011600 <tcp_receive+0x884>)
 80113e6:	681a      	ldr	r2, [r3, #0]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ec:	1ad3      	subs	r3, r2, r3
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	f2c0 842a 	blt.w	8011c48 <tcp_receive+0xecc>
 80113f4:	4b82      	ldr	r3, [pc, #520]	; (8011600 <tcp_receive+0x884>)
 80113f6:	681a      	ldr	r2, [r3, #0]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113fc:	6879      	ldr	r1, [r7, #4]
 80113fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011400:	440b      	add	r3, r1
 8011402:	1ad3      	subs	r3, r2, r3
 8011404:	3301      	adds	r3, #1
 8011406:	2b00      	cmp	r3, #0
 8011408:	f300 841e 	bgt.w	8011c48 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011410:	4b7b      	ldr	r3, [pc, #492]	; (8011600 <tcp_receive+0x884>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	429a      	cmp	r2, r3
 8011416:	f040 829a 	bne.w	801194e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801141a:	4b7a      	ldr	r3, [pc, #488]	; (8011604 <tcp_receive+0x888>)
 801141c:	891c      	ldrh	r4, [r3, #8]
 801141e:	4b79      	ldr	r3, [pc, #484]	; (8011604 <tcp_receive+0x888>)
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	899b      	ldrh	r3, [r3, #12]
 8011424:	b29b      	uxth	r3, r3
 8011426:	4618      	mov	r0, r3
 8011428:	f7fa fc5a 	bl	800bce0 <lwip_htons>
 801142c:	4603      	mov	r3, r0
 801142e:	b2db      	uxtb	r3, r3
 8011430:	f003 0303 	and.w	r3, r3, #3
 8011434:	2b00      	cmp	r3, #0
 8011436:	d001      	beq.n	801143c <tcp_receive+0x6c0>
 8011438:	2301      	movs	r3, #1
 801143a:	e000      	b.n	801143e <tcp_receive+0x6c2>
 801143c:	2300      	movs	r3, #0
 801143e:	4423      	add	r3, r4
 8011440:	b29a      	uxth	r2, r3
 8011442:	4b71      	ldr	r3, [pc, #452]	; (8011608 <tcp_receive+0x88c>)
 8011444:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801144a:	4b6f      	ldr	r3, [pc, #444]	; (8011608 <tcp_receive+0x88c>)
 801144c:	881b      	ldrh	r3, [r3, #0]
 801144e:	429a      	cmp	r2, r3
 8011450:	d275      	bcs.n	801153e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011452:	4b6c      	ldr	r3, [pc, #432]	; (8011604 <tcp_receive+0x888>)
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	899b      	ldrh	r3, [r3, #12]
 8011458:	b29b      	uxth	r3, r3
 801145a:	4618      	mov	r0, r3
 801145c:	f7fa fc40 	bl	800bce0 <lwip_htons>
 8011460:	4603      	mov	r3, r0
 8011462:	b2db      	uxtb	r3, r3
 8011464:	f003 0301 	and.w	r3, r3, #1
 8011468:	2b00      	cmp	r3, #0
 801146a:	d01f      	beq.n	80114ac <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801146c:	4b65      	ldr	r3, [pc, #404]	; (8011604 <tcp_receive+0x888>)
 801146e:	68db      	ldr	r3, [r3, #12]
 8011470:	899b      	ldrh	r3, [r3, #12]
 8011472:	b29b      	uxth	r3, r3
 8011474:	b21b      	sxth	r3, r3
 8011476:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801147a:	b21c      	sxth	r4, r3
 801147c:	4b61      	ldr	r3, [pc, #388]	; (8011604 <tcp_receive+0x888>)
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	899b      	ldrh	r3, [r3, #12]
 8011482:	b29b      	uxth	r3, r3
 8011484:	4618      	mov	r0, r3
 8011486:	f7fa fc2b 	bl	800bce0 <lwip_htons>
 801148a:	4603      	mov	r3, r0
 801148c:	b2db      	uxtb	r3, r3
 801148e:	b29b      	uxth	r3, r3
 8011490:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011494:	b29b      	uxth	r3, r3
 8011496:	4618      	mov	r0, r3
 8011498:	f7fa fc22 	bl	800bce0 <lwip_htons>
 801149c:	4603      	mov	r3, r0
 801149e:	b21b      	sxth	r3, r3
 80114a0:	4323      	orrs	r3, r4
 80114a2:	b21a      	sxth	r2, r3
 80114a4:	4b57      	ldr	r3, [pc, #348]	; (8011604 <tcp_receive+0x888>)
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	b292      	uxth	r2, r2
 80114aa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80114b0:	4b54      	ldr	r3, [pc, #336]	; (8011604 <tcp_receive+0x888>)
 80114b2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80114b4:	4b53      	ldr	r3, [pc, #332]	; (8011604 <tcp_receive+0x888>)
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	899b      	ldrh	r3, [r3, #12]
 80114ba:	b29b      	uxth	r3, r3
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fa fc0f 	bl	800bce0 <lwip_htons>
 80114c2:	4603      	mov	r3, r0
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	f003 0302 	and.w	r3, r3, #2
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d005      	beq.n	80114da <tcp_receive+0x75e>
            inseg.len -= 1;
 80114ce:	4b4d      	ldr	r3, [pc, #308]	; (8011604 <tcp_receive+0x888>)
 80114d0:	891b      	ldrh	r3, [r3, #8]
 80114d2:	3b01      	subs	r3, #1
 80114d4:	b29a      	uxth	r2, r3
 80114d6:	4b4b      	ldr	r3, [pc, #300]	; (8011604 <tcp_receive+0x888>)
 80114d8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80114da:	4b4a      	ldr	r3, [pc, #296]	; (8011604 <tcp_receive+0x888>)
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	4a49      	ldr	r2, [pc, #292]	; (8011604 <tcp_receive+0x888>)
 80114e0:	8912      	ldrh	r2, [r2, #8]
 80114e2:	4611      	mov	r1, r2
 80114e4:	4618      	mov	r0, r3
 80114e6:	f7fb feab 	bl	800d240 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80114ea:	4b46      	ldr	r3, [pc, #280]	; (8011604 <tcp_receive+0x888>)
 80114ec:	891c      	ldrh	r4, [r3, #8]
 80114ee:	4b45      	ldr	r3, [pc, #276]	; (8011604 <tcp_receive+0x888>)
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	899b      	ldrh	r3, [r3, #12]
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fa fbf2 	bl	800bce0 <lwip_htons>
 80114fc:	4603      	mov	r3, r0
 80114fe:	b2db      	uxtb	r3, r3
 8011500:	f003 0303 	and.w	r3, r3, #3
 8011504:	2b00      	cmp	r3, #0
 8011506:	d001      	beq.n	801150c <tcp_receive+0x790>
 8011508:	2301      	movs	r3, #1
 801150a:	e000      	b.n	801150e <tcp_receive+0x792>
 801150c:	2300      	movs	r3, #0
 801150e:	4423      	add	r3, r4
 8011510:	b29a      	uxth	r2, r3
 8011512:	4b3d      	ldr	r3, [pc, #244]	; (8011608 <tcp_receive+0x88c>)
 8011514:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011516:	4b3c      	ldr	r3, [pc, #240]	; (8011608 <tcp_receive+0x88c>)
 8011518:	881b      	ldrh	r3, [r3, #0]
 801151a:	461a      	mov	r2, r3
 801151c:	4b38      	ldr	r3, [pc, #224]	; (8011600 <tcp_receive+0x884>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	441a      	add	r2, r3
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011526:	6879      	ldr	r1, [r7, #4]
 8011528:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801152a:	440b      	add	r3, r1
 801152c:	429a      	cmp	r2, r3
 801152e:	d006      	beq.n	801153e <tcp_receive+0x7c2>
 8011530:	4b36      	ldr	r3, [pc, #216]	; (801160c <tcp_receive+0x890>)
 8011532:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011536:	4936      	ldr	r1, [pc, #216]	; (8011610 <tcp_receive+0x894>)
 8011538:	4836      	ldr	r0, [pc, #216]	; (8011614 <tcp_receive+0x898>)
 801153a:	f009 ff15 	bl	801b368 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011542:	2b00      	cmp	r3, #0
 8011544:	f000 80e7 	beq.w	8011716 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011548:	4b2e      	ldr	r3, [pc, #184]	; (8011604 <tcp_receive+0x888>)
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	899b      	ldrh	r3, [r3, #12]
 801154e:	b29b      	uxth	r3, r3
 8011550:	4618      	mov	r0, r3
 8011552:	f7fa fbc5 	bl	800bce0 <lwip_htons>
 8011556:	4603      	mov	r3, r0
 8011558:	b2db      	uxtb	r3, r3
 801155a:	f003 0301 	and.w	r3, r3, #1
 801155e:	2b00      	cmp	r3, #0
 8011560:	d010      	beq.n	8011584 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011562:	e00a      	b.n	801157a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011568:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011574:	68f8      	ldr	r0, [r7, #12]
 8011576:	f7fd fcc8 	bl	800ef0a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801157e:	2b00      	cmp	r3, #0
 8011580:	d1f0      	bne.n	8011564 <tcp_receive+0x7e8>
 8011582:	e0c8      	b.n	8011716 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011588:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801158a:	e052      	b.n	8011632 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801158c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	899b      	ldrh	r3, [r3, #12]
 8011592:	b29b      	uxth	r3, r3
 8011594:	4618      	mov	r0, r3
 8011596:	f7fa fba3 	bl	800bce0 <lwip_htons>
 801159a:	4603      	mov	r3, r0
 801159c:	b2db      	uxtb	r3, r3
 801159e:	f003 0301 	and.w	r3, r3, #1
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d03d      	beq.n	8011622 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80115a6:	4b17      	ldr	r3, [pc, #92]	; (8011604 <tcp_receive+0x888>)
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	899b      	ldrh	r3, [r3, #12]
 80115ac:	b29b      	uxth	r3, r3
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7fa fb96 	bl	800bce0 <lwip_htons>
 80115b4:	4603      	mov	r3, r0
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d130      	bne.n	8011622 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80115c0:	4b10      	ldr	r3, [pc, #64]	; (8011604 <tcp_receive+0x888>)
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	899b      	ldrh	r3, [r3, #12]
 80115c6:	b29c      	uxth	r4, r3
 80115c8:	2001      	movs	r0, #1
 80115ca:	f7fa fb89 	bl	800bce0 <lwip_htons>
 80115ce:	4603      	mov	r3, r0
 80115d0:	461a      	mov	r2, r3
 80115d2:	4b0c      	ldr	r3, [pc, #48]	; (8011604 <tcp_receive+0x888>)
 80115d4:	68db      	ldr	r3, [r3, #12]
 80115d6:	4322      	orrs	r2, r4
 80115d8:	b292      	uxth	r2, r2
 80115da:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80115dc:	4b09      	ldr	r3, [pc, #36]	; (8011604 <tcp_receive+0x888>)
 80115de:	891c      	ldrh	r4, [r3, #8]
 80115e0:	4b08      	ldr	r3, [pc, #32]	; (8011604 <tcp_receive+0x888>)
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	899b      	ldrh	r3, [r3, #12]
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fa fb79 	bl	800bce0 <lwip_htons>
 80115ee:	4603      	mov	r3, r0
 80115f0:	b2db      	uxtb	r3, r3
 80115f2:	f003 0303 	and.w	r3, r3, #3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d00e      	beq.n	8011618 <tcp_receive+0x89c>
 80115fa:	2301      	movs	r3, #1
 80115fc:	e00d      	b.n	801161a <tcp_receive+0x89e>
 80115fe:	bf00      	nop
 8011600:	20010794 	.word	0x20010794
 8011604:	20010774 	.word	0x20010774
 8011608:	2001079e 	.word	0x2001079e
 801160c:	0801e134 	.word	0x0801e134
 8011610:	0801e4dc 	.word	0x0801e4dc
 8011614:	0801e180 	.word	0x0801e180
 8011618:	2300      	movs	r3, #0
 801161a:	4423      	add	r3, r4
 801161c:	b29a      	uxth	r2, r3
 801161e:	4b98      	ldr	r3, [pc, #608]	; (8011880 <tcp_receive+0xb04>)
 8011620:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011624:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801162c:	6938      	ldr	r0, [r7, #16]
 801162e:	f7fd fc6c 	bl	800ef0a <tcp_seg_free>
            while (next &&
 8011632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011634:	2b00      	cmp	r3, #0
 8011636:	d00e      	beq.n	8011656 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011638:	4b91      	ldr	r3, [pc, #580]	; (8011880 <tcp_receive+0xb04>)
 801163a:	881b      	ldrh	r3, [r3, #0]
 801163c:	461a      	mov	r2, r3
 801163e:	4b91      	ldr	r3, [pc, #580]	; (8011884 <tcp_receive+0xb08>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	441a      	add	r2, r3
 8011644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011646:	68db      	ldr	r3, [r3, #12]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801164c:	8909      	ldrh	r1, [r1, #8]
 801164e:	440b      	add	r3, r1
 8011650:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011652:	2b00      	cmp	r3, #0
 8011654:	da9a      	bge.n	801158c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011658:	2b00      	cmp	r3, #0
 801165a:	d059      	beq.n	8011710 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801165c:	4b88      	ldr	r3, [pc, #544]	; (8011880 <tcp_receive+0xb04>)
 801165e:	881b      	ldrh	r3, [r3, #0]
 8011660:	461a      	mov	r2, r3
 8011662:	4b88      	ldr	r3, [pc, #544]	; (8011884 <tcp_receive+0xb08>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	441a      	add	r2, r3
 8011668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011670:	2b00      	cmp	r3, #0
 8011672:	dd4d      	ble.n	8011710 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	b29a      	uxth	r2, r3
 801167c:	4b81      	ldr	r3, [pc, #516]	; (8011884 <tcp_receive+0xb08>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	b29b      	uxth	r3, r3
 8011682:	1ad3      	subs	r3, r2, r3
 8011684:	b29a      	uxth	r2, r3
 8011686:	4b80      	ldr	r3, [pc, #512]	; (8011888 <tcp_receive+0xb0c>)
 8011688:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801168a:	4b7f      	ldr	r3, [pc, #508]	; (8011888 <tcp_receive+0xb0c>)
 801168c:	68db      	ldr	r3, [r3, #12]
 801168e:	899b      	ldrh	r3, [r3, #12]
 8011690:	b29b      	uxth	r3, r3
 8011692:	4618      	mov	r0, r3
 8011694:	f7fa fb24 	bl	800bce0 <lwip_htons>
 8011698:	4603      	mov	r3, r0
 801169a:	b2db      	uxtb	r3, r3
 801169c:	f003 0302 	and.w	r3, r3, #2
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d005      	beq.n	80116b0 <tcp_receive+0x934>
                inseg.len -= 1;
 80116a4:	4b78      	ldr	r3, [pc, #480]	; (8011888 <tcp_receive+0xb0c>)
 80116a6:	891b      	ldrh	r3, [r3, #8]
 80116a8:	3b01      	subs	r3, #1
 80116aa:	b29a      	uxth	r2, r3
 80116ac:	4b76      	ldr	r3, [pc, #472]	; (8011888 <tcp_receive+0xb0c>)
 80116ae:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80116b0:	4b75      	ldr	r3, [pc, #468]	; (8011888 <tcp_receive+0xb0c>)
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	4a74      	ldr	r2, [pc, #464]	; (8011888 <tcp_receive+0xb0c>)
 80116b6:	8912      	ldrh	r2, [r2, #8]
 80116b8:	4611      	mov	r1, r2
 80116ba:	4618      	mov	r0, r3
 80116bc:	f7fb fdc0 	bl	800d240 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80116c0:	4b71      	ldr	r3, [pc, #452]	; (8011888 <tcp_receive+0xb0c>)
 80116c2:	891c      	ldrh	r4, [r3, #8]
 80116c4:	4b70      	ldr	r3, [pc, #448]	; (8011888 <tcp_receive+0xb0c>)
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	899b      	ldrh	r3, [r3, #12]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7fa fb07 	bl	800bce0 <lwip_htons>
 80116d2:	4603      	mov	r3, r0
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	f003 0303 	and.w	r3, r3, #3
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d001      	beq.n	80116e2 <tcp_receive+0x966>
 80116de:	2301      	movs	r3, #1
 80116e0:	e000      	b.n	80116e4 <tcp_receive+0x968>
 80116e2:	2300      	movs	r3, #0
 80116e4:	4423      	add	r3, r4
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	4b65      	ldr	r3, [pc, #404]	; (8011880 <tcp_receive+0xb04>)
 80116ea:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80116ec:	4b64      	ldr	r3, [pc, #400]	; (8011880 <tcp_receive+0xb04>)
 80116ee:	881b      	ldrh	r3, [r3, #0]
 80116f0:	461a      	mov	r2, r3
 80116f2:	4b64      	ldr	r3, [pc, #400]	; (8011884 <tcp_receive+0xb08>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	441a      	add	r2, r3
 80116f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	429a      	cmp	r2, r3
 8011700:	d006      	beq.n	8011710 <tcp_receive+0x994>
 8011702:	4b62      	ldr	r3, [pc, #392]	; (801188c <tcp_receive+0xb10>)
 8011704:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011708:	4961      	ldr	r1, [pc, #388]	; (8011890 <tcp_receive+0xb14>)
 801170a:	4862      	ldr	r0, [pc, #392]	; (8011894 <tcp_receive+0xb18>)
 801170c:	f009 fe2c 	bl	801b368 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011714:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011716:	4b5a      	ldr	r3, [pc, #360]	; (8011880 <tcp_receive+0xb04>)
 8011718:	881b      	ldrh	r3, [r3, #0]
 801171a:	461a      	mov	r2, r3
 801171c:	4b59      	ldr	r3, [pc, #356]	; (8011884 <tcp_receive+0xb08>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	441a      	add	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801172a:	4b55      	ldr	r3, [pc, #340]	; (8011880 <tcp_receive+0xb04>)
 801172c:	881b      	ldrh	r3, [r3, #0]
 801172e:	429a      	cmp	r2, r3
 8011730:	d206      	bcs.n	8011740 <tcp_receive+0x9c4>
 8011732:	4b56      	ldr	r3, [pc, #344]	; (801188c <tcp_receive+0xb10>)
 8011734:	f240 6207 	movw	r2, #1543	; 0x607
 8011738:	4957      	ldr	r1, [pc, #348]	; (8011898 <tcp_receive+0xb1c>)
 801173a:	4856      	ldr	r0, [pc, #344]	; (8011894 <tcp_receive+0xb18>)
 801173c:	f009 fe14 	bl	801b368 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011744:	4b4e      	ldr	r3, [pc, #312]	; (8011880 <tcp_receive+0xb04>)
 8011746:	881b      	ldrh	r3, [r3, #0]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	b29a      	uxth	r2, r3
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f7fc feb5 	bl	800e4c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011756:	4b4c      	ldr	r3, [pc, #304]	; (8011888 <tcp_receive+0xb0c>)
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	891b      	ldrh	r3, [r3, #8]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d006      	beq.n	801176e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011760:	4b49      	ldr	r3, [pc, #292]	; (8011888 <tcp_receive+0xb0c>)
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	4a4d      	ldr	r2, [pc, #308]	; (801189c <tcp_receive+0xb20>)
 8011766:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011768:	4b47      	ldr	r3, [pc, #284]	; (8011888 <tcp_receive+0xb0c>)
 801176a:	2200      	movs	r2, #0
 801176c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801176e:	4b46      	ldr	r3, [pc, #280]	; (8011888 <tcp_receive+0xb0c>)
 8011770:	68db      	ldr	r3, [r3, #12]
 8011772:	899b      	ldrh	r3, [r3, #12]
 8011774:	b29b      	uxth	r3, r3
 8011776:	4618      	mov	r0, r3
 8011778:	f7fa fab2 	bl	800bce0 <lwip_htons>
 801177c:	4603      	mov	r3, r0
 801177e:	b2db      	uxtb	r3, r3
 8011780:	f003 0301 	and.w	r3, r3, #1
 8011784:	2b00      	cmp	r3, #0
 8011786:	f000 80b8 	beq.w	80118fa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801178a:	4b45      	ldr	r3, [pc, #276]	; (80118a0 <tcp_receive+0xb24>)
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	f043 0320 	orr.w	r3, r3, #32
 8011792:	b2da      	uxtb	r2, r3
 8011794:	4b42      	ldr	r3, [pc, #264]	; (80118a0 <tcp_receive+0xb24>)
 8011796:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011798:	e0af      	b.n	80118fa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801179e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	4a36      	ldr	r2, [pc, #216]	; (8011884 <tcp_receive+0xb08>)
 80117aa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	891b      	ldrh	r3, [r3, #8]
 80117b0:	461c      	mov	r4, r3
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	68db      	ldr	r3, [r3, #12]
 80117b6:	899b      	ldrh	r3, [r3, #12]
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	4618      	mov	r0, r3
 80117bc:	f7fa fa90 	bl	800bce0 <lwip_htons>
 80117c0:	4603      	mov	r3, r0
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	f003 0303 	and.w	r3, r3, #3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d001      	beq.n	80117d0 <tcp_receive+0xa54>
 80117cc:	2301      	movs	r3, #1
 80117ce:	e000      	b.n	80117d2 <tcp_receive+0xa56>
 80117d0:	2300      	movs	r3, #0
 80117d2:	191a      	adds	r2, r3, r4
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117d8:	441a      	add	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117e2:	461c      	mov	r4, r3
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	891b      	ldrh	r3, [r3, #8]
 80117e8:	461d      	mov	r5, r3
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	899b      	ldrh	r3, [r3, #12]
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fa fa74 	bl	800bce0 <lwip_htons>
 80117f8:	4603      	mov	r3, r0
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	f003 0303 	and.w	r3, r3, #3
 8011800:	2b00      	cmp	r3, #0
 8011802:	d001      	beq.n	8011808 <tcp_receive+0xa8c>
 8011804:	2301      	movs	r3, #1
 8011806:	e000      	b.n	801180a <tcp_receive+0xa8e>
 8011808:	2300      	movs	r3, #0
 801180a:	442b      	add	r3, r5
 801180c:	429c      	cmp	r4, r3
 801180e:	d206      	bcs.n	801181e <tcp_receive+0xaa2>
 8011810:	4b1e      	ldr	r3, [pc, #120]	; (801188c <tcp_receive+0xb10>)
 8011812:	f240 622b 	movw	r2, #1579	; 0x62b
 8011816:	4923      	ldr	r1, [pc, #140]	; (80118a4 <tcp_receive+0xb28>)
 8011818:	481e      	ldr	r0, [pc, #120]	; (8011894 <tcp_receive+0xb18>)
 801181a:	f009 fda5 	bl	801b368 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801181e:	68bb      	ldr	r3, [r7, #8]
 8011820:	891b      	ldrh	r3, [r3, #8]
 8011822:	461c      	mov	r4, r3
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	899b      	ldrh	r3, [r3, #12]
 801182a:	b29b      	uxth	r3, r3
 801182c:	4618      	mov	r0, r3
 801182e:	f7fa fa57 	bl	800bce0 <lwip_htons>
 8011832:	4603      	mov	r3, r0
 8011834:	b2db      	uxtb	r3, r3
 8011836:	f003 0303 	and.w	r3, r3, #3
 801183a:	2b00      	cmp	r3, #0
 801183c:	d001      	beq.n	8011842 <tcp_receive+0xac6>
 801183e:	2301      	movs	r3, #1
 8011840:	e000      	b.n	8011844 <tcp_receive+0xac8>
 8011842:	2300      	movs	r3, #0
 8011844:	1919      	adds	r1, r3, r4
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801184a:	b28b      	uxth	r3, r1
 801184c:	1ad3      	subs	r3, r2, r3
 801184e:	b29a      	uxth	r2, r3
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7fc fe33 	bl	800e4c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	891b      	ldrh	r3, [r3, #8]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d028      	beq.n	80118b6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011864:	4b0d      	ldr	r3, [pc, #52]	; (801189c <tcp_receive+0xb20>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d01d      	beq.n	80118a8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801186c:	4b0b      	ldr	r3, [pc, #44]	; (801189c <tcp_receive+0xb20>)
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	4619      	mov	r1, r3
 8011876:	4610      	mov	r0, r2
 8011878:	f7fb ff68 	bl	800d74c <pbuf_cat>
 801187c:	e018      	b.n	80118b0 <tcp_receive+0xb34>
 801187e:	bf00      	nop
 8011880:	2001079e 	.word	0x2001079e
 8011884:	20010794 	.word	0x20010794
 8011888:	20010774 	.word	0x20010774
 801188c:	0801e134 	.word	0x0801e134
 8011890:	0801e514 	.word	0x0801e514
 8011894:	0801e180 	.word	0x0801e180
 8011898:	0801e550 	.word	0x0801e550
 801189c:	200107a4 	.word	0x200107a4
 80118a0:	200107a1 	.word	0x200107a1
 80118a4:	0801e570 	.word	0x0801e570
            } else {
              recv_data = cseg->p;
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	685b      	ldr	r3, [r3, #4]
 80118ac:	4a70      	ldr	r2, [pc, #448]	; (8011a70 <tcp_receive+0xcf4>)
 80118ae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	2200      	movs	r2, #0
 80118b4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	68db      	ldr	r3, [r3, #12]
 80118ba:	899b      	ldrh	r3, [r3, #12]
 80118bc:	b29b      	uxth	r3, r3
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fa fa0e 	bl	800bce0 <lwip_htons>
 80118c4:	4603      	mov	r3, r0
 80118c6:	b2db      	uxtb	r3, r3
 80118c8:	f003 0301 	and.w	r3, r3, #1
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d00d      	beq.n	80118ec <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80118d0:	4b68      	ldr	r3, [pc, #416]	; (8011a74 <tcp_receive+0xcf8>)
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	f043 0320 	orr.w	r3, r3, #32
 80118d8:	b2da      	uxtb	r2, r3
 80118da:	4b66      	ldr	r3, [pc, #408]	; (8011a74 <tcp_receive+0xcf8>)
 80118dc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	7d1b      	ldrb	r3, [r3, #20]
 80118e2:	2b04      	cmp	r3, #4
 80118e4:	d102      	bne.n	80118ec <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2207      	movs	r2, #7
 80118ea:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	681a      	ldr	r2, [r3, #0]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80118f4:	68b8      	ldr	r0, [r7, #8]
 80118f6:	f7fd fb08 	bl	800ef0a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d008      	beq.n	8011914 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011906:	68db      	ldr	r3, [r3, #12]
 8011908:	685a      	ldr	r2, [r3, #4]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801190e:	429a      	cmp	r2, r3
 8011910:	f43f af43 	beq.w	801179a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	8b5b      	ldrh	r3, [r3, #26]
 8011918:	f003 0301 	and.w	r3, r3, #1
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00e      	beq.n	801193e <tcp_receive+0xbc2>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	8b5b      	ldrh	r3, [r3, #26]
 8011924:	f023 0301 	bic.w	r3, r3, #1
 8011928:	b29a      	uxth	r2, r3
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	835a      	strh	r2, [r3, #26]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	8b5b      	ldrh	r3, [r3, #26]
 8011932:	f043 0302 	orr.w	r3, r3, #2
 8011936:	b29a      	uxth	r2, r3
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801193c:	e188      	b.n	8011c50 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	8b5b      	ldrh	r3, [r3, #26]
 8011942:	f043 0301 	orr.w	r3, r3, #1
 8011946:	b29a      	uxth	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801194c:	e180      	b.n	8011c50 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011952:	2b00      	cmp	r3, #0
 8011954:	d106      	bne.n	8011964 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011956:	4848      	ldr	r0, [pc, #288]	; (8011a78 <tcp_receive+0xcfc>)
 8011958:	f7fd faf0 	bl	800ef3c <tcp_seg_copy>
 801195c:	4602      	mov	r2, r0
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	675a      	str	r2, [r3, #116]	; 0x74
 8011962:	e16d      	b.n	8011c40 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011964:	2300      	movs	r3, #0
 8011966:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801196c:	63bb      	str	r3, [r7, #56]	; 0x38
 801196e:	e157      	b.n	8011c20 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	685a      	ldr	r2, [r3, #4]
 8011976:	4b41      	ldr	r3, [pc, #260]	; (8011a7c <tcp_receive+0xd00>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	429a      	cmp	r2, r3
 801197c:	d11d      	bne.n	80119ba <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801197e:	4b3e      	ldr	r3, [pc, #248]	; (8011a78 <tcp_receive+0xcfc>)
 8011980:	891a      	ldrh	r2, [r3, #8]
 8011982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011984:	891b      	ldrh	r3, [r3, #8]
 8011986:	429a      	cmp	r2, r3
 8011988:	f240 814f 	bls.w	8011c2a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801198c:	483a      	ldr	r0, [pc, #232]	; (8011a78 <tcp_receive+0xcfc>)
 801198e:	f7fd fad5 	bl	800ef3c <tcp_seg_copy>
 8011992:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	2b00      	cmp	r3, #0
 8011998:	f000 8149 	beq.w	8011c2e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801199c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d003      	beq.n	80119aa <tcp_receive+0xc2e>
                    prev->next = cseg;
 80119a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119a4:	697a      	ldr	r2, [r7, #20]
 80119a6:	601a      	str	r2, [r3, #0]
 80119a8:	e002      	b.n	80119b0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	697a      	ldr	r2, [r7, #20]
 80119ae:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80119b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80119b2:	6978      	ldr	r0, [r7, #20]
 80119b4:	f7ff f8de 	bl	8010b74 <tcp_oos_insert_segment>
                }
                break;
 80119b8:	e139      	b.n	8011c2e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80119ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d117      	bne.n	80119f0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80119c0:	4b2e      	ldr	r3, [pc, #184]	; (8011a7c <tcp_receive+0xd00>)
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	1ad3      	subs	r3, r2, r3
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	da57      	bge.n	8011a80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80119d0:	4829      	ldr	r0, [pc, #164]	; (8011a78 <tcp_receive+0xcfc>)
 80119d2:	f7fd fab3 	bl	800ef3c <tcp_seg_copy>
 80119d6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80119d8:	69bb      	ldr	r3, [r7, #24]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	f000 8129 	beq.w	8011c32 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	69ba      	ldr	r2, [r7, #24]
 80119e4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80119e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80119e8:	69b8      	ldr	r0, [r7, #24]
 80119ea:	f7ff f8c3 	bl	8010b74 <tcp_oos_insert_segment>
                  }
                  break;
 80119ee:	e120      	b.n	8011c32 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80119f0:	4b22      	ldr	r3, [pc, #136]	; (8011a7c <tcp_receive+0xd00>)
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	685b      	ldr	r3, [r3, #4]
 80119fa:	1ad3      	subs	r3, r2, r3
 80119fc:	3b01      	subs	r3, #1
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	db3e      	blt.n	8011a80 <tcp_receive+0xd04>
 8011a02:	4b1e      	ldr	r3, [pc, #120]	; (8011a7c <tcp_receive+0xd00>)
 8011a04:	681a      	ldr	r2, [r3, #0]
 8011a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a08:	68db      	ldr	r3, [r3, #12]
 8011a0a:	685b      	ldr	r3, [r3, #4]
 8011a0c:	1ad3      	subs	r3, r2, r3
 8011a0e:	3301      	adds	r3, #1
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	dc35      	bgt.n	8011a80 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011a14:	4818      	ldr	r0, [pc, #96]	; (8011a78 <tcp_receive+0xcfc>)
 8011a16:	f7fd fa91 	bl	800ef3c <tcp_seg_copy>
 8011a1a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011a1c:	69fb      	ldr	r3, [r7, #28]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f000 8109 	beq.w	8011c36 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a26:	68db      	ldr	r3, [r3, #12]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a2c:	8912      	ldrh	r2, [r2, #8]
 8011a2e:	441a      	add	r2, r3
 8011a30:	4b12      	ldr	r3, [pc, #72]	; (8011a7c <tcp_receive+0xd00>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	1ad3      	subs	r3, r2, r3
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	dd12      	ble.n	8011a60 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011a3a:	4b10      	ldr	r3, [pc, #64]	; (8011a7c <tcp_receive+0xd00>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	b29a      	uxth	r2, r3
 8011a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a42:	68db      	ldr	r3, [r3, #12]
 8011a44:	685b      	ldr	r3, [r3, #4]
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	1ad3      	subs	r3, r2, r3
 8011a4a:	b29a      	uxth	r2, r3
 8011a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a4e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a52:	685a      	ldr	r2, [r3, #4]
 8011a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a56:	891b      	ldrh	r3, [r3, #8]
 8011a58:	4619      	mov	r1, r3
 8011a5a:	4610      	mov	r0, r2
 8011a5c:	f7fb fbf0 	bl	800d240 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a62:	69fa      	ldr	r2, [r7, #28]
 8011a64:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011a66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a68:	69f8      	ldr	r0, [r7, #28]
 8011a6a:	f7ff f883 	bl	8010b74 <tcp_oos_insert_segment>
                  }
                  break;
 8011a6e:	e0e2      	b.n	8011c36 <tcp_receive+0xeba>
 8011a70:	200107a4 	.word	0x200107a4
 8011a74:	200107a1 	.word	0x200107a1
 8011a78:	20010774 	.word	0x20010774
 8011a7c:	20010794 	.word	0x20010794
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a82:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	f040 80c6 	bne.w	8011c1a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011a8e:	4b80      	ldr	r3, [pc, #512]	; (8011c90 <tcp_receive+0xf14>)
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a94:	68db      	ldr	r3, [r3, #12]
 8011a96:	685b      	ldr	r3, [r3, #4]
 8011a98:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	f340 80bd 	ble.w	8011c1a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	899b      	ldrh	r3, [r3, #12]
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	f7fa f919 	bl	800bce0 <lwip_htons>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	f003 0301 	and.w	r3, r3, #1
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	f040 80bf 	bne.w	8011c3a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011abc:	4875      	ldr	r0, [pc, #468]	; (8011c94 <tcp_receive+0xf18>)
 8011abe:	f7fd fa3d 	bl	800ef3c <tcp_seg_copy>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f000 80b6 	beq.w	8011c3e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad4:	68db      	ldr	r3, [r3, #12]
 8011ad6:	685b      	ldr	r3, [r3, #4]
 8011ad8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ada:	8912      	ldrh	r2, [r2, #8]
 8011adc:	441a      	add	r2, r3
 8011ade:	4b6c      	ldr	r3, [pc, #432]	; (8011c90 <tcp_receive+0xf14>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	1ad3      	subs	r3, r2, r3
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	dd12      	ble.n	8011b0e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011ae8:	4b69      	ldr	r3, [pc, #420]	; (8011c90 <tcp_receive+0xf14>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	1ad3      	subs	r3, r2, r3
 8011af8:	b29a      	uxth	r2, r3
 8011afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b00:	685a      	ldr	r2, [r3, #4]
 8011b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b04:	891b      	ldrh	r3, [r3, #8]
 8011b06:	4619      	mov	r1, r3
 8011b08:	4610      	mov	r0, r2
 8011b0a:	f7fb fb99 	bl	800d240 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011b0e:	4b62      	ldr	r3, [pc, #392]	; (8011c98 <tcp_receive+0xf1c>)
 8011b10:	881b      	ldrh	r3, [r3, #0]
 8011b12:	461a      	mov	r2, r3
 8011b14:	4b5e      	ldr	r3, [pc, #376]	; (8011c90 <tcp_receive+0xf14>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	441a      	add	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b1e:	6879      	ldr	r1, [r7, #4]
 8011b20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b22:	440b      	add	r3, r1
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	f340 8089 	ble.w	8011c3e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	68db      	ldr	r3, [r3, #12]
 8011b32:	899b      	ldrh	r3, [r3, #12]
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fa f8d2 	bl	800bce0 <lwip_htons>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	f003 0301 	and.w	r3, r3, #1
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d022      	beq.n	8011b8e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	68db      	ldr	r3, [r3, #12]
 8011b4e:	899b      	ldrh	r3, [r3, #12]
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	b21b      	sxth	r3, r3
 8011b54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011b58:	b21c      	sxth	r4, r3
 8011b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	899b      	ldrh	r3, [r3, #12]
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7fa f8bb 	bl	800bce0 <lwip_htons>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	b2db      	uxtb	r3, r3
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7fa f8b2 	bl	800bce0 <lwip_htons>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	b21b      	sxth	r3, r3
 8011b80:	4323      	orrs	r3, r4
 8011b82:	b21a      	sxth	r2, r3
 8011b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	68db      	ldr	r3, [r3, #12]
 8011b8a:	b292      	uxth	r2, r2
 8011b8c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b92:	b29a      	uxth	r2, r3
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b98:	4413      	add	r3, r2
 8011b9a:	b299      	uxth	r1, r3
 8011b9c:	4b3c      	ldr	r3, [pc, #240]	; (8011c90 <tcp_receive+0xf14>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	b29a      	uxth	r2, r3
 8011ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	1a8a      	subs	r2, r1, r2
 8011ba8:	b292      	uxth	r2, r2
 8011baa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	685a      	ldr	r2, [r3, #4]
 8011bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	891b      	ldrh	r3, [r3, #8]
 8011bb8:	4619      	mov	r1, r3
 8011bba:	4610      	mov	r0, r2
 8011bbc:	f7fb fb40 	bl	800d240 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	891c      	ldrh	r4, [r3, #8]
 8011bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	68db      	ldr	r3, [r3, #12]
 8011bcc:	899b      	ldrh	r3, [r3, #12]
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7fa f885 	bl	800bce0 <lwip_htons>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	f003 0303 	and.w	r3, r3, #3
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d001      	beq.n	8011be6 <tcp_receive+0xe6a>
 8011be2:	2301      	movs	r3, #1
 8011be4:	e000      	b.n	8011be8 <tcp_receive+0xe6c>
 8011be6:	2300      	movs	r3, #0
 8011be8:	4423      	add	r3, r4
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	4b2a      	ldr	r3, [pc, #168]	; (8011c98 <tcp_receive+0xf1c>)
 8011bee:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011bf0:	4b29      	ldr	r3, [pc, #164]	; (8011c98 <tcp_receive+0xf1c>)
 8011bf2:	881b      	ldrh	r3, [r3, #0]
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	4b26      	ldr	r3, [pc, #152]	; (8011c90 <tcp_receive+0xf14>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	441a      	add	r2, r3
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c00:	6879      	ldr	r1, [r7, #4]
 8011c02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c04:	440b      	add	r3, r1
 8011c06:	429a      	cmp	r2, r3
 8011c08:	d019      	beq.n	8011c3e <tcp_receive+0xec2>
 8011c0a:	4b24      	ldr	r3, [pc, #144]	; (8011c9c <tcp_receive+0xf20>)
 8011c0c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011c10:	4923      	ldr	r1, [pc, #140]	; (8011ca0 <tcp_receive+0xf24>)
 8011c12:	4824      	ldr	r0, [pc, #144]	; (8011ca4 <tcp_receive+0xf28>)
 8011c14:	f009 fba8 	bl	801b368 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011c18:	e011      	b.n	8011c3e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f47f aea4 	bne.w	8011970 <tcp_receive+0xbf4>
 8011c28:	e00a      	b.n	8011c40 <tcp_receive+0xec4>
                break;
 8011c2a:	bf00      	nop
 8011c2c:	e008      	b.n	8011c40 <tcp_receive+0xec4>
                break;
 8011c2e:	bf00      	nop
 8011c30:	e006      	b.n	8011c40 <tcp_receive+0xec4>
                  break;
 8011c32:	bf00      	nop
 8011c34:	e004      	b.n	8011c40 <tcp_receive+0xec4>
                  break;
 8011c36:	bf00      	nop
 8011c38:	e002      	b.n	8011c40 <tcp_receive+0xec4>
                  break;
 8011c3a:	bf00      	nop
 8011c3c:	e000      	b.n	8011c40 <tcp_receive+0xec4>
                break;
 8011c3e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f001 fe8b 	bl	801395c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011c46:	e003      	b.n	8011c50 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f001 fe87 	bl	801395c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011c4e:	e01a      	b.n	8011c86 <tcp_receive+0xf0a>
 8011c50:	e019      	b.n	8011c86 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011c52:	4b0f      	ldr	r3, [pc, #60]	; (8011c90 <tcp_receive+0xf14>)
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c5a:	1ad3      	subs	r3, r2, r3
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	db0a      	blt.n	8011c76 <tcp_receive+0xefa>
 8011c60:	4b0b      	ldr	r3, [pc, #44]	; (8011c90 <tcp_receive+0xf14>)
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c68:	6879      	ldr	r1, [r7, #4]
 8011c6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c6c:	440b      	add	r3, r1
 8011c6e:	1ad3      	subs	r3, r2, r3
 8011c70:	3301      	adds	r3, #1
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	dd07      	ble.n	8011c86 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	8b5b      	ldrh	r3, [r3, #26]
 8011c7a:	f043 0302 	orr.w	r3, r3, #2
 8011c7e:	b29a      	uxth	r2, r3
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011c84:	e7ff      	b.n	8011c86 <tcp_receive+0xf0a>
 8011c86:	bf00      	nop
 8011c88:	3750      	adds	r7, #80	; 0x50
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	20010794 	.word	0x20010794
 8011c94:	20010774 	.word	0x20010774
 8011c98:	2001079e 	.word	0x2001079e
 8011c9c:	0801e134 	.word	0x0801e134
 8011ca0:	0801e4dc 	.word	0x0801e4dc
 8011ca4:	0801e180 	.word	0x0801e180

08011ca8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011cae:	4b15      	ldr	r3, [pc, #84]	; (8011d04 <tcp_get_next_optbyte+0x5c>)
 8011cb0:	881b      	ldrh	r3, [r3, #0]
 8011cb2:	1c5a      	adds	r2, r3, #1
 8011cb4:	b291      	uxth	r1, r2
 8011cb6:	4a13      	ldr	r2, [pc, #76]	; (8011d04 <tcp_get_next_optbyte+0x5c>)
 8011cb8:	8011      	strh	r1, [r2, #0]
 8011cba:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011cbc:	4b12      	ldr	r3, [pc, #72]	; (8011d08 <tcp_get_next_optbyte+0x60>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d004      	beq.n	8011cce <tcp_get_next_optbyte+0x26>
 8011cc4:	4b11      	ldr	r3, [pc, #68]	; (8011d0c <tcp_get_next_optbyte+0x64>)
 8011cc6:	881b      	ldrh	r3, [r3, #0]
 8011cc8:	88fa      	ldrh	r2, [r7, #6]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d208      	bcs.n	8011ce0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011cce:	4b10      	ldr	r3, [pc, #64]	; (8011d10 <tcp_get_next_optbyte+0x68>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	3314      	adds	r3, #20
 8011cd4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011cd6:	88fb      	ldrh	r3, [r7, #6]
 8011cd8:	683a      	ldr	r2, [r7, #0]
 8011cda:	4413      	add	r3, r2
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	e00b      	b.n	8011cf8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011ce0:	88fb      	ldrh	r3, [r7, #6]
 8011ce2:	b2da      	uxtb	r2, r3
 8011ce4:	4b09      	ldr	r3, [pc, #36]	; (8011d0c <tcp_get_next_optbyte+0x64>)
 8011ce6:	881b      	ldrh	r3, [r3, #0]
 8011ce8:	b2db      	uxtb	r3, r3
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011cee:	4b06      	ldr	r3, [pc, #24]	; (8011d08 <tcp_get_next_optbyte+0x60>)
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	797b      	ldrb	r3, [r7, #5]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr
 8011d04:	20010790 	.word	0x20010790
 8011d08:	2001078c 	.word	0x2001078c
 8011d0c:	2001078a 	.word	0x2001078a
 8011d10:	20010784 	.word	0x20010784

08011d14 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d106      	bne.n	8011d30 <tcp_parseopt+0x1c>
 8011d22:	4b32      	ldr	r3, [pc, #200]	; (8011dec <tcp_parseopt+0xd8>)
 8011d24:	f240 727d 	movw	r2, #1917	; 0x77d
 8011d28:	4931      	ldr	r1, [pc, #196]	; (8011df0 <tcp_parseopt+0xdc>)
 8011d2a:	4832      	ldr	r0, [pc, #200]	; (8011df4 <tcp_parseopt+0xe0>)
 8011d2c:	f009 fb1c 	bl	801b368 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011d30:	4b31      	ldr	r3, [pc, #196]	; (8011df8 <tcp_parseopt+0xe4>)
 8011d32:	881b      	ldrh	r3, [r3, #0]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d055      	beq.n	8011de4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011d38:	4b30      	ldr	r3, [pc, #192]	; (8011dfc <tcp_parseopt+0xe8>)
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	801a      	strh	r2, [r3, #0]
 8011d3e:	e045      	b.n	8011dcc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011d40:	f7ff ffb2 	bl	8011ca8 <tcp_get_next_optbyte>
 8011d44:	4603      	mov	r3, r0
 8011d46:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011d48:	7bfb      	ldrb	r3, [r7, #15]
 8011d4a:	2b02      	cmp	r3, #2
 8011d4c:	d006      	beq.n	8011d5c <tcp_parseopt+0x48>
 8011d4e:	2b02      	cmp	r3, #2
 8011d50:	dc2b      	bgt.n	8011daa <tcp_parseopt+0x96>
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d041      	beq.n	8011dda <tcp_parseopt+0xc6>
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d127      	bne.n	8011daa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011d5a:	e037      	b.n	8011dcc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011d5c:	f7ff ffa4 	bl	8011ca8 <tcp_get_next_optbyte>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b04      	cmp	r3, #4
 8011d64:	d13b      	bne.n	8011dde <tcp_parseopt+0xca>
 8011d66:	4b25      	ldr	r3, [pc, #148]	; (8011dfc <tcp_parseopt+0xe8>)
 8011d68:	881b      	ldrh	r3, [r3, #0]
 8011d6a:	3301      	adds	r3, #1
 8011d6c:	4a22      	ldr	r2, [pc, #136]	; (8011df8 <tcp_parseopt+0xe4>)
 8011d6e:	8812      	ldrh	r2, [r2, #0]
 8011d70:	4293      	cmp	r3, r2
 8011d72:	da34      	bge.n	8011dde <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011d74:	f7ff ff98 	bl	8011ca8 <tcp_get_next_optbyte>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	021b      	lsls	r3, r3, #8
 8011d7e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011d80:	f7ff ff92 	bl	8011ca8 <tcp_get_next_optbyte>
 8011d84:	4603      	mov	r3, r0
 8011d86:	b29a      	uxth	r2, r3
 8011d88:	89bb      	ldrh	r3, [r7, #12]
 8011d8a:	4313      	orrs	r3, r2
 8011d8c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011d8e:	89bb      	ldrh	r3, [r7, #12]
 8011d90:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011d94:	d804      	bhi.n	8011da0 <tcp_parseopt+0x8c>
 8011d96:	89bb      	ldrh	r3, [r7, #12]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d001      	beq.n	8011da0 <tcp_parseopt+0x8c>
 8011d9c:	89ba      	ldrh	r2, [r7, #12]
 8011d9e:	e001      	b.n	8011da4 <tcp_parseopt+0x90>
 8011da0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011da8:	e010      	b.n	8011dcc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011daa:	f7ff ff7d 	bl	8011ca8 <tcp_get_next_optbyte>
 8011dae:	4603      	mov	r3, r0
 8011db0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011db2:	7afb      	ldrb	r3, [r7, #11]
 8011db4:	2b01      	cmp	r3, #1
 8011db6:	d914      	bls.n	8011de2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011db8:	7afb      	ldrb	r3, [r7, #11]
 8011dba:	b29a      	uxth	r2, r3
 8011dbc:	4b0f      	ldr	r3, [pc, #60]	; (8011dfc <tcp_parseopt+0xe8>)
 8011dbe:	881b      	ldrh	r3, [r3, #0]
 8011dc0:	4413      	add	r3, r2
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	3b02      	subs	r3, #2
 8011dc6:	b29a      	uxth	r2, r3
 8011dc8:	4b0c      	ldr	r3, [pc, #48]	; (8011dfc <tcp_parseopt+0xe8>)
 8011dca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011dcc:	4b0b      	ldr	r3, [pc, #44]	; (8011dfc <tcp_parseopt+0xe8>)
 8011dce:	881a      	ldrh	r2, [r3, #0]
 8011dd0:	4b09      	ldr	r3, [pc, #36]	; (8011df8 <tcp_parseopt+0xe4>)
 8011dd2:	881b      	ldrh	r3, [r3, #0]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d3b3      	bcc.n	8011d40 <tcp_parseopt+0x2c>
 8011dd8:	e004      	b.n	8011de4 <tcp_parseopt+0xd0>
          return;
 8011dda:	bf00      	nop
 8011ddc:	e002      	b.n	8011de4 <tcp_parseopt+0xd0>
            return;
 8011dde:	bf00      	nop
 8011de0:	e000      	b.n	8011de4 <tcp_parseopt+0xd0>
            return;
 8011de2:	bf00      	nop
      }
    }
  }
}
 8011de4:	3710      	adds	r7, #16
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	0801e134 	.word	0x0801e134
 8011df0:	0801e598 	.word	0x0801e598
 8011df4:	0801e180 	.word	0x0801e180
 8011df8:	20010788 	.word	0x20010788
 8011dfc:	20010790 	.word	0x20010790

08011e00 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011e00:	b480      	push	{r7}
 8011e02:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011e04:	4b05      	ldr	r3, [pc, #20]	; (8011e1c <tcp_trigger_input_pcb_close+0x1c>)
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	f043 0310 	orr.w	r3, r3, #16
 8011e0c:	b2da      	uxtb	r2, r3
 8011e0e:	4b03      	ldr	r3, [pc, #12]	; (8011e1c <tcp_trigger_input_pcb_close+0x1c>)
 8011e10:	701a      	strb	r2, [r3, #0]
}
 8011e12:	bf00      	nop
 8011e14:	46bd      	mov	sp, r7
 8011e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1a:	4770      	bx	lr
 8011e1c:	200107a1 	.word	0x200107a1

08011e20 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	60f8      	str	r0, [r7, #12]
 8011e28:	60b9      	str	r1, [r7, #8]
 8011e2a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d00a      	beq.n	8011e48 <tcp_route+0x28>
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	7a1b      	ldrb	r3, [r3, #8]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d006      	beq.n	8011e48 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	7a1b      	ldrb	r3, [r3, #8]
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fa ffbe 	bl	800cdc0 <netif_get_by_index>
 8011e44:	4603      	mov	r3, r0
 8011e46:	e003      	b.n	8011e50 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011e48:	6878      	ldr	r0, [r7, #4]
 8011e4a:	f005 fd53 	bl	80178f4 <ip4_route>
 8011e4e:	4603      	mov	r3, r0
  }
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3710      	adds	r7, #16
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011e58:	b590      	push	{r4, r7, lr}
 8011e5a:	b087      	sub	sp, #28
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	603b      	str	r3, [r7, #0]
 8011e64:	4613      	mov	r3, r2
 8011e66:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d105      	bne.n	8011e7a <tcp_create_segment+0x22>
 8011e6e:	4b44      	ldr	r3, [pc, #272]	; (8011f80 <tcp_create_segment+0x128>)
 8011e70:	22a3      	movs	r2, #163	; 0xa3
 8011e72:	4944      	ldr	r1, [pc, #272]	; (8011f84 <tcp_create_segment+0x12c>)
 8011e74:	4844      	ldr	r0, [pc, #272]	; (8011f88 <tcp_create_segment+0x130>)
 8011e76:	f009 fa77 	bl	801b368 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d105      	bne.n	8011e8c <tcp_create_segment+0x34>
 8011e80:	4b3f      	ldr	r3, [pc, #252]	; (8011f80 <tcp_create_segment+0x128>)
 8011e82:	22a4      	movs	r2, #164	; 0xa4
 8011e84:	4941      	ldr	r1, [pc, #260]	; (8011f8c <tcp_create_segment+0x134>)
 8011e86:	4840      	ldr	r0, [pc, #256]	; (8011f88 <tcp_create_segment+0x130>)
 8011e88:	f009 fa6e 	bl	801b368 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	b2db      	uxtb	r3, r3
 8011e94:	f003 0304 	and.w	r3, r3, #4
 8011e98:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011e9a:	2003      	movs	r0, #3
 8011e9c:	f7fa fbf8 	bl	800c690 <memp_malloc>
 8011ea0:	6138      	str	r0, [r7, #16]
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d104      	bne.n	8011eb2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011ea8:	68b8      	ldr	r0, [r7, #8]
 8011eaa:	f7fb fb81 	bl	800d5b0 <pbuf_free>
    return NULL;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	e061      	b.n	8011f76 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011eb8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	68ba      	ldr	r2, [r7, #8]
 8011ec4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	891a      	ldrh	r2, [r3, #8]
 8011eca:	7dfb      	ldrb	r3, [r7, #23]
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d205      	bcs.n	8011ede <tcp_create_segment+0x86>
 8011ed2:	4b2b      	ldr	r3, [pc, #172]	; (8011f80 <tcp_create_segment+0x128>)
 8011ed4:	22b0      	movs	r2, #176	; 0xb0
 8011ed6:	492e      	ldr	r1, [pc, #184]	; (8011f90 <tcp_create_segment+0x138>)
 8011ed8:	482b      	ldr	r0, [pc, #172]	; (8011f88 <tcp_create_segment+0x130>)
 8011eda:	f009 fa45 	bl	801b368 <iprintf>
  seg->len = p->tot_len - optlen;
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	891a      	ldrh	r2, [r3, #8]
 8011ee2:	7dfb      	ldrb	r3, [r7, #23]
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	1ad3      	subs	r3, r2, r3
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011eee:	2114      	movs	r1, #20
 8011ef0:	68b8      	ldr	r0, [r7, #8]
 8011ef2:	f7fb fa95 	bl	800d420 <pbuf_add_header>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d004      	beq.n	8011f06 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011efc:	6938      	ldr	r0, [r7, #16]
 8011efe:	f7fd f804 	bl	800ef0a <tcp_seg_free>
    return NULL;
 8011f02:	2300      	movs	r3, #0
 8011f04:	e037      	b.n	8011f76 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	685a      	ldr	r2, [r3, #4]
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	8ada      	ldrh	r2, [r3, #22]
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	68dc      	ldr	r4, [r3, #12]
 8011f18:	4610      	mov	r0, r2
 8011f1a:	f7f9 fee1 	bl	800bce0 <lwip_htons>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	8b1a      	ldrh	r2, [r3, #24]
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	68dc      	ldr	r4, [r3, #12]
 8011f2a:	4610      	mov	r0, r2
 8011f2c:	f7f9 fed8 	bl	800bce0 <lwip_htons>
 8011f30:	4603      	mov	r3, r0
 8011f32:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	68dc      	ldr	r4, [r3, #12]
 8011f38:	6838      	ldr	r0, [r7, #0]
 8011f3a:	f7f9 fee6 	bl	800bd0a <lwip_htonl>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011f42:	7dfb      	ldrb	r3, [r7, #23]
 8011f44:	089b      	lsrs	r3, r3, #2
 8011f46:	b2db      	uxtb	r3, r3
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	3305      	adds	r3, #5
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	031b      	lsls	r3, r3, #12
 8011f50:	b29a      	uxth	r2, r3
 8011f52:	79fb      	ldrb	r3, [r7, #7]
 8011f54:	b29b      	uxth	r3, r3
 8011f56:	4313      	orrs	r3, r2
 8011f58:	b29a      	uxth	r2, r3
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	68dc      	ldr	r4, [r3, #12]
 8011f5e:	4610      	mov	r0, r2
 8011f60:	f7f9 febe 	bl	800bce0 <lwip_htons>
 8011f64:	4603      	mov	r3, r0
 8011f66:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	749a      	strb	r2, [r3, #18]
 8011f70:	2200      	movs	r2, #0
 8011f72:	74da      	strb	r2, [r3, #19]
  return seg;
 8011f74:	693b      	ldr	r3, [r7, #16]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	371c      	adds	r7, #28
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd90      	pop	{r4, r7, pc}
 8011f7e:	bf00      	nop
 8011f80:	0801e5b4 	.word	0x0801e5b4
 8011f84:	0801e5e8 	.word	0x0801e5e8
 8011f88:	0801e608 	.word	0x0801e608
 8011f8c:	0801e630 	.word	0x0801e630
 8011f90:	0801e654 	.word	0x0801e654

08011f94 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b086      	sub	sp, #24
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	607b      	str	r3, [r7, #4]
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	73fb      	strb	r3, [r7, #15]
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	81bb      	strh	r3, [r7, #12]
 8011fa4:	4613      	mov	r3, r2
 8011fa6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011fa8:	89bb      	ldrh	r3, [r7, #12]
 8011faa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d105      	bne.n	8011fbe <tcp_pbuf_prealloc+0x2a>
 8011fb2:	4b30      	ldr	r3, [pc, #192]	; (8012074 <tcp_pbuf_prealloc+0xe0>)
 8011fb4:	22e8      	movs	r2, #232	; 0xe8
 8011fb6:	4930      	ldr	r1, [pc, #192]	; (8012078 <tcp_pbuf_prealloc+0xe4>)
 8011fb8:	4830      	ldr	r0, [pc, #192]	; (801207c <tcp_pbuf_prealloc+0xe8>)
 8011fba:	f009 f9d5 	bl	801b368 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011fbe:	6a3b      	ldr	r3, [r7, #32]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d105      	bne.n	8011fd0 <tcp_pbuf_prealloc+0x3c>
 8011fc4:	4b2b      	ldr	r3, [pc, #172]	; (8012074 <tcp_pbuf_prealloc+0xe0>)
 8011fc6:	22e9      	movs	r2, #233	; 0xe9
 8011fc8:	492d      	ldr	r1, [pc, #180]	; (8012080 <tcp_pbuf_prealloc+0xec>)
 8011fca:	482c      	ldr	r0, [pc, #176]	; (801207c <tcp_pbuf_prealloc+0xe8>)
 8011fcc:	f009 f9cc 	bl	801b368 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011fd0:	89ba      	ldrh	r2, [r7, #12]
 8011fd2:	897b      	ldrh	r3, [r7, #10]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d221      	bcs.n	801201c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011fd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011fdc:	f003 0302 	and.w	r3, r3, #2
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d111      	bne.n	8012008 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011fe4:	6a3b      	ldr	r3, [r7, #32]
 8011fe6:	8b5b      	ldrh	r3, [r3, #26]
 8011fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d115      	bne.n	801201c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011ff0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d007      	beq.n	8012008 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011ff8:	6a3b      	ldr	r3, [r7, #32]
 8011ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d103      	bne.n	8012008 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012000:	6a3b      	ldr	r3, [r7, #32]
 8012002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012004:	2b00      	cmp	r3, #0
 8012006:	d009      	beq.n	801201c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012008:	89bb      	ldrh	r3, [r7, #12]
 801200a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801200e:	f023 0203 	bic.w	r2, r3, #3
 8012012:	897b      	ldrh	r3, [r7, #10]
 8012014:	4293      	cmp	r3, r2
 8012016:	bf28      	it	cs
 8012018:	4613      	movcs	r3, r2
 801201a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801201c:	8af9      	ldrh	r1, [r7, #22]
 801201e:	7bfb      	ldrb	r3, [r7, #15]
 8012020:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012024:	4618      	mov	r0, r3
 8012026:	f7fa ffad 	bl	800cf84 <pbuf_alloc>
 801202a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d101      	bne.n	8012036 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012032:	2300      	movs	r3, #0
 8012034:	e019      	b.n	801206a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d006      	beq.n	801204c <tcp_pbuf_prealloc+0xb8>
 801203e:	4b0d      	ldr	r3, [pc, #52]	; (8012074 <tcp_pbuf_prealloc+0xe0>)
 8012040:	f240 120b 	movw	r2, #267	; 0x10b
 8012044:	490f      	ldr	r1, [pc, #60]	; (8012084 <tcp_pbuf_prealloc+0xf0>)
 8012046:	480d      	ldr	r0, [pc, #52]	; (801207c <tcp_pbuf_prealloc+0xe8>)
 8012048:	f009 f98e 	bl	801b368 <iprintf>
  *oversize = p->len - length;
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	895a      	ldrh	r2, [r3, #10]
 8012050:	89bb      	ldrh	r3, [r7, #12]
 8012052:	1ad3      	subs	r3, r2, r3
 8012054:	b29a      	uxth	r2, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	89ba      	ldrh	r2, [r7, #12]
 801205e:	811a      	strh	r2, [r3, #8]
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	891a      	ldrh	r2, [r3, #8]
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	815a      	strh	r2, [r3, #10]
  return p;
 8012068:	693b      	ldr	r3, [r7, #16]
}
 801206a:	4618      	mov	r0, r3
 801206c:	3718      	adds	r7, #24
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	0801e5b4 	.word	0x0801e5b4
 8012078:	0801e66c 	.word	0x0801e66c
 801207c:	0801e608 	.word	0x0801e608
 8012080:	0801e690 	.word	0x0801e690
 8012084:	0801e6b0 	.word	0x0801e6b0

08012088 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b082      	sub	sp, #8
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	460b      	mov	r3, r1
 8012092:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d106      	bne.n	80120a8 <tcp_write_checks+0x20>
 801209a:	4b33      	ldr	r3, [pc, #204]	; (8012168 <tcp_write_checks+0xe0>)
 801209c:	f240 1233 	movw	r2, #307	; 0x133
 80120a0:	4932      	ldr	r1, [pc, #200]	; (801216c <tcp_write_checks+0xe4>)
 80120a2:	4833      	ldr	r0, [pc, #204]	; (8012170 <tcp_write_checks+0xe8>)
 80120a4:	f009 f960 	bl	801b368 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	7d1b      	ldrb	r3, [r3, #20]
 80120ac:	2b04      	cmp	r3, #4
 80120ae:	d00e      	beq.n	80120ce <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80120b4:	2b07      	cmp	r3, #7
 80120b6:	d00a      	beq.n	80120ce <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80120bc:	2b02      	cmp	r3, #2
 80120be:	d006      	beq.n	80120ce <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80120c4:	2b03      	cmp	r3, #3
 80120c6:	d002      	beq.n	80120ce <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80120c8:	f06f 030a 	mvn.w	r3, #10
 80120cc:	e048      	b.n	8012160 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80120ce:	887b      	ldrh	r3, [r7, #2]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d101      	bne.n	80120d8 <tcp_write_checks+0x50>
    return ERR_OK;
 80120d4:	2300      	movs	r3, #0
 80120d6:	e043      	b.n	8012160 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80120de:	887a      	ldrh	r2, [r7, #2]
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d909      	bls.n	80120f8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	8b5b      	ldrh	r3, [r3, #26]
 80120e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120ec:	b29a      	uxth	r2, r3
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80120f2:	f04f 33ff 	mov.w	r3, #4294967295
 80120f6:	e033      	b.n	8012160 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80120fe:	2b08      	cmp	r3, #8
 8012100:	d909      	bls.n	8012116 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	8b5b      	ldrh	r3, [r3, #26]
 8012106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801210a:	b29a      	uxth	r2, r3
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012110:	f04f 33ff 	mov.w	r3, #4294967295
 8012114:	e024      	b.n	8012160 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801211c:	2b00      	cmp	r3, #0
 801211e:	d00f      	beq.n	8012140 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012124:	2b00      	cmp	r3, #0
 8012126:	d11a      	bne.n	801215e <tcp_write_checks+0xd6>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801212c:	2b00      	cmp	r3, #0
 801212e:	d116      	bne.n	801215e <tcp_write_checks+0xd6>
 8012130:	4b0d      	ldr	r3, [pc, #52]	; (8012168 <tcp_write_checks+0xe0>)
 8012132:	f240 1255 	movw	r2, #341	; 0x155
 8012136:	490f      	ldr	r1, [pc, #60]	; (8012174 <tcp_write_checks+0xec>)
 8012138:	480d      	ldr	r0, [pc, #52]	; (8012170 <tcp_write_checks+0xe8>)
 801213a:	f009 f915 	bl	801b368 <iprintf>
 801213e:	e00e      	b.n	801215e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012144:	2b00      	cmp	r3, #0
 8012146:	d103      	bne.n	8012150 <tcp_write_checks+0xc8>
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801214c:	2b00      	cmp	r3, #0
 801214e:	d006      	beq.n	801215e <tcp_write_checks+0xd6>
 8012150:	4b05      	ldr	r3, [pc, #20]	; (8012168 <tcp_write_checks+0xe0>)
 8012152:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8012156:	4908      	ldr	r1, [pc, #32]	; (8012178 <tcp_write_checks+0xf0>)
 8012158:	4805      	ldr	r0, [pc, #20]	; (8012170 <tcp_write_checks+0xe8>)
 801215a:	f009 f905 	bl	801b368 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801215e:	2300      	movs	r3, #0
}
 8012160:	4618      	mov	r0, r3
 8012162:	3708      	adds	r7, #8
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	0801e5b4 	.word	0x0801e5b4
 801216c:	0801e6c4 	.word	0x0801e6c4
 8012170:	0801e608 	.word	0x0801e608
 8012174:	0801e6e4 	.word	0x0801e6e4
 8012178:	0801e720 	.word	0x0801e720

0801217c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801217c:	b590      	push	{r4, r7, lr}
 801217e:	b09b      	sub	sp, #108	; 0x6c
 8012180:	af04      	add	r7, sp, #16
 8012182:	60f8      	str	r0, [r7, #12]
 8012184:	60b9      	str	r1, [r7, #8]
 8012186:	4611      	mov	r1, r2
 8012188:	461a      	mov	r2, r3
 801218a:	460b      	mov	r3, r1
 801218c:	80fb      	strh	r3, [r7, #6]
 801218e:	4613      	mov	r3, r2
 8012190:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012192:	2300      	movs	r3, #0
 8012194:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8012196:	2300      	movs	r3, #0
 8012198:	653b      	str	r3, [r7, #80]	; 0x50
 801219a:	2300      	movs	r3, #0
 801219c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801219e:	2300      	movs	r3, #0
 80121a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80121a2:	2300      	movs	r3, #0
 80121a4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80121a6:	2300      	movs	r3, #0
 80121a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80121ac:	2300      	movs	r3, #0
 80121ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80121b2:	2300      	movs	r3, #0
 80121b4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80121b6:	2300      	movs	r3, #0
 80121b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80121ba:	2300      	movs	r3, #0
 80121bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d109      	bne.n	80121d8 <tcp_write+0x5c>
 80121c4:	4ba4      	ldr	r3, [pc, #656]	; (8012458 <tcp_write+0x2dc>)
 80121c6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80121ca:	49a4      	ldr	r1, [pc, #656]	; (801245c <tcp_write+0x2e0>)
 80121cc:	48a4      	ldr	r0, [pc, #656]	; (8012460 <tcp_write+0x2e4>)
 80121ce:	f009 f8cb 	bl	801b368 <iprintf>
 80121d2:	f06f 030f 	mvn.w	r3, #15
 80121d6:	e32a      	b.n	801282e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80121de:	085b      	lsrs	r3, r3, #1
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121e6:	4293      	cmp	r3, r2
 80121e8:	bf28      	it	cs
 80121ea:	4613      	movcs	r3, r2
 80121ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80121ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d102      	bne.n	80121fa <tcp_write+0x7e>
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121f8:	e000      	b.n	80121fc <tcp_write+0x80>
 80121fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d109      	bne.n	8012218 <tcp_write+0x9c>
 8012204:	4b94      	ldr	r3, [pc, #592]	; (8012458 <tcp_write+0x2dc>)
 8012206:	f240 12ad 	movw	r2, #429	; 0x1ad
 801220a:	4996      	ldr	r1, [pc, #600]	; (8012464 <tcp_write+0x2e8>)
 801220c:	4894      	ldr	r0, [pc, #592]	; (8012460 <tcp_write+0x2e4>)
 801220e:	f009 f8ab 	bl	801b368 <iprintf>
 8012212:	f06f 030f 	mvn.w	r3, #15
 8012216:	e30a      	b.n	801282e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012218:	88fb      	ldrh	r3, [r7, #6]
 801221a:	4619      	mov	r1, r3
 801221c:	68f8      	ldr	r0, [r7, #12]
 801221e:	f7ff ff33 	bl	8012088 <tcp_write_checks>
 8012222:	4603      	mov	r3, r0
 8012224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012228:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801222c:	2b00      	cmp	r3, #0
 801222e:	d002      	beq.n	8012236 <tcp_write+0xba>
    return err;
 8012230:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012234:	e2fb      	b.n	801282e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801223c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012240:	2300      	movs	r3, #0
 8012242:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801224a:	2b00      	cmp	r3, #0
 801224c:	f000 80f6 	beq.w	801243c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012254:	653b      	str	r3, [r7, #80]	; 0x50
 8012256:	e002      	b.n	801225e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801225e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d1f8      	bne.n	8012258 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012268:	7a9b      	ldrb	r3, [r3, #10]
 801226a:	009b      	lsls	r3, r3, #2
 801226c:	b29b      	uxth	r3, r3
 801226e:	f003 0304 	and.w	r3, r3, #4
 8012272:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012274:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012278:	891b      	ldrh	r3, [r3, #8]
 801227a:	4619      	mov	r1, r3
 801227c:	8c3b      	ldrh	r3, [r7, #32]
 801227e:	440b      	add	r3, r1
 8012280:	429a      	cmp	r2, r3
 8012282:	da06      	bge.n	8012292 <tcp_write+0x116>
 8012284:	4b74      	ldr	r3, [pc, #464]	; (8012458 <tcp_write+0x2dc>)
 8012286:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801228a:	4977      	ldr	r1, [pc, #476]	; (8012468 <tcp_write+0x2ec>)
 801228c:	4874      	ldr	r0, [pc, #464]	; (8012460 <tcp_write+0x2e4>)
 801228e:	f009 f86b 	bl	801b368 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012294:	891a      	ldrh	r2, [r3, #8]
 8012296:	8c3b      	ldrh	r3, [r7, #32]
 8012298:	4413      	add	r3, r2
 801229a:	b29b      	uxth	r3, r3
 801229c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80122a8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80122aa:	8a7b      	ldrh	r3, [r7, #18]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d026      	beq.n	80122fe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80122b0:	8a7b      	ldrh	r3, [r7, #18]
 80122b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d206      	bcs.n	80122c6 <tcp_write+0x14a>
 80122b8:	4b67      	ldr	r3, [pc, #412]	; (8012458 <tcp_write+0x2dc>)
 80122ba:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80122be:	496b      	ldr	r1, [pc, #428]	; (801246c <tcp_write+0x2f0>)
 80122c0:	4867      	ldr	r0, [pc, #412]	; (8012460 <tcp_write+0x2e4>)
 80122c2:	f009 f851 	bl	801b368 <iprintf>
      seg = last_unsent;
 80122c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122c8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80122ca:	8a7b      	ldrh	r3, [r7, #18]
 80122cc:	88fa      	ldrh	r2, [r7, #6]
 80122ce:	4293      	cmp	r3, r2
 80122d0:	bf28      	it	cs
 80122d2:	4613      	movcs	r3, r2
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80122d8:	4293      	cmp	r3, r2
 80122da:	bf28      	it	cs
 80122dc:	4613      	movcs	r3, r2
 80122de:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80122e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122e6:	4413      	add	r3, r2
 80122e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80122ec:	8a7a      	ldrh	r2, [r7, #18]
 80122ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	b29b      	uxth	r3, r3
 80122f4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80122f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80122f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80122fa:	1ad3      	subs	r3, r2, r3
 80122fc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80122fe:	8a7b      	ldrh	r3, [r7, #18]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d00b      	beq.n	801231c <tcp_write+0x1a0>
 8012304:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012308:	88fb      	ldrh	r3, [r7, #6]
 801230a:	429a      	cmp	r2, r3
 801230c:	d006      	beq.n	801231c <tcp_write+0x1a0>
 801230e:	4b52      	ldr	r3, [pc, #328]	; (8012458 <tcp_write+0x2dc>)
 8012310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012314:	4956      	ldr	r1, [pc, #344]	; (8012470 <tcp_write+0x2f4>)
 8012316:	4852      	ldr	r0, [pc, #328]	; (8012460 <tcp_write+0x2e4>)
 8012318:	f009 f826 	bl	801b368 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801231c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012320:	88fb      	ldrh	r3, [r7, #6]
 8012322:	429a      	cmp	r2, r3
 8012324:	f080 8167 	bcs.w	80125f6 <tcp_write+0x47a>
 8012328:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801232a:	2b00      	cmp	r3, #0
 801232c:	f000 8163 	beq.w	80125f6 <tcp_write+0x47a>
 8012330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012332:	891b      	ldrh	r3, [r3, #8]
 8012334:	2b00      	cmp	r3, #0
 8012336:	f000 815e 	beq.w	80125f6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801233a:	88fa      	ldrh	r2, [r7, #6]
 801233c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012340:	1ad2      	subs	r2, r2, r3
 8012342:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012344:	4293      	cmp	r3, r2
 8012346:	bfa8      	it	ge
 8012348:	4613      	movge	r3, r2
 801234a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801234c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801234e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012350:	797b      	ldrb	r3, [r7, #5]
 8012352:	f003 0301 	and.w	r3, r3, #1
 8012356:	2b00      	cmp	r3, #0
 8012358:	d027      	beq.n	80123aa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801235a:	f107 0012 	add.w	r0, r7, #18
 801235e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012360:	8bf9      	ldrh	r1, [r7, #30]
 8012362:	2301      	movs	r3, #1
 8012364:	9302      	str	r3, [sp, #8]
 8012366:	797b      	ldrb	r3, [r7, #5]
 8012368:	9301      	str	r3, [sp, #4]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	4603      	mov	r3, r0
 8012370:	2000      	movs	r0, #0
 8012372:	f7ff fe0f 	bl	8011f94 <tcp_pbuf_prealloc>
 8012376:	6578      	str	r0, [r7, #84]	; 0x54
 8012378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801237a:	2b00      	cmp	r3, #0
 801237c:	f000 8225 	beq.w	80127ca <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012382:	6858      	ldr	r0, [r3, #4]
 8012384:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012388:	68ba      	ldr	r2, [r7, #8]
 801238a:	4413      	add	r3, r2
 801238c:	8bfa      	ldrh	r2, [r7, #30]
 801238e:	4619      	mov	r1, r3
 8012390:	f008 fc22 	bl	801abd8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012394:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012396:	f7fb f999 	bl	800d6cc <pbuf_clen>
 801239a:	4603      	mov	r3, r0
 801239c:	461a      	mov	r2, r3
 801239e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80123a2:	4413      	add	r3, r2
 80123a4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80123a8:	e041      	b.n	801242e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80123aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	637b      	str	r3, [r7, #52]	; 0x34
 80123b0:	e002      	b.n	80123b8 <tcp_write+0x23c>
 80123b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	637b      	str	r3, [r7, #52]	; 0x34
 80123b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d1f8      	bne.n	80123b2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80123c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123c2:	7b1b      	ldrb	r3, [r3, #12]
 80123c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d115      	bne.n	80123f8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80123cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123d2:	8952      	ldrh	r2, [r2, #10]
 80123d4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80123d6:	68ba      	ldr	r2, [r7, #8]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d10d      	bne.n	80123f8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80123dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d006      	beq.n	80123f2 <tcp_write+0x276>
 80123e4:	4b1c      	ldr	r3, [pc, #112]	; (8012458 <tcp_write+0x2dc>)
 80123e6:	f240 2231 	movw	r2, #561	; 0x231
 80123ea:	4922      	ldr	r1, [pc, #136]	; (8012474 <tcp_write+0x2f8>)
 80123ec:	481c      	ldr	r0, [pc, #112]	; (8012460 <tcp_write+0x2e4>)
 80123ee:	f008 ffbb 	bl	801b368 <iprintf>
          extendlen = seglen;
 80123f2:	8bfb      	ldrh	r3, [r7, #30]
 80123f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80123f6:	e01a      	b.n	801242e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80123f8:	8bfb      	ldrh	r3, [r7, #30]
 80123fa:	2201      	movs	r2, #1
 80123fc:	4619      	mov	r1, r3
 80123fe:	2000      	movs	r0, #0
 8012400:	f7fa fdc0 	bl	800cf84 <pbuf_alloc>
 8012404:	6578      	str	r0, [r7, #84]	; 0x54
 8012406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012408:	2b00      	cmp	r3, #0
 801240a:	f000 81e0 	beq.w	80127ce <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801240e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012412:	68ba      	ldr	r2, [r7, #8]
 8012414:	441a      	add	r2, r3
 8012416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012418:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801241a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801241c:	f7fb f956 	bl	800d6cc <pbuf_clen>
 8012420:	4603      	mov	r3, r0
 8012422:	461a      	mov	r2, r3
 8012424:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012428:	4413      	add	r3, r2
 801242a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801242e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012432:	8bfb      	ldrh	r3, [r7, #30]
 8012434:	4413      	add	r3, r2
 8012436:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801243a:	e0dc      	b.n	80125f6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012442:	2b00      	cmp	r3, #0
 8012444:	f000 80d7 	beq.w	80125f6 <tcp_write+0x47a>
 8012448:	4b03      	ldr	r3, [pc, #12]	; (8012458 <tcp_write+0x2dc>)
 801244a:	f240 224a 	movw	r2, #586	; 0x24a
 801244e:	490a      	ldr	r1, [pc, #40]	; (8012478 <tcp_write+0x2fc>)
 8012450:	4803      	ldr	r0, [pc, #12]	; (8012460 <tcp_write+0x2e4>)
 8012452:	f008 ff89 	bl	801b368 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012456:	e0ce      	b.n	80125f6 <tcp_write+0x47a>
 8012458:	0801e5b4 	.word	0x0801e5b4
 801245c:	0801e754 	.word	0x0801e754
 8012460:	0801e608 	.word	0x0801e608
 8012464:	0801e76c 	.word	0x0801e76c
 8012468:	0801e7a0 	.word	0x0801e7a0
 801246c:	0801e7b8 	.word	0x0801e7b8
 8012470:	0801e7d8 	.word	0x0801e7d8
 8012474:	0801e7f8 	.word	0x0801e7f8
 8012478:	0801e824 	.word	0x0801e824
    struct pbuf *p;
    u16_t left = len - pos;
 801247c:	88fa      	ldrh	r2, [r7, #6]
 801247e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012482:	1ad3      	subs	r3, r2, r3
 8012484:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012486:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801248a:	b29b      	uxth	r3, r3
 801248c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801248e:	1ad3      	subs	r3, r2, r3
 8012490:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012492:	8b7a      	ldrh	r2, [r7, #26]
 8012494:	8bbb      	ldrh	r3, [r7, #28]
 8012496:	4293      	cmp	r3, r2
 8012498:	bf28      	it	cs
 801249a:	4613      	movcs	r3, r2
 801249c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801249e:	797b      	ldrb	r3, [r7, #5]
 80124a0:	f003 0301 	and.w	r3, r3, #1
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d036      	beq.n	8012516 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80124a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80124ac:	b29a      	uxth	r2, r3
 80124ae:	8b3b      	ldrh	r3, [r7, #24]
 80124b0:	4413      	add	r3, r2
 80124b2:	b299      	uxth	r1, r3
 80124b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	bf0c      	ite	eq
 80124ba:	2301      	moveq	r3, #1
 80124bc:	2300      	movne	r3, #0
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	f107 0012 	add.w	r0, r7, #18
 80124c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80124c6:	9302      	str	r3, [sp, #8]
 80124c8:	797b      	ldrb	r3, [r7, #5]
 80124ca:	9301      	str	r3, [sp, #4]
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	9300      	str	r3, [sp, #0]
 80124d0:	4603      	mov	r3, r0
 80124d2:	2036      	movs	r0, #54	; 0x36
 80124d4:	f7ff fd5e 	bl	8011f94 <tcp_pbuf_prealloc>
 80124d8:	6338      	str	r0, [r7, #48]	; 0x30
 80124da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124dc:	2b00      	cmp	r3, #0
 80124de:	f000 8178 	beq.w	80127d2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80124e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124e4:	895b      	ldrh	r3, [r3, #10]
 80124e6:	8b3a      	ldrh	r2, [r7, #24]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d906      	bls.n	80124fa <tcp_write+0x37e>
 80124ec:	4b8c      	ldr	r3, [pc, #560]	; (8012720 <tcp_write+0x5a4>)
 80124ee:	f240 2266 	movw	r2, #614	; 0x266
 80124f2:	498c      	ldr	r1, [pc, #560]	; (8012724 <tcp_write+0x5a8>)
 80124f4:	488c      	ldr	r0, [pc, #560]	; (8012728 <tcp_write+0x5ac>)
 80124f6:	f008 ff37 	bl	801b368 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80124fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124fc:	685a      	ldr	r2, [r3, #4]
 80124fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012502:	18d0      	adds	r0, r2, r3
 8012504:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012508:	68ba      	ldr	r2, [r7, #8]
 801250a:	4413      	add	r3, r2
 801250c:	8b3a      	ldrh	r2, [r7, #24]
 801250e:	4619      	mov	r1, r3
 8012510:	f008 fb62 	bl	801abd8 <memcpy>
 8012514:	e02f      	b.n	8012576 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012516:	8a7b      	ldrh	r3, [r7, #18]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d006      	beq.n	801252a <tcp_write+0x3ae>
 801251c:	4b80      	ldr	r3, [pc, #512]	; (8012720 <tcp_write+0x5a4>)
 801251e:	f240 2271 	movw	r2, #625	; 0x271
 8012522:	4982      	ldr	r1, [pc, #520]	; (801272c <tcp_write+0x5b0>)
 8012524:	4880      	ldr	r0, [pc, #512]	; (8012728 <tcp_write+0x5ac>)
 8012526:	f008 ff1f 	bl	801b368 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801252a:	8b3b      	ldrh	r3, [r7, #24]
 801252c:	2201      	movs	r2, #1
 801252e:	4619      	mov	r1, r3
 8012530:	2036      	movs	r0, #54	; 0x36
 8012532:	f7fa fd27 	bl	800cf84 <pbuf_alloc>
 8012536:	6178      	str	r0, [r7, #20]
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	2b00      	cmp	r3, #0
 801253c:	f000 814b 	beq.w	80127d6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012540:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012544:	68ba      	ldr	r2, [r7, #8]
 8012546:	441a      	add	r2, r3
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801254c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012550:	b29b      	uxth	r3, r3
 8012552:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012556:	4619      	mov	r1, r3
 8012558:	2036      	movs	r0, #54	; 0x36
 801255a:	f7fa fd13 	bl	800cf84 <pbuf_alloc>
 801255e:	6338      	str	r0, [r7, #48]	; 0x30
 8012560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012562:	2b00      	cmp	r3, #0
 8012564:	d103      	bne.n	801256e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012566:	6978      	ldr	r0, [r7, #20]
 8012568:	f7fb f822 	bl	800d5b0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801256c:	e136      	b.n	80127dc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801256e:	6979      	ldr	r1, [r7, #20]
 8012570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012572:	f7fb f8eb 	bl	800d74c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012578:	f7fb f8a8 	bl	800d6cc <pbuf_clen>
 801257c:	4603      	mov	r3, r0
 801257e:	461a      	mov	r2, r3
 8012580:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012584:	4413      	add	r3, r2
 8012586:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801258a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801258e:	2b09      	cmp	r3, #9
 8012590:	d903      	bls.n	801259a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012594:	f7fb f80c 	bl	800d5b0 <pbuf_free>
      goto memerr;
 8012598:	e120      	b.n	80127dc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801259e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125a2:	441a      	add	r2, r3
 80125a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125a8:	9300      	str	r3, [sp, #0]
 80125aa:	4613      	mov	r3, r2
 80125ac:	2200      	movs	r2, #0
 80125ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80125b0:	68f8      	ldr	r0, [r7, #12]
 80125b2:	f7ff fc51 	bl	8011e58 <tcp_create_segment>
 80125b6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80125b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	f000 810d 	beq.w	80127da <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80125c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d102      	bne.n	80125cc <tcp_write+0x450>
      queue = seg;
 80125c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125c8:	647b      	str	r3, [r7, #68]	; 0x44
 80125ca:	e00c      	b.n	80125e6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80125cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d106      	bne.n	80125e0 <tcp_write+0x464>
 80125d2:	4b53      	ldr	r3, [pc, #332]	; (8012720 <tcp_write+0x5a4>)
 80125d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80125d8:	4955      	ldr	r1, [pc, #340]	; (8012730 <tcp_write+0x5b4>)
 80125da:	4853      	ldr	r0, [pc, #332]	; (8012728 <tcp_write+0x5ac>)
 80125dc:	f008 fec4 	bl	801b368 <iprintf>
      prev_seg->next = seg;
 80125e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80125e4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80125e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125e8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80125ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125ee:	8b3b      	ldrh	r3, [r7, #24]
 80125f0:	4413      	add	r3, r2
 80125f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80125f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125fa:	88fb      	ldrh	r3, [r7, #6]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	f4ff af3d 	bcc.w	801247c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012602:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012604:	2b00      	cmp	r3, #0
 8012606:	d02c      	beq.n	8012662 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801260e:	e01e      	b.n	801264e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012612:	891a      	ldrh	r2, [r3, #8]
 8012614:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012616:	4413      	add	r3, r2
 8012618:	b29a      	uxth	r2, r3
 801261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801261c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d110      	bne.n	8012648 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801262c:	8952      	ldrh	r2, [r2, #10]
 801262e:	4413      	add	r3, r2
 8012630:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012632:	68b9      	ldr	r1, [r7, #8]
 8012634:	4618      	mov	r0, r3
 8012636:	f008 facf 	bl	801abd8 <memcpy>
        p->len += oversize_used;
 801263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801263c:	895a      	ldrh	r2, [r3, #10]
 801263e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012640:	4413      	add	r3, r2
 8012642:	b29a      	uxth	r2, r3
 8012644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012646:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012650:	2b00      	cmp	r3, #0
 8012652:	d1dd      	bne.n	8012610 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012656:	891a      	ldrh	r2, [r3, #8]
 8012658:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801265a:	4413      	add	r3, r2
 801265c:	b29a      	uxth	r2, r3
 801265e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012660:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012662:	8a7a      	ldrh	r2, [r7, #18]
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801266a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801266c:	2b00      	cmp	r3, #0
 801266e:	d018      	beq.n	80126a2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012672:	2b00      	cmp	r3, #0
 8012674:	d106      	bne.n	8012684 <tcp_write+0x508>
 8012676:	4b2a      	ldr	r3, [pc, #168]	; (8012720 <tcp_write+0x5a4>)
 8012678:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801267c:	492d      	ldr	r1, [pc, #180]	; (8012734 <tcp_write+0x5b8>)
 801267e:	482a      	ldr	r0, [pc, #168]	; (8012728 <tcp_write+0x5ac>)
 8012680:	f008 fe72 	bl	801b368 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801268a:	4618      	mov	r0, r3
 801268c:	f7fb f85e 	bl	800d74c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012692:	891a      	ldrh	r2, [r3, #8]
 8012694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012696:	891b      	ldrh	r3, [r3, #8]
 8012698:	4413      	add	r3, r2
 801269a:	b29a      	uxth	r2, r3
 801269c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801269e:	811a      	strh	r2, [r3, #8]
 80126a0:	e037      	b.n	8012712 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80126a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d034      	beq.n	8012712 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80126a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d003      	beq.n	80126b6 <tcp_write+0x53a>
 80126ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d106      	bne.n	80126c4 <tcp_write+0x548>
 80126b6:	4b1a      	ldr	r3, [pc, #104]	; (8012720 <tcp_write+0x5a4>)
 80126b8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80126bc:	491e      	ldr	r1, [pc, #120]	; (8012738 <tcp_write+0x5bc>)
 80126be:	481a      	ldr	r0, [pc, #104]	; (8012728 <tcp_write+0x5ac>)
 80126c0:	f008 fe52 	bl	801b368 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80126c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80126ca:	e009      	b.n	80126e0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80126cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ce:	891a      	ldrh	r2, [r3, #8]
 80126d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126d2:	4413      	add	r3, r2
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80126da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	62bb      	str	r3, [r7, #40]	; 0x28
 80126e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d1f1      	bne.n	80126cc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80126e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ea:	891a      	ldrh	r2, [r3, #8]
 80126ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126ee:	4413      	add	r3, r2
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80126f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f8:	895a      	ldrh	r2, [r3, #10]
 80126fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80126fc:	4413      	add	r3, r2
 80126fe:	b29a      	uxth	r2, r3
 8012700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012702:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012706:	891a      	ldrh	r2, [r3, #8]
 8012708:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801270a:	4413      	add	r3, r2
 801270c:	b29a      	uxth	r2, r3
 801270e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012710:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012714:	2b00      	cmp	r3, #0
 8012716:	d111      	bne.n	801273c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801271c:	66da      	str	r2, [r3, #108]	; 0x6c
 801271e:	e010      	b.n	8012742 <tcp_write+0x5c6>
 8012720:	0801e5b4 	.word	0x0801e5b4
 8012724:	0801e854 	.word	0x0801e854
 8012728:	0801e608 	.word	0x0801e608
 801272c:	0801e894 	.word	0x0801e894
 8012730:	0801e8a4 	.word	0x0801e8a4
 8012734:	0801e8b8 	.word	0x0801e8b8
 8012738:	0801e8f0 	.word	0x0801e8f0
  } else {
    last_unsent->next = queue;
 801273c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801273e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012740:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012746:	88fb      	ldrh	r3, [r7, #6]
 8012748:	441a      	add	r2, r3
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012754:	88fb      	ldrh	r3, [r7, #6]
 8012756:	1ad3      	subs	r3, r2, r3
 8012758:	b29a      	uxth	r2, r3
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012766:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012770:	2b00      	cmp	r3, #0
 8012772:	d00e      	beq.n	8012792 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012778:	2b00      	cmp	r3, #0
 801277a:	d10a      	bne.n	8012792 <tcp_write+0x616>
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012780:	2b00      	cmp	r3, #0
 8012782:	d106      	bne.n	8012792 <tcp_write+0x616>
 8012784:	4b2c      	ldr	r3, [pc, #176]	; (8012838 <tcp_write+0x6bc>)
 8012786:	f240 3212 	movw	r2, #786	; 0x312
 801278a:	492c      	ldr	r1, [pc, #176]	; (801283c <tcp_write+0x6c0>)
 801278c:	482c      	ldr	r0, [pc, #176]	; (8012840 <tcp_write+0x6c4>)
 801278e:	f008 fdeb 	bl	801b368 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012794:	2b00      	cmp	r3, #0
 8012796:	d016      	beq.n	80127c6 <tcp_write+0x64a>
 8012798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801279a:	68db      	ldr	r3, [r3, #12]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d012      	beq.n	80127c6 <tcp_write+0x64a>
 80127a0:	797b      	ldrb	r3, [r7, #5]
 80127a2:	f003 0302 	and.w	r3, r3, #2
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d10d      	bne.n	80127c6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80127aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127ac:	68db      	ldr	r3, [r3, #12]
 80127ae:	899b      	ldrh	r3, [r3, #12]
 80127b0:	b29c      	uxth	r4, r3
 80127b2:	2008      	movs	r0, #8
 80127b4:	f7f9 fa94 	bl	800bce0 <lwip_htons>
 80127b8:	4603      	mov	r3, r0
 80127ba:	461a      	mov	r2, r3
 80127bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	4322      	orrs	r2, r4
 80127c2:	b292      	uxth	r2, r2
 80127c4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80127c6:	2300      	movs	r3, #0
 80127c8:	e031      	b.n	801282e <tcp_write+0x6b2>
          goto memerr;
 80127ca:	bf00      	nop
 80127cc:	e006      	b.n	80127dc <tcp_write+0x660>
            goto memerr;
 80127ce:	bf00      	nop
 80127d0:	e004      	b.n	80127dc <tcp_write+0x660>
        goto memerr;
 80127d2:	bf00      	nop
 80127d4:	e002      	b.n	80127dc <tcp_write+0x660>
        goto memerr;
 80127d6:	bf00      	nop
 80127d8:	e000      	b.n	80127dc <tcp_write+0x660>
      goto memerr;
 80127da:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	8b5b      	ldrh	r3, [r3, #26]
 80127e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127e4:	b29a      	uxth	r2, r3
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80127ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d002      	beq.n	80127f6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80127f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80127f2:	f7fa fedd 	bl	800d5b0 <pbuf_free>
  }
  if (queue != NULL) {
 80127f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d002      	beq.n	8012802 <tcp_write+0x686>
    tcp_segs_free(queue);
 80127fc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80127fe:	f7fc fb6f 	bl	800eee0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012808:	2b00      	cmp	r3, #0
 801280a:	d00e      	beq.n	801282a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012810:	2b00      	cmp	r3, #0
 8012812:	d10a      	bne.n	801282a <tcp_write+0x6ae>
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012818:	2b00      	cmp	r3, #0
 801281a:	d106      	bne.n	801282a <tcp_write+0x6ae>
 801281c:	4b06      	ldr	r3, [pc, #24]	; (8012838 <tcp_write+0x6bc>)
 801281e:	f240 3227 	movw	r2, #807	; 0x327
 8012822:	4906      	ldr	r1, [pc, #24]	; (801283c <tcp_write+0x6c0>)
 8012824:	4806      	ldr	r0, [pc, #24]	; (8012840 <tcp_write+0x6c4>)
 8012826:	f008 fd9f 	bl	801b368 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801282a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801282e:	4618      	mov	r0, r3
 8012830:	375c      	adds	r7, #92	; 0x5c
 8012832:	46bd      	mov	sp, r7
 8012834:	bd90      	pop	{r4, r7, pc}
 8012836:	bf00      	nop
 8012838:	0801e5b4 	.word	0x0801e5b4
 801283c:	0801e928 	.word	0x0801e928
 8012840:	0801e608 	.word	0x0801e608

08012844 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012844:	b590      	push	{r4, r7, lr}
 8012846:	b08b      	sub	sp, #44	; 0x2c
 8012848:	af02      	add	r7, sp, #8
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	460b      	mov	r3, r1
 801284e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012850:	2300      	movs	r3, #0
 8012852:	61fb      	str	r3, [r7, #28]
 8012854:	2300      	movs	r3, #0
 8012856:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012858:	2300      	movs	r3, #0
 801285a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d106      	bne.n	8012870 <tcp_split_unsent_seg+0x2c>
 8012862:	4b95      	ldr	r3, [pc, #596]	; (8012ab8 <tcp_split_unsent_seg+0x274>)
 8012864:	f240 324b 	movw	r2, #843	; 0x34b
 8012868:	4994      	ldr	r1, [pc, #592]	; (8012abc <tcp_split_unsent_seg+0x278>)
 801286a:	4895      	ldr	r0, [pc, #596]	; (8012ac0 <tcp_split_unsent_seg+0x27c>)
 801286c:	f008 fd7c 	bl	801b368 <iprintf>

  useg = pcb->unsent;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012874:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d102      	bne.n	8012882 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801287c:	f04f 33ff 	mov.w	r3, #4294967295
 8012880:	e116      	b.n	8012ab0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012882:	887b      	ldrh	r3, [r7, #2]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d109      	bne.n	801289c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012888:	4b8b      	ldr	r3, [pc, #556]	; (8012ab8 <tcp_split_unsent_seg+0x274>)
 801288a:	f240 3253 	movw	r2, #851	; 0x353
 801288e:	498d      	ldr	r1, [pc, #564]	; (8012ac4 <tcp_split_unsent_seg+0x280>)
 8012890:	488b      	ldr	r0, [pc, #556]	; (8012ac0 <tcp_split_unsent_seg+0x27c>)
 8012892:	f008 fd69 	bl	801b368 <iprintf>
    return ERR_VAL;
 8012896:	f06f 0305 	mvn.w	r3, #5
 801289a:	e109      	b.n	8012ab0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	891b      	ldrh	r3, [r3, #8]
 80128a0:	887a      	ldrh	r2, [r7, #2]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d301      	bcc.n	80128aa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80128a6:	2300      	movs	r3, #0
 80128a8:	e102      	b.n	8012ab0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128ae:	887a      	ldrh	r2, [r7, #2]
 80128b0:	429a      	cmp	r2, r3
 80128b2:	d906      	bls.n	80128c2 <tcp_split_unsent_seg+0x7e>
 80128b4:	4b80      	ldr	r3, [pc, #512]	; (8012ab8 <tcp_split_unsent_seg+0x274>)
 80128b6:	f240 325b 	movw	r2, #859	; 0x35b
 80128ba:	4983      	ldr	r1, [pc, #524]	; (8012ac8 <tcp_split_unsent_seg+0x284>)
 80128bc:	4880      	ldr	r0, [pc, #512]	; (8012ac0 <tcp_split_unsent_seg+0x27c>)
 80128be:	f008 fd53 	bl	801b368 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	891b      	ldrh	r3, [r3, #8]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d106      	bne.n	80128d8 <tcp_split_unsent_seg+0x94>
 80128ca:	4b7b      	ldr	r3, [pc, #492]	; (8012ab8 <tcp_split_unsent_seg+0x274>)
 80128cc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80128d0:	497e      	ldr	r1, [pc, #504]	; (8012acc <tcp_split_unsent_seg+0x288>)
 80128d2:	487b      	ldr	r0, [pc, #492]	; (8012ac0 <tcp_split_unsent_seg+0x27c>)
 80128d4:	f008 fd48 	bl	801b368 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	7a9b      	ldrb	r3, [r3, #10]
 80128dc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80128de:	7bfb      	ldrb	r3, [r7, #15]
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	b2db      	uxtb	r3, r3
 80128e4:	f003 0304 	and.w	r3, r3, #4
 80128e8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	891a      	ldrh	r2, [r3, #8]
 80128ee:	887b      	ldrh	r3, [r7, #2]
 80128f0:	1ad3      	subs	r3, r2, r3
 80128f2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80128f4:	7bbb      	ldrb	r3, [r7, #14]
 80128f6:	b29a      	uxth	r2, r3
 80128f8:	89bb      	ldrh	r3, [r7, #12]
 80128fa:	4413      	add	r3, r2
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012902:	4619      	mov	r1, r3
 8012904:	2036      	movs	r0, #54	; 0x36
 8012906:	f7fa fb3d 	bl	800cf84 <pbuf_alloc>
 801290a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	2b00      	cmp	r3, #0
 8012910:	f000 80b7 	beq.w	8012a82 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	891a      	ldrh	r2, [r3, #8]
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	891b      	ldrh	r3, [r3, #8]
 801291e:	1ad3      	subs	r3, r2, r3
 8012920:	b29a      	uxth	r2, r3
 8012922:	887b      	ldrh	r3, [r7, #2]
 8012924:	4413      	add	r3, r2
 8012926:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	6858      	ldr	r0, [r3, #4]
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	685a      	ldr	r2, [r3, #4]
 8012930:	7bbb      	ldrb	r3, [r7, #14]
 8012932:	18d1      	adds	r1, r2, r3
 8012934:	897b      	ldrh	r3, [r7, #10]
 8012936:	89ba      	ldrh	r2, [r7, #12]
 8012938:	f7fb f840 	bl	800d9bc <pbuf_copy_partial>
 801293c:	4603      	mov	r3, r0
 801293e:	461a      	mov	r2, r3
 8012940:	89bb      	ldrh	r3, [r7, #12]
 8012942:	4293      	cmp	r3, r2
 8012944:	f040 809f 	bne.w	8012a86 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	899b      	ldrh	r3, [r3, #12]
 801294e:	b29b      	uxth	r3, r3
 8012950:	4618      	mov	r0, r3
 8012952:	f7f9 f9c5 	bl	800bce0 <lwip_htons>
 8012956:	4603      	mov	r3, r0
 8012958:	b2db      	uxtb	r3, r3
 801295a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801295e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012960:	2300      	movs	r3, #0
 8012962:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012964:	7efb      	ldrb	r3, [r7, #27]
 8012966:	f003 0308 	and.w	r3, r3, #8
 801296a:	2b00      	cmp	r3, #0
 801296c:	d007      	beq.n	801297e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801296e:	7efb      	ldrb	r3, [r7, #27]
 8012970:	f023 0308 	bic.w	r3, r3, #8
 8012974:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012976:	7ebb      	ldrb	r3, [r7, #26]
 8012978:	f043 0308 	orr.w	r3, r3, #8
 801297c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801297e:	7efb      	ldrb	r3, [r7, #27]
 8012980:	f003 0301 	and.w	r3, r3, #1
 8012984:	2b00      	cmp	r3, #0
 8012986:	d007      	beq.n	8012998 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012988:	7efb      	ldrb	r3, [r7, #27]
 801298a:	f023 0301 	bic.w	r3, r3, #1
 801298e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012990:	7ebb      	ldrb	r3, [r7, #26]
 8012992:	f043 0301 	orr.w	r3, r3, #1
 8012996:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	68db      	ldr	r3, [r3, #12]
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	4618      	mov	r0, r3
 80129a0:	f7f9 f9b3 	bl	800bd0a <lwip_htonl>
 80129a4:	4602      	mov	r2, r0
 80129a6:	887b      	ldrh	r3, [r7, #2]
 80129a8:	18d1      	adds	r1, r2, r3
 80129aa:	7eba      	ldrb	r2, [r7, #26]
 80129ac:	7bfb      	ldrb	r3, [r7, #15]
 80129ae:	9300      	str	r3, [sp, #0]
 80129b0:	460b      	mov	r3, r1
 80129b2:	6939      	ldr	r1, [r7, #16]
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f7ff fa4f 	bl	8011e58 <tcp_create_segment>
 80129ba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80129bc:	69fb      	ldr	r3, [r7, #28]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d063      	beq.n	8012a8a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7fa fe80 	bl	800d6cc <pbuf_clen>
 80129cc:	4603      	mov	r3, r0
 80129ce:	461a      	mov	r2, r3
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129d6:	1a9b      	subs	r3, r3, r2
 80129d8:	b29a      	uxth	r2, r3
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	6858      	ldr	r0, [r3, #4]
 80129e4:	697b      	ldr	r3, [r7, #20]
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	891a      	ldrh	r2, [r3, #8]
 80129ea:	89bb      	ldrh	r3, [r7, #12]
 80129ec:	1ad3      	subs	r3, r2, r3
 80129ee:	b29b      	uxth	r3, r3
 80129f0:	4619      	mov	r1, r3
 80129f2:	f7fa fc25 	bl	800d240 <pbuf_realloc>
  useg->len -= remainder;
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	891a      	ldrh	r2, [r3, #8]
 80129fa:	89bb      	ldrh	r3, [r7, #12]
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	b29a      	uxth	r2, r3
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	68db      	ldr	r3, [r3, #12]
 8012a08:	899b      	ldrh	r3, [r3, #12]
 8012a0a:	b29c      	uxth	r4, r3
 8012a0c:	7efb      	ldrb	r3, [r7, #27]
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7f9 f965 	bl	800bce0 <lwip_htons>
 8012a16:	4603      	mov	r3, r0
 8012a18:	461a      	mov	r2, r3
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	4322      	orrs	r2, r4
 8012a20:	b292      	uxth	r2, r2
 8012a22:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7fa fe4f 	bl	800d6cc <pbuf_clen>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	461a      	mov	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a38:	4413      	add	r3, r2
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012a42:	69fb      	ldr	r3, [r7, #28]
 8012a44:	685b      	ldr	r3, [r3, #4]
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7fa fe40 	bl	800d6cc <pbuf_clen>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	461a      	mov	r2, r3
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a56:	4413      	add	r3, r2
 8012a58:	b29a      	uxth	r2, r3
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	681a      	ldr	r2, [r3, #0]
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	69fa      	ldr	r2, [r7, #28]
 8012a6c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012a6e:	69fb      	ldr	r3, [r7, #28]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d103      	bne.n	8012a7e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	e016      	b.n	8012ab0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012a82:	bf00      	nop
 8012a84:	e002      	b.n	8012a8c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012a86:	bf00      	nop
 8012a88:	e000      	b.n	8012a8c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012a8a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012a8c:	69fb      	ldr	r3, [r7, #28]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d006      	beq.n	8012aa0 <tcp_split_unsent_seg+0x25c>
 8012a92:	4b09      	ldr	r3, [pc, #36]	; (8012ab8 <tcp_split_unsent_seg+0x274>)
 8012a94:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012a98:	490d      	ldr	r1, [pc, #52]	; (8012ad0 <tcp_split_unsent_seg+0x28c>)
 8012a9a:	4809      	ldr	r0, [pc, #36]	; (8012ac0 <tcp_split_unsent_seg+0x27c>)
 8012a9c:	f008 fc64 	bl	801b368 <iprintf>
  if (p != NULL) {
 8012aa0:	693b      	ldr	r3, [r7, #16]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d002      	beq.n	8012aac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012aa6:	6938      	ldr	r0, [r7, #16]
 8012aa8:	f7fa fd82 	bl	800d5b0 <pbuf_free>
  }

  return ERR_MEM;
 8012aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3724      	adds	r7, #36	; 0x24
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd90      	pop	{r4, r7, pc}
 8012ab8:	0801e5b4 	.word	0x0801e5b4
 8012abc:	0801e948 	.word	0x0801e948
 8012ac0:	0801e608 	.word	0x0801e608
 8012ac4:	0801e96c 	.word	0x0801e96c
 8012ac8:	0801e990 	.word	0x0801e990
 8012acc:	0801e9a0 	.word	0x0801e9a0
 8012ad0:	0801e9b0 	.word	0x0801e9b0

08012ad4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012ad4:	b590      	push	{r4, r7, lr}
 8012ad6:	b085      	sub	sp, #20
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d106      	bne.n	8012af0 <tcp_send_fin+0x1c>
 8012ae2:	4b21      	ldr	r3, [pc, #132]	; (8012b68 <tcp_send_fin+0x94>)
 8012ae4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012ae8:	4920      	ldr	r1, [pc, #128]	; (8012b6c <tcp_send_fin+0x98>)
 8012aea:	4821      	ldr	r0, [pc, #132]	; (8012b70 <tcp_send_fin+0x9c>)
 8012aec:	f008 fc3c 	bl	801b368 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d02e      	beq.n	8012b56 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012afc:	60fb      	str	r3, [r7, #12]
 8012afe:	e002      	b.n	8012b06 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d1f8      	bne.n	8012b00 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	68db      	ldr	r3, [r3, #12]
 8012b12:	899b      	ldrh	r3, [r3, #12]
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7f9 f8e2 	bl	800bce0 <lwip_htons>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	f003 0307 	and.w	r3, r3, #7
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d116      	bne.n	8012b56 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	68db      	ldr	r3, [r3, #12]
 8012b2c:	899b      	ldrh	r3, [r3, #12]
 8012b2e:	b29c      	uxth	r4, r3
 8012b30:	2001      	movs	r0, #1
 8012b32:	f7f9 f8d5 	bl	800bce0 <lwip_htons>
 8012b36:	4603      	mov	r3, r0
 8012b38:	461a      	mov	r2, r3
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	68db      	ldr	r3, [r3, #12]
 8012b3e:	4322      	orrs	r2, r4
 8012b40:	b292      	uxth	r2, r2
 8012b42:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	8b5b      	ldrh	r3, [r3, #26]
 8012b48:	f043 0320 	orr.w	r3, r3, #32
 8012b4c:	b29a      	uxth	r2, r3
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012b52:	2300      	movs	r3, #0
 8012b54:	e004      	b.n	8012b60 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012b56:	2101      	movs	r1, #1
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f000 f80b 	bl	8012b74 <tcp_enqueue_flags>
 8012b5e:	4603      	mov	r3, r0
}
 8012b60:	4618      	mov	r0, r3
 8012b62:	3714      	adds	r7, #20
 8012b64:	46bd      	mov	sp, r7
 8012b66:	bd90      	pop	{r4, r7, pc}
 8012b68:	0801e5b4 	.word	0x0801e5b4
 8012b6c:	0801e9bc 	.word	0x0801e9bc
 8012b70:	0801e608 	.word	0x0801e608

08012b74 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b08a      	sub	sp, #40	; 0x28
 8012b78:	af02      	add	r7, sp, #8
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	460b      	mov	r3, r1
 8012b7e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012b80:	2300      	movs	r3, #0
 8012b82:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012b84:	2300      	movs	r3, #0
 8012b86:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012b88:	78fb      	ldrb	r3, [r7, #3]
 8012b8a:	f003 0303 	and.w	r3, r3, #3
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d106      	bne.n	8012ba0 <tcp_enqueue_flags+0x2c>
 8012b92:	4b67      	ldr	r3, [pc, #412]	; (8012d30 <tcp_enqueue_flags+0x1bc>)
 8012b94:	f240 4211 	movw	r2, #1041	; 0x411
 8012b98:	4966      	ldr	r1, [pc, #408]	; (8012d34 <tcp_enqueue_flags+0x1c0>)
 8012b9a:	4867      	ldr	r0, [pc, #412]	; (8012d38 <tcp_enqueue_flags+0x1c4>)
 8012b9c:	f008 fbe4 	bl	801b368 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d106      	bne.n	8012bb4 <tcp_enqueue_flags+0x40>
 8012ba6:	4b62      	ldr	r3, [pc, #392]	; (8012d30 <tcp_enqueue_flags+0x1bc>)
 8012ba8:	f240 4213 	movw	r2, #1043	; 0x413
 8012bac:	4963      	ldr	r1, [pc, #396]	; (8012d3c <tcp_enqueue_flags+0x1c8>)
 8012bae:	4862      	ldr	r0, [pc, #392]	; (8012d38 <tcp_enqueue_flags+0x1c4>)
 8012bb0:	f008 fbda 	bl	801b368 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012bb4:	78fb      	ldrb	r3, [r7, #3]
 8012bb6:	f003 0302 	and.w	r3, r3, #2
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d001      	beq.n	8012bc2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012bc2:	7ffb      	ldrb	r3, [r7, #31]
 8012bc4:	009b      	lsls	r3, r3, #2
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	f003 0304 	and.w	r3, r3, #4
 8012bcc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012bce:	7dfb      	ldrb	r3, [r7, #23]
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012bd6:	4619      	mov	r1, r3
 8012bd8:	2036      	movs	r0, #54	; 0x36
 8012bda:	f7fa f9d3 	bl	800cf84 <pbuf_alloc>
 8012bde:	6138      	str	r0, [r7, #16]
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d109      	bne.n	8012bfa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	8b5b      	ldrh	r3, [r3, #26]
 8012bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8012bf8:	e095      	b.n	8012d26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	895a      	ldrh	r2, [r3, #10]
 8012bfe:	7dfb      	ldrb	r3, [r7, #23]
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d206      	bcs.n	8012c14 <tcp_enqueue_flags+0xa0>
 8012c06:	4b4a      	ldr	r3, [pc, #296]	; (8012d30 <tcp_enqueue_flags+0x1bc>)
 8012c08:	f240 4239 	movw	r2, #1081	; 0x439
 8012c0c:	494c      	ldr	r1, [pc, #304]	; (8012d40 <tcp_enqueue_flags+0x1cc>)
 8012c0e:	484a      	ldr	r0, [pc, #296]	; (8012d38 <tcp_enqueue_flags+0x1c4>)
 8012c10:	f008 fbaa 	bl	801b368 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012c18:	78fa      	ldrb	r2, [r7, #3]
 8012c1a:	7ffb      	ldrb	r3, [r7, #31]
 8012c1c:	9300      	str	r3, [sp, #0]
 8012c1e:	460b      	mov	r3, r1
 8012c20:	6939      	ldr	r1, [r7, #16]
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f7ff f918 	bl	8011e58 <tcp_create_segment>
 8012c28:	60f8      	str	r0, [r7, #12]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d109      	bne.n	8012c44 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	8b5b      	ldrh	r3, [r3, #26]
 8012c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c38:	b29a      	uxth	r2, r3
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c42:	e070      	b.n	8012d26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	68db      	ldr	r3, [r3, #12]
 8012c48:	f003 0303 	and.w	r3, r3, #3
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d006      	beq.n	8012c5e <tcp_enqueue_flags+0xea>
 8012c50:	4b37      	ldr	r3, [pc, #220]	; (8012d30 <tcp_enqueue_flags+0x1bc>)
 8012c52:	f240 4242 	movw	r2, #1090	; 0x442
 8012c56:	493b      	ldr	r1, [pc, #236]	; (8012d44 <tcp_enqueue_flags+0x1d0>)
 8012c58:	4837      	ldr	r0, [pc, #220]	; (8012d38 <tcp_enqueue_flags+0x1c4>)
 8012c5a:	f008 fb85 	bl	801b368 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	891b      	ldrh	r3, [r3, #8]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d006      	beq.n	8012c74 <tcp_enqueue_flags+0x100>
 8012c66:	4b32      	ldr	r3, [pc, #200]	; (8012d30 <tcp_enqueue_flags+0x1bc>)
 8012c68:	f240 4243 	movw	r2, #1091	; 0x443
 8012c6c:	4936      	ldr	r1, [pc, #216]	; (8012d48 <tcp_enqueue_flags+0x1d4>)
 8012c6e:	4832      	ldr	r0, [pc, #200]	; (8012d38 <tcp_enqueue_flags+0x1c4>)
 8012c70:	f008 fb7a 	bl	801b368 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d103      	bne.n	8012c84 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	68fa      	ldr	r2, [r7, #12]
 8012c80:	66da      	str	r2, [r3, #108]	; 0x6c
 8012c82:	e00d      	b.n	8012ca0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c88:	61bb      	str	r3, [r7, #24]
 8012c8a:	e002      	b.n	8012c92 <tcp_enqueue_flags+0x11e>
 8012c8c:	69bb      	ldr	r3, [r7, #24]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	61bb      	str	r3, [r7, #24]
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d1f8      	bne.n	8012c8c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012c9a:	69bb      	ldr	r3, [r7, #24]
 8012c9c:	68fa      	ldr	r2, [r7, #12]
 8012c9e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012ca8:	78fb      	ldrb	r3, [r7, #3]
 8012caa:	f003 0302 	and.w	r3, r3, #2
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d104      	bne.n	8012cbc <tcp_enqueue_flags+0x148>
 8012cb2:	78fb      	ldrb	r3, [r7, #3]
 8012cb4:	f003 0301 	and.w	r3, r3, #1
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d004      	beq.n	8012cc6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012cc0:	1c5a      	adds	r2, r3, #1
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012cc6:	78fb      	ldrb	r3, [r7, #3]
 8012cc8:	f003 0301 	and.w	r3, r3, #1
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d006      	beq.n	8012cde <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	8b5b      	ldrh	r3, [r3, #26]
 8012cd4:	f043 0320 	orr.w	r3, r3, #32
 8012cd8:	b29a      	uxth	r2, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7fa fcf2 	bl	800d6cc <pbuf_clen>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	461a      	mov	r2, r3
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012cf2:	4413      	add	r3, r2
 8012cf4:	b29a      	uxth	r2, r3
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d00e      	beq.n	8012d24 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d10a      	bne.n	8012d24 <tcp_enqueue_flags+0x1b0>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d106      	bne.n	8012d24 <tcp_enqueue_flags+0x1b0>
 8012d16:	4b06      	ldr	r3, [pc, #24]	; (8012d30 <tcp_enqueue_flags+0x1bc>)
 8012d18:	f240 4265 	movw	r2, #1125	; 0x465
 8012d1c:	490b      	ldr	r1, [pc, #44]	; (8012d4c <tcp_enqueue_flags+0x1d8>)
 8012d1e:	4806      	ldr	r0, [pc, #24]	; (8012d38 <tcp_enqueue_flags+0x1c4>)
 8012d20:	f008 fb22 	bl	801b368 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012d24:	2300      	movs	r3, #0
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3720      	adds	r7, #32
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	0801e5b4 	.word	0x0801e5b4
 8012d34:	0801e9d8 	.word	0x0801e9d8
 8012d38:	0801e608 	.word	0x0801e608
 8012d3c:	0801ea30 	.word	0x0801ea30
 8012d40:	0801ea50 	.word	0x0801ea50
 8012d44:	0801ea8c 	.word	0x0801ea8c
 8012d48:	0801eaa4 	.word	0x0801eaa4
 8012d4c:	0801ead0 	.word	0x0801ead0

08012d50 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012d50:	b5b0      	push	{r4, r5, r7, lr}
 8012d52:	b08a      	sub	sp, #40	; 0x28
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d106      	bne.n	8012d6c <tcp_output+0x1c>
 8012d5e:	4b9e      	ldr	r3, [pc, #632]	; (8012fd8 <tcp_output+0x288>)
 8012d60:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012d64:	499d      	ldr	r1, [pc, #628]	; (8012fdc <tcp_output+0x28c>)
 8012d66:	489e      	ldr	r0, [pc, #632]	; (8012fe0 <tcp_output+0x290>)
 8012d68:	f008 fafe 	bl	801b368 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	7d1b      	ldrb	r3, [r3, #20]
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d106      	bne.n	8012d82 <tcp_output+0x32>
 8012d74:	4b98      	ldr	r3, [pc, #608]	; (8012fd8 <tcp_output+0x288>)
 8012d76:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012d7a:	499a      	ldr	r1, [pc, #616]	; (8012fe4 <tcp_output+0x294>)
 8012d7c:	4898      	ldr	r0, [pc, #608]	; (8012fe0 <tcp_output+0x290>)
 8012d7e:	f008 faf3 	bl	801b368 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012d82:	4b99      	ldr	r3, [pc, #612]	; (8012fe8 <tcp_output+0x298>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	429a      	cmp	r2, r3
 8012d8a:	d101      	bne.n	8012d90 <tcp_output+0x40>
    return ERR_OK;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	e1ce      	b.n	801312e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	bf28      	it	cs
 8012da0:	4613      	movcs	r3, r2
 8012da2:	b29b      	uxth	r3, r3
 8012da4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012daa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d10b      	bne.n	8012dca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	8b5b      	ldrh	r3, [r3, #26]
 8012db6:	f003 0302 	and.w	r3, r3, #2
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	f000 81aa 	beq.w	8013114 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f000 fdcb 	bl	801395c <tcp_send_empty_ack>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	e1b1      	b.n	801312e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012dca:	6879      	ldr	r1, [r7, #4]
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	3304      	adds	r3, #4
 8012dd0:	461a      	mov	r2, r3
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f7ff f824 	bl	8011e20 <tcp_route>
 8012dd8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d102      	bne.n	8012de6 <tcp_output+0x96>
    return ERR_RTE;
 8012de0:	f06f 0303 	mvn.w	r3, #3
 8012de4:	e1a3      	b.n	801312e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d003      	beq.n	8012df4 <tcp_output+0xa4>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d111      	bne.n	8012e18 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d002      	beq.n	8012e00 <tcp_output+0xb0>
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	3304      	adds	r3, #4
 8012dfe:	e000      	b.n	8012e02 <tcp_output+0xb2>
 8012e00:	2300      	movs	r3, #0
 8012e02:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012e04:	693b      	ldr	r3, [r7, #16]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d102      	bne.n	8012e10 <tcp_output+0xc0>
      return ERR_RTE;
 8012e0a:	f06f 0303 	mvn.w	r3, #3
 8012e0e:	e18e      	b.n	801312e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	681a      	ldr	r2, [r3, #0]
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7f8 ff73 	bl	800bd0a <lwip_htonl>
 8012e24:	4602      	mov	r2, r0
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e2a:	1ad3      	subs	r3, r2, r3
 8012e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e2e:	8912      	ldrh	r2, [r2, #8]
 8012e30:	4413      	add	r3, r2
 8012e32:	69ba      	ldr	r2, [r7, #24]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d227      	bcs.n	8012e88 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012e3e:	461a      	mov	r2, r3
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	4293      	cmp	r3, r2
 8012e44:	d114      	bne.n	8012e70 <tcp_output+0x120>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d110      	bne.n	8012e70 <tcp_output+0x120>
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d10b      	bne.n	8012e70 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2201      	movs	r2, #1
 8012e64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	8b5b      	ldrh	r3, [r3, #26]
 8012e74:	f003 0302 	and.w	r3, r3, #2
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	f000 814d 	beq.w	8013118 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f000 fd6c 	bl	801395c <tcp_send_empty_ack>
 8012e84:	4603      	mov	r3, r0
 8012e86:	e152      	b.n	801312e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e94:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012e96:	6a3b      	ldr	r3, [r7, #32]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	f000 811c 	beq.w	80130d6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012e9e:	e002      	b.n	8012ea6 <tcp_output+0x156>
 8012ea0:	6a3b      	ldr	r3, [r7, #32]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	623b      	str	r3, [r7, #32]
 8012ea6:	6a3b      	ldr	r3, [r7, #32]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d1f8      	bne.n	8012ea0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012eae:	e112      	b.n	80130d6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb2:	68db      	ldr	r3, [r3, #12]
 8012eb4:	899b      	ldrh	r3, [r3, #12]
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7f8 ff11 	bl	800bce0 <lwip_htons>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	b2db      	uxtb	r3, r3
 8012ec2:	f003 0304 	and.w	r3, r3, #4
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d006      	beq.n	8012ed8 <tcp_output+0x188>
 8012eca:	4b43      	ldr	r3, [pc, #268]	; (8012fd8 <tcp_output+0x288>)
 8012ecc:	f240 5236 	movw	r2, #1334	; 0x536
 8012ed0:	4946      	ldr	r1, [pc, #280]	; (8012fec <tcp_output+0x29c>)
 8012ed2:	4843      	ldr	r0, [pc, #268]	; (8012fe0 <tcp_output+0x290>)
 8012ed4:	f008 fa48 	bl	801b368 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d01f      	beq.n	8012f20 <tcp_output+0x1d0>
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	8b5b      	ldrh	r3, [r3, #26]
 8012ee4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d119      	bne.n	8012f20 <tcp_output+0x1d0>
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d00b      	beq.n	8012f0c <tcp_output+0x1bc>
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d110      	bne.n	8012f20 <tcp_output+0x1d0>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f02:	891a      	ldrh	r2, [r3, #8]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f08:	429a      	cmp	r2, r3
 8012f0a:	d209      	bcs.n	8012f20 <tcp_output+0x1d0>
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d004      	beq.n	8012f20 <tcp_output+0x1d0>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f1c:	2b08      	cmp	r3, #8
 8012f1e:	d901      	bls.n	8012f24 <tcp_output+0x1d4>
 8012f20:	2301      	movs	r3, #1
 8012f22:	e000      	b.n	8012f26 <tcp_output+0x1d6>
 8012f24:	2300      	movs	r3, #0
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d106      	bne.n	8012f38 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	8b5b      	ldrh	r3, [r3, #26]
 8012f2e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	f000 80e4 	beq.w	8013100 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	7d1b      	ldrb	r3, [r3, #20]
 8012f3c:	2b02      	cmp	r3, #2
 8012f3e:	d00d      	beq.n	8012f5c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f42:	68db      	ldr	r3, [r3, #12]
 8012f44:	899b      	ldrh	r3, [r3, #12]
 8012f46:	b29c      	uxth	r4, r3
 8012f48:	2010      	movs	r0, #16
 8012f4a:	f7f8 fec9 	bl	800bce0 <lwip_htons>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	461a      	mov	r2, r3
 8012f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f54:	68db      	ldr	r3, [r3, #12]
 8012f56:	4322      	orrs	r2, r4
 8012f58:	b292      	uxth	r2, r2
 8012f5a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012f5c:	697a      	ldr	r2, [r7, #20]
 8012f5e:	6879      	ldr	r1, [r7, #4]
 8012f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f62:	f000 f909 	bl	8013178 <tcp_output_segment>
 8012f66:	4603      	mov	r3, r0
 8012f68:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d009      	beq.n	8012f86 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	8b5b      	ldrh	r3, [r3, #26]
 8012f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f7a:	b29a      	uxth	r2, r3
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	835a      	strh	r2, [r3, #26]
      return err;
 8012f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f84:	e0d3      	b.n	801312e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	7d1b      	ldrb	r3, [r3, #20]
 8012f92:	2b02      	cmp	r3, #2
 8012f94:	d006      	beq.n	8012fa4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	8b5b      	ldrh	r3, [r3, #26]
 8012f9a:	f023 0303 	bic.w	r3, r3, #3
 8012f9e:	b29a      	uxth	r2, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7f8 fead 	bl	800bd0a <lwip_htonl>
 8012fb0:	4604      	mov	r4, r0
 8012fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb4:	891b      	ldrh	r3, [r3, #8]
 8012fb6:	461d      	mov	r5, r3
 8012fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fba:	68db      	ldr	r3, [r3, #12]
 8012fbc:	899b      	ldrh	r3, [r3, #12]
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7f8 fe8d 	bl	800bce0 <lwip_htons>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	b2db      	uxtb	r3, r3
 8012fca:	f003 0303 	and.w	r3, r3, #3
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d00e      	beq.n	8012ff0 <tcp_output+0x2a0>
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	e00d      	b.n	8012ff2 <tcp_output+0x2a2>
 8012fd6:	bf00      	nop
 8012fd8:	0801e5b4 	.word	0x0801e5b4
 8012fdc:	0801eaf8 	.word	0x0801eaf8
 8012fe0:	0801e608 	.word	0x0801e608
 8012fe4:	0801eb10 	.word	0x0801eb10
 8012fe8:	20019068 	.word	0x20019068
 8012fec:	0801eb38 	.word	0x0801eb38
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	442b      	add	r3, r5
 8012ff4:	4423      	add	r3, r4
 8012ff6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	1ad3      	subs	r3, r2, r3
 8013000:	2b00      	cmp	r3, #0
 8013002:	da02      	bge.n	801300a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	68ba      	ldr	r2, [r7, #8]
 8013008:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801300c:	891b      	ldrh	r3, [r3, #8]
 801300e:	461c      	mov	r4, r3
 8013010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013012:	68db      	ldr	r3, [r3, #12]
 8013014:	899b      	ldrh	r3, [r3, #12]
 8013016:	b29b      	uxth	r3, r3
 8013018:	4618      	mov	r0, r3
 801301a:	f7f8 fe61 	bl	800bce0 <lwip_htons>
 801301e:	4603      	mov	r3, r0
 8013020:	b2db      	uxtb	r3, r3
 8013022:	f003 0303 	and.w	r3, r3, #3
 8013026:	2b00      	cmp	r3, #0
 8013028:	d001      	beq.n	801302e <tcp_output+0x2de>
 801302a:	2301      	movs	r3, #1
 801302c:	e000      	b.n	8013030 <tcp_output+0x2e0>
 801302e:	2300      	movs	r3, #0
 8013030:	4423      	add	r3, r4
 8013032:	2b00      	cmp	r3, #0
 8013034:	d049      	beq.n	80130ca <tcp_output+0x37a>
      seg->next = NULL;
 8013036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013038:	2200      	movs	r2, #0
 801303a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013040:	2b00      	cmp	r3, #0
 8013042:	d105      	bne.n	8013050 <tcp_output+0x300>
        pcb->unacked = seg;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013048:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801304c:	623b      	str	r3, [r7, #32]
 801304e:	e03f      	b.n	80130d0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013052:	68db      	ldr	r3, [r3, #12]
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	4618      	mov	r0, r3
 8013058:	f7f8 fe57 	bl	800bd0a <lwip_htonl>
 801305c:	4604      	mov	r4, r0
 801305e:	6a3b      	ldr	r3, [r7, #32]
 8013060:	68db      	ldr	r3, [r3, #12]
 8013062:	685b      	ldr	r3, [r3, #4]
 8013064:	4618      	mov	r0, r3
 8013066:	f7f8 fe50 	bl	800bd0a <lwip_htonl>
 801306a:	4603      	mov	r3, r0
 801306c:	1ae3      	subs	r3, r4, r3
 801306e:	2b00      	cmp	r3, #0
 8013070:	da24      	bge.n	80130bc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	3370      	adds	r3, #112	; 0x70
 8013076:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013078:	e002      	b.n	8013080 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d011      	beq.n	80130ac <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013088:	69fb      	ldr	r3, [r7, #28]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	68db      	ldr	r3, [r3, #12]
 801308e:	685b      	ldr	r3, [r3, #4]
 8013090:	4618      	mov	r0, r3
 8013092:	f7f8 fe3a 	bl	800bd0a <lwip_htonl>
 8013096:	4604      	mov	r4, r0
 8013098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309a:	68db      	ldr	r3, [r3, #12]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	4618      	mov	r0, r3
 80130a0:	f7f8 fe33 	bl	800bd0a <lwip_htonl>
 80130a4:	4603      	mov	r3, r0
 80130a6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	dbe6      	blt.n	801307a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	681a      	ldr	r2, [r3, #0]
 80130b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80130b4:	69fb      	ldr	r3, [r7, #28]
 80130b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130b8:	601a      	str	r2, [r3, #0]
 80130ba:	e009      	b.n	80130d0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80130bc:	6a3b      	ldr	r3, [r7, #32]
 80130be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130c0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80130c2:	6a3b      	ldr	r3, [r7, #32]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	623b      	str	r3, [r7, #32]
 80130c8:	e002      	b.n	80130d0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80130ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130cc:	f7fb ff1d 	bl	800ef0a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80130d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d012      	beq.n	8013102 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80130dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7f8 fe11 	bl	800bd0a <lwip_htonl>
 80130e8:	4602      	mov	r2, r0
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130ee:	1ad3      	subs	r3, r2, r3
 80130f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130f2:	8912      	ldrh	r2, [r2, #8]
 80130f4:	4413      	add	r3, r2
  while (seg != NULL &&
 80130f6:	69ba      	ldr	r2, [r7, #24]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	f4bf aed9 	bcs.w	8012eb0 <tcp_output+0x160>
 80130fe:	e000      	b.n	8013102 <tcp_output+0x3b2>
      break;
 8013100:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013106:	2b00      	cmp	r3, #0
 8013108:	d108      	bne.n	801311c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2200      	movs	r2, #0
 801310e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013112:	e004      	b.n	801311e <tcp_output+0x3ce>
    goto output_done;
 8013114:	bf00      	nop
 8013116:	e002      	b.n	801311e <tcp_output+0x3ce>
    goto output_done;
 8013118:	bf00      	nop
 801311a:	e000      	b.n	801311e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801311c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	8b5b      	ldrh	r3, [r3, #26]
 8013122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013126:	b29a      	uxth	r2, r3
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801312c:	2300      	movs	r3, #0
}
 801312e:	4618      	mov	r0, r3
 8013130:	3728      	adds	r7, #40	; 0x28
 8013132:	46bd      	mov	sp, r7
 8013134:	bdb0      	pop	{r4, r5, r7, pc}
 8013136:	bf00      	nop

08013138 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b082      	sub	sp, #8
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d106      	bne.n	8013154 <tcp_output_segment_busy+0x1c>
 8013146:	4b09      	ldr	r3, [pc, #36]	; (801316c <tcp_output_segment_busy+0x34>)
 8013148:	f240 529a 	movw	r2, #1434	; 0x59a
 801314c:	4908      	ldr	r1, [pc, #32]	; (8013170 <tcp_output_segment_busy+0x38>)
 801314e:	4809      	ldr	r0, [pc, #36]	; (8013174 <tcp_output_segment_busy+0x3c>)
 8013150:	f008 f90a 	bl	801b368 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	685b      	ldr	r3, [r3, #4]
 8013158:	7b9b      	ldrb	r3, [r3, #14]
 801315a:	2b01      	cmp	r3, #1
 801315c:	d001      	beq.n	8013162 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801315e:	2301      	movs	r3, #1
 8013160:	e000      	b.n	8013164 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013162:	2300      	movs	r3, #0
}
 8013164:	4618      	mov	r0, r3
 8013166:	3708      	adds	r7, #8
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	0801e5b4 	.word	0x0801e5b4
 8013170:	0801eb50 	.word	0x0801eb50
 8013174:	0801e608 	.word	0x0801e608

08013178 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013178:	b5b0      	push	{r4, r5, r7, lr}
 801317a:	b08c      	sub	sp, #48	; 0x30
 801317c:	af04      	add	r7, sp, #16
 801317e:	60f8      	str	r0, [r7, #12]
 8013180:	60b9      	str	r1, [r7, #8]
 8013182:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d106      	bne.n	8013198 <tcp_output_segment+0x20>
 801318a:	4b63      	ldr	r3, [pc, #396]	; (8013318 <tcp_output_segment+0x1a0>)
 801318c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013190:	4962      	ldr	r1, [pc, #392]	; (801331c <tcp_output_segment+0x1a4>)
 8013192:	4863      	ldr	r0, [pc, #396]	; (8013320 <tcp_output_segment+0x1a8>)
 8013194:	f008 f8e8 	bl	801b368 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d106      	bne.n	80131ac <tcp_output_segment+0x34>
 801319e:	4b5e      	ldr	r3, [pc, #376]	; (8013318 <tcp_output_segment+0x1a0>)
 80131a0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80131a4:	495f      	ldr	r1, [pc, #380]	; (8013324 <tcp_output_segment+0x1ac>)
 80131a6:	485e      	ldr	r0, [pc, #376]	; (8013320 <tcp_output_segment+0x1a8>)
 80131a8:	f008 f8de 	bl	801b368 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d106      	bne.n	80131c0 <tcp_output_segment+0x48>
 80131b2:	4b59      	ldr	r3, [pc, #356]	; (8013318 <tcp_output_segment+0x1a0>)
 80131b4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80131b8:	495b      	ldr	r1, [pc, #364]	; (8013328 <tcp_output_segment+0x1b0>)
 80131ba:	4859      	ldr	r0, [pc, #356]	; (8013320 <tcp_output_segment+0x1a8>)
 80131bc:	f008 f8d4 	bl	801b368 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80131c0:	68f8      	ldr	r0, [r7, #12]
 80131c2:	f7ff ffb9 	bl	8013138 <tcp_output_segment_busy>
 80131c6:	4603      	mov	r3, r0
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d001      	beq.n	80131d0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80131cc:	2300      	movs	r3, #0
 80131ce:	e09f      	b.n	8013310 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	68dc      	ldr	r4, [r3, #12]
 80131d8:	4610      	mov	r0, r2
 80131da:	f7f8 fd96 	bl	800bd0a <lwip_htonl>
 80131de:	4603      	mov	r3, r0
 80131e0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	68dc      	ldr	r4, [r3, #12]
 80131ea:	4610      	mov	r0, r2
 80131ec:	f7f8 fd78 	bl	800bce0 <lwip_htons>
 80131f0:	4603      	mov	r3, r0
 80131f2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f8:	68ba      	ldr	r2, [r7, #8]
 80131fa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80131fc:	441a      	add	r2, r3
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	68db      	ldr	r3, [r3, #12]
 8013206:	3314      	adds	r3, #20
 8013208:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	7a9b      	ldrb	r3, [r3, #10]
 801320e:	f003 0301 	and.w	r3, r3, #1
 8013212:	2b00      	cmp	r3, #0
 8013214:	d015      	beq.n	8013242 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	3304      	adds	r3, #4
 801321a:	461a      	mov	r2, r3
 801321c:	6879      	ldr	r1, [r7, #4]
 801321e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013222:	f7fc fa37 	bl	800f694 <tcp_eff_send_mss_netif>
 8013226:	4603      	mov	r3, r0
 8013228:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801322a:	8b7b      	ldrh	r3, [r7, #26]
 801322c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013230:	4618      	mov	r0, r3
 8013232:	f7f8 fd6a 	bl	800bd0a <lwip_htonl>
 8013236:	4602      	mov	r2, r0
 8013238:	69fb      	ldr	r3, [r7, #28]
 801323a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	3304      	adds	r3, #4
 8013240:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013248:	2b00      	cmp	r3, #0
 801324a:	da02      	bge.n	8013252 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	2200      	movs	r2, #0
 8013250:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013256:	2b00      	cmp	r3, #0
 8013258:	d10c      	bne.n	8013274 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801325a:	4b34      	ldr	r3, [pc, #208]	; (801332c <tcp_output_segment+0x1b4>)
 801325c:	681a      	ldr	r2, [r3, #0]
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	68db      	ldr	r3, [r3, #12]
 8013266:	685b      	ldr	r3, [r3, #4]
 8013268:	4618      	mov	r0, r3
 801326a:	f7f8 fd4e 	bl	800bd0a <lwip_htonl>
 801326e:	4602      	mov	r2, r0
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	68da      	ldr	r2, [r3, #12]
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	1ad3      	subs	r3, r2, r3
 8013280:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	685b      	ldr	r3, [r3, #4]
 8013286:	8959      	ldrh	r1, [r3, #10]
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	685b      	ldr	r3, [r3, #4]
 801328c:	8b3a      	ldrh	r2, [r7, #24]
 801328e:	1a8a      	subs	r2, r1, r2
 8013290:	b292      	uxth	r2, r2
 8013292:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	8919      	ldrh	r1, [r3, #8]
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	685b      	ldr	r3, [r3, #4]
 801329e:	8b3a      	ldrh	r2, [r7, #24]
 80132a0:	1a8a      	subs	r2, r1, r2
 80132a2:	b292      	uxth	r2, r2
 80132a4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	685b      	ldr	r3, [r3, #4]
 80132aa:	68fa      	ldr	r2, [r7, #12]
 80132ac:	68d2      	ldr	r2, [r2, #12]
 80132ae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	68db      	ldr	r3, [r3, #12]
 80132b4:	2200      	movs	r2, #0
 80132b6:	741a      	strb	r2, [r3, #16]
 80132b8:	2200      	movs	r2, #0
 80132ba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	68db      	ldr	r3, [r3, #12]
 80132c0:	f103 0214 	add.w	r2, r3, #20
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	7a9b      	ldrb	r3, [r3, #10]
 80132c8:	009b      	lsls	r3, r3, #2
 80132ca:	f003 0304 	and.w	r3, r3, #4
 80132ce:	4413      	add	r3, r2
 80132d0:	69fa      	ldr	r2, [r7, #28]
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d006      	beq.n	80132e4 <tcp_output_segment+0x16c>
 80132d6:	4b10      	ldr	r3, [pc, #64]	; (8013318 <tcp_output_segment+0x1a0>)
 80132d8:	f240 621c 	movw	r2, #1564	; 0x61c
 80132dc:	4914      	ldr	r1, [pc, #80]	; (8013330 <tcp_output_segment+0x1b8>)
 80132de:	4810      	ldr	r0, [pc, #64]	; (8013320 <tcp_output_segment+0x1a8>)
 80132e0:	f008 f842 	bl	801b368 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	6858      	ldr	r0, [r3, #4]
 80132e8:	68b9      	ldr	r1, [r7, #8]
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	1d1c      	adds	r4, r3, #4
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	7add      	ldrb	r5, [r3, #11]
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	7a9b      	ldrb	r3, [r3, #10]
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	9202      	str	r2, [sp, #8]
 80132fa:	2206      	movs	r2, #6
 80132fc:	9201      	str	r2, [sp, #4]
 80132fe:	9300      	str	r3, [sp, #0]
 8013300:	462b      	mov	r3, r5
 8013302:	4622      	mov	r2, r4
 8013304:	f004 fcd2 	bl	8017cac <ip4_output_if>
 8013308:	4603      	mov	r3, r0
 801330a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801330c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013310:	4618      	mov	r0, r3
 8013312:	3720      	adds	r7, #32
 8013314:	46bd      	mov	sp, r7
 8013316:	bdb0      	pop	{r4, r5, r7, pc}
 8013318:	0801e5b4 	.word	0x0801e5b4
 801331c:	0801eb78 	.word	0x0801eb78
 8013320:	0801e608 	.word	0x0801e608
 8013324:	0801eb98 	.word	0x0801eb98
 8013328:	0801ebb8 	.word	0x0801ebb8
 801332c:	20019058 	.word	0x20019058
 8013330:	0801ebdc 	.word	0x0801ebdc

08013334 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013334:	b5b0      	push	{r4, r5, r7, lr}
 8013336:	b084      	sub	sp, #16
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d106      	bne.n	8013350 <tcp_rexmit_rto_prepare+0x1c>
 8013342:	4b31      	ldr	r3, [pc, #196]	; (8013408 <tcp_rexmit_rto_prepare+0xd4>)
 8013344:	f240 6263 	movw	r2, #1635	; 0x663
 8013348:	4930      	ldr	r1, [pc, #192]	; (801340c <tcp_rexmit_rto_prepare+0xd8>)
 801334a:	4831      	ldr	r0, [pc, #196]	; (8013410 <tcp_rexmit_rto_prepare+0xdc>)
 801334c:	f008 f80c 	bl	801b368 <iprintf>

  if (pcb->unacked == NULL) {
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013354:	2b00      	cmp	r3, #0
 8013356:	d102      	bne.n	801335e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013358:	f06f 0305 	mvn.w	r3, #5
 801335c:	e050      	b.n	8013400 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013362:	60fb      	str	r3, [r7, #12]
 8013364:	e00b      	b.n	801337e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013366:	68f8      	ldr	r0, [r7, #12]
 8013368:	f7ff fee6 	bl	8013138 <tcp_output_segment_busy>
 801336c:	4603      	mov	r3, r0
 801336e:	2b00      	cmp	r3, #0
 8013370:	d002      	beq.n	8013378 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013372:	f06f 0305 	mvn.w	r3, #5
 8013376:	e043      	b.n	8013400 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	60fb      	str	r3, [r7, #12]
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d1ef      	bne.n	8013366 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013386:	68f8      	ldr	r0, [r7, #12]
 8013388:	f7ff fed6 	bl	8013138 <tcp_output_segment_busy>
 801338c:	4603      	mov	r3, r0
 801338e:	2b00      	cmp	r3, #0
 8013390:	d002      	beq.n	8013398 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013392:	f06f 0305 	mvn.w	r3, #5
 8013396:	e033      	b.n	8013400 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2200      	movs	r2, #0
 80133ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	8b5b      	ldrh	r3, [r3, #26]
 80133b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	4618      	mov	r0, r3
 80133c4:	f7f8 fca1 	bl	800bd0a <lwip_htonl>
 80133c8:	4604      	mov	r4, r0
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	891b      	ldrh	r3, [r3, #8]
 80133ce:	461d      	mov	r5, r3
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	899b      	ldrh	r3, [r3, #12]
 80133d6:	b29b      	uxth	r3, r3
 80133d8:	4618      	mov	r0, r3
 80133da:	f7f8 fc81 	bl	800bce0 <lwip_htons>
 80133de:	4603      	mov	r3, r0
 80133e0:	b2db      	uxtb	r3, r3
 80133e2:	f003 0303 	and.w	r3, r3, #3
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d001      	beq.n	80133ee <tcp_rexmit_rto_prepare+0xba>
 80133ea:	2301      	movs	r3, #1
 80133ec:	e000      	b.n	80133f0 <tcp_rexmit_rto_prepare+0xbc>
 80133ee:	2300      	movs	r3, #0
 80133f0:	442b      	add	r3, r5
 80133f2:	18e2      	adds	r2, r4, r3
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2200      	movs	r2, #0
 80133fc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80133fe:	2300      	movs	r3, #0
}
 8013400:	4618      	mov	r0, r3
 8013402:	3710      	adds	r7, #16
 8013404:	46bd      	mov	sp, r7
 8013406:	bdb0      	pop	{r4, r5, r7, pc}
 8013408:	0801e5b4 	.word	0x0801e5b4
 801340c:	0801ebf0 	.word	0x0801ebf0
 8013410:	0801e608 	.word	0x0801e608

08013414 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b082      	sub	sp, #8
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d106      	bne.n	8013430 <tcp_rexmit_rto_commit+0x1c>
 8013422:	4b0d      	ldr	r3, [pc, #52]	; (8013458 <tcp_rexmit_rto_commit+0x44>)
 8013424:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013428:	490c      	ldr	r1, [pc, #48]	; (801345c <tcp_rexmit_rto_commit+0x48>)
 801342a:	480d      	ldr	r0, [pc, #52]	; (8013460 <tcp_rexmit_rto_commit+0x4c>)
 801342c:	f007 ff9c 	bl	801b368 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013436:	2bff      	cmp	r3, #255	; 0xff
 8013438:	d007      	beq.n	801344a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013440:	3301      	adds	r3, #1
 8013442:	b2da      	uxtb	r2, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f7ff fc80 	bl	8012d50 <tcp_output>
}
 8013450:	bf00      	nop
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}
 8013458:	0801e5b4 	.word	0x0801e5b4
 801345c:	0801ec14 	.word	0x0801ec14
 8013460:	0801e608 	.word	0x0801e608

08013464 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d106      	bne.n	8013480 <tcp_rexmit_rto+0x1c>
 8013472:	4b0a      	ldr	r3, [pc, #40]	; (801349c <tcp_rexmit_rto+0x38>)
 8013474:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013478:	4909      	ldr	r1, [pc, #36]	; (80134a0 <tcp_rexmit_rto+0x3c>)
 801347a:	480a      	ldr	r0, [pc, #40]	; (80134a4 <tcp_rexmit_rto+0x40>)
 801347c:	f007 ff74 	bl	801b368 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f7ff ff57 	bl	8013334 <tcp_rexmit_rto_prepare>
 8013486:	4603      	mov	r3, r0
 8013488:	2b00      	cmp	r3, #0
 801348a:	d102      	bne.n	8013492 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f7ff ffc1 	bl	8013414 <tcp_rexmit_rto_commit>
  }
}
 8013492:	bf00      	nop
 8013494:	3708      	adds	r7, #8
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
 801349a:	bf00      	nop
 801349c:	0801e5b4 	.word	0x0801e5b4
 80134a0:	0801ec38 	.word	0x0801ec38
 80134a4:	0801e608 	.word	0x0801e608

080134a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80134a8:	b590      	push	{r4, r7, lr}
 80134aa:	b085      	sub	sp, #20
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d106      	bne.n	80134c4 <tcp_rexmit+0x1c>
 80134b6:	4b2f      	ldr	r3, [pc, #188]	; (8013574 <tcp_rexmit+0xcc>)
 80134b8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80134bc:	492e      	ldr	r1, [pc, #184]	; (8013578 <tcp_rexmit+0xd0>)
 80134be:	482f      	ldr	r0, [pc, #188]	; (801357c <tcp_rexmit+0xd4>)
 80134c0:	f007 ff52 	bl	801b368 <iprintf>

  if (pcb->unacked == NULL) {
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d102      	bne.n	80134d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80134cc:	f06f 0305 	mvn.w	r3, #5
 80134d0:	e04c      	b.n	801356c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80134d8:	68b8      	ldr	r0, [r7, #8]
 80134da:	f7ff fe2d 	bl	8013138 <tcp_output_segment_busy>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d002      	beq.n	80134ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80134e4:	f06f 0305 	mvn.w	r3, #5
 80134e8:	e040      	b.n	801356c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	336c      	adds	r3, #108	; 0x6c
 80134f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80134f8:	e002      	b.n	8013500 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d011      	beq.n	801352c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	4618      	mov	r0, r3
 8013512:	f7f8 fbfa 	bl	800bd0a <lwip_htonl>
 8013516:	4604      	mov	r4, r0
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	68db      	ldr	r3, [r3, #12]
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	4618      	mov	r0, r3
 8013520:	f7f8 fbf3 	bl	800bd0a <lwip_htonl>
 8013524:	4603      	mov	r3, r0
 8013526:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013528:	2b00      	cmp	r3, #0
 801352a:	dbe6      	blt.n	80134fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	681a      	ldr	r2, [r3, #0]
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d103      	bne.n	801354a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	2200      	movs	r2, #0
 8013546:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013550:	2bff      	cmp	r3, #255	; 0xff
 8013552:	d007      	beq.n	8013564 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801355a:	3301      	adds	r3, #1
 801355c:	b2da      	uxtb	r2, r3
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2200      	movs	r2, #0
 8013568:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801356a:	2300      	movs	r3, #0
}
 801356c:	4618      	mov	r0, r3
 801356e:	3714      	adds	r7, #20
 8013570:	46bd      	mov	sp, r7
 8013572:	bd90      	pop	{r4, r7, pc}
 8013574:	0801e5b4 	.word	0x0801e5b4
 8013578:	0801ec54 	.word	0x0801ec54
 801357c:	0801e608 	.word	0x0801e608

08013580 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b082      	sub	sp, #8
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d106      	bne.n	801359c <tcp_rexmit_fast+0x1c>
 801358e:	4b2a      	ldr	r3, [pc, #168]	; (8013638 <tcp_rexmit_fast+0xb8>)
 8013590:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013594:	4929      	ldr	r1, [pc, #164]	; (801363c <tcp_rexmit_fast+0xbc>)
 8013596:	482a      	ldr	r0, [pc, #168]	; (8013640 <tcp_rexmit_fast+0xc0>)
 8013598:	f007 fee6 	bl	801b368 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d044      	beq.n	801362e <tcp_rexmit_fast+0xae>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	8b5b      	ldrh	r3, [r3, #26]
 80135a8:	f003 0304 	and.w	r3, r3, #4
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d13e      	bne.n	801362e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f7ff ff79 	bl	80134a8 <tcp_rexmit>
 80135b6:	4603      	mov	r3, r0
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d138      	bne.n	801362e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80135c8:	4293      	cmp	r3, r2
 80135ca:	bf28      	it	cs
 80135cc:	4613      	movcs	r3, r2
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	0fda      	lsrs	r2, r3, #31
 80135d2:	4413      	add	r3, r2
 80135d4:	105b      	asrs	r3, r3, #1
 80135d6:	b29a      	uxth	r2, r3
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80135e4:	461a      	mov	r2, r3
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135ea:	005b      	lsls	r3, r3, #1
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d206      	bcs.n	80135fe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135f4:	005b      	lsls	r3, r3, #1
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013608:	4619      	mov	r1, r3
 801360a:	0049      	lsls	r1, r1, #1
 801360c:	440b      	add	r3, r1
 801360e:	b29b      	uxth	r3, r3
 8013610:	4413      	add	r3, r2
 8013612:	b29a      	uxth	r2, r3
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	8b5b      	ldrh	r3, [r3, #26]
 801361e:	f043 0304 	orr.w	r3, r3, #4
 8013622:	b29a      	uxth	r2, r3
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2200      	movs	r2, #0
 801362c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801362e:	bf00      	nop
 8013630:	3708      	adds	r7, #8
 8013632:	46bd      	mov	sp, r7
 8013634:	bd80      	pop	{r7, pc}
 8013636:	bf00      	nop
 8013638:	0801e5b4 	.word	0x0801e5b4
 801363c:	0801ec6c 	.word	0x0801ec6c
 8013640:	0801e608 	.word	0x0801e608

08013644 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b086      	sub	sp, #24
 8013648:	af00      	add	r7, sp, #0
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	607b      	str	r3, [r7, #4]
 801364e:	460b      	mov	r3, r1
 8013650:	817b      	strh	r3, [r7, #10]
 8013652:	4613      	mov	r3, r2
 8013654:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013656:	897a      	ldrh	r2, [r7, #10]
 8013658:	893b      	ldrh	r3, [r7, #8]
 801365a:	4413      	add	r3, r2
 801365c:	b29b      	uxth	r3, r3
 801365e:	3314      	adds	r3, #20
 8013660:	b29b      	uxth	r3, r3
 8013662:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013666:	4619      	mov	r1, r3
 8013668:	2022      	movs	r0, #34	; 0x22
 801366a:	f7f9 fc8b 	bl	800cf84 <pbuf_alloc>
 801366e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d04d      	beq.n	8013712 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013676:	897b      	ldrh	r3, [r7, #10]
 8013678:	3313      	adds	r3, #19
 801367a:	697a      	ldr	r2, [r7, #20]
 801367c:	8952      	ldrh	r2, [r2, #10]
 801367e:	4293      	cmp	r3, r2
 8013680:	db06      	blt.n	8013690 <tcp_output_alloc_header_common+0x4c>
 8013682:	4b26      	ldr	r3, [pc, #152]	; (801371c <tcp_output_alloc_header_common+0xd8>)
 8013684:	f240 7223 	movw	r2, #1827	; 0x723
 8013688:	4925      	ldr	r1, [pc, #148]	; (8013720 <tcp_output_alloc_header_common+0xdc>)
 801368a:	4826      	ldr	r0, [pc, #152]	; (8013724 <tcp_output_alloc_header_common+0xe0>)
 801368c:	f007 fe6c 	bl	801b368 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	685b      	ldr	r3, [r3, #4]
 8013694:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013696:	8c3b      	ldrh	r3, [r7, #32]
 8013698:	4618      	mov	r0, r3
 801369a:	f7f8 fb21 	bl	800bce0 <lwip_htons>
 801369e:	4603      	mov	r3, r0
 80136a0:	461a      	mov	r2, r3
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80136a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7f8 fb19 	bl	800bce0 <lwip_htons>
 80136ae:	4603      	mov	r3, r0
 80136b0:	461a      	mov	r2, r3
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80136b6:	693b      	ldr	r3, [r7, #16]
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80136bc:	68f8      	ldr	r0, [r7, #12]
 80136be:	f7f8 fb24 	bl	800bd0a <lwip_htonl>
 80136c2:	4602      	mov	r2, r0
 80136c4:	693b      	ldr	r3, [r7, #16]
 80136c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80136c8:	897b      	ldrh	r3, [r7, #10]
 80136ca:	089b      	lsrs	r3, r3, #2
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	3305      	adds	r3, #5
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	031b      	lsls	r3, r3, #12
 80136d4:	b29a      	uxth	r2, r3
 80136d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80136da:	b29b      	uxth	r3, r3
 80136dc:	4313      	orrs	r3, r2
 80136de:	b29b      	uxth	r3, r3
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7f8 fafd 	bl	800bce0 <lwip_htons>
 80136e6:	4603      	mov	r3, r0
 80136e8:	461a      	mov	r2, r3
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80136ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7f8 faf5 	bl	800bce0 <lwip_htons>
 80136f6:	4603      	mov	r3, r0
 80136f8:	461a      	mov	r2, r3
 80136fa:	693b      	ldr	r3, [r7, #16]
 80136fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	2200      	movs	r2, #0
 8013702:	741a      	strb	r2, [r3, #16]
 8013704:	2200      	movs	r2, #0
 8013706:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	2200      	movs	r2, #0
 801370c:	749a      	strb	r2, [r3, #18]
 801370e:	2200      	movs	r2, #0
 8013710:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013712:	697b      	ldr	r3, [r7, #20]
}
 8013714:	4618      	mov	r0, r3
 8013716:	3718      	adds	r7, #24
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}
 801371c:	0801e5b4 	.word	0x0801e5b4
 8013720:	0801ec8c 	.word	0x0801ec8c
 8013724:	0801e608 	.word	0x0801e608

08013728 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013728:	b5b0      	push	{r4, r5, r7, lr}
 801372a:	b08a      	sub	sp, #40	; 0x28
 801372c:	af04      	add	r7, sp, #16
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	607b      	str	r3, [r7, #4]
 8013732:	460b      	mov	r3, r1
 8013734:	817b      	strh	r3, [r7, #10]
 8013736:	4613      	mov	r3, r2
 8013738:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d106      	bne.n	801374e <tcp_output_alloc_header+0x26>
 8013740:	4b15      	ldr	r3, [pc, #84]	; (8013798 <tcp_output_alloc_header+0x70>)
 8013742:	f240 7242 	movw	r2, #1858	; 0x742
 8013746:	4915      	ldr	r1, [pc, #84]	; (801379c <tcp_output_alloc_header+0x74>)
 8013748:	4815      	ldr	r0, [pc, #84]	; (80137a0 <tcp_output_alloc_header+0x78>)
 801374a:	f007 fe0d 	bl	801b368 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	8adb      	ldrh	r3, [r3, #22]
 8013756:	68fa      	ldr	r2, [r7, #12]
 8013758:	8b12      	ldrh	r2, [r2, #24]
 801375a:	68f9      	ldr	r1, [r7, #12]
 801375c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801375e:	893d      	ldrh	r5, [r7, #8]
 8013760:	897c      	ldrh	r4, [r7, #10]
 8013762:	9103      	str	r1, [sp, #12]
 8013764:	2110      	movs	r1, #16
 8013766:	9102      	str	r1, [sp, #8]
 8013768:	9201      	str	r2, [sp, #4]
 801376a:	9300      	str	r3, [sp, #0]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	462a      	mov	r2, r5
 8013770:	4621      	mov	r1, r4
 8013772:	f7ff ff67 	bl	8013644 <tcp_output_alloc_header_common>
 8013776:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d006      	beq.n	801378c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013782:	68fa      	ldr	r2, [r7, #12]
 8013784:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013786:	441a      	add	r2, r3
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801378c:	697b      	ldr	r3, [r7, #20]
}
 801378e:	4618      	mov	r0, r3
 8013790:	3718      	adds	r7, #24
 8013792:	46bd      	mov	sp, r7
 8013794:	bdb0      	pop	{r4, r5, r7, pc}
 8013796:	bf00      	nop
 8013798:	0801e5b4 	.word	0x0801e5b4
 801379c:	0801ecbc 	.word	0x0801ecbc
 80137a0:	0801e608 	.word	0x0801e608

080137a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b088      	sub	sp, #32
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	4611      	mov	r1, r2
 80137b0:	461a      	mov	r2, r3
 80137b2:	460b      	mov	r3, r1
 80137b4:	71fb      	strb	r3, [r7, #7]
 80137b6:	4613      	mov	r3, r2
 80137b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80137ba:	2300      	movs	r3, #0
 80137bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d106      	bne.n	80137d2 <tcp_output_fill_options+0x2e>
 80137c4:	4b13      	ldr	r3, [pc, #76]	; (8013814 <tcp_output_fill_options+0x70>)
 80137c6:	f240 7256 	movw	r2, #1878	; 0x756
 80137ca:	4913      	ldr	r1, [pc, #76]	; (8013818 <tcp_output_fill_options+0x74>)
 80137cc:	4813      	ldr	r0, [pc, #76]	; (801381c <tcp_output_fill_options+0x78>)
 80137ce:	f007 fdcb 	bl	801b368 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	3314      	adds	r3, #20
 80137dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	f103 0214 	add.w	r2, r3, #20
 80137e4:	8bfb      	ldrh	r3, [r7, #30]
 80137e6:	009b      	lsls	r3, r3, #2
 80137e8:	4619      	mov	r1, r3
 80137ea:	79fb      	ldrb	r3, [r7, #7]
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	f003 0304 	and.w	r3, r3, #4
 80137f2:	440b      	add	r3, r1
 80137f4:	4413      	add	r3, r2
 80137f6:	697a      	ldr	r2, [r7, #20]
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d006      	beq.n	801380a <tcp_output_fill_options+0x66>
 80137fc:	4b05      	ldr	r3, [pc, #20]	; (8013814 <tcp_output_fill_options+0x70>)
 80137fe:	f240 7275 	movw	r2, #1909	; 0x775
 8013802:	4907      	ldr	r1, [pc, #28]	; (8013820 <tcp_output_fill_options+0x7c>)
 8013804:	4805      	ldr	r0, [pc, #20]	; (801381c <tcp_output_fill_options+0x78>)
 8013806:	f007 fdaf 	bl	801b368 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801380a:	bf00      	nop
 801380c:	3720      	adds	r7, #32
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	0801e5b4 	.word	0x0801e5b4
 8013818:	0801ece4 	.word	0x0801ece4
 801381c:	0801e608 	.word	0x0801e608
 8013820:	0801ebdc 	.word	0x0801ebdc

08013824 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b08a      	sub	sp, #40	; 0x28
 8013828:	af04      	add	r7, sp, #16
 801382a:	60f8      	str	r0, [r7, #12]
 801382c:	60b9      	str	r1, [r7, #8]
 801382e:	607a      	str	r2, [r7, #4]
 8013830:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d106      	bne.n	8013846 <tcp_output_control_segment+0x22>
 8013838:	4b1c      	ldr	r3, [pc, #112]	; (80138ac <tcp_output_control_segment+0x88>)
 801383a:	f240 7287 	movw	r2, #1927	; 0x787
 801383e:	491c      	ldr	r1, [pc, #112]	; (80138b0 <tcp_output_control_segment+0x8c>)
 8013840:	481c      	ldr	r0, [pc, #112]	; (80138b4 <tcp_output_control_segment+0x90>)
 8013842:	f007 fd91 	bl	801b368 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013846:	683a      	ldr	r2, [r7, #0]
 8013848:	6879      	ldr	r1, [r7, #4]
 801384a:	68f8      	ldr	r0, [r7, #12]
 801384c:	f7fe fae8 	bl	8011e20 <tcp_route>
 8013850:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d102      	bne.n	801385e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013858:	23fc      	movs	r3, #252	; 0xfc
 801385a:	75fb      	strb	r3, [r7, #23]
 801385c:	e01c      	b.n	8013898 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d006      	beq.n	8013872 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	7adb      	ldrb	r3, [r3, #11]
 8013868:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	7a9b      	ldrb	r3, [r3, #10]
 801386e:	757b      	strb	r3, [r7, #21]
 8013870:	e003      	b.n	801387a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013872:	23ff      	movs	r3, #255	; 0xff
 8013874:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013876:	2300      	movs	r3, #0
 8013878:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801387a:	7dba      	ldrb	r2, [r7, #22]
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	9302      	str	r3, [sp, #8]
 8013880:	2306      	movs	r3, #6
 8013882:	9301      	str	r3, [sp, #4]
 8013884:	7d7b      	ldrb	r3, [r7, #21]
 8013886:	9300      	str	r3, [sp, #0]
 8013888:	4613      	mov	r3, r2
 801388a:	683a      	ldr	r2, [r7, #0]
 801388c:	6879      	ldr	r1, [r7, #4]
 801388e:	68b8      	ldr	r0, [r7, #8]
 8013890:	f004 fa0c 	bl	8017cac <ip4_output_if>
 8013894:	4603      	mov	r3, r0
 8013896:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013898:	68b8      	ldr	r0, [r7, #8]
 801389a:	f7f9 fe89 	bl	800d5b0 <pbuf_free>
  return err;
 801389e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3718      	adds	r7, #24
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	bf00      	nop
 80138ac:	0801e5b4 	.word	0x0801e5b4
 80138b0:	0801ed0c 	.word	0x0801ed0c
 80138b4:	0801e608 	.word	0x0801e608

080138b8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80138b8:	b590      	push	{r4, r7, lr}
 80138ba:	b08b      	sub	sp, #44	; 0x2c
 80138bc:	af04      	add	r7, sp, #16
 80138be:	60f8      	str	r0, [r7, #12]
 80138c0:	60b9      	str	r1, [r7, #8]
 80138c2:	607a      	str	r2, [r7, #4]
 80138c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d106      	bne.n	80138da <tcp_rst+0x22>
 80138cc:	4b1f      	ldr	r3, [pc, #124]	; (801394c <tcp_rst+0x94>)
 80138ce:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80138d2:	491f      	ldr	r1, [pc, #124]	; (8013950 <tcp_rst+0x98>)
 80138d4:	481f      	ldr	r0, [pc, #124]	; (8013954 <tcp_rst+0x9c>)
 80138d6:	f007 fd47 	bl	801b368 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80138da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d106      	bne.n	80138ee <tcp_rst+0x36>
 80138e0:	4b1a      	ldr	r3, [pc, #104]	; (801394c <tcp_rst+0x94>)
 80138e2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80138e6:	491c      	ldr	r1, [pc, #112]	; (8013958 <tcp_rst+0xa0>)
 80138e8:	481a      	ldr	r0, [pc, #104]	; (8013954 <tcp_rst+0x9c>)
 80138ea:	f007 fd3d 	bl	801b368 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80138ee:	2300      	movs	r3, #0
 80138f0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80138f2:	f246 0308 	movw	r3, #24584	; 0x6008
 80138f6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80138f8:	7dfb      	ldrb	r3, [r7, #23]
 80138fa:	b29c      	uxth	r4, r3
 80138fc:	68b8      	ldr	r0, [r7, #8]
 80138fe:	f7f8 fa04 	bl	800bd0a <lwip_htonl>
 8013902:	4602      	mov	r2, r0
 8013904:	8abb      	ldrh	r3, [r7, #20]
 8013906:	9303      	str	r3, [sp, #12]
 8013908:	2314      	movs	r3, #20
 801390a:	9302      	str	r3, [sp, #8]
 801390c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801390e:	9301      	str	r3, [sp, #4]
 8013910:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013912:	9300      	str	r3, [sp, #0]
 8013914:	4613      	mov	r3, r2
 8013916:	2200      	movs	r2, #0
 8013918:	4621      	mov	r1, r4
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f7ff fe92 	bl	8013644 <tcp_output_alloc_header_common>
 8013920:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d00c      	beq.n	8013942 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013928:	7dfb      	ldrb	r3, [r7, #23]
 801392a:	2200      	movs	r2, #0
 801392c:	6939      	ldr	r1, [r7, #16]
 801392e:	68f8      	ldr	r0, [r7, #12]
 8013930:	f7ff ff38 	bl	80137a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013936:	683a      	ldr	r2, [r7, #0]
 8013938:	6939      	ldr	r1, [r7, #16]
 801393a:	68f8      	ldr	r0, [r7, #12]
 801393c:	f7ff ff72 	bl	8013824 <tcp_output_control_segment>
 8013940:	e000      	b.n	8013944 <tcp_rst+0x8c>
    return;
 8013942:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013944:	371c      	adds	r7, #28
 8013946:	46bd      	mov	sp, r7
 8013948:	bd90      	pop	{r4, r7, pc}
 801394a:	bf00      	nop
 801394c:	0801e5b4 	.word	0x0801e5b4
 8013950:	0801ed38 	.word	0x0801ed38
 8013954:	0801e608 	.word	0x0801e608
 8013958:	0801ed54 	.word	0x0801ed54

0801395c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801395c:	b590      	push	{r4, r7, lr}
 801395e:	b087      	sub	sp, #28
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013964:	2300      	movs	r3, #0
 8013966:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013968:	2300      	movs	r3, #0
 801396a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d106      	bne.n	8013980 <tcp_send_empty_ack+0x24>
 8013972:	4b28      	ldr	r3, [pc, #160]	; (8013a14 <tcp_send_empty_ack+0xb8>)
 8013974:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013978:	4927      	ldr	r1, [pc, #156]	; (8013a18 <tcp_send_empty_ack+0xbc>)
 801397a:	4828      	ldr	r0, [pc, #160]	; (8013a1c <tcp_send_empty_ack+0xc0>)
 801397c:	f007 fcf4 	bl	801b368 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013980:	7dfb      	ldrb	r3, [r7, #23]
 8013982:	009b      	lsls	r3, r3, #2
 8013984:	b2db      	uxtb	r3, r3
 8013986:	f003 0304 	and.w	r3, r3, #4
 801398a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801398c:	7d7b      	ldrb	r3, [r7, #21]
 801398e:	b29c      	uxth	r4, r3
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013994:	4618      	mov	r0, r3
 8013996:	f7f8 f9b8 	bl	800bd0a <lwip_htonl>
 801399a:	4603      	mov	r3, r0
 801399c:	2200      	movs	r2, #0
 801399e:	4621      	mov	r1, r4
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f7ff fec1 	bl	8013728 <tcp_output_alloc_header>
 80139a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d109      	bne.n	80139c2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	8b5b      	ldrh	r3, [r3, #26]
 80139b2:	f043 0303 	orr.w	r3, r3, #3
 80139b6:	b29a      	uxth	r2, r3
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80139bc:	f06f 0301 	mvn.w	r3, #1
 80139c0:	e023      	b.n	8013a0a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80139c2:	7dbb      	ldrb	r3, [r7, #22]
 80139c4:	7dfa      	ldrb	r2, [r7, #23]
 80139c6:	6939      	ldr	r1, [r7, #16]
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f7ff feeb 	bl	80137a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80139ce:	687a      	ldr	r2, [r7, #4]
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	3304      	adds	r3, #4
 80139d4:	6939      	ldr	r1, [r7, #16]
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f7ff ff24 	bl	8013824 <tcp_output_control_segment>
 80139dc:	4603      	mov	r3, r0
 80139de:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80139e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d007      	beq.n	80139f8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	8b5b      	ldrh	r3, [r3, #26]
 80139ec:	f043 0303 	orr.w	r3, r3, #3
 80139f0:	b29a      	uxth	r2, r3
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	835a      	strh	r2, [r3, #26]
 80139f6:	e006      	b.n	8013a06 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	8b5b      	ldrh	r3, [r3, #26]
 80139fc:	f023 0303 	bic.w	r3, r3, #3
 8013a00:	b29a      	uxth	r2, r3
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	371c      	adds	r7, #28
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd90      	pop	{r4, r7, pc}
 8013a12:	bf00      	nop
 8013a14:	0801e5b4 	.word	0x0801e5b4
 8013a18:	0801ed70 	.word	0x0801ed70
 8013a1c:	0801e608 	.word	0x0801e608

08013a20 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013a20:	b590      	push	{r4, r7, lr}
 8013a22:	b087      	sub	sp, #28
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013a28:	2300      	movs	r3, #0
 8013a2a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d106      	bne.n	8013a40 <tcp_keepalive+0x20>
 8013a32:	4b18      	ldr	r3, [pc, #96]	; (8013a94 <tcp_keepalive+0x74>)
 8013a34:	f640 0224 	movw	r2, #2084	; 0x824
 8013a38:	4917      	ldr	r1, [pc, #92]	; (8013a98 <tcp_keepalive+0x78>)
 8013a3a:	4818      	ldr	r0, [pc, #96]	; (8013a9c <tcp_keepalive+0x7c>)
 8013a3c:	f007 fc94 	bl	801b368 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013a40:	7dfb      	ldrb	r3, [r7, #23]
 8013a42:	b29c      	uxth	r4, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	f7f8 f95d 	bl	800bd0a <lwip_htonl>
 8013a50:	4603      	mov	r3, r0
 8013a52:	2200      	movs	r2, #0
 8013a54:	4621      	mov	r1, r4
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	f7ff fe66 	bl	8013728 <tcp_output_alloc_header>
 8013a5c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d102      	bne.n	8013a6a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013a64:	f04f 33ff 	mov.w	r3, #4294967295
 8013a68:	e010      	b.n	8013a8c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013a6a:	7dfb      	ldrb	r3, [r7, #23]
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	6939      	ldr	r1, [r7, #16]
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f7ff fe97 	bl	80137a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013a76:	687a      	ldr	r2, [r7, #4]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	3304      	adds	r3, #4
 8013a7c:	6939      	ldr	r1, [r7, #16]
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f7ff fed0 	bl	8013824 <tcp_output_control_segment>
 8013a84:	4603      	mov	r3, r0
 8013a86:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013a88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	371c      	adds	r7, #28
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd90      	pop	{r4, r7, pc}
 8013a94:	0801e5b4 	.word	0x0801e5b4
 8013a98:	0801ed90 	.word	0x0801ed90
 8013a9c:	0801e608 	.word	0x0801e608

08013aa0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013aa0:	b590      	push	{r4, r7, lr}
 8013aa2:	b08b      	sub	sp, #44	; 0x2c
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d106      	bne.n	8013ac2 <tcp_zero_window_probe+0x22>
 8013ab4:	4b4c      	ldr	r3, [pc, #304]	; (8013be8 <tcp_zero_window_probe+0x148>)
 8013ab6:	f640 024f 	movw	r2, #2127	; 0x84f
 8013aba:	494c      	ldr	r1, [pc, #304]	; (8013bec <tcp_zero_window_probe+0x14c>)
 8013abc:	484c      	ldr	r0, [pc, #304]	; (8013bf0 <tcp_zero_window_probe+0x150>)
 8013abe:	f007 fc53 	bl	801b368 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ac6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013ac8:	6a3b      	ldr	r3, [r7, #32]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d101      	bne.n	8013ad2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013ace:	2300      	movs	r3, #0
 8013ad0:	e086      	b.n	8013be0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013ad8:	2bff      	cmp	r3, #255	; 0xff
 8013ada:	d007      	beq.n	8013aec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	b2da      	uxtb	r2, r3
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013aec:	6a3b      	ldr	r3, [r7, #32]
 8013aee:	68db      	ldr	r3, [r3, #12]
 8013af0:	899b      	ldrh	r3, [r3, #12]
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7f8 f8f3 	bl	800bce0 <lwip_htons>
 8013afa:	4603      	mov	r3, r0
 8013afc:	b2db      	uxtb	r3, r3
 8013afe:	f003 0301 	and.w	r3, r3, #1
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d005      	beq.n	8013b12 <tcp_zero_window_probe+0x72>
 8013b06:	6a3b      	ldr	r3, [r7, #32]
 8013b08:	891b      	ldrh	r3, [r3, #8]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d101      	bne.n	8013b12 <tcp_zero_window_probe+0x72>
 8013b0e:	2301      	movs	r3, #1
 8013b10:	e000      	b.n	8013b14 <tcp_zero_window_probe+0x74>
 8013b12:	2300      	movs	r3, #0
 8013b14:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013b16:	7ffb      	ldrb	r3, [r7, #31]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	bf0c      	ite	eq
 8013b1c:	2301      	moveq	r3, #1
 8013b1e:	2300      	movne	r3, #0
 8013b20:	b2db      	uxtb	r3, r3
 8013b22:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b28:	b299      	uxth	r1, r3
 8013b2a:	6a3b      	ldr	r3, [r7, #32]
 8013b2c:	68db      	ldr	r3, [r3, #12]
 8013b2e:	685b      	ldr	r3, [r3, #4]
 8013b30:	8bba      	ldrh	r2, [r7, #28]
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f7ff fdf8 	bl	8013728 <tcp_output_alloc_header>
 8013b38:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013b3a:	69bb      	ldr	r3, [r7, #24]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d102      	bne.n	8013b46 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013b40:	f04f 33ff 	mov.w	r3, #4294967295
 8013b44:	e04c      	b.n	8013be0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013b46:	69bb      	ldr	r3, [r7, #24]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013b4c:	7ffb      	ldrb	r3, [r7, #31]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d011      	beq.n	8013b76 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	899b      	ldrh	r3, [r3, #12]
 8013b56:	b29b      	uxth	r3, r3
 8013b58:	b21b      	sxth	r3, r3
 8013b5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013b5e:	b21c      	sxth	r4, r3
 8013b60:	2011      	movs	r0, #17
 8013b62:	f7f8 f8bd 	bl	800bce0 <lwip_htons>
 8013b66:	4603      	mov	r3, r0
 8013b68:	b21b      	sxth	r3, r3
 8013b6a:	4323      	orrs	r3, r4
 8013b6c:	b21b      	sxth	r3, r3
 8013b6e:	b29a      	uxth	r2, r3
 8013b70:	697b      	ldr	r3, [r7, #20]
 8013b72:	819a      	strh	r2, [r3, #12]
 8013b74:	e010      	b.n	8013b98 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013b76:	69bb      	ldr	r3, [r7, #24]
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	3314      	adds	r3, #20
 8013b7c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013b7e:	6a3b      	ldr	r3, [r7, #32]
 8013b80:	6858      	ldr	r0, [r3, #4]
 8013b82:	6a3b      	ldr	r3, [r7, #32]
 8013b84:	685b      	ldr	r3, [r3, #4]
 8013b86:	891a      	ldrh	r2, [r3, #8]
 8013b88:	6a3b      	ldr	r3, [r7, #32]
 8013b8a:	891b      	ldrh	r3, [r3, #8]
 8013b8c:	1ad3      	subs	r3, r2, r3
 8013b8e:	b29b      	uxth	r3, r3
 8013b90:	2201      	movs	r2, #1
 8013b92:	6939      	ldr	r1, [r7, #16]
 8013b94:	f7f9 ff12 	bl	800d9bc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013b98:	6a3b      	ldr	r3, [r7, #32]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	685b      	ldr	r3, [r3, #4]
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7f8 f8b3 	bl	800bd0a <lwip_htonl>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	3301      	adds	r3, #1
 8013ba8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	1ad3      	subs	r3, r2, r3
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	da02      	bge.n	8013bbc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	69b9      	ldr	r1, [r7, #24]
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f7ff fded 	bl	80137a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	3304      	adds	r3, #4
 8013bd0:	69b9      	ldr	r1, [r7, #24]
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f7ff fe26 	bl	8013824 <tcp_output_control_segment>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013bdc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	372c      	adds	r7, #44	; 0x2c
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd90      	pop	{r4, r7, pc}
 8013be8:	0801e5b4 	.word	0x0801e5b4
 8013bec:	0801edac 	.word	0x0801edac
 8013bf0:	0801e608 	.word	0x0801e608

08013bf4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013bfc:	f7f9 ffcc 	bl	800db98 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013c00:	4b0a      	ldr	r3, [pc, #40]	; (8013c2c <tcpip_tcp_timer+0x38>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d103      	bne.n	8013c10 <tcpip_tcp_timer+0x1c>
 8013c08:	4b09      	ldr	r3, [pc, #36]	; (8013c30 <tcpip_tcp_timer+0x3c>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d005      	beq.n	8013c1c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013c10:	2200      	movs	r2, #0
 8013c12:	4908      	ldr	r1, [pc, #32]	; (8013c34 <tcpip_tcp_timer+0x40>)
 8013c14:	20fa      	movs	r0, #250	; 0xfa
 8013c16:	f000 f8f3 	bl	8013e00 <sys_timeout>
 8013c1a:	e003      	b.n	8013c24 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013c1c:	4b06      	ldr	r3, [pc, #24]	; (8013c38 <tcpip_tcp_timer+0x44>)
 8013c1e:	2200      	movs	r2, #0
 8013c20:	601a      	str	r2, [r3, #0]
  }
}
 8013c22:	bf00      	nop
 8013c24:	bf00      	nop
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}
 8013c2c:	20019054 	.word	0x20019054
 8013c30:	20019064 	.word	0x20019064
 8013c34:	08013bf5 	.word	0x08013bf5
 8013c38:	200107b0 	.word	0x200107b0

08013c3c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013c40:	4b0a      	ldr	r3, [pc, #40]	; (8013c6c <tcp_timer_needed+0x30>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d10f      	bne.n	8013c68 <tcp_timer_needed+0x2c>
 8013c48:	4b09      	ldr	r3, [pc, #36]	; (8013c70 <tcp_timer_needed+0x34>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d103      	bne.n	8013c58 <tcp_timer_needed+0x1c>
 8013c50:	4b08      	ldr	r3, [pc, #32]	; (8013c74 <tcp_timer_needed+0x38>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d007      	beq.n	8013c68 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013c58:	4b04      	ldr	r3, [pc, #16]	; (8013c6c <tcp_timer_needed+0x30>)
 8013c5a:	2201      	movs	r2, #1
 8013c5c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013c5e:	2200      	movs	r2, #0
 8013c60:	4905      	ldr	r1, [pc, #20]	; (8013c78 <tcp_timer_needed+0x3c>)
 8013c62:	20fa      	movs	r0, #250	; 0xfa
 8013c64:	f000 f8cc 	bl	8013e00 <sys_timeout>
  }
}
 8013c68:	bf00      	nop
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	200107b0 	.word	0x200107b0
 8013c70:	20019054 	.word	0x20019054
 8013c74:	20019064 	.word	0x20019064
 8013c78:	08013bf5 	.word	0x08013bf5

08013c7c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013c88:	200a      	movs	r0, #10
 8013c8a:	f7f8 fd01 	bl	800c690 <memp_malloc>
 8013c8e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d109      	bne.n	8013caa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013c96:	693b      	ldr	r3, [r7, #16]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d151      	bne.n	8013d40 <sys_timeout_abs+0xc4>
 8013c9c:	4b2a      	ldr	r3, [pc, #168]	; (8013d48 <sys_timeout_abs+0xcc>)
 8013c9e:	22be      	movs	r2, #190	; 0xbe
 8013ca0:	492a      	ldr	r1, [pc, #168]	; (8013d4c <sys_timeout_abs+0xd0>)
 8013ca2:	482b      	ldr	r0, [pc, #172]	; (8013d50 <sys_timeout_abs+0xd4>)
 8013ca4:	f007 fb60 	bl	801b368 <iprintf>
    return;
 8013ca8:	e04a      	b.n	8013d40 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	2200      	movs	r2, #0
 8013cae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013cb0:	693b      	ldr	r3, [r7, #16]
 8013cb2:	68ba      	ldr	r2, [r7, #8]
 8013cb4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	687a      	ldr	r2, [r7, #4]
 8013cba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	68fa      	ldr	r2, [r7, #12]
 8013cc0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013cc2:	4b24      	ldr	r3, [pc, #144]	; (8013d54 <sys_timeout_abs+0xd8>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d103      	bne.n	8013cd2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013cca:	4a22      	ldr	r2, [pc, #136]	; (8013d54 <sys_timeout_abs+0xd8>)
 8013ccc:	693b      	ldr	r3, [r7, #16]
 8013cce:	6013      	str	r3, [r2, #0]
    return;
 8013cd0:	e037      	b.n	8013d42 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013cd2:	693b      	ldr	r3, [r7, #16]
 8013cd4:	685a      	ldr	r2, [r3, #4]
 8013cd6:	4b1f      	ldr	r3, [pc, #124]	; (8013d54 <sys_timeout_abs+0xd8>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	1ad3      	subs	r3, r2, r3
 8013cde:	0fdb      	lsrs	r3, r3, #31
 8013ce0:	f003 0301 	and.w	r3, r3, #1
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d007      	beq.n	8013cfa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013cea:	4b1a      	ldr	r3, [pc, #104]	; (8013d54 <sys_timeout_abs+0xd8>)
 8013cec:	681a      	ldr	r2, [r3, #0]
 8013cee:	693b      	ldr	r3, [r7, #16]
 8013cf0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013cf2:	4a18      	ldr	r2, [pc, #96]	; (8013d54 <sys_timeout_abs+0xd8>)
 8013cf4:	693b      	ldr	r3, [r7, #16]
 8013cf6:	6013      	str	r3, [r2, #0]
 8013cf8:	e023      	b.n	8013d42 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013cfa:	4b16      	ldr	r3, [pc, #88]	; (8013d54 <sys_timeout_abs+0xd8>)
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	617b      	str	r3, [r7, #20]
 8013d00:	e01a      	b.n	8013d38 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00b      	beq.n	8013d22 <sys_timeout_abs+0xa6>
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	685a      	ldr	r2, [r3, #4]
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	1ad3      	subs	r3, r2, r3
 8013d16:	0fdb      	lsrs	r3, r3, #31
 8013d18:	f003 0301 	and.w	r3, r3, #1
 8013d1c:	b2db      	uxtb	r3, r3
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d007      	beq.n	8013d32 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013d22:	697b      	ldr	r3, [r7, #20]
 8013d24:	681a      	ldr	r2, [r3, #0]
 8013d26:	693b      	ldr	r3, [r7, #16]
 8013d28:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	693a      	ldr	r2, [r7, #16]
 8013d2e:	601a      	str	r2, [r3, #0]
        break;
 8013d30:	e007      	b.n	8013d42 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	617b      	str	r3, [r7, #20]
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d1e1      	bne.n	8013d02 <sys_timeout_abs+0x86>
 8013d3e:	e000      	b.n	8013d42 <sys_timeout_abs+0xc6>
    return;
 8013d40:	bf00      	nop
      }
    }
  }
}
 8013d42:	3718      	adds	r7, #24
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}
 8013d48:	0801edd0 	.word	0x0801edd0
 8013d4c:	0801ee04 	.word	0x0801ee04
 8013d50:	0801ee44 	.word	0x0801ee44
 8013d54:	200107a8 	.word	0x200107a8

08013d58 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b086      	sub	sp, #24
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	4798      	blx	r3

  now = sys_now();
 8013d6a:	f7f0 fd23 	bl	80047b4 <sys_now>
 8013d6e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013d70:	697b      	ldr	r3, [r7, #20]
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	4b0f      	ldr	r3, [pc, #60]	; (8013db4 <lwip_cyclic_timer+0x5c>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4413      	add	r3, r2
 8013d7a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013d7c:	68fa      	ldr	r2, [r7, #12]
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	1ad3      	subs	r3, r2, r3
 8013d82:	0fdb      	lsrs	r3, r3, #31
 8013d84:	f003 0301 	and.w	r3, r3, #1
 8013d88:	b2db      	uxtb	r3, r3
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d009      	beq.n	8013da2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	681a      	ldr	r2, [r3, #0]
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	4413      	add	r3, r2
 8013d96:	687a      	ldr	r2, [r7, #4]
 8013d98:	4907      	ldr	r1, [pc, #28]	; (8013db8 <lwip_cyclic_timer+0x60>)
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7ff ff6e 	bl	8013c7c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013da0:	e004      	b.n	8013dac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013da2:	687a      	ldr	r2, [r7, #4]
 8013da4:	4904      	ldr	r1, [pc, #16]	; (8013db8 <lwip_cyclic_timer+0x60>)
 8013da6:	68f8      	ldr	r0, [r7, #12]
 8013da8:	f7ff ff68 	bl	8013c7c <sys_timeout_abs>
}
 8013dac:	bf00      	nop
 8013dae:	3718      	adds	r7, #24
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}
 8013db4:	200107ac 	.word	0x200107ac
 8013db8:	08013d59 	.word	0x08013d59

08013dbc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013dc2:	2301      	movs	r3, #1
 8013dc4:	607b      	str	r3, [r7, #4]
 8013dc6:	e00e      	b.n	8013de6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013dc8:	4a0b      	ldr	r2, [pc, #44]	; (8013df8 <sys_timeouts_init+0x3c>)
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	00db      	lsls	r3, r3, #3
 8013dd4:	4a08      	ldr	r2, [pc, #32]	; (8013df8 <sys_timeouts_init+0x3c>)
 8013dd6:	4413      	add	r3, r2
 8013dd8:	461a      	mov	r2, r3
 8013dda:	4908      	ldr	r1, [pc, #32]	; (8013dfc <sys_timeouts_init+0x40>)
 8013ddc:	f000 f810 	bl	8013e00 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	3301      	adds	r3, #1
 8013de4:	607b      	str	r3, [r7, #4]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	2b04      	cmp	r3, #4
 8013dea:	d9ed      	bls.n	8013dc8 <sys_timeouts_init+0xc>
  }
}
 8013dec:	bf00      	nop
 8013dee:	bf00      	nop
 8013df0:	3708      	adds	r7, #8
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd80      	pop	{r7, pc}
 8013df6:	bf00      	nop
 8013df8:	0801ffac 	.word	0x0801ffac
 8013dfc:	08013d59 	.word	0x08013d59

08013e00 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b086      	sub	sp, #24
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	60f8      	str	r0, [r7, #12]
 8013e08:	60b9      	str	r1, [r7, #8]
 8013e0a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013e12:	d306      	bcc.n	8013e22 <sys_timeout+0x22>
 8013e14:	4b0a      	ldr	r3, [pc, #40]	; (8013e40 <sys_timeout+0x40>)
 8013e16:	f240 1229 	movw	r2, #297	; 0x129
 8013e1a:	490a      	ldr	r1, [pc, #40]	; (8013e44 <sys_timeout+0x44>)
 8013e1c:	480a      	ldr	r0, [pc, #40]	; (8013e48 <sys_timeout+0x48>)
 8013e1e:	f007 faa3 	bl	801b368 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013e22:	f7f0 fcc7 	bl	80047b4 <sys_now>
 8013e26:	4602      	mov	r2, r0
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	4413      	add	r3, r2
 8013e2c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013e2e:	687a      	ldr	r2, [r7, #4]
 8013e30:	68b9      	ldr	r1, [r7, #8]
 8013e32:	6978      	ldr	r0, [r7, #20]
 8013e34:	f7ff ff22 	bl	8013c7c <sys_timeout_abs>
#endif
}
 8013e38:	bf00      	nop
 8013e3a:	3718      	adds	r7, #24
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}
 8013e40:	0801edd0 	.word	0x0801edd0
 8013e44:	0801ee6c 	.word	0x0801ee6c
 8013e48:	0801ee44 	.word	0x0801ee44

08013e4c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013e52:	f7f0 fcaf 	bl	80047b4 <sys_now>
 8013e56:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013e58:	4b17      	ldr	r3, [pc, #92]	; (8013eb8 <sys_check_timeouts+0x6c>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d022      	beq.n	8013eaa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	68fa      	ldr	r2, [r7, #12]
 8013e6a:	1ad3      	subs	r3, r2, r3
 8013e6c:	0fdb      	lsrs	r3, r3, #31
 8013e6e:	f003 0301 	and.w	r3, r3, #1
 8013e72:	b2db      	uxtb	r3, r3
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d11a      	bne.n	8013eae <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	4a0e      	ldr	r2, [pc, #56]	; (8013eb8 <sys_check_timeouts+0x6c>)
 8013e7e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013e80:	68bb      	ldr	r3, [r7, #8]
 8013e82:	689b      	ldr	r3, [r3, #8]
 8013e84:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	68db      	ldr	r3, [r3, #12]
 8013e8a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	4a0a      	ldr	r2, [pc, #40]	; (8013ebc <sys_check_timeouts+0x70>)
 8013e92:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013e94:	68b9      	ldr	r1, [r7, #8]
 8013e96:	200a      	movs	r0, #10
 8013e98:	f7f8 fc70 	bl	800c77c <memp_free>
    if (handler != NULL) {
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d0da      	beq.n	8013e58 <sys_check_timeouts+0xc>
      handler(arg);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	6838      	ldr	r0, [r7, #0]
 8013ea6:	4798      	blx	r3
  do {
 8013ea8:	e7d6      	b.n	8013e58 <sys_check_timeouts+0xc>
      return;
 8013eaa:	bf00      	nop
 8013eac:	e000      	b.n	8013eb0 <sys_check_timeouts+0x64>
      return;
 8013eae:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013eb0:	3710      	adds	r7, #16
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	200107a8 	.word	0x200107a8
 8013ebc:	200107ac 	.word	0x200107ac

08013ec0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b082      	sub	sp, #8
 8013ec4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013ec6:	4b16      	ldr	r3, [pc, #88]	; (8013f20 <sys_timeouts_sleeptime+0x60>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d102      	bne.n	8013ed4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013ece:	f04f 33ff 	mov.w	r3, #4294967295
 8013ed2:	e020      	b.n	8013f16 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013ed4:	f7f0 fc6e 	bl	80047b4 <sys_now>
 8013ed8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013eda:	4b11      	ldr	r3, [pc, #68]	; (8013f20 <sys_timeouts_sleeptime+0x60>)
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	685a      	ldr	r2, [r3, #4]
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	1ad3      	subs	r3, r2, r3
 8013ee4:	0fdb      	lsrs	r3, r3, #31
 8013ee6:	f003 0301 	and.w	r3, r3, #1
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d001      	beq.n	8013ef4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	e010      	b.n	8013f16 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013ef4:	4b0a      	ldr	r3, [pc, #40]	; (8013f20 <sys_timeouts_sleeptime+0x60>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	685a      	ldr	r2, [r3, #4]
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	1ad3      	subs	r3, r2, r3
 8013efe:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013f00:	683b      	ldr	r3, [r7, #0]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	da06      	bge.n	8013f14 <sys_timeouts_sleeptime+0x54>
 8013f06:	4b07      	ldr	r3, [pc, #28]	; (8013f24 <sys_timeouts_sleeptime+0x64>)
 8013f08:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013f0c:	4906      	ldr	r1, [pc, #24]	; (8013f28 <sys_timeouts_sleeptime+0x68>)
 8013f0e:	4807      	ldr	r0, [pc, #28]	; (8013f2c <sys_timeouts_sleeptime+0x6c>)
 8013f10:	f007 fa2a 	bl	801b368 <iprintf>
    return ret;
 8013f14:	683b      	ldr	r3, [r7, #0]
  }
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3708      	adds	r7, #8
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	200107a8 	.word	0x200107a8
 8013f24:	0801edd0 	.word	0x0801edd0
 8013f28:	0801eea4 	.word	0x0801eea4
 8013f2c:	0801ee44 	.word	0x0801ee44

08013f30 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013f34:	f007 fa30 	bl	801b398 <rand>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013f40:	b29b      	uxth	r3, r3
 8013f42:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013f46:	b29a      	uxth	r2, r3
 8013f48:	4b01      	ldr	r3, [pc, #4]	; (8013f50 <udp_init+0x20>)
 8013f4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013f4c:	bf00      	nop
 8013f4e:	bd80      	pop	{r7, pc}
 8013f50:	2000002c 	.word	0x2000002c

08013f54 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b083      	sub	sp, #12
 8013f58:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013f5e:	4b17      	ldr	r3, [pc, #92]	; (8013fbc <udp_new_port+0x68>)
 8013f60:	881b      	ldrh	r3, [r3, #0]
 8013f62:	1c5a      	adds	r2, r3, #1
 8013f64:	b291      	uxth	r1, r2
 8013f66:	4a15      	ldr	r2, [pc, #84]	; (8013fbc <udp_new_port+0x68>)
 8013f68:	8011      	strh	r1, [r2, #0]
 8013f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d103      	bne.n	8013f7a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013f72:	4b12      	ldr	r3, [pc, #72]	; (8013fbc <udp_new_port+0x68>)
 8013f74:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013f78:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f7a:	4b11      	ldr	r3, [pc, #68]	; (8013fc0 <udp_new_port+0x6c>)
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	603b      	str	r3, [r7, #0]
 8013f80:	e011      	b.n	8013fa6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013f82:	683b      	ldr	r3, [r7, #0]
 8013f84:	8a5a      	ldrh	r2, [r3, #18]
 8013f86:	4b0d      	ldr	r3, [pc, #52]	; (8013fbc <udp_new_port+0x68>)
 8013f88:	881b      	ldrh	r3, [r3, #0]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d108      	bne.n	8013fa0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013f8e:	88fb      	ldrh	r3, [r7, #6]
 8013f90:	3301      	adds	r3, #1
 8013f92:	80fb      	strh	r3, [r7, #6]
 8013f94:	88fb      	ldrh	r3, [r7, #6]
 8013f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013f9a:	d3e0      	bcc.n	8013f5e <udp_new_port+0xa>
        return 0;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	e007      	b.n	8013fb0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	68db      	ldr	r3, [r3, #12]
 8013fa4:	603b      	str	r3, [r7, #0]
 8013fa6:	683b      	ldr	r3, [r7, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d1ea      	bne.n	8013f82 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013fac:	4b03      	ldr	r3, [pc, #12]	; (8013fbc <udp_new_port+0x68>)
 8013fae:	881b      	ldrh	r3, [r3, #0]
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	370c      	adds	r7, #12
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fba:	4770      	bx	lr
 8013fbc:	2000002c 	.word	0x2000002c
 8013fc0:	2001906c 	.word	0x2001906c

08013fc4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b084      	sub	sp, #16
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d105      	bne.n	8013fe4 <udp_input_local_match+0x20>
 8013fd8:	4b27      	ldr	r3, [pc, #156]	; (8014078 <udp_input_local_match+0xb4>)
 8013fda:	2287      	movs	r2, #135	; 0x87
 8013fdc:	4927      	ldr	r1, [pc, #156]	; (801407c <udp_input_local_match+0xb8>)
 8013fde:	4828      	ldr	r0, [pc, #160]	; (8014080 <udp_input_local_match+0xbc>)
 8013fe0:	f007 f9c2 	bl	801b368 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d105      	bne.n	8013ff6 <udp_input_local_match+0x32>
 8013fea:	4b23      	ldr	r3, [pc, #140]	; (8014078 <udp_input_local_match+0xb4>)
 8013fec:	2288      	movs	r2, #136	; 0x88
 8013fee:	4925      	ldr	r1, [pc, #148]	; (8014084 <udp_input_local_match+0xc0>)
 8013ff0:	4823      	ldr	r0, [pc, #140]	; (8014080 <udp_input_local_match+0xbc>)
 8013ff2:	f007 f9b9 	bl	801b368 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	7a1b      	ldrb	r3, [r3, #8]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d00b      	beq.n	8014016 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	7a1a      	ldrb	r2, [r3, #8]
 8014002:	4b21      	ldr	r3, [pc, #132]	; (8014088 <udp_input_local_match+0xc4>)
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801400a:	3301      	adds	r3, #1
 801400c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801400e:	429a      	cmp	r2, r3
 8014010:	d001      	beq.n	8014016 <udp_input_local_match+0x52>
    return 0;
 8014012:	2300      	movs	r3, #0
 8014014:	e02b      	b.n	801406e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014016:	79fb      	ldrb	r3, [r7, #7]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d018      	beq.n	801404e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d013      	beq.n	801404a <udp_input_local_match+0x86>
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d00f      	beq.n	801404a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801402a:	4b17      	ldr	r3, [pc, #92]	; (8014088 <udp_input_local_match+0xc4>)
 801402c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014032:	d00a      	beq.n	801404a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	681a      	ldr	r2, [r3, #0]
 8014038:	4b13      	ldr	r3, [pc, #76]	; (8014088 <udp_input_local_match+0xc4>)
 801403a:	695b      	ldr	r3, [r3, #20]
 801403c:	405a      	eors	r2, r3
 801403e:	68bb      	ldr	r3, [r7, #8]
 8014040:	3308      	adds	r3, #8
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014046:	2b00      	cmp	r3, #0
 8014048:	d110      	bne.n	801406c <udp_input_local_match+0xa8>
          return 1;
 801404a:	2301      	movs	r3, #1
 801404c:	e00f      	b.n	801406e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d009      	beq.n	8014068 <udp_input_local_match+0xa4>
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d005      	beq.n	8014068 <udp_input_local_match+0xa4>
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	4b09      	ldr	r3, [pc, #36]	; (8014088 <udp_input_local_match+0xc4>)
 8014062:	695b      	ldr	r3, [r3, #20]
 8014064:	429a      	cmp	r2, r3
 8014066:	d101      	bne.n	801406c <udp_input_local_match+0xa8>
        return 1;
 8014068:	2301      	movs	r3, #1
 801406a:	e000      	b.n	801406e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801406c:	2300      	movs	r3, #0
}
 801406e:	4618      	mov	r0, r3
 8014070:	3710      	adds	r7, #16
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	0801eeb8 	.word	0x0801eeb8
 801407c:	0801eee8 	.word	0x0801eee8
 8014080:	0801ef0c 	.word	0x0801ef0c
 8014084:	0801ef34 	.word	0x0801ef34
 8014088:	20015920 	.word	0x20015920

0801408c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801408c:	b590      	push	{r4, r7, lr}
 801408e:	b08d      	sub	sp, #52	; 0x34
 8014090:	af02      	add	r7, sp, #8
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014096:	2300      	movs	r3, #0
 8014098:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d105      	bne.n	80140ac <udp_input+0x20>
 80140a0:	4b7c      	ldr	r3, [pc, #496]	; (8014294 <udp_input+0x208>)
 80140a2:	22cf      	movs	r2, #207	; 0xcf
 80140a4:	497c      	ldr	r1, [pc, #496]	; (8014298 <udp_input+0x20c>)
 80140a6:	487d      	ldr	r0, [pc, #500]	; (801429c <udp_input+0x210>)
 80140a8:	f007 f95e 	bl	801b368 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d105      	bne.n	80140be <udp_input+0x32>
 80140b2:	4b78      	ldr	r3, [pc, #480]	; (8014294 <udp_input+0x208>)
 80140b4:	22d0      	movs	r2, #208	; 0xd0
 80140b6:	497a      	ldr	r1, [pc, #488]	; (80142a0 <udp_input+0x214>)
 80140b8:	4878      	ldr	r0, [pc, #480]	; (801429c <udp_input+0x210>)
 80140ba:	f007 f955 	bl	801b368 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	895b      	ldrh	r3, [r3, #10]
 80140c2:	2b07      	cmp	r3, #7
 80140c4:	d803      	bhi.n	80140ce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80140c6:	6878      	ldr	r0, [r7, #4]
 80140c8:	f7f9 fa72 	bl	800d5b0 <pbuf_free>
    goto end;
 80140cc:	e0de      	b.n	801428c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80140d4:	4b73      	ldr	r3, [pc, #460]	; (80142a4 <udp_input+0x218>)
 80140d6:	695b      	ldr	r3, [r3, #20]
 80140d8:	4a72      	ldr	r2, [pc, #456]	; (80142a4 <udp_input+0x218>)
 80140da:	6812      	ldr	r2, [r2, #0]
 80140dc:	4611      	mov	r1, r2
 80140de:	4618      	mov	r0, r3
 80140e0:	f003 febc 	bl	8017e5c <ip4_addr_isbroadcast_u32>
 80140e4:	4603      	mov	r3, r0
 80140e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	881b      	ldrh	r3, [r3, #0]
 80140ec:	b29b      	uxth	r3, r3
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7f7 fdf6 	bl	800bce0 <lwip_htons>
 80140f4:	4603      	mov	r3, r0
 80140f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80140f8:	697b      	ldr	r3, [r7, #20]
 80140fa:	885b      	ldrh	r3, [r3, #2]
 80140fc:	b29b      	uxth	r3, r3
 80140fe:	4618      	mov	r0, r3
 8014100:	f7f7 fdee 	bl	800bce0 <lwip_htons>
 8014104:	4603      	mov	r3, r0
 8014106:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014108:	2300      	movs	r3, #0
 801410a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801410c:	2300      	movs	r3, #0
 801410e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014110:	2300      	movs	r3, #0
 8014112:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014114:	4b64      	ldr	r3, [pc, #400]	; (80142a8 <udp_input+0x21c>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	627b      	str	r3, [r7, #36]	; 0x24
 801411a:	e054      	b.n	80141c6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411e:	8a5b      	ldrh	r3, [r3, #18]
 8014120:	89fa      	ldrh	r2, [r7, #14]
 8014122:	429a      	cmp	r2, r3
 8014124:	d14a      	bne.n	80141bc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014126:	7cfb      	ldrb	r3, [r7, #19]
 8014128:	461a      	mov	r2, r3
 801412a:	6839      	ldr	r1, [r7, #0]
 801412c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801412e:	f7ff ff49 	bl	8013fc4 <udp_input_local_match>
 8014132:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014134:	2b00      	cmp	r3, #0
 8014136:	d041      	beq.n	80141bc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413a:	7c1b      	ldrb	r3, [r3, #16]
 801413c:	f003 0304 	and.w	r3, r3, #4
 8014140:	2b00      	cmp	r3, #0
 8014142:	d11d      	bne.n	8014180 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014144:	69fb      	ldr	r3, [r7, #28]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d102      	bne.n	8014150 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801414c:	61fb      	str	r3, [r7, #28]
 801414e:	e017      	b.n	8014180 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014150:	7cfb      	ldrb	r3, [r7, #19]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d014      	beq.n	8014180 <udp_input+0xf4>
 8014156:	4b53      	ldr	r3, [pc, #332]	; (80142a4 <udp_input+0x218>)
 8014158:	695b      	ldr	r3, [r3, #20]
 801415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801415e:	d10f      	bne.n	8014180 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	681a      	ldr	r2, [r3, #0]
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	3304      	adds	r3, #4
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	429a      	cmp	r2, r3
 801416c:	d008      	beq.n	8014180 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014170:	681a      	ldr	r2, [r3, #0]
 8014172:	683b      	ldr	r3, [r7, #0]
 8014174:	3304      	adds	r3, #4
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	429a      	cmp	r2, r3
 801417a:	d101      	bne.n	8014180 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014182:	8a9b      	ldrh	r3, [r3, #20]
 8014184:	8a3a      	ldrh	r2, [r7, #16]
 8014186:	429a      	cmp	r2, r3
 8014188:	d118      	bne.n	80141bc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801418e:	2b00      	cmp	r3, #0
 8014190:	d005      	beq.n	801419e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014194:	685a      	ldr	r2, [r3, #4]
 8014196:	4b43      	ldr	r3, [pc, #268]	; (80142a4 <udp_input+0x218>)
 8014198:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801419a:	429a      	cmp	r2, r3
 801419c:	d10e      	bne.n	80141bc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801419e:	6a3b      	ldr	r3, [r7, #32]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d014      	beq.n	80141ce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80141a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a6:	68da      	ldr	r2, [r3, #12]
 80141a8:	6a3b      	ldr	r3, [r7, #32]
 80141aa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80141ac:	4b3e      	ldr	r3, [pc, #248]	; (80142a8 <udp_input+0x21c>)
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80141b4:	4a3c      	ldr	r2, [pc, #240]	; (80142a8 <udp_input+0x21c>)
 80141b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80141ba:	e008      	b.n	80141ce <udp_input+0x142>
      }
    }

    prev = pcb;
 80141bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141be:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80141c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	627b      	str	r3, [r7, #36]	; 0x24
 80141c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d1a7      	bne.n	801411c <udp_input+0x90>
 80141cc:	e000      	b.n	80141d0 <udp_input+0x144>
        break;
 80141ce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80141d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d101      	bne.n	80141da <udp_input+0x14e>
    pcb = uncon_pcb;
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80141da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d002      	beq.n	80141e6 <udp_input+0x15a>
    for_us = 1;
 80141e0:	2301      	movs	r3, #1
 80141e2:	76fb      	strb	r3, [r7, #27]
 80141e4:	e00a      	b.n	80141fc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	3304      	adds	r3, #4
 80141ea:	681a      	ldr	r2, [r3, #0]
 80141ec:	4b2d      	ldr	r3, [pc, #180]	; (80142a4 <udp_input+0x218>)
 80141ee:	695b      	ldr	r3, [r3, #20]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	bf0c      	ite	eq
 80141f4:	2301      	moveq	r3, #1
 80141f6:	2300      	movne	r3, #0
 80141f8:	b2db      	uxtb	r3, r3
 80141fa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80141fc:	7efb      	ldrb	r3, [r7, #27]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d041      	beq.n	8014286 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014202:	2108      	movs	r1, #8
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f7f9 f91b 	bl	800d440 <pbuf_remove_header>
 801420a:	4603      	mov	r3, r0
 801420c:	2b00      	cmp	r3, #0
 801420e:	d00a      	beq.n	8014226 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014210:	4b20      	ldr	r3, [pc, #128]	; (8014294 <udp_input+0x208>)
 8014212:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014216:	4925      	ldr	r1, [pc, #148]	; (80142ac <udp_input+0x220>)
 8014218:	4820      	ldr	r0, [pc, #128]	; (801429c <udp_input+0x210>)
 801421a:	f007 f8a5 	bl	801b368 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f7f9 f9c6 	bl	800d5b0 <pbuf_free>
      goto end;
 8014224:	e032      	b.n	801428c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014228:	2b00      	cmp	r3, #0
 801422a:	d012      	beq.n	8014252 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422e:	699b      	ldr	r3, [r3, #24]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d00a      	beq.n	801424a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014236:	699c      	ldr	r4, [r3, #24]
 8014238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423a:	69d8      	ldr	r0, [r3, #28]
 801423c:	8a3b      	ldrh	r3, [r7, #16]
 801423e:	9300      	str	r3, [sp, #0]
 8014240:	4b1b      	ldr	r3, [pc, #108]	; (80142b0 <udp_input+0x224>)
 8014242:	687a      	ldr	r2, [r7, #4]
 8014244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014246:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014248:	e021      	b.n	801428e <udp_input+0x202>
        pbuf_free(p);
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f7f9 f9b0 	bl	800d5b0 <pbuf_free>
        goto end;
 8014250:	e01c      	b.n	801428c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014252:	7cfb      	ldrb	r3, [r7, #19]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d112      	bne.n	801427e <udp_input+0x1f2>
 8014258:	4b12      	ldr	r3, [pc, #72]	; (80142a4 <udp_input+0x218>)
 801425a:	695b      	ldr	r3, [r3, #20]
 801425c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014260:	2be0      	cmp	r3, #224	; 0xe0
 8014262:	d00c      	beq.n	801427e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014264:	4b0f      	ldr	r3, [pc, #60]	; (80142a4 <udp_input+0x218>)
 8014266:	899b      	ldrh	r3, [r3, #12]
 8014268:	3308      	adds	r3, #8
 801426a:	b29b      	uxth	r3, r3
 801426c:	b21b      	sxth	r3, r3
 801426e:	4619      	mov	r1, r3
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f7f9 f958 	bl	800d526 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014276:	2103      	movs	r1, #3
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f003 fab1 	bl	80177e0 <icmp_dest_unreach>
      pbuf_free(p);
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f7f9 f996 	bl	800d5b0 <pbuf_free>
  return;
 8014284:	e003      	b.n	801428e <udp_input+0x202>
    pbuf_free(p);
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f7f9 f992 	bl	800d5b0 <pbuf_free>
  return;
 801428c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801428e:	372c      	adds	r7, #44	; 0x2c
 8014290:	46bd      	mov	sp, r7
 8014292:	bd90      	pop	{r4, r7, pc}
 8014294:	0801eeb8 	.word	0x0801eeb8
 8014298:	0801ef5c 	.word	0x0801ef5c
 801429c:	0801ef0c 	.word	0x0801ef0c
 80142a0:	0801ef74 	.word	0x0801ef74
 80142a4:	20015920 	.word	0x20015920
 80142a8:	2001906c 	.word	0x2001906c
 80142ac:	0801ef90 	.word	0x0801ef90
 80142b0:	20015930 	.word	0x20015930

080142b4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]
 80142bc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d109      	bne.n	80142d8 <udp_send+0x24>
 80142c4:	4b11      	ldr	r3, [pc, #68]	; (801430c <udp_send+0x58>)
 80142c6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80142ca:	4911      	ldr	r1, [pc, #68]	; (8014310 <udp_send+0x5c>)
 80142cc:	4811      	ldr	r0, [pc, #68]	; (8014314 <udp_send+0x60>)
 80142ce:	f007 f84b 	bl	801b368 <iprintf>
 80142d2:	f06f 030f 	mvn.w	r3, #15
 80142d6:	e015      	b.n	8014304 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d109      	bne.n	80142f2 <udp_send+0x3e>
 80142de:	4b0b      	ldr	r3, [pc, #44]	; (801430c <udp_send+0x58>)
 80142e0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80142e4:	490c      	ldr	r1, [pc, #48]	; (8014318 <udp_send+0x64>)
 80142e6:	480b      	ldr	r0, [pc, #44]	; (8014314 <udp_send+0x60>)
 80142e8:	f007 f83e 	bl	801b368 <iprintf>
 80142ec:	f06f 030f 	mvn.w	r3, #15
 80142f0:	e008      	b.n	8014304 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	1d1a      	adds	r2, r3, #4
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	8a9b      	ldrh	r3, [r3, #20]
 80142fa:	6839      	ldr	r1, [r7, #0]
 80142fc:	6878      	ldr	r0, [r7, #4]
 80142fe:	f000 f80d 	bl	801431c <udp_sendto>
 8014302:	4603      	mov	r3, r0
}
 8014304:	4618      	mov	r0, r3
 8014306:	3708      	adds	r7, #8
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	0801eeb8 	.word	0x0801eeb8
 8014310:	0801efac 	.word	0x0801efac
 8014314:	0801ef0c 	.word	0x0801ef0c
 8014318:	0801efc4 	.word	0x0801efc4

0801431c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b088      	sub	sp, #32
 8014320:	af02      	add	r7, sp, #8
 8014322:	60f8      	str	r0, [r7, #12]
 8014324:	60b9      	str	r1, [r7, #8]
 8014326:	607a      	str	r2, [r7, #4]
 8014328:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d109      	bne.n	8014344 <udp_sendto+0x28>
 8014330:	4b23      	ldr	r3, [pc, #140]	; (80143c0 <udp_sendto+0xa4>)
 8014332:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014336:	4923      	ldr	r1, [pc, #140]	; (80143c4 <udp_sendto+0xa8>)
 8014338:	4823      	ldr	r0, [pc, #140]	; (80143c8 <udp_sendto+0xac>)
 801433a:	f007 f815 	bl	801b368 <iprintf>
 801433e:	f06f 030f 	mvn.w	r3, #15
 8014342:	e038      	b.n	80143b6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d109      	bne.n	801435e <udp_sendto+0x42>
 801434a:	4b1d      	ldr	r3, [pc, #116]	; (80143c0 <udp_sendto+0xa4>)
 801434c:	f240 2219 	movw	r2, #537	; 0x219
 8014350:	491e      	ldr	r1, [pc, #120]	; (80143cc <udp_sendto+0xb0>)
 8014352:	481d      	ldr	r0, [pc, #116]	; (80143c8 <udp_sendto+0xac>)
 8014354:	f007 f808 	bl	801b368 <iprintf>
 8014358:	f06f 030f 	mvn.w	r3, #15
 801435c:	e02b      	b.n	80143b6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d109      	bne.n	8014378 <udp_sendto+0x5c>
 8014364:	4b16      	ldr	r3, [pc, #88]	; (80143c0 <udp_sendto+0xa4>)
 8014366:	f240 221a 	movw	r2, #538	; 0x21a
 801436a:	4919      	ldr	r1, [pc, #100]	; (80143d0 <udp_sendto+0xb4>)
 801436c:	4816      	ldr	r0, [pc, #88]	; (80143c8 <udp_sendto+0xac>)
 801436e:	f006 fffb 	bl	801b368 <iprintf>
 8014372:	f06f 030f 	mvn.w	r3, #15
 8014376:	e01e      	b.n	80143b6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	7a1b      	ldrb	r3, [r3, #8]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d006      	beq.n	801438e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	7a1b      	ldrb	r3, [r3, #8]
 8014384:	4618      	mov	r0, r3
 8014386:	f7f8 fd1b 	bl	800cdc0 <netif_get_by_index>
 801438a:	6178      	str	r0, [r7, #20]
 801438c:	e003      	b.n	8014396 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f003 fab0 	bl	80178f4 <ip4_route>
 8014394:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014396:	697b      	ldr	r3, [r7, #20]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d102      	bne.n	80143a2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801439c:	f06f 0303 	mvn.w	r3, #3
 80143a0:	e009      	b.n	80143b6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80143a2:	887a      	ldrh	r2, [r7, #2]
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	9300      	str	r3, [sp, #0]
 80143a8:	4613      	mov	r3, r2
 80143aa:	687a      	ldr	r2, [r7, #4]
 80143ac:	68b9      	ldr	r1, [r7, #8]
 80143ae:	68f8      	ldr	r0, [r7, #12]
 80143b0:	f000 f810 	bl	80143d4 <udp_sendto_if>
 80143b4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80143b6:	4618      	mov	r0, r3
 80143b8:	3718      	adds	r7, #24
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
 80143be:	bf00      	nop
 80143c0:	0801eeb8 	.word	0x0801eeb8
 80143c4:	0801efdc 	.word	0x0801efdc
 80143c8:	0801ef0c 	.word	0x0801ef0c
 80143cc:	0801eff4 	.word	0x0801eff4
 80143d0:	0801f010 	.word	0x0801f010

080143d4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b088      	sub	sp, #32
 80143d8:	af02      	add	r7, sp, #8
 80143da:	60f8      	str	r0, [r7, #12]
 80143dc:	60b9      	str	r1, [r7, #8]
 80143de:	607a      	str	r2, [r7, #4]
 80143e0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d109      	bne.n	80143fc <udp_sendto_if+0x28>
 80143e8:	4b2e      	ldr	r3, [pc, #184]	; (80144a4 <udp_sendto_if+0xd0>)
 80143ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143ee:	492e      	ldr	r1, [pc, #184]	; (80144a8 <udp_sendto_if+0xd4>)
 80143f0:	482e      	ldr	r0, [pc, #184]	; (80144ac <udp_sendto_if+0xd8>)
 80143f2:	f006 ffb9 	bl	801b368 <iprintf>
 80143f6:	f06f 030f 	mvn.w	r3, #15
 80143fa:	e04f      	b.n	801449c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d109      	bne.n	8014416 <udp_sendto_if+0x42>
 8014402:	4b28      	ldr	r3, [pc, #160]	; (80144a4 <udp_sendto_if+0xd0>)
 8014404:	f240 2281 	movw	r2, #641	; 0x281
 8014408:	4929      	ldr	r1, [pc, #164]	; (80144b0 <udp_sendto_if+0xdc>)
 801440a:	4828      	ldr	r0, [pc, #160]	; (80144ac <udp_sendto_if+0xd8>)
 801440c:	f006 ffac 	bl	801b368 <iprintf>
 8014410:	f06f 030f 	mvn.w	r3, #15
 8014414:	e042      	b.n	801449c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d109      	bne.n	8014430 <udp_sendto_if+0x5c>
 801441c:	4b21      	ldr	r3, [pc, #132]	; (80144a4 <udp_sendto_if+0xd0>)
 801441e:	f240 2282 	movw	r2, #642	; 0x282
 8014422:	4924      	ldr	r1, [pc, #144]	; (80144b4 <udp_sendto_if+0xe0>)
 8014424:	4821      	ldr	r0, [pc, #132]	; (80144ac <udp_sendto_if+0xd8>)
 8014426:	f006 ff9f 	bl	801b368 <iprintf>
 801442a:	f06f 030f 	mvn.w	r3, #15
 801442e:	e035      	b.n	801449c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014430:	6a3b      	ldr	r3, [r7, #32]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d109      	bne.n	801444a <udp_sendto_if+0x76>
 8014436:	4b1b      	ldr	r3, [pc, #108]	; (80144a4 <udp_sendto_if+0xd0>)
 8014438:	f240 2283 	movw	r2, #643	; 0x283
 801443c:	491e      	ldr	r1, [pc, #120]	; (80144b8 <udp_sendto_if+0xe4>)
 801443e:	481b      	ldr	r0, [pc, #108]	; (80144ac <udp_sendto_if+0xd8>)
 8014440:	f006 ff92 	bl	801b368 <iprintf>
 8014444:	f06f 030f 	mvn.w	r3, #15
 8014448:	e028      	b.n	801449c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d009      	beq.n	8014464 <udp_sendto_if+0x90>
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d005      	beq.n	8014464 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014460:	2be0      	cmp	r3, #224	; 0xe0
 8014462:	d103      	bne.n	801446c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014464:	6a3b      	ldr	r3, [r7, #32]
 8014466:	3304      	adds	r3, #4
 8014468:	617b      	str	r3, [r7, #20]
 801446a:	e00b      	b.n	8014484 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	681a      	ldr	r2, [r3, #0]
 8014470:	6a3b      	ldr	r3, [r7, #32]
 8014472:	3304      	adds	r3, #4
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	429a      	cmp	r2, r3
 8014478:	d002      	beq.n	8014480 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801447a:	f06f 0303 	mvn.w	r3, #3
 801447e:	e00d      	b.n	801449c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014484:	887a      	ldrh	r2, [r7, #2]
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	9301      	str	r3, [sp, #4]
 801448a:	6a3b      	ldr	r3, [r7, #32]
 801448c:	9300      	str	r3, [sp, #0]
 801448e:	4613      	mov	r3, r2
 8014490:	687a      	ldr	r2, [r7, #4]
 8014492:	68b9      	ldr	r1, [r7, #8]
 8014494:	68f8      	ldr	r0, [r7, #12]
 8014496:	f000 f811 	bl	80144bc <udp_sendto_if_src>
 801449a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801449c:	4618      	mov	r0, r3
 801449e:	3718      	adds	r7, #24
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}
 80144a4:	0801eeb8 	.word	0x0801eeb8
 80144a8:	0801f02c 	.word	0x0801f02c
 80144ac:	0801ef0c 	.word	0x0801ef0c
 80144b0:	0801f048 	.word	0x0801f048
 80144b4:	0801f064 	.word	0x0801f064
 80144b8:	0801f084 	.word	0x0801f084

080144bc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b08c      	sub	sp, #48	; 0x30
 80144c0:	af04      	add	r7, sp, #16
 80144c2:	60f8      	str	r0, [r7, #12]
 80144c4:	60b9      	str	r1, [r7, #8]
 80144c6:	607a      	str	r2, [r7, #4]
 80144c8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d109      	bne.n	80144e4 <udp_sendto_if_src+0x28>
 80144d0:	4b65      	ldr	r3, [pc, #404]	; (8014668 <udp_sendto_if_src+0x1ac>)
 80144d2:	f240 22d1 	movw	r2, #721	; 0x2d1
 80144d6:	4965      	ldr	r1, [pc, #404]	; (801466c <udp_sendto_if_src+0x1b0>)
 80144d8:	4865      	ldr	r0, [pc, #404]	; (8014670 <udp_sendto_if_src+0x1b4>)
 80144da:	f006 ff45 	bl	801b368 <iprintf>
 80144de:	f06f 030f 	mvn.w	r3, #15
 80144e2:	e0bc      	b.n	801465e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d109      	bne.n	80144fe <udp_sendto_if_src+0x42>
 80144ea:	4b5f      	ldr	r3, [pc, #380]	; (8014668 <udp_sendto_if_src+0x1ac>)
 80144ec:	f240 22d2 	movw	r2, #722	; 0x2d2
 80144f0:	4960      	ldr	r1, [pc, #384]	; (8014674 <udp_sendto_if_src+0x1b8>)
 80144f2:	485f      	ldr	r0, [pc, #380]	; (8014670 <udp_sendto_if_src+0x1b4>)
 80144f4:	f006 ff38 	bl	801b368 <iprintf>
 80144f8:	f06f 030f 	mvn.w	r3, #15
 80144fc:	e0af      	b.n	801465e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d109      	bne.n	8014518 <udp_sendto_if_src+0x5c>
 8014504:	4b58      	ldr	r3, [pc, #352]	; (8014668 <udp_sendto_if_src+0x1ac>)
 8014506:	f240 22d3 	movw	r2, #723	; 0x2d3
 801450a:	495b      	ldr	r1, [pc, #364]	; (8014678 <udp_sendto_if_src+0x1bc>)
 801450c:	4858      	ldr	r0, [pc, #352]	; (8014670 <udp_sendto_if_src+0x1b4>)
 801450e:	f006 ff2b 	bl	801b368 <iprintf>
 8014512:	f06f 030f 	mvn.w	r3, #15
 8014516:	e0a2      	b.n	801465e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801451a:	2b00      	cmp	r3, #0
 801451c:	d109      	bne.n	8014532 <udp_sendto_if_src+0x76>
 801451e:	4b52      	ldr	r3, [pc, #328]	; (8014668 <udp_sendto_if_src+0x1ac>)
 8014520:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014524:	4955      	ldr	r1, [pc, #340]	; (801467c <udp_sendto_if_src+0x1c0>)
 8014526:	4852      	ldr	r0, [pc, #328]	; (8014670 <udp_sendto_if_src+0x1b4>)
 8014528:	f006 ff1e 	bl	801b368 <iprintf>
 801452c:	f06f 030f 	mvn.w	r3, #15
 8014530:	e095      	b.n	801465e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014534:	2b00      	cmp	r3, #0
 8014536:	d109      	bne.n	801454c <udp_sendto_if_src+0x90>
 8014538:	4b4b      	ldr	r3, [pc, #300]	; (8014668 <udp_sendto_if_src+0x1ac>)
 801453a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801453e:	4950      	ldr	r1, [pc, #320]	; (8014680 <udp_sendto_if_src+0x1c4>)
 8014540:	484b      	ldr	r0, [pc, #300]	; (8014670 <udp_sendto_if_src+0x1b4>)
 8014542:	f006 ff11 	bl	801b368 <iprintf>
 8014546:	f06f 030f 	mvn.w	r3, #15
 801454a:	e088      	b.n	801465e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	8a5b      	ldrh	r3, [r3, #18]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d10f      	bne.n	8014574 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014554:	68f9      	ldr	r1, [r7, #12]
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	8a5b      	ldrh	r3, [r3, #18]
 801455a:	461a      	mov	r2, r3
 801455c:	68f8      	ldr	r0, [r7, #12]
 801455e:	f000 f893 	bl	8014688 <udp_bind>
 8014562:	4603      	mov	r3, r0
 8014564:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014566:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d002      	beq.n	8014574 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801456e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014572:	e074      	b.n	801465e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	891b      	ldrh	r3, [r3, #8]
 8014578:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801457c:	4293      	cmp	r3, r2
 801457e:	d902      	bls.n	8014586 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014580:	f04f 33ff 	mov.w	r3, #4294967295
 8014584:	e06b      	b.n	801465e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014586:	2108      	movs	r1, #8
 8014588:	68b8      	ldr	r0, [r7, #8]
 801458a:	f7f8 ff49 	bl	800d420 <pbuf_add_header>
 801458e:	4603      	mov	r3, r0
 8014590:	2b00      	cmp	r3, #0
 8014592:	d015      	beq.n	80145c0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014594:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014598:	2108      	movs	r1, #8
 801459a:	2022      	movs	r0, #34	; 0x22
 801459c:	f7f8 fcf2 	bl	800cf84 <pbuf_alloc>
 80145a0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80145a2:	69fb      	ldr	r3, [r7, #28]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d102      	bne.n	80145ae <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80145a8:	f04f 33ff 	mov.w	r3, #4294967295
 80145ac:	e057      	b.n	801465e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	891b      	ldrh	r3, [r3, #8]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d006      	beq.n	80145c4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80145b6:	68b9      	ldr	r1, [r7, #8]
 80145b8:	69f8      	ldr	r0, [r7, #28]
 80145ba:	f7f9 f91d 	bl	800d7f8 <pbuf_chain>
 80145be:	e001      	b.n	80145c4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80145c4:	69fb      	ldr	r3, [r7, #28]
 80145c6:	895b      	ldrh	r3, [r3, #10]
 80145c8:	2b07      	cmp	r3, #7
 80145ca:	d806      	bhi.n	80145da <udp_sendto_if_src+0x11e>
 80145cc:	4b26      	ldr	r3, [pc, #152]	; (8014668 <udp_sendto_if_src+0x1ac>)
 80145ce:	f240 320d 	movw	r2, #781	; 0x30d
 80145d2:	492c      	ldr	r1, [pc, #176]	; (8014684 <udp_sendto_if_src+0x1c8>)
 80145d4:	4826      	ldr	r0, [pc, #152]	; (8014670 <udp_sendto_if_src+0x1b4>)
 80145d6:	f006 fec7 	bl	801b368 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	8a5b      	ldrh	r3, [r3, #18]
 80145e4:	4618      	mov	r0, r3
 80145e6:	f7f7 fb7b 	bl	800bce0 <lwip_htons>
 80145ea:	4603      	mov	r3, r0
 80145ec:	461a      	mov	r2, r3
 80145ee:	697b      	ldr	r3, [r7, #20]
 80145f0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80145f2:	887b      	ldrh	r3, [r7, #2]
 80145f4:	4618      	mov	r0, r3
 80145f6:	f7f7 fb73 	bl	800bce0 <lwip_htons>
 80145fa:	4603      	mov	r3, r0
 80145fc:	461a      	mov	r2, r3
 80145fe:	697b      	ldr	r3, [r7, #20]
 8014600:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014602:	697b      	ldr	r3, [r7, #20]
 8014604:	2200      	movs	r2, #0
 8014606:	719a      	strb	r2, [r3, #6]
 8014608:	2200      	movs	r2, #0
 801460a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801460c:	69fb      	ldr	r3, [r7, #28]
 801460e:	891b      	ldrh	r3, [r3, #8]
 8014610:	4618      	mov	r0, r3
 8014612:	f7f7 fb65 	bl	800bce0 <lwip_htons>
 8014616:	4603      	mov	r3, r0
 8014618:	461a      	mov	r2, r3
 801461a:	697b      	ldr	r3, [r7, #20]
 801461c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801461e:	2311      	movs	r3, #17
 8014620:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	7adb      	ldrb	r3, [r3, #11]
 8014626:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	7a9b      	ldrb	r3, [r3, #10]
 801462c:	7cb9      	ldrb	r1, [r7, #18]
 801462e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014630:	9202      	str	r2, [sp, #8]
 8014632:	7cfa      	ldrb	r2, [r7, #19]
 8014634:	9201      	str	r2, [sp, #4]
 8014636:	9300      	str	r3, [sp, #0]
 8014638:	460b      	mov	r3, r1
 801463a:	687a      	ldr	r2, [r7, #4]
 801463c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801463e:	69f8      	ldr	r0, [r7, #28]
 8014640:	f003 fb5e 	bl	8017d00 <ip4_output_if_src>
 8014644:	4603      	mov	r3, r0
 8014646:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014648:	69fa      	ldr	r2, [r7, #28]
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	429a      	cmp	r2, r3
 801464e:	d004      	beq.n	801465a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014650:	69f8      	ldr	r0, [r7, #28]
 8014652:	f7f8 ffad 	bl	800d5b0 <pbuf_free>
    q = NULL;
 8014656:	2300      	movs	r3, #0
 8014658:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801465a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801465e:	4618      	mov	r0, r3
 8014660:	3720      	adds	r7, #32
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}
 8014666:	bf00      	nop
 8014668:	0801eeb8 	.word	0x0801eeb8
 801466c:	0801f0a4 	.word	0x0801f0a4
 8014670:	0801ef0c 	.word	0x0801ef0c
 8014674:	0801f0c4 	.word	0x0801f0c4
 8014678:	0801f0e4 	.word	0x0801f0e4
 801467c:	0801f108 	.word	0x0801f108
 8014680:	0801f12c 	.word	0x0801f12c
 8014684:	0801f150 	.word	0x0801f150

08014688 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b086      	sub	sp, #24
 801468c:	af00      	add	r7, sp, #0
 801468e:	60f8      	str	r0, [r7, #12]
 8014690:	60b9      	str	r1, [r7, #8]
 8014692:	4613      	mov	r3, r2
 8014694:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d101      	bne.n	80146a0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801469c:	4b39      	ldr	r3, [pc, #228]	; (8014784 <udp_bind+0xfc>)
 801469e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d109      	bne.n	80146ba <udp_bind+0x32>
 80146a6:	4b38      	ldr	r3, [pc, #224]	; (8014788 <udp_bind+0x100>)
 80146a8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80146ac:	4937      	ldr	r1, [pc, #220]	; (801478c <udp_bind+0x104>)
 80146ae:	4838      	ldr	r0, [pc, #224]	; (8014790 <udp_bind+0x108>)
 80146b0:	f006 fe5a 	bl	801b368 <iprintf>
 80146b4:	f06f 030f 	mvn.w	r3, #15
 80146b8:	e060      	b.n	801477c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80146ba:	2300      	movs	r3, #0
 80146bc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80146be:	4b35      	ldr	r3, [pc, #212]	; (8014794 <udp_bind+0x10c>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	617b      	str	r3, [r7, #20]
 80146c4:	e009      	b.n	80146da <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80146c6:	68fa      	ldr	r2, [r7, #12]
 80146c8:	697b      	ldr	r3, [r7, #20]
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d102      	bne.n	80146d4 <udp_bind+0x4c>
      rebind = 1;
 80146ce:	2301      	movs	r3, #1
 80146d0:	74fb      	strb	r3, [r7, #19]
      break;
 80146d2:	e005      	b.n	80146e0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80146d4:	697b      	ldr	r3, [r7, #20]
 80146d6:	68db      	ldr	r3, [r3, #12]
 80146d8:	617b      	str	r3, [r7, #20]
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d1f2      	bne.n	80146c6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80146e0:	88fb      	ldrh	r3, [r7, #6]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d109      	bne.n	80146fa <udp_bind+0x72>
    port = udp_new_port();
 80146e6:	f7ff fc35 	bl	8013f54 <udp_new_port>
 80146ea:	4603      	mov	r3, r0
 80146ec:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80146ee:	88fb      	ldrh	r3, [r7, #6]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d12c      	bne.n	801474e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80146f4:	f06f 0307 	mvn.w	r3, #7
 80146f8:	e040      	b.n	801477c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80146fa:	4b26      	ldr	r3, [pc, #152]	; (8014794 <udp_bind+0x10c>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	617b      	str	r3, [r7, #20]
 8014700:	e022      	b.n	8014748 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014702:	68fa      	ldr	r2, [r7, #12]
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	429a      	cmp	r2, r3
 8014708:	d01b      	beq.n	8014742 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	8a5b      	ldrh	r3, [r3, #18]
 801470e:	88fa      	ldrh	r2, [r7, #6]
 8014710:	429a      	cmp	r2, r3
 8014712:	d116      	bne.n	8014742 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	681a      	ldr	r2, [r3, #0]
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801471c:	429a      	cmp	r2, r3
 801471e:	d00d      	beq.n	801473c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d00a      	beq.n	801473c <udp_bind+0xb4>
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d006      	beq.n	801473c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801472e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014730:	2b00      	cmp	r3, #0
 8014732:	d003      	beq.n	801473c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014734:	697b      	ldr	r3, [r7, #20]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d102      	bne.n	8014742 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801473c:	f06f 0307 	mvn.w	r3, #7
 8014740:	e01c      	b.n	801477c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014742:	697b      	ldr	r3, [r7, #20]
 8014744:	68db      	ldr	r3, [r3, #12]
 8014746:	617b      	str	r3, [r7, #20]
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d1d9      	bne.n	8014702 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d002      	beq.n	801475a <udp_bind+0xd2>
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	e000      	b.n	801475c <udp_bind+0xd4>
 801475a:	2300      	movs	r3, #0
 801475c:	68fa      	ldr	r2, [r7, #12]
 801475e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	88fa      	ldrh	r2, [r7, #6]
 8014764:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014766:	7cfb      	ldrb	r3, [r7, #19]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d106      	bne.n	801477a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801476c:	4b09      	ldr	r3, [pc, #36]	; (8014794 <udp_bind+0x10c>)
 801476e:	681a      	ldr	r2, [r3, #0]
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014774:	4a07      	ldr	r2, [pc, #28]	; (8014794 <udp_bind+0x10c>)
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801477a:	2300      	movs	r3, #0
}
 801477c:	4618      	mov	r0, r3
 801477e:	3718      	adds	r7, #24
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}
 8014784:	0801ffd4 	.word	0x0801ffd4
 8014788:	0801eeb8 	.word	0x0801eeb8
 801478c:	0801f180 	.word	0x0801f180
 8014790:	0801ef0c 	.word	0x0801ef0c
 8014794:	2001906c 	.word	0x2001906c

08014798 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8014798:	b480      	push	{r7}
 801479a:	b083      	sub	sp, #12
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d007      	beq.n	80147b8 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80147ae:	3301      	adds	r3, #1
 80147b0:	b2da      	uxtb	r2, r3
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80147b6:	e002      	b.n	80147be <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	2200      	movs	r2, #0
 80147bc:	721a      	strb	r2, [r3, #8]
}
 80147be:	bf00      	nop
 80147c0:	370c      	adds	r7, #12
 80147c2:	46bd      	mov	sp, r7
 80147c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c8:	4770      	bx	lr
	...

080147cc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b086      	sub	sp, #24
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	60f8      	str	r0, [r7, #12]
 80147d4:	60b9      	str	r1, [r7, #8]
 80147d6:	4613      	mov	r3, r2
 80147d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d109      	bne.n	80147f4 <udp_connect+0x28>
 80147e0:	4b2c      	ldr	r3, [pc, #176]	; (8014894 <udp_connect+0xc8>)
 80147e2:	f240 4235 	movw	r2, #1077	; 0x435
 80147e6:	492c      	ldr	r1, [pc, #176]	; (8014898 <udp_connect+0xcc>)
 80147e8:	482c      	ldr	r0, [pc, #176]	; (801489c <udp_connect+0xd0>)
 80147ea:	f006 fdbd 	bl	801b368 <iprintf>
 80147ee:	f06f 030f 	mvn.w	r3, #15
 80147f2:	e04b      	b.n	801488c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80147f4:	68bb      	ldr	r3, [r7, #8]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d109      	bne.n	801480e <udp_connect+0x42>
 80147fa:	4b26      	ldr	r3, [pc, #152]	; (8014894 <udp_connect+0xc8>)
 80147fc:	f240 4236 	movw	r2, #1078	; 0x436
 8014800:	4927      	ldr	r1, [pc, #156]	; (80148a0 <udp_connect+0xd4>)
 8014802:	4826      	ldr	r0, [pc, #152]	; (801489c <udp_connect+0xd0>)
 8014804:	f006 fdb0 	bl	801b368 <iprintf>
 8014808:	f06f 030f 	mvn.w	r3, #15
 801480c:	e03e      	b.n	801488c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	8a5b      	ldrh	r3, [r3, #18]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d10f      	bne.n	8014836 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014816:	68f9      	ldr	r1, [r7, #12]
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	8a5b      	ldrh	r3, [r3, #18]
 801481c:	461a      	mov	r2, r3
 801481e:	68f8      	ldr	r0, [r7, #12]
 8014820:	f7ff ff32 	bl	8014688 <udp_bind>
 8014824:	4603      	mov	r3, r0
 8014826:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014828:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d002      	beq.n	8014836 <udp_connect+0x6a>
      return err;
 8014830:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014834:	e02a      	b.n	801488c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d002      	beq.n	8014842 <udp_connect+0x76>
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	e000      	b.n	8014844 <udp_connect+0x78>
 8014842:	2300      	movs	r3, #0
 8014844:	68fa      	ldr	r2, [r7, #12]
 8014846:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	88fa      	ldrh	r2, [r7, #6]
 801484c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	7c1b      	ldrb	r3, [r3, #16]
 8014852:	f043 0304 	orr.w	r3, r3, #4
 8014856:	b2da      	uxtb	r2, r3
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801485c:	4b11      	ldr	r3, [pc, #68]	; (80148a4 <udp_connect+0xd8>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	617b      	str	r3, [r7, #20]
 8014862:	e008      	b.n	8014876 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014864:	68fa      	ldr	r2, [r7, #12]
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	429a      	cmp	r2, r3
 801486a:	d101      	bne.n	8014870 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801486c:	2300      	movs	r3, #0
 801486e:	e00d      	b.n	801488c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014870:	697b      	ldr	r3, [r7, #20]
 8014872:	68db      	ldr	r3, [r3, #12]
 8014874:	617b      	str	r3, [r7, #20]
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d1f3      	bne.n	8014864 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801487c:	4b09      	ldr	r3, [pc, #36]	; (80148a4 <udp_connect+0xd8>)
 801487e:	681a      	ldr	r2, [r3, #0]
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014884:	4a07      	ldr	r2, [pc, #28]	; (80148a4 <udp_connect+0xd8>)
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801488a:	2300      	movs	r3, #0
}
 801488c:	4618      	mov	r0, r3
 801488e:	3718      	adds	r7, #24
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	0801eeb8 	.word	0x0801eeb8
 8014898:	0801f198 	.word	0x0801f198
 801489c:	0801ef0c 	.word	0x0801ef0c
 80148a0:	0801f1b4 	.word	0x0801f1b4
 80148a4:	2001906c 	.word	0x2001906c

080148a8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b084      	sub	sp, #16
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	60f8      	str	r0, [r7, #12]
 80148b0:	60b9      	str	r1, [r7, #8]
 80148b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d107      	bne.n	80148ca <udp_recv+0x22>
 80148ba:	4b08      	ldr	r3, [pc, #32]	; (80148dc <udp_recv+0x34>)
 80148bc:	f240 428a 	movw	r2, #1162	; 0x48a
 80148c0:	4907      	ldr	r1, [pc, #28]	; (80148e0 <udp_recv+0x38>)
 80148c2:	4808      	ldr	r0, [pc, #32]	; (80148e4 <udp_recv+0x3c>)
 80148c4:	f006 fd50 	bl	801b368 <iprintf>
 80148c8:	e005      	b.n	80148d6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	68ba      	ldr	r2, [r7, #8]
 80148ce:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	687a      	ldr	r2, [r7, #4]
 80148d4:	61da      	str	r2, [r3, #28]
}
 80148d6:	3710      	adds	r7, #16
 80148d8:	46bd      	mov	sp, r7
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	0801eeb8 	.word	0x0801eeb8
 80148e0:	0801f1ec 	.word	0x0801f1ec
 80148e4:	0801ef0c 	.word	0x0801ef0c

080148e8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b084      	sub	sp, #16
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d107      	bne.n	8014906 <udp_remove+0x1e>
 80148f6:	4b19      	ldr	r3, [pc, #100]	; (801495c <udp_remove+0x74>)
 80148f8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80148fc:	4918      	ldr	r1, [pc, #96]	; (8014960 <udp_remove+0x78>)
 80148fe:	4819      	ldr	r0, [pc, #100]	; (8014964 <udp_remove+0x7c>)
 8014900:	f006 fd32 	bl	801b368 <iprintf>
 8014904:	e026      	b.n	8014954 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014906:	4b18      	ldr	r3, [pc, #96]	; (8014968 <udp_remove+0x80>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	429a      	cmp	r2, r3
 801490e:	d105      	bne.n	801491c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014910:	4b15      	ldr	r3, [pc, #84]	; (8014968 <udp_remove+0x80>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	68db      	ldr	r3, [r3, #12]
 8014916:	4a14      	ldr	r2, [pc, #80]	; (8014968 <udp_remove+0x80>)
 8014918:	6013      	str	r3, [r2, #0]
 801491a:	e017      	b.n	801494c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801491c:	4b12      	ldr	r3, [pc, #72]	; (8014968 <udp_remove+0x80>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	60fb      	str	r3, [r7, #12]
 8014922:	e010      	b.n	8014946 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d009      	beq.n	8014940 <udp_remove+0x58>
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	68db      	ldr	r3, [r3, #12]
 8014930:	687a      	ldr	r2, [r7, #4]
 8014932:	429a      	cmp	r2, r3
 8014934:	d104      	bne.n	8014940 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	68da      	ldr	r2, [r3, #12]
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	60da      	str	r2, [r3, #12]
        break;
 801493e:	e005      	b.n	801494c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	68db      	ldr	r3, [r3, #12]
 8014944:	60fb      	str	r3, [r7, #12]
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d1eb      	bne.n	8014924 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801494c:	6879      	ldr	r1, [r7, #4]
 801494e:	2000      	movs	r0, #0
 8014950:	f7f7 ff14 	bl	800c77c <memp_free>
}
 8014954:	3710      	adds	r7, #16
 8014956:	46bd      	mov	sp, r7
 8014958:	bd80      	pop	{r7, pc}
 801495a:	bf00      	nop
 801495c:	0801eeb8 	.word	0x0801eeb8
 8014960:	0801f204 	.word	0x0801f204
 8014964:	0801ef0c 	.word	0x0801ef0c
 8014968:	2001906c 	.word	0x2001906c

0801496c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014972:	2000      	movs	r0, #0
 8014974:	f7f7 fe8c 	bl	800c690 <memp_malloc>
 8014978:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d007      	beq.n	8014990 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014980:	2220      	movs	r2, #32
 8014982:	2100      	movs	r1, #0
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f006 f94f 	bl	801ac28 <memset>
    pcb->ttl = UDP_TTL;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	22ff      	movs	r2, #255	; 0xff
 801498e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014990:	687b      	ldr	r3, [r7, #4]
}
 8014992:	4618      	mov	r0, r3
 8014994:	3708      	adds	r7, #8
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}

0801499a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801499a:	b580      	push	{r7, lr}
 801499c:	b084      	sub	sp, #16
 801499e:	af00      	add	r7, sp, #0
 80149a0:	4603      	mov	r3, r0
 80149a2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80149a4:	f7ff ffe2 	bl	801496c <udp_new>
 80149a8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80149aa:	68fb      	ldr	r3, [r7, #12]
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3710      	adds	r7, #16
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80149b4:	b480      	push	{r7}
 80149b6:	b085      	sub	sp, #20
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d01e      	beq.n	8014a02 <udp_netif_ip_addr_changed+0x4e>
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d01a      	beq.n	8014a02 <udp_netif_ip_addr_changed+0x4e>
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d017      	beq.n	8014a02 <udp_netif_ip_addr_changed+0x4e>
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d013      	beq.n	8014a02 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80149da:	4b0d      	ldr	r3, [pc, #52]	; (8014a10 <udp_netif_ip_addr_changed+0x5c>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	60fb      	str	r3, [r7, #12]
 80149e0:	e00c      	b.n	80149fc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	681a      	ldr	r2, [r3, #0]
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	429a      	cmp	r2, r3
 80149ec:	d103      	bne.n	80149f6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80149ee:	683b      	ldr	r3, [r7, #0]
 80149f0:	681a      	ldr	r2, [r3, #0]
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	68db      	ldr	r3, [r3, #12]
 80149fa:	60fb      	str	r3, [r7, #12]
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d1ef      	bne.n	80149e2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014a02:	bf00      	nop
 8014a04:	3714      	adds	r7, #20
 8014a06:	46bd      	mov	sp, r7
 8014a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0c:	4770      	bx	lr
 8014a0e:	bf00      	nop
 8014a10:	2001906c 	.word	0x2001906c

08014a14 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014a18:	4b20      	ldr	r3, [pc, #128]	; (8014a9c <dhcp_inc_pcb_refcount+0x88>)
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d133      	bne.n	8014a88 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014a20:	4b1f      	ldr	r3, [pc, #124]	; (8014aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d005      	beq.n	8014a34 <dhcp_inc_pcb_refcount+0x20>
 8014a28:	4b1e      	ldr	r3, [pc, #120]	; (8014aa4 <dhcp_inc_pcb_refcount+0x90>)
 8014a2a:	22e5      	movs	r2, #229	; 0xe5
 8014a2c:	491e      	ldr	r1, [pc, #120]	; (8014aa8 <dhcp_inc_pcb_refcount+0x94>)
 8014a2e:	481f      	ldr	r0, [pc, #124]	; (8014aac <dhcp_inc_pcb_refcount+0x98>)
 8014a30:	f006 fc9a 	bl	801b368 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014a34:	f7ff ff9a 	bl	801496c <udp_new>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	4a19      	ldr	r2, [pc, #100]	; (8014aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a3c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014a3e:	4b18      	ldr	r3, [pc, #96]	; (8014aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d102      	bne.n	8014a4c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014a46:	f04f 33ff 	mov.w	r3, #4294967295
 8014a4a:	e024      	b.n	8014a96 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014a4c:	4b14      	ldr	r3, [pc, #80]	; (8014aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	7a5a      	ldrb	r2, [r3, #9]
 8014a52:	4b13      	ldr	r3, [pc, #76]	; (8014aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	f042 0220 	orr.w	r2, r2, #32
 8014a5a:	b2d2      	uxtb	r2, r2
 8014a5c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014a5e:	4b10      	ldr	r3, [pc, #64]	; (8014aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	2244      	movs	r2, #68	; 0x44
 8014a64:	4912      	ldr	r1, [pc, #72]	; (8014ab0 <dhcp_inc_pcb_refcount+0x9c>)
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7ff fe0e 	bl	8014688 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014a6c:	4b0c      	ldr	r3, [pc, #48]	; (8014aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	2243      	movs	r2, #67	; 0x43
 8014a72:	490f      	ldr	r1, [pc, #60]	; (8014ab0 <dhcp_inc_pcb_refcount+0x9c>)
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7ff fea9 	bl	80147cc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014a7a:	4b09      	ldr	r3, [pc, #36]	; (8014aa0 <dhcp_inc_pcb_refcount+0x8c>)
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	2200      	movs	r2, #0
 8014a80:	490c      	ldr	r1, [pc, #48]	; (8014ab4 <dhcp_inc_pcb_refcount+0xa0>)
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7ff ff10 	bl	80148a8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014a88:	4b04      	ldr	r3, [pc, #16]	; (8014a9c <dhcp_inc_pcb_refcount+0x88>)
 8014a8a:	781b      	ldrb	r3, [r3, #0]
 8014a8c:	3301      	adds	r3, #1
 8014a8e:	b2da      	uxtb	r2, r3
 8014a90:	4b02      	ldr	r3, [pc, #8]	; (8014a9c <dhcp_inc_pcb_refcount+0x88>)
 8014a92:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014a94:	2300      	movs	r3, #0
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	bd80      	pop	{r7, pc}
 8014a9a:	bf00      	nop
 8014a9c:	200107b8 	.word	0x200107b8
 8014aa0:	200107b4 	.word	0x200107b4
 8014aa4:	0801f21c 	.word	0x0801f21c
 8014aa8:	0801f254 	.word	0x0801f254
 8014aac:	0801f27c 	.word	0x0801f27c
 8014ab0:	0801ffd4 	.word	0x0801ffd4
 8014ab4:	08016349 	.word	0x08016349

08014ab8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014abc:	4b0e      	ldr	r3, [pc, #56]	; (8014af8 <dhcp_dec_pcb_refcount+0x40>)
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d105      	bne.n	8014ad0 <dhcp_dec_pcb_refcount+0x18>
 8014ac4:	4b0d      	ldr	r3, [pc, #52]	; (8014afc <dhcp_dec_pcb_refcount+0x44>)
 8014ac6:	22ff      	movs	r2, #255	; 0xff
 8014ac8:	490d      	ldr	r1, [pc, #52]	; (8014b00 <dhcp_dec_pcb_refcount+0x48>)
 8014aca:	480e      	ldr	r0, [pc, #56]	; (8014b04 <dhcp_dec_pcb_refcount+0x4c>)
 8014acc:	f006 fc4c 	bl	801b368 <iprintf>
  dhcp_pcb_refcount--;
 8014ad0:	4b09      	ldr	r3, [pc, #36]	; (8014af8 <dhcp_dec_pcb_refcount+0x40>)
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	3b01      	subs	r3, #1
 8014ad6:	b2da      	uxtb	r2, r3
 8014ad8:	4b07      	ldr	r3, [pc, #28]	; (8014af8 <dhcp_dec_pcb_refcount+0x40>)
 8014ada:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014adc:	4b06      	ldr	r3, [pc, #24]	; (8014af8 <dhcp_dec_pcb_refcount+0x40>)
 8014ade:	781b      	ldrb	r3, [r3, #0]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d107      	bne.n	8014af4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014ae4:	4b08      	ldr	r3, [pc, #32]	; (8014b08 <dhcp_dec_pcb_refcount+0x50>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7ff fefd 	bl	80148e8 <udp_remove>
    dhcp_pcb = NULL;
 8014aee:	4b06      	ldr	r3, [pc, #24]	; (8014b08 <dhcp_dec_pcb_refcount+0x50>)
 8014af0:	2200      	movs	r2, #0
 8014af2:	601a      	str	r2, [r3, #0]
  }
}
 8014af4:	bf00      	nop
 8014af6:	bd80      	pop	{r7, pc}
 8014af8:	200107b8 	.word	0x200107b8
 8014afc:	0801f21c 	.word	0x0801f21c
 8014b00:	0801f2a4 	.word	0x0801f2a4
 8014b04:	0801f27c 	.word	0x0801f27c
 8014b08:	200107b4 	.word	0x200107b4

08014b0c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b084      	sub	sp, #16
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b18:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014b1a:	210c      	movs	r1, #12
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f001 f855 	bl	8015bcc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014b22:	4b06      	ldr	r3, [pc, #24]	; (8014b3c <dhcp_handle_nak+0x30>)
 8014b24:	4a05      	ldr	r2, [pc, #20]	; (8014b3c <dhcp_handle_nak+0x30>)
 8014b26:	4905      	ldr	r1, [pc, #20]	; (8014b3c <dhcp_handle_nak+0x30>)
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f7f7 ffc9 	bl	800cac0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f000 fc48 	bl	80153c4 <dhcp_discover>
}
 8014b34:	bf00      	nop
 8014b36:	3710      	adds	r7, #16
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}
 8014b3c:	0801ffd4 	.word	0x0801ffd4

08014b40 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b4c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014b4e:	2108      	movs	r1, #8
 8014b50:	68f8      	ldr	r0, [r7, #12]
 8014b52:	f001 f83b 	bl	8015bcc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	331c      	adds	r3, #28
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f002 fb3c 	bl	80171dc <etharp_query>
 8014b64:	4603      	mov	r3, r0
 8014b66:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	799b      	ldrb	r3, [r3, #6]
 8014b6c:	2bff      	cmp	r3, #255	; 0xff
 8014b6e:	d005      	beq.n	8014b7c <dhcp_check+0x3c>
    dhcp->tries++;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	799b      	ldrb	r3, [r3, #6]
 8014b74:	3301      	adds	r3, #1
 8014b76:	b2da      	uxtb	r2, r3
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014b7c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014b80:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014b82:	893b      	ldrh	r3, [r7, #8]
 8014b84:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014b88:	4a06      	ldr	r2, [pc, #24]	; (8014ba4 <dhcp_check+0x64>)
 8014b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8014b8e:	1152      	asrs	r2, r2, #5
 8014b90:	17db      	asrs	r3, r3, #31
 8014b92:	1ad3      	subs	r3, r2, r3
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014b9a:	bf00      	nop
 8014b9c:	3710      	adds	r7, #16
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	10624dd3 	.word	0x10624dd3

08014ba8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b084      	sub	sp, #16
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
 8014bb0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bb6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014bb8:	4b0c      	ldr	r3, [pc, #48]	; (8014bec <dhcp_handle_offer+0x44>)
 8014bba:	789b      	ldrb	r3, [r3, #2]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d011      	beq.n	8014be4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014bc6:	4b0a      	ldr	r3, [pc, #40]	; (8014bf0 <dhcp_handle_offer+0x48>)
 8014bc8:	689b      	ldr	r3, [r3, #8]
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7f7 f89d 	bl	800bd0a <lwip_htonl>
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014bd6:	683b      	ldr	r3, [r7, #0]
 8014bd8:	691a      	ldr	r2, [r3, #16]
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f000 f808 	bl	8014bf4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014be4:	bf00      	nop
 8014be6:	3710      	adds	r7, #16
 8014be8:	46bd      	mov	sp, r7
 8014bea:	bd80      	pop	{r7, pc}
 8014bec:	20019070 	.word	0x20019070
 8014bf0:	20019078 	.word	0x20019078

08014bf4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014bf4:	b5b0      	push	{r4, r5, r7, lr}
 8014bf6:	b08a      	sub	sp, #40	; 0x28
 8014bf8:	af02      	add	r7, sp, #8
 8014bfa:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d109      	bne.n	8014c16 <dhcp_select+0x22>
 8014c02:	4b71      	ldr	r3, [pc, #452]	; (8014dc8 <dhcp_select+0x1d4>)
 8014c04:	f240 1277 	movw	r2, #375	; 0x177
 8014c08:	4970      	ldr	r1, [pc, #448]	; (8014dcc <dhcp_select+0x1d8>)
 8014c0a:	4871      	ldr	r0, [pc, #452]	; (8014dd0 <dhcp_select+0x1dc>)
 8014c0c:	f006 fbac 	bl	801b368 <iprintf>
 8014c10:	f06f 030f 	mvn.w	r3, #15
 8014c14:	e0d3      	b.n	8014dbe <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c1a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014c1c:	69bb      	ldr	r3, [r7, #24]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d109      	bne.n	8014c36 <dhcp_select+0x42>
 8014c22:	4b69      	ldr	r3, [pc, #420]	; (8014dc8 <dhcp_select+0x1d4>)
 8014c24:	f240 1279 	movw	r2, #377	; 0x179
 8014c28:	496a      	ldr	r1, [pc, #424]	; (8014dd4 <dhcp_select+0x1e0>)
 8014c2a:	4869      	ldr	r0, [pc, #420]	; (8014dd0 <dhcp_select+0x1dc>)
 8014c2c:	f006 fb9c 	bl	801b368 <iprintf>
 8014c30:	f06f 0305 	mvn.w	r3, #5
 8014c34:	e0c3      	b.n	8014dbe <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014c36:	2101      	movs	r1, #1
 8014c38:	69b8      	ldr	r0, [r7, #24]
 8014c3a:	f000 ffc7 	bl	8015bcc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014c3e:	f107 030c 	add.w	r3, r7, #12
 8014c42:	2203      	movs	r2, #3
 8014c44:	69b9      	ldr	r1, [r7, #24]
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	f001 fc4c 	bl	80164e4 <dhcp_create_msg>
 8014c4c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	f000 8085 	beq.w	8014d60 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014c5c:	89b8      	ldrh	r0, [r7, #12]
 8014c5e:	693b      	ldr	r3, [r7, #16]
 8014c60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c64:	2302      	movs	r3, #2
 8014c66:	2239      	movs	r2, #57	; 0x39
 8014c68:	f000 ffca 	bl	8015c00 <dhcp_option>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014c70:	89b8      	ldrh	r0, [r7, #12]
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c7c:	461a      	mov	r2, r3
 8014c7e:	f001 f819 	bl	8015cb4 <dhcp_option_short>
 8014c82:	4603      	mov	r3, r0
 8014c84:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014c86:	89b8      	ldrh	r0, [r7, #12]
 8014c88:	693b      	ldr	r3, [r7, #16]
 8014c8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c8e:	2304      	movs	r3, #4
 8014c90:	2232      	movs	r2, #50	; 0x32
 8014c92:	f000 ffb5 	bl	8015c00 <dhcp_option>
 8014c96:	4603      	mov	r3, r0
 8014c98:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014c9a:	89bc      	ldrh	r4, [r7, #12]
 8014c9c:	693b      	ldr	r3, [r7, #16]
 8014c9e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014ca2:	69bb      	ldr	r3, [r7, #24]
 8014ca4:	69db      	ldr	r3, [r3, #28]
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7f7 f82f 	bl	800bd0a <lwip_htonl>
 8014cac:	4603      	mov	r3, r0
 8014cae:	461a      	mov	r2, r3
 8014cb0:	4629      	mov	r1, r5
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	f001 f830 	bl	8015d18 <dhcp_option_long>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014cbc:	89b8      	ldrh	r0, [r7, #12]
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cc4:	2304      	movs	r3, #4
 8014cc6:	2236      	movs	r2, #54	; 0x36
 8014cc8:	f000 ff9a 	bl	8015c00 <dhcp_option>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014cd0:	89bc      	ldrh	r4, [r7, #12]
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	699b      	ldr	r3, [r3, #24]
 8014cdc:	4618      	mov	r0, r3
 8014cde:	f7f7 f814 	bl	800bd0a <lwip_htonl>
 8014ce2:	4603      	mov	r3, r0
 8014ce4:	461a      	mov	r2, r3
 8014ce6:	4629      	mov	r1, r5
 8014ce8:	4620      	mov	r0, r4
 8014cea:	f001 f815 	bl	8015d18 <dhcp_option_long>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014cf2:	89b8      	ldrh	r0, [r7, #12]
 8014cf4:	693b      	ldr	r3, [r7, #16]
 8014cf6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cfa:	2303      	movs	r3, #3
 8014cfc:	2237      	movs	r2, #55	; 0x37
 8014cfe:	f000 ff7f 	bl	8015c00 <dhcp_option>
 8014d02:	4603      	mov	r3, r0
 8014d04:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d06:	2300      	movs	r3, #0
 8014d08:	77bb      	strb	r3, [r7, #30]
 8014d0a:	e00e      	b.n	8014d2a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014d0c:	89b8      	ldrh	r0, [r7, #12]
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d14:	7fbb      	ldrb	r3, [r7, #30]
 8014d16:	4a30      	ldr	r2, [pc, #192]	; (8014dd8 <dhcp_select+0x1e4>)
 8014d18:	5cd3      	ldrb	r3, [r2, r3]
 8014d1a:	461a      	mov	r2, r3
 8014d1c:	f000 ffa4 	bl	8015c68 <dhcp_option_byte>
 8014d20:	4603      	mov	r3, r0
 8014d22:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d24:	7fbb      	ldrb	r3, [r7, #30]
 8014d26:	3301      	adds	r3, #1
 8014d28:	77bb      	strb	r3, [r7, #30]
 8014d2a:	7fbb      	ldrb	r3, [r7, #30]
 8014d2c:	2b02      	cmp	r3, #2
 8014d2e:	d9ed      	bls.n	8014d0c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014d30:	89b8      	ldrh	r0, [r7, #12]
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	33f0      	adds	r3, #240	; 0xf0
 8014d36:	697a      	ldr	r2, [r7, #20]
 8014d38:	4619      	mov	r1, r3
 8014d3a:	f001 fca9 	bl	8016690 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014d3e:	4b27      	ldr	r3, [pc, #156]	; (8014ddc <dhcp_select+0x1e8>)
 8014d40:	6818      	ldr	r0, [r3, #0]
 8014d42:	4b27      	ldr	r3, [pc, #156]	; (8014de0 <dhcp_select+0x1ec>)
 8014d44:	9301      	str	r3, [sp, #4]
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	9300      	str	r3, [sp, #0]
 8014d4a:	2343      	movs	r3, #67	; 0x43
 8014d4c:	4a25      	ldr	r2, [pc, #148]	; (8014de4 <dhcp_select+0x1f0>)
 8014d4e:	6979      	ldr	r1, [r7, #20]
 8014d50:	f7ff fbb4 	bl	80144bc <udp_sendto_if_src>
 8014d54:	4603      	mov	r3, r0
 8014d56:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014d58:	6978      	ldr	r0, [r7, #20]
 8014d5a:	f7f8 fc29 	bl	800d5b0 <pbuf_free>
 8014d5e:	e001      	b.n	8014d64 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014d60:	23ff      	movs	r3, #255	; 0xff
 8014d62:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014d64:	69bb      	ldr	r3, [r7, #24]
 8014d66:	799b      	ldrb	r3, [r3, #6]
 8014d68:	2bff      	cmp	r3, #255	; 0xff
 8014d6a:	d005      	beq.n	8014d78 <dhcp_select+0x184>
    dhcp->tries++;
 8014d6c:	69bb      	ldr	r3, [r7, #24]
 8014d6e:	799b      	ldrb	r3, [r3, #6]
 8014d70:	3301      	adds	r3, #1
 8014d72:	b2da      	uxtb	r2, r3
 8014d74:	69bb      	ldr	r3, [r7, #24]
 8014d76:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014d78:	69bb      	ldr	r3, [r7, #24]
 8014d7a:	799b      	ldrb	r3, [r3, #6]
 8014d7c:	2b05      	cmp	r3, #5
 8014d7e:	d80d      	bhi.n	8014d9c <dhcp_select+0x1a8>
 8014d80:	69bb      	ldr	r3, [r7, #24]
 8014d82:	799b      	ldrb	r3, [r3, #6]
 8014d84:	461a      	mov	r2, r3
 8014d86:	2301      	movs	r3, #1
 8014d88:	4093      	lsls	r3, r2
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	461a      	mov	r2, r3
 8014d8e:	0152      	lsls	r2, r2, #5
 8014d90:	1ad2      	subs	r2, r2, r3
 8014d92:	0092      	lsls	r2, r2, #2
 8014d94:	4413      	add	r3, r2
 8014d96:	00db      	lsls	r3, r3, #3
 8014d98:	b29b      	uxth	r3, r3
 8014d9a:	e001      	b.n	8014da0 <dhcp_select+0x1ac>
 8014d9c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014da0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014da2:	89fb      	ldrh	r3, [r7, #14]
 8014da4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014da8:	4a0f      	ldr	r2, [pc, #60]	; (8014de8 <dhcp_select+0x1f4>)
 8014daa:	fb82 1203 	smull	r1, r2, r2, r3
 8014dae:	1152      	asrs	r2, r2, #5
 8014db0:	17db      	asrs	r3, r3, #31
 8014db2:	1ad3      	subs	r3, r2, r3
 8014db4:	b29a      	uxth	r2, r3
 8014db6:	69bb      	ldr	r3, [r7, #24]
 8014db8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3720      	adds	r7, #32
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	0801f21c 	.word	0x0801f21c
 8014dcc:	0801f2c8 	.word	0x0801f2c8
 8014dd0:	0801f27c 	.word	0x0801f27c
 8014dd4:	0801f2e4 	.word	0x0801f2e4
 8014dd8:	20000030 	.word	0x20000030
 8014ddc:	200107b4 	.word	0x200107b4
 8014de0:	0801ffd4 	.word	0x0801ffd4
 8014de4:	0801ffd8 	.word	0x0801ffd8
 8014de8:	10624dd3 	.word	0x10624dd3

08014dec <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014df2:	4b27      	ldr	r3, [pc, #156]	; (8014e90 <dhcp_coarse_tmr+0xa4>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	607b      	str	r3, [r7, #4]
 8014df8:	e042      	b.n	8014e80 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dfe:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014e00:	683b      	ldr	r3, [r7, #0]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d039      	beq.n	8014e7a <dhcp_coarse_tmr+0x8e>
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	795b      	ldrb	r3, [r3, #5]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d035      	beq.n	8014e7a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	8a9b      	ldrh	r3, [r3, #20]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d012      	beq.n	8014e3c <dhcp_coarse_tmr+0x50>
 8014e16:	683b      	ldr	r3, [r7, #0]
 8014e18:	8a5b      	ldrh	r3, [r3, #18]
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	b29a      	uxth	r2, r3
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	825a      	strh	r2, [r3, #18]
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	8a5a      	ldrh	r2, [r3, #18]
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	8a9b      	ldrh	r3, [r3, #20]
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d106      	bne.n	8014e3c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f000 fe32 	bl	8015a98 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f000 f969 	bl	801510c <dhcp_start>
 8014e3a:	e01e      	b.n	8014e7a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	8a1b      	ldrh	r3, [r3, #16]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d00b      	beq.n	8014e5c <dhcp_coarse_tmr+0x70>
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	8a1b      	ldrh	r3, [r3, #16]
 8014e48:	1e5a      	subs	r2, r3, #1
 8014e4a:	b291      	uxth	r1, r2
 8014e4c:	683a      	ldr	r2, [r7, #0]
 8014e4e:	8211      	strh	r1, [r2, #16]
 8014e50:	2b01      	cmp	r3, #1
 8014e52:	d103      	bne.n	8014e5c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f000 f8c6 	bl	8014fe6 <dhcp_t2_timeout>
 8014e5a:	e00e      	b.n	8014e7a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	89db      	ldrh	r3, [r3, #14]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d00a      	beq.n	8014e7a <dhcp_coarse_tmr+0x8e>
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	89db      	ldrh	r3, [r3, #14]
 8014e68:	1e5a      	subs	r2, r3, #1
 8014e6a:	b291      	uxth	r1, r2
 8014e6c:	683a      	ldr	r2, [r7, #0]
 8014e6e:	81d1      	strh	r1, [r2, #14]
 8014e70:	2b01      	cmp	r3, #1
 8014e72:	d102      	bne.n	8014e7a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f000 f888 	bl	8014f8a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	607b      	str	r3, [r7, #4]
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d1b9      	bne.n	8014dfa <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014e86:	bf00      	nop
 8014e88:	bf00      	nop
 8014e8a:	3708      	adds	r7, #8
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}
 8014e90:	20019044 	.word	0x20019044

08014e94 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b082      	sub	sp, #8
 8014e98:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014e9a:	4b16      	ldr	r3, [pc, #88]	; (8014ef4 <dhcp_fine_tmr+0x60>)
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	607b      	str	r3, [r7, #4]
 8014ea0:	e020      	b.n	8014ee4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ea6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d017      	beq.n	8014ede <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	891b      	ldrh	r3, [r3, #8]
 8014eb2:	2b01      	cmp	r3, #1
 8014eb4:	d906      	bls.n	8014ec4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014eb6:	683b      	ldr	r3, [r7, #0]
 8014eb8:	891b      	ldrh	r3, [r3, #8]
 8014eba:	3b01      	subs	r3, #1
 8014ebc:	b29a      	uxth	r2, r3
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	811a      	strh	r2, [r3, #8]
 8014ec2:	e00c      	b.n	8014ede <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	891b      	ldrh	r3, [r3, #8]
 8014ec8:	2b01      	cmp	r3, #1
 8014eca:	d108      	bne.n	8014ede <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	891b      	ldrh	r3, [r3, #8]
 8014ed0:	3b01      	subs	r3, #1
 8014ed2:	b29a      	uxth	r2, r3
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f000 f80d 	bl	8014ef8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	607b      	str	r3, [r7, #4]
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d1db      	bne.n	8014ea2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014eea:	bf00      	nop
 8014eec:	bf00      	nop
 8014eee:	3708      	adds	r7, #8
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}
 8014ef4:	20019044 	.word	0x20019044

08014ef8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b084      	sub	sp, #16
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f04:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	795b      	ldrb	r3, [r3, #5]
 8014f0a:	2b0c      	cmp	r3, #12
 8014f0c:	d003      	beq.n	8014f16 <dhcp_timeout+0x1e>
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	795b      	ldrb	r3, [r3, #5]
 8014f12:	2b06      	cmp	r3, #6
 8014f14:	d103      	bne.n	8014f1e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f000 fa54 	bl	80153c4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014f1c:	e031      	b.n	8014f82 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	795b      	ldrb	r3, [r3, #5]
 8014f22:	2b01      	cmp	r3, #1
 8014f24:	d10e      	bne.n	8014f44 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	799b      	ldrb	r3, [r3, #6]
 8014f2a:	2b05      	cmp	r3, #5
 8014f2c:	d803      	bhi.n	8014f36 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f7ff fe60 	bl	8014bf4 <dhcp_select>
}
 8014f34:	e025      	b.n	8014f82 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f000 fdae 	bl	8015a98 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014f3c:	6878      	ldr	r0, [r7, #4]
 8014f3e:	f000 f8e5 	bl	801510c <dhcp_start>
}
 8014f42:	e01e      	b.n	8014f82 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	795b      	ldrb	r3, [r3, #5]
 8014f48:	2b08      	cmp	r3, #8
 8014f4a:	d10b      	bne.n	8014f64 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	799b      	ldrb	r3, [r3, #6]
 8014f50:	2b01      	cmp	r3, #1
 8014f52:	d803      	bhi.n	8014f5c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f7ff fdf3 	bl	8014b40 <dhcp_check>
}
 8014f5a:	e012      	b.n	8014f82 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014f5c:	6878      	ldr	r0, [r7, #4]
 8014f5e:	f000 fad3 	bl	8015508 <dhcp_bind>
}
 8014f62:	e00e      	b.n	8014f82 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	795b      	ldrb	r3, [r3, #5]
 8014f68:	2b03      	cmp	r3, #3
 8014f6a:	d10a      	bne.n	8014f82 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	799b      	ldrb	r3, [r3, #6]
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	d803      	bhi.n	8014f7c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f000 fcd9 	bl	801592c <dhcp_reboot>
}
 8014f7a:	e002      	b.n	8014f82 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f000 fa21 	bl	80153c4 <dhcp_discover>
}
 8014f82:	bf00      	nop
 8014f84:	3710      	adds	r7, #16
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}

08014f8a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014f8a:	b580      	push	{r7, lr}
 8014f8c:	b084      	sub	sp, #16
 8014f8e:	af00      	add	r7, sp, #0
 8014f90:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f96:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	795b      	ldrb	r3, [r3, #5]
 8014f9c:	2b01      	cmp	r3, #1
 8014f9e:	d007      	beq.n	8014fb0 <dhcp_t1_timeout+0x26>
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	795b      	ldrb	r3, [r3, #5]
 8014fa4:	2b0a      	cmp	r3, #10
 8014fa6:	d003      	beq.n	8014fb0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014fac:	2b05      	cmp	r3, #5
 8014fae:	d116      	bne.n	8014fde <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f000 fb83 	bl	80156bc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	899b      	ldrh	r3, [r3, #12]
 8014fba:	461a      	mov	r2, r3
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	8a5b      	ldrh	r3, [r3, #18]
 8014fc0:	1ad3      	subs	r3, r2, r3
 8014fc2:	2b01      	cmp	r3, #1
 8014fc4:	dd0b      	ble.n	8014fde <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	899b      	ldrh	r3, [r3, #12]
 8014fca:	461a      	mov	r2, r3
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	8a5b      	ldrh	r3, [r3, #18]
 8014fd0:	1ad3      	subs	r3, r2, r3
 8014fd2:	0fda      	lsrs	r2, r3, #31
 8014fd4:	4413      	add	r3, r2
 8014fd6:	105b      	asrs	r3, r3, #1
 8014fd8:	b29a      	uxth	r2, r3
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014fde:	bf00      	nop
 8014fe0:	3710      	adds	r7, #16
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}

08014fe6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014fe6:	b580      	push	{r7, lr}
 8014fe8:	b084      	sub	sp, #16
 8014fea:	af00      	add	r7, sp, #0
 8014fec:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ff2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	795b      	ldrb	r3, [r3, #5]
 8014ff8:	2b01      	cmp	r3, #1
 8014ffa:	d00b      	beq.n	8015014 <dhcp_t2_timeout+0x2e>
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	795b      	ldrb	r3, [r3, #5]
 8015000:	2b0a      	cmp	r3, #10
 8015002:	d007      	beq.n	8015014 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015008:	2b05      	cmp	r3, #5
 801500a:	d003      	beq.n	8015014 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	795b      	ldrb	r3, [r3, #5]
 8015010:	2b04      	cmp	r3, #4
 8015012:	d116      	bne.n	8015042 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015014:	6878      	ldr	r0, [r7, #4]
 8015016:	f000 fbed 	bl	80157f4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	8a9b      	ldrh	r3, [r3, #20]
 801501e:	461a      	mov	r2, r3
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	8a5b      	ldrh	r3, [r3, #18]
 8015024:	1ad3      	subs	r3, r2, r3
 8015026:	2b01      	cmp	r3, #1
 8015028:	dd0b      	ble.n	8015042 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	8a9b      	ldrh	r3, [r3, #20]
 801502e:	461a      	mov	r2, r3
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	8a5b      	ldrh	r3, [r3, #18]
 8015034:	1ad3      	subs	r3, r2, r3
 8015036:	0fda      	lsrs	r2, r3, #31
 8015038:	4413      	add	r3, r2
 801503a:	105b      	asrs	r3, r3, #1
 801503c:	b29a      	uxth	r2, r3
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8015042:	bf00      	nop
 8015044:	3710      	adds	r7, #16
 8015046:	46bd      	mov	sp, r7
 8015048:	bd80      	pop	{r7, pc}
	...

0801504c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b084      	sub	sp, #16
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801505a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	2200      	movs	r2, #0
 8015060:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	2200      	movs	r2, #0
 8015066:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015068:	4b26      	ldr	r3, [pc, #152]	; (8015104 <dhcp_handle_ack+0xb8>)
 801506a:	78db      	ldrb	r3, [r3, #3]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d003      	beq.n	8015078 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015070:	4b25      	ldr	r3, [pc, #148]	; (8015108 <dhcp_handle_ack+0xbc>)
 8015072:	68da      	ldr	r2, [r3, #12]
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015078:	4b22      	ldr	r3, [pc, #136]	; (8015104 <dhcp_handle_ack+0xb8>)
 801507a:	791b      	ldrb	r3, [r3, #4]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d004      	beq.n	801508a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015080:	4b21      	ldr	r3, [pc, #132]	; (8015108 <dhcp_handle_ack+0xbc>)
 8015082:	691a      	ldr	r2, [r3, #16]
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	62da      	str	r2, [r3, #44]	; 0x2c
 8015088:	e004      	b.n	8015094 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801508e:	085a      	lsrs	r2, r3, #1
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015094:	4b1b      	ldr	r3, [pc, #108]	; (8015104 <dhcp_handle_ack+0xb8>)
 8015096:	795b      	ldrb	r3, [r3, #5]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d004      	beq.n	80150a6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801509c:	4b1a      	ldr	r3, [pc, #104]	; (8015108 <dhcp_handle_ack+0xbc>)
 801509e:	695a      	ldr	r2, [r3, #20]
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	631a      	str	r2, [r3, #48]	; 0x30
 80150a4:	e007      	b.n	80150b6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80150aa:	4613      	mov	r3, r2
 80150ac:	00db      	lsls	r3, r3, #3
 80150ae:	1a9b      	subs	r3, r3, r2
 80150b0:	08da      	lsrs	r2, r3, #3
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	691a      	ldr	r2, [r3, #16]
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80150be:	4b11      	ldr	r3, [pc, #68]	; (8015104 <dhcp_handle_ack+0xb8>)
 80150c0:	799b      	ldrb	r3, [r3, #6]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d00b      	beq.n	80150de <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80150c6:	4b10      	ldr	r3, [pc, #64]	; (8015108 <dhcp_handle_ack+0xbc>)
 80150c8:	699b      	ldr	r3, [r3, #24]
 80150ca:	4618      	mov	r0, r3
 80150cc:	f7f6 fe1d 	bl	800bd0a <lwip_htonl>
 80150d0:	4602      	mov	r2, r0
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	2201      	movs	r2, #1
 80150da:	71da      	strb	r2, [r3, #7]
 80150dc:	e002      	b.n	80150e4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	2200      	movs	r2, #0
 80150e2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80150e4:	4b07      	ldr	r3, [pc, #28]	; (8015104 <dhcp_handle_ack+0xb8>)
 80150e6:	79db      	ldrb	r3, [r3, #7]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d007      	beq.n	80150fc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80150ec:	4b06      	ldr	r3, [pc, #24]	; (8015108 <dhcp_handle_ack+0xbc>)
 80150ee:	69db      	ldr	r3, [r3, #28]
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7f6 fe0a 	bl	800bd0a <lwip_htonl>
 80150f6:	4602      	mov	r2, r0
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80150fc:	bf00      	nop
 80150fe:	3710      	adds	r7, #16
 8015100:	46bd      	mov	sp, r7
 8015102:	bd80      	pop	{r7, pc}
 8015104:	20019070 	.word	0x20019070
 8015108:	20019078 	.word	0x20019078

0801510c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b084      	sub	sp, #16
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d109      	bne.n	801512e <dhcp_start+0x22>
 801511a:	4b37      	ldr	r3, [pc, #220]	; (80151f8 <dhcp_start+0xec>)
 801511c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015120:	4936      	ldr	r1, [pc, #216]	; (80151fc <dhcp_start+0xf0>)
 8015122:	4837      	ldr	r0, [pc, #220]	; (8015200 <dhcp_start+0xf4>)
 8015124:	f006 f920 	bl	801b368 <iprintf>
 8015128:	f06f 030f 	mvn.w	r3, #15
 801512c:	e060      	b.n	80151f0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015134:	f003 0301 	and.w	r3, r3, #1
 8015138:	2b00      	cmp	r3, #0
 801513a:	d109      	bne.n	8015150 <dhcp_start+0x44>
 801513c:	4b2e      	ldr	r3, [pc, #184]	; (80151f8 <dhcp_start+0xec>)
 801513e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8015142:	4930      	ldr	r1, [pc, #192]	; (8015204 <dhcp_start+0xf8>)
 8015144:	482e      	ldr	r0, [pc, #184]	; (8015200 <dhcp_start+0xf4>)
 8015146:	f006 f90f 	bl	801b368 <iprintf>
 801514a:	f06f 030f 	mvn.w	r3, #15
 801514e:	e04f      	b.n	80151f0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015154:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801515a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801515e:	d202      	bcs.n	8015166 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015160:	f04f 33ff 	mov.w	r3, #4294967295
 8015164:	e044      	b.n	80151f0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d10d      	bne.n	8015188 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801516c:	2034      	movs	r0, #52	; 0x34
 801516e:	f7f7 f8eb 	bl	800c348 <mem_malloc>
 8015172:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d102      	bne.n	8015180 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801517a:	f04f 33ff 	mov.w	r3, #4294967295
 801517e:	e037      	b.n	80151f0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	68fa      	ldr	r2, [r7, #12]
 8015184:	625a      	str	r2, [r3, #36]	; 0x24
 8015186:	e005      	b.n	8015194 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	791b      	ldrb	r3, [r3, #4]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d001      	beq.n	8015194 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015190:	f7ff fc92 	bl	8014ab8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015194:	2234      	movs	r2, #52	; 0x34
 8015196:	2100      	movs	r1, #0
 8015198:	68f8      	ldr	r0, [r7, #12]
 801519a:	f005 fd45 	bl	801ac28 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801519e:	f7ff fc39 	bl	8014a14 <dhcp_inc_pcb_refcount>
 80151a2:	4603      	mov	r3, r0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d002      	beq.n	80151ae <dhcp_start+0xa2>
    return ERR_MEM;
 80151a8:	f04f 33ff 	mov.w	r3, #4294967295
 80151ac:	e020      	b.n	80151f0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	2201      	movs	r2, #1
 80151b2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80151ba:	f003 0304 	and.w	r3, r3, #4
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d105      	bne.n	80151ce <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80151c2:	2102      	movs	r1, #2
 80151c4:	68f8      	ldr	r0, [r7, #12]
 80151c6:	f000 fd01 	bl	8015bcc <dhcp_set_state>
    return ERR_OK;
 80151ca:	2300      	movs	r3, #0
 80151cc:	e010      	b.n	80151f0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80151ce:	6878      	ldr	r0, [r7, #4]
 80151d0:	f000 f8f8 	bl	80153c4 <dhcp_discover>
 80151d4:	4603      	mov	r3, r0
 80151d6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80151d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d005      	beq.n	80151ec <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80151e0:	6878      	ldr	r0, [r7, #4]
 80151e2:	f000 fc59 	bl	8015a98 <dhcp_release_and_stop>
    return ERR_MEM;
 80151e6:	f04f 33ff 	mov.w	r3, #4294967295
 80151ea:	e001      	b.n	80151f0 <dhcp_start+0xe4>
  }
  return result;
 80151ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3710      	adds	r7, #16
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}
 80151f8:	0801f21c 	.word	0x0801f21c
 80151fc:	0801f300 	.word	0x0801f300
 8015200:	0801f27c 	.word	0x0801f27c
 8015204:	0801f344 	.word	0x0801f344

08015208 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015214:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d025      	beq.n	8015268 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	795b      	ldrb	r3, [r3, #5]
 8015220:	2b0a      	cmp	r3, #10
 8015222:	d008      	beq.n	8015236 <dhcp_network_changed+0x2e>
 8015224:	2b0a      	cmp	r3, #10
 8015226:	dc0d      	bgt.n	8015244 <dhcp_network_changed+0x3c>
 8015228:	2b00      	cmp	r3, #0
 801522a:	d01f      	beq.n	801526c <dhcp_network_changed+0x64>
 801522c:	2b00      	cmp	r3, #0
 801522e:	db09      	blt.n	8015244 <dhcp_network_changed+0x3c>
 8015230:	3b03      	subs	r3, #3
 8015232:	2b02      	cmp	r3, #2
 8015234:	d806      	bhi.n	8015244 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	2200      	movs	r2, #0
 801523a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	f000 fb75 	bl	801592c <dhcp_reboot>
      break;
 8015242:	e014      	b.n	801526e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	795b      	ldrb	r3, [r3, #5]
 8015248:	2b0c      	cmp	r3, #12
 801524a:	d906      	bls.n	801525a <dhcp_network_changed+0x52>
 801524c:	4b09      	ldr	r3, [pc, #36]	; (8015274 <dhcp_network_changed+0x6c>)
 801524e:	f240 326d 	movw	r2, #877	; 0x36d
 8015252:	4909      	ldr	r1, [pc, #36]	; (8015278 <dhcp_network_changed+0x70>)
 8015254:	4809      	ldr	r0, [pc, #36]	; (801527c <dhcp_network_changed+0x74>)
 8015256:	f006 f887 	bl	801b368 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	2200      	movs	r2, #0
 801525e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8015260:	6878      	ldr	r0, [r7, #4]
 8015262:	f000 f8af 	bl	80153c4 <dhcp_discover>
      break;
 8015266:	e002      	b.n	801526e <dhcp_network_changed+0x66>
    return;
 8015268:	bf00      	nop
 801526a:	e000      	b.n	801526e <dhcp_network_changed+0x66>
      break;
 801526c:	bf00      	nop
  }
}
 801526e:	3710      	adds	r7, #16
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	0801f21c 	.word	0x0801f21c
 8015278:	0801f368 	.word	0x0801f368
 801527c:	0801f27c 	.word	0x0801f27c

08015280 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d107      	bne.n	80152a0 <dhcp_arp_reply+0x20>
 8015290:	4b0e      	ldr	r3, [pc, #56]	; (80152cc <dhcp_arp_reply+0x4c>)
 8015292:	f240 328b 	movw	r2, #907	; 0x38b
 8015296:	490e      	ldr	r1, [pc, #56]	; (80152d0 <dhcp_arp_reply+0x50>)
 8015298:	480e      	ldr	r0, [pc, #56]	; (80152d4 <dhcp_arp_reply+0x54>)
 801529a:	f006 f865 	bl	801b368 <iprintf>
 801529e:	e012      	b.n	80152c6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d00c      	beq.n	80152c6 <dhcp_arp_reply+0x46>
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	795b      	ldrb	r3, [r3, #5]
 80152b0:	2b08      	cmp	r3, #8
 80152b2:	d108      	bne.n	80152c6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	681a      	ldr	r2, [r3, #0]
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	69db      	ldr	r3, [r3, #28]
 80152bc:	429a      	cmp	r2, r3
 80152be:	d102      	bne.n	80152c6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f000 f809 	bl	80152d8 <dhcp_decline>
    }
  }
}
 80152c6:	3710      	adds	r7, #16
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}
 80152cc:	0801f21c 	.word	0x0801f21c
 80152d0:	0801f300 	.word	0x0801f300
 80152d4:	0801f27c 	.word	0x0801f27c

080152d8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80152d8:	b5b0      	push	{r4, r5, r7, lr}
 80152da:	b08a      	sub	sp, #40	; 0x28
 80152dc:	af02      	add	r7, sp, #8
 80152de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152e4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80152e6:	210c      	movs	r1, #12
 80152e8:	69b8      	ldr	r0, [r7, #24]
 80152ea:	f000 fc6f 	bl	8015bcc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80152ee:	f107 030c 	add.w	r3, r7, #12
 80152f2:	2204      	movs	r2, #4
 80152f4:	69b9      	ldr	r1, [r7, #24]
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f001 f8f4 	bl	80164e4 <dhcp_create_msg>
 80152fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d035      	beq.n	8015370 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015304:	697b      	ldr	r3, [r7, #20]
 8015306:	685b      	ldr	r3, [r3, #4]
 8015308:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801530a:	89b8      	ldrh	r0, [r7, #12]
 801530c:	693b      	ldr	r3, [r7, #16]
 801530e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015312:	2304      	movs	r3, #4
 8015314:	2232      	movs	r2, #50	; 0x32
 8015316:	f000 fc73 	bl	8015c00 <dhcp_option>
 801531a:	4603      	mov	r3, r0
 801531c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801531e:	89bc      	ldrh	r4, [r7, #12]
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015326:	69bb      	ldr	r3, [r7, #24]
 8015328:	69db      	ldr	r3, [r3, #28]
 801532a:	4618      	mov	r0, r3
 801532c:	f7f6 fced 	bl	800bd0a <lwip_htonl>
 8015330:	4603      	mov	r3, r0
 8015332:	461a      	mov	r2, r3
 8015334:	4629      	mov	r1, r5
 8015336:	4620      	mov	r0, r4
 8015338:	f000 fcee 	bl	8015d18 <dhcp_option_long>
 801533c:	4603      	mov	r3, r0
 801533e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015340:	89b8      	ldrh	r0, [r7, #12]
 8015342:	693b      	ldr	r3, [r7, #16]
 8015344:	33f0      	adds	r3, #240	; 0xf0
 8015346:	697a      	ldr	r2, [r7, #20]
 8015348:	4619      	mov	r1, r3
 801534a:	f001 f9a1 	bl	8016690 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801534e:	4b19      	ldr	r3, [pc, #100]	; (80153b4 <dhcp_decline+0xdc>)
 8015350:	6818      	ldr	r0, [r3, #0]
 8015352:	4b19      	ldr	r3, [pc, #100]	; (80153b8 <dhcp_decline+0xe0>)
 8015354:	9301      	str	r3, [sp, #4]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	9300      	str	r3, [sp, #0]
 801535a:	2343      	movs	r3, #67	; 0x43
 801535c:	4a17      	ldr	r2, [pc, #92]	; (80153bc <dhcp_decline+0xe4>)
 801535e:	6979      	ldr	r1, [r7, #20]
 8015360:	f7ff f8ac 	bl	80144bc <udp_sendto_if_src>
 8015364:	4603      	mov	r3, r0
 8015366:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015368:	6978      	ldr	r0, [r7, #20]
 801536a:	f7f8 f921 	bl	800d5b0 <pbuf_free>
 801536e:	e001      	b.n	8015374 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015370:	23ff      	movs	r3, #255	; 0xff
 8015372:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015374:	69bb      	ldr	r3, [r7, #24]
 8015376:	799b      	ldrb	r3, [r3, #6]
 8015378:	2bff      	cmp	r3, #255	; 0xff
 801537a:	d005      	beq.n	8015388 <dhcp_decline+0xb0>
    dhcp->tries++;
 801537c:	69bb      	ldr	r3, [r7, #24]
 801537e:	799b      	ldrb	r3, [r3, #6]
 8015380:	3301      	adds	r3, #1
 8015382:	b2da      	uxtb	r2, r3
 8015384:	69bb      	ldr	r3, [r7, #24]
 8015386:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015388:	f242 7310 	movw	r3, #10000	; 0x2710
 801538c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801538e:	89fb      	ldrh	r3, [r7, #14]
 8015390:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015394:	4a0a      	ldr	r2, [pc, #40]	; (80153c0 <dhcp_decline+0xe8>)
 8015396:	fb82 1203 	smull	r1, r2, r2, r3
 801539a:	1152      	asrs	r2, r2, #5
 801539c:	17db      	asrs	r3, r3, #31
 801539e:	1ad3      	subs	r3, r2, r3
 80153a0:	b29a      	uxth	r2, r3
 80153a2:	69bb      	ldr	r3, [r7, #24]
 80153a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80153a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3720      	adds	r7, #32
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bdb0      	pop	{r4, r5, r7, pc}
 80153b2:	bf00      	nop
 80153b4:	200107b4 	.word	0x200107b4
 80153b8:	0801ffd4 	.word	0x0801ffd4
 80153bc:	0801ffd8 	.word	0x0801ffd8
 80153c0:	10624dd3 	.word	0x10624dd3

080153c4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b08a      	sub	sp, #40	; 0x28
 80153c8:	af02      	add	r7, sp, #8
 80153ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153d0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80153d2:	2300      	movs	r3, #0
 80153d4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80153d6:	69bb      	ldr	r3, [r7, #24]
 80153d8:	2200      	movs	r2, #0
 80153da:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80153dc:	2106      	movs	r1, #6
 80153de:	69b8      	ldr	r0, [r7, #24]
 80153e0:	f000 fbf4 	bl	8015bcc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80153e4:	f107 0308 	add.w	r3, r7, #8
 80153e8:	2201      	movs	r2, #1
 80153ea:	69b9      	ldr	r1, [r7, #24]
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f001 f879 	bl	80164e4 <dhcp_create_msg>
 80153f2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80153f4:	693b      	ldr	r3, [r7, #16]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d04b      	beq.n	8015492 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	685b      	ldr	r3, [r3, #4]
 80153fe:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015400:	8938      	ldrh	r0, [r7, #8]
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015408:	2302      	movs	r3, #2
 801540a:	2239      	movs	r2, #57	; 0x39
 801540c:	f000 fbf8 	bl	8015c00 <dhcp_option>
 8015410:	4603      	mov	r3, r0
 8015412:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015414:	8938      	ldrh	r0, [r7, #8]
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015420:	461a      	mov	r2, r3
 8015422:	f000 fc47 	bl	8015cb4 <dhcp_option_short>
 8015426:	4603      	mov	r3, r0
 8015428:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801542a:	8938      	ldrh	r0, [r7, #8]
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015432:	2303      	movs	r3, #3
 8015434:	2237      	movs	r2, #55	; 0x37
 8015436:	f000 fbe3 	bl	8015c00 <dhcp_option>
 801543a:	4603      	mov	r3, r0
 801543c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801543e:	2300      	movs	r3, #0
 8015440:	77fb      	strb	r3, [r7, #31]
 8015442:	e00e      	b.n	8015462 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015444:	8938      	ldrh	r0, [r7, #8]
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801544c:	7ffb      	ldrb	r3, [r7, #31]
 801544e:	4a29      	ldr	r2, [pc, #164]	; (80154f4 <dhcp_discover+0x130>)
 8015450:	5cd3      	ldrb	r3, [r2, r3]
 8015452:	461a      	mov	r2, r3
 8015454:	f000 fc08 	bl	8015c68 <dhcp_option_byte>
 8015458:	4603      	mov	r3, r0
 801545a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801545c:	7ffb      	ldrb	r3, [r7, #31]
 801545e:	3301      	adds	r3, #1
 8015460:	77fb      	strb	r3, [r7, #31]
 8015462:	7ffb      	ldrb	r3, [r7, #31]
 8015464:	2b02      	cmp	r3, #2
 8015466:	d9ed      	bls.n	8015444 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015468:	8938      	ldrh	r0, [r7, #8]
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	33f0      	adds	r3, #240	; 0xf0
 801546e:	693a      	ldr	r2, [r7, #16]
 8015470:	4619      	mov	r1, r3
 8015472:	f001 f90d 	bl	8016690 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015476:	4b20      	ldr	r3, [pc, #128]	; (80154f8 <dhcp_discover+0x134>)
 8015478:	6818      	ldr	r0, [r3, #0]
 801547a:	4b20      	ldr	r3, [pc, #128]	; (80154fc <dhcp_discover+0x138>)
 801547c:	9301      	str	r3, [sp, #4]
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	9300      	str	r3, [sp, #0]
 8015482:	2343      	movs	r3, #67	; 0x43
 8015484:	4a1e      	ldr	r2, [pc, #120]	; (8015500 <dhcp_discover+0x13c>)
 8015486:	6939      	ldr	r1, [r7, #16]
 8015488:	f7ff f818 	bl	80144bc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801548c:	6938      	ldr	r0, [r7, #16]
 801548e:	f7f8 f88f 	bl	800d5b0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015492:	69bb      	ldr	r3, [r7, #24]
 8015494:	799b      	ldrb	r3, [r3, #6]
 8015496:	2bff      	cmp	r3, #255	; 0xff
 8015498:	d005      	beq.n	80154a6 <dhcp_discover+0xe2>
    dhcp->tries++;
 801549a:	69bb      	ldr	r3, [r7, #24]
 801549c:	799b      	ldrb	r3, [r3, #6]
 801549e:	3301      	adds	r3, #1
 80154a0:	b2da      	uxtb	r2, r3
 80154a2:	69bb      	ldr	r3, [r7, #24]
 80154a4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80154a6:	69bb      	ldr	r3, [r7, #24]
 80154a8:	799b      	ldrb	r3, [r3, #6]
 80154aa:	2b05      	cmp	r3, #5
 80154ac:	d80d      	bhi.n	80154ca <dhcp_discover+0x106>
 80154ae:	69bb      	ldr	r3, [r7, #24]
 80154b0:	799b      	ldrb	r3, [r3, #6]
 80154b2:	461a      	mov	r2, r3
 80154b4:	2301      	movs	r3, #1
 80154b6:	4093      	lsls	r3, r2
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	461a      	mov	r2, r3
 80154bc:	0152      	lsls	r2, r2, #5
 80154be:	1ad2      	subs	r2, r2, r3
 80154c0:	0092      	lsls	r2, r2, #2
 80154c2:	4413      	add	r3, r2
 80154c4:	00db      	lsls	r3, r3, #3
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	e001      	b.n	80154ce <dhcp_discover+0x10a>
 80154ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80154ce:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80154d0:	897b      	ldrh	r3, [r7, #10]
 80154d2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80154d6:	4a0b      	ldr	r2, [pc, #44]	; (8015504 <dhcp_discover+0x140>)
 80154d8:	fb82 1203 	smull	r1, r2, r2, r3
 80154dc:	1152      	asrs	r2, r2, #5
 80154de:	17db      	asrs	r3, r3, #31
 80154e0:	1ad3      	subs	r3, r2, r3
 80154e2:	b29a      	uxth	r2, r3
 80154e4:	69bb      	ldr	r3, [r7, #24]
 80154e6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80154e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	3720      	adds	r7, #32
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}
 80154f4:	20000030 	.word	0x20000030
 80154f8:	200107b4 	.word	0x200107b4
 80154fc:	0801ffd4 	.word	0x0801ffd4
 8015500:	0801ffd8 	.word	0x0801ffd8
 8015504:	10624dd3 	.word	0x10624dd3

08015508 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b088      	sub	sp, #32
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d107      	bne.n	8015526 <dhcp_bind+0x1e>
 8015516:	4b64      	ldr	r3, [pc, #400]	; (80156a8 <dhcp_bind+0x1a0>)
 8015518:	f240 4215 	movw	r2, #1045	; 0x415
 801551c:	4963      	ldr	r1, [pc, #396]	; (80156ac <dhcp_bind+0x1a4>)
 801551e:	4864      	ldr	r0, [pc, #400]	; (80156b0 <dhcp_bind+0x1a8>)
 8015520:	f005 ff22 	bl	801b368 <iprintf>
 8015524:	e0bc      	b.n	80156a0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801552a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801552c:	69bb      	ldr	r3, [r7, #24]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d107      	bne.n	8015542 <dhcp_bind+0x3a>
 8015532:	4b5d      	ldr	r3, [pc, #372]	; (80156a8 <dhcp_bind+0x1a0>)
 8015534:	f240 4217 	movw	r2, #1047	; 0x417
 8015538:	495e      	ldr	r1, [pc, #376]	; (80156b4 <dhcp_bind+0x1ac>)
 801553a:	485d      	ldr	r0, [pc, #372]	; (80156b0 <dhcp_bind+0x1a8>)
 801553c:	f005 ff14 	bl	801b368 <iprintf>
 8015540:	e0ae      	b.n	80156a0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015542:	69bb      	ldr	r3, [r7, #24]
 8015544:	2200      	movs	r2, #0
 8015546:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015548:	69bb      	ldr	r3, [r7, #24]
 801554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015550:	d019      	beq.n	8015586 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015552:	69bb      	ldr	r3, [r7, #24]
 8015554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015556:	331e      	adds	r3, #30
 8015558:	4a57      	ldr	r2, [pc, #348]	; (80156b8 <dhcp_bind+0x1b0>)
 801555a:	fba2 2303 	umull	r2, r3, r2, r3
 801555e:	095b      	lsrs	r3, r3, #5
 8015560:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015568:	d302      	bcc.n	8015570 <dhcp_bind+0x68>
      timeout = 0xffff;
 801556a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801556e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015570:	69fb      	ldr	r3, [r7, #28]
 8015572:	b29a      	uxth	r2, r3
 8015574:	69bb      	ldr	r3, [r7, #24]
 8015576:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015578:	69bb      	ldr	r3, [r7, #24]
 801557a:	8a9b      	ldrh	r3, [r3, #20]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d102      	bne.n	8015586 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015580:	69bb      	ldr	r3, [r7, #24]
 8015582:	2201      	movs	r2, #1
 8015584:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015586:	69bb      	ldr	r3, [r7, #24]
 8015588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801558a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801558e:	d01d      	beq.n	80155cc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015594:	331e      	adds	r3, #30
 8015596:	4a48      	ldr	r2, [pc, #288]	; (80156b8 <dhcp_bind+0x1b0>)
 8015598:	fba2 2303 	umull	r2, r3, r2, r3
 801559c:	095b      	lsrs	r3, r3, #5
 801559e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80155a0:	69fb      	ldr	r3, [r7, #28]
 80155a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155a6:	d302      	bcc.n	80155ae <dhcp_bind+0xa6>
      timeout = 0xffff;
 80155a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155ac:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80155ae:	69fb      	ldr	r3, [r7, #28]
 80155b0:	b29a      	uxth	r2, r3
 80155b2:	69bb      	ldr	r3, [r7, #24]
 80155b4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80155b6:	69bb      	ldr	r3, [r7, #24]
 80155b8:	895b      	ldrh	r3, [r3, #10]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d102      	bne.n	80155c4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80155be:	69bb      	ldr	r3, [r7, #24]
 80155c0:	2201      	movs	r2, #1
 80155c2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80155c4:	69bb      	ldr	r3, [r7, #24]
 80155c6:	895a      	ldrh	r2, [r3, #10]
 80155c8:	69bb      	ldr	r3, [r7, #24]
 80155ca:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80155cc:	69bb      	ldr	r3, [r7, #24]
 80155ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155d4:	d01d      	beq.n	8015612 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80155d6:	69bb      	ldr	r3, [r7, #24]
 80155d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155da:	331e      	adds	r3, #30
 80155dc:	4a36      	ldr	r2, [pc, #216]	; (80156b8 <dhcp_bind+0x1b0>)
 80155de:	fba2 2303 	umull	r2, r3, r2, r3
 80155e2:	095b      	lsrs	r3, r3, #5
 80155e4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80155e6:	69fb      	ldr	r3, [r7, #28]
 80155e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155ec:	d302      	bcc.n	80155f4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80155ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80155f2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80155f4:	69fb      	ldr	r3, [r7, #28]
 80155f6:	b29a      	uxth	r2, r3
 80155f8:	69bb      	ldr	r3, [r7, #24]
 80155fa:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80155fc:	69bb      	ldr	r3, [r7, #24]
 80155fe:	899b      	ldrh	r3, [r3, #12]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d102      	bne.n	801560a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015604:	69bb      	ldr	r3, [r7, #24]
 8015606:	2201      	movs	r2, #1
 8015608:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801560a:	69bb      	ldr	r3, [r7, #24]
 801560c:	899a      	ldrh	r2, [r3, #12]
 801560e:	69bb      	ldr	r3, [r7, #24]
 8015610:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	895a      	ldrh	r2, [r3, #10]
 8015616:	69bb      	ldr	r3, [r7, #24]
 8015618:	899b      	ldrh	r3, [r3, #12]
 801561a:	429a      	cmp	r2, r3
 801561c:	d306      	bcc.n	801562c <dhcp_bind+0x124>
 801561e:	69bb      	ldr	r3, [r7, #24]
 8015620:	899b      	ldrh	r3, [r3, #12]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d002      	beq.n	801562c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8015626:	69bb      	ldr	r3, [r7, #24]
 8015628:	2200      	movs	r2, #0
 801562a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801562c:	69bb      	ldr	r3, [r7, #24]
 801562e:	79db      	ldrb	r3, [r3, #7]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d003      	beq.n	801563c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015634:	69bb      	ldr	r3, [r7, #24]
 8015636:	6a1b      	ldr	r3, [r3, #32]
 8015638:	613b      	str	r3, [r7, #16]
 801563a:	e014      	b.n	8015666 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801563c:	69bb      	ldr	r3, [r7, #24]
 801563e:	331c      	adds	r3, #28
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015648:	2b00      	cmp	r3, #0
 801564a:	db02      	blt.n	8015652 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801564c:	23ff      	movs	r3, #255	; 0xff
 801564e:	613b      	str	r3, [r7, #16]
 8015650:	e009      	b.n	8015666 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015652:	7dfb      	ldrb	r3, [r7, #23]
 8015654:	2bbf      	cmp	r3, #191	; 0xbf
 8015656:	d903      	bls.n	8015660 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015658:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801565c:	613b      	str	r3, [r7, #16]
 801565e:	e002      	b.n	8015666 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015664:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015666:	69bb      	ldr	r3, [r7, #24]
 8015668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801566a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d108      	bne.n	8015684 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015672:	69bb      	ldr	r3, [r7, #24]
 8015674:	69da      	ldr	r2, [r3, #28]
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	4013      	ands	r3, r2
 801567a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015682:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015684:	210a      	movs	r1, #10
 8015686:	69b8      	ldr	r0, [r7, #24]
 8015688:	f000 faa0 	bl	8015bcc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801568c:	69bb      	ldr	r3, [r7, #24]
 801568e:	f103 011c 	add.w	r1, r3, #28
 8015692:	f107 030c 	add.w	r3, r7, #12
 8015696:	f107 0210 	add.w	r2, r7, #16
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f7f7 fa10 	bl	800cac0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80156a0:	3720      	adds	r7, #32
 80156a2:	46bd      	mov	sp, r7
 80156a4:	bd80      	pop	{r7, pc}
 80156a6:	bf00      	nop
 80156a8:	0801f21c 	.word	0x0801f21c
 80156ac:	0801f37c 	.word	0x0801f37c
 80156b0:	0801f27c 	.word	0x0801f27c
 80156b4:	0801f398 	.word	0x0801f398
 80156b8:	88888889 	.word	0x88888889

080156bc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b08a      	sub	sp, #40	; 0x28
 80156c0:	af02      	add	r7, sp, #8
 80156c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156c8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80156ca:	2105      	movs	r1, #5
 80156cc:	69b8      	ldr	r0, [r7, #24]
 80156ce:	f000 fa7d 	bl	8015bcc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80156d2:	f107 030c 	add.w	r3, r7, #12
 80156d6:	2203      	movs	r2, #3
 80156d8:	69b9      	ldr	r1, [r7, #24]
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f000 ff02 	bl	80164e4 <dhcp_create_msg>
 80156e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d04e      	beq.n	8015786 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	685b      	ldr	r3, [r3, #4]
 80156ec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80156ee:	89b8      	ldrh	r0, [r7, #12]
 80156f0:	693b      	ldr	r3, [r7, #16]
 80156f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80156f6:	2302      	movs	r3, #2
 80156f8:	2239      	movs	r2, #57	; 0x39
 80156fa:	f000 fa81 	bl	8015c00 <dhcp_option>
 80156fe:	4603      	mov	r3, r0
 8015700:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015702:	89b8      	ldrh	r0, [r7, #12]
 8015704:	693b      	ldr	r3, [r7, #16]
 8015706:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801570e:	461a      	mov	r2, r3
 8015710:	f000 fad0 	bl	8015cb4 <dhcp_option_short>
 8015714:	4603      	mov	r3, r0
 8015716:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015718:	89b8      	ldrh	r0, [r7, #12]
 801571a:	693b      	ldr	r3, [r7, #16]
 801571c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015720:	2303      	movs	r3, #3
 8015722:	2237      	movs	r2, #55	; 0x37
 8015724:	f000 fa6c 	bl	8015c00 <dhcp_option>
 8015728:	4603      	mov	r3, r0
 801572a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801572c:	2300      	movs	r3, #0
 801572e:	77bb      	strb	r3, [r7, #30]
 8015730:	e00e      	b.n	8015750 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015732:	89b8      	ldrh	r0, [r7, #12]
 8015734:	693b      	ldr	r3, [r7, #16]
 8015736:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801573a:	7fbb      	ldrb	r3, [r7, #30]
 801573c:	4a2a      	ldr	r2, [pc, #168]	; (80157e8 <dhcp_renew+0x12c>)
 801573e:	5cd3      	ldrb	r3, [r2, r3]
 8015740:	461a      	mov	r2, r3
 8015742:	f000 fa91 	bl	8015c68 <dhcp_option_byte>
 8015746:	4603      	mov	r3, r0
 8015748:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801574a:	7fbb      	ldrb	r3, [r7, #30]
 801574c:	3301      	adds	r3, #1
 801574e:	77bb      	strb	r3, [r7, #30]
 8015750:	7fbb      	ldrb	r3, [r7, #30]
 8015752:	2b02      	cmp	r3, #2
 8015754:	d9ed      	bls.n	8015732 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015756:	89b8      	ldrh	r0, [r7, #12]
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	33f0      	adds	r3, #240	; 0xf0
 801575c:	697a      	ldr	r2, [r7, #20]
 801575e:	4619      	mov	r1, r3
 8015760:	f000 ff96 	bl	8016690 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015764:	4b21      	ldr	r3, [pc, #132]	; (80157ec <dhcp_renew+0x130>)
 8015766:	6818      	ldr	r0, [r3, #0]
 8015768:	69bb      	ldr	r3, [r7, #24]
 801576a:	f103 0218 	add.w	r2, r3, #24
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	9300      	str	r3, [sp, #0]
 8015772:	2343      	movs	r3, #67	; 0x43
 8015774:	6979      	ldr	r1, [r7, #20]
 8015776:	f7fe fe2d 	bl	80143d4 <udp_sendto_if>
 801577a:	4603      	mov	r3, r0
 801577c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801577e:	6978      	ldr	r0, [r7, #20]
 8015780:	f7f7 ff16 	bl	800d5b0 <pbuf_free>
 8015784:	e001      	b.n	801578a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015786:	23ff      	movs	r3, #255	; 0xff
 8015788:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801578a:	69bb      	ldr	r3, [r7, #24]
 801578c:	799b      	ldrb	r3, [r3, #6]
 801578e:	2bff      	cmp	r3, #255	; 0xff
 8015790:	d005      	beq.n	801579e <dhcp_renew+0xe2>
    dhcp->tries++;
 8015792:	69bb      	ldr	r3, [r7, #24]
 8015794:	799b      	ldrb	r3, [r3, #6]
 8015796:	3301      	adds	r3, #1
 8015798:	b2da      	uxtb	r2, r3
 801579a:	69bb      	ldr	r3, [r7, #24]
 801579c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801579e:	69bb      	ldr	r3, [r7, #24]
 80157a0:	799b      	ldrb	r3, [r3, #6]
 80157a2:	2b09      	cmp	r3, #9
 80157a4:	d80a      	bhi.n	80157bc <dhcp_renew+0x100>
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	799b      	ldrb	r3, [r3, #6]
 80157aa:	b29b      	uxth	r3, r3
 80157ac:	461a      	mov	r2, r3
 80157ae:	0152      	lsls	r2, r2, #5
 80157b0:	1ad2      	subs	r2, r2, r3
 80157b2:	0092      	lsls	r2, r2, #2
 80157b4:	4413      	add	r3, r2
 80157b6:	011b      	lsls	r3, r3, #4
 80157b8:	b29b      	uxth	r3, r3
 80157ba:	e001      	b.n	80157c0 <dhcp_renew+0x104>
 80157bc:	f644 6320 	movw	r3, #20000	; 0x4e20
 80157c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80157c2:	89fb      	ldrh	r3, [r7, #14]
 80157c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80157c8:	4a09      	ldr	r2, [pc, #36]	; (80157f0 <dhcp_renew+0x134>)
 80157ca:	fb82 1203 	smull	r1, r2, r2, r3
 80157ce:	1152      	asrs	r2, r2, #5
 80157d0:	17db      	asrs	r3, r3, #31
 80157d2:	1ad3      	subs	r3, r2, r3
 80157d4:	b29a      	uxth	r2, r3
 80157d6:	69bb      	ldr	r3, [r7, #24]
 80157d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80157da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3720      	adds	r7, #32
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	20000030 	.word	0x20000030
 80157ec:	200107b4 	.word	0x200107b4
 80157f0:	10624dd3 	.word	0x10624dd3

080157f4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b08a      	sub	sp, #40	; 0x28
 80157f8:	af02      	add	r7, sp, #8
 80157fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015800:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015802:	2104      	movs	r1, #4
 8015804:	69b8      	ldr	r0, [r7, #24]
 8015806:	f000 f9e1 	bl	8015bcc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801580a:	f107 030c 	add.w	r3, r7, #12
 801580e:	2203      	movs	r2, #3
 8015810:	69b9      	ldr	r1, [r7, #24]
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f000 fe66 	bl	80164e4 <dhcp_create_msg>
 8015818:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d04c      	beq.n	80158ba <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015820:	697b      	ldr	r3, [r7, #20]
 8015822:	685b      	ldr	r3, [r3, #4]
 8015824:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015826:	89b8      	ldrh	r0, [r7, #12]
 8015828:	693b      	ldr	r3, [r7, #16]
 801582a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801582e:	2302      	movs	r3, #2
 8015830:	2239      	movs	r2, #57	; 0x39
 8015832:	f000 f9e5 	bl	8015c00 <dhcp_option>
 8015836:	4603      	mov	r3, r0
 8015838:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801583a:	89b8      	ldrh	r0, [r7, #12]
 801583c:	693b      	ldr	r3, [r7, #16]
 801583e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015846:	461a      	mov	r2, r3
 8015848:	f000 fa34 	bl	8015cb4 <dhcp_option_short>
 801584c:	4603      	mov	r3, r0
 801584e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015850:	89b8      	ldrh	r0, [r7, #12]
 8015852:	693b      	ldr	r3, [r7, #16]
 8015854:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015858:	2303      	movs	r3, #3
 801585a:	2237      	movs	r2, #55	; 0x37
 801585c:	f000 f9d0 	bl	8015c00 <dhcp_option>
 8015860:	4603      	mov	r3, r0
 8015862:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015864:	2300      	movs	r3, #0
 8015866:	77bb      	strb	r3, [r7, #30]
 8015868:	e00e      	b.n	8015888 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801586a:	89b8      	ldrh	r0, [r7, #12]
 801586c:	693b      	ldr	r3, [r7, #16]
 801586e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015872:	7fbb      	ldrb	r3, [r7, #30]
 8015874:	4a29      	ldr	r2, [pc, #164]	; (801591c <dhcp_rebind+0x128>)
 8015876:	5cd3      	ldrb	r3, [r2, r3]
 8015878:	461a      	mov	r2, r3
 801587a:	f000 f9f5 	bl	8015c68 <dhcp_option_byte>
 801587e:	4603      	mov	r3, r0
 8015880:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015882:	7fbb      	ldrb	r3, [r7, #30]
 8015884:	3301      	adds	r3, #1
 8015886:	77bb      	strb	r3, [r7, #30]
 8015888:	7fbb      	ldrb	r3, [r7, #30]
 801588a:	2b02      	cmp	r3, #2
 801588c:	d9ed      	bls.n	801586a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801588e:	89b8      	ldrh	r0, [r7, #12]
 8015890:	693b      	ldr	r3, [r7, #16]
 8015892:	33f0      	adds	r3, #240	; 0xf0
 8015894:	697a      	ldr	r2, [r7, #20]
 8015896:	4619      	mov	r1, r3
 8015898:	f000 fefa 	bl	8016690 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801589c:	4b20      	ldr	r3, [pc, #128]	; (8015920 <dhcp_rebind+0x12c>)
 801589e:	6818      	ldr	r0, [r3, #0]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	9300      	str	r3, [sp, #0]
 80158a4:	2343      	movs	r3, #67	; 0x43
 80158a6:	4a1f      	ldr	r2, [pc, #124]	; (8015924 <dhcp_rebind+0x130>)
 80158a8:	6979      	ldr	r1, [r7, #20]
 80158aa:	f7fe fd93 	bl	80143d4 <udp_sendto_if>
 80158ae:	4603      	mov	r3, r0
 80158b0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80158b2:	6978      	ldr	r0, [r7, #20]
 80158b4:	f7f7 fe7c 	bl	800d5b0 <pbuf_free>
 80158b8:	e001      	b.n	80158be <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80158ba:	23ff      	movs	r3, #255	; 0xff
 80158bc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80158be:	69bb      	ldr	r3, [r7, #24]
 80158c0:	799b      	ldrb	r3, [r3, #6]
 80158c2:	2bff      	cmp	r3, #255	; 0xff
 80158c4:	d005      	beq.n	80158d2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80158c6:	69bb      	ldr	r3, [r7, #24]
 80158c8:	799b      	ldrb	r3, [r3, #6]
 80158ca:	3301      	adds	r3, #1
 80158cc:	b2da      	uxtb	r2, r3
 80158ce:	69bb      	ldr	r3, [r7, #24]
 80158d0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80158d2:	69bb      	ldr	r3, [r7, #24]
 80158d4:	799b      	ldrb	r3, [r3, #6]
 80158d6:	2b09      	cmp	r3, #9
 80158d8:	d80a      	bhi.n	80158f0 <dhcp_rebind+0xfc>
 80158da:	69bb      	ldr	r3, [r7, #24]
 80158dc:	799b      	ldrb	r3, [r3, #6]
 80158de:	b29b      	uxth	r3, r3
 80158e0:	461a      	mov	r2, r3
 80158e2:	0152      	lsls	r2, r2, #5
 80158e4:	1ad2      	subs	r2, r2, r3
 80158e6:	0092      	lsls	r2, r2, #2
 80158e8:	4413      	add	r3, r2
 80158ea:	00db      	lsls	r3, r3, #3
 80158ec:	b29b      	uxth	r3, r3
 80158ee:	e001      	b.n	80158f4 <dhcp_rebind+0x100>
 80158f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80158f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80158f6:	89fb      	ldrh	r3, [r7, #14]
 80158f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80158fc:	4a0a      	ldr	r2, [pc, #40]	; (8015928 <dhcp_rebind+0x134>)
 80158fe:	fb82 1203 	smull	r1, r2, r2, r3
 8015902:	1152      	asrs	r2, r2, #5
 8015904:	17db      	asrs	r3, r3, #31
 8015906:	1ad3      	subs	r3, r2, r3
 8015908:	b29a      	uxth	r2, r3
 801590a:	69bb      	ldr	r3, [r7, #24]
 801590c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801590e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015912:	4618      	mov	r0, r3
 8015914:	3720      	adds	r7, #32
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}
 801591a:	bf00      	nop
 801591c:	20000030 	.word	0x20000030
 8015920:	200107b4 	.word	0x200107b4
 8015924:	0801ffd8 	.word	0x0801ffd8
 8015928:	10624dd3 	.word	0x10624dd3

0801592c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801592c:	b5b0      	push	{r4, r5, r7, lr}
 801592e:	b08a      	sub	sp, #40	; 0x28
 8015930:	af02      	add	r7, sp, #8
 8015932:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015938:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801593a:	2103      	movs	r1, #3
 801593c:	69b8      	ldr	r0, [r7, #24]
 801593e:	f000 f945 	bl	8015bcc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015942:	f107 030c 	add.w	r3, r7, #12
 8015946:	2203      	movs	r2, #3
 8015948:	69b9      	ldr	r1, [r7, #24]
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f000 fdca 	bl	80164e4 <dhcp_create_msg>
 8015950:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d066      	beq.n	8015a26 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015958:	697b      	ldr	r3, [r7, #20]
 801595a:	685b      	ldr	r3, [r3, #4]
 801595c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801595e:	89b8      	ldrh	r0, [r7, #12]
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015966:	2302      	movs	r3, #2
 8015968:	2239      	movs	r2, #57	; 0x39
 801596a:	f000 f949 	bl	8015c00 <dhcp_option>
 801596e:	4603      	mov	r3, r0
 8015970:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015972:	89b8      	ldrh	r0, [r7, #12]
 8015974:	693b      	ldr	r3, [r7, #16]
 8015976:	33f0      	adds	r3, #240	; 0xf0
 8015978:	f44f 7210 	mov.w	r2, #576	; 0x240
 801597c:	4619      	mov	r1, r3
 801597e:	f000 f999 	bl	8015cb4 <dhcp_option_short>
 8015982:	4603      	mov	r3, r0
 8015984:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015986:	89b8      	ldrh	r0, [r7, #12]
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801598e:	2304      	movs	r3, #4
 8015990:	2232      	movs	r2, #50	; 0x32
 8015992:	f000 f935 	bl	8015c00 <dhcp_option>
 8015996:	4603      	mov	r3, r0
 8015998:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801599a:	89bc      	ldrh	r4, [r7, #12]
 801599c:	693b      	ldr	r3, [r7, #16]
 801599e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80159a2:	69bb      	ldr	r3, [r7, #24]
 80159a4:	69db      	ldr	r3, [r3, #28]
 80159a6:	4618      	mov	r0, r3
 80159a8:	f7f6 f9af 	bl	800bd0a <lwip_htonl>
 80159ac:	4603      	mov	r3, r0
 80159ae:	461a      	mov	r2, r3
 80159b0:	4629      	mov	r1, r5
 80159b2:	4620      	mov	r0, r4
 80159b4:	f000 f9b0 	bl	8015d18 <dhcp_option_long>
 80159b8:	4603      	mov	r3, r0
 80159ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80159bc:	89b8      	ldrh	r0, [r7, #12]
 80159be:	693b      	ldr	r3, [r7, #16]
 80159c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159c4:	2303      	movs	r3, #3
 80159c6:	2237      	movs	r2, #55	; 0x37
 80159c8:	f000 f91a 	bl	8015c00 <dhcp_option>
 80159cc:	4603      	mov	r3, r0
 80159ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80159d0:	2300      	movs	r3, #0
 80159d2:	77bb      	strb	r3, [r7, #30]
 80159d4:	e00e      	b.n	80159f4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80159d6:	89b8      	ldrh	r0, [r7, #12]
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159de:	7fbb      	ldrb	r3, [r7, #30]
 80159e0:	4a29      	ldr	r2, [pc, #164]	; (8015a88 <dhcp_reboot+0x15c>)
 80159e2:	5cd3      	ldrb	r3, [r2, r3]
 80159e4:	461a      	mov	r2, r3
 80159e6:	f000 f93f 	bl	8015c68 <dhcp_option_byte>
 80159ea:	4603      	mov	r3, r0
 80159ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80159ee:	7fbb      	ldrb	r3, [r7, #30]
 80159f0:	3301      	adds	r3, #1
 80159f2:	77bb      	strb	r3, [r7, #30]
 80159f4:	7fbb      	ldrb	r3, [r7, #30]
 80159f6:	2b02      	cmp	r3, #2
 80159f8:	d9ed      	bls.n	80159d6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80159fa:	89b8      	ldrh	r0, [r7, #12]
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	33f0      	adds	r3, #240	; 0xf0
 8015a00:	697a      	ldr	r2, [r7, #20]
 8015a02:	4619      	mov	r1, r3
 8015a04:	f000 fe44 	bl	8016690 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015a08:	4b20      	ldr	r3, [pc, #128]	; (8015a8c <dhcp_reboot+0x160>)
 8015a0a:	6818      	ldr	r0, [r3, #0]
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	9300      	str	r3, [sp, #0]
 8015a10:	2343      	movs	r3, #67	; 0x43
 8015a12:	4a1f      	ldr	r2, [pc, #124]	; (8015a90 <dhcp_reboot+0x164>)
 8015a14:	6979      	ldr	r1, [r7, #20]
 8015a16:	f7fe fcdd 	bl	80143d4 <udp_sendto_if>
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015a1e:	6978      	ldr	r0, [r7, #20]
 8015a20:	f7f7 fdc6 	bl	800d5b0 <pbuf_free>
 8015a24:	e001      	b.n	8015a2a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015a26:	23ff      	movs	r3, #255	; 0xff
 8015a28:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015a2a:	69bb      	ldr	r3, [r7, #24]
 8015a2c:	799b      	ldrb	r3, [r3, #6]
 8015a2e:	2bff      	cmp	r3, #255	; 0xff
 8015a30:	d005      	beq.n	8015a3e <dhcp_reboot+0x112>
    dhcp->tries++;
 8015a32:	69bb      	ldr	r3, [r7, #24]
 8015a34:	799b      	ldrb	r3, [r3, #6]
 8015a36:	3301      	adds	r3, #1
 8015a38:	b2da      	uxtb	r2, r3
 8015a3a:	69bb      	ldr	r3, [r7, #24]
 8015a3c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015a3e:	69bb      	ldr	r3, [r7, #24]
 8015a40:	799b      	ldrb	r3, [r3, #6]
 8015a42:	2b09      	cmp	r3, #9
 8015a44:	d80a      	bhi.n	8015a5c <dhcp_reboot+0x130>
 8015a46:	69bb      	ldr	r3, [r7, #24]
 8015a48:	799b      	ldrb	r3, [r3, #6]
 8015a4a:	b29b      	uxth	r3, r3
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	0152      	lsls	r2, r2, #5
 8015a50:	1ad2      	subs	r2, r2, r3
 8015a52:	0092      	lsls	r2, r2, #2
 8015a54:	4413      	add	r3, r2
 8015a56:	00db      	lsls	r3, r3, #3
 8015a58:	b29b      	uxth	r3, r3
 8015a5a:	e001      	b.n	8015a60 <dhcp_reboot+0x134>
 8015a5c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015a60:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015a62:	89fb      	ldrh	r3, [r7, #14]
 8015a64:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015a68:	4a0a      	ldr	r2, [pc, #40]	; (8015a94 <dhcp_reboot+0x168>)
 8015a6a:	fb82 1203 	smull	r1, r2, r2, r3
 8015a6e:	1152      	asrs	r2, r2, #5
 8015a70:	17db      	asrs	r3, r3, #31
 8015a72:	1ad3      	subs	r3, r2, r3
 8015a74:	b29a      	uxth	r2, r3
 8015a76:	69bb      	ldr	r3, [r7, #24]
 8015a78:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015a7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015a7e:	4618      	mov	r0, r3
 8015a80:	3720      	adds	r7, #32
 8015a82:	46bd      	mov	sp, r7
 8015a84:	bdb0      	pop	{r4, r5, r7, pc}
 8015a86:	bf00      	nop
 8015a88:	20000030 	.word	0x20000030
 8015a8c:	200107b4 	.word	0x200107b4
 8015a90:	0801ffd8 	.word	0x0801ffd8
 8015a94:	10624dd3 	.word	0x10624dd3

08015a98 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015a98:	b5b0      	push	{r4, r5, r7, lr}
 8015a9a:	b08a      	sub	sp, #40	; 0x28
 8015a9c:	af02      	add	r7, sp, #8
 8015a9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015aa6:	69fb      	ldr	r3, [r7, #28]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	f000 8084 	beq.w	8015bb6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015aae:	69fb      	ldr	r3, [r7, #28]
 8015ab0:	795b      	ldrb	r3, [r3, #5]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	f000 8081 	beq.w	8015bba <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015ab8:	69fb      	ldr	r3, [r7, #28]
 8015aba:	699b      	ldr	r3, [r3, #24]
 8015abc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015ac4:	69fb      	ldr	r3, [r7, #28]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015aca:	69fb      	ldr	r3, [r7, #28]
 8015acc:	2200      	movs	r2, #0
 8015ace:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015ad0:	69fb      	ldr	r3, [r7, #28]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015ad6:	69fb      	ldr	r3, [r7, #28]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	631a      	str	r2, [r3, #48]	; 0x30
 8015adc:	69fb      	ldr	r3, [r7, #28]
 8015ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015ae0:	69fb      	ldr	r3, [r7, #28]
 8015ae2:	62da      	str	r2, [r3, #44]	; 0x2c
 8015ae4:	69fb      	ldr	r3, [r7, #28]
 8015ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ae8:	69fb      	ldr	r3, [r7, #28]
 8015aea:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015aec:	69fb      	ldr	r3, [r7, #28]
 8015aee:	2200      	movs	r2, #0
 8015af0:	829a      	strh	r2, [r3, #20]
 8015af2:	69fb      	ldr	r3, [r7, #28]
 8015af4:	8a9a      	ldrh	r2, [r3, #20]
 8015af6:	69fb      	ldr	r3, [r7, #28]
 8015af8:	825a      	strh	r2, [r3, #18]
 8015afa:	69fb      	ldr	r3, [r7, #28]
 8015afc:	8a5a      	ldrh	r2, [r3, #18]
 8015afe:	69fb      	ldr	r3, [r7, #28]
 8015b00:	821a      	strh	r2, [r3, #16]
 8015b02:	69fb      	ldr	r3, [r7, #28]
 8015b04:	8a1a      	ldrh	r2, [r3, #16]
 8015b06:	69fb      	ldr	r3, [r7, #28]
 8015b08:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f000 fdee 	bl	80166ec <dhcp_supplied_address>
 8015b10:	4603      	mov	r3, r0
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d03b      	beq.n	8015b8e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015b16:	f107 030e 	add.w	r3, r7, #14
 8015b1a:	2207      	movs	r2, #7
 8015b1c:	69f9      	ldr	r1, [r7, #28]
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f000 fce0 	bl	80164e4 <dhcp_create_msg>
 8015b24:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d030      	beq.n	8015b8e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015b2c:	69bb      	ldr	r3, [r7, #24]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015b32:	89f8      	ldrh	r0, [r7, #14]
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b3a:	2304      	movs	r3, #4
 8015b3c:	2236      	movs	r2, #54	; 0x36
 8015b3e:	f000 f85f 	bl	8015c00 <dhcp_option>
 8015b42:	4603      	mov	r3, r0
 8015b44:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015b46:	89fc      	ldrh	r4, [r7, #14]
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015b4e:	693b      	ldr	r3, [r7, #16]
 8015b50:	4618      	mov	r0, r3
 8015b52:	f7f6 f8da 	bl	800bd0a <lwip_htonl>
 8015b56:	4603      	mov	r3, r0
 8015b58:	461a      	mov	r2, r3
 8015b5a:	4629      	mov	r1, r5
 8015b5c:	4620      	mov	r0, r4
 8015b5e:	f000 f8db 	bl	8015d18 <dhcp_option_long>
 8015b62:	4603      	mov	r3, r0
 8015b64:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015b66:	89f8      	ldrh	r0, [r7, #14]
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	33f0      	adds	r3, #240	; 0xf0
 8015b6c:	69ba      	ldr	r2, [r7, #24]
 8015b6e:	4619      	mov	r1, r3
 8015b70:	f000 fd8e 	bl	8016690 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015b74:	4b13      	ldr	r3, [pc, #76]	; (8015bc4 <dhcp_release_and_stop+0x12c>)
 8015b76:	6818      	ldr	r0, [r3, #0]
 8015b78:	f107 0210 	add.w	r2, r7, #16
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	9300      	str	r3, [sp, #0]
 8015b80:	2343      	movs	r3, #67	; 0x43
 8015b82:	69b9      	ldr	r1, [r7, #24]
 8015b84:	f7fe fc26 	bl	80143d4 <udp_sendto_if>
      pbuf_free(p_out);
 8015b88:	69b8      	ldr	r0, [r7, #24]
 8015b8a:	f7f7 fd11 	bl	800d5b0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015b8e:	4b0e      	ldr	r3, [pc, #56]	; (8015bc8 <dhcp_release_and_stop+0x130>)
 8015b90:	4a0d      	ldr	r2, [pc, #52]	; (8015bc8 <dhcp_release_and_stop+0x130>)
 8015b92:	490d      	ldr	r1, [pc, #52]	; (8015bc8 <dhcp_release_and_stop+0x130>)
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	f7f6 ff93 	bl	800cac0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015b9a:	2100      	movs	r1, #0
 8015b9c:	69f8      	ldr	r0, [r7, #28]
 8015b9e:	f000 f815 	bl	8015bcc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	791b      	ldrb	r3, [r3, #4]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d008      	beq.n	8015bbc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015baa:	f7fe ff85 	bl	8014ab8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015bae:	69fb      	ldr	r3, [r7, #28]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	711a      	strb	r2, [r3, #4]
 8015bb4:	e002      	b.n	8015bbc <dhcp_release_and_stop+0x124>
    return;
 8015bb6:	bf00      	nop
 8015bb8:	e000      	b.n	8015bbc <dhcp_release_and_stop+0x124>
    return;
 8015bba:	bf00      	nop
  }
}
 8015bbc:	3720      	adds	r7, #32
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8015bc2:	bf00      	nop
 8015bc4:	200107b4 	.word	0x200107b4
 8015bc8:	0801ffd4 	.word	0x0801ffd4

08015bcc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015bcc:	b480      	push	{r7}
 8015bce:	b083      	sub	sp, #12
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
 8015bd4:	460b      	mov	r3, r1
 8015bd6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	795b      	ldrb	r3, [r3, #5]
 8015bdc:	78fa      	ldrb	r2, [r7, #3]
 8015bde:	429a      	cmp	r2, r3
 8015be0:	d008      	beq.n	8015bf4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	78fa      	ldrb	r2, [r7, #3]
 8015be6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2200      	movs	r2, #0
 8015bec:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	811a      	strh	r2, [r3, #8]
  }
}
 8015bf4:	bf00      	nop
 8015bf6:	370c      	adds	r7, #12
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfe:	4770      	bx	lr

08015c00 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b082      	sub	sp, #8
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6039      	str	r1, [r7, #0]
 8015c08:	4611      	mov	r1, r2
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	80fb      	strh	r3, [r7, #6]
 8015c10:	460b      	mov	r3, r1
 8015c12:	717b      	strb	r3, [r7, #5]
 8015c14:	4613      	mov	r3, r2
 8015c16:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015c18:	88fa      	ldrh	r2, [r7, #6]
 8015c1a:	793b      	ldrb	r3, [r7, #4]
 8015c1c:	4413      	add	r3, r2
 8015c1e:	3302      	adds	r3, #2
 8015c20:	2b44      	cmp	r3, #68	; 0x44
 8015c22:	d906      	bls.n	8015c32 <dhcp_option+0x32>
 8015c24:	4b0d      	ldr	r3, [pc, #52]	; (8015c5c <dhcp_option+0x5c>)
 8015c26:	f240 529a 	movw	r2, #1434	; 0x59a
 8015c2a:	490d      	ldr	r1, [pc, #52]	; (8015c60 <dhcp_option+0x60>)
 8015c2c:	480d      	ldr	r0, [pc, #52]	; (8015c64 <dhcp_option+0x64>)
 8015c2e:	f005 fb9b 	bl	801b368 <iprintf>
  options[options_out_len++] = option_type;
 8015c32:	88fb      	ldrh	r3, [r7, #6]
 8015c34:	1c5a      	adds	r2, r3, #1
 8015c36:	80fa      	strh	r2, [r7, #6]
 8015c38:	461a      	mov	r2, r3
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	4413      	add	r3, r2
 8015c3e:	797a      	ldrb	r2, [r7, #5]
 8015c40:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015c42:	88fb      	ldrh	r3, [r7, #6]
 8015c44:	1c5a      	adds	r2, r3, #1
 8015c46:	80fa      	strh	r2, [r7, #6]
 8015c48:	461a      	mov	r2, r3
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	4413      	add	r3, r2
 8015c4e:	793a      	ldrb	r2, [r7, #4]
 8015c50:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015c52:	88fb      	ldrh	r3, [r7, #6]
}
 8015c54:	4618      	mov	r0, r3
 8015c56:	3708      	adds	r7, #8
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}
 8015c5c:	0801f21c 	.word	0x0801f21c
 8015c60:	0801f3b0 	.word	0x0801f3b0
 8015c64:	0801f27c 	.word	0x0801f27c

08015c68 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b082      	sub	sp, #8
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	4603      	mov	r3, r0
 8015c70:	6039      	str	r1, [r7, #0]
 8015c72:	80fb      	strh	r3, [r7, #6]
 8015c74:	4613      	mov	r3, r2
 8015c76:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015c78:	88fb      	ldrh	r3, [r7, #6]
 8015c7a:	2b43      	cmp	r3, #67	; 0x43
 8015c7c:	d906      	bls.n	8015c8c <dhcp_option_byte+0x24>
 8015c7e:	4b0a      	ldr	r3, [pc, #40]	; (8015ca8 <dhcp_option_byte+0x40>)
 8015c80:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015c84:	4909      	ldr	r1, [pc, #36]	; (8015cac <dhcp_option_byte+0x44>)
 8015c86:	480a      	ldr	r0, [pc, #40]	; (8015cb0 <dhcp_option_byte+0x48>)
 8015c88:	f005 fb6e 	bl	801b368 <iprintf>
  options[options_out_len++] = value;
 8015c8c:	88fb      	ldrh	r3, [r7, #6]
 8015c8e:	1c5a      	adds	r2, r3, #1
 8015c90:	80fa      	strh	r2, [r7, #6]
 8015c92:	461a      	mov	r2, r3
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	4413      	add	r3, r2
 8015c98:	797a      	ldrb	r2, [r7, #5]
 8015c9a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015c9c:	88fb      	ldrh	r3, [r7, #6]
}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	3708      	adds	r7, #8
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	0801f21c 	.word	0x0801f21c
 8015cac:	0801f3f4 	.word	0x0801f3f4
 8015cb0:	0801f27c 	.word	0x0801f27c

08015cb4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b082      	sub	sp, #8
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	4603      	mov	r3, r0
 8015cbc:	6039      	str	r1, [r7, #0]
 8015cbe:	80fb      	strh	r3, [r7, #6]
 8015cc0:	4613      	mov	r3, r2
 8015cc2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015cc4:	88fb      	ldrh	r3, [r7, #6]
 8015cc6:	3302      	adds	r3, #2
 8015cc8:	2b44      	cmp	r3, #68	; 0x44
 8015cca:	d906      	bls.n	8015cda <dhcp_option_short+0x26>
 8015ccc:	4b0f      	ldr	r3, [pc, #60]	; (8015d0c <dhcp_option_short+0x58>)
 8015cce:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015cd2:	490f      	ldr	r1, [pc, #60]	; (8015d10 <dhcp_option_short+0x5c>)
 8015cd4:	480f      	ldr	r0, [pc, #60]	; (8015d14 <dhcp_option_short+0x60>)
 8015cd6:	f005 fb47 	bl	801b368 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015cda:	88bb      	ldrh	r3, [r7, #4]
 8015cdc:	0a1b      	lsrs	r3, r3, #8
 8015cde:	b29a      	uxth	r2, r3
 8015ce0:	88fb      	ldrh	r3, [r7, #6]
 8015ce2:	1c59      	adds	r1, r3, #1
 8015ce4:	80f9      	strh	r1, [r7, #6]
 8015ce6:	4619      	mov	r1, r3
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	440b      	add	r3, r1
 8015cec:	b2d2      	uxtb	r2, r2
 8015cee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015cf0:	88fb      	ldrh	r3, [r7, #6]
 8015cf2:	1c5a      	adds	r2, r3, #1
 8015cf4:	80fa      	strh	r2, [r7, #6]
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	4413      	add	r3, r2
 8015cfc:	88ba      	ldrh	r2, [r7, #4]
 8015cfe:	b2d2      	uxtb	r2, r2
 8015d00:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015d02:	88fb      	ldrh	r3, [r7, #6]
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3708      	adds	r7, #8
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}
 8015d0c:	0801f21c 	.word	0x0801f21c
 8015d10:	0801f42c 	.word	0x0801f42c
 8015d14:	0801f27c 	.word	0x0801f27c

08015d18 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015d18:	b580      	push	{r7, lr}
 8015d1a:	b084      	sub	sp, #16
 8015d1c:	af00      	add	r7, sp, #0
 8015d1e:	4603      	mov	r3, r0
 8015d20:	60b9      	str	r1, [r7, #8]
 8015d22:	607a      	str	r2, [r7, #4]
 8015d24:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015d26:	89fb      	ldrh	r3, [r7, #14]
 8015d28:	3304      	adds	r3, #4
 8015d2a:	2b44      	cmp	r3, #68	; 0x44
 8015d2c:	d906      	bls.n	8015d3c <dhcp_option_long+0x24>
 8015d2e:	4b19      	ldr	r3, [pc, #100]	; (8015d94 <dhcp_option_long+0x7c>)
 8015d30:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015d34:	4918      	ldr	r1, [pc, #96]	; (8015d98 <dhcp_option_long+0x80>)
 8015d36:	4819      	ldr	r0, [pc, #100]	; (8015d9c <dhcp_option_long+0x84>)
 8015d38:	f005 fb16 	bl	801b368 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	0e1a      	lsrs	r2, r3, #24
 8015d40:	89fb      	ldrh	r3, [r7, #14]
 8015d42:	1c59      	adds	r1, r3, #1
 8015d44:	81f9      	strh	r1, [r7, #14]
 8015d46:	4619      	mov	r1, r3
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	440b      	add	r3, r1
 8015d4c:	b2d2      	uxtb	r2, r2
 8015d4e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	0c1a      	lsrs	r2, r3, #16
 8015d54:	89fb      	ldrh	r3, [r7, #14]
 8015d56:	1c59      	adds	r1, r3, #1
 8015d58:	81f9      	strh	r1, [r7, #14]
 8015d5a:	4619      	mov	r1, r3
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	440b      	add	r3, r1
 8015d60:	b2d2      	uxtb	r2, r2
 8015d62:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	0a1a      	lsrs	r2, r3, #8
 8015d68:	89fb      	ldrh	r3, [r7, #14]
 8015d6a:	1c59      	adds	r1, r3, #1
 8015d6c:	81f9      	strh	r1, [r7, #14]
 8015d6e:	4619      	mov	r1, r3
 8015d70:	68bb      	ldr	r3, [r7, #8]
 8015d72:	440b      	add	r3, r1
 8015d74:	b2d2      	uxtb	r2, r2
 8015d76:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015d78:	89fb      	ldrh	r3, [r7, #14]
 8015d7a:	1c5a      	adds	r2, r3, #1
 8015d7c:	81fa      	strh	r2, [r7, #14]
 8015d7e:	461a      	mov	r2, r3
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	4413      	add	r3, r2
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	b2d2      	uxtb	r2, r2
 8015d88:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015d8a:	89fb      	ldrh	r3, [r7, #14]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3710      	adds	r7, #16
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}
 8015d94:	0801f21c 	.word	0x0801f21c
 8015d98:	0801f468 	.word	0x0801f468
 8015d9c:	0801f27c 	.word	0x0801f27c

08015da0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b090      	sub	sp, #64	; 0x40
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
 8015da8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015daa:	2300      	movs	r3, #0
 8015dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015dae:	2300      	movs	r3, #0
 8015db0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015db2:	2208      	movs	r2, #8
 8015db4:	2100      	movs	r1, #0
 8015db6:	48be      	ldr	r0, [pc, #760]	; (80160b0 <dhcp_parse_reply+0x310>)
 8015db8:	f004 ff36 	bl	801ac28 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	895b      	ldrh	r3, [r3, #10]
 8015dc0:	2b2b      	cmp	r3, #43	; 0x2b
 8015dc2:	d802      	bhi.n	8015dca <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015dc4:	f06f 0301 	mvn.w	r3, #1
 8015dc8:	e2a8      	b.n	801631c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	685b      	ldr	r3, [r3, #4]
 8015dce:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015dd0:	23f0      	movs	r3, #240	; 0xf0
 8015dd2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	891b      	ldrh	r3, [r3, #8]
 8015dd8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015dde:	e00c      	b.n	8015dfa <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de2:	895b      	ldrh	r3, [r3, #10]
 8015de4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015de6:	1ad3      	subs	r3, r2, r3
 8015de8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dec:	895b      	ldrh	r3, [r3, #10]
 8015dee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015df0:	1ad3      	subs	r3, r2, r3
 8015df2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d004      	beq.n	8015e0a <dhcp_parse_reply+0x6a>
 8015e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e02:	895b      	ldrh	r3, [r3, #10]
 8015e04:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015e06:	429a      	cmp	r2, r3
 8015e08:	d2ea      	bcs.n	8015de0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d102      	bne.n	8015e16 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015e10:	f06f 0301 	mvn.w	r3, #1
 8015e14:	e282      	b.n	801631c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8015e16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015e18:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015e1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015e1c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e20:	685b      	ldr	r3, [r3, #4]
 8015e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015e24:	e23a      	b.n	801629c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8015e26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e2a:	4413      	add	r3, r2
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015e30:	2300      	movs	r3, #0
 8015e32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015e36:	f04f 33ff 	mov.w	r3, #4294967295
 8015e3a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015e3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e3e:	3302      	adds	r3, #2
 8015e40:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015e42:	8bfa      	ldrh	r2, [r7, #30]
 8015e44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d202      	bcs.n	8015e50 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015e4a:	f06f 0301 	mvn.w	r3, #1
 8015e4e:	e265      	b.n	801631c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015e50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e52:	3301      	adds	r3, #1
 8015e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e56:	8952      	ldrh	r2, [r2, #10]
 8015e58:	4293      	cmp	r3, r2
 8015e5a:	da07      	bge.n	8015e6c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015e5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e5e:	3301      	adds	r3, #1
 8015e60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e62:	4413      	add	r3, r2
 8015e64:	781b      	ldrb	r3, [r3, #0]
 8015e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e6a:	e00b      	b.n	8015e84 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d004      	beq.n	8015e7e <dhcp_parse_reply+0xde>
 8015e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	685b      	ldr	r3, [r3, #4]
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	e000      	b.n	8015e80 <dhcp_parse_reply+0xe0>
 8015e7e:	2300      	movs	r3, #0
 8015e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015e8c:	7dfb      	ldrb	r3, [r7, #23]
 8015e8e:	2b3b      	cmp	r3, #59	; 0x3b
 8015e90:	f200 812d 	bhi.w	80160ee <dhcp_parse_reply+0x34e>
 8015e94:	a201      	add	r2, pc, #4	; (adr r2, 8015e9c <dhcp_parse_reply+0xfc>)
 8015e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e9a:	bf00      	nop
 8015e9c:	08015f8d 	.word	0x08015f8d
 8015ea0:	08015f9d 	.word	0x08015f9d
 8015ea4:	080160ef 	.word	0x080160ef
 8015ea8:	08015fbf 	.word	0x08015fbf
 8015eac:	080160ef 	.word	0x080160ef
 8015eb0:	080160ef 	.word	0x080160ef
 8015eb4:	080160ef 	.word	0x080160ef
 8015eb8:	080160ef 	.word	0x080160ef
 8015ebc:	080160ef 	.word	0x080160ef
 8015ec0:	080160ef 	.word	0x080160ef
 8015ec4:	080160ef 	.word	0x080160ef
 8015ec8:	080160ef 	.word	0x080160ef
 8015ecc:	080160ef 	.word	0x080160ef
 8015ed0:	080160ef 	.word	0x080160ef
 8015ed4:	080160ef 	.word	0x080160ef
 8015ed8:	080160ef 	.word	0x080160ef
 8015edc:	080160ef 	.word	0x080160ef
 8015ee0:	080160ef 	.word	0x080160ef
 8015ee4:	080160ef 	.word	0x080160ef
 8015ee8:	080160ef 	.word	0x080160ef
 8015eec:	080160ef 	.word	0x080160ef
 8015ef0:	080160ef 	.word	0x080160ef
 8015ef4:	080160ef 	.word	0x080160ef
 8015ef8:	080160ef 	.word	0x080160ef
 8015efc:	080160ef 	.word	0x080160ef
 8015f00:	080160ef 	.word	0x080160ef
 8015f04:	080160ef 	.word	0x080160ef
 8015f08:	080160ef 	.word	0x080160ef
 8015f0c:	080160ef 	.word	0x080160ef
 8015f10:	080160ef 	.word	0x080160ef
 8015f14:	080160ef 	.word	0x080160ef
 8015f18:	080160ef 	.word	0x080160ef
 8015f1c:	080160ef 	.word	0x080160ef
 8015f20:	080160ef 	.word	0x080160ef
 8015f24:	080160ef 	.word	0x080160ef
 8015f28:	080160ef 	.word	0x080160ef
 8015f2c:	080160ef 	.word	0x080160ef
 8015f30:	080160ef 	.word	0x080160ef
 8015f34:	080160ef 	.word	0x080160ef
 8015f38:	080160ef 	.word	0x080160ef
 8015f3c:	080160ef 	.word	0x080160ef
 8015f40:	080160ef 	.word	0x080160ef
 8015f44:	080160ef 	.word	0x080160ef
 8015f48:	080160ef 	.word	0x080160ef
 8015f4c:	080160ef 	.word	0x080160ef
 8015f50:	080160ef 	.word	0x080160ef
 8015f54:	080160ef 	.word	0x080160ef
 8015f58:	080160ef 	.word	0x080160ef
 8015f5c:	080160ef 	.word	0x080160ef
 8015f60:	080160ef 	.word	0x080160ef
 8015f64:	080160ef 	.word	0x080160ef
 8015f68:	08015feb 	.word	0x08015feb
 8015f6c:	0801600d 	.word	0x0801600d
 8015f70:	08016049 	.word	0x08016049
 8015f74:	0801606b 	.word	0x0801606b
 8015f78:	080160ef 	.word	0x080160ef
 8015f7c:	080160ef 	.word	0x080160ef
 8015f80:	080160ef 	.word	0x080160ef
 8015f84:	0801608d 	.word	0x0801608d
 8015f88:	080160cd 	.word	0x080160cd
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015f9a:	e0ac      	b.n	80160f6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fa0:	2b04      	cmp	r3, #4
 8015fa2:	d009      	beq.n	8015fb8 <dhcp_parse_reply+0x218>
 8015fa4:	4b43      	ldr	r3, [pc, #268]	; (80160b4 <dhcp_parse_reply+0x314>)
 8015fa6:	f240 622e 	movw	r2, #1582	; 0x62e
 8015faa:	4943      	ldr	r1, [pc, #268]	; (80160b8 <dhcp_parse_reply+0x318>)
 8015fac:	4843      	ldr	r0, [pc, #268]	; (80160bc <dhcp_parse_reply+0x31c>)
 8015fae:	f005 f9db 	bl	801b368 <iprintf>
 8015fb2:	f06f 0305 	mvn.w	r3, #5
 8015fb6:	e1b1      	b.n	801631c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015fb8:	2306      	movs	r3, #6
 8015fba:	623b      	str	r3, [r7, #32]
        break;
 8015fbc:	e09b      	b.n	80160f6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015fbe:	2304      	movs	r3, #4
 8015fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015fc4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	d209      	bcs.n	8015fe4 <dhcp_parse_reply+0x244>
 8015fd0:	4b38      	ldr	r3, [pc, #224]	; (80160b4 <dhcp_parse_reply+0x314>)
 8015fd2:	f240 6233 	movw	r2, #1587	; 0x633
 8015fd6:	493a      	ldr	r1, [pc, #232]	; (80160c0 <dhcp_parse_reply+0x320>)
 8015fd8:	4838      	ldr	r0, [pc, #224]	; (80160bc <dhcp_parse_reply+0x31c>)
 8015fda:	f005 f9c5 	bl	801b368 <iprintf>
 8015fde:	f06f 0305 	mvn.w	r3, #5
 8015fe2:	e19b      	b.n	801631c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015fe4:	2307      	movs	r3, #7
 8015fe6:	623b      	str	r3, [r7, #32]
        break;
 8015fe8:	e085      	b.n	80160f6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fee:	2b04      	cmp	r3, #4
 8015ff0:	d009      	beq.n	8016006 <dhcp_parse_reply+0x266>
 8015ff2:	4b30      	ldr	r3, [pc, #192]	; (80160b4 <dhcp_parse_reply+0x314>)
 8015ff4:	f240 6241 	movw	r2, #1601	; 0x641
 8015ff8:	492f      	ldr	r1, [pc, #188]	; (80160b8 <dhcp_parse_reply+0x318>)
 8015ffa:	4830      	ldr	r0, [pc, #192]	; (80160bc <dhcp_parse_reply+0x31c>)
 8015ffc:	f005 f9b4 	bl	801b368 <iprintf>
 8016000:	f06f 0305 	mvn.w	r3, #5
 8016004:	e18a      	b.n	801631c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016006:	2303      	movs	r3, #3
 8016008:	623b      	str	r3, [r7, #32]
        break;
 801600a:	e074      	b.n	80160f6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801600c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016010:	2b01      	cmp	r3, #1
 8016012:	d009      	beq.n	8016028 <dhcp_parse_reply+0x288>
 8016014:	4b27      	ldr	r3, [pc, #156]	; (80160b4 <dhcp_parse_reply+0x314>)
 8016016:	f240 624f 	movw	r2, #1615	; 0x64f
 801601a:	492a      	ldr	r1, [pc, #168]	; (80160c4 <dhcp_parse_reply+0x324>)
 801601c:	4827      	ldr	r0, [pc, #156]	; (80160bc <dhcp_parse_reply+0x31c>)
 801601e:	f005 f9a3 	bl	801b368 <iprintf>
 8016022:	f06f 0305 	mvn.w	r3, #5
 8016026:	e179      	b.n	801631c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016028:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801602a:	2bf0      	cmp	r3, #240	; 0xf0
 801602c:	d009      	beq.n	8016042 <dhcp_parse_reply+0x2a2>
 801602e:	4b21      	ldr	r3, [pc, #132]	; (80160b4 <dhcp_parse_reply+0x314>)
 8016030:	f240 6251 	movw	r2, #1617	; 0x651
 8016034:	4924      	ldr	r1, [pc, #144]	; (80160c8 <dhcp_parse_reply+0x328>)
 8016036:	4821      	ldr	r0, [pc, #132]	; (80160bc <dhcp_parse_reply+0x31c>)
 8016038:	f005 f996 	bl	801b368 <iprintf>
 801603c:	f06f 0305 	mvn.w	r3, #5
 8016040:	e16c      	b.n	801631c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016042:	2300      	movs	r3, #0
 8016044:	623b      	str	r3, [r7, #32]
        break;
 8016046:	e056      	b.n	80160f6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801604c:	2b01      	cmp	r3, #1
 801604e:	d009      	beq.n	8016064 <dhcp_parse_reply+0x2c4>
 8016050:	4b18      	ldr	r3, [pc, #96]	; (80160b4 <dhcp_parse_reply+0x314>)
 8016052:	f240 6255 	movw	r2, #1621	; 0x655
 8016056:	491b      	ldr	r1, [pc, #108]	; (80160c4 <dhcp_parse_reply+0x324>)
 8016058:	4818      	ldr	r0, [pc, #96]	; (80160bc <dhcp_parse_reply+0x31c>)
 801605a:	f005 f985 	bl	801b368 <iprintf>
 801605e:	f06f 0305 	mvn.w	r3, #5
 8016062:	e15b      	b.n	801631c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016064:	2301      	movs	r3, #1
 8016066:	623b      	str	r3, [r7, #32]
        break;
 8016068:	e045      	b.n	80160f6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801606a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801606e:	2b04      	cmp	r3, #4
 8016070:	d009      	beq.n	8016086 <dhcp_parse_reply+0x2e6>
 8016072:	4b10      	ldr	r3, [pc, #64]	; (80160b4 <dhcp_parse_reply+0x314>)
 8016074:	f240 6259 	movw	r2, #1625	; 0x659
 8016078:	490f      	ldr	r1, [pc, #60]	; (80160b8 <dhcp_parse_reply+0x318>)
 801607a:	4810      	ldr	r0, [pc, #64]	; (80160bc <dhcp_parse_reply+0x31c>)
 801607c:	f005 f974 	bl	801b368 <iprintf>
 8016080:	f06f 0305 	mvn.w	r3, #5
 8016084:	e14a      	b.n	801631c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016086:	2302      	movs	r3, #2
 8016088:	623b      	str	r3, [r7, #32]
        break;
 801608a:	e034      	b.n	80160f6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801608c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016090:	2b04      	cmp	r3, #4
 8016092:	d009      	beq.n	80160a8 <dhcp_parse_reply+0x308>
 8016094:	4b07      	ldr	r3, [pc, #28]	; (80160b4 <dhcp_parse_reply+0x314>)
 8016096:	f240 625d 	movw	r2, #1629	; 0x65d
 801609a:	4907      	ldr	r1, [pc, #28]	; (80160b8 <dhcp_parse_reply+0x318>)
 801609c:	4807      	ldr	r0, [pc, #28]	; (80160bc <dhcp_parse_reply+0x31c>)
 801609e:	f005 f963 	bl	801b368 <iprintf>
 80160a2:	f06f 0305 	mvn.w	r3, #5
 80160a6:	e139      	b.n	801631c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80160a8:	2304      	movs	r3, #4
 80160aa:	623b      	str	r3, [r7, #32]
        break;
 80160ac:	e023      	b.n	80160f6 <dhcp_parse_reply+0x356>
 80160ae:	bf00      	nop
 80160b0:	20019070 	.word	0x20019070
 80160b4:	0801f21c 	.word	0x0801f21c
 80160b8:	0801f4a4 	.word	0x0801f4a4
 80160bc:	0801f27c 	.word	0x0801f27c
 80160c0:	0801f4b0 	.word	0x0801f4b0
 80160c4:	0801f4c4 	.word	0x0801f4c4
 80160c8:	0801f4d0 	.word	0x0801f4d0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80160cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160d0:	2b04      	cmp	r3, #4
 80160d2:	d009      	beq.n	80160e8 <dhcp_parse_reply+0x348>
 80160d4:	4b93      	ldr	r3, [pc, #588]	; (8016324 <dhcp_parse_reply+0x584>)
 80160d6:	f240 6261 	movw	r2, #1633	; 0x661
 80160da:	4993      	ldr	r1, [pc, #588]	; (8016328 <dhcp_parse_reply+0x588>)
 80160dc:	4893      	ldr	r0, [pc, #588]	; (801632c <dhcp_parse_reply+0x58c>)
 80160de:	f005 f943 	bl	801b368 <iprintf>
 80160e2:	f06f 0305 	mvn.w	r3, #5
 80160e6:	e119      	b.n	801631c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80160e8:	2305      	movs	r3, #5
 80160ea:	623b      	str	r3, [r7, #32]
        break;
 80160ec:	e003      	b.n	80160f6 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80160ee:	2300      	movs	r3, #0
 80160f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80160f4:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80160f6:	7dfb      	ldrb	r3, [r7, #23]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d103      	bne.n	8016104 <dhcp_parse_reply+0x364>
      offset++;
 80160fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160fe:	3301      	adds	r3, #1
 8016100:	877b      	strh	r3, [r7, #58]	; 0x3a
 8016102:	e0a1      	b.n	8016248 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8016104:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801610a:	4413      	add	r3, r2
 801610c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8016110:	4293      	cmp	r3, r2
 8016112:	dd02      	ble.n	801611a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8016114:	f06f 0301 	mvn.w	r3, #1
 8016118:	e100      	b.n	801631c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801611a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801611e:	b29a      	uxth	r2, r3
 8016120:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016122:	4413      	add	r3, r2
 8016124:	b29b      	uxth	r3, r3
 8016126:	3302      	adds	r3, #2
 8016128:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801612a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801612e:	2b00      	cmp	r3, #0
 8016130:	f000 808a 	beq.w	8016248 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8016134:	2300      	movs	r3, #0
 8016136:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016138:	6a3b      	ldr	r3, [r7, #32]
 801613a:	2b00      	cmp	r3, #0
 801613c:	db02      	blt.n	8016144 <dhcp_parse_reply+0x3a4>
 801613e:	6a3b      	ldr	r3, [r7, #32]
 8016140:	2b07      	cmp	r3, #7
 8016142:	dd06      	ble.n	8016152 <dhcp_parse_reply+0x3b2>
 8016144:	4b77      	ldr	r3, [pc, #476]	; (8016324 <dhcp_parse_reply+0x584>)
 8016146:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801614a:	4979      	ldr	r1, [pc, #484]	; (8016330 <dhcp_parse_reply+0x590>)
 801614c:	4877      	ldr	r0, [pc, #476]	; (801632c <dhcp_parse_reply+0x58c>)
 801614e:	f005 f90b 	bl	801b368 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8016152:	4a78      	ldr	r2, [pc, #480]	; (8016334 <dhcp_parse_reply+0x594>)
 8016154:	6a3b      	ldr	r3, [r7, #32]
 8016156:	4413      	add	r3, r2
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d174      	bne.n	8016248 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801615e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016162:	2b04      	cmp	r3, #4
 8016164:	bf28      	it	cs
 8016166:	2304      	movcs	r3, #4
 8016168:	b2db      	uxtb	r3, r3
 801616a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801616c:	8bfb      	ldrh	r3, [r7, #30]
 801616e:	8aba      	ldrh	r2, [r7, #20]
 8016170:	f107 0108 	add.w	r1, r7, #8
 8016174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016176:	f7f7 fc21 	bl	800d9bc <pbuf_copy_partial>
 801617a:	4603      	mov	r3, r0
 801617c:	461a      	mov	r2, r3
 801617e:	8abb      	ldrh	r3, [r7, #20]
 8016180:	4293      	cmp	r3, r2
 8016182:	d002      	beq.n	801618a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8016184:	f06f 0301 	mvn.w	r3, #1
 8016188:	e0c8      	b.n	801631c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801618a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801618e:	2b04      	cmp	r3, #4
 8016190:	d933      	bls.n	80161fa <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8016192:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016196:	f003 0303 	and.w	r3, r3, #3
 801619a:	b2db      	uxtb	r3, r3
 801619c:	2b00      	cmp	r3, #0
 801619e:	d009      	beq.n	80161b4 <dhcp_parse_reply+0x414>
 80161a0:	4b60      	ldr	r3, [pc, #384]	; (8016324 <dhcp_parse_reply+0x584>)
 80161a2:	f240 6281 	movw	r2, #1665	; 0x681
 80161a6:	4964      	ldr	r1, [pc, #400]	; (8016338 <dhcp_parse_reply+0x598>)
 80161a8:	4860      	ldr	r0, [pc, #384]	; (801632c <dhcp_parse_reply+0x58c>)
 80161aa:	f005 f8dd 	bl	801b368 <iprintf>
 80161ae:	f06f 0305 	mvn.w	r3, #5
 80161b2:	e0b3      	b.n	801631c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80161b4:	4a5f      	ldr	r2, [pc, #380]	; (8016334 <dhcp_parse_reply+0x594>)
 80161b6:	6a3b      	ldr	r3, [r7, #32]
 80161b8:	4413      	add	r3, r2
 80161ba:	2201      	movs	r2, #1
 80161bc:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80161be:	68bb      	ldr	r3, [r7, #8]
 80161c0:	4618      	mov	r0, r3
 80161c2:	f7f5 fda2 	bl	800bd0a <lwip_htonl>
 80161c6:	4602      	mov	r2, r0
 80161c8:	495c      	ldr	r1, [pc, #368]	; (801633c <dhcp_parse_reply+0x59c>)
 80161ca:	6a3b      	ldr	r3, [r7, #32]
 80161cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80161d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161d4:	3b04      	subs	r3, #4
 80161d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80161da:	8bfb      	ldrh	r3, [r7, #30]
 80161dc:	3304      	adds	r3, #4
 80161de:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80161e0:	8a7a      	ldrh	r2, [r7, #18]
 80161e2:	8bfb      	ldrh	r3, [r7, #30]
 80161e4:	429a      	cmp	r2, r3
 80161e6:	d202      	bcs.n	80161ee <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80161e8:	f06f 0301 	mvn.w	r3, #1
 80161ec:	e096      	b.n	801631c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80161ee:	8a7b      	ldrh	r3, [r7, #18]
 80161f0:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80161f2:	6a3b      	ldr	r3, [r7, #32]
 80161f4:	3301      	adds	r3, #1
 80161f6:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80161f8:	e79e      	b.n	8016138 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80161fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161fe:	2b04      	cmp	r3, #4
 8016200:	d106      	bne.n	8016210 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	4618      	mov	r0, r3
 8016206:	f7f5 fd80 	bl	800bd0a <lwip_htonl>
 801620a:	4603      	mov	r3, r0
 801620c:	60bb      	str	r3, [r7, #8]
 801620e:	e011      	b.n	8016234 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8016210:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016214:	2b01      	cmp	r3, #1
 8016216:	d009      	beq.n	801622c <dhcp_parse_reply+0x48c>
 8016218:	4b42      	ldr	r3, [pc, #264]	; (8016324 <dhcp_parse_reply+0x584>)
 801621a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801621e:	4948      	ldr	r1, [pc, #288]	; (8016340 <dhcp_parse_reply+0x5a0>)
 8016220:	4842      	ldr	r0, [pc, #264]	; (801632c <dhcp_parse_reply+0x58c>)
 8016222:	f005 f8a1 	bl	801b368 <iprintf>
 8016226:	f06f 0305 	mvn.w	r3, #5
 801622a:	e077      	b.n	801631c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801622c:	f107 0308 	add.w	r3, r7, #8
 8016230:	781b      	ldrb	r3, [r3, #0]
 8016232:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8016234:	4a3f      	ldr	r2, [pc, #252]	; (8016334 <dhcp_parse_reply+0x594>)
 8016236:	6a3b      	ldr	r3, [r7, #32]
 8016238:	4413      	add	r3, r2
 801623a:	2201      	movs	r2, #1
 801623c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801623e:	68ba      	ldr	r2, [r7, #8]
 8016240:	493e      	ldr	r1, [pc, #248]	; (801633c <dhcp_parse_reply+0x59c>)
 8016242:	6a3b      	ldr	r3, [r7, #32]
 8016244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801624a:	895b      	ldrh	r3, [r3, #10]
 801624c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801624e:	429a      	cmp	r2, r3
 8016250:	d324      	bcc.n	801629c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8016252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016254:	895b      	ldrh	r3, [r3, #10]
 8016256:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016258:	1ad3      	subs	r3, r2, r3
 801625a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801625e:	895b      	ldrh	r3, [r3, #10]
 8016260:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016262:	1ad3      	subs	r3, r2, r3
 8016264:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8016266:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016268:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801626a:	429a      	cmp	r2, r3
 801626c:	d213      	bcs.n	8016296 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8016274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016276:	2b00      	cmp	r3, #0
 8016278:	d109      	bne.n	801628e <dhcp_parse_reply+0x4ee>
 801627a:	4b2a      	ldr	r3, [pc, #168]	; (8016324 <dhcp_parse_reply+0x584>)
 801627c:	f240 629d 	movw	r2, #1693	; 0x69d
 8016280:	4930      	ldr	r1, [pc, #192]	; (8016344 <dhcp_parse_reply+0x5a4>)
 8016282:	482a      	ldr	r0, [pc, #168]	; (801632c <dhcp_parse_reply+0x58c>)
 8016284:	f005 f870 	bl	801b368 <iprintf>
 8016288:	f06f 0305 	mvn.w	r3, #5
 801628c:	e046      	b.n	801631c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801628e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016290:	685b      	ldr	r3, [r3, #4]
 8016292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016294:	e002      	b.n	801629c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016296:	f06f 0301 	mvn.w	r3, #1
 801629a:	e03f      	b.n	801631c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d00a      	beq.n	80162b8 <dhcp_parse_reply+0x518>
 80162a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80162a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d206      	bcs.n	80162b8 <dhcp_parse_reply+0x518>
 80162aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80162ae:	4413      	add	r3, r2
 80162b0:	781b      	ldrb	r3, [r3, #0]
 80162b2:	2bff      	cmp	r3, #255	; 0xff
 80162b4:	f47f adb7 	bne.w	8015e26 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80162b8:	4b1e      	ldr	r3, [pc, #120]	; (8016334 <dhcp_parse_reply+0x594>)
 80162ba:	781b      	ldrb	r3, [r3, #0]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d018      	beq.n	80162f2 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80162c0:	4b1e      	ldr	r3, [pc, #120]	; (801633c <dhcp_parse_reply+0x59c>)
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80162c6:	4b1b      	ldr	r3, [pc, #108]	; (8016334 <dhcp_parse_reply+0x594>)
 80162c8:	2200      	movs	r2, #0
 80162ca:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	2b01      	cmp	r3, #1
 80162d0:	d102      	bne.n	80162d8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80162d2:	2301      	movs	r3, #1
 80162d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162d6:	e00c      	b.n	80162f2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	2b02      	cmp	r3, #2
 80162dc:	d102      	bne.n	80162e4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80162de:	2301      	movs	r3, #1
 80162e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80162e2:	e006      	b.n	80162f2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	2b03      	cmp	r3, #3
 80162e8:	d103      	bne.n	80162f2 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80162ea:	2301      	movs	r3, #1
 80162ec:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80162ee:	2301      	movs	r3, #1
 80162f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80162f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d006      	beq.n	8016306 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80162f8:	2300      	movs	r3, #0
 80162fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80162fc:	236c      	movs	r3, #108	; 0x6c
 80162fe:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8016300:	23ec      	movs	r3, #236	; 0xec
 8016302:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8016304:	e569      	b.n	8015dda <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016308:	2b00      	cmp	r3, #0
 801630a:	d006      	beq.n	801631a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 801630c:	2300      	movs	r3, #0
 801630e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8016310:	232c      	movs	r3, #44	; 0x2c
 8016312:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016314:	236c      	movs	r3, #108	; 0x6c
 8016316:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8016318:	e55f      	b.n	8015dda <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801631a:	2300      	movs	r3, #0
}
 801631c:	4618      	mov	r0, r3
 801631e:	3740      	adds	r7, #64	; 0x40
 8016320:	46bd      	mov	sp, r7
 8016322:	bd80      	pop	{r7, pc}
 8016324:	0801f21c 	.word	0x0801f21c
 8016328:	0801f4a4 	.word	0x0801f4a4
 801632c:	0801f27c 	.word	0x0801f27c
 8016330:	0801f4e8 	.word	0x0801f4e8
 8016334:	20019070 	.word	0x20019070
 8016338:	0801f4fc 	.word	0x0801f4fc
 801633c:	20019078 	.word	0x20019078
 8016340:	0801f514 	.word	0x0801f514
 8016344:	0801f528 	.word	0x0801f528

08016348 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b08a      	sub	sp, #40	; 0x28
 801634c:	af00      	add	r7, sp, #0
 801634e:	60f8      	str	r0, [r7, #12]
 8016350:	60b9      	str	r1, [r7, #8]
 8016352:	607a      	str	r2, [r7, #4]
 8016354:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8016356:	4b60      	ldr	r3, [pc, #384]	; (80164d8 <dhcp_recv+0x190>)
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801635c:	6a3b      	ldr	r3, [r7, #32]
 801635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016360:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	685b      	ldr	r3, [r3, #4]
 8016366:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016368:	69fb      	ldr	r3, [r7, #28]
 801636a:	2b00      	cmp	r3, #0
 801636c:	f000 809d 	beq.w	80164aa <dhcp_recv+0x162>
 8016370:	69fb      	ldr	r3, [r7, #28]
 8016372:	791b      	ldrb	r3, [r3, #4]
 8016374:	2b00      	cmp	r3, #0
 8016376:	f000 8098 	beq.w	80164aa <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	895b      	ldrh	r3, [r3, #10]
 801637e:	2b2b      	cmp	r3, #43	; 0x2b
 8016380:	f240 8095 	bls.w	80164ae <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016384:	69bb      	ldr	r3, [r7, #24]
 8016386:	781b      	ldrb	r3, [r3, #0]
 8016388:	2b02      	cmp	r3, #2
 801638a:	f040 8092 	bne.w	80164b2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801638e:	2300      	movs	r3, #0
 8016390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016394:	e012      	b.n	80163bc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801639a:	6a3a      	ldr	r2, [r7, #32]
 801639c:	4413      	add	r3, r2
 801639e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80163a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163a6:	69b9      	ldr	r1, [r7, #24]
 80163a8:	440b      	add	r3, r1
 80163aa:	7f1b      	ldrb	r3, [r3, #28]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	f040 8082 	bne.w	80164b6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80163b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163b6:	3301      	adds	r3, #1
 80163b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80163bc:	6a3b      	ldr	r3, [r7, #32]
 80163be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80163c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d203      	bcs.n	80163d2 <dhcp_recv+0x8a>
 80163ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163ce:	2b05      	cmp	r3, #5
 80163d0:	d9e1      	bls.n	8016396 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80163d2:	69bb      	ldr	r3, [r7, #24]
 80163d4:	685b      	ldr	r3, [r3, #4]
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7f5 fc97 	bl	800bd0a <lwip_htonl>
 80163dc:	4602      	mov	r2, r0
 80163de:	69fb      	ldr	r3, [r7, #28]
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	429a      	cmp	r2, r3
 80163e4:	d169      	bne.n	80164ba <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80163e6:	69f9      	ldr	r1, [r7, #28]
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	f7ff fcd9 	bl	8015da0 <dhcp_parse_reply>
 80163ee:	4603      	mov	r3, r0
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d164      	bne.n	80164be <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80163f4:	4b39      	ldr	r3, [pc, #228]	; (80164dc <dhcp_recv+0x194>)
 80163f6:	785b      	ldrb	r3, [r3, #1]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d062      	beq.n	80164c2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	685b      	ldr	r3, [r3, #4]
 8016400:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016402:	4b37      	ldr	r3, [pc, #220]	; (80164e0 <dhcp_recv+0x198>)
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016408:	7cfb      	ldrb	r3, [r7, #19]
 801640a:	2b05      	cmp	r3, #5
 801640c:	d12a      	bne.n	8016464 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801640e:	69fb      	ldr	r3, [r7, #28]
 8016410:	795b      	ldrb	r3, [r3, #5]
 8016412:	2b01      	cmp	r3, #1
 8016414:	d112      	bne.n	801643c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8016416:	6979      	ldr	r1, [r7, #20]
 8016418:	6a38      	ldr	r0, [r7, #32]
 801641a:	f7fe fe17 	bl	801504c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801641e:	6a3b      	ldr	r3, [r7, #32]
 8016420:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016424:	f003 0308 	and.w	r3, r3, #8
 8016428:	2b00      	cmp	r3, #0
 801642a:	d003      	beq.n	8016434 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801642c:	6a38      	ldr	r0, [r7, #32]
 801642e:	f7fe fb87 	bl	8014b40 <dhcp_check>
 8016432:	e049      	b.n	80164c8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016434:	6a38      	ldr	r0, [r7, #32]
 8016436:	f7ff f867 	bl	8015508 <dhcp_bind>
 801643a:	e045      	b.n	80164c8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801643c:	69fb      	ldr	r3, [r7, #28]
 801643e:	795b      	ldrb	r3, [r3, #5]
 8016440:	2b03      	cmp	r3, #3
 8016442:	d007      	beq.n	8016454 <dhcp_recv+0x10c>
 8016444:	69fb      	ldr	r3, [r7, #28]
 8016446:	795b      	ldrb	r3, [r3, #5]
 8016448:	2b04      	cmp	r3, #4
 801644a:	d003      	beq.n	8016454 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801644c:	69fb      	ldr	r3, [r7, #28]
 801644e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016450:	2b05      	cmp	r3, #5
 8016452:	d139      	bne.n	80164c8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8016454:	6979      	ldr	r1, [r7, #20]
 8016456:	6a38      	ldr	r0, [r7, #32]
 8016458:	f7fe fdf8 	bl	801504c <dhcp_handle_ack>
      dhcp_bind(netif);
 801645c:	6a38      	ldr	r0, [r7, #32]
 801645e:	f7ff f853 	bl	8015508 <dhcp_bind>
 8016462:	e031      	b.n	80164c8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016464:	7cfb      	ldrb	r3, [r7, #19]
 8016466:	2b06      	cmp	r3, #6
 8016468:	d113      	bne.n	8016492 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801646e:	2b03      	cmp	r3, #3
 8016470:	d00b      	beq.n	801648a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016472:	69fb      	ldr	r3, [r7, #28]
 8016474:	795b      	ldrb	r3, [r3, #5]
 8016476:	2b01      	cmp	r3, #1
 8016478:	d007      	beq.n	801648a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801647a:	69fb      	ldr	r3, [r7, #28]
 801647c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801647e:	2b04      	cmp	r3, #4
 8016480:	d003      	beq.n	801648a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016482:	69fb      	ldr	r3, [r7, #28]
 8016484:	795b      	ldrb	r3, [r3, #5]
 8016486:	2b05      	cmp	r3, #5
 8016488:	d103      	bne.n	8016492 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801648a:	6a38      	ldr	r0, [r7, #32]
 801648c:	f7fe fb3e 	bl	8014b0c <dhcp_handle_nak>
 8016490:	e01a      	b.n	80164c8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8016492:	7cfb      	ldrb	r3, [r7, #19]
 8016494:	2b02      	cmp	r3, #2
 8016496:	d116      	bne.n	80164c6 <dhcp_recv+0x17e>
 8016498:	69fb      	ldr	r3, [r7, #28]
 801649a:	795b      	ldrb	r3, [r3, #5]
 801649c:	2b06      	cmp	r3, #6
 801649e:	d112      	bne.n	80164c6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80164a0:	6979      	ldr	r1, [r7, #20]
 80164a2:	6a38      	ldr	r0, [r7, #32]
 80164a4:	f7fe fb80 	bl	8014ba8 <dhcp_handle_offer>
 80164a8:	e00e      	b.n	80164c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80164aa:	bf00      	nop
 80164ac:	e00c      	b.n	80164c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80164ae:	bf00      	nop
 80164b0:	e00a      	b.n	80164c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80164b2:	bf00      	nop
 80164b4:	e008      	b.n	80164c8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80164b6:	bf00      	nop
 80164b8:	e006      	b.n	80164c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80164ba:	bf00      	nop
 80164bc:	e004      	b.n	80164c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80164be:	bf00      	nop
 80164c0:	e002      	b.n	80164c8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80164c2:	bf00      	nop
 80164c4:	e000      	b.n	80164c8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80164c6:	bf00      	nop
  pbuf_free(p);
 80164c8:	6878      	ldr	r0, [r7, #4]
 80164ca:	f7f7 f871 	bl	800d5b0 <pbuf_free>
}
 80164ce:	bf00      	nop
 80164d0:	3728      	adds	r7, #40	; 0x28
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd80      	pop	{r7, pc}
 80164d6:	bf00      	nop
 80164d8:	20015920 	.word	0x20015920
 80164dc:	20019070 	.word	0x20019070
 80164e0:	20019078 	.word	0x20019078

080164e4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b088      	sub	sp, #32
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	60f8      	str	r0, [r7, #12]
 80164ec:	60b9      	str	r1, [r7, #8]
 80164ee:	603b      	str	r3, [r7, #0]
 80164f0:	4613      	mov	r3, r2
 80164f2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d108      	bne.n	801650c <dhcp_create_msg+0x28>
 80164fa:	4b5f      	ldr	r3, [pc, #380]	; (8016678 <dhcp_create_msg+0x194>)
 80164fc:	f240 7269 	movw	r2, #1897	; 0x769
 8016500:	495e      	ldr	r1, [pc, #376]	; (801667c <dhcp_create_msg+0x198>)
 8016502:	485f      	ldr	r0, [pc, #380]	; (8016680 <dhcp_create_msg+0x19c>)
 8016504:	f004 ff30 	bl	801b368 <iprintf>
 8016508:	2300      	movs	r3, #0
 801650a:	e0b1      	b.n	8016670 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801650c:	68bb      	ldr	r3, [r7, #8]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d108      	bne.n	8016524 <dhcp_create_msg+0x40>
 8016512:	4b59      	ldr	r3, [pc, #356]	; (8016678 <dhcp_create_msg+0x194>)
 8016514:	f240 726a 	movw	r2, #1898	; 0x76a
 8016518:	495a      	ldr	r1, [pc, #360]	; (8016684 <dhcp_create_msg+0x1a0>)
 801651a:	4859      	ldr	r0, [pc, #356]	; (8016680 <dhcp_create_msg+0x19c>)
 801651c:	f004 ff24 	bl	801b368 <iprintf>
 8016520:	2300      	movs	r3, #0
 8016522:	e0a5      	b.n	8016670 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016524:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016528:	f44f 719a 	mov.w	r1, #308	; 0x134
 801652c:	2036      	movs	r0, #54	; 0x36
 801652e:	f7f6 fd29 	bl	800cf84 <pbuf_alloc>
 8016532:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016534:	69bb      	ldr	r3, [r7, #24]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d101      	bne.n	801653e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801653a:	2300      	movs	r3, #0
 801653c:	e098      	b.n	8016670 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801653e:	69bb      	ldr	r3, [r7, #24]
 8016540:	895b      	ldrh	r3, [r3, #10]
 8016542:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8016546:	d206      	bcs.n	8016556 <dhcp_create_msg+0x72>
 8016548:	4b4b      	ldr	r3, [pc, #300]	; (8016678 <dhcp_create_msg+0x194>)
 801654a:	f240 7271 	movw	r2, #1905	; 0x771
 801654e:	494e      	ldr	r1, [pc, #312]	; (8016688 <dhcp_create_msg+0x1a4>)
 8016550:	484b      	ldr	r0, [pc, #300]	; (8016680 <dhcp_create_msg+0x19c>)
 8016552:	f004 ff09 	bl	801b368 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8016556:	79fb      	ldrb	r3, [r7, #7]
 8016558:	2b03      	cmp	r3, #3
 801655a:	d103      	bne.n	8016564 <dhcp_create_msg+0x80>
 801655c:	68bb      	ldr	r3, [r7, #8]
 801655e:	795b      	ldrb	r3, [r3, #5]
 8016560:	2b03      	cmp	r3, #3
 8016562:	d10d      	bne.n	8016580 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016564:	68bb      	ldr	r3, [r7, #8]
 8016566:	799b      	ldrb	r3, [r3, #6]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d105      	bne.n	8016578 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801656c:	f004 ff14 	bl	801b398 <rand>
 8016570:	4603      	mov	r3, r0
 8016572:	461a      	mov	r2, r3
 8016574:	4b45      	ldr	r3, [pc, #276]	; (801668c <dhcp_create_msg+0x1a8>)
 8016576:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016578:	4b44      	ldr	r3, [pc, #272]	; (801668c <dhcp_create_msg+0x1a8>)
 801657a:	681a      	ldr	r2, [r3, #0]
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016580:	69bb      	ldr	r3, [r7, #24]
 8016582:	685b      	ldr	r3, [r3, #4]
 8016584:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8016586:	f44f 729a 	mov.w	r2, #308	; 0x134
 801658a:	2100      	movs	r1, #0
 801658c:	6978      	ldr	r0, [r7, #20]
 801658e:	f004 fb4b 	bl	801ac28 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016592:	697b      	ldr	r3, [r7, #20]
 8016594:	2201      	movs	r2, #1
 8016596:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	2201      	movs	r2, #1
 801659c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	4618      	mov	r0, r3
 80165ae:	f7f5 fbac 	bl	800bd0a <lwip_htonl>
 80165b2:	4602      	mov	r2, r0
 80165b4:	697b      	ldr	r3, [r7, #20]
 80165b6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80165b8:	79fb      	ldrb	r3, [r7, #7]
 80165ba:	2b08      	cmp	r3, #8
 80165bc:	d010      	beq.n	80165e0 <dhcp_create_msg+0xfc>
 80165be:	79fb      	ldrb	r3, [r7, #7]
 80165c0:	2b04      	cmp	r3, #4
 80165c2:	d00d      	beq.n	80165e0 <dhcp_create_msg+0xfc>
 80165c4:	79fb      	ldrb	r3, [r7, #7]
 80165c6:	2b07      	cmp	r3, #7
 80165c8:	d00a      	beq.n	80165e0 <dhcp_create_msg+0xfc>
 80165ca:	79fb      	ldrb	r3, [r7, #7]
 80165cc:	2b03      	cmp	r3, #3
 80165ce:	d10c      	bne.n	80165ea <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80165d0:	68bb      	ldr	r3, [r7, #8]
 80165d2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80165d4:	2b05      	cmp	r3, #5
 80165d6:	d003      	beq.n	80165e0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	795b      	ldrb	r3, [r3, #5]
 80165dc:	2b04      	cmp	r3, #4
 80165de:	d104      	bne.n	80165ea <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	3304      	adds	r3, #4
 80165e4:	681a      	ldr	r2, [r3, #0]
 80165e6:	697b      	ldr	r3, [r7, #20]
 80165e8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80165ea:	2300      	movs	r3, #0
 80165ec:	83fb      	strh	r3, [r7, #30]
 80165ee:	e00c      	b.n	801660a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80165f0:	8bfa      	ldrh	r2, [r7, #30]
 80165f2:	8bfb      	ldrh	r3, [r7, #30]
 80165f4:	68f9      	ldr	r1, [r7, #12]
 80165f6:	440a      	add	r2, r1
 80165f8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80165fc:	697a      	ldr	r2, [r7, #20]
 80165fe:	4413      	add	r3, r2
 8016600:	460a      	mov	r2, r1
 8016602:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016604:	8bfb      	ldrh	r3, [r7, #30]
 8016606:	3301      	adds	r3, #1
 8016608:	83fb      	strh	r3, [r7, #30]
 801660a:	8bfb      	ldrh	r3, [r7, #30]
 801660c:	2b05      	cmp	r3, #5
 801660e:	d9ef      	bls.n	80165f0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016610:	697b      	ldr	r3, [r7, #20]
 8016612:	2200      	movs	r2, #0
 8016614:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016618:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801661c:	2200      	movs	r2, #0
 801661e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016622:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016626:	2200      	movs	r2, #0
 8016628:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801662c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016630:	2200      	movs	r2, #0
 8016632:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016636:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016640:	2301      	movs	r3, #1
 8016642:	2235      	movs	r2, #53	; 0x35
 8016644:	2000      	movs	r0, #0
 8016646:	f7ff fadb 	bl	8015c00 <dhcp_option>
 801664a:	4603      	mov	r3, r0
 801664c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016654:	79fa      	ldrb	r2, [r7, #7]
 8016656:	8a7b      	ldrh	r3, [r7, #18]
 8016658:	4618      	mov	r0, r3
 801665a:	f7ff fb05 	bl	8015c68 <dhcp_option_byte>
 801665e:	4603      	mov	r3, r0
 8016660:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d002      	beq.n	801666e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	8a7a      	ldrh	r2, [r7, #18]
 801666c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801666e:	69bb      	ldr	r3, [r7, #24]
}
 8016670:	4618      	mov	r0, r3
 8016672:	3720      	adds	r7, #32
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}
 8016678:	0801f21c 	.word	0x0801f21c
 801667c:	0801f53c 	.word	0x0801f53c
 8016680:	0801f27c 	.word	0x0801f27c
 8016684:	0801f55c 	.word	0x0801f55c
 8016688:	0801f57c 	.word	0x0801f57c
 801668c:	200107bc 	.word	0x200107bc

08016690 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b084      	sub	sp, #16
 8016694:	af00      	add	r7, sp, #0
 8016696:	4603      	mov	r3, r0
 8016698:	60b9      	str	r1, [r7, #8]
 801669a:	607a      	str	r2, [r7, #4]
 801669c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801669e:	89fb      	ldrh	r3, [r7, #14]
 80166a0:	1c5a      	adds	r2, r3, #1
 80166a2:	81fa      	strh	r2, [r7, #14]
 80166a4:	461a      	mov	r2, r3
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	4413      	add	r3, r2
 80166aa:	22ff      	movs	r2, #255	; 0xff
 80166ac:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80166ae:	e007      	b.n	80166c0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80166b0:	89fb      	ldrh	r3, [r7, #14]
 80166b2:	1c5a      	adds	r2, r3, #1
 80166b4:	81fa      	strh	r2, [r7, #14]
 80166b6:	461a      	mov	r2, r3
 80166b8:	68bb      	ldr	r3, [r7, #8]
 80166ba:	4413      	add	r3, r2
 80166bc:	2200      	movs	r2, #0
 80166be:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80166c0:	89fb      	ldrh	r3, [r7, #14]
 80166c2:	2b43      	cmp	r3, #67	; 0x43
 80166c4:	d904      	bls.n	80166d0 <dhcp_option_trailer+0x40>
 80166c6:	89fb      	ldrh	r3, [r7, #14]
 80166c8:	f003 0303 	and.w	r3, r3, #3
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d002      	beq.n	80166d6 <dhcp_option_trailer+0x46>
 80166d0:	89fb      	ldrh	r3, [r7, #14]
 80166d2:	2b43      	cmp	r3, #67	; 0x43
 80166d4:	d9ec      	bls.n	80166b0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80166d6:	89fb      	ldrh	r3, [r7, #14]
 80166d8:	33f0      	adds	r3, #240	; 0xf0
 80166da:	b29b      	uxth	r3, r3
 80166dc:	4619      	mov	r1, r3
 80166de:	6878      	ldr	r0, [r7, #4]
 80166e0:	f7f6 fdae 	bl	800d240 <pbuf_realloc>
}
 80166e4:	bf00      	nop
 80166e6:	3710      	adds	r7, #16
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}

080166ec <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80166ec:	b480      	push	{r7}
 80166ee:	b085      	sub	sp, #20
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d017      	beq.n	801672a <dhcp_supplied_address+0x3e>
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d013      	beq.n	801672a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016706:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	795b      	ldrb	r3, [r3, #5]
 801670c:	2b0a      	cmp	r3, #10
 801670e:	d007      	beq.n	8016720 <dhcp_supplied_address+0x34>
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	795b      	ldrb	r3, [r3, #5]
 8016714:	2b05      	cmp	r3, #5
 8016716:	d003      	beq.n	8016720 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801671c:	2b04      	cmp	r3, #4
 801671e:	d101      	bne.n	8016724 <dhcp_supplied_address+0x38>
 8016720:	2301      	movs	r3, #1
 8016722:	e000      	b.n	8016726 <dhcp_supplied_address+0x3a>
 8016724:	2300      	movs	r3, #0
 8016726:	b2db      	uxtb	r3, r3
 8016728:	e000      	b.n	801672c <dhcp_supplied_address+0x40>
  }
  return 0;
 801672a:	2300      	movs	r3, #0
}
 801672c:	4618      	mov	r0, r3
 801672e:	3714      	adds	r7, #20
 8016730:	46bd      	mov	sp, r7
 8016732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016736:	4770      	bx	lr

08016738 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016740:	4915      	ldr	r1, [pc, #84]	; (8016798 <etharp_free_entry+0x60>)
 8016742:	687a      	ldr	r2, [r7, #4]
 8016744:	4613      	mov	r3, r2
 8016746:	005b      	lsls	r3, r3, #1
 8016748:	4413      	add	r3, r2
 801674a:	00db      	lsls	r3, r3, #3
 801674c:	440b      	add	r3, r1
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d013      	beq.n	801677c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016754:	4910      	ldr	r1, [pc, #64]	; (8016798 <etharp_free_entry+0x60>)
 8016756:	687a      	ldr	r2, [r7, #4]
 8016758:	4613      	mov	r3, r2
 801675a:	005b      	lsls	r3, r3, #1
 801675c:	4413      	add	r3, r2
 801675e:	00db      	lsls	r3, r3, #3
 8016760:	440b      	add	r3, r1
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	4618      	mov	r0, r3
 8016766:	f7f6 ff23 	bl	800d5b0 <pbuf_free>
    arp_table[i].q = NULL;
 801676a:	490b      	ldr	r1, [pc, #44]	; (8016798 <etharp_free_entry+0x60>)
 801676c:	687a      	ldr	r2, [r7, #4]
 801676e:	4613      	mov	r3, r2
 8016770:	005b      	lsls	r3, r3, #1
 8016772:	4413      	add	r3, r2
 8016774:	00db      	lsls	r3, r3, #3
 8016776:	440b      	add	r3, r1
 8016778:	2200      	movs	r2, #0
 801677a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801677c:	4906      	ldr	r1, [pc, #24]	; (8016798 <etharp_free_entry+0x60>)
 801677e:	687a      	ldr	r2, [r7, #4]
 8016780:	4613      	mov	r3, r2
 8016782:	005b      	lsls	r3, r3, #1
 8016784:	4413      	add	r3, r2
 8016786:	00db      	lsls	r3, r3, #3
 8016788:	440b      	add	r3, r1
 801678a:	3314      	adds	r3, #20
 801678c:	2200      	movs	r2, #0
 801678e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016790:	bf00      	nop
 8016792:	3708      	adds	r7, #8
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}
 8016798:	200107c0 	.word	0x200107c0

0801679c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b082      	sub	sp, #8
 80167a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80167a2:	2300      	movs	r3, #0
 80167a4:	607b      	str	r3, [r7, #4]
 80167a6:	e096      	b.n	80168d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80167a8:	494f      	ldr	r1, [pc, #316]	; (80168e8 <etharp_tmr+0x14c>)
 80167aa:	687a      	ldr	r2, [r7, #4]
 80167ac:	4613      	mov	r3, r2
 80167ae:	005b      	lsls	r3, r3, #1
 80167b0:	4413      	add	r3, r2
 80167b2:	00db      	lsls	r3, r3, #3
 80167b4:	440b      	add	r3, r1
 80167b6:	3314      	adds	r3, #20
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80167bc:	78fb      	ldrb	r3, [r7, #3]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	f000 8086 	beq.w	80168d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80167c4:	4948      	ldr	r1, [pc, #288]	; (80168e8 <etharp_tmr+0x14c>)
 80167c6:	687a      	ldr	r2, [r7, #4]
 80167c8:	4613      	mov	r3, r2
 80167ca:	005b      	lsls	r3, r3, #1
 80167cc:	4413      	add	r3, r2
 80167ce:	00db      	lsls	r3, r3, #3
 80167d0:	440b      	add	r3, r1
 80167d2:	3312      	adds	r3, #18
 80167d4:	881b      	ldrh	r3, [r3, #0]
 80167d6:	3301      	adds	r3, #1
 80167d8:	b298      	uxth	r0, r3
 80167da:	4943      	ldr	r1, [pc, #268]	; (80168e8 <etharp_tmr+0x14c>)
 80167dc:	687a      	ldr	r2, [r7, #4]
 80167de:	4613      	mov	r3, r2
 80167e0:	005b      	lsls	r3, r3, #1
 80167e2:	4413      	add	r3, r2
 80167e4:	00db      	lsls	r3, r3, #3
 80167e6:	440b      	add	r3, r1
 80167e8:	3312      	adds	r3, #18
 80167ea:	4602      	mov	r2, r0
 80167ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80167ee:	493e      	ldr	r1, [pc, #248]	; (80168e8 <etharp_tmr+0x14c>)
 80167f0:	687a      	ldr	r2, [r7, #4]
 80167f2:	4613      	mov	r3, r2
 80167f4:	005b      	lsls	r3, r3, #1
 80167f6:	4413      	add	r3, r2
 80167f8:	00db      	lsls	r3, r3, #3
 80167fa:	440b      	add	r3, r1
 80167fc:	3312      	adds	r3, #18
 80167fe:	881b      	ldrh	r3, [r3, #0]
 8016800:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016804:	d215      	bcs.n	8016832 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016806:	4938      	ldr	r1, [pc, #224]	; (80168e8 <etharp_tmr+0x14c>)
 8016808:	687a      	ldr	r2, [r7, #4]
 801680a:	4613      	mov	r3, r2
 801680c:	005b      	lsls	r3, r3, #1
 801680e:	4413      	add	r3, r2
 8016810:	00db      	lsls	r3, r3, #3
 8016812:	440b      	add	r3, r1
 8016814:	3314      	adds	r3, #20
 8016816:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016818:	2b01      	cmp	r3, #1
 801681a:	d10e      	bne.n	801683a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801681c:	4932      	ldr	r1, [pc, #200]	; (80168e8 <etharp_tmr+0x14c>)
 801681e:	687a      	ldr	r2, [r7, #4]
 8016820:	4613      	mov	r3, r2
 8016822:	005b      	lsls	r3, r3, #1
 8016824:	4413      	add	r3, r2
 8016826:	00db      	lsls	r3, r3, #3
 8016828:	440b      	add	r3, r1
 801682a:	3312      	adds	r3, #18
 801682c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801682e:	2b04      	cmp	r3, #4
 8016830:	d903      	bls.n	801683a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016832:	6878      	ldr	r0, [r7, #4]
 8016834:	f7ff ff80 	bl	8016738 <etharp_free_entry>
 8016838:	e04a      	b.n	80168d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801683a:	492b      	ldr	r1, [pc, #172]	; (80168e8 <etharp_tmr+0x14c>)
 801683c:	687a      	ldr	r2, [r7, #4]
 801683e:	4613      	mov	r3, r2
 8016840:	005b      	lsls	r3, r3, #1
 8016842:	4413      	add	r3, r2
 8016844:	00db      	lsls	r3, r3, #3
 8016846:	440b      	add	r3, r1
 8016848:	3314      	adds	r3, #20
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	2b03      	cmp	r3, #3
 801684e:	d10a      	bne.n	8016866 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016850:	4925      	ldr	r1, [pc, #148]	; (80168e8 <etharp_tmr+0x14c>)
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	4613      	mov	r3, r2
 8016856:	005b      	lsls	r3, r3, #1
 8016858:	4413      	add	r3, r2
 801685a:	00db      	lsls	r3, r3, #3
 801685c:	440b      	add	r3, r1
 801685e:	3314      	adds	r3, #20
 8016860:	2204      	movs	r2, #4
 8016862:	701a      	strb	r2, [r3, #0]
 8016864:	e034      	b.n	80168d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016866:	4920      	ldr	r1, [pc, #128]	; (80168e8 <etharp_tmr+0x14c>)
 8016868:	687a      	ldr	r2, [r7, #4]
 801686a:	4613      	mov	r3, r2
 801686c:	005b      	lsls	r3, r3, #1
 801686e:	4413      	add	r3, r2
 8016870:	00db      	lsls	r3, r3, #3
 8016872:	440b      	add	r3, r1
 8016874:	3314      	adds	r3, #20
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	2b04      	cmp	r3, #4
 801687a:	d10a      	bne.n	8016892 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801687c:	491a      	ldr	r1, [pc, #104]	; (80168e8 <etharp_tmr+0x14c>)
 801687e:	687a      	ldr	r2, [r7, #4]
 8016880:	4613      	mov	r3, r2
 8016882:	005b      	lsls	r3, r3, #1
 8016884:	4413      	add	r3, r2
 8016886:	00db      	lsls	r3, r3, #3
 8016888:	440b      	add	r3, r1
 801688a:	3314      	adds	r3, #20
 801688c:	2202      	movs	r2, #2
 801688e:	701a      	strb	r2, [r3, #0]
 8016890:	e01e      	b.n	80168d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016892:	4915      	ldr	r1, [pc, #84]	; (80168e8 <etharp_tmr+0x14c>)
 8016894:	687a      	ldr	r2, [r7, #4]
 8016896:	4613      	mov	r3, r2
 8016898:	005b      	lsls	r3, r3, #1
 801689a:	4413      	add	r3, r2
 801689c:	00db      	lsls	r3, r3, #3
 801689e:	440b      	add	r3, r1
 80168a0:	3314      	adds	r3, #20
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	2b01      	cmp	r3, #1
 80168a6:	d113      	bne.n	80168d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80168a8:	490f      	ldr	r1, [pc, #60]	; (80168e8 <etharp_tmr+0x14c>)
 80168aa:	687a      	ldr	r2, [r7, #4]
 80168ac:	4613      	mov	r3, r2
 80168ae:	005b      	lsls	r3, r3, #1
 80168b0:	4413      	add	r3, r2
 80168b2:	00db      	lsls	r3, r3, #3
 80168b4:	440b      	add	r3, r1
 80168b6:	3308      	adds	r3, #8
 80168b8:	6818      	ldr	r0, [r3, #0]
 80168ba:	687a      	ldr	r2, [r7, #4]
 80168bc:	4613      	mov	r3, r2
 80168be:	005b      	lsls	r3, r3, #1
 80168c0:	4413      	add	r3, r2
 80168c2:	00db      	lsls	r3, r3, #3
 80168c4:	4a08      	ldr	r2, [pc, #32]	; (80168e8 <etharp_tmr+0x14c>)
 80168c6:	4413      	add	r3, r2
 80168c8:	3304      	adds	r3, #4
 80168ca:	4619      	mov	r1, r3
 80168cc:	f000 fe72 	bl	80175b4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	3301      	adds	r3, #1
 80168d4:	607b      	str	r3, [r7, #4]
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	2b09      	cmp	r3, #9
 80168da:	f77f af65 	ble.w	80167a8 <etharp_tmr+0xc>
      }
    }
  }
}
 80168de:	bf00      	nop
 80168e0:	bf00      	nop
 80168e2:	3708      	adds	r7, #8
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}
 80168e8:	200107c0 	.word	0x200107c0

080168ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b08a      	sub	sp, #40	; 0x28
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	60f8      	str	r0, [r7, #12]
 80168f4:	460b      	mov	r3, r1
 80168f6:	607a      	str	r2, [r7, #4]
 80168f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80168fa:	230a      	movs	r3, #10
 80168fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80168fe:	230a      	movs	r3, #10
 8016900:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016902:	230a      	movs	r3, #10
 8016904:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016906:	2300      	movs	r3, #0
 8016908:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801690a:	230a      	movs	r3, #10
 801690c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801690e:	2300      	movs	r3, #0
 8016910:	83bb      	strh	r3, [r7, #28]
 8016912:	2300      	movs	r3, #0
 8016914:	837b      	strh	r3, [r7, #26]
 8016916:	2300      	movs	r3, #0
 8016918:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801691a:	2300      	movs	r3, #0
 801691c:	843b      	strh	r3, [r7, #32]
 801691e:	e0ae      	b.n	8016a7e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016920:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016924:	49a6      	ldr	r1, [pc, #664]	; (8016bc0 <etharp_find_entry+0x2d4>)
 8016926:	4613      	mov	r3, r2
 8016928:	005b      	lsls	r3, r3, #1
 801692a:	4413      	add	r3, r2
 801692c:	00db      	lsls	r3, r3, #3
 801692e:	440b      	add	r3, r1
 8016930:	3314      	adds	r3, #20
 8016932:	781b      	ldrb	r3, [r3, #0]
 8016934:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016936:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801693a:	2b0a      	cmp	r3, #10
 801693c:	d105      	bne.n	801694a <etharp_find_entry+0x5e>
 801693e:	7dfb      	ldrb	r3, [r7, #23]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d102      	bne.n	801694a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016944:	8c3b      	ldrh	r3, [r7, #32]
 8016946:	847b      	strh	r3, [r7, #34]	; 0x22
 8016948:	e095      	b.n	8016a76 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801694a:	7dfb      	ldrb	r3, [r7, #23]
 801694c:	2b00      	cmp	r3, #0
 801694e:	f000 8092 	beq.w	8016a76 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016952:	7dfb      	ldrb	r3, [r7, #23]
 8016954:	2b01      	cmp	r3, #1
 8016956:	d009      	beq.n	801696c <etharp_find_entry+0x80>
 8016958:	7dfb      	ldrb	r3, [r7, #23]
 801695a:	2b01      	cmp	r3, #1
 801695c:	d806      	bhi.n	801696c <etharp_find_entry+0x80>
 801695e:	4b99      	ldr	r3, [pc, #612]	; (8016bc4 <etharp_find_entry+0x2d8>)
 8016960:	f240 1223 	movw	r2, #291	; 0x123
 8016964:	4998      	ldr	r1, [pc, #608]	; (8016bc8 <etharp_find_entry+0x2dc>)
 8016966:	4899      	ldr	r0, [pc, #612]	; (8016bcc <etharp_find_entry+0x2e0>)
 8016968:	f004 fcfe 	bl	801b368 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d020      	beq.n	80169b4 <etharp_find_entry+0xc8>
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	6819      	ldr	r1, [r3, #0]
 8016976:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801697a:	4891      	ldr	r0, [pc, #580]	; (8016bc0 <etharp_find_entry+0x2d4>)
 801697c:	4613      	mov	r3, r2
 801697e:	005b      	lsls	r3, r3, #1
 8016980:	4413      	add	r3, r2
 8016982:	00db      	lsls	r3, r3, #3
 8016984:	4403      	add	r3, r0
 8016986:	3304      	adds	r3, #4
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	4299      	cmp	r1, r3
 801698c:	d112      	bne.n	80169b4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d00c      	beq.n	80169ae <etharp_find_entry+0xc2>
 8016994:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016998:	4989      	ldr	r1, [pc, #548]	; (8016bc0 <etharp_find_entry+0x2d4>)
 801699a:	4613      	mov	r3, r2
 801699c:	005b      	lsls	r3, r3, #1
 801699e:	4413      	add	r3, r2
 80169a0:	00db      	lsls	r3, r3, #3
 80169a2:	440b      	add	r3, r1
 80169a4:	3308      	adds	r3, #8
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	687a      	ldr	r2, [r7, #4]
 80169aa:	429a      	cmp	r2, r3
 80169ac:	d102      	bne.n	80169b4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80169ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80169b2:	e100      	b.n	8016bb6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80169b4:	7dfb      	ldrb	r3, [r7, #23]
 80169b6:	2b01      	cmp	r3, #1
 80169b8:	d140      	bne.n	8016a3c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80169ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169be:	4980      	ldr	r1, [pc, #512]	; (8016bc0 <etharp_find_entry+0x2d4>)
 80169c0:	4613      	mov	r3, r2
 80169c2:	005b      	lsls	r3, r3, #1
 80169c4:	4413      	add	r3, r2
 80169c6:	00db      	lsls	r3, r3, #3
 80169c8:	440b      	add	r3, r1
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d01a      	beq.n	8016a06 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80169d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169d4:	497a      	ldr	r1, [pc, #488]	; (8016bc0 <etharp_find_entry+0x2d4>)
 80169d6:	4613      	mov	r3, r2
 80169d8:	005b      	lsls	r3, r3, #1
 80169da:	4413      	add	r3, r2
 80169dc:	00db      	lsls	r3, r3, #3
 80169de:	440b      	add	r3, r1
 80169e0:	3312      	adds	r3, #18
 80169e2:	881b      	ldrh	r3, [r3, #0]
 80169e4:	8bba      	ldrh	r2, [r7, #28]
 80169e6:	429a      	cmp	r2, r3
 80169e8:	d845      	bhi.n	8016a76 <etharp_find_entry+0x18a>
            old_queue = i;
 80169ea:	8c3b      	ldrh	r3, [r7, #32]
 80169ec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80169ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80169f2:	4973      	ldr	r1, [pc, #460]	; (8016bc0 <etharp_find_entry+0x2d4>)
 80169f4:	4613      	mov	r3, r2
 80169f6:	005b      	lsls	r3, r3, #1
 80169f8:	4413      	add	r3, r2
 80169fa:	00db      	lsls	r3, r3, #3
 80169fc:	440b      	add	r3, r1
 80169fe:	3312      	adds	r3, #18
 8016a00:	881b      	ldrh	r3, [r3, #0]
 8016a02:	83bb      	strh	r3, [r7, #28]
 8016a04:	e037      	b.n	8016a76 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016a06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a0a:	496d      	ldr	r1, [pc, #436]	; (8016bc0 <etharp_find_entry+0x2d4>)
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	005b      	lsls	r3, r3, #1
 8016a10:	4413      	add	r3, r2
 8016a12:	00db      	lsls	r3, r3, #3
 8016a14:	440b      	add	r3, r1
 8016a16:	3312      	adds	r3, #18
 8016a18:	881b      	ldrh	r3, [r3, #0]
 8016a1a:	8b7a      	ldrh	r2, [r7, #26]
 8016a1c:	429a      	cmp	r2, r3
 8016a1e:	d82a      	bhi.n	8016a76 <etharp_find_entry+0x18a>
            old_pending = i;
 8016a20:	8c3b      	ldrh	r3, [r7, #32]
 8016a22:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016a24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a28:	4965      	ldr	r1, [pc, #404]	; (8016bc0 <etharp_find_entry+0x2d4>)
 8016a2a:	4613      	mov	r3, r2
 8016a2c:	005b      	lsls	r3, r3, #1
 8016a2e:	4413      	add	r3, r2
 8016a30:	00db      	lsls	r3, r3, #3
 8016a32:	440b      	add	r3, r1
 8016a34:	3312      	adds	r3, #18
 8016a36:	881b      	ldrh	r3, [r3, #0]
 8016a38:	837b      	strh	r3, [r7, #26]
 8016a3a:	e01c      	b.n	8016a76 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016a3c:	7dfb      	ldrb	r3, [r7, #23]
 8016a3e:	2b01      	cmp	r3, #1
 8016a40:	d919      	bls.n	8016a76 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016a42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a46:	495e      	ldr	r1, [pc, #376]	; (8016bc0 <etharp_find_entry+0x2d4>)
 8016a48:	4613      	mov	r3, r2
 8016a4a:	005b      	lsls	r3, r3, #1
 8016a4c:	4413      	add	r3, r2
 8016a4e:	00db      	lsls	r3, r3, #3
 8016a50:	440b      	add	r3, r1
 8016a52:	3312      	adds	r3, #18
 8016a54:	881b      	ldrh	r3, [r3, #0]
 8016a56:	8b3a      	ldrh	r2, [r7, #24]
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d80c      	bhi.n	8016a76 <etharp_find_entry+0x18a>
            old_stable = i;
 8016a5c:	8c3b      	ldrh	r3, [r7, #32]
 8016a5e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016a60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a64:	4956      	ldr	r1, [pc, #344]	; (8016bc0 <etharp_find_entry+0x2d4>)
 8016a66:	4613      	mov	r3, r2
 8016a68:	005b      	lsls	r3, r3, #1
 8016a6a:	4413      	add	r3, r2
 8016a6c:	00db      	lsls	r3, r3, #3
 8016a6e:	440b      	add	r3, r1
 8016a70:	3312      	adds	r3, #18
 8016a72:	881b      	ldrh	r3, [r3, #0]
 8016a74:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a76:	8c3b      	ldrh	r3, [r7, #32]
 8016a78:	3301      	adds	r3, #1
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	843b      	strh	r3, [r7, #32]
 8016a7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016a82:	2b09      	cmp	r3, #9
 8016a84:	f77f af4c 	ble.w	8016920 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016a88:	7afb      	ldrb	r3, [r7, #11]
 8016a8a:	f003 0302 	and.w	r3, r3, #2
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d108      	bne.n	8016aa4 <etharp_find_entry+0x1b8>
 8016a92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a96:	2b0a      	cmp	r3, #10
 8016a98:	d107      	bne.n	8016aaa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016a9a:	7afb      	ldrb	r3, [r7, #11]
 8016a9c:	f003 0301 	and.w	r3, r3, #1
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d102      	bne.n	8016aaa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8016aa8:	e085      	b.n	8016bb6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016aaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016aae:	2b09      	cmp	r3, #9
 8016ab0:	dc02      	bgt.n	8016ab8 <etharp_find_entry+0x1cc>
    i = empty;
 8016ab2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ab4:	843b      	strh	r3, [r7, #32]
 8016ab6:	e039      	b.n	8016b2c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016ab8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016abc:	2b09      	cmp	r3, #9
 8016abe:	dc14      	bgt.n	8016aea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016ac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016ac2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016ac4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ac8:	493d      	ldr	r1, [pc, #244]	; (8016bc0 <etharp_find_entry+0x2d4>)
 8016aca:	4613      	mov	r3, r2
 8016acc:	005b      	lsls	r3, r3, #1
 8016ace:	4413      	add	r3, r2
 8016ad0:	00db      	lsls	r3, r3, #3
 8016ad2:	440b      	add	r3, r1
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d018      	beq.n	8016b0c <etharp_find_entry+0x220>
 8016ada:	4b3a      	ldr	r3, [pc, #232]	; (8016bc4 <etharp_find_entry+0x2d8>)
 8016adc:	f240 126d 	movw	r2, #365	; 0x16d
 8016ae0:	493b      	ldr	r1, [pc, #236]	; (8016bd0 <etharp_find_entry+0x2e4>)
 8016ae2:	483a      	ldr	r0, [pc, #232]	; (8016bcc <etharp_find_entry+0x2e0>)
 8016ae4:	f004 fc40 	bl	801b368 <iprintf>
 8016ae8:	e010      	b.n	8016b0c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016aea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016aee:	2b09      	cmp	r3, #9
 8016af0:	dc02      	bgt.n	8016af8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016af2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016af4:	843b      	strh	r3, [r7, #32]
 8016af6:	e009      	b.n	8016b0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016af8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016afc:	2b09      	cmp	r3, #9
 8016afe:	dc02      	bgt.n	8016b06 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016b00:	8bfb      	ldrh	r3, [r7, #30]
 8016b02:	843b      	strh	r3, [r7, #32]
 8016b04:	e002      	b.n	8016b0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016b06:	f04f 33ff 	mov.w	r3, #4294967295
 8016b0a:	e054      	b.n	8016bb6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016b0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b10:	2b09      	cmp	r3, #9
 8016b12:	dd06      	ble.n	8016b22 <etharp_find_entry+0x236>
 8016b14:	4b2b      	ldr	r3, [pc, #172]	; (8016bc4 <etharp_find_entry+0x2d8>)
 8016b16:	f240 127f 	movw	r2, #383	; 0x17f
 8016b1a:	492e      	ldr	r1, [pc, #184]	; (8016bd4 <etharp_find_entry+0x2e8>)
 8016b1c:	482b      	ldr	r0, [pc, #172]	; (8016bcc <etharp_find_entry+0x2e0>)
 8016b1e:	f004 fc23 	bl	801b368 <iprintf>
    etharp_free_entry(i);
 8016b22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b26:	4618      	mov	r0, r3
 8016b28:	f7ff fe06 	bl	8016738 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016b2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016b30:	2b09      	cmp	r3, #9
 8016b32:	dd06      	ble.n	8016b42 <etharp_find_entry+0x256>
 8016b34:	4b23      	ldr	r3, [pc, #140]	; (8016bc4 <etharp_find_entry+0x2d8>)
 8016b36:	f240 1283 	movw	r2, #387	; 0x183
 8016b3a:	4926      	ldr	r1, [pc, #152]	; (8016bd4 <etharp_find_entry+0x2e8>)
 8016b3c:	4823      	ldr	r0, [pc, #140]	; (8016bcc <etharp_find_entry+0x2e0>)
 8016b3e:	f004 fc13 	bl	801b368 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016b42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b46:	491e      	ldr	r1, [pc, #120]	; (8016bc0 <etharp_find_entry+0x2d4>)
 8016b48:	4613      	mov	r3, r2
 8016b4a:	005b      	lsls	r3, r3, #1
 8016b4c:	4413      	add	r3, r2
 8016b4e:	00db      	lsls	r3, r3, #3
 8016b50:	440b      	add	r3, r1
 8016b52:	3314      	adds	r3, #20
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d006      	beq.n	8016b68 <etharp_find_entry+0x27c>
 8016b5a:	4b1a      	ldr	r3, [pc, #104]	; (8016bc4 <etharp_find_entry+0x2d8>)
 8016b5c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016b60:	491d      	ldr	r1, [pc, #116]	; (8016bd8 <etharp_find_entry+0x2ec>)
 8016b62:	481a      	ldr	r0, [pc, #104]	; (8016bcc <etharp_find_entry+0x2e0>)
 8016b64:	f004 fc00 	bl	801b368 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d00b      	beq.n	8016b86 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016b6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	6819      	ldr	r1, [r3, #0]
 8016b76:	4812      	ldr	r0, [pc, #72]	; (8016bc0 <etharp_find_entry+0x2d4>)
 8016b78:	4613      	mov	r3, r2
 8016b7a:	005b      	lsls	r3, r3, #1
 8016b7c:	4413      	add	r3, r2
 8016b7e:	00db      	lsls	r3, r3, #3
 8016b80:	4403      	add	r3, r0
 8016b82:	3304      	adds	r3, #4
 8016b84:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016b86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b8a:	490d      	ldr	r1, [pc, #52]	; (8016bc0 <etharp_find_entry+0x2d4>)
 8016b8c:	4613      	mov	r3, r2
 8016b8e:	005b      	lsls	r3, r3, #1
 8016b90:	4413      	add	r3, r2
 8016b92:	00db      	lsls	r3, r3, #3
 8016b94:	440b      	add	r3, r1
 8016b96:	3312      	adds	r3, #18
 8016b98:	2200      	movs	r2, #0
 8016b9a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016b9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ba0:	4907      	ldr	r1, [pc, #28]	; (8016bc0 <etharp_find_entry+0x2d4>)
 8016ba2:	4613      	mov	r3, r2
 8016ba4:	005b      	lsls	r3, r3, #1
 8016ba6:	4413      	add	r3, r2
 8016ba8:	00db      	lsls	r3, r3, #3
 8016baa:	440b      	add	r3, r1
 8016bac:	3308      	adds	r3, #8
 8016bae:	687a      	ldr	r2, [r7, #4]
 8016bb0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016bb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	3728      	adds	r7, #40	; 0x28
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}
 8016bbe:	bf00      	nop
 8016bc0:	200107c0 	.word	0x200107c0
 8016bc4:	0801f5bc 	.word	0x0801f5bc
 8016bc8:	0801f5f4 	.word	0x0801f5f4
 8016bcc:	0801f634 	.word	0x0801f634
 8016bd0:	0801f65c 	.word	0x0801f65c
 8016bd4:	0801f674 	.word	0x0801f674
 8016bd8:	0801f688 	.word	0x0801f688

08016bdc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b088      	sub	sp, #32
 8016be0:	af02      	add	r7, sp, #8
 8016be2:	60f8      	str	r0, [r7, #12]
 8016be4:	60b9      	str	r1, [r7, #8]
 8016be6:	607a      	str	r2, [r7, #4]
 8016be8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016bf0:	2b06      	cmp	r3, #6
 8016bf2:	d006      	beq.n	8016c02 <etharp_update_arp_entry+0x26>
 8016bf4:	4b48      	ldr	r3, [pc, #288]	; (8016d18 <etharp_update_arp_entry+0x13c>)
 8016bf6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016bfa:	4948      	ldr	r1, [pc, #288]	; (8016d1c <etharp_update_arp_entry+0x140>)
 8016bfc:	4848      	ldr	r0, [pc, #288]	; (8016d20 <etharp_update_arp_entry+0x144>)
 8016bfe:	f004 fbb3 	bl	801b368 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d012      	beq.n	8016c2e <etharp_update_arp_entry+0x52>
 8016c08:	68bb      	ldr	r3, [r7, #8]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d00e      	beq.n	8016c2e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	68f9      	ldr	r1, [r7, #12]
 8016c16:	4618      	mov	r0, r3
 8016c18:	f001 f920 	bl	8017e5c <ip4_addr_isbroadcast_u32>
 8016c1c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d105      	bne.n	8016c2e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c2a:	2be0      	cmp	r3, #224	; 0xe0
 8016c2c:	d102      	bne.n	8016c34 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016c2e:	f06f 030f 	mvn.w	r3, #15
 8016c32:	e06c      	b.n	8016d0e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016c34:	78fb      	ldrb	r3, [r7, #3]
 8016c36:	68fa      	ldr	r2, [r7, #12]
 8016c38:	4619      	mov	r1, r3
 8016c3a:	68b8      	ldr	r0, [r7, #8]
 8016c3c:	f7ff fe56 	bl	80168ec <etharp_find_entry>
 8016c40:	4603      	mov	r3, r0
 8016c42:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016c44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	da02      	bge.n	8016c52 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016c4c:	8afb      	ldrh	r3, [r7, #22]
 8016c4e:	b25b      	sxtb	r3, r3
 8016c50:	e05d      	b.n	8016d0e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016c52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c56:	4933      	ldr	r1, [pc, #204]	; (8016d24 <etharp_update_arp_entry+0x148>)
 8016c58:	4613      	mov	r3, r2
 8016c5a:	005b      	lsls	r3, r3, #1
 8016c5c:	4413      	add	r3, r2
 8016c5e:	00db      	lsls	r3, r3, #3
 8016c60:	440b      	add	r3, r1
 8016c62:	3314      	adds	r3, #20
 8016c64:	2202      	movs	r2, #2
 8016c66:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016c68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c6c:	492d      	ldr	r1, [pc, #180]	; (8016d24 <etharp_update_arp_entry+0x148>)
 8016c6e:	4613      	mov	r3, r2
 8016c70:	005b      	lsls	r3, r3, #1
 8016c72:	4413      	add	r3, r2
 8016c74:	00db      	lsls	r3, r3, #3
 8016c76:	440b      	add	r3, r1
 8016c78:	3308      	adds	r3, #8
 8016c7a:	68fa      	ldr	r2, [r7, #12]
 8016c7c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016c7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016c82:	4613      	mov	r3, r2
 8016c84:	005b      	lsls	r3, r3, #1
 8016c86:	4413      	add	r3, r2
 8016c88:	00db      	lsls	r3, r3, #3
 8016c8a:	3308      	adds	r3, #8
 8016c8c:	4a25      	ldr	r2, [pc, #148]	; (8016d24 <etharp_update_arp_entry+0x148>)
 8016c8e:	4413      	add	r3, r2
 8016c90:	3304      	adds	r3, #4
 8016c92:	2206      	movs	r2, #6
 8016c94:	6879      	ldr	r1, [r7, #4]
 8016c96:	4618      	mov	r0, r3
 8016c98:	f003 ff9e 	bl	801abd8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016c9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ca0:	4920      	ldr	r1, [pc, #128]	; (8016d24 <etharp_update_arp_entry+0x148>)
 8016ca2:	4613      	mov	r3, r2
 8016ca4:	005b      	lsls	r3, r3, #1
 8016ca6:	4413      	add	r3, r2
 8016ca8:	00db      	lsls	r3, r3, #3
 8016caa:	440b      	add	r3, r1
 8016cac:	3312      	adds	r3, #18
 8016cae:	2200      	movs	r2, #0
 8016cb0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016cb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016cb6:	491b      	ldr	r1, [pc, #108]	; (8016d24 <etharp_update_arp_entry+0x148>)
 8016cb8:	4613      	mov	r3, r2
 8016cba:	005b      	lsls	r3, r3, #1
 8016cbc:	4413      	add	r3, r2
 8016cbe:	00db      	lsls	r3, r3, #3
 8016cc0:	440b      	add	r3, r1
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d021      	beq.n	8016d0c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016cc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ccc:	4915      	ldr	r1, [pc, #84]	; (8016d24 <etharp_update_arp_entry+0x148>)
 8016cce:	4613      	mov	r3, r2
 8016cd0:	005b      	lsls	r3, r3, #1
 8016cd2:	4413      	add	r3, r2
 8016cd4:	00db      	lsls	r3, r3, #3
 8016cd6:	440b      	add	r3, r1
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016cdc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ce0:	4910      	ldr	r1, [pc, #64]	; (8016d24 <etharp_update_arp_entry+0x148>)
 8016ce2:	4613      	mov	r3, r2
 8016ce4:	005b      	lsls	r3, r3, #1
 8016ce6:	4413      	add	r3, r2
 8016ce8:	00db      	lsls	r3, r3, #3
 8016cea:	440b      	add	r3, r1
 8016cec:	2200      	movs	r2, #0
 8016cee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016cfa:	9300      	str	r3, [sp, #0]
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	6939      	ldr	r1, [r7, #16]
 8016d00:	68f8      	ldr	r0, [r7, #12]
 8016d02:	f002 f835 	bl	8018d70 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016d06:	6938      	ldr	r0, [r7, #16]
 8016d08:	f7f6 fc52 	bl	800d5b0 <pbuf_free>
  }
  return ERR_OK;
 8016d0c:	2300      	movs	r3, #0
}
 8016d0e:	4618      	mov	r0, r3
 8016d10:	3718      	adds	r7, #24
 8016d12:	46bd      	mov	sp, r7
 8016d14:	bd80      	pop	{r7, pc}
 8016d16:	bf00      	nop
 8016d18:	0801f5bc 	.word	0x0801f5bc
 8016d1c:	0801f6b4 	.word	0x0801f6b4
 8016d20:	0801f634 	.word	0x0801f634
 8016d24:	200107c0 	.word	0x200107c0

08016d28 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b084      	sub	sp, #16
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d30:	2300      	movs	r3, #0
 8016d32:	60fb      	str	r3, [r7, #12]
 8016d34:	e01e      	b.n	8016d74 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016d36:	4913      	ldr	r1, [pc, #76]	; (8016d84 <etharp_cleanup_netif+0x5c>)
 8016d38:	68fa      	ldr	r2, [r7, #12]
 8016d3a:	4613      	mov	r3, r2
 8016d3c:	005b      	lsls	r3, r3, #1
 8016d3e:	4413      	add	r3, r2
 8016d40:	00db      	lsls	r3, r3, #3
 8016d42:	440b      	add	r3, r1
 8016d44:	3314      	adds	r3, #20
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016d4a:	7afb      	ldrb	r3, [r7, #11]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d00e      	beq.n	8016d6e <etharp_cleanup_netif+0x46>
 8016d50:	490c      	ldr	r1, [pc, #48]	; (8016d84 <etharp_cleanup_netif+0x5c>)
 8016d52:	68fa      	ldr	r2, [r7, #12]
 8016d54:	4613      	mov	r3, r2
 8016d56:	005b      	lsls	r3, r3, #1
 8016d58:	4413      	add	r3, r2
 8016d5a:	00db      	lsls	r3, r3, #3
 8016d5c:	440b      	add	r3, r1
 8016d5e:	3308      	adds	r3, #8
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	687a      	ldr	r2, [r7, #4]
 8016d64:	429a      	cmp	r2, r3
 8016d66:	d102      	bne.n	8016d6e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016d68:	68f8      	ldr	r0, [r7, #12]
 8016d6a:	f7ff fce5 	bl	8016738 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	3301      	adds	r3, #1
 8016d72:	60fb      	str	r3, [r7, #12]
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	2b09      	cmp	r3, #9
 8016d78:	dddd      	ble.n	8016d36 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016d7a:	bf00      	nop
 8016d7c:	bf00      	nop
 8016d7e:	3710      	adds	r7, #16
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}
 8016d84:	200107c0 	.word	0x200107c0

08016d88 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016d88:	b5b0      	push	{r4, r5, r7, lr}
 8016d8a:	b08a      	sub	sp, #40	; 0x28
 8016d8c:	af04      	add	r7, sp, #16
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016d92:	683b      	ldr	r3, [r7, #0]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d107      	bne.n	8016da8 <etharp_input+0x20>
 8016d98:	4b3f      	ldr	r3, [pc, #252]	; (8016e98 <etharp_input+0x110>)
 8016d9a:	f240 228a 	movw	r2, #650	; 0x28a
 8016d9e:	493f      	ldr	r1, [pc, #252]	; (8016e9c <etharp_input+0x114>)
 8016da0:	483f      	ldr	r0, [pc, #252]	; (8016ea0 <etharp_input+0x118>)
 8016da2:	f004 fae1 	bl	801b368 <iprintf>
 8016da6:	e074      	b.n	8016e92 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	881b      	ldrh	r3, [r3, #0]
 8016db2:	b29b      	uxth	r3, r3
 8016db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016db8:	d10c      	bne.n	8016dd4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016dba:	693b      	ldr	r3, [r7, #16]
 8016dbc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016dbe:	2b06      	cmp	r3, #6
 8016dc0:	d108      	bne.n	8016dd4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016dc6:	2b04      	cmp	r3, #4
 8016dc8:	d104      	bne.n	8016dd4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	885b      	ldrh	r3, [r3, #2]
 8016dce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016dd0:	2b08      	cmp	r3, #8
 8016dd2:	d003      	beq.n	8016ddc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016dd4:	6878      	ldr	r0, [r7, #4]
 8016dd6:	f7f6 fbeb 	bl	800d5b0 <pbuf_free>
    return;
 8016dda:	e05a      	b.n	8016e92 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016ddc:	693b      	ldr	r3, [r7, #16]
 8016dde:	330e      	adds	r3, #14
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016de4:	693b      	ldr	r3, [r7, #16]
 8016de6:	3318      	adds	r3, #24
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016dec:	683b      	ldr	r3, [r7, #0]
 8016dee:	3304      	adds	r3, #4
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d102      	bne.n	8016dfc <etharp_input+0x74>
    for_us = 0;
 8016df6:	2300      	movs	r3, #0
 8016df8:	75fb      	strb	r3, [r7, #23]
 8016dfa:	e009      	b.n	8016e10 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016dfc:	68ba      	ldr	r2, [r7, #8]
 8016dfe:	683b      	ldr	r3, [r7, #0]
 8016e00:	3304      	adds	r3, #4
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	429a      	cmp	r2, r3
 8016e06:	bf0c      	ite	eq
 8016e08:	2301      	moveq	r3, #1
 8016e0a:	2300      	movne	r3, #0
 8016e0c:	b2db      	uxtb	r3, r3
 8016e0e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	f103 0208 	add.w	r2, r3, #8
 8016e16:	7dfb      	ldrb	r3, [r7, #23]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d001      	beq.n	8016e20 <etharp_input+0x98>
 8016e1c:	2301      	movs	r3, #1
 8016e1e:	e000      	b.n	8016e22 <etharp_input+0x9a>
 8016e20:	2302      	movs	r3, #2
 8016e22:	f107 010c 	add.w	r1, r7, #12
 8016e26:	6838      	ldr	r0, [r7, #0]
 8016e28:	f7ff fed8 	bl	8016bdc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	88db      	ldrh	r3, [r3, #6]
 8016e30:	b29b      	uxth	r3, r3
 8016e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016e36:	d003      	beq.n	8016e40 <etharp_input+0xb8>
 8016e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e3c:	d01e      	beq.n	8016e7c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016e3e:	e025      	b.n	8016e8c <etharp_input+0x104>
      if (for_us) {
 8016e40:	7dfb      	ldrb	r3, [r7, #23]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d021      	beq.n	8016e8a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016e46:	683b      	ldr	r3, [r7, #0]
 8016e48:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016e4c:	693b      	ldr	r3, [r7, #16]
 8016e4e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016e58:	683b      	ldr	r3, [r7, #0]
 8016e5a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016e5c:	693a      	ldr	r2, [r7, #16]
 8016e5e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016e60:	2102      	movs	r1, #2
 8016e62:	9103      	str	r1, [sp, #12]
 8016e64:	f107 010c 	add.w	r1, r7, #12
 8016e68:	9102      	str	r1, [sp, #8]
 8016e6a:	9201      	str	r2, [sp, #4]
 8016e6c:	9300      	str	r3, [sp, #0]
 8016e6e:	462b      	mov	r3, r5
 8016e70:	4622      	mov	r2, r4
 8016e72:	4601      	mov	r1, r0
 8016e74:	6838      	ldr	r0, [r7, #0]
 8016e76:	f000 faef 	bl	8017458 <etharp_raw>
      break;
 8016e7a:	e006      	b.n	8016e8a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016e7c:	f107 030c 	add.w	r3, r7, #12
 8016e80:	4619      	mov	r1, r3
 8016e82:	6838      	ldr	r0, [r7, #0]
 8016e84:	f7fe f9fc 	bl	8015280 <dhcp_arp_reply>
      break;
 8016e88:	e000      	b.n	8016e8c <etharp_input+0x104>
      break;
 8016e8a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016e8c:	6878      	ldr	r0, [r7, #4]
 8016e8e:	f7f6 fb8f 	bl	800d5b0 <pbuf_free>
}
 8016e92:	3718      	adds	r7, #24
 8016e94:	46bd      	mov	sp, r7
 8016e96:	bdb0      	pop	{r4, r5, r7, pc}
 8016e98:	0801f5bc 	.word	0x0801f5bc
 8016e9c:	0801f70c 	.word	0x0801f70c
 8016ea0:	0801f634 	.word	0x0801f634

08016ea4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b086      	sub	sp, #24
 8016ea8:	af02      	add	r7, sp, #8
 8016eaa:	60f8      	str	r0, [r7, #12]
 8016eac:	60b9      	str	r1, [r7, #8]
 8016eae:	4613      	mov	r3, r2
 8016eb0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016eb2:	79fa      	ldrb	r2, [r7, #7]
 8016eb4:	4944      	ldr	r1, [pc, #272]	; (8016fc8 <etharp_output_to_arp_index+0x124>)
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	005b      	lsls	r3, r3, #1
 8016eba:	4413      	add	r3, r2
 8016ebc:	00db      	lsls	r3, r3, #3
 8016ebe:	440b      	add	r3, r1
 8016ec0:	3314      	adds	r3, #20
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	2b01      	cmp	r3, #1
 8016ec6:	d806      	bhi.n	8016ed6 <etharp_output_to_arp_index+0x32>
 8016ec8:	4b40      	ldr	r3, [pc, #256]	; (8016fcc <etharp_output_to_arp_index+0x128>)
 8016eca:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016ece:	4940      	ldr	r1, [pc, #256]	; (8016fd0 <etharp_output_to_arp_index+0x12c>)
 8016ed0:	4840      	ldr	r0, [pc, #256]	; (8016fd4 <etharp_output_to_arp_index+0x130>)
 8016ed2:	f004 fa49 	bl	801b368 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016ed6:	79fa      	ldrb	r2, [r7, #7]
 8016ed8:	493b      	ldr	r1, [pc, #236]	; (8016fc8 <etharp_output_to_arp_index+0x124>)
 8016eda:	4613      	mov	r3, r2
 8016edc:	005b      	lsls	r3, r3, #1
 8016ede:	4413      	add	r3, r2
 8016ee0:	00db      	lsls	r3, r3, #3
 8016ee2:	440b      	add	r3, r1
 8016ee4:	3314      	adds	r3, #20
 8016ee6:	781b      	ldrb	r3, [r3, #0]
 8016ee8:	2b02      	cmp	r3, #2
 8016eea:	d153      	bne.n	8016f94 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016eec:	79fa      	ldrb	r2, [r7, #7]
 8016eee:	4936      	ldr	r1, [pc, #216]	; (8016fc8 <etharp_output_to_arp_index+0x124>)
 8016ef0:	4613      	mov	r3, r2
 8016ef2:	005b      	lsls	r3, r3, #1
 8016ef4:	4413      	add	r3, r2
 8016ef6:	00db      	lsls	r3, r3, #3
 8016ef8:	440b      	add	r3, r1
 8016efa:	3312      	adds	r3, #18
 8016efc:	881b      	ldrh	r3, [r3, #0]
 8016efe:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016f02:	d919      	bls.n	8016f38 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016f04:	79fa      	ldrb	r2, [r7, #7]
 8016f06:	4613      	mov	r3, r2
 8016f08:	005b      	lsls	r3, r3, #1
 8016f0a:	4413      	add	r3, r2
 8016f0c:	00db      	lsls	r3, r3, #3
 8016f0e:	4a2e      	ldr	r2, [pc, #184]	; (8016fc8 <etharp_output_to_arp_index+0x124>)
 8016f10:	4413      	add	r3, r2
 8016f12:	3304      	adds	r3, #4
 8016f14:	4619      	mov	r1, r3
 8016f16:	68f8      	ldr	r0, [r7, #12]
 8016f18:	f000 fb4c 	bl	80175b4 <etharp_request>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d138      	bne.n	8016f94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016f22:	79fa      	ldrb	r2, [r7, #7]
 8016f24:	4928      	ldr	r1, [pc, #160]	; (8016fc8 <etharp_output_to_arp_index+0x124>)
 8016f26:	4613      	mov	r3, r2
 8016f28:	005b      	lsls	r3, r3, #1
 8016f2a:	4413      	add	r3, r2
 8016f2c:	00db      	lsls	r3, r3, #3
 8016f2e:	440b      	add	r3, r1
 8016f30:	3314      	adds	r3, #20
 8016f32:	2203      	movs	r2, #3
 8016f34:	701a      	strb	r2, [r3, #0]
 8016f36:	e02d      	b.n	8016f94 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016f38:	79fa      	ldrb	r2, [r7, #7]
 8016f3a:	4923      	ldr	r1, [pc, #140]	; (8016fc8 <etharp_output_to_arp_index+0x124>)
 8016f3c:	4613      	mov	r3, r2
 8016f3e:	005b      	lsls	r3, r3, #1
 8016f40:	4413      	add	r3, r2
 8016f42:	00db      	lsls	r3, r3, #3
 8016f44:	440b      	add	r3, r1
 8016f46:	3312      	adds	r3, #18
 8016f48:	881b      	ldrh	r3, [r3, #0]
 8016f4a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016f4e:	d321      	bcc.n	8016f94 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016f50:	79fa      	ldrb	r2, [r7, #7]
 8016f52:	4613      	mov	r3, r2
 8016f54:	005b      	lsls	r3, r3, #1
 8016f56:	4413      	add	r3, r2
 8016f58:	00db      	lsls	r3, r3, #3
 8016f5a:	4a1b      	ldr	r2, [pc, #108]	; (8016fc8 <etharp_output_to_arp_index+0x124>)
 8016f5c:	4413      	add	r3, r2
 8016f5e:	1d19      	adds	r1, r3, #4
 8016f60:	79fa      	ldrb	r2, [r7, #7]
 8016f62:	4613      	mov	r3, r2
 8016f64:	005b      	lsls	r3, r3, #1
 8016f66:	4413      	add	r3, r2
 8016f68:	00db      	lsls	r3, r3, #3
 8016f6a:	3308      	adds	r3, #8
 8016f6c:	4a16      	ldr	r2, [pc, #88]	; (8016fc8 <etharp_output_to_arp_index+0x124>)
 8016f6e:	4413      	add	r3, r2
 8016f70:	3304      	adds	r3, #4
 8016f72:	461a      	mov	r2, r3
 8016f74:	68f8      	ldr	r0, [r7, #12]
 8016f76:	f000 fafb 	bl	8017570 <etharp_request_dst>
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d109      	bne.n	8016f94 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016f80:	79fa      	ldrb	r2, [r7, #7]
 8016f82:	4911      	ldr	r1, [pc, #68]	; (8016fc8 <etharp_output_to_arp_index+0x124>)
 8016f84:	4613      	mov	r3, r2
 8016f86:	005b      	lsls	r3, r3, #1
 8016f88:	4413      	add	r3, r2
 8016f8a:	00db      	lsls	r3, r3, #3
 8016f8c:	440b      	add	r3, r1
 8016f8e:	3314      	adds	r3, #20
 8016f90:	2203      	movs	r2, #3
 8016f92:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8016f9a:	79fa      	ldrb	r2, [r7, #7]
 8016f9c:	4613      	mov	r3, r2
 8016f9e:	005b      	lsls	r3, r3, #1
 8016fa0:	4413      	add	r3, r2
 8016fa2:	00db      	lsls	r3, r3, #3
 8016fa4:	3308      	adds	r3, #8
 8016fa6:	4a08      	ldr	r2, [pc, #32]	; (8016fc8 <etharp_output_to_arp_index+0x124>)
 8016fa8:	4413      	add	r3, r2
 8016faa:	3304      	adds	r3, #4
 8016fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016fb0:	9200      	str	r2, [sp, #0]
 8016fb2:	460a      	mov	r2, r1
 8016fb4:	68b9      	ldr	r1, [r7, #8]
 8016fb6:	68f8      	ldr	r0, [r7, #12]
 8016fb8:	f001 feda 	bl	8018d70 <ethernet_output>
 8016fbc:	4603      	mov	r3, r0
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	3710      	adds	r7, #16
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	bd80      	pop	{r7, pc}
 8016fc6:	bf00      	nop
 8016fc8:	200107c0 	.word	0x200107c0
 8016fcc:	0801f5bc 	.word	0x0801f5bc
 8016fd0:	0801f72c 	.word	0x0801f72c
 8016fd4:	0801f634 	.word	0x0801f634

08016fd8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b08a      	sub	sp, #40	; 0x28
 8016fdc:	af02      	add	r7, sp, #8
 8016fde:	60f8      	str	r0, [r7, #12]
 8016fe0:	60b9      	str	r1, [r7, #8]
 8016fe2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d106      	bne.n	8016ffc <etharp_output+0x24>
 8016fee:	4b73      	ldr	r3, [pc, #460]	; (80171bc <etharp_output+0x1e4>)
 8016ff0:	f240 321e 	movw	r2, #798	; 0x31e
 8016ff4:	4972      	ldr	r1, [pc, #456]	; (80171c0 <etharp_output+0x1e8>)
 8016ff6:	4873      	ldr	r0, [pc, #460]	; (80171c4 <etharp_output+0x1ec>)
 8016ff8:	f004 f9b6 	bl	801b368 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016ffc:	68bb      	ldr	r3, [r7, #8]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d106      	bne.n	8017010 <etharp_output+0x38>
 8017002:	4b6e      	ldr	r3, [pc, #440]	; (80171bc <etharp_output+0x1e4>)
 8017004:	f240 321f 	movw	r2, #799	; 0x31f
 8017008:	496f      	ldr	r1, [pc, #444]	; (80171c8 <etharp_output+0x1f0>)
 801700a:	486e      	ldr	r0, [pc, #440]	; (80171c4 <etharp_output+0x1ec>)
 801700c:	f004 f9ac 	bl	801b368 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d106      	bne.n	8017024 <etharp_output+0x4c>
 8017016:	4b69      	ldr	r3, [pc, #420]	; (80171bc <etharp_output+0x1e4>)
 8017018:	f44f 7248 	mov.w	r2, #800	; 0x320
 801701c:	496b      	ldr	r1, [pc, #428]	; (80171cc <etharp_output+0x1f4>)
 801701e:	4869      	ldr	r0, [pc, #420]	; (80171c4 <etharp_output+0x1ec>)
 8017020:	f004 f9a2 	bl	801b368 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	68f9      	ldr	r1, [r7, #12]
 801702a:	4618      	mov	r0, r3
 801702c:	f000 ff16 	bl	8017e5c <ip4_addr_isbroadcast_u32>
 8017030:	4603      	mov	r3, r0
 8017032:	2b00      	cmp	r3, #0
 8017034:	d002      	beq.n	801703c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017036:	4b66      	ldr	r3, [pc, #408]	; (80171d0 <etharp_output+0x1f8>)
 8017038:	61fb      	str	r3, [r7, #28]
 801703a:	e0af      	b.n	801719c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017044:	2be0      	cmp	r3, #224	; 0xe0
 8017046:	d118      	bne.n	801707a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017048:	2301      	movs	r3, #1
 801704a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801704c:	2300      	movs	r3, #0
 801704e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017050:	235e      	movs	r3, #94	; 0x5e
 8017052:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	3301      	adds	r3, #1
 8017058:	781b      	ldrb	r3, [r3, #0]
 801705a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801705e:	b2db      	uxtb	r3, r3
 8017060:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	3302      	adds	r3, #2
 8017066:	781b      	ldrb	r3, [r3, #0]
 8017068:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	3303      	adds	r3, #3
 801706e:	781b      	ldrb	r3, [r3, #0]
 8017070:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017072:	f107 0310 	add.w	r3, r7, #16
 8017076:	61fb      	str	r3, [r7, #28]
 8017078:	e090      	b.n	801719c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	681a      	ldr	r2, [r3, #0]
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	3304      	adds	r3, #4
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	405a      	eors	r2, r3
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	3308      	adds	r3, #8
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	4013      	ands	r3, r2
 801708e:	2b00      	cmp	r3, #0
 8017090:	d012      	beq.n	80170b8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	681b      	ldr	r3, [r3, #0]
 8017096:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017098:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801709c:	4293      	cmp	r3, r2
 801709e:	d00b      	beq.n	80170b8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	330c      	adds	r3, #12
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d003      	beq.n	80170b2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	330c      	adds	r3, #12
 80170ae:	61bb      	str	r3, [r7, #24]
 80170b0:	e002      	b.n	80170b8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80170b2:	f06f 0303 	mvn.w	r3, #3
 80170b6:	e07d      	b.n	80171b4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80170b8:	4b46      	ldr	r3, [pc, #280]	; (80171d4 <etharp_output+0x1fc>)
 80170ba:	781b      	ldrb	r3, [r3, #0]
 80170bc:	4619      	mov	r1, r3
 80170be:	4a46      	ldr	r2, [pc, #280]	; (80171d8 <etharp_output+0x200>)
 80170c0:	460b      	mov	r3, r1
 80170c2:	005b      	lsls	r3, r3, #1
 80170c4:	440b      	add	r3, r1
 80170c6:	00db      	lsls	r3, r3, #3
 80170c8:	4413      	add	r3, r2
 80170ca:	3314      	adds	r3, #20
 80170cc:	781b      	ldrb	r3, [r3, #0]
 80170ce:	2b01      	cmp	r3, #1
 80170d0:	d925      	bls.n	801711e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80170d2:	4b40      	ldr	r3, [pc, #256]	; (80171d4 <etharp_output+0x1fc>)
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	4619      	mov	r1, r3
 80170d8:	4a3f      	ldr	r2, [pc, #252]	; (80171d8 <etharp_output+0x200>)
 80170da:	460b      	mov	r3, r1
 80170dc:	005b      	lsls	r3, r3, #1
 80170de:	440b      	add	r3, r1
 80170e0:	00db      	lsls	r3, r3, #3
 80170e2:	4413      	add	r3, r2
 80170e4:	3308      	adds	r3, #8
 80170e6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80170e8:	68fa      	ldr	r2, [r7, #12]
 80170ea:	429a      	cmp	r2, r3
 80170ec:	d117      	bne.n	801711e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80170ee:	69bb      	ldr	r3, [r7, #24]
 80170f0:	681a      	ldr	r2, [r3, #0]
 80170f2:	4b38      	ldr	r3, [pc, #224]	; (80171d4 <etharp_output+0x1fc>)
 80170f4:	781b      	ldrb	r3, [r3, #0]
 80170f6:	4618      	mov	r0, r3
 80170f8:	4937      	ldr	r1, [pc, #220]	; (80171d8 <etharp_output+0x200>)
 80170fa:	4603      	mov	r3, r0
 80170fc:	005b      	lsls	r3, r3, #1
 80170fe:	4403      	add	r3, r0
 8017100:	00db      	lsls	r3, r3, #3
 8017102:	440b      	add	r3, r1
 8017104:	3304      	adds	r3, #4
 8017106:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017108:	429a      	cmp	r2, r3
 801710a:	d108      	bne.n	801711e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801710c:	4b31      	ldr	r3, [pc, #196]	; (80171d4 <etharp_output+0x1fc>)
 801710e:	781b      	ldrb	r3, [r3, #0]
 8017110:	461a      	mov	r2, r3
 8017112:	68b9      	ldr	r1, [r7, #8]
 8017114:	68f8      	ldr	r0, [r7, #12]
 8017116:	f7ff fec5 	bl	8016ea4 <etharp_output_to_arp_index>
 801711a:	4603      	mov	r3, r0
 801711c:	e04a      	b.n	80171b4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801711e:	2300      	movs	r3, #0
 8017120:	75fb      	strb	r3, [r7, #23]
 8017122:	e031      	b.n	8017188 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017124:	7dfa      	ldrb	r2, [r7, #23]
 8017126:	492c      	ldr	r1, [pc, #176]	; (80171d8 <etharp_output+0x200>)
 8017128:	4613      	mov	r3, r2
 801712a:	005b      	lsls	r3, r3, #1
 801712c:	4413      	add	r3, r2
 801712e:	00db      	lsls	r3, r3, #3
 8017130:	440b      	add	r3, r1
 8017132:	3314      	adds	r3, #20
 8017134:	781b      	ldrb	r3, [r3, #0]
 8017136:	2b01      	cmp	r3, #1
 8017138:	d923      	bls.n	8017182 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801713a:	7dfa      	ldrb	r2, [r7, #23]
 801713c:	4926      	ldr	r1, [pc, #152]	; (80171d8 <etharp_output+0x200>)
 801713e:	4613      	mov	r3, r2
 8017140:	005b      	lsls	r3, r3, #1
 8017142:	4413      	add	r3, r2
 8017144:	00db      	lsls	r3, r3, #3
 8017146:	440b      	add	r3, r1
 8017148:	3308      	adds	r3, #8
 801714a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801714c:	68fa      	ldr	r2, [r7, #12]
 801714e:	429a      	cmp	r2, r3
 8017150:	d117      	bne.n	8017182 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	6819      	ldr	r1, [r3, #0]
 8017156:	7dfa      	ldrb	r2, [r7, #23]
 8017158:	481f      	ldr	r0, [pc, #124]	; (80171d8 <etharp_output+0x200>)
 801715a:	4613      	mov	r3, r2
 801715c:	005b      	lsls	r3, r3, #1
 801715e:	4413      	add	r3, r2
 8017160:	00db      	lsls	r3, r3, #3
 8017162:	4403      	add	r3, r0
 8017164:	3304      	adds	r3, #4
 8017166:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017168:	4299      	cmp	r1, r3
 801716a:	d10a      	bne.n	8017182 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801716c:	4a19      	ldr	r2, [pc, #100]	; (80171d4 <etharp_output+0x1fc>)
 801716e:	7dfb      	ldrb	r3, [r7, #23]
 8017170:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017172:	7dfb      	ldrb	r3, [r7, #23]
 8017174:	461a      	mov	r2, r3
 8017176:	68b9      	ldr	r1, [r7, #8]
 8017178:	68f8      	ldr	r0, [r7, #12]
 801717a:	f7ff fe93 	bl	8016ea4 <etharp_output_to_arp_index>
 801717e:	4603      	mov	r3, r0
 8017180:	e018      	b.n	80171b4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017182:	7dfb      	ldrb	r3, [r7, #23]
 8017184:	3301      	adds	r3, #1
 8017186:	75fb      	strb	r3, [r7, #23]
 8017188:	7dfb      	ldrb	r3, [r7, #23]
 801718a:	2b09      	cmp	r3, #9
 801718c:	d9ca      	bls.n	8017124 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801718e:	68ba      	ldr	r2, [r7, #8]
 8017190:	69b9      	ldr	r1, [r7, #24]
 8017192:	68f8      	ldr	r0, [r7, #12]
 8017194:	f000 f822 	bl	80171dc <etharp_query>
 8017198:	4603      	mov	r3, r0
 801719a:	e00b      	b.n	80171b4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80171a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80171a6:	9300      	str	r3, [sp, #0]
 80171a8:	69fb      	ldr	r3, [r7, #28]
 80171aa:	68b9      	ldr	r1, [r7, #8]
 80171ac:	68f8      	ldr	r0, [r7, #12]
 80171ae:	f001 fddf 	bl	8018d70 <ethernet_output>
 80171b2:	4603      	mov	r3, r0
}
 80171b4:	4618      	mov	r0, r3
 80171b6:	3720      	adds	r7, #32
 80171b8:	46bd      	mov	sp, r7
 80171ba:	bd80      	pop	{r7, pc}
 80171bc:	0801f5bc 	.word	0x0801f5bc
 80171c0:	0801f70c 	.word	0x0801f70c
 80171c4:	0801f634 	.word	0x0801f634
 80171c8:	0801f75c 	.word	0x0801f75c
 80171cc:	0801f6fc 	.word	0x0801f6fc
 80171d0:	0801ffdc 	.word	0x0801ffdc
 80171d4:	200108b0 	.word	0x200108b0
 80171d8:	200107c0 	.word	0x200107c0

080171dc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b08c      	sub	sp, #48	; 0x30
 80171e0:	af02      	add	r7, sp, #8
 80171e2:	60f8      	str	r0, [r7, #12]
 80171e4:	60b9      	str	r1, [r7, #8]
 80171e6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	332a      	adds	r3, #42	; 0x2a
 80171ec:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80171ee:	23ff      	movs	r3, #255	; 0xff
 80171f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80171f4:	2300      	movs	r3, #0
 80171f6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	68f9      	ldr	r1, [r7, #12]
 80171fe:	4618      	mov	r0, r3
 8017200:	f000 fe2c 	bl	8017e5c <ip4_addr_isbroadcast_u32>
 8017204:	4603      	mov	r3, r0
 8017206:	2b00      	cmp	r3, #0
 8017208:	d10c      	bne.n	8017224 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801720a:	68bb      	ldr	r3, [r7, #8]
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017212:	2be0      	cmp	r3, #224	; 0xe0
 8017214:	d006      	beq.n	8017224 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017216:	68bb      	ldr	r3, [r7, #8]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d003      	beq.n	8017224 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801721c:	68bb      	ldr	r3, [r7, #8]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d102      	bne.n	801722a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017224:	f06f 030f 	mvn.w	r3, #15
 8017228:	e101      	b.n	801742e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801722a:	68fa      	ldr	r2, [r7, #12]
 801722c:	2101      	movs	r1, #1
 801722e:	68b8      	ldr	r0, [r7, #8]
 8017230:	f7ff fb5c 	bl	80168ec <etharp_find_entry>
 8017234:	4603      	mov	r3, r0
 8017236:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017238:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801723c:	2b00      	cmp	r3, #0
 801723e:	da02      	bge.n	8017246 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017240:	8a7b      	ldrh	r3, [r7, #18]
 8017242:	b25b      	sxtb	r3, r3
 8017244:	e0f3      	b.n	801742e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017246:	8a7b      	ldrh	r3, [r7, #18]
 8017248:	2b7e      	cmp	r3, #126	; 0x7e
 801724a:	d906      	bls.n	801725a <etharp_query+0x7e>
 801724c:	4b7a      	ldr	r3, [pc, #488]	; (8017438 <etharp_query+0x25c>)
 801724e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017252:	497a      	ldr	r1, [pc, #488]	; (801743c <etharp_query+0x260>)
 8017254:	487a      	ldr	r0, [pc, #488]	; (8017440 <etharp_query+0x264>)
 8017256:	f004 f887 	bl	801b368 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801725a:	8a7b      	ldrh	r3, [r7, #18]
 801725c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801725e:	7c7a      	ldrb	r2, [r7, #17]
 8017260:	4978      	ldr	r1, [pc, #480]	; (8017444 <etharp_query+0x268>)
 8017262:	4613      	mov	r3, r2
 8017264:	005b      	lsls	r3, r3, #1
 8017266:	4413      	add	r3, r2
 8017268:	00db      	lsls	r3, r3, #3
 801726a:	440b      	add	r3, r1
 801726c:	3314      	adds	r3, #20
 801726e:	781b      	ldrb	r3, [r3, #0]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d115      	bne.n	80172a0 <etharp_query+0xc4>
    is_new_entry = 1;
 8017274:	2301      	movs	r3, #1
 8017276:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017278:	7c7a      	ldrb	r2, [r7, #17]
 801727a:	4972      	ldr	r1, [pc, #456]	; (8017444 <etharp_query+0x268>)
 801727c:	4613      	mov	r3, r2
 801727e:	005b      	lsls	r3, r3, #1
 8017280:	4413      	add	r3, r2
 8017282:	00db      	lsls	r3, r3, #3
 8017284:	440b      	add	r3, r1
 8017286:	3314      	adds	r3, #20
 8017288:	2201      	movs	r2, #1
 801728a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801728c:	7c7a      	ldrb	r2, [r7, #17]
 801728e:	496d      	ldr	r1, [pc, #436]	; (8017444 <etharp_query+0x268>)
 8017290:	4613      	mov	r3, r2
 8017292:	005b      	lsls	r3, r3, #1
 8017294:	4413      	add	r3, r2
 8017296:	00db      	lsls	r3, r3, #3
 8017298:	440b      	add	r3, r1
 801729a:	3308      	adds	r3, #8
 801729c:	68fa      	ldr	r2, [r7, #12]
 801729e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80172a0:	7c7a      	ldrb	r2, [r7, #17]
 80172a2:	4968      	ldr	r1, [pc, #416]	; (8017444 <etharp_query+0x268>)
 80172a4:	4613      	mov	r3, r2
 80172a6:	005b      	lsls	r3, r3, #1
 80172a8:	4413      	add	r3, r2
 80172aa:	00db      	lsls	r3, r3, #3
 80172ac:	440b      	add	r3, r1
 80172ae:	3314      	adds	r3, #20
 80172b0:	781b      	ldrb	r3, [r3, #0]
 80172b2:	2b01      	cmp	r3, #1
 80172b4:	d011      	beq.n	80172da <etharp_query+0xfe>
 80172b6:	7c7a      	ldrb	r2, [r7, #17]
 80172b8:	4962      	ldr	r1, [pc, #392]	; (8017444 <etharp_query+0x268>)
 80172ba:	4613      	mov	r3, r2
 80172bc:	005b      	lsls	r3, r3, #1
 80172be:	4413      	add	r3, r2
 80172c0:	00db      	lsls	r3, r3, #3
 80172c2:	440b      	add	r3, r1
 80172c4:	3314      	adds	r3, #20
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	2b01      	cmp	r3, #1
 80172ca:	d806      	bhi.n	80172da <etharp_query+0xfe>
 80172cc:	4b5a      	ldr	r3, [pc, #360]	; (8017438 <etharp_query+0x25c>)
 80172ce:	f240 32cd 	movw	r2, #973	; 0x3cd
 80172d2:	495d      	ldr	r1, [pc, #372]	; (8017448 <etharp_query+0x26c>)
 80172d4:	485a      	ldr	r0, [pc, #360]	; (8017440 <etharp_query+0x264>)
 80172d6:	f004 f847 	bl	801b368 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80172da:	6a3b      	ldr	r3, [r7, #32]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d102      	bne.n	80172e6 <etharp_query+0x10a>
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d10c      	bne.n	8017300 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80172e6:	68b9      	ldr	r1, [r7, #8]
 80172e8:	68f8      	ldr	r0, [r7, #12]
 80172ea:	f000 f963 	bl	80175b4 <etharp_request>
 80172ee:	4603      	mov	r3, r0
 80172f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d102      	bne.n	8017300 <etharp_query+0x124>
      return result;
 80172fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80172fe:	e096      	b.n	801742e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d106      	bne.n	8017314 <etharp_query+0x138>
 8017306:	4b4c      	ldr	r3, [pc, #304]	; (8017438 <etharp_query+0x25c>)
 8017308:	f240 32e1 	movw	r2, #993	; 0x3e1
 801730c:	494f      	ldr	r1, [pc, #316]	; (801744c <etharp_query+0x270>)
 801730e:	484c      	ldr	r0, [pc, #304]	; (8017440 <etharp_query+0x264>)
 8017310:	f004 f82a 	bl	801b368 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017314:	7c7a      	ldrb	r2, [r7, #17]
 8017316:	494b      	ldr	r1, [pc, #300]	; (8017444 <etharp_query+0x268>)
 8017318:	4613      	mov	r3, r2
 801731a:	005b      	lsls	r3, r3, #1
 801731c:	4413      	add	r3, r2
 801731e:	00db      	lsls	r3, r3, #3
 8017320:	440b      	add	r3, r1
 8017322:	3314      	adds	r3, #20
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	2b01      	cmp	r3, #1
 8017328:	d917      	bls.n	801735a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801732a:	4a49      	ldr	r2, [pc, #292]	; (8017450 <etharp_query+0x274>)
 801732c:	7c7b      	ldrb	r3, [r7, #17]
 801732e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017330:	7c7a      	ldrb	r2, [r7, #17]
 8017332:	4613      	mov	r3, r2
 8017334:	005b      	lsls	r3, r3, #1
 8017336:	4413      	add	r3, r2
 8017338:	00db      	lsls	r3, r3, #3
 801733a:	3308      	adds	r3, #8
 801733c:	4a41      	ldr	r2, [pc, #260]	; (8017444 <etharp_query+0x268>)
 801733e:	4413      	add	r3, r2
 8017340:	3304      	adds	r3, #4
 8017342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017346:	9200      	str	r2, [sp, #0]
 8017348:	697a      	ldr	r2, [r7, #20]
 801734a:	6879      	ldr	r1, [r7, #4]
 801734c:	68f8      	ldr	r0, [r7, #12]
 801734e:	f001 fd0f 	bl	8018d70 <ethernet_output>
 8017352:	4603      	mov	r3, r0
 8017354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017358:	e067      	b.n	801742a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801735a:	7c7a      	ldrb	r2, [r7, #17]
 801735c:	4939      	ldr	r1, [pc, #228]	; (8017444 <etharp_query+0x268>)
 801735e:	4613      	mov	r3, r2
 8017360:	005b      	lsls	r3, r3, #1
 8017362:	4413      	add	r3, r2
 8017364:	00db      	lsls	r3, r3, #3
 8017366:	440b      	add	r3, r1
 8017368:	3314      	adds	r3, #20
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	2b01      	cmp	r3, #1
 801736e:	d15c      	bne.n	801742a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017370:	2300      	movs	r3, #0
 8017372:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017378:	e01c      	b.n	80173b4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801737a:	69fb      	ldr	r3, [r7, #28]
 801737c:	895a      	ldrh	r2, [r3, #10]
 801737e:	69fb      	ldr	r3, [r7, #28]
 8017380:	891b      	ldrh	r3, [r3, #8]
 8017382:	429a      	cmp	r2, r3
 8017384:	d10a      	bne.n	801739c <etharp_query+0x1c0>
 8017386:	69fb      	ldr	r3, [r7, #28]
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d006      	beq.n	801739c <etharp_query+0x1c0>
 801738e:	4b2a      	ldr	r3, [pc, #168]	; (8017438 <etharp_query+0x25c>)
 8017390:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017394:	492f      	ldr	r1, [pc, #188]	; (8017454 <etharp_query+0x278>)
 8017396:	482a      	ldr	r0, [pc, #168]	; (8017440 <etharp_query+0x264>)
 8017398:	f003 ffe6 	bl	801b368 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801739c:	69fb      	ldr	r3, [r7, #28]
 801739e:	7b1b      	ldrb	r3, [r3, #12]
 80173a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d002      	beq.n	80173ae <etharp_query+0x1d2>
        copy_needed = 1;
 80173a8:	2301      	movs	r3, #1
 80173aa:	61bb      	str	r3, [r7, #24]
        break;
 80173ac:	e005      	b.n	80173ba <etharp_query+0x1de>
      }
      p = p->next;
 80173ae:	69fb      	ldr	r3, [r7, #28]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80173b4:	69fb      	ldr	r3, [r7, #28]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d1df      	bne.n	801737a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80173ba:	69bb      	ldr	r3, [r7, #24]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d007      	beq.n	80173d0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80173c0:	687a      	ldr	r2, [r7, #4]
 80173c2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80173c6:	200e      	movs	r0, #14
 80173c8:	f7f6 fb6a 	bl	800daa0 <pbuf_clone>
 80173cc:	61f8      	str	r0, [r7, #28]
 80173ce:	e004      	b.n	80173da <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80173d4:	69f8      	ldr	r0, [r7, #28]
 80173d6:	f7f6 f991 	bl	800d6fc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80173da:	69fb      	ldr	r3, [r7, #28]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d021      	beq.n	8017424 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80173e0:	7c7a      	ldrb	r2, [r7, #17]
 80173e2:	4918      	ldr	r1, [pc, #96]	; (8017444 <etharp_query+0x268>)
 80173e4:	4613      	mov	r3, r2
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	4413      	add	r3, r2
 80173ea:	00db      	lsls	r3, r3, #3
 80173ec:	440b      	add	r3, r1
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d00a      	beq.n	801740a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80173f4:	7c7a      	ldrb	r2, [r7, #17]
 80173f6:	4913      	ldr	r1, [pc, #76]	; (8017444 <etharp_query+0x268>)
 80173f8:	4613      	mov	r3, r2
 80173fa:	005b      	lsls	r3, r3, #1
 80173fc:	4413      	add	r3, r2
 80173fe:	00db      	lsls	r3, r3, #3
 8017400:	440b      	add	r3, r1
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	4618      	mov	r0, r3
 8017406:	f7f6 f8d3 	bl	800d5b0 <pbuf_free>
      }
      arp_table[i].q = p;
 801740a:	7c7a      	ldrb	r2, [r7, #17]
 801740c:	490d      	ldr	r1, [pc, #52]	; (8017444 <etharp_query+0x268>)
 801740e:	4613      	mov	r3, r2
 8017410:	005b      	lsls	r3, r3, #1
 8017412:	4413      	add	r3, r2
 8017414:	00db      	lsls	r3, r3, #3
 8017416:	440b      	add	r3, r1
 8017418:	69fa      	ldr	r2, [r7, #28]
 801741a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801741c:	2300      	movs	r3, #0
 801741e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017422:	e002      	b.n	801742a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017424:	23ff      	movs	r3, #255	; 0xff
 8017426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801742a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801742e:	4618      	mov	r0, r3
 8017430:	3728      	adds	r7, #40	; 0x28
 8017432:	46bd      	mov	sp, r7
 8017434:	bd80      	pop	{r7, pc}
 8017436:	bf00      	nop
 8017438:	0801f5bc 	.word	0x0801f5bc
 801743c:	0801f768 	.word	0x0801f768
 8017440:	0801f634 	.word	0x0801f634
 8017444:	200107c0 	.word	0x200107c0
 8017448:	0801f778 	.word	0x0801f778
 801744c:	0801f75c 	.word	0x0801f75c
 8017450:	200108b0 	.word	0x200108b0
 8017454:	0801f7a0 	.word	0x0801f7a0

08017458 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b08a      	sub	sp, #40	; 0x28
 801745c:	af02      	add	r7, sp, #8
 801745e:	60f8      	str	r0, [r7, #12]
 8017460:	60b9      	str	r1, [r7, #8]
 8017462:	607a      	str	r2, [r7, #4]
 8017464:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017466:	2300      	movs	r3, #0
 8017468:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d106      	bne.n	801747e <etharp_raw+0x26>
 8017470:	4b3a      	ldr	r3, [pc, #232]	; (801755c <etharp_raw+0x104>)
 8017472:	f240 4257 	movw	r2, #1111	; 0x457
 8017476:	493a      	ldr	r1, [pc, #232]	; (8017560 <etharp_raw+0x108>)
 8017478:	483a      	ldr	r0, [pc, #232]	; (8017564 <etharp_raw+0x10c>)
 801747a:	f003 ff75 	bl	801b368 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801747e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017482:	211c      	movs	r1, #28
 8017484:	200e      	movs	r0, #14
 8017486:	f7f5 fd7d 	bl	800cf84 <pbuf_alloc>
 801748a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801748c:	69bb      	ldr	r3, [r7, #24]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d102      	bne.n	8017498 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017492:	f04f 33ff 	mov.w	r3, #4294967295
 8017496:	e05d      	b.n	8017554 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017498:	69bb      	ldr	r3, [r7, #24]
 801749a:	895b      	ldrh	r3, [r3, #10]
 801749c:	2b1b      	cmp	r3, #27
 801749e:	d806      	bhi.n	80174ae <etharp_raw+0x56>
 80174a0:	4b2e      	ldr	r3, [pc, #184]	; (801755c <etharp_raw+0x104>)
 80174a2:	f240 4262 	movw	r2, #1122	; 0x462
 80174a6:	4930      	ldr	r1, [pc, #192]	; (8017568 <etharp_raw+0x110>)
 80174a8:	482e      	ldr	r0, [pc, #184]	; (8017564 <etharp_raw+0x10c>)
 80174aa:	f003 ff5d 	bl	801b368 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80174ae:	69bb      	ldr	r3, [r7, #24]
 80174b0:	685b      	ldr	r3, [r3, #4]
 80174b2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80174b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7f4 fc12 	bl	800bce0 <lwip_htons>
 80174bc:	4603      	mov	r3, r0
 80174be:	461a      	mov	r2, r3
 80174c0:	697b      	ldr	r3, [r7, #20]
 80174c2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80174ca:	2b06      	cmp	r3, #6
 80174cc:	d006      	beq.n	80174dc <etharp_raw+0x84>
 80174ce:	4b23      	ldr	r3, [pc, #140]	; (801755c <etharp_raw+0x104>)
 80174d0:	f240 4269 	movw	r2, #1129	; 0x469
 80174d4:	4925      	ldr	r1, [pc, #148]	; (801756c <etharp_raw+0x114>)
 80174d6:	4823      	ldr	r0, [pc, #140]	; (8017564 <etharp_raw+0x10c>)
 80174d8:	f003 ff46 	bl	801b368 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	3308      	adds	r3, #8
 80174e0:	2206      	movs	r2, #6
 80174e2:	6839      	ldr	r1, [r7, #0]
 80174e4:	4618      	mov	r0, r3
 80174e6:	f003 fb77 	bl	801abd8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80174ea:	697b      	ldr	r3, [r7, #20]
 80174ec:	3312      	adds	r3, #18
 80174ee:	2206      	movs	r2, #6
 80174f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80174f2:	4618      	mov	r0, r3
 80174f4:	f003 fb70 	bl	801abd8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80174f8:	697b      	ldr	r3, [r7, #20]
 80174fa:	330e      	adds	r3, #14
 80174fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80174fe:	6812      	ldr	r2, [r2, #0]
 8017500:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017502:	697b      	ldr	r3, [r7, #20]
 8017504:	3318      	adds	r3, #24
 8017506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017508:	6812      	ldr	r2, [r2, #0]
 801750a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801750c:	697b      	ldr	r3, [r7, #20]
 801750e:	2200      	movs	r2, #0
 8017510:	701a      	strb	r2, [r3, #0]
 8017512:	2200      	movs	r2, #0
 8017514:	f042 0201 	orr.w	r2, r2, #1
 8017518:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801751a:	697b      	ldr	r3, [r7, #20]
 801751c:	2200      	movs	r2, #0
 801751e:	f042 0208 	orr.w	r2, r2, #8
 8017522:	709a      	strb	r2, [r3, #2]
 8017524:	2200      	movs	r2, #0
 8017526:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017528:	697b      	ldr	r3, [r7, #20]
 801752a:	2206      	movs	r2, #6
 801752c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801752e:	697b      	ldr	r3, [r7, #20]
 8017530:	2204      	movs	r2, #4
 8017532:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017534:	f640 0306 	movw	r3, #2054	; 0x806
 8017538:	9300      	str	r3, [sp, #0]
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	68ba      	ldr	r2, [r7, #8]
 801753e:	69b9      	ldr	r1, [r7, #24]
 8017540:	68f8      	ldr	r0, [r7, #12]
 8017542:	f001 fc15 	bl	8018d70 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017546:	69b8      	ldr	r0, [r7, #24]
 8017548:	f7f6 f832 	bl	800d5b0 <pbuf_free>
  p = NULL;
 801754c:	2300      	movs	r3, #0
 801754e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017550:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017554:	4618      	mov	r0, r3
 8017556:	3720      	adds	r7, #32
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}
 801755c:	0801f5bc 	.word	0x0801f5bc
 8017560:	0801f70c 	.word	0x0801f70c
 8017564:	0801f634 	.word	0x0801f634
 8017568:	0801f7bc 	.word	0x0801f7bc
 801756c:	0801f7f0 	.word	0x0801f7f0

08017570 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b088      	sub	sp, #32
 8017574:	af04      	add	r7, sp, #16
 8017576:	60f8      	str	r0, [r7, #12]
 8017578:	60b9      	str	r1, [r7, #8]
 801757a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801758c:	2201      	movs	r2, #1
 801758e:	9203      	str	r2, [sp, #12]
 8017590:	68ba      	ldr	r2, [r7, #8]
 8017592:	9202      	str	r2, [sp, #8]
 8017594:	4a06      	ldr	r2, [pc, #24]	; (80175b0 <etharp_request_dst+0x40>)
 8017596:	9201      	str	r2, [sp, #4]
 8017598:	9300      	str	r3, [sp, #0]
 801759a:	4603      	mov	r3, r0
 801759c:	687a      	ldr	r2, [r7, #4]
 801759e:	68f8      	ldr	r0, [r7, #12]
 80175a0:	f7ff ff5a 	bl	8017458 <etharp_raw>
 80175a4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	3710      	adds	r7, #16
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}
 80175ae:	bf00      	nop
 80175b0:	0801ffe4 	.word	0x0801ffe4

080175b4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b082      	sub	sp, #8
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	6078      	str	r0, [r7, #4]
 80175bc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80175be:	4a05      	ldr	r2, [pc, #20]	; (80175d4 <etharp_request+0x20>)
 80175c0:	6839      	ldr	r1, [r7, #0]
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f7ff ffd4 	bl	8017570 <etharp_request_dst>
 80175c8:	4603      	mov	r3, r0
}
 80175ca:	4618      	mov	r0, r3
 80175cc:	3708      	adds	r7, #8
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}
 80175d2:	bf00      	nop
 80175d4:	0801ffdc 	.word	0x0801ffdc

080175d8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b08e      	sub	sp, #56	; 0x38
 80175dc:	af04      	add	r7, sp, #16
 80175de:	6078      	str	r0, [r7, #4]
 80175e0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80175e2:	4b79      	ldr	r3, [pc, #484]	; (80177c8 <icmp_input+0x1f0>)
 80175e4:	689b      	ldr	r3, [r3, #8]
 80175e6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80175e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175ea:	781b      	ldrb	r3, [r3, #0]
 80175ec:	f003 030f 	and.w	r3, r3, #15
 80175f0:	b2db      	uxtb	r3, r3
 80175f2:	009b      	lsls	r3, r3, #2
 80175f4:	b2db      	uxtb	r3, r3
 80175f6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80175f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80175fa:	2b13      	cmp	r3, #19
 80175fc:	f240 80cd 	bls.w	801779a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	895b      	ldrh	r3, [r3, #10]
 8017604:	2b03      	cmp	r3, #3
 8017606:	f240 80ca 	bls.w	801779e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	685b      	ldr	r3, [r3, #4]
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017614:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017618:	2b00      	cmp	r3, #0
 801761a:	f000 80b7 	beq.w	801778c <icmp_input+0x1b4>
 801761e:	2b08      	cmp	r3, #8
 8017620:	f040 80b7 	bne.w	8017792 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017624:	4b69      	ldr	r3, [pc, #420]	; (80177cc <icmp_input+0x1f4>)
 8017626:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017628:	4b67      	ldr	r3, [pc, #412]	; (80177c8 <icmp_input+0x1f0>)
 801762a:	695b      	ldr	r3, [r3, #20]
 801762c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017630:	2be0      	cmp	r3, #224	; 0xe0
 8017632:	f000 80bb 	beq.w	80177ac <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017636:	4b64      	ldr	r3, [pc, #400]	; (80177c8 <icmp_input+0x1f0>)
 8017638:	695b      	ldr	r3, [r3, #20]
 801763a:	4a63      	ldr	r2, [pc, #396]	; (80177c8 <icmp_input+0x1f0>)
 801763c:	6812      	ldr	r2, [r2, #0]
 801763e:	4611      	mov	r1, r2
 8017640:	4618      	mov	r0, r3
 8017642:	f000 fc0b 	bl	8017e5c <ip4_addr_isbroadcast_u32>
 8017646:	4603      	mov	r3, r0
 8017648:	2b00      	cmp	r3, #0
 801764a:	f040 80b1 	bne.w	80177b0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	891b      	ldrh	r3, [r3, #8]
 8017652:	2b07      	cmp	r3, #7
 8017654:	f240 80a5 	bls.w	80177a2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017658:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801765a:	330e      	adds	r3, #14
 801765c:	4619      	mov	r1, r3
 801765e:	6878      	ldr	r0, [r7, #4]
 8017660:	f7f5 fede 	bl	800d420 <pbuf_add_header>
 8017664:	4603      	mov	r3, r0
 8017666:	2b00      	cmp	r3, #0
 8017668:	d04b      	beq.n	8017702 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	891a      	ldrh	r2, [r3, #8]
 801766e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017670:	4413      	add	r3, r2
 8017672:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	891b      	ldrh	r3, [r3, #8]
 8017678:	8b7a      	ldrh	r2, [r7, #26]
 801767a:	429a      	cmp	r2, r3
 801767c:	f0c0 809a 	bcc.w	80177b4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017680:	8b7b      	ldrh	r3, [r7, #26]
 8017682:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017686:	4619      	mov	r1, r3
 8017688:	200e      	movs	r0, #14
 801768a:	f7f5 fc7b 	bl	800cf84 <pbuf_alloc>
 801768e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	2b00      	cmp	r3, #0
 8017694:	f000 8090 	beq.w	80177b8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017698:	697b      	ldr	r3, [r7, #20]
 801769a:	895b      	ldrh	r3, [r3, #10]
 801769c:	461a      	mov	r2, r3
 801769e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176a0:	3308      	adds	r3, #8
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d203      	bcs.n	80176ae <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80176a6:	6978      	ldr	r0, [r7, #20]
 80176a8:	f7f5 ff82 	bl	800d5b0 <pbuf_free>
          goto icmperr;
 80176ac:	e085      	b.n	80177ba <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80176ae:	697b      	ldr	r3, [r7, #20]
 80176b0:	685b      	ldr	r3, [r3, #4]
 80176b2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80176b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80176b6:	4618      	mov	r0, r3
 80176b8:	f003 fa8e 	bl	801abd8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80176bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80176be:	4619      	mov	r1, r3
 80176c0:	6978      	ldr	r0, [r7, #20]
 80176c2:	f7f5 febd 	bl	800d440 <pbuf_remove_header>
 80176c6:	4603      	mov	r3, r0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d009      	beq.n	80176e0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80176cc:	4b40      	ldr	r3, [pc, #256]	; (80177d0 <icmp_input+0x1f8>)
 80176ce:	22b6      	movs	r2, #182	; 0xb6
 80176d0:	4940      	ldr	r1, [pc, #256]	; (80177d4 <icmp_input+0x1fc>)
 80176d2:	4841      	ldr	r0, [pc, #260]	; (80177d8 <icmp_input+0x200>)
 80176d4:	f003 fe48 	bl	801b368 <iprintf>
          pbuf_free(r);
 80176d8:	6978      	ldr	r0, [r7, #20]
 80176da:	f7f5 ff69 	bl	800d5b0 <pbuf_free>
          goto icmperr;
 80176de:	e06c      	b.n	80177ba <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80176e0:	6879      	ldr	r1, [r7, #4]
 80176e2:	6978      	ldr	r0, [r7, #20]
 80176e4:	f7f6 f898 	bl	800d818 <pbuf_copy>
 80176e8:	4603      	mov	r3, r0
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d003      	beq.n	80176f6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80176ee:	6978      	ldr	r0, [r7, #20]
 80176f0:	f7f5 ff5e 	bl	800d5b0 <pbuf_free>
          goto icmperr;
 80176f4:	e061      	b.n	80177ba <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f7f5 ff5a 	bl	800d5b0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80176fc:	697b      	ldr	r3, [r7, #20]
 80176fe:	607b      	str	r3, [r7, #4]
 8017700:	e00f      	b.n	8017722 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017702:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017704:	330e      	adds	r3, #14
 8017706:	4619      	mov	r1, r3
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f7f5 fe99 	bl	800d440 <pbuf_remove_header>
 801770e:	4603      	mov	r3, r0
 8017710:	2b00      	cmp	r3, #0
 8017712:	d006      	beq.n	8017722 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017714:	4b2e      	ldr	r3, [pc, #184]	; (80177d0 <icmp_input+0x1f8>)
 8017716:	22c7      	movs	r2, #199	; 0xc7
 8017718:	4930      	ldr	r1, [pc, #192]	; (80177dc <icmp_input+0x204>)
 801771a:	482f      	ldr	r0, [pc, #188]	; (80177d8 <icmp_input+0x200>)
 801771c:	f003 fe24 	bl	801b368 <iprintf>
          goto icmperr;
 8017720:	e04b      	b.n	80177ba <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	685b      	ldr	r3, [r3, #4]
 8017726:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801772a:	4619      	mov	r1, r3
 801772c:	6878      	ldr	r0, [r7, #4]
 801772e:	f7f5 fe77 	bl	800d420 <pbuf_add_header>
 8017732:	4603      	mov	r3, r0
 8017734:	2b00      	cmp	r3, #0
 8017736:	d12b      	bne.n	8017790 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	685b      	ldr	r3, [r3, #4]
 801773c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801773e:	69fb      	ldr	r3, [r7, #28]
 8017740:	681a      	ldr	r2, [r3, #0]
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017746:	4b20      	ldr	r3, [pc, #128]	; (80177c8 <icmp_input+0x1f0>)
 8017748:	691a      	ldr	r2, [r3, #16]
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801774e:	693b      	ldr	r3, [r7, #16]
 8017750:	2200      	movs	r2, #0
 8017752:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017754:	693b      	ldr	r3, [r7, #16]
 8017756:	2200      	movs	r2, #0
 8017758:	709a      	strb	r2, [r3, #2]
 801775a:	2200      	movs	r2, #0
 801775c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	22ff      	movs	r2, #255	; 0xff
 8017762:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	2200      	movs	r2, #0
 8017768:	729a      	strb	r2, [r3, #10]
 801776a:	2200      	movs	r2, #0
 801776c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801776e:	683b      	ldr	r3, [r7, #0]
 8017770:	9302      	str	r3, [sp, #8]
 8017772:	2301      	movs	r3, #1
 8017774:	9301      	str	r3, [sp, #4]
 8017776:	2300      	movs	r3, #0
 8017778:	9300      	str	r3, [sp, #0]
 801777a:	23ff      	movs	r3, #255	; 0xff
 801777c:	2200      	movs	r2, #0
 801777e:	69f9      	ldr	r1, [r7, #28]
 8017780:	6878      	ldr	r0, [r7, #4]
 8017782:	f000 fa93 	bl	8017cac <ip4_output_if>
 8017786:	4603      	mov	r3, r0
 8017788:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801778a:	e001      	b.n	8017790 <icmp_input+0x1b8>
      break;
 801778c:	bf00      	nop
 801778e:	e000      	b.n	8017792 <icmp_input+0x1ba>
      break;
 8017790:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017792:	6878      	ldr	r0, [r7, #4]
 8017794:	f7f5 ff0c 	bl	800d5b0 <pbuf_free>
  return;
 8017798:	e013      	b.n	80177c2 <icmp_input+0x1ea>
    goto lenerr;
 801779a:	bf00      	nop
 801779c:	e002      	b.n	80177a4 <icmp_input+0x1cc>
    goto lenerr;
 801779e:	bf00      	nop
 80177a0:	e000      	b.n	80177a4 <icmp_input+0x1cc>
        goto lenerr;
 80177a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80177a4:	6878      	ldr	r0, [r7, #4]
 80177a6:	f7f5 ff03 	bl	800d5b0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80177aa:	e00a      	b.n	80177c2 <icmp_input+0x1ea>
        goto icmperr;
 80177ac:	bf00      	nop
 80177ae:	e004      	b.n	80177ba <icmp_input+0x1e2>
        goto icmperr;
 80177b0:	bf00      	nop
 80177b2:	e002      	b.n	80177ba <icmp_input+0x1e2>
          goto icmperr;
 80177b4:	bf00      	nop
 80177b6:	e000      	b.n	80177ba <icmp_input+0x1e2>
          goto icmperr;
 80177b8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80177ba:	6878      	ldr	r0, [r7, #4]
 80177bc:	f7f5 fef8 	bl	800d5b0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80177c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80177c2:	3728      	adds	r7, #40	; 0x28
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}
 80177c8:	20015920 	.word	0x20015920
 80177cc:	20015934 	.word	0x20015934
 80177d0:	0801f834 	.word	0x0801f834
 80177d4:	0801f86c 	.word	0x0801f86c
 80177d8:	0801f8a4 	.word	0x0801f8a4
 80177dc:	0801f8cc 	.word	0x0801f8cc

080177e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b082      	sub	sp, #8
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
 80177e8:	460b      	mov	r3, r1
 80177ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80177ec:	78fb      	ldrb	r3, [r7, #3]
 80177ee:	461a      	mov	r2, r3
 80177f0:	2103      	movs	r1, #3
 80177f2:	6878      	ldr	r0, [r7, #4]
 80177f4:	f000 f814 	bl	8017820 <icmp_send_response>
}
 80177f8:	bf00      	nop
 80177fa:	3708      	adds	r7, #8
 80177fc:	46bd      	mov	sp, r7
 80177fe:	bd80      	pop	{r7, pc}

08017800 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b082      	sub	sp, #8
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
 8017808:	460b      	mov	r3, r1
 801780a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801780c:	78fb      	ldrb	r3, [r7, #3]
 801780e:	461a      	mov	r2, r3
 8017810:	210b      	movs	r1, #11
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f000 f804 	bl	8017820 <icmp_send_response>
}
 8017818:	bf00      	nop
 801781a:	3708      	adds	r7, #8
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}

08017820 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b08c      	sub	sp, #48	; 0x30
 8017824:	af04      	add	r7, sp, #16
 8017826:	6078      	str	r0, [r7, #4]
 8017828:	460b      	mov	r3, r1
 801782a:	70fb      	strb	r3, [r7, #3]
 801782c:	4613      	mov	r3, r2
 801782e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017830:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017834:	2124      	movs	r1, #36	; 0x24
 8017836:	2022      	movs	r0, #34	; 0x22
 8017838:	f7f5 fba4 	bl	800cf84 <pbuf_alloc>
 801783c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801783e:	69fb      	ldr	r3, [r7, #28]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d04c      	beq.n	80178de <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017844:	69fb      	ldr	r3, [r7, #28]
 8017846:	895b      	ldrh	r3, [r3, #10]
 8017848:	2b23      	cmp	r3, #35	; 0x23
 801784a:	d806      	bhi.n	801785a <icmp_send_response+0x3a>
 801784c:	4b26      	ldr	r3, [pc, #152]	; (80178e8 <icmp_send_response+0xc8>)
 801784e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017852:	4926      	ldr	r1, [pc, #152]	; (80178ec <icmp_send_response+0xcc>)
 8017854:	4826      	ldr	r0, [pc, #152]	; (80178f0 <icmp_send_response+0xd0>)
 8017856:	f003 fd87 	bl	801b368 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	685b      	ldr	r3, [r3, #4]
 801785e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017860:	69fb      	ldr	r3, [r7, #28]
 8017862:	685b      	ldr	r3, [r3, #4]
 8017864:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017866:	697b      	ldr	r3, [r7, #20]
 8017868:	78fa      	ldrb	r2, [r7, #3]
 801786a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801786c:	697b      	ldr	r3, [r7, #20]
 801786e:	78ba      	ldrb	r2, [r7, #2]
 8017870:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017872:	697b      	ldr	r3, [r7, #20]
 8017874:	2200      	movs	r2, #0
 8017876:	711a      	strb	r2, [r3, #4]
 8017878:	2200      	movs	r2, #0
 801787a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801787c:	697b      	ldr	r3, [r7, #20]
 801787e:	2200      	movs	r2, #0
 8017880:	719a      	strb	r2, [r3, #6]
 8017882:	2200      	movs	r2, #0
 8017884:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017886:	69fb      	ldr	r3, [r7, #28]
 8017888:	685b      	ldr	r3, [r3, #4]
 801788a:	f103 0008 	add.w	r0, r3, #8
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	685b      	ldr	r3, [r3, #4]
 8017892:	221c      	movs	r2, #28
 8017894:	4619      	mov	r1, r3
 8017896:	f003 f99f 	bl	801abd8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801789a:	69bb      	ldr	r3, [r7, #24]
 801789c:	68db      	ldr	r3, [r3, #12]
 801789e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80178a0:	f107 030c 	add.w	r3, r7, #12
 80178a4:	4618      	mov	r0, r3
 80178a6:	f000 f825 	bl	80178f4 <ip4_route>
 80178aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80178ac:	693b      	ldr	r3, [r7, #16]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d011      	beq.n	80178d6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80178b2:	697b      	ldr	r3, [r7, #20]
 80178b4:	2200      	movs	r2, #0
 80178b6:	709a      	strb	r2, [r3, #2]
 80178b8:	2200      	movs	r2, #0
 80178ba:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80178bc:	f107 020c 	add.w	r2, r7, #12
 80178c0:	693b      	ldr	r3, [r7, #16]
 80178c2:	9302      	str	r3, [sp, #8]
 80178c4:	2301      	movs	r3, #1
 80178c6:	9301      	str	r3, [sp, #4]
 80178c8:	2300      	movs	r3, #0
 80178ca:	9300      	str	r3, [sp, #0]
 80178cc:	23ff      	movs	r3, #255	; 0xff
 80178ce:	2100      	movs	r1, #0
 80178d0:	69f8      	ldr	r0, [r7, #28]
 80178d2:	f000 f9eb 	bl	8017cac <ip4_output_if>
  }
  pbuf_free(q);
 80178d6:	69f8      	ldr	r0, [r7, #28]
 80178d8:	f7f5 fe6a 	bl	800d5b0 <pbuf_free>
 80178dc:	e000      	b.n	80178e0 <icmp_send_response+0xc0>
    return;
 80178de:	bf00      	nop
}
 80178e0:	3720      	adds	r7, #32
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd80      	pop	{r7, pc}
 80178e6:	bf00      	nop
 80178e8:	0801f834 	.word	0x0801f834
 80178ec:	0801f900 	.word	0x0801f900
 80178f0:	0801f8a4 	.word	0x0801f8a4

080178f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80178f4:	b480      	push	{r7}
 80178f6:	b085      	sub	sp, #20
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80178fc:	4b33      	ldr	r3, [pc, #204]	; (80179cc <ip4_route+0xd8>)
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	60fb      	str	r3, [r7, #12]
 8017902:	e036      	b.n	8017972 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801790a:	f003 0301 	and.w	r3, r3, #1
 801790e:	b2db      	uxtb	r3, r3
 8017910:	2b00      	cmp	r3, #0
 8017912:	d02b      	beq.n	801796c <ip4_route+0x78>
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801791a:	089b      	lsrs	r3, r3, #2
 801791c:	f003 0301 	and.w	r3, r3, #1
 8017920:	b2db      	uxtb	r3, r3
 8017922:	2b00      	cmp	r3, #0
 8017924:	d022      	beq.n	801796c <ip4_route+0x78>
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	3304      	adds	r3, #4
 801792a:	681b      	ldr	r3, [r3, #0]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d01d      	beq.n	801796c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681a      	ldr	r2, [r3, #0]
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	3304      	adds	r3, #4
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	405a      	eors	r2, r3
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	3308      	adds	r3, #8
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	4013      	ands	r3, r2
 8017944:	2b00      	cmp	r3, #0
 8017946:	d101      	bne.n	801794c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	e038      	b.n	80179be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017952:	f003 0302 	and.w	r3, r3, #2
 8017956:	2b00      	cmp	r3, #0
 8017958:	d108      	bne.n	801796c <ip4_route+0x78>
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	681a      	ldr	r2, [r3, #0]
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	330c      	adds	r3, #12
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	429a      	cmp	r2, r3
 8017966:	d101      	bne.n	801796c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	e028      	b.n	80179be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	60fb      	str	r3, [r7, #12]
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	2b00      	cmp	r3, #0
 8017976:	d1c5      	bne.n	8017904 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017978:	4b15      	ldr	r3, [pc, #84]	; (80179d0 <ip4_route+0xdc>)
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d01a      	beq.n	80179b6 <ip4_route+0xc2>
 8017980:	4b13      	ldr	r3, [pc, #76]	; (80179d0 <ip4_route+0xdc>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017988:	f003 0301 	and.w	r3, r3, #1
 801798c:	2b00      	cmp	r3, #0
 801798e:	d012      	beq.n	80179b6 <ip4_route+0xc2>
 8017990:	4b0f      	ldr	r3, [pc, #60]	; (80179d0 <ip4_route+0xdc>)
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017998:	f003 0304 	and.w	r3, r3, #4
 801799c:	2b00      	cmp	r3, #0
 801799e:	d00a      	beq.n	80179b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80179a0:	4b0b      	ldr	r3, [pc, #44]	; (80179d0 <ip4_route+0xdc>)
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	3304      	adds	r3, #4
 80179a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d004      	beq.n	80179b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	b2db      	uxtb	r3, r3
 80179b2:	2b7f      	cmp	r3, #127	; 0x7f
 80179b4:	d101      	bne.n	80179ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80179b6:	2300      	movs	r3, #0
 80179b8:	e001      	b.n	80179be <ip4_route+0xca>
  }

  return netif_default;
 80179ba:	4b05      	ldr	r3, [pc, #20]	; (80179d0 <ip4_route+0xdc>)
 80179bc:	681b      	ldr	r3, [r3, #0]
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3714      	adds	r7, #20
 80179c2:	46bd      	mov	sp, r7
 80179c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c8:	4770      	bx	lr
 80179ca:	bf00      	nop
 80179cc:	20019044 	.word	0x20019044
 80179d0:	20019048 	.word	0x20019048

080179d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b082      	sub	sp, #8
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80179e2:	f003 0301 	and.w	r3, r3, #1
 80179e6:	b2db      	uxtb	r3, r3
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d016      	beq.n	8017a1a <ip4_input_accept+0x46>
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	3304      	adds	r3, #4
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d011      	beq.n	8017a1a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80179f6:	4b0b      	ldr	r3, [pc, #44]	; (8017a24 <ip4_input_accept+0x50>)
 80179f8:	695a      	ldr	r2, [r3, #20]
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	3304      	adds	r3, #4
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	429a      	cmp	r2, r3
 8017a02:	d008      	beq.n	8017a16 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017a04:	4b07      	ldr	r3, [pc, #28]	; (8017a24 <ip4_input_accept+0x50>)
 8017a06:	695b      	ldr	r3, [r3, #20]
 8017a08:	6879      	ldr	r1, [r7, #4]
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f000 fa26 	bl	8017e5c <ip4_addr_isbroadcast_u32>
 8017a10:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d001      	beq.n	8017a1a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017a16:	2301      	movs	r3, #1
 8017a18:	e000      	b.n	8017a1c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017a1a:	2300      	movs	r3, #0
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	3708      	adds	r7, #8
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}
 8017a24:	20015920 	.word	0x20015920

08017a28 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b088      	sub	sp, #32
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
 8017a30:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017a32:	2301      	movs	r3, #1
 8017a34:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017a3c:	69fb      	ldr	r3, [r7, #28]
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	091b      	lsrs	r3, r3, #4
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	2b04      	cmp	r3, #4
 8017a46:	d004      	beq.n	8017a52 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017a48:	6878      	ldr	r0, [r7, #4]
 8017a4a:	f7f5 fdb1 	bl	800d5b0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	e123      	b.n	8017c9a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017a52:	69fb      	ldr	r3, [r7, #28]
 8017a54:	781b      	ldrb	r3, [r3, #0]
 8017a56:	f003 030f 	and.w	r3, r3, #15
 8017a5a:	b2db      	uxtb	r3, r3
 8017a5c:	009b      	lsls	r3, r3, #2
 8017a5e:	b2db      	uxtb	r3, r3
 8017a60:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017a62:	69fb      	ldr	r3, [r7, #28]
 8017a64:	885b      	ldrh	r3, [r3, #2]
 8017a66:	b29b      	uxth	r3, r3
 8017a68:	4618      	mov	r0, r3
 8017a6a:	f7f4 f939 	bl	800bce0 <lwip_htons>
 8017a6e:	4603      	mov	r3, r0
 8017a70:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	891b      	ldrh	r3, [r3, #8]
 8017a76:	8a3a      	ldrh	r2, [r7, #16]
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d204      	bcs.n	8017a86 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017a7c:	8a3b      	ldrh	r3, [r7, #16]
 8017a7e:	4619      	mov	r1, r3
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f7f5 fbdd 	bl	800d240 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	895b      	ldrh	r3, [r3, #10]
 8017a8a:	8a7a      	ldrh	r2, [r7, #18]
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	d807      	bhi.n	8017aa0 <ip4_input+0x78>
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	891b      	ldrh	r3, [r3, #8]
 8017a94:	8a3a      	ldrh	r2, [r7, #16]
 8017a96:	429a      	cmp	r2, r3
 8017a98:	d802      	bhi.n	8017aa0 <ip4_input+0x78>
 8017a9a:	8a7b      	ldrh	r3, [r7, #18]
 8017a9c:	2b13      	cmp	r3, #19
 8017a9e:	d804      	bhi.n	8017aaa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017aa0:	6878      	ldr	r0, [r7, #4]
 8017aa2:	f7f5 fd85 	bl	800d5b0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	e0f7      	b.n	8017c9a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017aaa:	69fb      	ldr	r3, [r7, #28]
 8017aac:	691b      	ldr	r3, [r3, #16]
 8017aae:	4a7d      	ldr	r2, [pc, #500]	; (8017ca4 <ip4_input+0x27c>)
 8017ab0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	68db      	ldr	r3, [r3, #12]
 8017ab6:	4a7b      	ldr	r2, [pc, #492]	; (8017ca4 <ip4_input+0x27c>)
 8017ab8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017aba:	4b7a      	ldr	r3, [pc, #488]	; (8017ca4 <ip4_input+0x27c>)
 8017abc:	695b      	ldr	r3, [r3, #20]
 8017abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017ac2:	2be0      	cmp	r3, #224	; 0xe0
 8017ac4:	d112      	bne.n	8017aec <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017ac6:	683b      	ldr	r3, [r7, #0]
 8017ac8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017acc:	f003 0301 	and.w	r3, r3, #1
 8017ad0:	b2db      	uxtb	r3, r3
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d007      	beq.n	8017ae6 <ip4_input+0xbe>
 8017ad6:	683b      	ldr	r3, [r7, #0]
 8017ad8:	3304      	adds	r3, #4
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d002      	beq.n	8017ae6 <ip4_input+0xbe>
      netif = inp;
 8017ae0:	683b      	ldr	r3, [r7, #0]
 8017ae2:	61bb      	str	r3, [r7, #24]
 8017ae4:	e02a      	b.n	8017b3c <ip4_input+0x114>
    } else {
      netif = NULL;
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	61bb      	str	r3, [r7, #24]
 8017aea:	e027      	b.n	8017b3c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017aec:	6838      	ldr	r0, [r7, #0]
 8017aee:	f7ff ff71 	bl	80179d4 <ip4_input_accept>
 8017af2:	4603      	mov	r3, r0
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d002      	beq.n	8017afe <ip4_input+0xd6>
      netif = inp;
 8017af8:	683b      	ldr	r3, [r7, #0]
 8017afa:	61bb      	str	r3, [r7, #24]
 8017afc:	e01e      	b.n	8017b3c <ip4_input+0x114>
    } else {
      netif = NULL;
 8017afe:	2300      	movs	r3, #0
 8017b00:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017b02:	4b68      	ldr	r3, [pc, #416]	; (8017ca4 <ip4_input+0x27c>)
 8017b04:	695b      	ldr	r3, [r3, #20]
 8017b06:	b2db      	uxtb	r3, r3
 8017b08:	2b7f      	cmp	r3, #127	; 0x7f
 8017b0a:	d017      	beq.n	8017b3c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017b0c:	4b66      	ldr	r3, [pc, #408]	; (8017ca8 <ip4_input+0x280>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	61bb      	str	r3, [r7, #24]
 8017b12:	e00e      	b.n	8017b32 <ip4_input+0x10a>
          if (netif == inp) {
 8017b14:	69ba      	ldr	r2, [r7, #24]
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d006      	beq.n	8017b2a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017b1c:	69b8      	ldr	r0, [r7, #24]
 8017b1e:	f7ff ff59 	bl	80179d4 <ip4_input_accept>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d108      	bne.n	8017b3a <ip4_input+0x112>
 8017b28:	e000      	b.n	8017b2c <ip4_input+0x104>
            continue;
 8017b2a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017b2c:	69bb      	ldr	r3, [r7, #24]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	61bb      	str	r3, [r7, #24]
 8017b32:	69bb      	ldr	r3, [r7, #24]
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d1ed      	bne.n	8017b14 <ip4_input+0xec>
 8017b38:	e000      	b.n	8017b3c <ip4_input+0x114>
            break;
 8017b3a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017b3c:	69bb      	ldr	r3, [r7, #24]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d111      	bne.n	8017b66 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017b42:	69fb      	ldr	r3, [r7, #28]
 8017b44:	7a5b      	ldrb	r3, [r3, #9]
 8017b46:	2b11      	cmp	r3, #17
 8017b48:	d10d      	bne.n	8017b66 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017b4a:	8a7b      	ldrh	r3, [r7, #18]
 8017b4c:	69fa      	ldr	r2, [r7, #28]
 8017b4e:	4413      	add	r3, r2
 8017b50:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	885b      	ldrh	r3, [r3, #2]
 8017b56:	b29b      	uxth	r3, r3
 8017b58:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017b5c:	d103      	bne.n	8017b66 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017b5e:	683b      	ldr	r3, [r7, #0]
 8017b60:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017b62:	2300      	movs	r3, #0
 8017b64:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017b66:	697b      	ldr	r3, [r7, #20]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d017      	beq.n	8017b9c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017b6c:	4b4d      	ldr	r3, [pc, #308]	; (8017ca4 <ip4_input+0x27c>)
 8017b6e:	691b      	ldr	r3, [r3, #16]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d013      	beq.n	8017b9c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017b74:	4b4b      	ldr	r3, [pc, #300]	; (8017ca4 <ip4_input+0x27c>)
 8017b76:	691b      	ldr	r3, [r3, #16]
 8017b78:	6839      	ldr	r1, [r7, #0]
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f000 f96e 	bl	8017e5c <ip4_addr_isbroadcast_u32>
 8017b80:	4603      	mov	r3, r0
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d105      	bne.n	8017b92 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017b86:	4b47      	ldr	r3, [pc, #284]	; (8017ca4 <ip4_input+0x27c>)
 8017b88:	691b      	ldr	r3, [r3, #16]
 8017b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017b8e:	2be0      	cmp	r3, #224	; 0xe0
 8017b90:	d104      	bne.n	8017b9c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017b92:	6878      	ldr	r0, [r7, #4]
 8017b94:	f7f5 fd0c 	bl	800d5b0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017b98:	2300      	movs	r3, #0
 8017b9a:	e07e      	b.n	8017c9a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017b9c:	69bb      	ldr	r3, [r7, #24]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d104      	bne.n	8017bac <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017ba2:	6878      	ldr	r0, [r7, #4]
 8017ba4:	f7f5 fd04 	bl	800d5b0 <pbuf_free>
    return ERR_OK;
 8017ba8:	2300      	movs	r3, #0
 8017baa:	e076      	b.n	8017c9a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017bac:	69fb      	ldr	r3, [r7, #28]
 8017bae:	88db      	ldrh	r3, [r3, #6]
 8017bb0:	b29b      	uxth	r3, r3
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017bb8:	4013      	ands	r3, r2
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d00b      	beq.n	8017bd6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017bbe:	6878      	ldr	r0, [r7, #4]
 8017bc0:	f000 fd14 	bl	80185ec <ip4_reass>
 8017bc4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d101      	bne.n	8017bd0 <ip4_input+0x1a8>
      return ERR_OK;
 8017bcc:	2300      	movs	r3, #0
 8017bce:	e064      	b.n	8017c9a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	685b      	ldr	r3, [r3, #4]
 8017bd4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017bd6:	4a33      	ldr	r2, [pc, #204]	; (8017ca4 <ip4_input+0x27c>)
 8017bd8:	69bb      	ldr	r3, [r7, #24]
 8017bda:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017bdc:	4a31      	ldr	r2, [pc, #196]	; (8017ca4 <ip4_input+0x27c>)
 8017bde:	683b      	ldr	r3, [r7, #0]
 8017be0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017be2:	4a30      	ldr	r2, [pc, #192]	; (8017ca4 <ip4_input+0x27c>)
 8017be4:	69fb      	ldr	r3, [r7, #28]
 8017be6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017be8:	69fb      	ldr	r3, [r7, #28]
 8017bea:	781b      	ldrb	r3, [r3, #0]
 8017bec:	f003 030f 	and.w	r3, r3, #15
 8017bf0:	b2db      	uxtb	r3, r3
 8017bf2:	009b      	lsls	r3, r3, #2
 8017bf4:	b2db      	uxtb	r3, r3
 8017bf6:	b29a      	uxth	r2, r3
 8017bf8:	4b2a      	ldr	r3, [pc, #168]	; (8017ca4 <ip4_input+0x27c>)
 8017bfa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017bfc:	8a7b      	ldrh	r3, [r7, #18]
 8017bfe:	4619      	mov	r1, r3
 8017c00:	6878      	ldr	r0, [r7, #4]
 8017c02:	f7f5 fc1d 	bl	800d440 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017c06:	69fb      	ldr	r3, [r7, #28]
 8017c08:	7a5b      	ldrb	r3, [r3, #9]
 8017c0a:	2b11      	cmp	r3, #17
 8017c0c:	d006      	beq.n	8017c1c <ip4_input+0x1f4>
 8017c0e:	2b11      	cmp	r3, #17
 8017c10:	dc13      	bgt.n	8017c3a <ip4_input+0x212>
 8017c12:	2b01      	cmp	r3, #1
 8017c14:	d00c      	beq.n	8017c30 <ip4_input+0x208>
 8017c16:	2b06      	cmp	r3, #6
 8017c18:	d005      	beq.n	8017c26 <ip4_input+0x1fe>
 8017c1a:	e00e      	b.n	8017c3a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017c1c:	6839      	ldr	r1, [r7, #0]
 8017c1e:	6878      	ldr	r0, [r7, #4]
 8017c20:	f7fc fa34 	bl	801408c <udp_input>
        break;
 8017c24:	e026      	b.n	8017c74 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017c26:	6839      	ldr	r1, [r7, #0]
 8017c28:	6878      	ldr	r0, [r7, #4]
 8017c2a:	f7f7 fdf1 	bl	800f810 <tcp_input>
        break;
 8017c2e:	e021      	b.n	8017c74 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017c30:	6839      	ldr	r1, [r7, #0]
 8017c32:	6878      	ldr	r0, [r7, #4]
 8017c34:	f7ff fcd0 	bl	80175d8 <icmp_input>
        break;
 8017c38:	e01c      	b.n	8017c74 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017c3a:	4b1a      	ldr	r3, [pc, #104]	; (8017ca4 <ip4_input+0x27c>)
 8017c3c:	695b      	ldr	r3, [r3, #20]
 8017c3e:	69b9      	ldr	r1, [r7, #24]
 8017c40:	4618      	mov	r0, r3
 8017c42:	f000 f90b 	bl	8017e5c <ip4_addr_isbroadcast_u32>
 8017c46:	4603      	mov	r3, r0
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d10f      	bne.n	8017c6c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017c4c:	4b15      	ldr	r3, [pc, #84]	; (8017ca4 <ip4_input+0x27c>)
 8017c4e:	695b      	ldr	r3, [r3, #20]
 8017c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017c54:	2be0      	cmp	r3, #224	; 0xe0
 8017c56:	d009      	beq.n	8017c6c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017c58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017c5c:	4619      	mov	r1, r3
 8017c5e:	6878      	ldr	r0, [r7, #4]
 8017c60:	f7f5 fc61 	bl	800d526 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017c64:	2102      	movs	r1, #2
 8017c66:	6878      	ldr	r0, [r7, #4]
 8017c68:	f7ff fdba 	bl	80177e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017c6c:	6878      	ldr	r0, [r7, #4]
 8017c6e:	f7f5 fc9f 	bl	800d5b0 <pbuf_free>
        break;
 8017c72:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017c74:	4b0b      	ldr	r3, [pc, #44]	; (8017ca4 <ip4_input+0x27c>)
 8017c76:	2200      	movs	r2, #0
 8017c78:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017c7a:	4b0a      	ldr	r3, [pc, #40]	; (8017ca4 <ip4_input+0x27c>)
 8017c7c:	2200      	movs	r2, #0
 8017c7e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017c80:	4b08      	ldr	r3, [pc, #32]	; (8017ca4 <ip4_input+0x27c>)
 8017c82:	2200      	movs	r2, #0
 8017c84:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017c86:	4b07      	ldr	r3, [pc, #28]	; (8017ca4 <ip4_input+0x27c>)
 8017c88:	2200      	movs	r2, #0
 8017c8a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017c8c:	4b05      	ldr	r3, [pc, #20]	; (8017ca4 <ip4_input+0x27c>)
 8017c8e:	2200      	movs	r2, #0
 8017c90:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017c92:	4b04      	ldr	r3, [pc, #16]	; (8017ca4 <ip4_input+0x27c>)
 8017c94:	2200      	movs	r2, #0
 8017c96:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017c98:	2300      	movs	r3, #0
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	3720      	adds	r7, #32
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd80      	pop	{r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	20015920 	.word	0x20015920
 8017ca8:	20019044 	.word	0x20019044

08017cac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b08a      	sub	sp, #40	; 0x28
 8017cb0:	af04      	add	r7, sp, #16
 8017cb2:	60f8      	str	r0, [r7, #12]
 8017cb4:	60b9      	str	r1, [r7, #8]
 8017cb6:	607a      	str	r2, [r7, #4]
 8017cb8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017cba:	68bb      	ldr	r3, [r7, #8]
 8017cbc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d009      	beq.n	8017cd8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017cc4:	68bb      	ldr	r3, [r7, #8]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d003      	beq.n	8017cd2 <ip4_output_if+0x26>
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d102      	bne.n	8017cd8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd4:	3304      	adds	r3, #4
 8017cd6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017cd8:	78fa      	ldrb	r2, [r7, #3]
 8017cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cdc:	9302      	str	r3, [sp, #8]
 8017cde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017ce2:	9301      	str	r3, [sp, #4]
 8017ce4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ce8:	9300      	str	r3, [sp, #0]
 8017cea:	4613      	mov	r3, r2
 8017cec:	687a      	ldr	r2, [r7, #4]
 8017cee:	6979      	ldr	r1, [r7, #20]
 8017cf0:	68f8      	ldr	r0, [r7, #12]
 8017cf2:	f000 f805 	bl	8017d00 <ip4_output_if_src>
 8017cf6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	3718      	adds	r7, #24
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	bd80      	pop	{r7, pc}

08017d00 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b088      	sub	sp, #32
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	60f8      	str	r0, [r7, #12]
 8017d08:	60b9      	str	r1, [r7, #8]
 8017d0a:	607a      	str	r2, [r7, #4]
 8017d0c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	7b9b      	ldrb	r3, [r3, #14]
 8017d12:	2b01      	cmp	r3, #1
 8017d14:	d006      	beq.n	8017d24 <ip4_output_if_src+0x24>
 8017d16:	4b4b      	ldr	r3, [pc, #300]	; (8017e44 <ip4_output_if_src+0x144>)
 8017d18:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017d1c:	494a      	ldr	r1, [pc, #296]	; (8017e48 <ip4_output_if_src+0x148>)
 8017d1e:	484b      	ldr	r0, [pc, #300]	; (8017e4c <ip4_output_if_src+0x14c>)
 8017d20:	f003 fb22 	bl	801b368 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d060      	beq.n	8017dec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017d2a:	2314      	movs	r3, #20
 8017d2c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017d2e:	2114      	movs	r1, #20
 8017d30:	68f8      	ldr	r0, [r7, #12]
 8017d32:	f7f5 fb75 	bl	800d420 <pbuf_add_header>
 8017d36:	4603      	mov	r3, r0
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d002      	beq.n	8017d42 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017d3c:	f06f 0301 	mvn.w	r3, #1
 8017d40:	e07c      	b.n	8017e3c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	685b      	ldr	r3, [r3, #4]
 8017d46:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	895b      	ldrh	r3, [r3, #10]
 8017d4c:	2b13      	cmp	r3, #19
 8017d4e:	d806      	bhi.n	8017d5e <ip4_output_if_src+0x5e>
 8017d50:	4b3c      	ldr	r3, [pc, #240]	; (8017e44 <ip4_output_if_src+0x144>)
 8017d52:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017d56:	493e      	ldr	r1, [pc, #248]	; (8017e50 <ip4_output_if_src+0x150>)
 8017d58:	483c      	ldr	r0, [pc, #240]	; (8017e4c <ip4_output_if_src+0x14c>)
 8017d5a:	f003 fb05 	bl	801b368 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017d5e:	69fb      	ldr	r3, [r7, #28]
 8017d60:	78fa      	ldrb	r2, [r7, #3]
 8017d62:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017d64:	69fb      	ldr	r3, [r7, #28]
 8017d66:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017d6a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	681a      	ldr	r2, [r3, #0]
 8017d70:	69fb      	ldr	r3, [r7, #28]
 8017d72:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017d74:	8b7b      	ldrh	r3, [r7, #26]
 8017d76:	089b      	lsrs	r3, r3, #2
 8017d78:	b29b      	uxth	r3, r3
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017d80:	b2da      	uxtb	r2, r3
 8017d82:	69fb      	ldr	r3, [r7, #28]
 8017d84:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017d86:	69fb      	ldr	r3, [r7, #28]
 8017d88:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017d8c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	891b      	ldrh	r3, [r3, #8]
 8017d92:	4618      	mov	r0, r3
 8017d94:	f7f3 ffa4 	bl	800bce0 <lwip_htons>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	461a      	mov	r2, r3
 8017d9c:	69fb      	ldr	r3, [r7, #28]
 8017d9e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017da0:	69fb      	ldr	r3, [r7, #28]
 8017da2:	2200      	movs	r2, #0
 8017da4:	719a      	strb	r2, [r3, #6]
 8017da6:	2200      	movs	r2, #0
 8017da8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017daa:	4b2a      	ldr	r3, [pc, #168]	; (8017e54 <ip4_output_if_src+0x154>)
 8017dac:	881b      	ldrh	r3, [r3, #0]
 8017dae:	4618      	mov	r0, r3
 8017db0:	f7f3 ff96 	bl	800bce0 <lwip_htons>
 8017db4:	4603      	mov	r3, r0
 8017db6:	461a      	mov	r2, r3
 8017db8:	69fb      	ldr	r3, [r7, #28]
 8017dba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017dbc:	4b25      	ldr	r3, [pc, #148]	; (8017e54 <ip4_output_if_src+0x154>)
 8017dbe:	881b      	ldrh	r3, [r3, #0]
 8017dc0:	3301      	adds	r3, #1
 8017dc2:	b29a      	uxth	r2, r3
 8017dc4:	4b23      	ldr	r3, [pc, #140]	; (8017e54 <ip4_output_if_src+0x154>)
 8017dc6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d104      	bne.n	8017dd8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017dce:	4b22      	ldr	r3, [pc, #136]	; (8017e58 <ip4_output_if_src+0x158>)
 8017dd0:	681a      	ldr	r2, [r3, #0]
 8017dd2:	69fb      	ldr	r3, [r7, #28]
 8017dd4:	60da      	str	r2, [r3, #12]
 8017dd6:	e003      	b.n	8017de0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	681a      	ldr	r2, [r3, #0]
 8017ddc:	69fb      	ldr	r3, [r7, #28]
 8017dde:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017de0:	69fb      	ldr	r3, [r7, #28]
 8017de2:	2200      	movs	r2, #0
 8017de4:	729a      	strb	r2, [r3, #10]
 8017de6:	2200      	movs	r2, #0
 8017de8:	72da      	strb	r2, [r3, #11]
 8017dea:	e00f      	b.n	8017e0c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	895b      	ldrh	r3, [r3, #10]
 8017df0:	2b13      	cmp	r3, #19
 8017df2:	d802      	bhi.n	8017dfa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017df4:	f06f 0301 	mvn.w	r3, #1
 8017df8:	e020      	b.n	8017e3c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	685b      	ldr	r3, [r3, #4]
 8017dfe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017e00:	69fb      	ldr	r3, [r7, #28]
 8017e02:	691b      	ldr	r3, [r3, #16]
 8017e04:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017e06:	f107 0314 	add.w	r3, r7, #20
 8017e0a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d00c      	beq.n	8017e2e <ip4_output_if_src+0x12e>
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	891a      	ldrh	r2, [r3, #8]
 8017e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017e1c:	429a      	cmp	r2, r3
 8017e1e:	d906      	bls.n	8017e2e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017e20:	687a      	ldr	r2, [r7, #4]
 8017e22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017e24:	68f8      	ldr	r0, [r7, #12]
 8017e26:	f000 fdcf 	bl	80189c8 <ip4_frag>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	e006      	b.n	8017e3c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e30:	695b      	ldr	r3, [r3, #20]
 8017e32:	687a      	ldr	r2, [r7, #4]
 8017e34:	68f9      	ldr	r1, [r7, #12]
 8017e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017e38:	4798      	blx	r3
 8017e3a:	4603      	mov	r3, r0
}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	3720      	adds	r7, #32
 8017e40:	46bd      	mov	sp, r7
 8017e42:	bd80      	pop	{r7, pc}
 8017e44:	0801f92c 	.word	0x0801f92c
 8017e48:	0801f960 	.word	0x0801f960
 8017e4c:	0801f96c 	.word	0x0801f96c
 8017e50:	0801f994 	.word	0x0801f994
 8017e54:	200108b2 	.word	0x200108b2
 8017e58:	0801ffd4 	.word	0x0801ffd4

08017e5c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017e5c:	b480      	push	{r7}
 8017e5e:	b085      	sub	sp, #20
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	6078      	str	r0, [r7, #4]
 8017e64:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e70:	d002      	beq.n	8017e78 <ip4_addr_isbroadcast_u32+0x1c>
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d101      	bne.n	8017e7c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017e78:	2301      	movs	r3, #1
 8017e7a:	e02a      	b.n	8017ed2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017e7c:	683b      	ldr	r3, [r7, #0]
 8017e7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017e82:	f003 0302 	and.w	r3, r3, #2
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d101      	bne.n	8017e8e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	e021      	b.n	8017ed2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017e8e:	683b      	ldr	r3, [r7, #0]
 8017e90:	3304      	adds	r3, #4
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	687a      	ldr	r2, [r7, #4]
 8017e96:	429a      	cmp	r2, r3
 8017e98:	d101      	bne.n	8017e9e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	e019      	b.n	8017ed2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017e9e:	68fa      	ldr	r2, [r7, #12]
 8017ea0:	683b      	ldr	r3, [r7, #0]
 8017ea2:	3304      	adds	r3, #4
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	405a      	eors	r2, r3
 8017ea8:	683b      	ldr	r3, [r7, #0]
 8017eaa:	3308      	adds	r3, #8
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	4013      	ands	r3, r2
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d10d      	bne.n	8017ed0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017eb4:	683b      	ldr	r3, [r7, #0]
 8017eb6:	3308      	adds	r3, #8
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	43da      	mvns	r2, r3
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017ec0:	683b      	ldr	r3, [r7, #0]
 8017ec2:	3308      	adds	r3, #8
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d101      	bne.n	8017ed0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017ecc:	2301      	movs	r3, #1
 8017ece:	e000      	b.n	8017ed2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017ed0:	2300      	movs	r3, #0
  }
}
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	3714      	adds	r7, #20
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017edc:	4770      	bx	lr
	...

08017ee0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017ee0:	b480      	push	{r7}
 8017ee2:	b08d      	sub	sp, #52	; 0x34
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	60f8      	str	r0, [r7, #12]
 8017ee8:	60b9      	str	r1, [r7, #8]
 8017eea:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8017eec:	2300      	movs	r3, #0
 8017eee:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8017ef6:	68bb      	ldr	r3, [r7, #8]
 8017ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8017efa:	f107 0318 	add.w	r3, r7, #24
 8017efe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017f00:	2300      	movs	r3, #0
 8017f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017f06:	e059      	b.n	8017fbc <ip4addr_ntoa_r+0xdc>
    i = 0;
 8017f08:	2300      	movs	r3, #0
 8017f0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8017f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f10:	781a      	ldrb	r2, [r3, #0]
 8017f12:	4b33      	ldr	r3, [pc, #204]	; (8017fe0 <ip4addr_ntoa_r+0x100>)
 8017f14:	fba3 1302 	umull	r1, r3, r3, r2
 8017f18:	08d9      	lsrs	r1, r3, #3
 8017f1a:	460b      	mov	r3, r1
 8017f1c:	009b      	lsls	r3, r3, #2
 8017f1e:	440b      	add	r3, r1
 8017f20:	005b      	lsls	r3, r3, #1
 8017f22:	1ad3      	subs	r3, r2, r3
 8017f24:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8017f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f28:	781b      	ldrb	r3, [r3, #0]
 8017f2a:	4a2d      	ldr	r2, [pc, #180]	; (8017fe0 <ip4addr_ntoa_r+0x100>)
 8017f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8017f30:	08db      	lsrs	r3, r3, #3
 8017f32:	b2da      	uxtb	r2, r3
 8017f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f36:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8017f38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f3c:	1c5a      	adds	r2, r3, #1
 8017f3e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8017f42:	4619      	mov	r1, r3
 8017f44:	7ffb      	ldrb	r3, [r7, #31]
 8017f46:	3330      	adds	r3, #48	; 0x30
 8017f48:	b2da      	uxtb	r2, r3
 8017f4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017f4e:	440b      	add	r3, r1
 8017f50:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8017f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f56:	781b      	ldrb	r3, [r3, #0]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d1d8      	bne.n	8017f0e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8017f5c:	e012      	b.n	8017f84 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8017f5e:	6a3b      	ldr	r3, [r7, #32]
 8017f60:	1c5a      	adds	r2, r3, #1
 8017f62:	623a      	str	r2, [r7, #32]
 8017f64:	687a      	ldr	r2, [r7, #4]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	dc01      	bgt.n	8017f6e <ip4addr_ntoa_r+0x8e>
        return NULL;
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	e031      	b.n	8017fd2 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8017f6e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f74:	1c59      	adds	r1, r3, #1
 8017f76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8017f78:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8017f7c:	440a      	add	r2, r1
 8017f7e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8017f82:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8017f84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f88:	1e5a      	subs	r2, r3, #1
 8017f8a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d1e5      	bne.n	8017f5e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8017f92:	6a3b      	ldr	r3, [r7, #32]
 8017f94:	1c5a      	adds	r2, r3, #1
 8017f96:	623a      	str	r2, [r7, #32]
 8017f98:	687a      	ldr	r2, [r7, #4]
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	dc01      	bgt.n	8017fa2 <ip4addr_ntoa_r+0xc2>
      return NULL;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	e017      	b.n	8017fd2 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8017fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa4:	1c5a      	adds	r2, r3, #1
 8017fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017fa8:	222e      	movs	r2, #46	; 0x2e
 8017faa:	701a      	strb	r2, [r3, #0]
    ap++;
 8017fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fae:	3301      	adds	r3, #1
 8017fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fb6:	3301      	adds	r3, #1
 8017fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fc0:	2b03      	cmp	r3, #3
 8017fc2:	d9a1      	bls.n	8017f08 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8017fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc6:	3b01      	subs	r3, #1
 8017fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fcc:	2200      	movs	r2, #0
 8017fce:	701a      	strb	r2, [r3, #0]
  return buf;
 8017fd0:	68bb      	ldr	r3, [r7, #8]
}
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	3734      	adds	r7, #52	; 0x34
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fdc:	4770      	bx	lr
 8017fde:	bf00      	nop
 8017fe0:	cccccccd 	.word	0xcccccccd

08017fe4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b084      	sub	sp, #16
 8017fe8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017fea:	2300      	movs	r3, #0
 8017fec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017fee:	4b12      	ldr	r3, [pc, #72]	; (8018038 <ip_reass_tmr+0x54>)
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017ff4:	e018      	b.n	8018028 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	7fdb      	ldrb	r3, [r3, #31]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d00b      	beq.n	8018016 <ip_reass_tmr+0x32>
      r->timer--;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	7fdb      	ldrb	r3, [r3, #31]
 8018002:	3b01      	subs	r3, #1
 8018004:	b2da      	uxtb	r2, r3
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	681b      	ldr	r3, [r3, #0]
 8018012:	60fb      	str	r3, [r7, #12]
 8018014:	e008      	b.n	8018028 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018020:	68b9      	ldr	r1, [r7, #8]
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f000 f80a 	bl	801803c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d1e3      	bne.n	8017ff6 <ip_reass_tmr+0x12>
    }
  }
}
 801802e:	bf00      	nop
 8018030:	bf00      	nop
 8018032:	3710      	adds	r7, #16
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	200108b4 	.word	0x200108b4

0801803c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b088      	sub	sp, #32
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
 8018044:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018046:	2300      	movs	r3, #0
 8018048:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801804a:	683a      	ldr	r2, [r7, #0]
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	429a      	cmp	r2, r3
 8018050:	d105      	bne.n	801805e <ip_reass_free_complete_datagram+0x22>
 8018052:	4b45      	ldr	r3, [pc, #276]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018054:	22ab      	movs	r2, #171	; 0xab
 8018056:	4945      	ldr	r1, [pc, #276]	; (801816c <ip_reass_free_complete_datagram+0x130>)
 8018058:	4845      	ldr	r0, [pc, #276]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 801805a:	f003 f985 	bl	801b368 <iprintf>
  if (prev != NULL) {
 801805e:	683b      	ldr	r3, [r7, #0]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d00a      	beq.n	801807a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018064:	683b      	ldr	r3, [r7, #0]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	687a      	ldr	r2, [r7, #4]
 801806a:	429a      	cmp	r2, r3
 801806c:	d005      	beq.n	801807a <ip_reass_free_complete_datagram+0x3e>
 801806e:	4b3e      	ldr	r3, [pc, #248]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018070:	22ad      	movs	r2, #173	; 0xad
 8018072:	4940      	ldr	r1, [pc, #256]	; (8018174 <ip_reass_free_complete_datagram+0x138>)
 8018074:	483e      	ldr	r0, [pc, #248]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 8018076:	f003 f977 	bl	801b368 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	685b      	ldr	r3, [r3, #4]
 801807e:	685b      	ldr	r3, [r3, #4]
 8018080:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018082:	697b      	ldr	r3, [r7, #20]
 8018084:	889b      	ldrh	r3, [r3, #4]
 8018086:	b29b      	uxth	r3, r3
 8018088:	2b00      	cmp	r3, #0
 801808a:	d12a      	bne.n	80180e2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	685b      	ldr	r3, [r3, #4]
 8018090:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	681a      	ldr	r2, [r3, #0]
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801809a:	69bb      	ldr	r3, [r7, #24]
 801809c:	6858      	ldr	r0, [r3, #4]
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	3308      	adds	r3, #8
 80180a2:	2214      	movs	r2, #20
 80180a4:	4619      	mov	r1, r3
 80180a6:	f002 fd97 	bl	801abd8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80180aa:	2101      	movs	r1, #1
 80180ac:	69b8      	ldr	r0, [r7, #24]
 80180ae:	f7ff fba7 	bl	8017800 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80180b2:	69b8      	ldr	r0, [r7, #24]
 80180b4:	f7f5 fb0a 	bl	800d6cc <pbuf_clen>
 80180b8:	4603      	mov	r3, r0
 80180ba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80180bc:	8bfa      	ldrh	r2, [r7, #30]
 80180be:	8a7b      	ldrh	r3, [r7, #18]
 80180c0:	4413      	add	r3, r2
 80180c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180c6:	db05      	blt.n	80180d4 <ip_reass_free_complete_datagram+0x98>
 80180c8:	4b27      	ldr	r3, [pc, #156]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 80180ca:	22bc      	movs	r2, #188	; 0xbc
 80180cc:	492a      	ldr	r1, [pc, #168]	; (8018178 <ip_reass_free_complete_datagram+0x13c>)
 80180ce:	4828      	ldr	r0, [pc, #160]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 80180d0:	f003 f94a 	bl	801b368 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80180d4:	8bfa      	ldrh	r2, [r7, #30]
 80180d6:	8a7b      	ldrh	r3, [r7, #18]
 80180d8:	4413      	add	r3, r2
 80180da:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80180dc:	69b8      	ldr	r0, [r7, #24]
 80180de:	f7f5 fa67 	bl	800d5b0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	685b      	ldr	r3, [r3, #4]
 80180e6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80180e8:	e01f      	b.n	801812a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80180ea:	69bb      	ldr	r3, [r7, #24]
 80180ec:	685b      	ldr	r3, [r3, #4]
 80180ee:	617b      	str	r3, [r7, #20]
    pcur = p;
 80180f0:	69bb      	ldr	r3, [r7, #24]
 80180f2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80180f4:	697b      	ldr	r3, [r7, #20]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80180fa:	68f8      	ldr	r0, [r7, #12]
 80180fc:	f7f5 fae6 	bl	800d6cc <pbuf_clen>
 8018100:	4603      	mov	r3, r0
 8018102:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018104:	8bfa      	ldrh	r2, [r7, #30]
 8018106:	8a7b      	ldrh	r3, [r7, #18]
 8018108:	4413      	add	r3, r2
 801810a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801810e:	db05      	blt.n	801811c <ip_reass_free_complete_datagram+0xe0>
 8018110:	4b15      	ldr	r3, [pc, #84]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018112:	22cc      	movs	r2, #204	; 0xcc
 8018114:	4918      	ldr	r1, [pc, #96]	; (8018178 <ip_reass_free_complete_datagram+0x13c>)
 8018116:	4816      	ldr	r0, [pc, #88]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 8018118:	f003 f926 	bl	801b368 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801811c:	8bfa      	ldrh	r2, [r7, #30]
 801811e:	8a7b      	ldrh	r3, [r7, #18]
 8018120:	4413      	add	r3, r2
 8018122:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018124:	68f8      	ldr	r0, [r7, #12]
 8018126:	f7f5 fa43 	bl	800d5b0 <pbuf_free>
  while (p != NULL) {
 801812a:	69bb      	ldr	r3, [r7, #24]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d1dc      	bne.n	80180ea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018130:	6839      	ldr	r1, [r7, #0]
 8018132:	6878      	ldr	r0, [r7, #4]
 8018134:	f000 f8c2 	bl	80182bc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018138:	4b10      	ldr	r3, [pc, #64]	; (801817c <ip_reass_free_complete_datagram+0x140>)
 801813a:	881b      	ldrh	r3, [r3, #0]
 801813c:	8bfa      	ldrh	r2, [r7, #30]
 801813e:	429a      	cmp	r2, r3
 8018140:	d905      	bls.n	801814e <ip_reass_free_complete_datagram+0x112>
 8018142:	4b09      	ldr	r3, [pc, #36]	; (8018168 <ip_reass_free_complete_datagram+0x12c>)
 8018144:	22d2      	movs	r2, #210	; 0xd2
 8018146:	490e      	ldr	r1, [pc, #56]	; (8018180 <ip_reass_free_complete_datagram+0x144>)
 8018148:	4809      	ldr	r0, [pc, #36]	; (8018170 <ip_reass_free_complete_datagram+0x134>)
 801814a:	f003 f90d 	bl	801b368 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801814e:	4b0b      	ldr	r3, [pc, #44]	; (801817c <ip_reass_free_complete_datagram+0x140>)
 8018150:	881a      	ldrh	r2, [r3, #0]
 8018152:	8bfb      	ldrh	r3, [r7, #30]
 8018154:	1ad3      	subs	r3, r2, r3
 8018156:	b29a      	uxth	r2, r3
 8018158:	4b08      	ldr	r3, [pc, #32]	; (801817c <ip_reass_free_complete_datagram+0x140>)
 801815a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801815c:	8bfb      	ldrh	r3, [r7, #30]
}
 801815e:	4618      	mov	r0, r3
 8018160:	3720      	adds	r7, #32
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}
 8018166:	bf00      	nop
 8018168:	0801f9c4 	.word	0x0801f9c4
 801816c:	0801fa00 	.word	0x0801fa00
 8018170:	0801fa0c 	.word	0x0801fa0c
 8018174:	0801fa34 	.word	0x0801fa34
 8018178:	0801fa48 	.word	0x0801fa48
 801817c:	200108b8 	.word	0x200108b8
 8018180:	0801fa68 	.word	0x0801fa68

08018184 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b08a      	sub	sp, #40	; 0x28
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
 801818c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801818e:	2300      	movs	r3, #0
 8018190:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018192:	2300      	movs	r3, #0
 8018194:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018196:	2300      	movs	r3, #0
 8018198:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801819a:	2300      	movs	r3, #0
 801819c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801819e:	2300      	movs	r3, #0
 80181a0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80181a2:	4b28      	ldr	r3, [pc, #160]	; (8018244 <ip_reass_remove_oldest_datagram+0xc0>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80181a8:	e030      	b.n	801820c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80181aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ac:	695a      	ldr	r2, [r3, #20]
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	68db      	ldr	r3, [r3, #12]
 80181b2:	429a      	cmp	r2, r3
 80181b4:	d10c      	bne.n	80181d0 <ip_reass_remove_oldest_datagram+0x4c>
 80181b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b8:	699a      	ldr	r2, [r3, #24]
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	691b      	ldr	r3, [r3, #16]
 80181be:	429a      	cmp	r2, r3
 80181c0:	d106      	bne.n	80181d0 <ip_reass_remove_oldest_datagram+0x4c>
 80181c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c4:	899a      	ldrh	r2, [r3, #12]
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	889b      	ldrh	r3, [r3, #4]
 80181ca:	b29b      	uxth	r3, r3
 80181cc:	429a      	cmp	r2, r3
 80181ce:	d014      	beq.n	80181fa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80181d0:	693b      	ldr	r3, [r7, #16]
 80181d2:	3301      	adds	r3, #1
 80181d4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80181d6:	6a3b      	ldr	r3, [r7, #32]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d104      	bne.n	80181e6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80181dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181de:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181e0:	69fb      	ldr	r3, [r7, #28]
 80181e2:	61bb      	str	r3, [r7, #24]
 80181e4:	e009      	b.n	80181fa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80181e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e8:	7fda      	ldrb	r2, [r3, #31]
 80181ea:	6a3b      	ldr	r3, [r7, #32]
 80181ec:	7fdb      	ldrb	r3, [r3, #31]
 80181ee:	429a      	cmp	r2, r3
 80181f0:	d803      	bhi.n	80181fa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80181f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181f6:	69fb      	ldr	r3, [r7, #28]
 80181f8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80181fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d001      	beq.n	8018206 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018204:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801820e:	2b00      	cmp	r3, #0
 8018210:	d1cb      	bne.n	80181aa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018212:	6a3b      	ldr	r3, [r7, #32]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d008      	beq.n	801822a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018218:	69b9      	ldr	r1, [r7, #24]
 801821a:	6a38      	ldr	r0, [r7, #32]
 801821c:	f7ff ff0e 	bl	801803c <ip_reass_free_complete_datagram>
 8018220:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018222:	697a      	ldr	r2, [r7, #20]
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	4413      	add	r3, r2
 8018228:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801822a:	697a      	ldr	r2, [r7, #20]
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	429a      	cmp	r2, r3
 8018230:	da02      	bge.n	8018238 <ip_reass_remove_oldest_datagram+0xb4>
 8018232:	693b      	ldr	r3, [r7, #16]
 8018234:	2b01      	cmp	r3, #1
 8018236:	dcac      	bgt.n	8018192 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018238:	697b      	ldr	r3, [r7, #20]
}
 801823a:	4618      	mov	r0, r3
 801823c:	3728      	adds	r7, #40	; 0x28
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	200108b4 	.word	0x200108b4

08018248 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b084      	sub	sp, #16
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
 8018250:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018252:	2004      	movs	r0, #4
 8018254:	f7f4 fa1c 	bl	800c690 <memp_malloc>
 8018258:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d110      	bne.n	8018282 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018260:	6839      	ldr	r1, [r7, #0]
 8018262:	6878      	ldr	r0, [r7, #4]
 8018264:	f7ff ff8e 	bl	8018184 <ip_reass_remove_oldest_datagram>
 8018268:	4602      	mov	r2, r0
 801826a:	683b      	ldr	r3, [r7, #0]
 801826c:	4293      	cmp	r3, r2
 801826e:	dc03      	bgt.n	8018278 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018270:	2004      	movs	r0, #4
 8018272:	f7f4 fa0d 	bl	800c690 <memp_malloc>
 8018276:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d101      	bne.n	8018282 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801827e:	2300      	movs	r3, #0
 8018280:	e016      	b.n	80182b0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018282:	2220      	movs	r2, #32
 8018284:	2100      	movs	r1, #0
 8018286:	68f8      	ldr	r0, [r7, #12]
 8018288:	f002 fcce 	bl	801ac28 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	220f      	movs	r2, #15
 8018290:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018292:	4b09      	ldr	r3, [pc, #36]	; (80182b8 <ip_reass_enqueue_new_datagram+0x70>)
 8018294:	681a      	ldr	r2, [r3, #0]
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801829a:	4a07      	ldr	r2, [pc, #28]	; (80182b8 <ip_reass_enqueue_new_datagram+0x70>)
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	3308      	adds	r3, #8
 80182a4:	2214      	movs	r2, #20
 80182a6:	6879      	ldr	r1, [r7, #4]
 80182a8:	4618      	mov	r0, r3
 80182aa:	f002 fc95 	bl	801abd8 <memcpy>
  return ipr;
 80182ae:	68fb      	ldr	r3, [r7, #12]
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	3710      	adds	r7, #16
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}
 80182b8:	200108b4 	.word	0x200108b4

080182bc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b082      	sub	sp, #8
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
 80182c4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80182c6:	4b10      	ldr	r3, [pc, #64]	; (8018308 <ip_reass_dequeue_datagram+0x4c>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	687a      	ldr	r2, [r7, #4]
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d104      	bne.n	80182da <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	4a0c      	ldr	r2, [pc, #48]	; (8018308 <ip_reass_dequeue_datagram+0x4c>)
 80182d6:	6013      	str	r3, [r2, #0]
 80182d8:	e00d      	b.n	80182f6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80182da:	683b      	ldr	r3, [r7, #0]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d106      	bne.n	80182ee <ip_reass_dequeue_datagram+0x32>
 80182e0:	4b0a      	ldr	r3, [pc, #40]	; (801830c <ip_reass_dequeue_datagram+0x50>)
 80182e2:	f240 1245 	movw	r2, #325	; 0x145
 80182e6:	490a      	ldr	r1, [pc, #40]	; (8018310 <ip_reass_dequeue_datagram+0x54>)
 80182e8:	480a      	ldr	r0, [pc, #40]	; (8018314 <ip_reass_dequeue_datagram+0x58>)
 80182ea:	f003 f83d 	bl	801b368 <iprintf>
    prev->next = ipr->next;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681a      	ldr	r2, [r3, #0]
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80182f6:	6879      	ldr	r1, [r7, #4]
 80182f8:	2004      	movs	r0, #4
 80182fa:	f7f4 fa3f 	bl	800c77c <memp_free>
}
 80182fe:	bf00      	nop
 8018300:	3708      	adds	r7, #8
 8018302:	46bd      	mov	sp, r7
 8018304:	bd80      	pop	{r7, pc}
 8018306:	bf00      	nop
 8018308:	200108b4 	.word	0x200108b4
 801830c:	0801f9c4 	.word	0x0801f9c4
 8018310:	0801fa8c 	.word	0x0801fa8c
 8018314:	0801fa0c 	.word	0x0801fa0c

08018318 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018318:	b580      	push	{r7, lr}
 801831a:	b08c      	sub	sp, #48	; 0x30
 801831c:	af00      	add	r7, sp, #0
 801831e:	60f8      	str	r0, [r7, #12]
 8018320:	60b9      	str	r1, [r7, #8]
 8018322:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018324:	2300      	movs	r3, #0
 8018326:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018328:	2301      	movs	r3, #1
 801832a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	685b      	ldr	r3, [r3, #4]
 8018330:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018332:	69fb      	ldr	r3, [r7, #28]
 8018334:	885b      	ldrh	r3, [r3, #2]
 8018336:	b29b      	uxth	r3, r3
 8018338:	4618      	mov	r0, r3
 801833a:	f7f3 fcd1 	bl	800bce0 <lwip_htons>
 801833e:	4603      	mov	r3, r0
 8018340:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018342:	69fb      	ldr	r3, [r7, #28]
 8018344:	781b      	ldrb	r3, [r3, #0]
 8018346:	f003 030f 	and.w	r3, r3, #15
 801834a:	b2db      	uxtb	r3, r3
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018350:	7e7b      	ldrb	r3, [r7, #25]
 8018352:	b29b      	uxth	r3, r3
 8018354:	8b7a      	ldrh	r2, [r7, #26]
 8018356:	429a      	cmp	r2, r3
 8018358:	d202      	bcs.n	8018360 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801835a:	f04f 33ff 	mov.w	r3, #4294967295
 801835e:	e135      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018360:	7e7b      	ldrb	r3, [r7, #25]
 8018362:	b29b      	uxth	r3, r3
 8018364:	8b7a      	ldrh	r2, [r7, #26]
 8018366:	1ad3      	subs	r3, r2, r3
 8018368:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801836a:	69fb      	ldr	r3, [r7, #28]
 801836c:	88db      	ldrh	r3, [r3, #6]
 801836e:	b29b      	uxth	r3, r3
 8018370:	4618      	mov	r0, r3
 8018372:	f7f3 fcb5 	bl	800bce0 <lwip_htons>
 8018376:	4603      	mov	r3, r0
 8018378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801837c:	b29b      	uxth	r3, r3
 801837e:	00db      	lsls	r3, r3, #3
 8018380:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018382:	68bb      	ldr	r3, [r7, #8]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801838a:	2200      	movs	r2, #0
 801838c:	701a      	strb	r2, [r3, #0]
 801838e:	2200      	movs	r2, #0
 8018390:	705a      	strb	r2, [r3, #1]
 8018392:	2200      	movs	r2, #0
 8018394:	709a      	strb	r2, [r3, #2]
 8018396:	2200      	movs	r2, #0
 8018398:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801839c:	8afa      	ldrh	r2, [r7, #22]
 801839e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80183a0:	8afa      	ldrh	r2, [r7, #22]
 80183a2:	8b7b      	ldrh	r3, [r7, #26]
 80183a4:	4413      	add	r3, r2
 80183a6:	b29a      	uxth	r2, r3
 80183a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183aa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80183ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ae:	88db      	ldrh	r3, [r3, #6]
 80183b0:	b29b      	uxth	r3, r3
 80183b2:	8afa      	ldrh	r2, [r7, #22]
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d902      	bls.n	80183be <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183b8:	f04f 33ff 	mov.w	r3, #4294967295
 80183bc:	e106      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	685b      	ldr	r3, [r3, #4]
 80183c2:	627b      	str	r3, [r7, #36]	; 0x24
 80183c4:	e068      	b.n	8018498 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80183c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183c8:	685b      	ldr	r3, [r3, #4]
 80183ca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80183cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ce:	889b      	ldrh	r3, [r3, #4]
 80183d0:	b29a      	uxth	r2, r3
 80183d2:	693b      	ldr	r3, [r7, #16]
 80183d4:	889b      	ldrh	r3, [r3, #4]
 80183d6:	b29b      	uxth	r3, r3
 80183d8:	429a      	cmp	r2, r3
 80183da:	d235      	bcs.n	8018448 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80183dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80183e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d020      	beq.n	801842a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80183e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ea:	889b      	ldrh	r3, [r3, #4]
 80183ec:	b29a      	uxth	r2, r3
 80183ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f0:	88db      	ldrh	r3, [r3, #6]
 80183f2:	b29b      	uxth	r3, r3
 80183f4:	429a      	cmp	r2, r3
 80183f6:	d307      	bcc.n	8018408 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80183f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183fa:	88db      	ldrh	r3, [r3, #6]
 80183fc:	b29a      	uxth	r2, r3
 80183fe:	693b      	ldr	r3, [r7, #16]
 8018400:	889b      	ldrh	r3, [r3, #4]
 8018402:	b29b      	uxth	r3, r3
 8018404:	429a      	cmp	r2, r3
 8018406:	d902      	bls.n	801840e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018408:	f04f 33ff 	mov.w	r3, #4294967295
 801840c:	e0de      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801840e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018410:	68ba      	ldr	r2, [r7, #8]
 8018412:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018416:	88db      	ldrh	r3, [r3, #6]
 8018418:	b29a      	uxth	r2, r3
 801841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801841c:	889b      	ldrh	r3, [r3, #4]
 801841e:	b29b      	uxth	r3, r3
 8018420:	429a      	cmp	r2, r3
 8018422:	d03d      	beq.n	80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018424:	2300      	movs	r3, #0
 8018426:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018428:	e03a      	b.n	80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801842a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801842c:	88db      	ldrh	r3, [r3, #6]
 801842e:	b29a      	uxth	r2, r3
 8018430:	693b      	ldr	r3, [r7, #16]
 8018432:	889b      	ldrh	r3, [r3, #4]
 8018434:	b29b      	uxth	r3, r3
 8018436:	429a      	cmp	r2, r3
 8018438:	d902      	bls.n	8018440 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801843a:	f04f 33ff 	mov.w	r3, #4294967295
 801843e:	e0c5      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	68ba      	ldr	r2, [r7, #8]
 8018444:	605a      	str	r2, [r3, #4]
      break;
 8018446:	e02b      	b.n	80184a0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801844a:	889b      	ldrh	r3, [r3, #4]
 801844c:	b29a      	uxth	r2, r3
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	889b      	ldrh	r3, [r3, #4]
 8018452:	b29b      	uxth	r3, r3
 8018454:	429a      	cmp	r2, r3
 8018456:	d102      	bne.n	801845e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018458:	f04f 33ff 	mov.w	r3, #4294967295
 801845c:	e0b6      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801845e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018460:	889b      	ldrh	r3, [r3, #4]
 8018462:	b29a      	uxth	r2, r3
 8018464:	693b      	ldr	r3, [r7, #16]
 8018466:	88db      	ldrh	r3, [r3, #6]
 8018468:	b29b      	uxth	r3, r3
 801846a:	429a      	cmp	r2, r3
 801846c:	d202      	bcs.n	8018474 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801846e:	f04f 33ff 	mov.w	r3, #4294967295
 8018472:	e0ab      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018476:	2b00      	cmp	r3, #0
 8018478:	d009      	beq.n	801848e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801847c:	88db      	ldrh	r3, [r3, #6]
 801847e:	b29a      	uxth	r2, r3
 8018480:	693b      	ldr	r3, [r7, #16]
 8018482:	889b      	ldrh	r3, [r3, #4]
 8018484:	b29b      	uxth	r3, r3
 8018486:	429a      	cmp	r2, r3
 8018488:	d001      	beq.n	801848e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801848a:	2300      	movs	r3, #0
 801848c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801848e:	693b      	ldr	r3, [r7, #16]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018494:	693b      	ldr	r3, [r7, #16]
 8018496:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849a:	2b00      	cmp	r3, #0
 801849c:	d193      	bne.n	80183c6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801849e:	e000      	b.n	80184a2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80184a0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80184a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d12d      	bne.n	8018504 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80184a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d01c      	beq.n	80184e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80184ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b0:	88db      	ldrh	r3, [r3, #6]
 80184b2:	b29a      	uxth	r2, r3
 80184b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184b6:	889b      	ldrh	r3, [r3, #4]
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d906      	bls.n	80184cc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80184be:	4b45      	ldr	r3, [pc, #276]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184c0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80184c4:	4944      	ldr	r1, [pc, #272]	; (80185d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80184c6:	4845      	ldr	r0, [pc, #276]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184c8:	f002 ff4e 	bl	801b368 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80184cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184ce:	68ba      	ldr	r2, [r7, #8]
 80184d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80184d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184d4:	88db      	ldrh	r3, [r3, #6]
 80184d6:	b29a      	uxth	r2, r3
 80184d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184da:	889b      	ldrh	r3, [r3, #4]
 80184dc:	b29b      	uxth	r3, r3
 80184de:	429a      	cmp	r2, r3
 80184e0:	d010      	beq.n	8018504 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80184e2:	2300      	movs	r3, #0
 80184e4:	623b      	str	r3, [r7, #32]
 80184e6:	e00d      	b.n	8018504 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	685b      	ldr	r3, [r3, #4]
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d006      	beq.n	80184fe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80184f0:	4b38      	ldr	r3, [pc, #224]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184f2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80184f6:	493a      	ldr	r1, [pc, #232]	; (80185e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80184f8:	4838      	ldr	r0, [pc, #224]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184fa:	f002 ff35 	bl	801b368 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80184fe:	68fb      	ldr	r3, [r7, #12]
 8018500:	68ba      	ldr	r2, [r7, #8]
 8018502:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d105      	bne.n	8018516 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	7f9b      	ldrb	r3, [r3, #30]
 801850e:	f003 0301 	and.w	r3, r3, #1
 8018512:	2b00      	cmp	r3, #0
 8018514:	d059      	beq.n	80185ca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018516:	6a3b      	ldr	r3, [r7, #32]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d04f      	beq.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	685b      	ldr	r3, [r3, #4]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d006      	beq.n	8018532 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	685b      	ldr	r3, [r3, #4]
 8018528:	685b      	ldr	r3, [r3, #4]
 801852a:	889b      	ldrh	r3, [r3, #4]
 801852c:	b29b      	uxth	r3, r3
 801852e:	2b00      	cmp	r3, #0
 8018530:	d002      	beq.n	8018538 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018532:	2300      	movs	r3, #0
 8018534:	623b      	str	r3, [r7, #32]
 8018536:	e041      	b.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801853a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018542:	e012      	b.n	801856a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018546:	685b      	ldr	r3, [r3, #4]
 8018548:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801854c:	88db      	ldrh	r3, [r3, #6]
 801854e:	b29a      	uxth	r2, r3
 8018550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018552:	889b      	ldrh	r3, [r3, #4]
 8018554:	b29b      	uxth	r3, r3
 8018556:	429a      	cmp	r2, r3
 8018558:	d002      	beq.n	8018560 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801855a:	2300      	movs	r3, #0
 801855c:	623b      	str	r3, [r7, #32]
            break;
 801855e:	e007      	b.n	8018570 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018562:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801856c:	2b00      	cmp	r3, #0
 801856e:	d1e9      	bne.n	8018544 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018570:	6a3b      	ldr	r3, [r7, #32]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d022      	beq.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	685b      	ldr	r3, [r3, #4]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d106      	bne.n	801858c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801857e:	4b15      	ldr	r3, [pc, #84]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018580:	f240 12df 	movw	r2, #479	; 0x1df
 8018584:	4917      	ldr	r1, [pc, #92]	; (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018586:	4815      	ldr	r0, [pc, #84]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018588:	f002 feee 	bl	801b368 <iprintf>
          LWIP_ASSERT("sanity check",
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	685b      	ldr	r3, [r3, #4]
 8018590:	685b      	ldr	r3, [r3, #4]
 8018592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018594:	429a      	cmp	r2, r3
 8018596:	d106      	bne.n	80185a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018598:	4b0e      	ldr	r3, [pc, #56]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801859a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801859e:	4911      	ldr	r1, [pc, #68]	; (80185e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80185a0:	480e      	ldr	r0, [pc, #56]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185a2:	f002 fee1 	bl	801b368 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80185a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d006      	beq.n	80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80185ae:	4b09      	ldr	r3, [pc, #36]	; (80185d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80185b0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80185b4:	490c      	ldr	r1, [pc, #48]	; (80185e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80185b6:	4809      	ldr	r0, [pc, #36]	; (80185dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80185b8:	f002 fed6 	bl	801b368 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80185bc:	6a3b      	ldr	r3, [r7, #32]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	bf14      	ite	ne
 80185c2:	2301      	movne	r3, #1
 80185c4:	2300      	moveq	r3, #0
 80185c6:	b2db      	uxtb	r3, r3
 80185c8:	e000      	b.n	80185cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80185ca:	2300      	movs	r3, #0
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	3730      	adds	r7, #48	; 0x30
 80185d0:	46bd      	mov	sp, r7
 80185d2:	bd80      	pop	{r7, pc}
 80185d4:	0801f9c4 	.word	0x0801f9c4
 80185d8:	0801faa8 	.word	0x0801faa8
 80185dc:	0801fa0c 	.word	0x0801fa0c
 80185e0:	0801fac8 	.word	0x0801fac8
 80185e4:	0801fb00 	.word	0x0801fb00
 80185e8:	0801fb10 	.word	0x0801fb10

080185ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b08e      	sub	sp, #56	; 0x38
 80185f0:	af00      	add	r7, sp, #0
 80185f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	685b      	ldr	r3, [r3, #4]
 80185f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80185fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185fc:	781b      	ldrb	r3, [r3, #0]
 80185fe:	f003 030f 	and.w	r3, r3, #15
 8018602:	b2db      	uxtb	r3, r3
 8018604:	009b      	lsls	r3, r3, #2
 8018606:	b2db      	uxtb	r3, r3
 8018608:	2b14      	cmp	r3, #20
 801860a:	f040 8167 	bne.w	80188dc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018610:	88db      	ldrh	r3, [r3, #6]
 8018612:	b29b      	uxth	r3, r3
 8018614:	4618      	mov	r0, r3
 8018616:	f7f3 fb63 	bl	800bce0 <lwip_htons>
 801861a:	4603      	mov	r3, r0
 801861c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018620:	b29b      	uxth	r3, r3
 8018622:	00db      	lsls	r3, r3, #3
 8018624:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018628:	885b      	ldrh	r3, [r3, #2]
 801862a:	b29b      	uxth	r3, r3
 801862c:	4618      	mov	r0, r3
 801862e:	f7f3 fb57 	bl	800bce0 <lwip_htons>
 8018632:	4603      	mov	r3, r0
 8018634:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018638:	781b      	ldrb	r3, [r3, #0]
 801863a:	f003 030f 	and.w	r3, r3, #15
 801863e:	b2db      	uxtb	r3, r3
 8018640:	009b      	lsls	r3, r3, #2
 8018642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018646:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801864a:	b29b      	uxth	r3, r3
 801864c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801864e:	429a      	cmp	r2, r3
 8018650:	f0c0 8146 	bcc.w	80188e0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018658:	b29b      	uxth	r3, r3
 801865a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801865c:	1ad3      	subs	r3, r2, r3
 801865e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018660:	6878      	ldr	r0, [r7, #4]
 8018662:	f7f5 f833 	bl	800d6cc <pbuf_clen>
 8018666:	4603      	mov	r3, r0
 8018668:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801866a:	4b9f      	ldr	r3, [pc, #636]	; (80188e8 <ip4_reass+0x2fc>)
 801866c:	881b      	ldrh	r3, [r3, #0]
 801866e:	461a      	mov	r2, r3
 8018670:	8c3b      	ldrh	r3, [r7, #32]
 8018672:	4413      	add	r3, r2
 8018674:	2b0a      	cmp	r3, #10
 8018676:	dd10      	ble.n	801869a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018678:	8c3b      	ldrh	r3, [r7, #32]
 801867a:	4619      	mov	r1, r3
 801867c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801867e:	f7ff fd81 	bl	8018184 <ip_reass_remove_oldest_datagram>
 8018682:	4603      	mov	r3, r0
 8018684:	2b00      	cmp	r3, #0
 8018686:	f000 812d 	beq.w	80188e4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801868a:	4b97      	ldr	r3, [pc, #604]	; (80188e8 <ip4_reass+0x2fc>)
 801868c:	881b      	ldrh	r3, [r3, #0]
 801868e:	461a      	mov	r2, r3
 8018690:	8c3b      	ldrh	r3, [r7, #32]
 8018692:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018694:	2b0a      	cmp	r3, #10
 8018696:	f300 8125 	bgt.w	80188e4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801869a:	4b94      	ldr	r3, [pc, #592]	; (80188ec <ip4_reass+0x300>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	633b      	str	r3, [r7, #48]	; 0x30
 80186a0:	e015      	b.n	80186ce <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80186a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186a4:	695a      	ldr	r2, [r3, #20]
 80186a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a8:	68db      	ldr	r3, [r3, #12]
 80186aa:	429a      	cmp	r2, r3
 80186ac:	d10c      	bne.n	80186c8 <ip4_reass+0xdc>
 80186ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186b0:	699a      	ldr	r2, [r3, #24]
 80186b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b4:	691b      	ldr	r3, [r3, #16]
 80186b6:	429a      	cmp	r2, r3
 80186b8:	d106      	bne.n	80186c8 <ip4_reass+0xdc>
 80186ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186bc:	899a      	ldrh	r2, [r3, #12]
 80186be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186c0:	889b      	ldrh	r3, [r3, #4]
 80186c2:	b29b      	uxth	r3, r3
 80186c4:	429a      	cmp	r2, r3
 80186c6:	d006      	beq.n	80186d6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80186c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	633b      	str	r3, [r7, #48]	; 0x30
 80186ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d1e6      	bne.n	80186a2 <ip4_reass+0xb6>
 80186d4:	e000      	b.n	80186d8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80186d6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80186d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d109      	bne.n	80186f2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80186de:	8c3b      	ldrh	r3, [r7, #32]
 80186e0:	4619      	mov	r1, r3
 80186e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80186e4:	f7ff fdb0 	bl	8018248 <ip_reass_enqueue_new_datagram>
 80186e8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80186ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d11c      	bne.n	801872a <ip4_reass+0x13e>
      goto nullreturn;
 80186f0:	e109      	b.n	8018906 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80186f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f4:	88db      	ldrh	r3, [r3, #6]
 80186f6:	b29b      	uxth	r3, r3
 80186f8:	4618      	mov	r0, r3
 80186fa:	f7f3 faf1 	bl	800bce0 <lwip_htons>
 80186fe:	4603      	mov	r3, r0
 8018700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018704:	2b00      	cmp	r3, #0
 8018706:	d110      	bne.n	801872a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801870a:	89db      	ldrh	r3, [r3, #14]
 801870c:	4618      	mov	r0, r3
 801870e:	f7f3 fae7 	bl	800bce0 <lwip_htons>
 8018712:	4603      	mov	r3, r0
 8018714:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018718:	2b00      	cmp	r3, #0
 801871a:	d006      	beq.n	801872a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801871c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801871e:	3308      	adds	r3, #8
 8018720:	2214      	movs	r2, #20
 8018722:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018724:	4618      	mov	r0, r3
 8018726:	f002 fa57 	bl	801abd8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801872c:	88db      	ldrh	r3, [r3, #6]
 801872e:	b29b      	uxth	r3, r3
 8018730:	f003 0320 	and.w	r3, r3, #32
 8018734:	2b00      	cmp	r3, #0
 8018736:	bf0c      	ite	eq
 8018738:	2301      	moveq	r3, #1
 801873a:	2300      	movne	r3, #0
 801873c:	b2db      	uxtb	r3, r3
 801873e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018740:	69fb      	ldr	r3, [r7, #28]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d00e      	beq.n	8018764 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018746:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018748:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801874a:	4413      	add	r3, r2
 801874c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801874e:	8b7a      	ldrh	r2, [r7, #26]
 8018750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018752:	429a      	cmp	r2, r3
 8018754:	f0c0 80a0 	bcc.w	8018898 <ip4_reass+0x2ac>
 8018758:	8b7b      	ldrh	r3, [r7, #26]
 801875a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801875e:	4293      	cmp	r3, r2
 8018760:	f200 809a 	bhi.w	8018898 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018764:	69fa      	ldr	r2, [r7, #28]
 8018766:	6879      	ldr	r1, [r7, #4]
 8018768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801876a:	f7ff fdd5 	bl	8018318 <ip_reass_chain_frag_into_datagram_and_validate>
 801876e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018770:	697b      	ldr	r3, [r7, #20]
 8018772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018776:	f000 8091 	beq.w	801889c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801877a:	4b5b      	ldr	r3, [pc, #364]	; (80188e8 <ip4_reass+0x2fc>)
 801877c:	881a      	ldrh	r2, [r3, #0]
 801877e:	8c3b      	ldrh	r3, [r7, #32]
 8018780:	4413      	add	r3, r2
 8018782:	b29a      	uxth	r2, r3
 8018784:	4b58      	ldr	r3, [pc, #352]	; (80188e8 <ip4_reass+0x2fc>)
 8018786:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018788:	69fb      	ldr	r3, [r7, #28]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d00d      	beq.n	80187aa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801878e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018792:	4413      	add	r3, r2
 8018794:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018798:	8a7a      	ldrh	r2, [r7, #18]
 801879a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801879e:	7f9b      	ldrb	r3, [r3, #30]
 80187a0:	f043 0301 	orr.w	r3, r3, #1
 80187a4:	b2da      	uxtb	r2, r3
 80187a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187a8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80187aa:	697b      	ldr	r3, [r7, #20]
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	d171      	bne.n	8018894 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80187b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187b2:	8b9b      	ldrh	r3, [r3, #28]
 80187b4:	3314      	adds	r3, #20
 80187b6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80187b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	685b      	ldr	r3, [r3, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80187c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187c4:	685b      	ldr	r3, [r3, #4]
 80187c6:	685b      	ldr	r3, [r3, #4]
 80187c8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80187ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187cc:	3308      	adds	r3, #8
 80187ce:	2214      	movs	r2, #20
 80187d0:	4619      	mov	r1, r3
 80187d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187d4:	f002 fa00 	bl	801abd8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80187d8:	8a3b      	ldrh	r3, [r7, #16]
 80187da:	4618      	mov	r0, r3
 80187dc:	f7f3 fa80 	bl	800bce0 <lwip_htons>
 80187e0:	4603      	mov	r3, r0
 80187e2:	461a      	mov	r2, r3
 80187e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80187e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ea:	2200      	movs	r2, #0
 80187ec:	719a      	strb	r2, [r3, #6]
 80187ee:	2200      	movs	r2, #0
 80187f0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80187f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f4:	2200      	movs	r2, #0
 80187f6:	729a      	strb	r2, [r3, #10]
 80187f8:	2200      	movs	r2, #0
 80187fa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80187fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fe:	685b      	ldr	r3, [r3, #4]
 8018800:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018802:	e00d      	b.n	8018820 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018806:	685b      	ldr	r3, [r3, #4]
 8018808:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801880a:	2114      	movs	r1, #20
 801880c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801880e:	f7f4 fe17 	bl	800d440 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018812:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018814:	6878      	ldr	r0, [r7, #4]
 8018816:	f7f4 ff99 	bl	800d74c <pbuf_cat>
      r = iprh->next_pbuf;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018822:	2b00      	cmp	r3, #0
 8018824:	d1ee      	bne.n	8018804 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018826:	4b31      	ldr	r3, [pc, #196]	; (80188ec <ip4_reass+0x300>)
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801882c:	429a      	cmp	r2, r3
 801882e:	d102      	bne.n	8018836 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018830:	2300      	movs	r3, #0
 8018832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018834:	e010      	b.n	8018858 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018836:	4b2d      	ldr	r3, [pc, #180]	; (80188ec <ip4_reass+0x300>)
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801883c:	e007      	b.n	801884e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018844:	429a      	cmp	r2, r3
 8018846:	d006      	beq.n	8018856 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018850:	2b00      	cmp	r3, #0
 8018852:	d1f4      	bne.n	801883e <ip4_reass+0x252>
 8018854:	e000      	b.n	8018858 <ip4_reass+0x26c>
          break;
 8018856:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018858:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801885a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801885c:	f7ff fd2e 	bl	80182bc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018860:	6878      	ldr	r0, [r7, #4]
 8018862:	f7f4 ff33 	bl	800d6cc <pbuf_clen>
 8018866:	4603      	mov	r3, r0
 8018868:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801886a:	4b1f      	ldr	r3, [pc, #124]	; (80188e8 <ip4_reass+0x2fc>)
 801886c:	881b      	ldrh	r3, [r3, #0]
 801886e:	8c3a      	ldrh	r2, [r7, #32]
 8018870:	429a      	cmp	r2, r3
 8018872:	d906      	bls.n	8018882 <ip4_reass+0x296>
 8018874:	4b1e      	ldr	r3, [pc, #120]	; (80188f0 <ip4_reass+0x304>)
 8018876:	f240 229b 	movw	r2, #667	; 0x29b
 801887a:	491e      	ldr	r1, [pc, #120]	; (80188f4 <ip4_reass+0x308>)
 801887c:	481e      	ldr	r0, [pc, #120]	; (80188f8 <ip4_reass+0x30c>)
 801887e:	f002 fd73 	bl	801b368 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018882:	4b19      	ldr	r3, [pc, #100]	; (80188e8 <ip4_reass+0x2fc>)
 8018884:	881a      	ldrh	r2, [r3, #0]
 8018886:	8c3b      	ldrh	r3, [r7, #32]
 8018888:	1ad3      	subs	r3, r2, r3
 801888a:	b29a      	uxth	r2, r3
 801888c:	4b16      	ldr	r3, [pc, #88]	; (80188e8 <ip4_reass+0x2fc>)
 801888e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	e03c      	b.n	801890e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018894:	2300      	movs	r3, #0
 8018896:	e03a      	b.n	801890e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8018898:	bf00      	nop
 801889a:	e000      	b.n	801889e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801889c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d106      	bne.n	80188b2 <ip4_reass+0x2c6>
 80188a4:	4b12      	ldr	r3, [pc, #72]	; (80188f0 <ip4_reass+0x304>)
 80188a6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80188aa:	4914      	ldr	r1, [pc, #80]	; (80188fc <ip4_reass+0x310>)
 80188ac:	4812      	ldr	r0, [pc, #72]	; (80188f8 <ip4_reass+0x30c>)
 80188ae:	f002 fd5b 	bl	801b368 <iprintf>
  if (ipr->p == NULL) {
 80188b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b4:	685b      	ldr	r3, [r3, #4]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d124      	bne.n	8018904 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80188ba:	4b0c      	ldr	r3, [pc, #48]	; (80188ec <ip4_reass+0x300>)
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d006      	beq.n	80188d2 <ip4_reass+0x2e6>
 80188c4:	4b0a      	ldr	r3, [pc, #40]	; (80188f0 <ip4_reass+0x304>)
 80188c6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80188ca:	490d      	ldr	r1, [pc, #52]	; (8018900 <ip4_reass+0x314>)
 80188cc:	480a      	ldr	r0, [pc, #40]	; (80188f8 <ip4_reass+0x30c>)
 80188ce:	f002 fd4b 	bl	801b368 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80188d2:	2100      	movs	r1, #0
 80188d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80188d6:	f7ff fcf1 	bl	80182bc <ip_reass_dequeue_datagram>
 80188da:	e014      	b.n	8018906 <ip4_reass+0x31a>
    goto nullreturn;
 80188dc:	bf00      	nop
 80188de:	e012      	b.n	8018906 <ip4_reass+0x31a>
    goto nullreturn;
 80188e0:	bf00      	nop
 80188e2:	e010      	b.n	8018906 <ip4_reass+0x31a>
      goto nullreturn;
 80188e4:	bf00      	nop
 80188e6:	e00e      	b.n	8018906 <ip4_reass+0x31a>
 80188e8:	200108b8 	.word	0x200108b8
 80188ec:	200108b4 	.word	0x200108b4
 80188f0:	0801f9c4 	.word	0x0801f9c4
 80188f4:	0801fb34 	.word	0x0801fb34
 80188f8:	0801fa0c 	.word	0x0801fa0c
 80188fc:	0801fb50 	.word	0x0801fb50
 8018900:	0801fb5c 	.word	0x0801fb5c
  }

nullreturn:
 8018904:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f7f4 fe52 	bl	800d5b0 <pbuf_free>
  return NULL;
 801890c:	2300      	movs	r3, #0
}
 801890e:	4618      	mov	r0, r3
 8018910:	3738      	adds	r7, #56	; 0x38
 8018912:	46bd      	mov	sp, r7
 8018914:	bd80      	pop	{r7, pc}
 8018916:	bf00      	nop

08018918 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018918:	b580      	push	{r7, lr}
 801891a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801891c:	2005      	movs	r0, #5
 801891e:	f7f3 feb7 	bl	800c690 <memp_malloc>
 8018922:	4603      	mov	r3, r0
}
 8018924:	4618      	mov	r0, r3
 8018926:	bd80      	pop	{r7, pc}

08018928 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b082      	sub	sp, #8
 801892c:	af00      	add	r7, sp, #0
 801892e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d106      	bne.n	8018944 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018936:	4b07      	ldr	r3, [pc, #28]	; (8018954 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018938:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801893c:	4906      	ldr	r1, [pc, #24]	; (8018958 <ip_frag_free_pbuf_custom_ref+0x30>)
 801893e:	4807      	ldr	r0, [pc, #28]	; (801895c <ip_frag_free_pbuf_custom_ref+0x34>)
 8018940:	f002 fd12 	bl	801b368 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018944:	6879      	ldr	r1, [r7, #4]
 8018946:	2005      	movs	r0, #5
 8018948:	f7f3 ff18 	bl	800c77c <memp_free>
}
 801894c:	bf00      	nop
 801894e:	3708      	adds	r7, #8
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	0801f9c4 	.word	0x0801f9c4
 8018958:	0801fb7c 	.word	0x0801fb7c
 801895c:	0801fa0c 	.word	0x0801fa0c

08018960 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018960:	b580      	push	{r7, lr}
 8018962:	b084      	sub	sp, #16
 8018964:	af00      	add	r7, sp, #0
 8018966:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d106      	bne.n	8018980 <ipfrag_free_pbuf_custom+0x20>
 8018972:	4b11      	ldr	r3, [pc, #68]	; (80189b8 <ipfrag_free_pbuf_custom+0x58>)
 8018974:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018978:	4910      	ldr	r1, [pc, #64]	; (80189bc <ipfrag_free_pbuf_custom+0x5c>)
 801897a:	4811      	ldr	r0, [pc, #68]	; (80189c0 <ipfrag_free_pbuf_custom+0x60>)
 801897c:	f002 fcf4 	bl	801b368 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018980:	68fa      	ldr	r2, [r7, #12]
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	429a      	cmp	r2, r3
 8018986:	d006      	beq.n	8018996 <ipfrag_free_pbuf_custom+0x36>
 8018988:	4b0b      	ldr	r3, [pc, #44]	; (80189b8 <ipfrag_free_pbuf_custom+0x58>)
 801898a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801898e:	490d      	ldr	r1, [pc, #52]	; (80189c4 <ipfrag_free_pbuf_custom+0x64>)
 8018990:	480b      	ldr	r0, [pc, #44]	; (80189c0 <ipfrag_free_pbuf_custom+0x60>)
 8018992:	f002 fce9 	bl	801b368 <iprintf>
  if (pcr->original != NULL) {
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	695b      	ldr	r3, [r3, #20]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d004      	beq.n	80189a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	695b      	ldr	r3, [r3, #20]
 80189a2:	4618      	mov	r0, r3
 80189a4:	f7f4 fe04 	bl	800d5b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80189a8:	68f8      	ldr	r0, [r7, #12]
 80189aa:	f7ff ffbd 	bl	8018928 <ip_frag_free_pbuf_custom_ref>
}
 80189ae:	bf00      	nop
 80189b0:	3710      	adds	r7, #16
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bd80      	pop	{r7, pc}
 80189b6:	bf00      	nop
 80189b8:	0801f9c4 	.word	0x0801f9c4
 80189bc:	0801fb88 	.word	0x0801fb88
 80189c0:	0801fa0c 	.word	0x0801fa0c
 80189c4:	0801fb94 	.word	0x0801fb94

080189c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b094      	sub	sp, #80	; 0x50
 80189cc:	af02      	add	r7, sp, #8
 80189ce:	60f8      	str	r0, [r7, #12]
 80189d0:	60b9      	str	r1, [r7, #8]
 80189d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80189d4:	2300      	movs	r3, #0
 80189d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80189da:	68bb      	ldr	r3, [r7, #8]
 80189dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80189de:	3b14      	subs	r3, #20
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	da00      	bge.n	80189e6 <ip4_frag+0x1e>
 80189e4:	3307      	adds	r3, #7
 80189e6:	10db      	asrs	r3, r3, #3
 80189e8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80189ea:	2314      	movs	r3, #20
 80189ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	685b      	ldr	r3, [r3, #4]
 80189f2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80189f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80189f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189fa:	781b      	ldrb	r3, [r3, #0]
 80189fc:	f003 030f 	and.w	r3, r3, #15
 8018a00:	b2db      	uxtb	r3, r3
 8018a02:	009b      	lsls	r3, r3, #2
 8018a04:	b2db      	uxtb	r3, r3
 8018a06:	2b14      	cmp	r3, #20
 8018a08:	d002      	beq.n	8018a10 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018a0a:	f06f 0305 	mvn.w	r3, #5
 8018a0e:	e110      	b.n	8018c32 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	895b      	ldrh	r3, [r3, #10]
 8018a14:	2b13      	cmp	r3, #19
 8018a16:	d809      	bhi.n	8018a2c <ip4_frag+0x64>
 8018a18:	4b88      	ldr	r3, [pc, #544]	; (8018c3c <ip4_frag+0x274>)
 8018a1a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018a1e:	4988      	ldr	r1, [pc, #544]	; (8018c40 <ip4_frag+0x278>)
 8018a20:	4888      	ldr	r0, [pc, #544]	; (8018c44 <ip4_frag+0x27c>)
 8018a22:	f002 fca1 	bl	801b368 <iprintf>
 8018a26:	f06f 0305 	mvn.w	r3, #5
 8018a2a:	e102      	b.n	8018c32 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a2e:	88db      	ldrh	r3, [r3, #6]
 8018a30:	b29b      	uxth	r3, r3
 8018a32:	4618      	mov	r0, r3
 8018a34:	f7f3 f954 	bl	800bce0 <lwip_htons>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018a46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018a4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	891b      	ldrh	r3, [r3, #8]
 8018a52:	3b14      	subs	r3, #20
 8018a54:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018a58:	e0e1      	b.n	8018c1e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018a5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a5c:	00db      	lsls	r3, r3, #3
 8018a5e:	b29b      	uxth	r3, r3
 8018a60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a64:	4293      	cmp	r3, r2
 8018a66:	bf28      	it	cs
 8018a68:	4613      	movcs	r3, r2
 8018a6a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018a6c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a70:	2114      	movs	r1, #20
 8018a72:	200e      	movs	r0, #14
 8018a74:	f7f4 fa86 	bl	800cf84 <pbuf_alloc>
 8018a78:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	f000 80d5 	beq.w	8018c2c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a84:	895b      	ldrh	r3, [r3, #10]
 8018a86:	2b13      	cmp	r3, #19
 8018a88:	d806      	bhi.n	8018a98 <ip4_frag+0xd0>
 8018a8a:	4b6c      	ldr	r3, [pc, #432]	; (8018c3c <ip4_frag+0x274>)
 8018a8c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018a90:	496d      	ldr	r1, [pc, #436]	; (8018c48 <ip4_frag+0x280>)
 8018a92:	486c      	ldr	r0, [pc, #432]	; (8018c44 <ip4_frag+0x27c>)
 8018a94:	f002 fc68 	bl	801b368 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	2214      	movs	r2, #20
 8018a9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f002 f899 	bl	801abd8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa8:	685b      	ldr	r3, [r3, #4]
 8018aaa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018aac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018aae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018ab2:	e064      	b.n	8018b7e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	895a      	ldrh	r2, [r3, #10]
 8018ab8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018aba:	1ad3      	subs	r3, r2, r3
 8018abc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	895b      	ldrh	r3, [r3, #10]
 8018ac2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018ac4:	429a      	cmp	r2, r3
 8018ac6:	d906      	bls.n	8018ad6 <ip4_frag+0x10e>
 8018ac8:	4b5c      	ldr	r3, [pc, #368]	; (8018c3c <ip4_frag+0x274>)
 8018aca:	f240 322d 	movw	r2, #813	; 0x32d
 8018ace:	495f      	ldr	r1, [pc, #380]	; (8018c4c <ip4_frag+0x284>)
 8018ad0:	485c      	ldr	r0, [pc, #368]	; (8018c44 <ip4_frag+0x27c>)
 8018ad2:	f002 fc49 	bl	801b368 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018ad6:	8bfa      	ldrh	r2, [r7, #30]
 8018ad8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018adc:	4293      	cmp	r3, r2
 8018ade:	bf28      	it	cs
 8018ae0:	4613      	movcs	r3, r2
 8018ae2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018ae6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d105      	bne.n	8018afa <ip4_frag+0x132>
        poff = 0;
 8018aee:	2300      	movs	r3, #0
 8018af0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	60fb      	str	r3, [r7, #12]
        continue;
 8018af8:	e041      	b.n	8018b7e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018afa:	f7ff ff0d 	bl	8018918 <ip_frag_alloc_pbuf_custom_ref>
 8018afe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018b00:	69bb      	ldr	r3, [r7, #24]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d103      	bne.n	8018b0e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b08:	f7f4 fd52 	bl	800d5b0 <pbuf_free>
        goto memerr;
 8018b0c:	e08f      	b.n	8018c2e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b0e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018b14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018b16:	4413      	add	r3, r2
 8018b18:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018b1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018b20:	9201      	str	r2, [sp, #4]
 8018b22:	9300      	str	r3, [sp, #0]
 8018b24:	4603      	mov	r3, r0
 8018b26:	2241      	movs	r2, #65	; 0x41
 8018b28:	2000      	movs	r0, #0
 8018b2a:	f7f4 fb55 	bl	800d1d8 <pbuf_alloced_custom>
 8018b2e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018b30:	697b      	ldr	r3, [r7, #20]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d106      	bne.n	8018b44 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018b36:	69b8      	ldr	r0, [r7, #24]
 8018b38:	f7ff fef6 	bl	8018928 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b3e:	f7f4 fd37 	bl	800d5b0 <pbuf_free>
        goto memerr;
 8018b42:	e074      	b.n	8018c2e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018b44:	68f8      	ldr	r0, [r7, #12]
 8018b46:	f7f4 fdd9 	bl	800d6fc <pbuf_ref>
      pcr->original = p;
 8018b4a:	69bb      	ldr	r3, [r7, #24]
 8018b4c:	68fa      	ldr	r2, [r7, #12]
 8018b4e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018b50:	69bb      	ldr	r3, [r7, #24]
 8018b52:	4a3f      	ldr	r2, [pc, #252]	; (8018c50 <ip4_frag+0x288>)
 8018b54:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018b56:	6979      	ldr	r1, [r7, #20]
 8018b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b5a:	f7f4 fdf7 	bl	800d74c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018b5e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018b62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b66:	1ad3      	subs	r3, r2, r3
 8018b68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018b6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d004      	beq.n	8018b7e <ip4_frag+0x1b6>
        poff = 0;
 8018b74:	2300      	movs	r3, #0
 8018b76:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018b7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d196      	bne.n	8018ab4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018b86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018b88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b8c:	4413      	add	r3, r2
 8018b8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018b90:	68bb      	ldr	r3, [r7, #8]
 8018b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018b94:	f1a3 0213 	sub.w	r2, r3, #19
 8018b98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018b9c:	429a      	cmp	r2, r3
 8018b9e:	bfcc      	ite	gt
 8018ba0:	2301      	movgt	r3, #1
 8018ba2:	2300      	movle	r3, #0
 8018ba4:	b2db      	uxtb	r3, r3
 8018ba6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018bb0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018bb2:	6a3b      	ldr	r3, [r7, #32]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d002      	beq.n	8018bbe <ip4_frag+0x1f6>
 8018bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d003      	beq.n	8018bc6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018bbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018bc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018bc4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018bc6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018bc8:	4618      	mov	r0, r3
 8018bca:	f7f3 f889 	bl	800bce0 <lwip_htons>
 8018bce:	4603      	mov	r3, r0
 8018bd0:	461a      	mov	r2, r3
 8018bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bd4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018bd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018bd8:	3314      	adds	r3, #20
 8018bda:	b29b      	uxth	r3, r3
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7f3 f87f 	bl	800bce0 <lwip_htons>
 8018be2:	4603      	mov	r3, r0
 8018be4:	461a      	mov	r2, r3
 8018be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018be8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bec:	2200      	movs	r2, #0
 8018bee:	729a      	strb	r2, [r3, #10]
 8018bf0:	2200      	movs	r2, #0
 8018bf2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018bf4:	68bb      	ldr	r3, [r7, #8]
 8018bf6:	695b      	ldr	r3, [r3, #20]
 8018bf8:	687a      	ldr	r2, [r7, #4]
 8018bfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018bfc:	68b8      	ldr	r0, [r7, #8]
 8018bfe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c02:	f7f4 fcd5 	bl	800d5b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018c06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018c0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018c0c:	1ad3      	subs	r3, r2, r3
 8018c0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018c12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018c16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018c18:	4413      	add	r3, r2
 8018c1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018c1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	f47f af19 	bne.w	8018a5a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	e002      	b.n	8018c32 <ip4_frag+0x26a>
      goto memerr;
 8018c2c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	3748      	adds	r7, #72	; 0x48
 8018c36:	46bd      	mov	sp, r7
 8018c38:	bd80      	pop	{r7, pc}
 8018c3a:	bf00      	nop
 8018c3c:	0801f9c4 	.word	0x0801f9c4
 8018c40:	0801fba0 	.word	0x0801fba0
 8018c44:	0801fa0c 	.word	0x0801fa0c
 8018c48:	0801fbbc 	.word	0x0801fbbc
 8018c4c:	0801fbdc 	.word	0x0801fbdc
 8018c50:	08018961 	.word	0x08018961

08018c54 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018c54:	b580      	push	{r7, lr}
 8018c56:	b086      	sub	sp, #24
 8018c58:	af00      	add	r7, sp, #0
 8018c5a:	6078      	str	r0, [r7, #4]
 8018c5c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018c5e:	230e      	movs	r3, #14
 8018c60:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	895b      	ldrh	r3, [r3, #10]
 8018c66:	2b0e      	cmp	r3, #14
 8018c68:	d96e      	bls.n	8018d48 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	7bdb      	ldrb	r3, [r3, #15]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d106      	bne.n	8018c80 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018c78:	3301      	adds	r3, #1
 8018c7a:	b2da      	uxtb	r2, r3
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	685b      	ldr	r3, [r3, #4]
 8018c84:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018c86:	693b      	ldr	r3, [r7, #16]
 8018c88:	7b1a      	ldrb	r2, [r3, #12]
 8018c8a:	7b5b      	ldrb	r3, [r3, #13]
 8018c8c:	021b      	lsls	r3, r3, #8
 8018c8e:	4313      	orrs	r3, r2
 8018c90:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018c92:	693b      	ldr	r3, [r7, #16]
 8018c94:	781b      	ldrb	r3, [r3, #0]
 8018c96:	f003 0301 	and.w	r3, r3, #1
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d023      	beq.n	8018ce6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018c9e:	693b      	ldr	r3, [r7, #16]
 8018ca0:	781b      	ldrb	r3, [r3, #0]
 8018ca2:	2b01      	cmp	r3, #1
 8018ca4:	d10f      	bne.n	8018cc6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018ca6:	693b      	ldr	r3, [r7, #16]
 8018ca8:	785b      	ldrb	r3, [r3, #1]
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d11b      	bne.n	8018ce6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018cae:	693b      	ldr	r3, [r7, #16]
 8018cb0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018cb2:	2b5e      	cmp	r3, #94	; 0x5e
 8018cb4:	d117      	bne.n	8018ce6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	7b5b      	ldrb	r3, [r3, #13]
 8018cba:	f043 0310 	orr.w	r3, r3, #16
 8018cbe:	b2da      	uxtb	r2, r3
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	735a      	strb	r2, [r3, #13]
 8018cc4:	e00f      	b.n	8018ce6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018cc6:	693b      	ldr	r3, [r7, #16]
 8018cc8:	2206      	movs	r2, #6
 8018cca:	4928      	ldr	r1, [pc, #160]	; (8018d6c <ethernet_input+0x118>)
 8018ccc:	4618      	mov	r0, r3
 8018cce:	f001 ff75 	bl	801abbc <memcmp>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d106      	bne.n	8018ce6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	7b5b      	ldrb	r3, [r3, #13]
 8018cdc:	f043 0308 	orr.w	r3, r3, #8
 8018ce0:	b2da      	uxtb	r2, r3
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018ce6:	89fb      	ldrh	r3, [r7, #14]
 8018ce8:	2b08      	cmp	r3, #8
 8018cea:	d003      	beq.n	8018cf4 <ethernet_input+0xa0>
 8018cec:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018cf0:	d014      	beq.n	8018d1c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018cf2:	e032      	b.n	8018d5a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018cfa:	f003 0308 	and.w	r3, r3, #8
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d024      	beq.n	8018d4c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018d02:	8afb      	ldrh	r3, [r7, #22]
 8018d04:	4619      	mov	r1, r3
 8018d06:	6878      	ldr	r0, [r7, #4]
 8018d08:	f7f4 fb9a 	bl	800d440 <pbuf_remove_header>
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d11e      	bne.n	8018d50 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018d12:	6839      	ldr	r1, [r7, #0]
 8018d14:	6878      	ldr	r0, [r7, #4]
 8018d16:	f7fe fe87 	bl	8017a28 <ip4_input>
      break;
 8018d1a:	e013      	b.n	8018d44 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018d1c:	683b      	ldr	r3, [r7, #0]
 8018d1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018d22:	f003 0308 	and.w	r3, r3, #8
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d014      	beq.n	8018d54 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018d2a:	8afb      	ldrh	r3, [r7, #22]
 8018d2c:	4619      	mov	r1, r3
 8018d2e:	6878      	ldr	r0, [r7, #4]
 8018d30:	f7f4 fb86 	bl	800d440 <pbuf_remove_header>
 8018d34:	4603      	mov	r3, r0
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d10e      	bne.n	8018d58 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018d3a:	6839      	ldr	r1, [r7, #0]
 8018d3c:	6878      	ldr	r0, [r7, #4]
 8018d3e:	f7fe f823 	bl	8016d88 <etharp_input>
      break;
 8018d42:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018d44:	2300      	movs	r3, #0
 8018d46:	e00c      	b.n	8018d62 <ethernet_input+0x10e>
    goto free_and_return;
 8018d48:	bf00      	nop
 8018d4a:	e006      	b.n	8018d5a <ethernet_input+0x106>
        goto free_and_return;
 8018d4c:	bf00      	nop
 8018d4e:	e004      	b.n	8018d5a <ethernet_input+0x106>
        goto free_and_return;
 8018d50:	bf00      	nop
 8018d52:	e002      	b.n	8018d5a <ethernet_input+0x106>
        goto free_and_return;
 8018d54:	bf00      	nop
 8018d56:	e000      	b.n	8018d5a <ethernet_input+0x106>
        goto free_and_return;
 8018d58:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018d5a:	6878      	ldr	r0, [r7, #4]
 8018d5c:	f7f4 fc28 	bl	800d5b0 <pbuf_free>
  return ERR_OK;
 8018d60:	2300      	movs	r3, #0
}
 8018d62:	4618      	mov	r0, r3
 8018d64:	3718      	adds	r7, #24
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}
 8018d6a:	bf00      	nop
 8018d6c:	0801ffdc 	.word	0x0801ffdc

08018d70 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b086      	sub	sp, #24
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	60f8      	str	r0, [r7, #12]
 8018d78:	60b9      	str	r1, [r7, #8]
 8018d7a:	607a      	str	r2, [r7, #4]
 8018d7c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018d7e:	8c3b      	ldrh	r3, [r7, #32]
 8018d80:	4618      	mov	r0, r3
 8018d82:	f7f2 ffad 	bl	800bce0 <lwip_htons>
 8018d86:	4603      	mov	r3, r0
 8018d88:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018d8a:	210e      	movs	r1, #14
 8018d8c:	68b8      	ldr	r0, [r7, #8]
 8018d8e:	f7f4 fb47 	bl	800d420 <pbuf_add_header>
 8018d92:	4603      	mov	r3, r0
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d125      	bne.n	8018de4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018d98:	68bb      	ldr	r3, [r7, #8]
 8018d9a:	685b      	ldr	r3, [r3, #4]
 8018d9c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018d9e:	693b      	ldr	r3, [r7, #16]
 8018da0:	8afa      	ldrh	r2, [r7, #22]
 8018da2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	2206      	movs	r2, #6
 8018da8:	6839      	ldr	r1, [r7, #0]
 8018daa:	4618      	mov	r0, r3
 8018dac:	f001 ff14 	bl	801abd8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018db0:	693b      	ldr	r3, [r7, #16]
 8018db2:	3306      	adds	r3, #6
 8018db4:	2206      	movs	r2, #6
 8018db6:	6879      	ldr	r1, [r7, #4]
 8018db8:	4618      	mov	r0, r3
 8018dba:	f001 ff0d 	bl	801abd8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018dc4:	2b06      	cmp	r3, #6
 8018dc6:	d006      	beq.n	8018dd6 <ethernet_output+0x66>
 8018dc8:	4b0a      	ldr	r3, [pc, #40]	; (8018df4 <ethernet_output+0x84>)
 8018dca:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018dce:	490a      	ldr	r1, [pc, #40]	; (8018df8 <ethernet_output+0x88>)
 8018dd0:	480a      	ldr	r0, [pc, #40]	; (8018dfc <ethernet_output+0x8c>)
 8018dd2:	f002 fac9 	bl	801b368 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	699b      	ldr	r3, [r3, #24]
 8018dda:	68b9      	ldr	r1, [r7, #8]
 8018ddc:	68f8      	ldr	r0, [r7, #12]
 8018dde:	4798      	blx	r3
 8018de0:	4603      	mov	r3, r0
 8018de2:	e002      	b.n	8018dea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018de4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018de6:	f06f 0301 	mvn.w	r3, #1
}
 8018dea:	4618      	mov	r0, r3
 8018dec:	3718      	adds	r7, #24
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}
 8018df2:	bf00      	nop
 8018df4:	0801fbec 	.word	0x0801fbec
 8018df8:	0801fc24 	.word	0x0801fc24
 8018dfc:	0801fc58 	.word	0x0801fc58

08018e00 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b086      	sub	sp, #24
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
 8018e08:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018e0a:	683b      	ldr	r3, [r7, #0]
 8018e0c:	60bb      	str	r3, [r7, #8]
 8018e0e:	2304      	movs	r3, #4
 8018e10:	60fb      	str	r3, [r7, #12]
 8018e12:	2300      	movs	r3, #0
 8018e14:	613b      	str	r3, [r7, #16]
 8018e16:	2300      	movs	r3, #0
 8018e18:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018e1a:	f107 0308 	add.w	r3, r7, #8
 8018e1e:	2100      	movs	r1, #0
 8018e20:	4618      	mov	r0, r3
 8018e22:	f7ec f8da 	bl	8004fda <osMessageCreate>
 8018e26:	4602      	mov	r2, r0
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d102      	bne.n	8018e3a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018e34:	f04f 33ff 	mov.w	r3, #4294967295
 8018e38:	e000      	b.n	8018e3c <sys_mbox_new+0x3c>

  return ERR_OK;
 8018e3a:	2300      	movs	r3, #0
}
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	3718      	adds	r7, #24
 8018e40:	46bd      	mov	sp, r7
 8018e42:	bd80      	pop	{r7, pc}

08018e44 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b082      	sub	sp, #8
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	4618      	mov	r0, r3
 8018e52:	f7ec f99f 	bl	8005194 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	f7ec f9b0 	bl	80051c0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018e60:	bf00      	nop
 8018e62:	3708      	adds	r7, #8
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}

08018e68 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b084      	sub	sp, #16
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
 8018e70:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	6839      	ldr	r1, [r7, #0]
 8018e78:	2200      	movs	r2, #0
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	f7ec f8d6 	bl	800502c <osMessagePut>
 8018e80:	4603      	mov	r3, r0
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d102      	bne.n	8018e8c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018e86:	2300      	movs	r3, #0
 8018e88:	73fb      	strb	r3, [r7, #15]
 8018e8a:	e001      	b.n	8018e90 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018e8c:	23ff      	movs	r3, #255	; 0xff
 8018e8e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018e94:	4618      	mov	r0, r3
 8018e96:	3710      	adds	r7, #16
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	bd80      	pop	{r7, pc}

08018e9c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b08c      	sub	sp, #48	; 0x30
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	61f8      	str	r0, [r7, #28]
 8018ea4:	61b9      	str	r1, [r7, #24]
 8018ea6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018ea8:	f7eb fec2 	bl	8004c30 <osKernelSysTick>
 8018eac:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018eae:	697b      	ldr	r3, [r7, #20]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d017      	beq.n	8018ee4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018eb4:	69fb      	ldr	r3, [r7, #28]
 8018eb6:	6819      	ldr	r1, [r3, #0]
 8018eb8:	f107 0320 	add.w	r3, r7, #32
 8018ebc:	697a      	ldr	r2, [r7, #20]
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7ec f8f4 	bl	80050ac <osMessageGet>

    if(event.status == osEventMessage)
 8018ec4:	6a3b      	ldr	r3, [r7, #32]
 8018ec6:	2b10      	cmp	r3, #16
 8018ec8:	d109      	bne.n	8018ede <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ecc:	461a      	mov	r2, r3
 8018ece:	69bb      	ldr	r3, [r7, #24]
 8018ed0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018ed2:	f7eb fead 	bl	8004c30 <osKernelSysTick>
 8018ed6:	4602      	mov	r2, r0
 8018ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eda:	1ad3      	subs	r3, r2, r3
 8018edc:	e019      	b.n	8018f12 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018ede:	f04f 33ff 	mov.w	r3, #4294967295
 8018ee2:	e016      	b.n	8018f12 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018ee4:	69fb      	ldr	r3, [r7, #28]
 8018ee6:	6819      	ldr	r1, [r3, #0]
 8018ee8:	463b      	mov	r3, r7
 8018eea:	f04f 32ff 	mov.w	r2, #4294967295
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f7ec f8dc 	bl	80050ac <osMessageGet>
 8018ef4:	f107 0320 	add.w	r3, r7, #32
 8018ef8:	463a      	mov	r2, r7
 8018efa:	ca07      	ldmia	r2, {r0, r1, r2}
 8018efc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f02:	461a      	mov	r2, r3
 8018f04:	69bb      	ldr	r3, [r7, #24]
 8018f06:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018f08:	f7eb fe92 	bl	8004c30 <osKernelSysTick>
 8018f0c:	4602      	mov	r2, r0
 8018f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f10:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018f12:	4618      	mov	r0, r3
 8018f14:	3730      	adds	r7, #48	; 0x30
 8018f16:	46bd      	mov	sp, r7
 8018f18:	bd80      	pop	{r7, pc}

08018f1a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018f1a:	b580      	push	{r7, lr}
 8018f1c:	b086      	sub	sp, #24
 8018f1e:	af00      	add	r7, sp, #0
 8018f20:	6078      	str	r0, [r7, #4]
 8018f22:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	6819      	ldr	r1, [r3, #0]
 8018f28:	f107 030c 	add.w	r3, r7, #12
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f7ec f8bc 	bl	80050ac <osMessageGet>

  if(event.status == osEventMessage)
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	2b10      	cmp	r3, #16
 8018f38:	d105      	bne.n	8018f46 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018f3a:	693b      	ldr	r3, [r7, #16]
 8018f3c:	461a      	mov	r2, r3
 8018f3e:	683b      	ldr	r3, [r7, #0]
 8018f40:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018f42:	2300      	movs	r3, #0
 8018f44:	e001      	b.n	8018f4a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018f46:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	3718      	adds	r7, #24
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	bd80      	pop	{r7, pc}

08018f52 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018f52:	b480      	push	{r7}
 8018f54:	b083      	sub	sp, #12
 8018f56:	af00      	add	r7, sp, #0
 8018f58:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d101      	bne.n	8018f66 <sys_mbox_valid+0x14>
    return 0;
 8018f62:	2300      	movs	r3, #0
 8018f64:	e000      	b.n	8018f68 <sys_mbox_valid+0x16>
  else
    return 1;
 8018f66:	2301      	movs	r3, #1
}
 8018f68:	4618      	mov	r0, r3
 8018f6a:	370c      	adds	r7, #12
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f72:	4770      	bx	lr

08018f74 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018f74:	b480      	push	{r7}
 8018f76:	b083      	sub	sp, #12
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	2200      	movs	r2, #0
 8018f80:	601a      	str	r2, [r3, #0]
}
 8018f82:	bf00      	nop
 8018f84:	370c      	adds	r7, #12
 8018f86:	46bd      	mov	sp, r7
 8018f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f8c:	4770      	bx	lr

08018f8e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018f8e:	b580      	push	{r7, lr}
 8018f90:	b084      	sub	sp, #16
 8018f92:	af00      	add	r7, sp, #0
 8018f94:	6078      	str	r0, [r7, #4]
 8018f96:	460b      	mov	r3, r1
 8018f98:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	60bb      	str	r3, [r7, #8]
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018fa2:	f107 0308 	add.w	r3, r7, #8
 8018fa6:	2101      	movs	r1, #1
 8018fa8:	4618      	mov	r0, r3
 8018faa:	f7eb ff4d 	bl	8004e48 <osSemaphoreCreate>
 8018fae:	4602      	mov	r2, r0
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d102      	bne.n	8018fc2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8018fc0:	e009      	b.n	8018fd6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018fc2:	78fb      	ldrb	r3, [r7, #3]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d105      	bne.n	8018fd4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	2100      	movs	r1, #0
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f7eb ff6c 	bl	8004eac <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018fd4:	2300      	movs	r3, #0
}
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	3710      	adds	r7, #16
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}

08018fde <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018fde:	b580      	push	{r7, lr}
 8018fe0:	b084      	sub	sp, #16
 8018fe2:	af00      	add	r7, sp, #0
 8018fe4:	6078      	str	r0, [r7, #4]
 8018fe6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018fe8:	f7eb fe22 	bl	8004c30 <osKernelSysTick>
 8018fec:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d011      	beq.n	8019018 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	6839      	ldr	r1, [r7, #0]
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	f7eb ff56 	bl	8004eac <osSemaphoreWait>
 8019000:	4603      	mov	r3, r0
 8019002:	2b00      	cmp	r3, #0
 8019004:	d105      	bne.n	8019012 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8019006:	f7eb fe13 	bl	8004c30 <osKernelSysTick>
 801900a:	4602      	mov	r2, r0
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	1ad3      	subs	r3, r2, r3
 8019010:	e012      	b.n	8019038 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019012:	f04f 33ff 	mov.w	r3, #4294967295
 8019016:	e00f      	b.n	8019038 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8019018:	bf00      	nop
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	681b      	ldr	r3, [r3, #0]
 801901e:	f04f 31ff 	mov.w	r1, #4294967295
 8019022:	4618      	mov	r0, r3
 8019024:	f7eb ff42 	bl	8004eac <osSemaphoreWait>
 8019028:	4603      	mov	r3, r0
 801902a:	2b00      	cmp	r3, #0
 801902c:	d1f5      	bne.n	801901a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801902e:	f7eb fdff 	bl	8004c30 <osKernelSysTick>
 8019032:	4602      	mov	r2, r0
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019038:	4618      	mov	r0, r3
 801903a:	3710      	adds	r7, #16
 801903c:	46bd      	mov	sp, r7
 801903e:	bd80      	pop	{r7, pc}

08019040 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019040:	b580      	push	{r7, lr}
 8019042:	b082      	sub	sp, #8
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	4618      	mov	r0, r3
 801904e:	f7eb ff7b 	bl	8004f48 <osSemaphoreRelease>
}
 8019052:	bf00      	nop
 8019054:	3708      	adds	r7, #8
 8019056:	46bd      	mov	sp, r7
 8019058:	bd80      	pop	{r7, pc}

0801905a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801905a:	b580      	push	{r7, lr}
 801905c:	b082      	sub	sp, #8
 801905e:	af00      	add	r7, sp, #0
 8019060:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	4618      	mov	r0, r3
 8019068:	f7eb ffa4 	bl	8004fb4 <osSemaphoreDelete>
}
 801906c:	bf00      	nop
 801906e:	3708      	adds	r7, #8
 8019070:	46bd      	mov	sp, r7
 8019072:	bd80      	pop	{r7, pc}

08019074 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019074:	b480      	push	{r7}
 8019076:	b083      	sub	sp, #12
 8019078:	af00      	add	r7, sp, #0
 801907a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d101      	bne.n	8019088 <sys_sem_valid+0x14>
    return 0;
 8019084:	2300      	movs	r3, #0
 8019086:	e000      	b.n	801908a <sys_sem_valid+0x16>
  else
    return 1;
 8019088:	2301      	movs	r3, #1
}
 801908a:	4618      	mov	r0, r3
 801908c:	370c      	adds	r7, #12
 801908e:	46bd      	mov	sp, r7
 8019090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019094:	4770      	bx	lr

08019096 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019096:	b480      	push	{r7}
 8019098:	b083      	sub	sp, #12
 801909a:	af00      	add	r7, sp, #0
 801909c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	2200      	movs	r2, #0
 80190a2:	601a      	str	r2, [r3, #0]
}
 80190a4:	bf00      	nop
 80190a6:	370c      	adds	r7, #12
 80190a8:	46bd      	mov	sp, r7
 80190aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ae:	4770      	bx	lr

080190b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80190b0:	b580      	push	{r7, lr}
 80190b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80190b4:	4803      	ldr	r0, [pc, #12]	; (80190c4 <sys_init+0x14>)
 80190b6:	f7eb fe2b 	bl	8004d10 <osMutexCreate>
 80190ba:	4603      	mov	r3, r0
 80190bc:	4a02      	ldr	r2, [pc, #8]	; (80190c8 <sys_init+0x18>)
 80190be:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80190c0:	bf00      	nop
 80190c2:	bd80      	pop	{r7, pc}
 80190c4:	0801ffec 	.word	0x0801ffec
 80190c8:	20019098 	.word	0x20019098

080190cc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b084      	sub	sp, #16
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80190d4:	2300      	movs	r3, #0
 80190d6:	60bb      	str	r3, [r7, #8]
 80190d8:	2300      	movs	r3, #0
 80190da:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80190dc:	f107 0308 	add.w	r3, r7, #8
 80190e0:	4618      	mov	r0, r3
 80190e2:	f7eb fe15 	bl	8004d10 <osMutexCreate>
 80190e6:	4602      	mov	r2, r0
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d102      	bne.n	80190fa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80190f4:	f04f 33ff 	mov.w	r3, #4294967295
 80190f8:	e000      	b.n	80190fc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80190fa:	2300      	movs	r3, #0
}
 80190fc:	4618      	mov	r0, r3
 80190fe:	3710      	adds	r7, #16
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}

08019104 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019104:	b580      	push	{r7, lr}
 8019106:	b082      	sub	sp, #8
 8019108:	af00      	add	r7, sp, #0
 801910a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	f04f 31ff 	mov.w	r1, #4294967295
 8019114:	4618      	mov	r0, r3
 8019116:	f7eb fe13 	bl	8004d40 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801911a:	bf00      	nop
 801911c:	3708      	adds	r7, #8
 801911e:	46bd      	mov	sp, r7
 8019120:	bd80      	pop	{r7, pc}

08019122 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019122:	b580      	push	{r7, lr}
 8019124:	b082      	sub	sp, #8
 8019126:	af00      	add	r7, sp, #0
 8019128:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	4618      	mov	r0, r3
 8019130:	f7eb fe54 	bl	8004ddc <osMutexRelease>
}
 8019134:	bf00      	nop
 8019136:	3708      	adds	r7, #8
 8019138:	46bd      	mov	sp, r7
 801913a:	bd80      	pop	{r7, pc}

0801913c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b08c      	sub	sp, #48	; 0x30
 8019140:	af00      	add	r7, sp, #0
 8019142:	60f8      	str	r0, [r7, #12]
 8019144:	60b9      	str	r1, [r7, #8]
 8019146:	607a      	str	r2, [r7, #4]
 8019148:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801914a:	f107 0314 	add.w	r3, r7, #20
 801914e:	2200      	movs	r2, #0
 8019150:	601a      	str	r2, [r3, #0]
 8019152:	605a      	str	r2, [r3, #4]
 8019154:	609a      	str	r2, [r3, #8]
 8019156:	60da      	str	r2, [r3, #12]
 8019158:	611a      	str	r2, [r3, #16]
 801915a:	615a      	str	r2, [r3, #20]
 801915c:	619a      	str	r2, [r3, #24]
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	617b      	str	r3, [r7, #20]
 8019162:	68bb      	ldr	r3, [r7, #8]
 8019164:	61bb      	str	r3, [r7, #24]
 8019166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019168:	b21b      	sxth	r3, r3
 801916a:	83bb      	strh	r3, [r7, #28]
 801916c:	683b      	ldr	r3, [r7, #0]
 801916e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019170:	f107 0314 	add.w	r3, r7, #20
 8019174:	6879      	ldr	r1, [r7, #4]
 8019176:	4618      	mov	r0, r3
 8019178:	f7eb fd6a 	bl	8004c50 <osThreadCreate>
 801917c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801917e:	4618      	mov	r0, r3
 8019180:	3730      	adds	r7, #48	; 0x30
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}
	...

08019188 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019188:	b580      	push	{r7, lr}
 801918a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801918c:	4b04      	ldr	r3, [pc, #16]	; (80191a0 <sys_arch_protect+0x18>)
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	f04f 31ff 	mov.w	r1, #4294967295
 8019194:	4618      	mov	r0, r3
 8019196:	f7eb fdd3 	bl	8004d40 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801919a:	2301      	movs	r3, #1
}
 801919c:	4618      	mov	r0, r3
 801919e:	bd80      	pop	{r7, pc}
 80191a0:	20019098 	.word	0x20019098

080191a4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80191a4:	b580      	push	{r7, lr}
 80191a6:	b082      	sub	sp, #8
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80191ac:	4b04      	ldr	r3, [pc, #16]	; (80191c0 <sys_arch_unprotect+0x1c>)
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	4618      	mov	r0, r3
 80191b2:	f7eb fe13 	bl	8004ddc <osMutexRelease>
}
 80191b6:	bf00      	nop
 80191b8:	3708      	adds	r7, #8
 80191ba:	46bd      	mov	sp, r7
 80191bc:	bd80      	pop	{r7, pc}
 80191be:	bf00      	nop
 80191c0:	20019098 	.word	0x20019098

080191c4 <app_init>:

static void ev_read_sensor_task(void *arg);
static void ev_tcp_server_data_task(void* arg);
static void do_send_data(const int sock);

void app_init(void) {
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b082      	sub	sp, #8
 80191c8:	af02      	add	r7, sp, #8
	board_init();
 80191ca:	f000 fbfd 	bl	80199c8 <board_init>
	ate_init(&evteck_ate, &ate_config);
 80191ce:	4914      	ldr	r1, [pc, #80]	; (8019220 <app_init+0x5c>)
 80191d0:	4814      	ldr	r0, [pc, #80]	; (8019224 <app_init+0x60>)
 80191d2:	f000 fc34 	bl	8019a3e <ate_init>
	ev_data_queue_handle = xQueueCreate(1024,sizeof(float));
 80191d6:	2200      	movs	r2, #0
 80191d8:	2104      	movs	r1, #4
 80191da:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80191de:	f7ec f997 	bl	8005510 <xQueueGenericCreate>
 80191e2:	4603      	mov	r3, r0
 80191e4:	4a10      	ldr	r2, [pc, #64]	; (8019228 <app_init+0x64>)
 80191e6:	6013      	str	r3, [r2, #0]
	xTaskCreate(ev_read_sensor_task, "read sensor", 1024, NULL,
 80191e8:	4b10      	ldr	r3, [pc, #64]	; (801922c <app_init+0x68>)
 80191ea:	9301      	str	r3, [sp, #4]
 80191ec:	2307      	movs	r3, #7
 80191ee:	9300      	str	r3, [sp, #0]
 80191f0:	2300      	movs	r3, #0
 80191f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80191f6:	490e      	ldr	r1, [pc, #56]	; (8019230 <app_init+0x6c>)
 80191f8:	480e      	ldr	r0, [pc, #56]	; (8019234 <app_init+0x70>)
 80191fa:	f7ed f8d0 	bl	800639e <xTaskCreate>
			configMAX_PRIORITIES, &ev_read_sensor_handle);
	setting_app();
 80191fe:	f000 fa45 	bl	801968c <setting_app>
	xTaskCreate(ev_tcp_server_data_task, "tcp server_dt", 1024, NULL,
 8019202:	4b0d      	ldr	r3, [pc, #52]	; (8019238 <app_init+0x74>)
 8019204:	9301      	str	r3, [sp, #4]
 8019206:	2306      	movs	r3, #6
 8019208:	9300      	str	r3, [sp, #0]
 801920a:	2300      	movs	r3, #0
 801920c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019210:	490a      	ldr	r1, [pc, #40]	; (801923c <app_init+0x78>)
 8019212:	480b      	ldr	r0, [pc, #44]	; (8019240 <app_init+0x7c>)
 8019214:	f7ed f8c3 	bl	800639e <xTaskCreate>
			configMAX_PRIORITIES - 1, &ev_tcp_server_data_handle);
}
 8019218:	bf00      	nop
 801921a:	46bd      	mov	sp, r7
 801921c:	bd80      	pop	{r7, pc}
 801921e:	bf00      	nop
 8019220:	20000034 	.word	0x20000034
 8019224:	200190a8 	.word	0x200190a8
 8019228:	2001909c 	.word	0x2001909c
 801922c:	200190a4 	.word	0x200190a4
 8019230:	0801fc80 	.word	0x0801fc80
 8019234:	080192f5 	.word	0x080192f5
 8019238:	200190a0 	.word	0x200190a0
 801923c:	0801fc8c 	.word	0x0801fc8c
 8019240:	08019345 	.word	0x08019345

08019244 <do_send_data>:
typedef union{
	uint8_t u8_t[4];
	float fl_t;
}Data_Type_t;

static void do_send_data(const int sock){
 8019244:	b580      	push	{r7, lr}
 8019246:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 801924a:	af00      	add	r7, sp, #0
 801924c:	1d3b      	adds	r3, r7, #4
 801924e:	6018      	str	r0, [r3, #0]
	uint8_t buff[MAX_BUFF_LENGTH];
	uint16_t length = 0;
 8019250:	2300      	movs	r3, #0
 8019252:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
	Data_Type_t data_sensor;
	int byte_write = 0;
 8019256:	2300      	movs	r3, #0
 8019258:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	while(1){
		// Read Data
		if(xQueueReceive(ev_data_queue_handle,&data_sensor.fl_t, (TickType_t) 10) == pdPASS){
 801925c:	4b24      	ldr	r3, [pc, #144]	; (80192f0 <do_send_data+0xac>)
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	f107 0108 	add.w	r1, r7, #8
 8019264:	220a      	movs	r2, #10
 8019266:	4618      	mov	r0, r3
 8019268:	f7ec fc1e 	bl	8005aa8 <xQueueReceive>
 801926c:	4603      	mov	r3, r0
 801926e:	2b01      	cmp	r3, #1
 8019270:	d11e      	bne.n	80192b0 <do_send_data+0x6c>
			for(uint8_t i = 0;i<4;i++){
 8019272:	2300      	movs	r3, #0
 8019274:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 8019278:	e011      	b.n	801929e <do_send_data+0x5a>
				buff[length+i] = data_sensor.u8_t[i];
 801927a:	f897 240f 	ldrb.w	r2, [r7, #1039]	; 0x40f
 801927e:	f8b7 1416 	ldrh.w	r1, [r7, #1046]	; 0x416
 8019282:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8019286:	440b      	add	r3, r1
 8019288:	f107 0108 	add.w	r1, r7, #8
 801928c:	5c89      	ldrb	r1, [r1, r2]
 801928e:	f107 020c 	add.w	r2, r7, #12
 8019292:	54d1      	strb	r1, [r2, r3]
			for(uint8_t i = 0;i<4;i++){
 8019294:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8019298:	3301      	adds	r3, #1
 801929a:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 801929e:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 80192a2:	2b03      	cmp	r3, #3
 80192a4:	d9e9      	bls.n	801927a <do_send_data+0x36>
			}
			length += 4;
 80192a6:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 80192aa:	3304      	adds	r3, #4
 80192ac:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
		}
		// Send Data
		if(length == 1024){
 80192b0:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 80192b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80192b8:	d10d      	bne.n	80192d6 <do_send_data+0x92>
			byte_write = send(sock,(uint8_t*)buff,length,0);
 80192ba:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 80192be:	f107 010c 	add.w	r1, r7, #12
 80192c2:	1d38      	adds	r0, r7, #4
 80192c4:	2300      	movs	r3, #0
 80192c6:	6800      	ldr	r0, [r0, #0]
 80192c8:	f7f1 fe48 	bl	800af5c <lwip_send>
 80192cc:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
			// Reset buff
			length = 0;
 80192d0:	2300      	movs	r3, #0
 80192d2:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
		}
		// Check connect
		if(byte_write == -1){
 80192d6:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80192da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192de:	d000      	beq.n	80192e2 <do_send_data+0x9e>
		if(xQueueReceive(ev_data_queue_handle,&data_sensor.fl_t, (TickType_t) 10) == pdPASS){
 80192e0:	e7bc      	b.n	801925c <do_send_data+0x18>
			break;
 80192e2:	bf00      	nop
		}
	}
}
 80192e4:	bf00      	nop
 80192e6:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
 80192ee:	bf00      	nop
 80192f0:	2001909c 	.word	0x2001909c

080192f4 <ev_read_sensor_task>:

#define NUM_MAX_SEND_QUEUE_FALSE 10

static void ev_read_sensor_task(void *arg) {
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b084      	sub	sp, #16
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
	float value = 0;
 80192fc:	f04f 0300 	mov.w	r3, #0
 8019300:	60bb      	str	r3, [r7, #8]
	uint16_t num_false = 0;
 8019302:	2300      	movs	r3, #0
 8019304:	81fb      	strh	r3, [r7, #14]
	for (;;) {

		value = 1.1;
 8019306:	4b0d      	ldr	r3, [pc, #52]	; (801933c <ev_read_sensor_task+0x48>)
 8019308:	60bb      	str	r3, [r7, #8]

		if (xQueueSend(ev_data_queue_handle, &value,
 801930a:	4b0d      	ldr	r3, [pc, #52]	; (8019340 <ev_read_sensor_task+0x4c>)
 801930c:	6818      	ldr	r0, [r3, #0]
 801930e:	f107 0108 	add.w	r1, r7, #8
 8019312:	2300      	movs	r3, #0
 8019314:	2264      	movs	r2, #100	; 0x64
 8019316:	f7ec f9a1 	bl	800565c <xQueueGenericSend>
 801931a:	4603      	mov	r3, r0
 801931c:	2b01      	cmp	r3, #1
 801931e:	d0f2      	beq.n	8019306 <ev_read_sensor_task+0x12>
				(TickType_t )100) != pdPASS){
			num_false++;
 8019320:	89fb      	ldrh	r3, [r7, #14]
 8019322:	3301      	adds	r3, #1
 8019324:	81fb      	strh	r3, [r7, #14]
			if(num_false > NUM_MAX_SEND_QUEUE_FALSE){
 8019326:	89fb      	ldrh	r3, [r7, #14]
 8019328:	2b0a      	cmp	r3, #10
 801932a:	d9ec      	bls.n	8019306 <ev_read_sensor_task+0x12>
				xQueueReset(ev_data_queue_handle);
 801932c:	4b04      	ldr	r3, [pc, #16]	; (8019340 <ev_read_sensor_task+0x4c>)
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	2100      	movs	r1, #0
 8019332:	4618      	mov	r0, r3
 8019334:	f7ec f80c 	bl	8005350 <xQueueGenericReset>
		value = 1.1;
 8019338:	e7e5      	b.n	8019306 <ev_read_sensor_task+0x12>
 801933a:	bf00      	nop
 801933c:	3f8ccccd 	.word	0x3f8ccccd
 8019340:	2001909c 	.word	0x2001909c

08019344 <ev_tcp_server_data_task>:
		}
	}
}


static void ev_tcp_server_data_task(void* arg){
 8019344:	b580      	push	{r7, lr}
 8019346:	b0b8      	sub	sp, #224	; 0xe0
 8019348:	af02      	add	r7, sp, #8
 801934a:	6078      	str	r0, [r7, #4]
    char addr_str[128];
    int addr_family = (int)arg;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int ip_protocol = 0;
 8019352:	2300      	movs	r3, #0
 8019354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int keepAlive = 1;
 8019358:	2301      	movs	r3, #1
 801935a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int keepIdle = KEEPALIVE_IDLE;
 801935c:	2305      	movs	r3, #5
 801935e:	63bb      	str	r3, [r7, #56]	; 0x38
    int keepInterval = KEEPALIVE_INTERVAL;
 8019360:	2305      	movs	r3, #5
 8019362:	637b      	str	r3, [r7, #52]	; 0x34
    int keepCount = KEEPALIVE_COUNT;
 8019364:	2301      	movs	r3, #1
 8019366:	633b      	str	r3, [r7, #48]	; 0x30
    struct sockaddr_storage dest_addr;

    if (addr_family == AF_INET) {
 8019368:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801936c:	2b02      	cmp	r3, #2
 801936e:	d11a      	bne.n	80193a6 <ev_tcp_server_data_task+0x62>
        struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 8019370:	f107 0320 	add.w	r3, r7, #32
 8019374:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 8019378:	2000      	movs	r0, #0
 801937a:	f7f2 fcc6 	bl	800bd0a <lwip_htonl>
 801937e:	4602      	mov	r2, r0
 8019380:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019384:	605a      	str	r2, [r3, #4]
        dest_addr_ip4->sin_family = AF_INET;
 8019386:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801938a:	2202      	movs	r2, #2
 801938c:	705a      	strb	r2, [r3, #1]
        dest_addr_ip4->sin_port = htons(PORT_DATA);
 801938e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8019392:	f7f2 fca5 	bl	800bce0 <lwip_htons>
 8019396:	4603      	mov	r3, r0
 8019398:	461a      	mov	r2, r3
 801939a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801939e:	805a      	strh	r2, [r3, #2]
        ip_protocol = IPPROTO_IP;
 80193a0:	2300      	movs	r3, #0
 80193a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 80193a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80193aa:	2101      	movs	r1, #1
 80193ac:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80193b0:	f7f1 fee4 	bl	800b17c <lwip_socket>
 80193b4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if (listen_sock < 0) {
 80193b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80193bc:	2b00      	cmp	r3, #0
 80193be:	da03      	bge.n	80193c8 <ev_tcp_server_data_task+0x84>
        //printf( "Unable to create socket: errno %d", errno);
        vTaskDelete(NULL);
 80193c0:	2000      	movs	r0, #0
 80193c2:	f7ed f939 	bl	8006638 <vTaskDelete>
 80193c6:	e083      	b.n	80194d0 <ev_tcp_server_data_task+0x18c>
        return;
    }

    int opt = 1;
 80193c8:	2301      	movs	r3, #1
 80193ca:	61fb      	str	r3, [r7, #28]
    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 80193cc:	f107 031c 	add.w	r3, r7, #28
 80193d0:	2204      	movs	r2, #4
 80193d2:	9200      	str	r2, [sp, #0]
 80193d4:	2204      	movs	r2, #4
 80193d6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80193da:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80193de:	f7f2 f8db 	bl	800b598 <lwip_setsockopt>

    int err = bind(listen_sock, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
 80193e2:	f107 0320 	add.w	r3, r7, #32
 80193e6:	2210      	movs	r2, #16
 80193e8:	4619      	mov	r1, r3
 80193ea:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80193ee:	f7f1 f971 	bl	800a6d4 <lwip_bind>
 80193f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 80193f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d15c      	bne.n	80194b8 <ev_tcp_server_data_task+0x174>
        //printf( "IPPROTO: %d", addr_family);
        goto CLEAN_UP;
    }
    //printf( "Socket bound, port %d", PORT_SETTING);

    err = listen(listen_sock, 1);
 80193fe:	2101      	movs	r1, #1
 8019400:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019404:	f7f1 fa2a 	bl	800a85c <lwip_listen>
 8019408:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 801940c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019410:	2b00      	cmp	r3, #0
 8019412:	d153      	bne.n	80194bc <ev_tcp_server_data_task+0x178>
        goto CLEAN_UP;
    }
	for (;;) {
        //printf( "Socket listening");
        struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
        socklen_t addr_len = sizeof(source_addr);
 8019414:	2310      	movs	r3, #16
 8019416:	60bb      	str	r3, [r7, #8]
        int sock = accept(listen_sock, (struct sockaddr *)&source_addr, &addr_len);
 8019418:	f107 0208 	add.w	r2, r7, #8
 801941c:	f107 030c 	add.w	r3, r7, #12
 8019420:	4619      	mov	r1, r3
 8019422:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019426:	f7f1 f837 	bl	800a498 <lwip_accept>
 801942a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        if (sock < 0) {
 801942e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019432:	2b00      	cmp	r3, #0
 8019434:	db44      	blt.n	80194c0 <ev_tcp_server_data_task+0x17c>
            //printf( "Unable to accept connection: errno %d", errno);
            break;
        }
        // Set tcp keepalive option
        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 8019436:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801943a:	2204      	movs	r2, #4
 801943c:	9200      	str	r2, [sp, #0]
 801943e:	2208      	movs	r2, #8
 8019440:	f640 71ff 	movw	r1, #4095	; 0xfff
 8019444:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019448:	f7f2 f8a6 	bl	800b598 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 801944c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019450:	2204      	movs	r2, #4
 8019452:	9200      	str	r2, [sp, #0]
 8019454:	2203      	movs	r2, #3
 8019456:	2106      	movs	r1, #6
 8019458:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801945c:	f7f2 f89c 	bl	800b598 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval, sizeof(int));
 8019460:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019464:	2204      	movs	r2, #4
 8019466:	9200      	str	r2, [sp, #0]
 8019468:	2204      	movs	r2, #4
 801946a:	2106      	movs	r1, #6
 801946c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019470:	f7f2 f892 	bl	800b598 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 8019474:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019478:	2204      	movs	r2, #4
 801947a:	9200      	str	r2, [sp, #0]
 801947c:	2205      	movs	r2, #5
 801947e:	2106      	movs	r1, #6
 8019480:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019484:	f7f2 f888 	bl	800b598 <lwip_setsockopt>
        // Convert ip address to string
        if (source_addr.ss_family == PF_INET) {
 8019488:	7b7b      	ldrb	r3, [r7, #13]
 801948a:	2b02      	cmp	r3, #2
 801948c:	d108      	bne.n	80194a0 <ev_tcp_server_data_task+0x15c>
            inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr, addr_str, sizeof(addr_str) - 1);
 801948e:	f107 030c 	add.w	r3, r7, #12
 8019492:	3304      	adds	r3, #4
 8019494:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8019498:	227f      	movs	r2, #127	; 0x7f
 801949a:	4618      	mov	r0, r3
 801949c:	f7fe fd20 	bl	8017ee0 <ip4addr_ntoa_r>
        }
        //printf( "Socket accepted ip address: %s", addr_str);
        do_send_data(sock);
 80194a0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80194a4:	f7ff fece 	bl	8019244 <do_send_data>
        close(sock);
 80194a8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80194ac:	f7f1 f980 	bl	800a7b0 <lwip_close>
		vTaskDelay(1);
 80194b0:	2001      	movs	r0, #1
 80194b2:	f7ed f951 	bl	8006758 <vTaskDelay>
	for (;;) {
 80194b6:	e7ad      	b.n	8019414 <ev_tcp_server_data_task+0xd0>
        goto CLEAN_UP;
 80194b8:	bf00      	nop
 80194ba:	e002      	b.n	80194c2 <ev_tcp_server_data_task+0x17e>
        goto CLEAN_UP;
 80194bc:	bf00      	nop
 80194be:	e000      	b.n	80194c2 <ev_tcp_server_data_task+0x17e>
            break;
 80194c0:	bf00      	nop
	}
CLEAN_UP:
    close(listen_sock);
 80194c2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80194c6:	f7f1 f973 	bl	800a7b0 <lwip_close>
    vTaskDelete(NULL);
 80194ca:	2000      	movs	r0, #0
 80194cc:	f7ed f8b4 	bl	8006638 <vTaskDelete>
}
 80194d0:	37d8      	adds	r7, #216	; 0xd8
 80194d2:	46bd      	mov	sp, r7
 80194d4:	bd80      	pop	{r7, pc}
	...

080194d8 <__io_putchar>:

/********************** Exported Function Definitions *************************/

QueueHandle_t shell_queue_send;

uint8_t __io_putchar(uint8_t ch){
 80194d8:	b580      	push	{r7, lr}
 80194da:	b082      	sub	sp, #8
 80194dc:	af00      	add	r7, sp, #0
 80194de:	4603      	mov	r3, r0
 80194e0:	71fb      	strb	r3, [r7, #7]
	xQueueSend(shell_queue_send,&ch,(TickType_t)100);
 80194e2:	4b06      	ldr	r3, [pc, #24]	; (80194fc <__io_putchar+0x24>)
 80194e4:	6818      	ldr	r0, [r3, #0]
 80194e6:	1df9      	adds	r1, r7, #7
 80194e8:	2300      	movs	r3, #0
 80194ea:	2264      	movs	r2, #100	; 0x64
 80194ec:	f7ec f8b6 	bl	800565c <xQueueGenericSend>
	return ch;
 80194f0:	79fb      	ldrb	r3, [r7, #7]
}
 80194f2:	4618      	mov	r0, r3
 80194f4:	3708      	adds	r7, #8
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}
 80194fa:	bf00      	nop
 80194fc:	200190e0 	.word	0x200190e0

08019500 <shell_printf>:
#define default_buff_size 1024
int shell_printf(const char *format, ...){
 8019500:	b40f      	push	{r0, r1, r2, r3}
 8019502:	b580      	push	{r7, lr}
 8019504:	b084      	sub	sp, #16
 8019506:	af00      	add	r7, sp, #0
	va_list args;
	char *buff = (char*) malloc(default_buff_size);
 8019508:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801950c:	f001 fb46 	bl	801ab9c <malloc>
 8019510:	4603      	mov	r3, r0
 8019512:	60bb      	str	r3, [r7, #8]
	memset(buff, 0, default_buff_size);
 8019514:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019518:	2100      	movs	r1, #0
 801951a:	68b8      	ldr	r0, [r7, #8]
 801951c:	f001 fb84 	bl	801ac28 <memset>
	va_start(args, format);
 8019520:	f107 031c 	add.w	r3, r7, #28
 8019524:	603b      	str	r3, [r7, #0]
	vsprintf(buff, format, args);
 8019526:	683a      	ldr	r2, [r7, #0]
 8019528:	69b9      	ldr	r1, [r7, #24]
 801952a:	68b8      	ldr	r0, [r7, #8]
 801952c:	f002 f8d6 	bl	801b6dc <vsiprintf>

	int len = strlen(buff);
 8019530:	68b8      	ldr	r0, [r7, #8]
 8019532:	f7e6 fe4d 	bl	80001d0 <strlen>
 8019536:	4603      	mov	r3, r0
 8019538:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 0;i<len;i++)
 801953a:	2300      	movs	r3, #0
 801953c:	81fb      	strh	r3, [r7, #14]
 801953e:	e009      	b.n	8019554 <shell_printf+0x54>
		__io_putchar(buff[i]);
 8019540:	89fb      	ldrh	r3, [r7, #14]
 8019542:	68ba      	ldr	r2, [r7, #8]
 8019544:	4413      	add	r3, r2
 8019546:	781b      	ldrb	r3, [r3, #0]
 8019548:	4618      	mov	r0, r3
 801954a:	f7ff ffc5 	bl	80194d8 <__io_putchar>
	for(uint16_t i = 0;i<len;i++)
 801954e:	89fb      	ldrh	r3, [r7, #14]
 8019550:	3301      	adds	r3, #1
 8019552:	81fb      	strh	r3, [r7, #14]
 8019554:	89fb      	ldrh	r3, [r7, #14]
 8019556:	687a      	ldr	r2, [r7, #4]
 8019558:	429a      	cmp	r2, r3
 801955a:	dcf1      	bgt.n	8019540 <shell_printf+0x40>
	free(buff);
 801955c:	68b8      	ldr	r0, [r7, #8]
 801955e:	f001 fb25 	bl	801abac <free>
	return len;
 8019562:	687b      	ldr	r3, [r7, #4]
}
 8019564:	4618      	mov	r0, r3
 8019566:	3710      	adds	r7, #16
 8019568:	46bd      	mov	sp, r7
 801956a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801956e:	b004      	add	sp, #16
 8019570:	4770      	bx	lr

08019572 <user_put_char>:
int user_put_char(uint8_t *buf, uint32_t len) {
 8019572:	b580      	push	{r7, lr}
 8019574:	b082      	sub	sp, #8
 8019576:	af00      	add	r7, sp, #0
 8019578:	6078      	str	r0, [r7, #4]
 801957a:	6039      	str	r1, [r7, #0]
	return __io_putchar(*buf);
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	781b      	ldrb	r3, [r3, #0]
 8019580:	4618      	mov	r0, r3
 8019582:	f7ff ffa9 	bl	80194d8 <__io_putchar>
 8019586:	4603      	mov	r3, r0
}
 8019588:	4618      	mov	r0, r3
 801958a:	3708      	adds	r7, #8
 801958c:	46bd      	mov	sp, r7
 801958e:	bd80      	pop	{r7, pc}

08019590 <user_get_char>:

int user_get_char(uint8_t *buf, uint32_t len) {
 8019590:	b580      	push	{r7, lr}
 8019592:	b084      	sub	sp, #16
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
 8019598:	6039      	str	r1, [r7, #0]
	uint8_t ch = __io_getchar();
 801959a:	f000 fb6b 	bl	8019c74 <__io_getchar>
 801959e:	4603      	mov	r3, r0
 80195a0:	73fb      	strb	r3, [r7, #15]
	*buf = ch;
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	7bfa      	ldrb	r2, [r7, #15]
 80195a6:	701a      	strb	r2, [r3, #0]
	return ch;
 80195a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80195aa:	4618      	mov	r0, r3
 80195ac:	3710      	adds	r7, #16
 80195ae:	46bd      	mov	sp, r7
 80195b0:	bd80      	pop	{r7, pc}
	...

080195b4 <cli_app_start>:

void cli_app_start(void) {
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b084      	sub	sp, #16
 80195b8:	af02      	add	r7, sp, #8
	retarget_init();
 80195ba:	f000 fb27 	bl	8019c0c <retarget_init>
	shell_queue_send = xQueueCreate(1024,sizeof(uint8_t));
 80195be:	2200      	movs	r2, #0
 80195c0:	2101      	movs	r1, #1
 80195c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80195c6:	f7eb ffa3 	bl	8005510 <xQueueGenericCreate>
 80195ca:	4603      	mov	r3, r0
 80195cc:	4a11      	ldr	r2, [pc, #68]	; (8019614 <cli_app_start+0x60>)
 80195ce:	6013      	str	r3, [r2, #0]
	if(shell_queue_send == NULL) return;
 80195d0:	4b10      	ldr	r3, [pc, #64]	; (8019614 <cli_app_start+0x60>)
 80195d2:	681b      	ldr	r3, [r3, #0]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d018      	beq.n	801960a <cli_app_start+0x56>

	SHELL_Init(&user_context, user_put_char, user_get_char, shell_printf, ">");
 80195d8:	4b0f      	ldr	r3, [pc, #60]	; (8019618 <cli_app_start+0x64>)
 80195da:	9300      	str	r3, [sp, #0]
 80195dc:	4b0f      	ldr	r3, [pc, #60]	; (801961c <cli_app_start+0x68>)
 80195de:	4a10      	ldr	r2, [pc, #64]	; (8019620 <cli_app_start+0x6c>)
 80195e0:	4910      	ldr	r1, [pc, #64]	; (8019624 <cli_app_start+0x70>)
 80195e2:	4811      	ldr	r0, [pc, #68]	; (8019628 <cli_app_start+0x74>)
 80195e4:	f000 fba0 	bl	8019d28 <SHELL_Init>

	/* Register CLI commands */
	for (int i = 0;
 80195e8:	2300      	movs	r3, #0
 80195ea:	607b      	str	r3, [r7, #4]
 80195ec:	e009      	b.n	8019602 <cli_app_start+0x4e>
			i < sizeof(cli_command_table) / sizeof(shell_command_context_t);
			i++) {
		SHELL_RegisterCommand(&cli_command_table[i]);
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	011b      	lsls	r3, r3, #4
 80195f2:	4a0e      	ldr	r2, [pc, #56]	; (801962c <cli_app_start+0x78>)
 80195f4:	4413      	add	r3, r2
 80195f6:	4618      	mov	r0, r3
 80195f8:	f001 f948 	bl	801a88c <SHELL_RegisterCommand>
			i++) {
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	3301      	adds	r3, #1
 8019600:	607b      	str	r3, [r7, #4]
	for (int i = 0;
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d0f2      	beq.n	80195ee <cli_app_start+0x3a>
 8019608:	e000      	b.n	801960c <cli_app_start+0x58>
	if(shell_queue_send == NULL) return;
 801960a:	bf00      	nop
	}
}
 801960c:	3708      	adds	r7, #8
 801960e:	46bd      	mov	sp, r7
 8019610:	bd80      	pop	{r7, pc}
 8019612:	bf00      	nop
 8019614:	200190e0 	.word	0x200190e0
 8019618:	0801fcbc 	.word	0x0801fcbc
 801961c:	08019501 	.word	0x08019501
 8019620:	08019591 	.word	0x08019591
 8019624:	08019573 	.word	0x08019573
 8019628:	200108bc 	.word	0x200108bc
 801962c:	0801fff4 	.word	0x0801fff4

08019630 <cli_app_main_loop>:

void cli_app_main_loop(void *pvParameters) {
 8019630:	b580      	push	{r7, lr}
 8019632:	b082      	sub	sp, #8
 8019634:	af00      	add	r7, sp, #0
 8019636:	6078      	str	r0, [r7, #4]
	SHELL_Process(&user_context);
 8019638:	4803      	ldr	r0, [pc, #12]	; (8019648 <cli_app_main_loop+0x18>)
 801963a:	f000 fbc7 	bl	8019dcc <SHELL_Process>
}
 801963e:	bf00      	nop
 8019640:	3708      	adds	r7, #8
 8019642:	46bd      	mov	sp, r7
 8019644:	bd80      	pop	{r7, pc}
 8019646:	bf00      	nop
 8019648:	200108bc 	.word	0x200108bc

0801964c <cli_app_on_data_received>:

void cli_app_on_data_received(uint8_t ch) {
 801964c:	b580      	push	{r7, lr}
 801964e:	b082      	sub	sp, #8
 8019650:	af00      	add	r7, sp, #0
 8019652:	4603      	mov	r3, r0
 8019654:	71fb      	strb	r3, [r7, #7]
	on_uart_data_received(ch);
 8019656:	79fb      	ldrb	r3, [r7, #7]
 8019658:	4618      	mov	r0, r3
 801965a:	f000 fb1d 	bl	8019c98 <on_uart_data_received>
}
 801965e:	bf00      	nop
 8019660:	3708      	adds	r7, #8
 8019662:	46bd      	mov	sp, r7
 8019664:	bd80      	pop	{r7, pc}

08019666 <cli_reset_system>:

/********************** Internal Function Definitions *************************/

/* Reset System */
static int32_t cli_reset_system(p_shell_context_t context, int32_t argc,
		char **argv) {
 8019666:	b480      	push	{r7}
 8019668:	b085      	sub	sp, #20
 801966a:	af00      	add	r7, sp, #0
 801966c:	60f8      	str	r0, [r7, #12]
 801966e:	60b9      	str	r1, [r7, #8]
 8019670:	607a      	str	r2, [r7, #4]
	if (argc < 1) {
 8019672:	68bb      	ldr	r3, [r7, #8]
 8019674:	2b00      	cmp	r3, #0
 8019676:	dc02      	bgt.n	801967e <cli_reset_system+0x18>
		//printf("Missing parameter\r\n");
		return -1;
 8019678:	f04f 33ff 	mov.w	r3, #4294967295
 801967c:	e000      	b.n	8019680 <cli_reset_system+0x1a>
	}
	//printf("sys reset\r\n");
	return 0;
 801967e:	2300      	movs	r3, #0
}
 8019680:	4618      	mov	r0, r3
 8019682:	3714      	adds	r7, #20
 8019684:	46bd      	mov	sp, r7
 8019686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801968a:	4770      	bx	lr

0801968c <setting_app>:

static void ev_tcp_server_config_task(void *arg);
static void do_retransmit(const int sock);
static void transmit_data(void* arg);
static void send_tcp(const int sock,char* buff,uint16_t len);
void setting_app(){
 801968c:	b580      	push	{r7, lr}
 801968e:	b082      	sub	sp, #8
 8019690:	af02      	add	r7, sp, #8

	tranmiter_semphr = xSemaphoreCreateMutex();
 8019692:	2001      	movs	r0, #1
 8019694:	f7eb ffaf 	bl	80055f6 <xQueueCreateMutex>
 8019698:	4603      	mov	r3, r0
 801969a:	4a08      	ldr	r2, [pc, #32]	; (80196bc <setting_app+0x30>)
 801969c:	6013      	str	r3, [r2, #0]

	xTaskCreate(ev_tcp_server_config_task, "tcp server_st", 1024, NULL,
 801969e:	4b08      	ldr	r3, [pc, #32]	; (80196c0 <setting_app+0x34>)
 80196a0:	9301      	str	r3, [sp, #4]
 80196a2:	2306      	movs	r3, #6
 80196a4:	9300      	str	r3, [sp, #0]
 80196a6:	2300      	movs	r3, #0
 80196a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80196ac:	4905      	ldr	r1, [pc, #20]	; (80196c4 <setting_app+0x38>)
 80196ae:	4806      	ldr	r0, [pc, #24]	; (80196c8 <setting_app+0x3c>)
 80196b0:	f7ec fe75 	bl	800639e <xTaskCreate>
			configMAX_PRIORITIES - 1, &ev_tcp_server_setting_handle);
}
 80196b4:	bf00      	nop
 80196b6:	46bd      	mov	sp, r7
 80196b8:	bd80      	pop	{r7, pc}
 80196ba:	bf00      	nop
 80196bc:	200190e4 	.word	0x200190e4
 80196c0:	200190e8 	.word	0x200190e8
 80196c4:	0801fcc0 	.word	0x0801fcc0
 80196c8:	08019791 	.word	0x08019791

080196cc <do_retransmit>:

static void do_retransmit(const int sock)
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b0a8      	sub	sp, #160	; 0xa0
 80196d0:	af02      	add	r7, sp, #8
 80196d2:	6078      	str	r0, [r7, #4]

    int len;
    char rx_buffer[128];
    int p_sock = sock;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	60fb      	str	r3, [r7, #12]
    xTaskCreate(transmit_data,"transmit", 1024,(void*)&p_sock,configMAX_PRIORITIES, &tranmiter_handle);
 80196d8:	f107 030c 	add.w	r3, r7, #12
 80196dc:	4a29      	ldr	r2, [pc, #164]	; (8019784 <do_retransmit+0xb8>)
 80196de:	9201      	str	r2, [sp, #4]
 80196e0:	2207      	movs	r2, #7
 80196e2:	9200      	str	r2, [sp, #0]
 80196e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80196e8:	4927      	ldr	r1, [pc, #156]	; (8019788 <do_retransmit+0xbc>)
 80196ea:	4828      	ldr	r0, [pc, #160]	; (801978c <do_retransmit+0xc0>)
 80196ec:	f7ec fe57 	bl	800639e <xTaskCreate>
    do {
        len = recv(sock, rx_buffer, sizeof(rx_buffer) - 1, 0);
 80196f0:	f107 0110 	add.w	r1, r7, #16
 80196f4:	2300      	movs	r3, #0
 80196f6:	227f      	movs	r2, #127	; 0x7f
 80196f8:	6878      	ldr	r0, [r7, #4]
 80196fa:	f7f1 fc19 	bl	800af30 <lwip_recv>
 80196fe:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if (len < 0) {
 8019702:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019706:	2b00      	cmp	r3, #0
 8019708:	db2f      	blt.n	801976a <do_retransmit+0x9e>
            //printf( "Error occurred during receiving: errno %d", errno);
        } else if (len == 0) {
 801970a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801970e:	2b00      	cmp	r3, #0
 8019710:	d02b      	beq.n	801976a <do_retransmit+0x9e>
            //printf( "Connection closed");
        } else {
            rx_buffer[len] = 0; // Null-terminate whatever is received and treat it like a string
 8019712:	f107 0210 	add.w	r2, r7, #16
 8019716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801971a:	4413      	add	r3, r2
 801971c:	2200      	movs	r2, #0
 801971e:	701a      	strb	r2, [r3, #0]
            //printf( "Received %d bytes: %s", len, rx_buffer);
            // send() can return less bytes than supplied length.
            // Walk-around for robust implementation.
            send_tcp(sock, rx_buffer, len);
 8019720:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019724:	b29a      	uxth	r2, r3
 8019726:	f107 0310 	add.w	r3, r7, #16
 801972a:	4619      	mov	r1, r3
 801972c:	6878      	ldr	r0, [r7, #4]
 801972e:	f000 f929 	bl	8019984 <send_tcp>
            for(uint16_t i =0;i<len;i++){
 8019732:	2300      	movs	r3, #0
 8019734:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8019738:	e011      	b.n	801975e <do_retransmit+0x92>
            	cli_app_on_data_received(rx_buffer[i]);
 801973a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801973e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8019742:	4413      	add	r3, r2
 8019744:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8019748:	4618      	mov	r0, r3
 801974a:	f7ff ff7f 	bl	801964c <cli_app_on_data_received>
            	cli_app_main_loop(NULL);
 801974e:	2000      	movs	r0, #0
 8019750:	f7ff ff6e 	bl	8019630 <cli_app_main_loop>
            for(uint16_t i =0;i<len;i++){
 8019754:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8019758:	3301      	adds	r3, #1
 801975a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 801975e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8019762:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8019766:	429a      	cmp	r2, r3
 8019768:	dce7      	bgt.n	801973a <do_retransmit+0x6e>
            }
        }
    } while (len > 0);
 801976a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801976e:	2b00      	cmp	r3, #0
 8019770:	dcbe      	bgt.n	80196f0 <do_retransmit+0x24>
    vTaskDelete(tranmiter_handle);
 8019772:	4b04      	ldr	r3, [pc, #16]	; (8019784 <do_retransmit+0xb8>)
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	4618      	mov	r0, r3
 8019778:	f7ec ff5e 	bl	8006638 <vTaskDelete>
}
 801977c:	bf00      	nop
 801977e:	3798      	adds	r7, #152	; 0x98
 8019780:	46bd      	mov	sp, r7
 8019782:	bd80      	pop	{r7, pc}
 8019784:	200190ec 	.word	0x200190ec
 8019788:	0801fcd0 	.word	0x0801fcd0
 801978c:	08019921 	.word	0x08019921

08019790 <ev_tcp_server_config_task>:

static void ev_tcp_server_config_task(void *arg) {
 8019790:	b580      	push	{r7, lr}
 8019792:	b0b8      	sub	sp, #224	; 0xe0
 8019794:	af02      	add	r7, sp, #8
 8019796:	6078      	str	r0, [r7, #4]

	cli_app_start();
 8019798:	f7ff ff0c 	bl	80195b4 <cli_app_start>
    char addr_str[128];
    int addr_family = (int)arg;
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int ip_protocol = 0;
 80197a2:	2300      	movs	r3, #0
 80197a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int keepAlive = 1;
 80197a8:	2301      	movs	r3, #1
 80197aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    int keepIdle = KEEPALIVE_IDLE;
 80197ac:	2305      	movs	r3, #5
 80197ae:	63bb      	str	r3, [r7, #56]	; 0x38
    int keepInterval = KEEPALIVE_INTERVAL;
 80197b0:	2305      	movs	r3, #5
 80197b2:	637b      	str	r3, [r7, #52]	; 0x34
    int keepCount = KEEPALIVE_COUNT;
 80197b4:	2301      	movs	r3, #1
 80197b6:	633b      	str	r3, [r7, #48]	; 0x30
    struct sockaddr_storage dest_addr;

    if (addr_family == AF_INET) {
 80197b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80197bc:	2b02      	cmp	r3, #2
 80197be:	d11a      	bne.n	80197f6 <ev_tcp_server_config_task+0x66>
        struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 80197c0:	f107 0320 	add.w	r3, r7, #32
 80197c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 80197c8:	2000      	movs	r0, #0
 80197ca:	f7f2 fa9e 	bl	800bd0a <lwip_htonl>
 80197ce:	4602      	mov	r2, r0
 80197d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80197d4:	605a      	str	r2, [r3, #4]
        dest_addr_ip4->sin_family = AF_INET;
 80197d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80197da:	2202      	movs	r2, #2
 80197dc:	705a      	strb	r2, [r3, #1]
        dest_addr_ip4->sin_port = htons(PORT_SETTING);
 80197de:	f240 40d2 	movw	r0, #1234	; 0x4d2
 80197e2:	f7f2 fa7d 	bl	800bce0 <lwip_htons>
 80197e6:	4603      	mov	r3, r0
 80197e8:	461a      	mov	r2, r3
 80197ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80197ee:	805a      	strh	r2, [r3, #2]
        ip_protocol = IPPROTO_IP;
 80197f0:	2300      	movs	r3, #0
 80197f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 80197f6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80197fa:	2101      	movs	r1, #1
 80197fc:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8019800:	f7f1 fcbc 	bl	800b17c <lwip_socket>
 8019804:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if (listen_sock < 0) {
 8019808:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801980c:	2b00      	cmp	r3, #0
 801980e:	da03      	bge.n	8019818 <ev_tcp_server_config_task+0x88>
        //printf( "Unable to create socket: errno %d", errno);
        vTaskDelete(NULL);
 8019810:	2000      	movs	r0, #0
 8019812:	f7ec ff11 	bl	8006638 <vTaskDelete>
 8019816:	e07f      	b.n	8019918 <ev_tcp_server_config_task+0x188>
        return;
    }

    int opt = 1;
 8019818:	2301      	movs	r3, #1
 801981a:	61fb      	str	r3, [r7, #28]
    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 801981c:	f107 031c 	add.w	r3, r7, #28
 8019820:	2204      	movs	r2, #4
 8019822:	9200      	str	r2, [sp, #0]
 8019824:	2204      	movs	r2, #4
 8019826:	f640 71ff 	movw	r1, #4095	; 0xfff
 801982a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801982e:	f7f1 feb3 	bl	800b598 <lwip_setsockopt>

    int err = bind(listen_sock, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
 8019832:	f107 0320 	add.w	r3, r7, #32
 8019836:	2210      	movs	r2, #16
 8019838:	4619      	mov	r1, r3
 801983a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801983e:	f7f0 ff49 	bl	800a6d4 <lwip_bind>
 8019842:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8019846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801984a:	2b00      	cmp	r3, #0
 801984c:	d158      	bne.n	8019900 <ev_tcp_server_config_task+0x170>
        //printf( "IPPROTO: %d", addr_family);
        goto CLEAN_UP;
    }
    //printf( "Socket bound, port %d", PORT_SETTING);

    err = listen(listen_sock, 1);
 801984e:	2101      	movs	r1, #1
 8019850:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019854:	f7f1 f802 	bl	800a85c <lwip_listen>
 8019858:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 801985c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019860:	2b00      	cmp	r3, #0
 8019862:	d14f      	bne.n	8019904 <ev_tcp_server_config_task+0x174>
        goto CLEAN_UP;
    }
	for (;;) {
        //printf( "Socket listening");
        struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
        socklen_t addr_len = sizeof(source_addr);
 8019864:	2310      	movs	r3, #16
 8019866:	60bb      	str	r3, [r7, #8]
        int sock = accept(listen_sock, (struct sockaddr *)&source_addr, &addr_len);
 8019868:	f107 0208 	add.w	r2, r7, #8
 801986c:	f107 030c 	add.w	r3, r7, #12
 8019870:	4619      	mov	r1, r3
 8019872:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8019876:	f7f0 fe0f 	bl	800a498 <lwip_accept>
 801987a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        if (sock < 0) {
 801987e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019882:	2b00      	cmp	r3, #0
 8019884:	db40      	blt.n	8019908 <ev_tcp_server_config_task+0x178>
            //printf( "Unable to accept connection: errno %d", errno);
            break;
        }
        // Set tcp keepalive option
        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 8019886:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801988a:	2204      	movs	r2, #4
 801988c:	9200      	str	r2, [sp, #0]
 801988e:	2208      	movs	r2, #8
 8019890:	f640 71ff 	movw	r1, #4095	; 0xfff
 8019894:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8019898:	f7f1 fe7e 	bl	800b598 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 801989c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80198a0:	2204      	movs	r2, #4
 80198a2:	9200      	str	r2, [sp, #0]
 80198a4:	2203      	movs	r2, #3
 80198a6:	2106      	movs	r1, #6
 80198a8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80198ac:	f7f1 fe74 	bl	800b598 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval, sizeof(int));
 80198b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80198b4:	2204      	movs	r2, #4
 80198b6:	9200      	str	r2, [sp, #0]
 80198b8:	2204      	movs	r2, #4
 80198ba:	2106      	movs	r1, #6
 80198bc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80198c0:	f7f1 fe6a 	bl	800b598 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 80198c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80198c8:	2204      	movs	r2, #4
 80198ca:	9200      	str	r2, [sp, #0]
 80198cc:	2205      	movs	r2, #5
 80198ce:	2106      	movs	r1, #6
 80198d0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80198d4:	f7f1 fe60 	bl	800b598 <lwip_setsockopt>
        // Convert ip address to string
        if (source_addr.ss_family == PF_INET) {
 80198d8:	7b7b      	ldrb	r3, [r7, #13]
 80198da:	2b02      	cmp	r3, #2
 80198dc:	d108      	bne.n	80198f0 <ev_tcp_server_config_task+0x160>
            inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr, addr_str, sizeof(addr_str) - 1);
 80198de:	f107 030c 	add.w	r3, r7, #12
 80198e2:	3304      	adds	r3, #4
 80198e4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80198e8:	227f      	movs	r2, #127	; 0x7f
 80198ea:	4618      	mov	r0, r3
 80198ec:	f7fe faf8 	bl	8017ee0 <ip4addr_ntoa_r>
        }
        //printf( "Socket accepted ip address: %s", addr_str);
        do_retransmit(sock);
 80198f0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80198f4:	f7ff feea 	bl	80196cc <do_retransmit>
		vTaskDelay(1);
 80198f8:	2001      	movs	r0, #1
 80198fa:	f7ec ff2d 	bl	8006758 <vTaskDelay>
	for (;;) {
 80198fe:	e7b1      	b.n	8019864 <ev_tcp_server_config_task+0xd4>
        goto CLEAN_UP;
 8019900:	bf00      	nop
 8019902:	e002      	b.n	801990a <ev_tcp_server_config_task+0x17a>
        goto CLEAN_UP;
 8019904:	bf00      	nop
 8019906:	e000      	b.n	801990a <ev_tcp_server_config_task+0x17a>
            break;
 8019908:	bf00      	nop
	}
CLEAN_UP:
    close(listen_sock);
 801990a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801990e:	f7f0 ff4f 	bl	800a7b0 <lwip_close>
    vTaskDelete(NULL);
 8019912:	2000      	movs	r0, #0
 8019914:	f7ec fe90 	bl	8006638 <vTaskDelete>
}
 8019918:	37d8      	adds	r7, #216	; 0xd8
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}
	...

08019920 <transmit_data>:
static void transmit_data(void* arg){
 8019920:	b580      	push	{r7, lr}
 8019922:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8019926:	af00      	add	r7, sp, #0
 8019928:	1d3b      	adds	r3, r7, #4
 801992a:	6018      	str	r0, [r3, #0]

	int* sock = (int*)arg;
 801992c:	1d3b      	adds	r3, r7, #4
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	uint8_t buff[1024];
	uint16_t len = 0;
 8019934:	2300      	movs	r3, #0
 8019936:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	for(;;){
		if(xQueueReceive(shell_queue_send,buff+len,(TickType_t)100) == pdPASS){
 801993a:	4b11      	ldr	r3, [pc, #68]	; (8019980 <transmit_data+0x60>)
 801993c:	6818      	ldr	r0, [r3, #0]
 801993e:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8019942:	f107 0208 	add.w	r2, r7, #8
 8019946:	4413      	add	r3, r2
 8019948:	2264      	movs	r2, #100	; 0x64
 801994a:	4619      	mov	r1, r3
 801994c:	f7ec f8ac 	bl	8005aa8 <xQueueReceive>
 8019950:	4603      	mov	r3, r0
 8019952:	2b01      	cmp	r3, #1
 8019954:	d105      	bne.n	8019962 <transmit_data+0x42>
			len++;
 8019956:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 801995a:	3301      	adds	r3, #1
 801995c:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 8019960:	e7eb      	b.n	801993a <transmit_data+0x1a>
		}
		else{
			if(len>0){
 8019962:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8019966:	2b00      	cmp	r3, #0
 8019968:	d0e7      	beq.n	801993a <transmit_data+0x1a>
				send_tcp(*sock,(char*)buff,len);
 801996a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8019974:	f107 0108 	add.w	r1, r7, #8
 8019978:	4618      	mov	r0, r3
 801997a:	f000 f803 	bl	8019984 <send_tcp>
		if(xQueueReceive(shell_queue_send,buff+len,(TickType_t)100) == pdPASS){
 801997e:	e7dc      	b.n	801993a <transmit_data+0x1a>
 8019980:	200190e0 	.word	0x200190e0

08019984 <send_tcp>:
			}
		}
	}
}
static void send_tcp(const int sock,char* buff,uint16_t len){
 8019984:	b580      	push	{r7, lr}
 8019986:	b084      	sub	sp, #16
 8019988:	af00      	add	r7, sp, #0
 801998a:	60f8      	str	r0, [r7, #12]
 801998c:	60b9      	str	r1, [r7, #8]
 801998e:	4613      	mov	r3, r2
 8019990:	80fb      	strh	r3, [r7, #6]
    xSemaphoreTake(tranmiter_semphr,portMAX_DELAY);
 8019992:	4b0c      	ldr	r3, [pc, #48]	; (80199c4 <send_tcp+0x40>)
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	f04f 31ff 	mov.w	r1, #4294967295
 801999a:	4618      	mov	r0, r3
 801999c:	f7ec f964 	bl	8005c68 <xQueueSemaphoreTake>
    send(sock, buff,len, 0);
 80199a0:	88fa      	ldrh	r2, [r7, #6]
 80199a2:	2300      	movs	r3, #0
 80199a4:	68b9      	ldr	r1, [r7, #8]
 80199a6:	68f8      	ldr	r0, [r7, #12]
 80199a8:	f7f1 fad8 	bl	800af5c <lwip_send>
    xSemaphoreGive(tranmiter_semphr);
 80199ac:	4b05      	ldr	r3, [pc, #20]	; (80199c4 <send_tcp+0x40>)
 80199ae:	6818      	ldr	r0, [r3, #0]
 80199b0:	2300      	movs	r3, #0
 80199b2:	2200      	movs	r2, #0
 80199b4:	2100      	movs	r1, #0
 80199b6:	f7eb fe51 	bl	800565c <xQueueGenericSend>
}
 80199ba:	bf00      	nop
 80199bc:	3710      	adds	r7, #16
 80199be:	46bd      	mov	sp, r7
 80199c0:	bd80      	pop	{r7, pc}
 80199c2:	bf00      	nop
 80199c4:	200190e4 	.word	0x200190e4

080199c8 <board_init>:
BSP_GPIO spi1_cs,spi2_cs;
BSP_SPI spi1,spi2;

extern SPI_HandleTypeDef hspi1;

void board_init(){
 80199c8:	b580      	push	{r7, lr}
 80199ca:	af00      	add	r7, sp, #0
	gpio_init(&spi1_cs);
 80199cc:	4808      	ldr	r0, [pc, #32]	; (80199f0 <board_init+0x28>)
 80199ce:	f000 f819 	bl	8019a04 <gpio_init>
	gpio_init(&spi2_cs);
 80199d2:	4808      	ldr	r0, [pc, #32]	; (80199f4 <board_init+0x2c>)
 80199d4:	f000 f816 	bl	8019a04 <gpio_init>
	spi_init(&spi1, &hspi1,&spi1_cs);
 80199d8:	4a05      	ldr	r2, [pc, #20]	; (80199f0 <board_init+0x28>)
 80199da:	4907      	ldr	r1, [pc, #28]	; (80199f8 <board_init+0x30>)
 80199dc:	4807      	ldr	r0, [pc, #28]	; (80199fc <board_init+0x34>)
 80199de:	f000 f81c 	bl	8019a1a <spi_init>
	spi_init(&spi2, &hspi1,&spi2_cs);
 80199e2:	4a04      	ldr	r2, [pc, #16]	; (80199f4 <board_init+0x2c>)
 80199e4:	4904      	ldr	r1, [pc, #16]	; (80199f8 <board_init+0x30>)
 80199e6:	4806      	ldr	r0, [pc, #24]	; (8019a00 <board_init+0x38>)
 80199e8:	f000 f817 	bl	8019a1a <spi_init>
}
 80199ec:	bf00      	nop
 80199ee:	bd80      	pop	{r7, pc}
 80199f0:	20019108 	.word	0x20019108
 80199f4:	200190f8 	.word	0x200190f8
 80199f8:	20010be0 	.word	0x20010be0
 80199fc:	20019100 	.word	0x20019100
 8019a00:	200190f0 	.word	0x200190f0

08019a04 <gpio_init>:


#include "gpio.h"


int gpio_init(BSP_GPIO *p_gpio){
 8019a04:	b480      	push	{r7}
 8019a06:	b083      	sub	sp, #12
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	6078      	str	r0, [r7, #4]
	return 0;
 8019a0c:	2300      	movs	r3, #0
}
 8019a0e:	4618      	mov	r0, r3
 8019a10:	370c      	adds	r7, #12
 8019a12:	46bd      	mov	sp, r7
 8019a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a18:	4770      	bx	lr

08019a1a <spi_init>:
 */
#include "spi.h"



void spi_init(BSP_SPI *spi, SPI_HandleTypeDef *driver,BSP_GPIO *cs_pin){
 8019a1a:	b480      	push	{r7}
 8019a1c:	b085      	sub	sp, #20
 8019a1e:	af00      	add	r7, sp, #0
 8019a20:	60f8      	str	r0, [r7, #12]
 8019a22:	60b9      	str	r1, [r7, #8]
 8019a24:	607a      	str	r2, [r7, #4]
	spi->p_driver = driver;
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	68ba      	ldr	r2, [r7, #8]
 8019a2a:	601a      	str	r2, [r3, #0]
	spi->p_cs = cs_pin;
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	687a      	ldr	r2, [r7, #4]
 8019a30:	605a      	str	r2, [r3, #4]
}
 8019a32:	bf00      	nop
 8019a34:	3714      	adds	r7, #20
 8019a36:	46bd      	mov	sp, r7
 8019a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3c:	4770      	bx	lr

08019a3e <ate_init>:


#include "ate.h"


void ate_init(ATE *p_ate,ATE_Config *p_config){
 8019a3e:	b480      	push	{r7}
 8019a40:	b083      	sub	sp, #12
 8019a42:	af00      	add	r7, sp, #0
 8019a44:	6078      	str	r0, [r7, #4]
 8019a46:	6039      	str	r1, [r7, #0]

}
 8019a48:	bf00      	nop
 8019a4a:	370c      	adds	r7, #12
 8019a4c:	46bd      	mov	sp, r7
 8019a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a52:	4770      	bx	lr

08019a54 <fifo_create>:
/************************** Variable Definitions ******************************/

/********************* Exported Function Definitions **************************/

uint8_t fifo_create(fifo_t* p_fifo, void * buf, uint16_t count, size_t size)
{
 8019a54:	b480      	push	{r7}
 8019a56:	b085      	sub	sp, #20
 8019a58:	af00      	add	r7, sp, #0
 8019a5a:	60f8      	str	r0, [r7, #12]
 8019a5c:	60b9      	str	r1, [r7, #8]
 8019a5e:	603b      	str	r3, [r7, #0]
 8019a60:	4613      	mov	r3, r2
 8019a62:	80fb      	strh	r3, [r7, #6]
    // Sanity check for memory and element sizes
    if (buf != NULL && p_fifo != NULL && count != 0) {
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d01c      	beq.n	8019aa4 <fifo_create+0x50>
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d019      	beq.n	8019aa4 <fifo_create+0x50>
 8019a70:	88fb      	ldrh	r3, [r7, #6]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d016      	beq.n	8019aa4 <fifo_create+0x50>
        p_fifo->itemspace = buf;
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	68ba      	ldr	r2, [r7, #8]
 8019a7a:	601a      	str	r2, [r3, #0]
        p_fifo->itemsize = size;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	683a      	ldr	r2, [r7, #0]
 8019a80:	605a      	str	r2, [r3, #4]
        p_fifo->allocatedbytes = count * size;
 8019a82:	88fb      	ldrh	r3, [r7, #6]
 8019a84:	683a      	ldr	r2, [r7, #0]
 8019a86:	fb02 f203 	mul.w	r2, r2, r3
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	609a      	str	r2, [r3, #8]
        p_fifo->readoffset = 0;
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	2200      	movs	r2, #0
 8019a92:	819a      	strh	r2, [r3, #12]
        p_fifo->writeoffset = 0;
 8019a94:	68fb      	ldr	r3, [r7, #12]
 8019a96:	2200      	movs	r2, #0
 8019a98:	81da      	strh	r2, [r3, #14]
        p_fifo->storedbytes = 0;
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	611a      	str	r2, [r3, #16]
        return 1;
 8019aa0:	2301      	movs	r3, #1
 8019aa2:	e000      	b.n	8019aa6 <fifo_create+0x52>
    }
    return 0;
 8019aa4:	2300      	movs	r3, #0
}
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	3714      	adds	r7, #20
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ab0:	4770      	bx	lr

08019ab2 <fifo_add>:

uint8_t fifo_add(fifo_t* p_fifo, const void * item)
{
 8019ab2:	b580      	push	{r7, lr}
 8019ab4:	b082      	sub	sp, #8
 8019ab6:	af00      	add	r7, sp, #0
 8019ab8:	6078      	str	r0, [r7, #4]
 8019aba:	6039      	str	r1, [r7, #0]
    if (!fifo_is_full(p_fifo)) {
 8019abc:	6878      	ldr	r0, [r7, #4]
 8019abe:	f000 f832 	bl	8019b26 <fifo_is_full>
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d10c      	bne.n	8019ae2 <fifo_add+0x30>
        fifo_copy_to(p_fifo, item);
 8019ac8:	6839      	ldr	r1, [r7, #0]
 8019aca:	6878      	ldr	r0, [r7, #4]
 8019acc:	f000 f876 	bl	8019bbc <fifo_copy_to>
        p_fifo->storedbytes += p_fifo->itemsize;
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	691a      	ldr	r2, [r3, #16]
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	685b      	ldr	r3, [r3, #4]
 8019ad8:	441a      	add	r2, r3
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	611a      	str	r2, [r3, #16]
        return 1;
 8019ade:	2301      	movs	r3, #1
 8019ae0:	e000      	b.n	8019ae4 <fifo_add+0x32>
    } else {
        return 0;
 8019ae2:	2300      	movs	r3, #0
    }
}
 8019ae4:	4618      	mov	r0, r3
 8019ae6:	3708      	adds	r7, #8
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd80      	pop	{r7, pc}

08019aec <fifo_get>:

uint8_t fifo_get(fifo_t* p_fifo, void * item)
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b082      	sub	sp, #8
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]
 8019af4:	6039      	str	r1, [r7, #0]
    if (!fifo_is_empty(p_fifo)) {
 8019af6:	6878      	ldr	r0, [r7, #4]
 8019af8:	f000 f828 	bl	8019b4c <fifo_is_empty>
 8019afc:	4603      	mov	r3, r0
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d10c      	bne.n	8019b1c <fifo_get+0x30>
        fifo_copy_from(p_fifo, item);
 8019b02:	6839      	ldr	r1, [r7, #0]
 8019b04:	6878      	ldr	r0, [r7, #4]
 8019b06:	f000 f832 	bl	8019b6e <fifo_copy_from>
        p_fifo->storedbytes -= p_fifo->itemsize;
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	691a      	ldr	r2, [r3, #16]
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	685b      	ldr	r3, [r3, #4]
 8019b12:	1ad2      	subs	r2, r2, r3
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	611a      	str	r2, [r3, #16]
        return 1;
 8019b18:	2301      	movs	r3, #1
 8019b1a:	e000      	b.n	8019b1e <fifo_get+0x32>
    } else {
        return 0;
 8019b1c:	2300      	movs	r3, #0
    }
}
 8019b1e:	4618      	mov	r0, r3
 8019b20:	3708      	adds	r7, #8
 8019b22:	46bd      	mov	sp, r7
 8019b24:	bd80      	pop	{r7, pc}

08019b26 <fifo_is_full>:
    }

}

uint8_t fifo_is_full(fifo_t* p_fifo)
{
 8019b26:	b480      	push	{r7}
 8019b28:	b083      	sub	sp, #12
 8019b2a:	af00      	add	r7, sp, #0
 8019b2c:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes >= p_fifo->allocatedbytes)
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	691a      	ldr	r2, [r3, #16]
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	689b      	ldr	r3, [r3, #8]
 8019b36:	429a      	cmp	r2, r3
 8019b38:	d301      	bcc.n	8019b3e <fifo_is_full+0x18>
        return 1;
 8019b3a:	2301      	movs	r3, #1
 8019b3c:	e000      	b.n	8019b40 <fifo_is_full+0x1a>
    else
        return 0;
 8019b3e:	2300      	movs	r3, #0
}
 8019b40:	4618      	mov	r0, r3
 8019b42:	370c      	adds	r7, #12
 8019b44:	46bd      	mov	sp, r7
 8019b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4a:	4770      	bx	lr

08019b4c <fifo_is_empty>:

uint8_t fifo_is_empty(fifo_t* p_fifo)
{
 8019b4c:	b480      	push	{r7}
 8019b4e:	b083      	sub	sp, #12
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes == 0)
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	691b      	ldr	r3, [r3, #16]
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d101      	bne.n	8019b60 <fifo_is_empty+0x14>
        return 1;
 8019b5c:	2301      	movs	r3, #1
 8019b5e:	e000      	b.n	8019b62 <fifo_is_empty+0x16>
    else
        return 0;
 8019b60:	2300      	movs	r3, #0
}
 8019b62:	4618      	mov	r0, r3
 8019b64:	370c      	adds	r7, #12
 8019b66:	46bd      	mov	sp, r7
 8019b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6c:	4770      	bx	lr

08019b6e <fifo_copy_from>:
    return 0;
}

/********************* Internal Function Definitions *************************/
static void fifo_copy_from(fifo_t* p_fifo, void * item)
{
 8019b6e:	b580      	push	{r7, lr}
 8019b70:	b082      	sub	sp, #8
 8019b72:	af00      	add	r7, sp, #0
 8019b74:	6078      	str	r0, [r7, #4]
 8019b76:	6039      	str	r1, [r7, #0]
    memcpy(item, (uint8_t*)p_fifo->itemspace + p_fifo->readoffset, p_fifo->itemsize);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	687a      	ldr	r2, [r7, #4]
 8019b7e:	8992      	ldrh	r2, [r2, #12]
 8019b80:	1899      	adds	r1, r3, r2
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	685b      	ldr	r3, [r3, #4]
 8019b86:	461a      	mov	r2, r3
 8019b88:	6838      	ldr	r0, [r7, #0]
 8019b8a:	f001 f825 	bl	801abd8 <memcpy>
    p_fifo->readoffset += p_fifo->itemsize;
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	899a      	ldrh	r2, [r3, #12]
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	685b      	ldr	r3, [r3, #4]
 8019b96:	b29b      	uxth	r3, r3
 8019b98:	4413      	add	r3, r2
 8019b9a:	b29a      	uxth	r2, r3
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	819a      	strh	r2, [r3, #12]
    if (p_fifo->readoffset >= p_fifo->allocatedbytes) {
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	899b      	ldrh	r3, [r3, #12]
 8019ba4:	461a      	mov	r2, r3
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	689b      	ldr	r3, [r3, #8]
 8019baa:	429a      	cmp	r2, r3
 8019bac:	d302      	bcc.n	8019bb4 <fifo_copy_from+0x46>
        p_fifo->readoffset = 0;
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	2200      	movs	r2, #0
 8019bb2:	819a      	strh	r2, [r3, #12]
    }
}
 8019bb4:	bf00      	nop
 8019bb6:	3708      	adds	r7, #8
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	bd80      	pop	{r7, pc}

08019bbc <fifo_copy_to>:

static void fifo_copy_to(fifo_t* p_fifo, const void *item)
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b082      	sub	sp, #8
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
 8019bc4:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)p_fifo->itemspace + p_fifo->writeoffset, item, p_fifo->itemsize);
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	687a      	ldr	r2, [r7, #4]
 8019bcc:	89d2      	ldrh	r2, [r2, #14]
 8019bce:	1898      	adds	r0, r3, r2
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	685b      	ldr	r3, [r3, #4]
 8019bd4:	461a      	mov	r2, r3
 8019bd6:	6839      	ldr	r1, [r7, #0]
 8019bd8:	f000 fffe 	bl	801abd8 <memcpy>
    p_fifo->writeoffset += p_fifo->itemsize;
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	89da      	ldrh	r2, [r3, #14]
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	685b      	ldr	r3, [r3, #4]
 8019be4:	b29b      	uxth	r3, r3
 8019be6:	4413      	add	r3, r2
 8019be8:	b29a      	uxth	r2, r3
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	81da      	strh	r2, [r3, #14]
    if (p_fifo->writeoffset >= p_fifo->allocatedbytes) {
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	89db      	ldrh	r3, [r3, #14]
 8019bf2:	461a      	mov	r2, r3
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	689b      	ldr	r3, [r3, #8]
 8019bf8:	429a      	cmp	r2, r3
 8019bfa:	d302      	bcc.n	8019c02 <fifo_copy_to+0x46>
        p_fifo->writeoffset = 0;
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	2200      	movs	r2, #0
 8019c00:	81da      	strh	r2, [r3, #14]
    }
}
 8019c02:	bf00      	nop
 8019c04:	3708      	adds	r7, #8
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}
	...

08019c0c <retarget_init>:
/**
 * @brief      Initialize FIFO
 *
 * @return     { description_of_the_return_value }
 */
int retarget_init(void) {
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	af00      	add	r7, sp, #0
  fifo_create( &shell_fifo,
 8019c10:	2301      	movs	r3, #1
 8019c12:	2280      	movs	r2, #128	; 0x80
 8019c14:	4903      	ldr	r1, [pc, #12]	; (8019c24 <retarget_init+0x18>)
 8019c16:	4804      	ldr	r0, [pc, #16]	; (8019c28 <retarget_init+0x1c>)
 8019c18:	f7ff ff1c 	bl	8019a54 <fifo_create>
               shell_rx_buffer,
               sizeof(shell_rx_buffer)/sizeof(uint8_t),
               sizeof(uint8_t)
             );

  return 0;
 8019c1c:	2300      	movs	r3, #0
}
 8019c1e:	4618      	mov	r0, r3
 8019c20:	bd80      	pop	{r7, pc}
 8019c22:	bf00      	nop
 8019c24:	200109d8 	.word	0x200109d8
 8019c28:	200191e0 	.word	0x200191e0

08019c2c <serial_get_char>:


int serial_get_char(uint8_t *c) {
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b084      	sub	sp, #16
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
  uint8_t item = 0;
 8019c34:	2300      	movs	r3, #0
 8019c36:	73fb      	strb	r3, [r7, #15]

  if (fifo_is_empty(&shell_fifo) == 1) {
 8019c38:	480d      	ldr	r0, [pc, #52]	; (8019c70 <serial_get_char+0x44>)
 8019c3a:	f7ff ff87 	bl	8019b4c <fifo_is_empty>
 8019c3e:	4603      	mov	r3, r0
 8019c40:	2b01      	cmp	r3, #1
 8019c42:	d101      	bne.n	8019c48 <serial_get_char+0x1c>
    return 0;
 8019c44:	2300      	movs	r3, #0
 8019c46:	e00e      	b.n	8019c66 <serial_get_char+0x3a>
  }

  if(fifo_get(&shell_fifo, &item) == 1) {
 8019c48:	f107 030f 	add.w	r3, r7, #15
 8019c4c:	4619      	mov	r1, r3
 8019c4e:	4808      	ldr	r0, [pc, #32]	; (8019c70 <serial_get_char+0x44>)
 8019c50:	f7ff ff4c 	bl	8019aec <fifo_get>
 8019c54:	4603      	mov	r3, r0
 8019c56:	2b01      	cmp	r3, #1
 8019c58:	d104      	bne.n	8019c64 <serial_get_char+0x38>
    *c = item;
 8019c5a:	7bfa      	ldrb	r2, [r7, #15]
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	701a      	strb	r2, [r3, #0]
    return 1;
 8019c60:	2301      	movs	r3, #1
 8019c62:	e000      	b.n	8019c66 <serial_get_char+0x3a>
  }

  return 0;
 8019c64:	2300      	movs	r3, #0
}
 8019c66:	4618      	mov	r0, r3
 8019c68:	3710      	adds	r7, #16
 8019c6a:	46bd      	mov	sp, r7
 8019c6c:	bd80      	pop	{r7, pc}
 8019c6e:	bf00      	nop
 8019c70:	200191e0 	.word	0x200191e0

08019c74 <__io_getchar>:
#endif
	return ch;
}

uint8_t __io_getchar(void)
{
 8019c74:	b580      	push	{r7, lr}
 8019c76:	b082      	sub	sp, #8
 8019c78:	af00      	add	r7, sp, #0
	uint8_t ch;
  int ret = serial_get_char((uint8_t*)&ch);
 8019c7a:	1cfb      	adds	r3, r7, #3
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	f7ff ffd5 	bl	8019c2c <serial_get_char>
 8019c82:	6078      	str	r0, [r7, #4]

  return (ret == 1) ? ch : 0;
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	2b01      	cmp	r3, #1
 8019c88:	d101      	bne.n	8019c8e <__io_getchar+0x1a>
 8019c8a:	78fb      	ldrb	r3, [r7, #3]
 8019c8c:	e000      	b.n	8019c90 <__io_getchar+0x1c>
 8019c8e:	2300      	movs	r3, #0
}
 8019c90:	4618      	mov	r0, r3
 8019c92:	3708      	adds	r7, #8
 8019c94:	46bd      	mov	sp, r7
 8019c96:	bd80      	pop	{r7, pc}

08019c98 <on_uart_data_received>:

void on_uart_data_received(uint8_t ch) {
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b082      	sub	sp, #8
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	71fb      	strb	r3, [r7, #7]
  if(!fifo_add(&shell_fifo, (const void *)&ch)) {
 8019ca2:	1dfb      	adds	r3, r7, #7
 8019ca4:	4619      	mov	r1, r3
 8019ca6:	4803      	ldr	r0, [pc, #12]	; (8019cb4 <on_uart_data_received+0x1c>)
 8019ca8:	f7ff ff03 	bl	8019ab2 <fifo_add>
    //printf("err");
  }
}
 8019cac:	bf00      	nop
 8019cae:	3708      	adds	r7, #8
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	bd80      	pop	{r7, pc}
 8019cb4:	200191e0 	.word	0x200191e0

08019cb8 <_read>:
    return ch;
}
#elif defined(__GNUC__)

int _read(int file, char *ptr, int len)
{
 8019cb8:	b590      	push	{r4, r7, lr}
 8019cba:	b087      	sub	sp, #28
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	60f8      	str	r0, [r7, #12]
 8019cc0:	60b9      	str	r1, [r7, #8]
 8019cc2:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	617b      	str	r3, [r7, #20]
 8019cc8:	e009      	b.n	8019cde <_read+0x26>
    *ptr++ = __io_getchar();
 8019cca:	68bc      	ldr	r4, [r7, #8]
 8019ccc:	1c63      	adds	r3, r4, #1
 8019cce:	60bb      	str	r3, [r7, #8]
 8019cd0:	f7ff ffd0 	bl	8019c74 <__io_getchar>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	7023      	strb	r3, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8019cd8:	697b      	ldr	r3, [r7, #20]
 8019cda:	3301      	adds	r3, #1
 8019cdc:	617b      	str	r3, [r7, #20]
 8019cde:	697a      	ldr	r2, [r7, #20]
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	429a      	cmp	r2, r3
 8019ce4:	dbf1      	blt.n	8019cca <_read+0x12>
  }

  return len;
 8019ce6:	687b      	ldr	r3, [r7, #4]
}
 8019ce8:	4618      	mov	r0, r3
 8019cea:	371c      	adds	r7, #28
 8019cec:	46bd      	mov	sp, r7
 8019cee:	bd90      	pop	{r4, r7, pc}

08019cf0 <_write>:

int _write(int file, char *ptr, int len)
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b086      	sub	sp, #24
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	60f8      	str	r0, [r7, #12]
 8019cf8:	60b9      	str	r1, [r7, #8]
 8019cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8019cfc:	2300      	movs	r3, #0
 8019cfe:	617b      	str	r3, [r7, #20]
 8019d00:	e009      	b.n	8019d16 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8019d02:	68bb      	ldr	r3, [r7, #8]
 8019d04:	1c5a      	adds	r2, r3, #1
 8019d06:	60ba      	str	r2, [r7, #8]
 8019d08:	781b      	ldrb	r3, [r3, #0]
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f7ff fbe4 	bl	80194d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8019d10:	697b      	ldr	r3, [r7, #20]
 8019d12:	3301      	adds	r3, #1
 8019d14:	617b      	str	r3, [r7, #20]
 8019d16:	697a      	ldr	r2, [r7, #20]
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	429a      	cmp	r2, r3
 8019d1c:	dbf1      	blt.n	8019d02 <_write+0x12>
	}
  return len;
 8019d1e:	687b      	ldr	r3, [r7, #4]
}
 8019d20:	4618      	mov	r0, r3
 8019d22:	3718      	adds	r7, #24
 8019d24:	46bd      	mov	sp, r7
 8019d26:	bd80      	pop	{r7, pc}

08019d28 <SHELL_Init>:
static char g_paramBuffer[SHELL_BUFFER_SIZE];

/********************** Exported Function Definitions *************************/
void SHELL_Init(
    p_shell_context_t context, send_data_cb_t send_cb, recv_data_cb_t recv_cb, printf_data_t shell_printf, char *prompt)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b084      	sub	sp, #16
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	60f8      	str	r0, [r7, #12]
 8019d30:	60b9      	str	r1, [r7, #8]
 8019d32:	607a      	str	r2, [r7, #4]
 8019d34:	603b      	str	r3, [r7, #0]
    assert(send_cb != NULL);
 8019d36:	68bb      	ldr	r3, [r7, #8]
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d105      	bne.n	8019d48 <SHELL_Init+0x20>
 8019d3c:	4b1c      	ldr	r3, [pc, #112]	; (8019db0 <SHELL_Init+0x88>)
 8019d3e:	4a1d      	ldr	r2, [pc, #116]	; (8019db4 <SHELL_Init+0x8c>)
 8019d40:	214d      	movs	r1, #77	; 0x4d
 8019d42:	481d      	ldr	r0, [pc, #116]	; (8019db8 <SHELL_Init+0x90>)
 8019d44:	f000 fdd8 	bl	801a8f8 <__assert_func>
    assert(recv_cb != NULL);
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d105      	bne.n	8019d5a <SHELL_Init+0x32>
 8019d4e:	4b1b      	ldr	r3, [pc, #108]	; (8019dbc <SHELL_Init+0x94>)
 8019d50:	4a18      	ldr	r2, [pc, #96]	; (8019db4 <SHELL_Init+0x8c>)
 8019d52:	214e      	movs	r1, #78	; 0x4e
 8019d54:	4818      	ldr	r0, [pc, #96]	; (8019db8 <SHELL_Init+0x90>)
 8019d56:	f000 fdcf 	bl	801a8f8 <__assert_func>
    assert(prompt != NULL);
 8019d5a:	69bb      	ldr	r3, [r7, #24]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	d105      	bne.n	8019d6c <SHELL_Init+0x44>
 8019d60:	4b17      	ldr	r3, [pc, #92]	; (8019dc0 <SHELL_Init+0x98>)
 8019d62:	4a14      	ldr	r2, [pc, #80]	; (8019db4 <SHELL_Init+0x8c>)
 8019d64:	214f      	movs	r1, #79	; 0x4f
 8019d66:	4814      	ldr	r0, [pc, #80]	; (8019db8 <SHELL_Init+0x90>)
 8019d68:	f000 fdc6 	bl	801a8f8 <__assert_func>
    assert(shell_printf != NULL);
 8019d6c:	683b      	ldr	r3, [r7, #0]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d105      	bne.n	8019d7e <SHELL_Init+0x56>
 8019d72:	4b14      	ldr	r3, [pc, #80]	; (8019dc4 <SHELL_Init+0x9c>)
 8019d74:	4a0f      	ldr	r2, [pc, #60]	; (8019db4 <SHELL_Init+0x8c>)
 8019d76:	2150      	movs	r1, #80	; 0x50
 8019d78:	480f      	ldr	r0, [pc, #60]	; (8019db8 <SHELL_Init+0x90>)
 8019d7a:	f000 fdbd 	bl	801a8f8 <__assert_func>

    /* Memset for context */
    memset(context, 0, sizeof(shell_context_struct));
 8019d7e:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8019d82:	2100      	movs	r1, #0
 8019d84:	68f8      	ldr	r0, [r7, #12]
 8019d86:	f000 ff4f 	bl	801ac28 <memset>
    context->send_data_func = send_cb;
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	68ba      	ldr	r2, [r7, #8]
 8019d8e:	649a      	str	r2, [r3, #72]	; 0x48
    context->recv_data_func = recv_cb;
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	687a      	ldr	r2, [r7, #4]
 8019d94:	64da      	str	r2, [r3, #76]	; 0x4c
    context->printf_data_func = shell_printf;
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	683a      	ldr	r2, [r7, #0]
 8019d9a:	651a      	str	r2, [r3, #80]	; 0x50
    context->prompt = prompt;
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	69ba      	ldr	r2, [r7, #24]
 8019da0:	601a      	str	r2, [r3, #0]

    SHELL_RegisterCommand(&xHelpCommand);
 8019da2:	4809      	ldr	r0, [pc, #36]	; (8019dc8 <SHELL_Init+0xa0>)
 8019da4:	f000 fd72 	bl	801a88c <SHELL_RegisterCommand>
    // SHELL_RegisterCommand(&xExitCommand);
}
 8019da8:	bf00      	nop
 8019daa:	3710      	adds	r7, #16
 8019dac:	46bd      	mov	sp, r7
 8019dae:	bd80      	pop	{r7, pc}
 8019db0:	0801fd10 	.word	0x0801fd10
 8019db4:	08020014 	.word	0x08020014
 8019db8:	0801fd20 	.word	0x0801fd20
 8019dbc:	0801fd44 	.word	0x0801fd44
 8019dc0:	0801fd54 	.word	0x0801fd54
 8019dc4:	0801fd64 	.word	0x0801fd64
 8019dc8:	08020004 	.word	0x08020004

08019dcc <SHELL_Process>:


void SHELL_Process(p_shell_context_t context)
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b084      	sub	sp, #16
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	6078      	str	r0, [r7, #4]

//   static uint32_t tick = 0;
   static uint8_t first_run  = 1;


    if (!context) {
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	f000 8216 	beq.w	801a208 <SHELL_Process+0x43c>
        return;
    }

    if(first_run == 1) {
 8019ddc:	4bad      	ldr	r3, [pc, #692]	; (801a094 <SHELL_Process+0x2c8>)
 8019dde:	781b      	ldrb	r3, [r3, #0]
 8019de0:	2b01      	cmp	r3, #1
 8019de2:	d115      	bne.n	8019e10 <SHELL_Process+0x44>
        context->exit = false;
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	2200      	movs	r2, #0
 8019de8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
        context->printf_data_func("\r\nSHELL (build: %s)\r\n", __DATE__);
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019df0:	49a9      	ldr	r1, [pc, #676]	; (801a098 <SHELL_Process+0x2cc>)
 8019df2:	48aa      	ldr	r0, [pc, #680]	; (801a09c <SHELL_Process+0x2d0>)
 8019df4:	4798      	blx	r3
        context->printf_data_func("Copyright (c) 2022 Technology\r\n");
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019dfa:	48a9      	ldr	r0, [pc, #676]	; (801a0a0 <SHELL_Process+0x2d4>)
 8019dfc:	4798      	blx	r3
        context->printf_data_func(context->prompt);
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019e02:	687a      	ldr	r2, [r7, #4]
 8019e04:	6812      	ldr	r2, [r2, #0]
 8019e06:	4610      	mov	r0, r2
 8019e08:	4798      	blx	r3
        first_run = 0;
 8019e0a:	4ba2      	ldr	r3, [pc, #648]	; (801a094 <SHELL_Process+0x2c8>)
 8019e0c:	2200      	movs	r2, #0
 8019e0e:	701a      	strb	r2, [r3, #0]
    }


     vTaskDelay( 20 / portTICK_PERIOD_MS );  /* sleep a while */
 8019e10:	2014      	movs	r0, #20
 8019e12:	f7ec fca1 	bl	8006758 <vTaskDelay>
//        return;
//    }

//    tick = xTaskGetTickCount();

    if (context->exit) {
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	f040 81f5 	bne.w	801a20c <SHELL_Process+0x440>
        return;
    }
    ch = GetChar(context);
 8019e22:	6878      	ldr	r0, [r7, #4]
 8019e24:	f000 fd58 	bl	801a8d8 <GetChar>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	72fb      	strb	r3, [r7, #11]
    if(ch == 0) {
 8019e2c:	7afb      	ldrb	r3, [r7, #11]
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	f000 81ee 	beq.w	801a210 <SHELL_Process+0x444>
      return;
    }
    /* Special key */
    if (ch == KEY_ESC) {
 8019e34:	7afb      	ldrb	r3, [r7, #11]
 8019e36:	2b1b      	cmp	r3, #27
 8019e38:	d103      	bne.n	8019e42 <SHELL_Process+0x76>
        context->stat = kSHELL_Special;
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	2201      	movs	r2, #1
 8019e3e:	711a      	strb	r2, [r3, #4]
        return;
 8019e40:	e1e9      	b.n	801a216 <SHELL_Process+0x44a>
    } else if (context->stat == kSHELL_Special) {
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	791b      	ldrb	r3, [r3, #4]
 8019e46:	2b01      	cmp	r3, #1
 8019e48:	d10a      	bne.n	8019e60 <SHELL_Process+0x94>
        /* Function key */
        if (ch == '[') {
 8019e4a:	7afb      	ldrb	r3, [r7, #11]
 8019e4c:	2b5b      	cmp	r3, #91	; 0x5b
 8019e4e:	d103      	bne.n	8019e58 <SHELL_Process+0x8c>
            context->stat = kSHELL_Function;
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	2202      	movs	r2, #2
 8019e54:	711a      	strb	r2, [r3, #4]
            return;
 8019e56:	e1de      	b.n	801a216 <SHELL_Process+0x44a>
        }
        context->stat = kSHELL_Normal;
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	2200      	movs	r2, #0
 8019e5c:	711a      	strb	r2, [r3, #4]
 8019e5e:	e134      	b.n	801a0ca <SHELL_Process+0x2fe>
    } else if (context->stat == kSHELL_Function) {
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	791b      	ldrb	r3, [r3, #4]
 8019e64:	2b02      	cmp	r3, #2
 8019e66:	d17b      	bne.n	8019f60 <SHELL_Process+0x194>
        context->stat = kSHELL_Normal;
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	2200      	movs	r2, #0
 8019e6c:	711a      	strb	r2, [r3, #4]

        switch ((uint8_t)ch) {
 8019e6e:	7afb      	ldrb	r3, [r7, #11]
 8019e70:	3b41      	subs	r3, #65	; 0x41
 8019e72:	2b03      	cmp	r3, #3
 8019e74:	d86a      	bhi.n	8019f4c <SHELL_Process+0x180>
 8019e76:	a201      	add	r2, pc, #4	; (adr r2, 8019e7c <SHELL_Process+0xb0>)
 8019e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e7c:	08019e8d 	.word	0x08019e8d
 8019e80:	08019ec3 	.word	0x08019ec3
 8019e84:	08019f13 	.word	0x08019f13
 8019e88:	08019eef 	.word	0x08019eef
            /* History operation here */
            case 'A': /* Up key */
                GetHistoryCommand(context, context->hist_current);
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019e92:	b2db      	uxtb	r3, r3
 8019e94:	4619      	mov	r1, r3
 8019e96:	6878      	ldr	r0, [r7, #4]
 8019e98:	f000 fb2c 	bl	801a4f4 <GetHistoryCommand>
                if (context->hist_current < (context->hist_count - 1)) {
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019ea2:	461a      	mov	r2, r3
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8019eaa:	3b01      	subs	r3, #1
 8019eac:	429a      	cmp	r2, r3
 8019eae:	da4f      	bge.n	8019f50 <SHELL_Process+0x184>
                    context->hist_current++;
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019eb6:	3301      	adds	r3, #1
 8019eb8:	b29a      	uxth	r2, r3
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 8019ec0:	e046      	b.n	8019f50 <SHELL_Process+0x184>
            case 'B': /* Down key */
                GetHistoryCommand(context, context->hist_current);
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019ec8:	b2db      	uxtb	r3, r3
 8019eca:	4619      	mov	r1, r3
 8019ecc:	6878      	ldr	r0, [r7, #4]
 8019ece:	f000 fb11 	bl	801a4f4 <GetHistoryCommand>
                if (context->hist_current > 0) {
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d03b      	beq.n	8019f54 <SHELL_Process+0x188>
                    context->hist_current--;
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019ee2:	3b01      	subs	r3, #1
 8019ee4:	b29a      	uxth	r2, r3
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 8019eec:	e032      	b.n	8019f54 <SHELL_Process+0x188>
            case 'D': /* Left key */
                if (context->c_pos) {
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d02f      	beq.n	8019f58 <SHELL_Process+0x18c>
                    context->printf_data_func("\b");
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019efc:	4869      	ldr	r0, [pc, #420]	; (801a0a4 <SHELL_Process+0x2d8>)
 8019efe:	4798      	blx	r3
                    context->c_pos--;
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019f06:	3b01      	subs	r3, #1
 8019f08:	b2da      	uxtb	r2, r3
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 8019f10:	e022      	b.n	8019f58 <SHELL_Process+0x18c>
            case 'C': /* Right key */
                if (context->c_pos < context->l_pos) {
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019f1e:	429a      	cmp	r2, r3
 8019f20:	d21c      	bcs.n	8019f5c <SHELL_Process+0x190>
                    context->printf_data_func("%c", context->line[context->c_pos]);
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f26:	687a      	ldr	r2, [r7, #4]
 8019f28:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8019f2c:	4611      	mov	r1, r2
 8019f2e:	687a      	ldr	r2, [r7, #4]
 8019f30:	440a      	add	r2, r1
 8019f32:	7952      	ldrb	r2, [r2, #5]
 8019f34:	4611      	mov	r1, r2
 8019f36:	485c      	ldr	r0, [pc, #368]	; (801a0a8 <SHELL_Process+0x2dc>)
 8019f38:	4798      	blx	r3
                    context->c_pos++;
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019f40:	3301      	adds	r3, #1
 8019f42:	b2da      	uxtb	r2, r3
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 8019f4a:	e007      	b.n	8019f5c <SHELL_Process+0x190>
            default:
                break;
 8019f4c:	bf00      	nop
 8019f4e:	e162      	b.n	801a216 <SHELL_Process+0x44a>
                break;
 8019f50:	bf00      	nop
 8019f52:	e160      	b.n	801a216 <SHELL_Process+0x44a>
                break;
 8019f54:	bf00      	nop
 8019f56:	e15e      	b.n	801a216 <SHELL_Process+0x44a>
                break;
 8019f58:	bf00      	nop
 8019f5a:	e15c      	b.n	801a216 <SHELL_Process+0x44a>
                break;
 8019f5c:	bf00      	nop
        }
        return;
 8019f5e:	e15a      	b.n	801a216 <SHELL_Process+0x44a>
    }
    /* Handle tab key */
    else if (ch == '\t') {
 8019f60:	7afb      	ldrb	r3, [r7, #11]
 8019f62:	2b09      	cmp	r3, #9
 8019f64:	d124      	bne.n	8019fb0 <SHELL_Process+0x1e4>
#if SHELL_AUTO_COMPLETE
        /* Move the cursor to the beginning of line */
        for (i = 0; i < context->c_pos; i++) {
 8019f66:	2300      	movs	r3, #0
 8019f68:	60fb      	str	r3, [r7, #12]
 8019f6a:	e006      	b.n	8019f7a <SHELL_Process+0x1ae>
            context->printf_data_func("\b");
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f70:	484c      	ldr	r0, [pc, #304]	; (801a0a4 <SHELL_Process+0x2d8>)
 8019f72:	4798      	blx	r3
        for (i = 0; i < context->c_pos; i++) {
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	3301      	adds	r3, #1
 8019f78:	60fb      	str	r3, [r7, #12]
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019f80:	461a      	mov	r2, r3
 8019f82:	68fb      	ldr	r3, [r7, #12]
 8019f84:	4293      	cmp	r3, r2
 8019f86:	dbf1      	blt.n	8019f6c <SHELL_Process+0x1a0>
        }
        /* Do auto complete */
        AutoComplete(context);
 8019f88:	6878      	ldr	r0, [r7, #4]
 8019f8a:	f000 fb15 	bl	801a5b8 <AutoComplete>
        /* Move position to end */
        context->c_pos = context->l_pos = StrLen(context->line);
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	3305      	adds	r3, #5
 8019f92:	4618      	mov	r0, r3
 8019f94:	f000 fbbd 	bl	801a712 <StrLen>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	b2da      	uxtb	r2, r3
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
#endif
        return;
 8019fae:	e132      	b.n	801a216 <SHELL_Process+0x44a>
    }
#if SHELL_SEARCH_IN_HIST
    /* Search command in history */
    else if ((ch == '`') && (context->l_pos == 0) && (context->line[0] == 0x00)) {
 8019fb0:	7afb      	ldrb	r3, [r7, #11]
 8019fb2:	2b60      	cmp	r3, #96	; 0x60
 8019fb4:	d109      	bne.n	8019fca <SHELL_Process+0x1fe>
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d104      	bne.n	8019fca <SHELL_Process+0x1fe>
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	795b      	ldrb	r3, [r3, #5]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	f000 8080 	beq.w	801a0ca <SHELL_Process+0x2fe>
    }
#endif
    /* Handle backspace key */
    else if ((ch == KET_DEL) || (ch == '\b')) {
 8019fca:	7afb      	ldrb	r3, [r7, #11]
 8019fcc:	2b7f      	cmp	r3, #127	; 0x7f
 8019fce:	d002      	beq.n	8019fd6 <SHELL_Process+0x20a>
 8019fd0:	7afb      	ldrb	r3, [r7, #11]
 8019fd2:	2b08      	cmp	r3, #8
 8019fd4:	d179      	bne.n	801a0ca <SHELL_Process+0x2fe>
        /* There must be at last one char */
        if (context->c_pos == 0) {
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	f000 8119 	beq.w	801a214 <SHELL_Process+0x448>
            return;
        }

        context->l_pos--;
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019fe8:	3b01      	subs	r3, #1
 8019fea:	b2da      	uxtb	r2, r3
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        context->c_pos--;
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019ff8:	3b01      	subs	r3, #1
 8019ffa:	b2da      	uxtb	r2, r3
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

        if (context->l_pos > context->c_pos) {
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a00e:	429a      	cmp	r2, r3
 801a010:	d94e      	bls.n	801a0b0 <SHELL_Process+0x2e4>
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a018:	461a      	mov	r2, r3
 801a01a:	687b      	ldr	r3, [r7, #4]
 801a01c:	4413      	add	r3, r2
 801a01e:	1d58      	adds	r0, r3, #5
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a026:	3301      	adds	r3, #1
 801a028:	687a      	ldr	r2, [r7, #4]
 801a02a:	4413      	add	r3, r2
 801a02c:	1d59      	adds	r1, r3, #5
                    context->l_pos - context->c_pos);
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a034:	461a      	mov	r2, r3
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a03c:	1ad3      	subs	r3, r2, r3
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 801a03e:	461a      	mov	r2, r3
 801a040:	f000 fdd8 	bl	801abf4 <memmove>
            context->line[context->l_pos] = 0;
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a04a:	461a      	mov	r2, r3
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	4413      	add	r3, r2
 801a050:	2200      	movs	r2, #0
 801a052:	715a      	strb	r2, [r3, #5]
            context->printf_data_func("\b%s  \b", &context->line[context->c_pos]);
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a058:	687a      	ldr	r2, [r7, #4]
 801a05a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 801a05e:	4611      	mov	r1, r2
 801a060:	687a      	ldr	r2, [r7, #4]
 801a062:	440a      	add	r2, r1
 801a064:	3205      	adds	r2, #5
 801a066:	4611      	mov	r1, r2
 801a068:	4810      	ldr	r0, [pc, #64]	; (801a0ac <SHELL_Process+0x2e0>)
 801a06a:	4798      	blx	r3

            /* Reset position */
            for (i = context->c_pos; i <= context->l_pos; i++) {
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a072:	60fb      	str	r3, [r7, #12]
 801a074:	e006      	b.n	801a084 <SHELL_Process+0x2b8>
                context->printf_data_func("\b");
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a07a:	480a      	ldr	r0, [pc, #40]	; (801a0a4 <SHELL_Process+0x2d8>)
 801a07c:	4798      	blx	r3
            for (i = context->c_pos; i <= context->l_pos; i++) {
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	3301      	adds	r3, #1
 801a082:	60fb      	str	r3, [r7, #12]
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a08a:	461a      	mov	r2, r3
 801a08c:	68fb      	ldr	r3, [r7, #12]
 801a08e:	4293      	cmp	r3, r2
 801a090:	ddf1      	ble.n	801a076 <SHELL_Process+0x2aa>
        }  else  {
            /* Normal backspace operation */
            context->printf_data_func("\b \b");
            context->line[context->l_pos] = 0;
        }
        return;
 801a092:	e0c0      	b.n	801a216 <SHELL_Process+0x44a>
 801a094:	2000003c 	.word	0x2000003c
 801a098:	0801fd7c 	.word	0x0801fd7c
 801a09c:	0801fd88 	.word	0x0801fd88
 801a0a0:	0801fda0 	.word	0x0801fda0
 801a0a4:	0801fdc0 	.word	0x0801fdc0
 801a0a8:	0801fdc4 	.word	0x0801fdc4
 801a0ac:	0801fdc8 	.word	0x0801fdc8
            context->printf_data_func("\b \b");
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a0b4:	4859      	ldr	r0, [pc, #356]	; (801a21c <SHELL_Process+0x450>)
 801a0b6:	4798      	blx	r3
            context->line[context->l_pos] = 0;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a0be:	461a      	mov	r2, r3
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	4413      	add	r3, r2
 801a0c4:	2200      	movs	r2, #0
 801a0c6:	715a      	strb	r2, [r3, #5]
        return;
 801a0c8:	e0a5      	b.n	801a216 <SHELL_Process+0x44a>
    } else {
    }

    /* Input too long */
    if (context->l_pos >= (SHELL_BUFFER_SIZE - 1)) {
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a0d0:	2b3e      	cmp	r3, #62	; 0x3e
 801a0d2:	d903      	bls.n	801a0dc <SHELL_Process+0x310>
        context->l_pos = 0;
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	2200      	movs	r2, #0
 801a0d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }

    /* Handle end of line, break */
    if ((ch == '\r') || (ch == '\n')) {
 801a0dc:	7afb      	ldrb	r3, [r7, #11]
 801a0de:	2b0d      	cmp	r3, #13
 801a0e0:	d002      	beq.n	801a0e8 <SHELL_Process+0x31c>
 801a0e2:	7afb      	ldrb	r3, [r7, #11]
 801a0e4:	2b0a      	cmp	r3, #10
 801a0e6:	d125      	bne.n	801a134 <SHELL_Process+0x368>
        context->printf_data_func("\r\n");
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a0ec:	484c      	ldr	r0, [pc, #304]	; (801a220 <SHELL_Process+0x454>)
 801a0ee:	4798      	blx	r3
        ProcessCommand(context, context->line);
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	3305      	adds	r3, #5
 801a0f4:	4619      	mov	r1, r3
 801a0f6:	6878      	ldr	r0, [r7, #4]
 801a0f8:	f000 f8be 	bl	801a278 <ProcessCommand>
        /* Reset all params */
        context->c_pos = context->l_pos = 0;
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	2200      	movs	r2, #0
 801a100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        context->hist_current = 0;
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	2200      	movs	r2, #0
 801a114:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        context->printf_data_func(context->prompt);
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a11c:	687a      	ldr	r2, [r7, #4]
 801a11e:	6812      	ldr	r2, [r2, #0]
 801a120:	4610      	mov	r0, r2
 801a122:	4798      	blx	r3
        memset(context->line, 0, sizeof(context->line));
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	3305      	adds	r3, #5
 801a128:	2240      	movs	r2, #64	; 0x40
 801a12a:	2100      	movs	r1, #0
 801a12c:	4618      	mov	r0, r3
 801a12e:	f000 fd7b 	bl	801ac28 <memset>
        return;
 801a132:	e070      	b.n	801a216 <SHELL_Process+0x44a>
    }

    /* Normal character */
    if (context->c_pos < context->l_pos) {
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a140:	429a      	cmp	r2, r3
 801a142:	d240      	bcs.n	801a1c6 <SHELL_Process+0x3fa>
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 801a144:	687b      	ldr	r3, [r7, #4]
 801a146:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a14a:	3301      	adds	r3, #1
 801a14c:	687a      	ldr	r2, [r7, #4]
 801a14e:	4413      	add	r3, r2
 801a150:	1d58      	adds	r0, r3, #5
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a158:	461a      	mov	r2, r3
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	4413      	add	r3, r2
 801a15e:	1d59      	adds	r1, r3, #5
                context->l_pos - context->c_pos);
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a166:	461a      	mov	r2, r3
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a16e:	1ad3      	subs	r3, r2, r3
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 801a170:	461a      	mov	r2, r3
 801a172:	f000 fd3f 	bl	801abf4 <memmove>
        context->line[context->c_pos] = ch;
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a17c:	461a      	mov	r2, r3
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	4413      	add	r3, r2
 801a182:	7afa      	ldrb	r2, [r7, #11]
 801a184:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%s", &context->line[context->c_pos]);
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a18a:	687a      	ldr	r2, [r7, #4]
 801a18c:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 801a190:	4611      	mov	r1, r2
 801a192:	687a      	ldr	r2, [r7, #4]
 801a194:	440a      	add	r2, r1
 801a196:	3205      	adds	r2, #5
 801a198:	4611      	mov	r1, r2
 801a19a:	4822      	ldr	r0, [pc, #136]	; (801a224 <SHELL_Process+0x458>)
 801a19c:	4798      	blx	r3
        /* Move the cursor to new position */
        for (i = context->c_pos; i < context->l_pos; i++)
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a1a4:	60fb      	str	r3, [r7, #12]
 801a1a6:	e006      	b.n	801a1b6 <SHELL_Process+0x3ea>
        {
            context->printf_data_func("\b");
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a1ac:	481e      	ldr	r0, [pc, #120]	; (801a228 <SHELL_Process+0x45c>)
 801a1ae:	4798      	blx	r3
        for (i = context->c_pos; i < context->l_pos; i++)
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	3301      	adds	r3, #1
 801a1b4:	60fb      	str	r3, [r7, #12]
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a1bc:	461a      	mov	r2, r3
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	4293      	cmp	r3, r2
 801a1c2:	dbf1      	blt.n	801a1a8 <SHELL_Process+0x3dc>
 801a1c4:	e00d      	b.n	801a1e2 <SHELL_Process+0x416>
        }
    } else {
        context->line[context->l_pos] = ch;
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a1cc:	461a      	mov	r2, r3
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	4413      	add	r3, r2
 801a1d2:	7afa      	ldrb	r2, [r7, #11]
 801a1d4:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%c", ch);
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a1da:	7afa      	ldrb	r2, [r7, #11]
 801a1dc:	4611      	mov	r1, r2
 801a1de:	4813      	ldr	r0, [pc, #76]	; (801a22c <SHELL_Process+0x460>)
 801a1e0:	4798      	blx	r3
    }

    ch = 0;
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	72fb      	strb	r3, [r7, #11]
    context->l_pos++;
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a1ec:	3301      	adds	r3, #1
 801a1ee:	b2da      	uxtb	r2, r3
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos++;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801a1fc:	3301      	adds	r3, #1
 801a1fe:	b2da      	uxtb	r2, r3
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 801a206:	e006      	b.n	801a216 <SHELL_Process+0x44a>
        return;
 801a208:	bf00      	nop
 801a20a:	e004      	b.n	801a216 <SHELL_Process+0x44a>
        return;
 801a20c:	bf00      	nop
 801a20e:	e002      	b.n	801a216 <SHELL_Process+0x44a>
      return;
 801a210:	bf00      	nop
 801a212:	e000      	b.n	801a216 <SHELL_Process+0x44a>
            return;
 801a214:	bf00      	nop
}
 801a216:	3710      	adds	r7, #16
 801a218:	46bd      	mov	sp, r7
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	0801fdd0 	.word	0x0801fdd0
 801a220:	0801fdd4 	.word	0x0801fdd4
 801a224:	0801fdd8 	.word	0x0801fdd8
 801a228:	0801fdc0 	.word	0x0801fdc0
 801a22c:	0801fdc4 	.word	0x0801fdc4

0801a230 <HelpCommand>:

/********************** Internal Function Definitions *************************/
static int32_t HelpCommand(p_shell_context_t context, int32_t argc, char **argv)
{
 801a230:	b580      	push	{r7, lr}
 801a232:	b086      	sub	sp, #24
 801a234:	af00      	add	r7, sp, #0
 801a236:	60f8      	str	r0, [r7, #12]
 801a238:	60b9      	str	r1, [r7, #8]
 801a23a:	607a      	str	r2, [r7, #4]
    uint8_t i = 0;
 801a23c:	2300      	movs	r3, #0
 801a23e:	75fb      	strb	r3, [r7, #23]

    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801a240:	2300      	movs	r3, #0
 801a242:	75fb      	strb	r3, [r7, #23]
 801a244:	e00b      	b.n	801a25e <HelpCommand+0x2e>
        context->printf_data_func(g_RegisteredCommands.CommandList[i]->pcHelpString);
 801a246:	68fb      	ldr	r3, [r7, #12]
 801a248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a24a:	7dfa      	ldrb	r2, [r7, #23]
 801a24c:	4909      	ldr	r1, [pc, #36]	; (801a274 <HelpCommand+0x44>)
 801a24e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801a252:	6852      	ldr	r2, [r2, #4]
 801a254:	4610      	mov	r0, r2
 801a256:	4798      	blx	r3
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801a258:	7dfb      	ldrb	r3, [r7, #23]
 801a25a:	3301      	adds	r3, #1
 801a25c:	75fb      	strb	r3, [r7, #23]
 801a25e:	4b05      	ldr	r3, [pc, #20]	; (801a274 <HelpCommand+0x44>)
 801a260:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a264:	7dfa      	ldrb	r2, [r7, #23]
 801a266:	429a      	cmp	r2, r3
 801a268:	d3ed      	bcc.n	801a246 <HelpCommand+0x16>
    }
    return 0;
 801a26a:	2300      	movs	r3, #0
}
 801a26c:	4618      	mov	r0, r3
 801a26e:	3718      	adds	r7, #24
 801a270:	46bd      	mov	sp, r7
 801a272:	bd80      	pop	{r7, pc}
 801a274:	20010a58 	.word	0x20010a58

0801a278 <ProcessCommand>:
//    context->exit = true;
//    return 0;
//}

static void ProcessCommand(p_shell_context_t context, const char *cmd)
{
 801a278:	b5b0      	push	{r4, r5, r7, lr}
 801a27a:	b0c6      	sub	sp, #280	; 0x118
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	1d3b      	adds	r3, r7, #4
 801a280:	6018      	str	r0, [r3, #0]
 801a282:	463b      	mov	r3, r7
 801a284:	6019      	str	r1, [r3, #0]
    static const shell_command_context_t *tmpCommand = NULL;
    static const char *tmpCommandString;
    int32_t argc;
    char *argv[SHELL_BUFFER_SIZE];
    uint8_t flag = 1;
 801a286:	2301      	movs	r3, #1
 801a288:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    uint8_t tmpCommandLen;
    uint8_t tmpLen;
    uint8_t i = 0;
 801a28c:	2300      	movs	r3, #0
 801a28e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    tmpLen = StrLen(cmd);
 801a292:	463b      	mov	r3, r7
 801a294:	6818      	ldr	r0, [r3, #0]
 801a296:	f000 fa3c 	bl	801a712 <StrLen>
 801a29a:	4603      	mov	r3, r0
 801a29c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    argc = ParseLine(cmd, tmpLen, argv);
 801a2a0:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 801a2a4:	f107 020c 	add.w	r2, r7, #12
 801a2a8:	463b      	mov	r3, r7
 801a2aa:	6818      	ldr	r0, [r3, #0]
 801a2ac:	f000 fa70 	bl	801a790 <ParseLine>
 801a2b0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    if ((tmpCommand == NULL) && (argc > 0)) {
 801a2b4:	4b8b      	ldr	r3, [pc, #556]	; (801a4e4 <ProcessCommand+0x26c>)
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d168      	bne.n	801a38e <ProcessCommand+0x116>
 801a2bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	dd64      	ble.n	801a38e <ProcessCommand+0x116>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801a2c4:	2300      	movs	r3, #0
 801a2c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801a2ca:	e057      	b.n	801a37c <ProcessCommand+0x104>
            tmpCommand = g_RegisteredCommands.CommandList[i];
 801a2cc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801a2d0:	4a85      	ldr	r2, [pc, #532]	; (801a4e8 <ProcessCommand+0x270>)
 801a2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a2d6:	4a83      	ldr	r2, [pc, #524]	; (801a4e4 <ProcessCommand+0x26c>)
 801a2d8:	6013      	str	r3, [r2, #0]
            tmpCommandString = tmpCommand->pcCommand;
 801a2da:	4b82      	ldr	r3, [pc, #520]	; (801a4e4 <ProcessCommand+0x26c>)
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	4a82      	ldr	r2, [pc, #520]	; (801a4ec <ProcessCommand+0x274>)
 801a2e2:	6013      	str	r3, [r2, #0]
            tmpCommandLen = StrLen(tmpCommandString);
 801a2e4:	4b81      	ldr	r3, [pc, #516]	; (801a4ec <ProcessCommand+0x274>)
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	f000 fa12 	bl	801a712 <StrLen>
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            /* Compare with space or end of string */
            if ((cmd[tmpCommandLen] == ' ') || (cmd[tmpCommandLen] == 0x00)) {
 801a2f4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 801a2f8:	463a      	mov	r2, r7
 801a2fa:	6812      	ldr	r2, [r2, #0]
 801a2fc:	4413      	add	r3, r2
 801a2fe:	781b      	ldrb	r3, [r3, #0]
 801a300:	2b20      	cmp	r3, #32
 801a302:	d007      	beq.n	801a314 <ProcessCommand+0x9c>
 801a304:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 801a308:	463a      	mov	r2, r7
 801a30a:	6812      	ldr	r2, [r2, #0]
 801a30c:	4413      	add	r3, r2
 801a30e:	781b      	ldrb	r3, [r3, #0]
 801a310:	2b00      	cmp	r3, #0
 801a312:	d12e      	bne.n	801a372 <ProcessCommand+0xfa>
                if (StrCompare(tmpCommandString, argv[0], tmpCommandLen) == 0) {
 801a314:	4b75      	ldr	r3, [pc, #468]	; (801a4ec <ProcessCommand+0x274>)
 801a316:	6818      	ldr	r0, [r3, #0]
 801a318:	f107 030c 	add.w	r3, r7, #12
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 801a322:	4619      	mov	r1, r3
 801a324:	f000 fa0d 	bl	801a742 <StrCompare>
 801a328:	4603      	mov	r3, r0
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d121      	bne.n	801a372 <ProcessCommand+0xfa>
                    if ((tmpCommand->cExpectedNumberOfParameters == 0) && (argc == 1)) {
 801a32e:	4b6d      	ldr	r3, [pc, #436]	; (801a4e4 <ProcessCommand+0x26c>)
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	7b1b      	ldrb	r3, [r3, #12]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d107      	bne.n	801a348 <ProcessCommand+0xd0>
 801a338:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a33c:	2b01      	cmp	r3, #1
 801a33e:	d103      	bne.n	801a348 <ProcessCommand+0xd0>
                        flag = 0;
 801a340:	2300      	movs	r3, #0
 801a342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                            flag = 0;
                        }
                    } else {
                        flag = 1;
                    }
                    break;
 801a346:	e021      	b.n	801a38c <ProcessCommand+0x114>
                    } else if (tmpCommand->cExpectedNumberOfParameters > 0) {
 801a348:	4b66      	ldr	r3, [pc, #408]	; (801a4e4 <ProcessCommand+0x26c>)
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	7b1b      	ldrb	r3, [r3, #12]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d00b      	beq.n	801a36a <ProcessCommand+0xf2>
                        if ((argc - 1) == tmpCommand->cExpectedNumberOfParameters) {
 801a352:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801a356:	3b01      	subs	r3, #1
 801a358:	4a62      	ldr	r2, [pc, #392]	; (801a4e4 <ProcessCommand+0x26c>)
 801a35a:	6812      	ldr	r2, [r2, #0]
 801a35c:	7b12      	ldrb	r2, [r2, #12]
 801a35e:	4293      	cmp	r3, r2
 801a360:	d114      	bne.n	801a38c <ProcessCommand+0x114>
                            flag = 0;
 801a362:	2300      	movs	r3, #0
 801a364:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 801a368:	e010      	b.n	801a38c <ProcessCommand+0x114>
                        flag = 1;
 801a36a:	2301      	movs	r3, #1
 801a36c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 801a370:	e00c      	b.n	801a38c <ProcessCommand+0x114>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801a372:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801a376:	3301      	adds	r3, #1
 801a378:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801a37c:	4b5a      	ldr	r3, [pc, #360]	; (801a4e8 <ProcessCommand+0x270>)
 801a37e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a382:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 801a386:	429a      	cmp	r2, r3
 801a388:	d3a0      	bcc.n	801a2cc <ProcessCommand+0x54>
 801a38a:	e000      	b.n	801a38e <ProcessCommand+0x116>
                    break;
 801a38c:	bf00      	nop
                }
            }
        }
    }

    if ((tmpCommand != NULL) && (flag == 1U)) {
 801a38e:	4b55      	ldr	r3, [pc, #340]	; (801a4e4 <ProcessCommand+0x26c>)
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d00c      	beq.n	801a3b0 <ProcessCommand+0x138>
 801a396:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801a39a:	2b01      	cmp	r3, #1
 801a39c:	d108      	bne.n	801a3b0 <ProcessCommand+0x138>
        context->printf_data_func(
 801a39e:	1d3b      	adds	r3, r7, #4
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a3a4:	4852      	ldr	r0, [pc, #328]	; (801a4f0 <ProcessCommand+0x278>)
 801a3a6:	4798      	blx	r3
            "\r\nIncorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
 801a3a8:	4b4e      	ldr	r3, [pc, #312]	; (801a4e4 <ProcessCommand+0x26c>)
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	601a      	str	r2, [r3, #0]
    } else {
        // context->printf_data_func(
        //     "\r\nCommand not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
    }
}
 801a3ae:	e093      	b.n	801a4d8 <ProcessCommand+0x260>
    } else if (tmpCommand != NULL) {
 801a3b0:	4b4c      	ldr	r3, [pc, #304]	; (801a4e4 <ProcessCommand+0x26c>)
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	f000 808c 	beq.w	801a4d2 <ProcessCommand+0x25a>
        tmpLen = StrLen(cmd);
 801a3ba:	463b      	mov	r3, r7
 801a3bc:	6818      	ldr	r0, [r3, #0]
 801a3be:	f000 f9a8 	bl	801a712 <StrLen>
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        if (tmpLen != StrCompare(cmd, context->hist_buf[0], StrLen(cmd))) {
 801a3c8:	f897 4115 	ldrb.w	r4, [r7, #277]	; 0x115
 801a3cc:	1d3b      	adds	r3, r7, #4
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	f103 0558 	add.w	r5, r3, #88	; 0x58
 801a3d4:	463b      	mov	r3, r7
 801a3d6:	6818      	ldr	r0, [r3, #0]
 801a3d8:	f000 f99b 	bl	801a712 <StrLen>
 801a3dc:	4602      	mov	r2, r0
 801a3de:	463b      	mov	r3, r7
 801a3e0:	4629      	mov	r1, r5
 801a3e2:	6818      	ldr	r0, [r3, #0]
 801a3e4:	f000 f9ad 	bl	801a742 <StrCompare>
 801a3e8:	4603      	mov	r3, r0
 801a3ea:	429c      	cmp	r4, r3
 801a3ec:	d063      	beq.n	801a4b6 <ProcessCommand+0x23e>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--) {
 801a3ee:	2302      	movs	r3, #2
 801a3f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801a3f4:	e032      	b.n	801a45c <ProcessCommand+0x1e4>
                memset(context->hist_buf[i], '\0', SHELL_BUFFER_SIZE);
 801a3f6:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801a3fa:	1d3a      	adds	r2, r7, #4
 801a3fc:	019b      	lsls	r3, r3, #6
 801a3fe:	3358      	adds	r3, #88	; 0x58
 801a400:	6812      	ldr	r2, [r2, #0]
 801a402:	4413      	add	r3, r2
 801a404:	2240      	movs	r2, #64	; 0x40
 801a406:	2100      	movs	r1, #0
 801a408:	4618      	mov	r0, r3
 801a40a:	f000 fc0d 	bl	801ac28 <memset>
                tmpLen = StrLen(context->hist_buf[i - 1]);
 801a40e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801a412:	3b01      	subs	r3, #1
 801a414:	1d3a      	adds	r2, r7, #4
 801a416:	019b      	lsls	r3, r3, #6
 801a418:	3358      	adds	r3, #88	; 0x58
 801a41a:	6812      	ldr	r2, [r2, #0]
 801a41c:	4413      	add	r3, r2
 801a41e:	4618      	mov	r0, r3
 801a420:	f000 f977 	bl	801a712 <StrLen>
 801a424:	4603      	mov	r3, r0
 801a426:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
                StrCopy(context->hist_buf[i], context->hist_buf[i - 1], tmpLen);
 801a42a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801a42e:	1d3a      	adds	r2, r7, #4
 801a430:	019b      	lsls	r3, r3, #6
 801a432:	3358      	adds	r3, #88	; 0x58
 801a434:	6812      	ldr	r2, [r2, #0]
 801a436:	18d0      	adds	r0, r2, r3
 801a438:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801a43c:	3b01      	subs	r3, #1
 801a43e:	1d3a      	adds	r2, r7, #4
 801a440:	019b      	lsls	r3, r3, #6
 801a442:	3358      	adds	r3, #88	; 0x58
 801a444:	6812      	ldr	r2, [r2, #0]
 801a446:	4413      	add	r3, r2
 801a448:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 801a44c:	4619      	mov	r1, r3
 801a44e:	f000 f93d 	bl	801a6cc <StrCopy>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--) {
 801a452:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801a456:	3b01      	subs	r3, #1
 801a458:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801a45c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801a460:	2b00      	cmp	r3, #0
 801a462:	d1c8      	bne.n	801a3f6 <ProcessCommand+0x17e>
            memset(context->hist_buf[0], '\0', SHELL_BUFFER_SIZE);
 801a464:	1d3b      	adds	r3, r7, #4
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	3358      	adds	r3, #88	; 0x58
 801a46a:	2240      	movs	r2, #64	; 0x40
 801a46c:	2100      	movs	r1, #0
 801a46e:	4618      	mov	r0, r3
 801a470:	f000 fbda 	bl	801ac28 <memset>
            tmpLen = StrLen(cmd);
 801a474:	463b      	mov	r3, r7
 801a476:	6818      	ldr	r0, [r3, #0]
 801a478:	f000 f94b 	bl	801a712 <StrLen>
 801a47c:	4603      	mov	r3, r0
 801a47e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
            StrCopy(context->hist_buf[0], cmd, tmpLen);
 801a482:	1d3b      	adds	r3, r7, #4
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	f103 0058 	add.w	r0, r3, #88	; 0x58
 801a48a:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 801a48e:	463b      	mov	r3, r7
 801a490:	6819      	ldr	r1, [r3, #0]
 801a492:	f000 f91b 	bl	801a6cc <StrCopy>
            if (context->hist_count < SHELL_HIST_MAX) {
 801a496:	1d3b      	adds	r3, r7, #4
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801a49e:	2b02      	cmp	r3, #2
 801a4a0:	d809      	bhi.n	801a4b6 <ProcessCommand+0x23e>
                context->hist_count++;
 801a4a2:	1d3b      	adds	r3, r7, #4
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801a4aa:	3301      	adds	r3, #1
 801a4ac:	b29a      	uxth	r2, r3
 801a4ae:	1d3b      	adds	r3, r7, #4
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        tmpCommand->pFuncCallBack(context, argc, argv);
 801a4b6:	4b0b      	ldr	r3, [pc, #44]	; (801a4e4 <ProcessCommand+0x26c>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	689b      	ldr	r3, [r3, #8]
 801a4bc:	f107 020c 	add.w	r2, r7, #12
 801a4c0:	1d38      	adds	r0, r7, #4
 801a4c2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801a4c6:	6800      	ldr	r0, [r0, #0]
 801a4c8:	4798      	blx	r3
        tmpCommand = NULL;
 801a4ca:	4b06      	ldr	r3, [pc, #24]	; (801a4e4 <ProcessCommand+0x26c>)
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	601a      	str	r2, [r3, #0]
}
 801a4d0:	e002      	b.n	801a4d8 <ProcessCommand+0x260>
        tmpCommand = NULL;
 801a4d2:	4b04      	ldr	r3, [pc, #16]	; (801a4e4 <ProcessCommand+0x26c>)
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	601a      	str	r2, [r3, #0]
}
 801a4d8:	bf00      	nop
 801a4da:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801a4de:	46bd      	mov	sp, r7
 801a4e0:	bdb0      	pop	{r4, r5, r7, pc}
 801a4e2:	bf00      	nop
 801a4e4:	20010b3c 	.word	0x20010b3c
 801a4e8:	20010a58 	.word	0x20010a58
 801a4ec:	20010b40 	.word	0x20010b40
 801a4f0:	0801fddc 	.word	0x0801fddc

0801a4f4 <GetHistoryCommand>:

static void GetHistoryCommand(p_shell_context_t context, uint8_t hist_pos)
{
 801a4f4:	b580      	push	{r7, lr}
 801a4f6:	b084      	sub	sp, #16
 801a4f8:	af00      	add	r7, sp, #0
 801a4fa:	6078      	str	r0, [r7, #4]
 801a4fc:	460b      	mov	r3, r1
 801a4fe:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint32_t tmp;

    if (context->hist_buf[0][0] == '\0') {
 801a500:	687b      	ldr	r3, [r7, #4]
 801a502:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a506:	2b00      	cmp	r3, #0
 801a508:	d104      	bne.n	801a514 <GetHistoryCommand+0x20>
        context->hist_current = 0;
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	2200      	movs	r2, #0
 801a50e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        return;
 801a512:	e04c      	b.n	801a5ae <GetHistoryCommand+0xba>
    }

    if (hist_pos > SHELL_HIST_MAX) {
 801a514:	78fb      	ldrb	r3, [r7, #3]
 801a516:	2b03      	cmp	r3, #3
 801a518:	d901      	bls.n	801a51e <GetHistoryCommand+0x2a>
        hist_pos = SHELL_HIST_MAX - 1;
 801a51a:	2302      	movs	r3, #2
 801a51c:	70fb      	strb	r3, [r7, #3]
    }
    tmp = StrLen(context->line);
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	3305      	adds	r3, #5
 801a522:	4618      	mov	r0, r3
 801a524:	f000 f8f5 	bl	801a712 <StrLen>
 801a528:	4603      	mov	r3, r0
 801a52a:	60bb      	str	r3, [r7, #8]
    /* Clear current if have */
    if (tmp > 0) {
 801a52c:	68bb      	ldr	r3, [r7, #8]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d014      	beq.n	801a55c <GetHistoryCommand+0x68>
        memset(context->line, '\0', tmp);
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	3305      	adds	r3, #5
 801a536:	68ba      	ldr	r2, [r7, #8]
 801a538:	2100      	movs	r1, #0
 801a53a:	4618      	mov	r0, r3
 801a53c:	f000 fb74 	bl	801ac28 <memset>
        for (i = 0; i < tmp; i++) {
 801a540:	2300      	movs	r3, #0
 801a542:	73fb      	strb	r3, [r7, #15]
 801a544:	e006      	b.n	801a554 <GetHistoryCommand+0x60>
            context->printf_data_func("\b \b");
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a54a:	481a      	ldr	r0, [pc, #104]	; (801a5b4 <GetHistoryCommand+0xc0>)
 801a54c:	4798      	blx	r3
        for (i = 0; i < tmp; i++) {
 801a54e:	7bfb      	ldrb	r3, [r7, #15]
 801a550:	3301      	adds	r3, #1
 801a552:	73fb      	strb	r3, [r7, #15]
 801a554:	7bfb      	ldrb	r3, [r7, #15]
 801a556:	68ba      	ldr	r2, [r7, #8]
 801a558:	429a      	cmp	r2, r3
 801a55a:	d8f4      	bhi.n	801a546 <GetHistoryCommand+0x52>
        }
    }

    context->l_pos = StrLen(context->hist_buf[hist_pos]);
 801a55c:	78fb      	ldrb	r3, [r7, #3]
 801a55e:	019b      	lsls	r3, r3, #6
 801a560:	3358      	adds	r3, #88	; 0x58
 801a562:	687a      	ldr	r2, [r7, #4]
 801a564:	4413      	add	r3, r2
 801a566:	4618      	mov	r0, r3
 801a568:	f000 f8d3 	bl	801a712 <StrLen>
 801a56c:	4603      	mov	r3, r0
 801a56e:	b2da      	uxtb	r2, r3
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos = context->l_pos;
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    StrCopy(context->line, context->hist_buf[hist_pos], context->l_pos);
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	1d58      	adds	r0, r3, #5
 801a586:	78fb      	ldrb	r3, [r7, #3]
 801a588:	019b      	lsls	r3, r3, #6
 801a58a:	3358      	adds	r3, #88	; 0x58
 801a58c:	687a      	ldr	r2, [r7, #4]
 801a58e:	18d1      	adds	r1, r2, r3
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801a596:	461a      	mov	r2, r3
 801a598:	f000 f898 	bl	801a6cc <StrCopy>
    context->printf_data_func(context->hist_buf[hist_pos]);
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a5a0:	78fa      	ldrb	r2, [r7, #3]
 801a5a2:	0192      	lsls	r2, r2, #6
 801a5a4:	3258      	adds	r2, #88	; 0x58
 801a5a6:	6879      	ldr	r1, [r7, #4]
 801a5a8:	440a      	add	r2, r1
 801a5aa:	4610      	mov	r0, r2
 801a5ac:	4798      	blx	r3
}
 801a5ae:	3710      	adds	r7, #16
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	bd80      	pop	{r7, pc}
 801a5b4:	0801fdd0 	.word	0x0801fdd0

0801a5b8 <AutoComplete>:

static void AutoComplete(p_shell_context_t context)
{
 801a5b8:	b590      	push	{r4, r7, lr}
 801a5ba:	b089      	sub	sp, #36	; 0x24
 801a5bc:	af00      	add	r7, sp, #0
 801a5be:	6078      	str	r0, [r7, #4]
    int32_t len;
    int32_t minLen;
    uint8_t i = 0;
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	75fb      	strb	r3, [r7, #23]
    const shell_command_context_t *tmpCommand = NULL;
 801a5c4:	2300      	movs	r3, #0
 801a5c6:	60fb      	str	r3, [r7, #12]
    const char *namePtr;
    const char *cmdName;

    minLen = 0;
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	61bb      	str	r3, [r7, #24]
    namePtr = NULL;
 801a5cc:	2300      	movs	r3, #0
 801a5ce:	613b      	str	r3, [r7, #16]

    if (!StrLen(context->line)) {
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	3305      	adds	r3, #5
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	f000 f89c 	bl	801a712 <StrLen>
 801a5da:	4603      	mov	r3, r0
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d069      	beq.n	801a6b4 <AutoComplete+0xfc>
        return;
    }
    context->printf_data_func("\r\n");
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a5e4:	4835      	ldr	r0, [pc, #212]	; (801a6bc <AutoComplete+0x104>)
 801a5e6:	4798      	blx	r3
    /* Empty tab, list all commands */
    if (context->line[0] == '\0') {
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	795b      	ldrb	r3, [r3, #5]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d105      	bne.n	801a5fc <AutoComplete+0x44>
        HelpCommand(context, 0, NULL);
 801a5f0:	2200      	movs	r2, #0
 801a5f2:	2100      	movs	r1, #0
 801a5f4:	6878      	ldr	r0, [r7, #4]
 801a5f6:	f7ff fe1b 	bl	801a230 <HelpCommand>
        return;
 801a5fa:	e05c      	b.n	801a6b6 <AutoComplete+0xfe>
    }
    /* Do auto complete */
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	75fb      	strb	r3, [r7, #23]
 801a600:	e03f      	b.n	801a682 <AutoComplete+0xca>
        tmpCommand = g_RegisteredCommands.CommandList[i];
 801a602:	7dfb      	ldrb	r3, [r7, #23]
 801a604:	4a2e      	ldr	r2, [pc, #184]	; (801a6c0 <AutoComplete+0x108>)
 801a606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a60a:	60fb      	str	r3, [r7, #12]
        cmdName = tmpCommand->pcCommand;
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	60bb      	str	r3, [r7, #8]
        if (StrCompare(context->line, cmdName, StrLen(context->line)) == 0) {
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	1d5c      	adds	r4, r3, #5
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	3305      	adds	r3, #5
 801a61a:	4618      	mov	r0, r3
 801a61c:	f000 f879 	bl	801a712 <StrLen>
 801a620:	4603      	mov	r3, r0
 801a622:	461a      	mov	r2, r3
 801a624:	68b9      	ldr	r1, [r7, #8]
 801a626:	4620      	mov	r0, r4
 801a628:	f000 f88b 	bl	801a742 <StrCompare>
 801a62c:	4603      	mov	r3, r0
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d124      	bne.n	801a67c <AutoComplete+0xc4>
            if (minLen == 0) {
 801a632:	69bb      	ldr	r3, [r7, #24]
 801a634:	2b00      	cmp	r3, #0
 801a636:	d10b      	bne.n	801a650 <AutoComplete+0x98>
                namePtr = cmdName;
 801a638:	68bb      	ldr	r3, [r7, #8]
 801a63a:	613b      	str	r3, [r7, #16]
                minLen = StrLen(namePtr);
 801a63c:	6938      	ldr	r0, [r7, #16]
 801a63e:	f000 f868 	bl	801a712 <StrLen>
 801a642:	61b8      	str	r0, [r7, #24]
                /* Show possible matches */
                context->printf_data_func("%s\r\n", cmdName);
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a648:	68b9      	ldr	r1, [r7, #8]
 801a64a:	481e      	ldr	r0, [pc, #120]	; (801a6c4 <AutoComplete+0x10c>)
 801a64c:	4798      	blx	r3
                continue;
 801a64e:	e015      	b.n	801a67c <AutoComplete+0xc4>
            }
            len = StrCompare(namePtr, cmdName, StrLen(namePtr));
 801a650:	6938      	ldr	r0, [r7, #16]
 801a652:	f000 f85e 	bl	801a712 <StrLen>
 801a656:	4603      	mov	r3, r0
 801a658:	461a      	mov	r2, r3
 801a65a:	68b9      	ldr	r1, [r7, #8]
 801a65c:	6938      	ldr	r0, [r7, #16]
 801a65e:	f000 f870 	bl	801a742 <StrCompare>
 801a662:	61f8      	str	r0, [r7, #28]
            if (len < 0) {
 801a664:	69fb      	ldr	r3, [r7, #28]
 801a666:	2b00      	cmp	r3, #0
 801a668:	da02      	bge.n	801a670 <AutoComplete+0xb8>
                len = len * (-1);
 801a66a:	69fb      	ldr	r3, [r7, #28]
 801a66c:	425b      	negs	r3, r3
 801a66e:	61fb      	str	r3, [r7, #28]
            }
            if (len < minLen) {
 801a670:	69fa      	ldr	r2, [r7, #28]
 801a672:	69bb      	ldr	r3, [r7, #24]
 801a674:	429a      	cmp	r2, r3
 801a676:	da01      	bge.n	801a67c <AutoComplete+0xc4>
                minLen = len;
 801a678:	69fb      	ldr	r3, [r7, #28]
 801a67a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801a67c:	7dfb      	ldrb	r3, [r7, #23]
 801a67e:	3301      	adds	r3, #1
 801a680:	75fb      	strb	r3, [r7, #23]
 801a682:	4b0f      	ldr	r3, [pc, #60]	; (801a6c0 <AutoComplete+0x108>)
 801a684:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a688:	7dfa      	ldrb	r2, [r7, #23]
 801a68a:	429a      	cmp	r2, r3
 801a68c:	d3b9      	bcc.n	801a602 <AutoComplete+0x4a>
            }
        }
    }
    /* Auto complete string */
    if (namePtr) {
 801a68e:	693b      	ldr	r3, [r7, #16]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d006      	beq.n	801a6a2 <AutoComplete+0xea>
        StrCopy(context->line, namePtr, minLen);
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	3305      	adds	r3, #5
 801a698:	69ba      	ldr	r2, [r7, #24]
 801a69a:	6939      	ldr	r1, [r7, #16]
 801a69c:	4618      	mov	r0, r3
 801a69e:	f000 f815 	bl	801a6cc <StrCopy>
    }
    context->printf_data_func("%s%s", context->prompt, context->line);
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a6a6:	687a      	ldr	r2, [r7, #4]
 801a6a8:	6811      	ldr	r1, [r2, #0]
 801a6aa:	687a      	ldr	r2, [r7, #4]
 801a6ac:	3205      	adds	r2, #5
 801a6ae:	4806      	ldr	r0, [pc, #24]	; (801a6c8 <AutoComplete+0x110>)
 801a6b0:	4798      	blx	r3
    return;
 801a6b2:	e000      	b.n	801a6b6 <AutoComplete+0xfe>
        return;
 801a6b4:	bf00      	nop
}
 801a6b6:	3724      	adds	r7, #36	; 0x24
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	bd90      	pop	{r4, r7, pc}
 801a6bc:	0801fdd4 	.word	0x0801fdd4
 801a6c0:	20010a58 	.word	0x20010a58
 801a6c4:	0801fe38 	.word	0x0801fe38
 801a6c8:	0801fe40 	.word	0x0801fe40

0801a6cc <StrCopy>:

static char *StrCopy(char *dest, const char *src, int32_t count)
{
 801a6cc:	b480      	push	{r7}
 801a6ce:	b087      	sub	sp, #28
 801a6d0:	af00      	add	r7, sp, #0
 801a6d2:	60f8      	str	r0, [r7, #12]
 801a6d4:	60b9      	str	r1, [r7, #8]
 801a6d6:	607a      	str	r2, [r7, #4]
    char *ret = dest;
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	613b      	str	r3, [r7, #16]
    int32_t i = 0;
 801a6dc:	2300      	movs	r3, #0
 801a6de:	617b      	str	r3, [r7, #20]

    for (i = 0; i < count; i++) {
 801a6e0:	2300      	movs	r3, #0
 801a6e2:	617b      	str	r3, [r7, #20]
 801a6e4:	e00a      	b.n	801a6fc <StrCopy+0x30>
        dest[i] = src[i];
 801a6e6:	697b      	ldr	r3, [r7, #20]
 801a6e8:	68ba      	ldr	r2, [r7, #8]
 801a6ea:	441a      	add	r2, r3
 801a6ec:	697b      	ldr	r3, [r7, #20]
 801a6ee:	68f9      	ldr	r1, [r7, #12]
 801a6f0:	440b      	add	r3, r1
 801a6f2:	7812      	ldrb	r2, [r2, #0]
 801a6f4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++) {
 801a6f6:	697b      	ldr	r3, [r7, #20]
 801a6f8:	3301      	adds	r3, #1
 801a6fa:	617b      	str	r3, [r7, #20]
 801a6fc:	697a      	ldr	r2, [r7, #20]
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	429a      	cmp	r2, r3
 801a702:	dbf0      	blt.n	801a6e6 <StrCopy+0x1a>
    }

    return ret;
 801a704:	693b      	ldr	r3, [r7, #16]
}
 801a706:	4618      	mov	r0, r3
 801a708:	371c      	adds	r7, #28
 801a70a:	46bd      	mov	sp, r7
 801a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a710:	4770      	bx	lr

0801a712 <StrLen>:

static int32_t StrLen(const char *str)
{
 801a712:	b480      	push	{r7}
 801a714:	b085      	sub	sp, #20
 801a716:	af00      	add	r7, sp, #0
 801a718:	6078      	str	r0, [r7, #4]
    int32_t i = 0;
 801a71a:	2300      	movs	r3, #0
 801a71c:	60fb      	str	r3, [r7, #12]

    while (*str) {
 801a71e:	e005      	b.n	801a72c <StrLen+0x1a>
        str++;
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	3301      	adds	r3, #1
 801a724:	607b      	str	r3, [r7, #4]
        i++;
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	3301      	adds	r3, #1
 801a72a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	781b      	ldrb	r3, [r3, #0]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d1f5      	bne.n	801a720 <StrLen+0xe>
    }
    return i;
 801a734:	68fb      	ldr	r3, [r7, #12]
}
 801a736:	4618      	mov	r0, r3
 801a738:	3714      	adds	r7, #20
 801a73a:	46bd      	mov	sp, r7
 801a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a740:	4770      	bx	lr

0801a742 <StrCompare>:

static int32_t StrCompare(const char *str1, const char *str2, int32_t count)
{
 801a742:	b480      	push	{r7}
 801a744:	b085      	sub	sp, #20
 801a746:	af00      	add	r7, sp, #0
 801a748:	60f8      	str	r0, [r7, #12]
 801a74a:	60b9      	str	r1, [r7, #8]
 801a74c:	607a      	str	r2, [r7, #4]
    while (count--) {
 801a74e:	e012      	b.n	801a776 <StrCompare+0x34>
        if (*str1++ != *str2++) {
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	1c5a      	adds	r2, r3, #1
 801a754:	60fa      	str	r2, [r7, #12]
 801a756:	781a      	ldrb	r2, [r3, #0]
 801a758:	68bb      	ldr	r3, [r7, #8]
 801a75a:	1c59      	adds	r1, r3, #1
 801a75c:	60b9      	str	r1, [r7, #8]
 801a75e:	781b      	ldrb	r3, [r3, #0]
 801a760:	429a      	cmp	r2, r3
 801a762:	d008      	beq.n	801a776 <StrCompare+0x34>
            return *(unsigned char *)(str1 - 1) - *(unsigned char *)(str2 - 1);
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	3b01      	subs	r3, #1
 801a768:	781b      	ldrb	r3, [r3, #0]
 801a76a:	461a      	mov	r2, r3
 801a76c:	68bb      	ldr	r3, [r7, #8]
 801a76e:	3b01      	subs	r3, #1
 801a770:	781b      	ldrb	r3, [r3, #0]
 801a772:	1ad3      	subs	r3, r2, r3
 801a774:	e005      	b.n	801a782 <StrCompare+0x40>
    while (count--) {
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	1e5a      	subs	r2, r3, #1
 801a77a:	607a      	str	r2, [r7, #4]
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d1e7      	bne.n	801a750 <StrCompare+0xe>
        }
    }
    return 0;
 801a780:	2300      	movs	r3, #0
}
 801a782:	4618      	mov	r0, r3
 801a784:	3714      	adds	r7, #20
 801a786:	46bd      	mov	sp, r7
 801a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a78c:	4770      	bx	lr
	...

0801a790 <ParseLine>:

static int32_t ParseLine(const char *cmd, uint32_t len, char *argv[SHELL_MAX_ARGS])
{
 801a790:	b580      	push	{r7, lr}
 801a792:	b088      	sub	sp, #32
 801a794:	af00      	add	r7, sp, #0
 801a796:	60f8      	str	r0, [r7, #12]
 801a798:	60b9      	str	r1, [r7, #8]
 801a79a:	607a      	str	r2, [r7, #4]
    uint32_t argc;
    char *p;
    uint32_t position;

    /* Init params */
    memset(g_paramBuffer, '\0', len + 1);
 801a79c:	68bb      	ldr	r3, [r7, #8]
 801a79e:	3301      	adds	r3, #1
 801a7a0:	461a      	mov	r2, r3
 801a7a2:	2100      	movs	r1, #0
 801a7a4:	4838      	ldr	r0, [pc, #224]	; (801a888 <ParseLine+0xf8>)
 801a7a6:	f000 fa3f 	bl	801ac28 <memset>
    StrCopy(g_paramBuffer, cmd, len);
 801a7aa:	68bb      	ldr	r3, [r7, #8]
 801a7ac:	461a      	mov	r2, r3
 801a7ae:	68f9      	ldr	r1, [r7, #12]
 801a7b0:	4835      	ldr	r0, [pc, #212]	; (801a888 <ParseLine+0xf8>)
 801a7b2:	f7ff ff8b 	bl	801a6cc <StrCopy>

    p = g_paramBuffer;
 801a7b6:	4b34      	ldr	r3, [pc, #208]	; (801a888 <ParseLine+0xf8>)
 801a7b8:	61bb      	str	r3, [r7, #24]
    position = 0;
 801a7ba:	2300      	movs	r3, #0
 801a7bc:	617b      	str	r3, [r7, #20]
    argc = 0;
 801a7be:	2300      	movs	r3, #0
 801a7c0:	61fb      	str	r3, [r7, #28]

    while (position < len) {
 801a7c2:	e058      	b.n	801a876 <ParseLine+0xe6>
        /* Skip all blanks */
        while (((char)(*p) == ' ') && (position < len)) {
            *p = '\0';
 801a7c4:	69bb      	ldr	r3, [r7, #24]
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	701a      	strb	r2, [r3, #0]
            p++;
 801a7ca:	69bb      	ldr	r3, [r7, #24]
 801a7cc:	3301      	adds	r3, #1
 801a7ce:	61bb      	str	r3, [r7, #24]
            position++;
 801a7d0:	697b      	ldr	r3, [r7, #20]
 801a7d2:	3301      	adds	r3, #1
 801a7d4:	617b      	str	r3, [r7, #20]
        while (((char)(*p) == ' ') && (position < len)) {
 801a7d6:	69bb      	ldr	r3, [r7, #24]
 801a7d8:	781b      	ldrb	r3, [r3, #0]
 801a7da:	2b20      	cmp	r3, #32
 801a7dc:	d103      	bne.n	801a7e6 <ParseLine+0x56>
 801a7de:	697a      	ldr	r2, [r7, #20]
 801a7e0:	68bb      	ldr	r3, [r7, #8]
 801a7e2:	429a      	cmp	r2, r3
 801a7e4:	d3ee      	bcc.n	801a7c4 <ParseLine+0x34>
        }
        /* Process begin of a string */
        if (*p == '"') {
 801a7e6:	69bb      	ldr	r3, [r7, #24]
 801a7e8:	781b      	ldrb	r3, [r3, #0]
 801a7ea:	2b22      	cmp	r3, #34	; 0x22
 801a7ec:	d127      	bne.n	801a83e <ParseLine+0xae>
            p++;
 801a7ee:	69bb      	ldr	r3, [r7, #24]
 801a7f0:	3301      	adds	r3, #1
 801a7f2:	61bb      	str	r3, [r7, #24]
            position++;
 801a7f4:	697b      	ldr	r3, [r7, #20]
 801a7f6:	3301      	adds	r3, #1
 801a7f8:	617b      	str	r3, [r7, #20]
            argv[argc] = p;
 801a7fa:	69fb      	ldr	r3, [r7, #28]
 801a7fc:	009b      	lsls	r3, r3, #2
 801a7fe:	687a      	ldr	r2, [r7, #4]
 801a800:	4413      	add	r3, r2
 801a802:	69ba      	ldr	r2, [r7, #24]
 801a804:	601a      	str	r2, [r3, #0]
            argc++;
 801a806:	69fb      	ldr	r3, [r7, #28]
 801a808:	3301      	adds	r3, #1
 801a80a:	61fb      	str	r3, [r7, #28]
            /* Skip this string */
            while ((*p != '"') && (position < len)) {
 801a80c:	e005      	b.n	801a81a <ParseLine+0x8a>
                p++;
 801a80e:	69bb      	ldr	r3, [r7, #24]
 801a810:	3301      	adds	r3, #1
 801a812:	61bb      	str	r3, [r7, #24]
                position++;
 801a814:	697b      	ldr	r3, [r7, #20]
 801a816:	3301      	adds	r3, #1
 801a818:	617b      	str	r3, [r7, #20]
            while ((*p != '"') && (position < len)) {
 801a81a:	69bb      	ldr	r3, [r7, #24]
 801a81c:	781b      	ldrb	r3, [r3, #0]
 801a81e:	2b22      	cmp	r3, #34	; 0x22
 801a820:	d003      	beq.n	801a82a <ParseLine+0x9a>
 801a822:	697a      	ldr	r2, [r7, #20]
 801a824:	68bb      	ldr	r3, [r7, #8]
 801a826:	429a      	cmp	r2, r3
 801a828:	d3f1      	bcc.n	801a80e <ParseLine+0x7e>
            }
            /* Skip '"' */
            *p = '\0';
 801a82a:	69bb      	ldr	r3, [r7, #24]
 801a82c:	2200      	movs	r2, #0
 801a82e:	701a      	strb	r2, [r3, #0]
            p++;
 801a830:	69bb      	ldr	r3, [r7, #24]
 801a832:	3301      	adds	r3, #1
 801a834:	61bb      	str	r3, [r7, #24]
            position++;
 801a836:	697b      	ldr	r3, [r7, #20]
 801a838:	3301      	adds	r3, #1
 801a83a:	617b      	str	r3, [r7, #20]
 801a83c:	e01b      	b.n	801a876 <ParseLine+0xe6>
        } else /* Normal char */ {
            argv[argc] = p;
 801a83e:	69fb      	ldr	r3, [r7, #28]
 801a840:	009b      	lsls	r3, r3, #2
 801a842:	687a      	ldr	r2, [r7, #4]
 801a844:	4413      	add	r3, r2
 801a846:	69ba      	ldr	r2, [r7, #24]
 801a848:	601a      	str	r2, [r3, #0]
            argc++;
 801a84a:	69fb      	ldr	r3, [r7, #28]
 801a84c:	3301      	adds	r3, #1
 801a84e:	61fb      	str	r3, [r7, #28]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len)) {
 801a850:	e005      	b.n	801a85e <ParseLine+0xce>
                p++;
 801a852:	69bb      	ldr	r3, [r7, #24]
 801a854:	3301      	adds	r3, #1
 801a856:	61bb      	str	r3, [r7, #24]
                position++;
 801a858:	697b      	ldr	r3, [r7, #20]
 801a85a:	3301      	adds	r3, #1
 801a85c:	617b      	str	r3, [r7, #20]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len)) {
 801a85e:	69bb      	ldr	r3, [r7, #24]
 801a860:	781b      	ldrb	r3, [r3, #0]
 801a862:	2b20      	cmp	r3, #32
 801a864:	d007      	beq.n	801a876 <ParseLine+0xe6>
 801a866:	69bb      	ldr	r3, [r7, #24]
 801a868:	781b      	ldrb	r3, [r3, #0]
 801a86a:	2b09      	cmp	r3, #9
 801a86c:	d003      	beq.n	801a876 <ParseLine+0xe6>
 801a86e:	697a      	ldr	r2, [r7, #20]
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	429a      	cmp	r2, r3
 801a874:	d3ed      	bcc.n	801a852 <ParseLine+0xc2>
    while (position < len) {
 801a876:	697a      	ldr	r2, [r7, #20]
 801a878:	68bb      	ldr	r3, [r7, #8]
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d3ab      	bcc.n	801a7d6 <ParseLine+0x46>
            }
        }
    }
    return argc;
 801a87e:	69fb      	ldr	r3, [r7, #28]
}
 801a880:	4618      	mov	r0, r3
 801a882:	3720      	adds	r7, #32
 801a884:	46bd      	mov	sp, r7
 801a886:	bd80      	pop	{r7, pc}
 801a888:	20010afc 	.word	0x20010afc

0801a88c <SHELL_RegisterCommand>:

int32_t SHELL_RegisterCommand(const shell_command_context_t *command_context)
{
 801a88c:	b480      	push	{r7}
 801a88e:	b085      	sub	sp, #20
 801a890:	af00      	add	r7, sp, #0
 801a892:	6078      	str	r0, [r7, #4]
    int32_t result = 0;
 801a894:	2300      	movs	r3, #0
 801a896:	60fb      	str	r3, [r7, #12]

    /* If have room  in command list */
    if (g_RegisteredCommands.numberOfCommandInList < SHELL_MAX_CMD) {
 801a898:	4b0e      	ldr	r3, [pc, #56]	; (801a8d4 <SHELL_RegisterCommand+0x48>)
 801a89a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a89e:	2b27      	cmp	r3, #39	; 0x27
 801a8a0:	d80d      	bhi.n	801a8be <SHELL_RegisterCommand+0x32>
        g_RegisteredCommands.CommandList[g_RegisteredCommands.numberOfCommandInList++] = command_context;
 801a8a2:	4b0c      	ldr	r3, [pc, #48]	; (801a8d4 <SHELL_RegisterCommand+0x48>)
 801a8a4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a8a8:	1c5a      	adds	r2, r3, #1
 801a8aa:	b2d1      	uxtb	r1, r2
 801a8ac:	4a09      	ldr	r2, [pc, #36]	; (801a8d4 <SHELL_RegisterCommand+0x48>)
 801a8ae:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
 801a8b2:	4619      	mov	r1, r3
 801a8b4:	4a07      	ldr	r2, [pc, #28]	; (801a8d4 <SHELL_RegisterCommand+0x48>)
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a8bc:	e002      	b.n	801a8c4 <SHELL_RegisterCommand+0x38>
    } else {
        result = -1;
 801a8be:	f04f 33ff 	mov.w	r3, #4294967295
 801a8c2:	60fb      	str	r3, [r7, #12]
    }
    return result;
 801a8c4:	68fb      	ldr	r3, [r7, #12]
}
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	3714      	adds	r7, #20
 801a8ca:	46bd      	mov	sp, r7
 801a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d0:	4770      	bx	lr
 801a8d2:	bf00      	nop
 801a8d4:	20010a58 	.word	0x20010a58

0801a8d8 <GetChar>:

static uint8_t GetChar(p_shell_context_t context)
{
 801a8d8:	b580      	push	{r7, lr}
 801a8da:	b084      	sub	sp, #16
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
    uint8_t ch;

#if SHELL_USE_FILE_STREAM
    ch = fgetc(context->STDIN);
#else
    context->recv_data_func(&ch, 1U);
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a8e4:	f107 020f 	add.w	r2, r7, #15
 801a8e8:	2101      	movs	r1, #1
 801a8ea:	4610      	mov	r0, r2
 801a8ec:	4798      	blx	r3
#endif
    return ch;
 801a8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 801a8f0:	4618      	mov	r0, r3
 801a8f2:	3710      	adds	r7, #16
 801a8f4:	46bd      	mov	sp, r7
 801a8f6:	bd80      	pop	{r7, pc}

0801a8f8 <__assert_func>:
 801a8f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a8fa:	4614      	mov	r4, r2
 801a8fc:	461a      	mov	r2, r3
 801a8fe:	4b09      	ldr	r3, [pc, #36]	; (801a924 <__assert_func+0x2c>)
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	4605      	mov	r5, r0
 801a904:	68d8      	ldr	r0, [r3, #12]
 801a906:	b14c      	cbz	r4, 801a91c <__assert_func+0x24>
 801a908:	4b07      	ldr	r3, [pc, #28]	; (801a928 <__assert_func+0x30>)
 801a90a:	9100      	str	r1, [sp, #0]
 801a90c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a910:	4906      	ldr	r1, [pc, #24]	; (801a92c <__assert_func+0x34>)
 801a912:	462b      	mov	r3, r5
 801a914:	f000 f8e8 	bl	801aae8 <fiprintf>
 801a918:	f000 ffbc 	bl	801b894 <abort>
 801a91c:	4b04      	ldr	r3, [pc, #16]	; (801a930 <__assert_func+0x38>)
 801a91e:	461c      	mov	r4, r3
 801a920:	e7f3      	b.n	801a90a <__assert_func+0x12>
 801a922:	bf00      	nop
 801a924:	20000040 	.word	0x20000040
 801a928:	0802001f 	.word	0x0802001f
 801a92c:	0802002c 	.word	0x0802002c
 801a930:	0802005a 	.word	0x0802005a

0801a934 <atoi>:
 801a934:	220a      	movs	r2, #10
 801a936:	2100      	movs	r1, #0
 801a938:	f000 beb0 	b.w	801b69c <strtol>

0801a93c <std>:
 801a93c:	2300      	movs	r3, #0
 801a93e:	b510      	push	{r4, lr}
 801a940:	4604      	mov	r4, r0
 801a942:	e9c0 3300 	strd	r3, r3, [r0]
 801a946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a94a:	6083      	str	r3, [r0, #8]
 801a94c:	8181      	strh	r1, [r0, #12]
 801a94e:	6643      	str	r3, [r0, #100]	; 0x64
 801a950:	81c2      	strh	r2, [r0, #14]
 801a952:	6183      	str	r3, [r0, #24]
 801a954:	4619      	mov	r1, r3
 801a956:	2208      	movs	r2, #8
 801a958:	305c      	adds	r0, #92	; 0x5c
 801a95a:	f000 f965 	bl	801ac28 <memset>
 801a95e:	4b05      	ldr	r3, [pc, #20]	; (801a974 <std+0x38>)
 801a960:	6263      	str	r3, [r4, #36]	; 0x24
 801a962:	4b05      	ldr	r3, [pc, #20]	; (801a978 <std+0x3c>)
 801a964:	62a3      	str	r3, [r4, #40]	; 0x28
 801a966:	4b05      	ldr	r3, [pc, #20]	; (801a97c <std+0x40>)
 801a968:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a96a:	4b05      	ldr	r3, [pc, #20]	; (801a980 <std+0x44>)
 801a96c:	6224      	str	r4, [r4, #32]
 801a96e:	6323      	str	r3, [r4, #48]	; 0x30
 801a970:	bd10      	pop	{r4, pc}
 801a972:	bf00      	nop
 801a974:	0801b50d 	.word	0x0801b50d
 801a978:	0801b52f 	.word	0x0801b52f
 801a97c:	0801b567 	.word	0x0801b567
 801a980:	0801b58b 	.word	0x0801b58b

0801a984 <_cleanup_r>:
 801a984:	4901      	ldr	r1, [pc, #4]	; (801a98c <_cleanup_r+0x8>)
 801a986:	f000 b8c1 	b.w	801ab0c <_fwalk_reent>
 801a98a:	bf00      	nop
 801a98c:	0801b9dd 	.word	0x0801b9dd

0801a990 <__sfmoreglue>:
 801a990:	b570      	push	{r4, r5, r6, lr}
 801a992:	1e4a      	subs	r2, r1, #1
 801a994:	2568      	movs	r5, #104	; 0x68
 801a996:	4355      	muls	r5, r2
 801a998:	460e      	mov	r6, r1
 801a99a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a99e:	f000 f99b 	bl	801acd8 <_malloc_r>
 801a9a2:	4604      	mov	r4, r0
 801a9a4:	b140      	cbz	r0, 801a9b8 <__sfmoreglue+0x28>
 801a9a6:	2100      	movs	r1, #0
 801a9a8:	e9c0 1600 	strd	r1, r6, [r0]
 801a9ac:	300c      	adds	r0, #12
 801a9ae:	60a0      	str	r0, [r4, #8]
 801a9b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a9b4:	f000 f938 	bl	801ac28 <memset>
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	bd70      	pop	{r4, r5, r6, pc}

0801a9bc <__sfp_lock_acquire>:
 801a9bc:	4801      	ldr	r0, [pc, #4]	; (801a9c4 <__sfp_lock_acquire+0x8>)
 801a9be:	f000 b8ea 	b.w	801ab96 <__retarget_lock_acquire_recursive>
 801a9c2:	bf00      	nop
 801a9c4:	200191fc 	.word	0x200191fc

0801a9c8 <__sfp_lock_release>:
 801a9c8:	4801      	ldr	r0, [pc, #4]	; (801a9d0 <__sfp_lock_release+0x8>)
 801a9ca:	f000 b8e5 	b.w	801ab98 <__retarget_lock_release_recursive>
 801a9ce:	bf00      	nop
 801a9d0:	200191fc 	.word	0x200191fc

0801a9d4 <__sinit_lock_acquire>:
 801a9d4:	4801      	ldr	r0, [pc, #4]	; (801a9dc <__sinit_lock_acquire+0x8>)
 801a9d6:	f000 b8de 	b.w	801ab96 <__retarget_lock_acquire_recursive>
 801a9da:	bf00      	nop
 801a9dc:	200191f7 	.word	0x200191f7

0801a9e0 <__sinit_lock_release>:
 801a9e0:	4801      	ldr	r0, [pc, #4]	; (801a9e8 <__sinit_lock_release+0x8>)
 801a9e2:	f000 b8d9 	b.w	801ab98 <__retarget_lock_release_recursive>
 801a9e6:	bf00      	nop
 801a9e8:	200191f7 	.word	0x200191f7

0801a9ec <__sinit>:
 801a9ec:	b510      	push	{r4, lr}
 801a9ee:	4604      	mov	r4, r0
 801a9f0:	f7ff fff0 	bl	801a9d4 <__sinit_lock_acquire>
 801a9f4:	69a3      	ldr	r3, [r4, #24]
 801a9f6:	b11b      	cbz	r3, 801aa00 <__sinit+0x14>
 801a9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9fc:	f7ff bff0 	b.w	801a9e0 <__sinit_lock_release>
 801aa00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801aa04:	6523      	str	r3, [r4, #80]	; 0x50
 801aa06:	4b13      	ldr	r3, [pc, #76]	; (801aa54 <__sinit+0x68>)
 801aa08:	4a13      	ldr	r2, [pc, #76]	; (801aa58 <__sinit+0x6c>)
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	62a2      	str	r2, [r4, #40]	; 0x28
 801aa0e:	42a3      	cmp	r3, r4
 801aa10:	bf04      	itt	eq
 801aa12:	2301      	moveq	r3, #1
 801aa14:	61a3      	streq	r3, [r4, #24]
 801aa16:	4620      	mov	r0, r4
 801aa18:	f000 f820 	bl	801aa5c <__sfp>
 801aa1c:	6060      	str	r0, [r4, #4]
 801aa1e:	4620      	mov	r0, r4
 801aa20:	f000 f81c 	bl	801aa5c <__sfp>
 801aa24:	60a0      	str	r0, [r4, #8]
 801aa26:	4620      	mov	r0, r4
 801aa28:	f000 f818 	bl	801aa5c <__sfp>
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	60e0      	str	r0, [r4, #12]
 801aa30:	2104      	movs	r1, #4
 801aa32:	6860      	ldr	r0, [r4, #4]
 801aa34:	f7ff ff82 	bl	801a93c <std>
 801aa38:	68a0      	ldr	r0, [r4, #8]
 801aa3a:	2201      	movs	r2, #1
 801aa3c:	2109      	movs	r1, #9
 801aa3e:	f7ff ff7d 	bl	801a93c <std>
 801aa42:	68e0      	ldr	r0, [r4, #12]
 801aa44:	2202      	movs	r2, #2
 801aa46:	2112      	movs	r1, #18
 801aa48:	f7ff ff78 	bl	801a93c <std>
 801aa4c:	2301      	movs	r3, #1
 801aa4e:	61a3      	str	r3, [r4, #24]
 801aa50:	e7d2      	b.n	801a9f8 <__sinit+0xc>
 801aa52:	bf00      	nop
 801aa54:	080201bc 	.word	0x080201bc
 801aa58:	0801a985 	.word	0x0801a985

0801aa5c <__sfp>:
 801aa5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa5e:	4607      	mov	r7, r0
 801aa60:	f7ff ffac 	bl	801a9bc <__sfp_lock_acquire>
 801aa64:	4b1e      	ldr	r3, [pc, #120]	; (801aae0 <__sfp+0x84>)
 801aa66:	681e      	ldr	r6, [r3, #0]
 801aa68:	69b3      	ldr	r3, [r6, #24]
 801aa6a:	b913      	cbnz	r3, 801aa72 <__sfp+0x16>
 801aa6c:	4630      	mov	r0, r6
 801aa6e:	f7ff ffbd 	bl	801a9ec <__sinit>
 801aa72:	3648      	adds	r6, #72	; 0x48
 801aa74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801aa78:	3b01      	subs	r3, #1
 801aa7a:	d503      	bpl.n	801aa84 <__sfp+0x28>
 801aa7c:	6833      	ldr	r3, [r6, #0]
 801aa7e:	b30b      	cbz	r3, 801aac4 <__sfp+0x68>
 801aa80:	6836      	ldr	r6, [r6, #0]
 801aa82:	e7f7      	b.n	801aa74 <__sfp+0x18>
 801aa84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801aa88:	b9d5      	cbnz	r5, 801aac0 <__sfp+0x64>
 801aa8a:	4b16      	ldr	r3, [pc, #88]	; (801aae4 <__sfp+0x88>)
 801aa8c:	60e3      	str	r3, [r4, #12]
 801aa8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801aa92:	6665      	str	r5, [r4, #100]	; 0x64
 801aa94:	f000 f87e 	bl	801ab94 <__retarget_lock_init_recursive>
 801aa98:	f7ff ff96 	bl	801a9c8 <__sfp_lock_release>
 801aa9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aaa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801aaa4:	6025      	str	r5, [r4, #0]
 801aaa6:	61a5      	str	r5, [r4, #24]
 801aaa8:	2208      	movs	r2, #8
 801aaaa:	4629      	mov	r1, r5
 801aaac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aab0:	f000 f8ba 	bl	801ac28 <memset>
 801aab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801aab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801aabc:	4620      	mov	r0, r4
 801aabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aac0:	3468      	adds	r4, #104	; 0x68
 801aac2:	e7d9      	b.n	801aa78 <__sfp+0x1c>
 801aac4:	2104      	movs	r1, #4
 801aac6:	4638      	mov	r0, r7
 801aac8:	f7ff ff62 	bl	801a990 <__sfmoreglue>
 801aacc:	4604      	mov	r4, r0
 801aace:	6030      	str	r0, [r6, #0]
 801aad0:	2800      	cmp	r0, #0
 801aad2:	d1d5      	bne.n	801aa80 <__sfp+0x24>
 801aad4:	f7ff ff78 	bl	801a9c8 <__sfp_lock_release>
 801aad8:	230c      	movs	r3, #12
 801aada:	603b      	str	r3, [r7, #0]
 801aadc:	e7ee      	b.n	801aabc <__sfp+0x60>
 801aade:	bf00      	nop
 801aae0:	080201bc 	.word	0x080201bc
 801aae4:	ffff0001 	.word	0xffff0001

0801aae8 <fiprintf>:
 801aae8:	b40e      	push	{r1, r2, r3}
 801aaea:	b503      	push	{r0, r1, lr}
 801aaec:	4601      	mov	r1, r0
 801aaee:	ab03      	add	r3, sp, #12
 801aaf0:	4805      	ldr	r0, [pc, #20]	; (801ab08 <fiprintf+0x20>)
 801aaf2:	f853 2b04 	ldr.w	r2, [r3], #4
 801aaf6:	6800      	ldr	r0, [r0, #0]
 801aaf8:	9301      	str	r3, [sp, #4]
 801aafa:	f000 f971 	bl	801ade0 <_vfiprintf_r>
 801aafe:	b002      	add	sp, #8
 801ab00:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab04:	b003      	add	sp, #12
 801ab06:	4770      	bx	lr
 801ab08:	20000040 	.word	0x20000040

0801ab0c <_fwalk_reent>:
 801ab0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab10:	4606      	mov	r6, r0
 801ab12:	4688      	mov	r8, r1
 801ab14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ab18:	2700      	movs	r7, #0
 801ab1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ab1e:	f1b9 0901 	subs.w	r9, r9, #1
 801ab22:	d505      	bpl.n	801ab30 <_fwalk_reent+0x24>
 801ab24:	6824      	ldr	r4, [r4, #0]
 801ab26:	2c00      	cmp	r4, #0
 801ab28:	d1f7      	bne.n	801ab1a <_fwalk_reent+0xe>
 801ab2a:	4638      	mov	r0, r7
 801ab2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ab30:	89ab      	ldrh	r3, [r5, #12]
 801ab32:	2b01      	cmp	r3, #1
 801ab34:	d907      	bls.n	801ab46 <_fwalk_reent+0x3a>
 801ab36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ab3a:	3301      	adds	r3, #1
 801ab3c:	d003      	beq.n	801ab46 <_fwalk_reent+0x3a>
 801ab3e:	4629      	mov	r1, r5
 801ab40:	4630      	mov	r0, r6
 801ab42:	47c0      	blx	r8
 801ab44:	4307      	orrs	r7, r0
 801ab46:	3568      	adds	r5, #104	; 0x68
 801ab48:	e7e9      	b.n	801ab1e <_fwalk_reent+0x12>
	...

0801ab4c <__libc_init_array>:
 801ab4c:	b570      	push	{r4, r5, r6, lr}
 801ab4e:	4d0d      	ldr	r5, [pc, #52]	; (801ab84 <__libc_init_array+0x38>)
 801ab50:	4c0d      	ldr	r4, [pc, #52]	; (801ab88 <__libc_init_array+0x3c>)
 801ab52:	1b64      	subs	r4, r4, r5
 801ab54:	10a4      	asrs	r4, r4, #2
 801ab56:	2600      	movs	r6, #0
 801ab58:	42a6      	cmp	r6, r4
 801ab5a:	d109      	bne.n	801ab70 <__libc_init_array+0x24>
 801ab5c:	4d0b      	ldr	r5, [pc, #44]	; (801ab8c <__libc_init_array+0x40>)
 801ab5e:	4c0c      	ldr	r4, [pc, #48]	; (801ab90 <__libc_init_array+0x44>)
 801ab60:	f001 f9fc 	bl	801bf5c <_init>
 801ab64:	1b64      	subs	r4, r4, r5
 801ab66:	10a4      	asrs	r4, r4, #2
 801ab68:	2600      	movs	r6, #0
 801ab6a:	42a6      	cmp	r6, r4
 801ab6c:	d105      	bne.n	801ab7a <__libc_init_array+0x2e>
 801ab6e:	bd70      	pop	{r4, r5, r6, pc}
 801ab70:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab74:	4798      	blx	r3
 801ab76:	3601      	adds	r6, #1
 801ab78:	e7ee      	b.n	801ab58 <__libc_init_array+0xc>
 801ab7a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab7e:	4798      	blx	r3
 801ab80:	3601      	adds	r6, #1
 801ab82:	e7f2      	b.n	801ab6a <__libc_init_array+0x1e>
 801ab84:	08020274 	.word	0x08020274
 801ab88:	08020274 	.word	0x08020274
 801ab8c:	08020274 	.word	0x08020274
 801ab90:	08020278 	.word	0x08020278

0801ab94 <__retarget_lock_init_recursive>:
 801ab94:	4770      	bx	lr

0801ab96 <__retarget_lock_acquire_recursive>:
 801ab96:	4770      	bx	lr

0801ab98 <__retarget_lock_release_recursive>:
 801ab98:	4770      	bx	lr
	...

0801ab9c <malloc>:
 801ab9c:	4b02      	ldr	r3, [pc, #8]	; (801aba8 <malloc+0xc>)
 801ab9e:	4601      	mov	r1, r0
 801aba0:	6818      	ldr	r0, [r3, #0]
 801aba2:	f000 b899 	b.w	801acd8 <_malloc_r>
 801aba6:	bf00      	nop
 801aba8:	20000040 	.word	0x20000040

0801abac <free>:
 801abac:	4b02      	ldr	r3, [pc, #8]	; (801abb8 <free+0xc>)
 801abae:	4601      	mov	r1, r0
 801abb0:	6818      	ldr	r0, [r3, #0]
 801abb2:	f000 b841 	b.w	801ac38 <_free_r>
 801abb6:	bf00      	nop
 801abb8:	20000040 	.word	0x20000040

0801abbc <memcmp>:
 801abbc:	b530      	push	{r4, r5, lr}
 801abbe:	3901      	subs	r1, #1
 801abc0:	2400      	movs	r4, #0
 801abc2:	42a2      	cmp	r2, r4
 801abc4:	d101      	bne.n	801abca <memcmp+0xe>
 801abc6:	2000      	movs	r0, #0
 801abc8:	e005      	b.n	801abd6 <memcmp+0x1a>
 801abca:	5d03      	ldrb	r3, [r0, r4]
 801abcc:	3401      	adds	r4, #1
 801abce:	5d0d      	ldrb	r5, [r1, r4]
 801abd0:	42ab      	cmp	r3, r5
 801abd2:	d0f6      	beq.n	801abc2 <memcmp+0x6>
 801abd4:	1b58      	subs	r0, r3, r5
 801abd6:	bd30      	pop	{r4, r5, pc}

0801abd8 <memcpy>:
 801abd8:	440a      	add	r2, r1
 801abda:	4291      	cmp	r1, r2
 801abdc:	f100 33ff 	add.w	r3, r0, #4294967295
 801abe0:	d100      	bne.n	801abe4 <memcpy+0xc>
 801abe2:	4770      	bx	lr
 801abe4:	b510      	push	{r4, lr}
 801abe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801abea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801abee:	4291      	cmp	r1, r2
 801abf0:	d1f9      	bne.n	801abe6 <memcpy+0xe>
 801abf2:	bd10      	pop	{r4, pc}

0801abf4 <memmove>:
 801abf4:	4288      	cmp	r0, r1
 801abf6:	b510      	push	{r4, lr}
 801abf8:	eb01 0402 	add.w	r4, r1, r2
 801abfc:	d902      	bls.n	801ac04 <memmove+0x10>
 801abfe:	4284      	cmp	r4, r0
 801ac00:	4623      	mov	r3, r4
 801ac02:	d807      	bhi.n	801ac14 <memmove+0x20>
 801ac04:	1e43      	subs	r3, r0, #1
 801ac06:	42a1      	cmp	r1, r4
 801ac08:	d008      	beq.n	801ac1c <memmove+0x28>
 801ac0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ac0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ac12:	e7f8      	b.n	801ac06 <memmove+0x12>
 801ac14:	4402      	add	r2, r0
 801ac16:	4601      	mov	r1, r0
 801ac18:	428a      	cmp	r2, r1
 801ac1a:	d100      	bne.n	801ac1e <memmove+0x2a>
 801ac1c:	bd10      	pop	{r4, pc}
 801ac1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ac22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ac26:	e7f7      	b.n	801ac18 <memmove+0x24>

0801ac28 <memset>:
 801ac28:	4402      	add	r2, r0
 801ac2a:	4603      	mov	r3, r0
 801ac2c:	4293      	cmp	r3, r2
 801ac2e:	d100      	bne.n	801ac32 <memset+0xa>
 801ac30:	4770      	bx	lr
 801ac32:	f803 1b01 	strb.w	r1, [r3], #1
 801ac36:	e7f9      	b.n	801ac2c <memset+0x4>

0801ac38 <_free_r>:
 801ac38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac3a:	2900      	cmp	r1, #0
 801ac3c:	d048      	beq.n	801acd0 <_free_r+0x98>
 801ac3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ac42:	9001      	str	r0, [sp, #4]
 801ac44:	2b00      	cmp	r3, #0
 801ac46:	f1a1 0404 	sub.w	r4, r1, #4
 801ac4a:	bfb8      	it	lt
 801ac4c:	18e4      	addlt	r4, r4, r3
 801ac4e:	f000 ff77 	bl	801bb40 <__malloc_lock>
 801ac52:	4a20      	ldr	r2, [pc, #128]	; (801acd4 <_free_r+0x9c>)
 801ac54:	9801      	ldr	r0, [sp, #4]
 801ac56:	6813      	ldr	r3, [r2, #0]
 801ac58:	4615      	mov	r5, r2
 801ac5a:	b933      	cbnz	r3, 801ac6a <_free_r+0x32>
 801ac5c:	6063      	str	r3, [r4, #4]
 801ac5e:	6014      	str	r4, [r2, #0]
 801ac60:	b003      	add	sp, #12
 801ac62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ac66:	f000 bf71 	b.w	801bb4c <__malloc_unlock>
 801ac6a:	42a3      	cmp	r3, r4
 801ac6c:	d90b      	bls.n	801ac86 <_free_r+0x4e>
 801ac6e:	6821      	ldr	r1, [r4, #0]
 801ac70:	1862      	adds	r2, r4, r1
 801ac72:	4293      	cmp	r3, r2
 801ac74:	bf04      	itt	eq
 801ac76:	681a      	ldreq	r2, [r3, #0]
 801ac78:	685b      	ldreq	r3, [r3, #4]
 801ac7a:	6063      	str	r3, [r4, #4]
 801ac7c:	bf04      	itt	eq
 801ac7e:	1852      	addeq	r2, r2, r1
 801ac80:	6022      	streq	r2, [r4, #0]
 801ac82:	602c      	str	r4, [r5, #0]
 801ac84:	e7ec      	b.n	801ac60 <_free_r+0x28>
 801ac86:	461a      	mov	r2, r3
 801ac88:	685b      	ldr	r3, [r3, #4]
 801ac8a:	b10b      	cbz	r3, 801ac90 <_free_r+0x58>
 801ac8c:	42a3      	cmp	r3, r4
 801ac8e:	d9fa      	bls.n	801ac86 <_free_r+0x4e>
 801ac90:	6811      	ldr	r1, [r2, #0]
 801ac92:	1855      	adds	r5, r2, r1
 801ac94:	42a5      	cmp	r5, r4
 801ac96:	d10b      	bne.n	801acb0 <_free_r+0x78>
 801ac98:	6824      	ldr	r4, [r4, #0]
 801ac9a:	4421      	add	r1, r4
 801ac9c:	1854      	adds	r4, r2, r1
 801ac9e:	42a3      	cmp	r3, r4
 801aca0:	6011      	str	r1, [r2, #0]
 801aca2:	d1dd      	bne.n	801ac60 <_free_r+0x28>
 801aca4:	681c      	ldr	r4, [r3, #0]
 801aca6:	685b      	ldr	r3, [r3, #4]
 801aca8:	6053      	str	r3, [r2, #4]
 801acaa:	4421      	add	r1, r4
 801acac:	6011      	str	r1, [r2, #0]
 801acae:	e7d7      	b.n	801ac60 <_free_r+0x28>
 801acb0:	d902      	bls.n	801acb8 <_free_r+0x80>
 801acb2:	230c      	movs	r3, #12
 801acb4:	6003      	str	r3, [r0, #0]
 801acb6:	e7d3      	b.n	801ac60 <_free_r+0x28>
 801acb8:	6825      	ldr	r5, [r4, #0]
 801acba:	1961      	adds	r1, r4, r5
 801acbc:	428b      	cmp	r3, r1
 801acbe:	bf04      	itt	eq
 801acc0:	6819      	ldreq	r1, [r3, #0]
 801acc2:	685b      	ldreq	r3, [r3, #4]
 801acc4:	6063      	str	r3, [r4, #4]
 801acc6:	bf04      	itt	eq
 801acc8:	1949      	addeq	r1, r1, r5
 801acca:	6021      	streq	r1, [r4, #0]
 801accc:	6054      	str	r4, [r2, #4]
 801acce:	e7c7      	b.n	801ac60 <_free_r+0x28>
 801acd0:	b003      	add	sp, #12
 801acd2:	bd30      	pop	{r4, r5, pc}
 801acd4:	20010b44 	.word	0x20010b44

0801acd8 <_malloc_r>:
 801acd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acda:	1ccd      	adds	r5, r1, #3
 801acdc:	f025 0503 	bic.w	r5, r5, #3
 801ace0:	3508      	adds	r5, #8
 801ace2:	2d0c      	cmp	r5, #12
 801ace4:	bf38      	it	cc
 801ace6:	250c      	movcc	r5, #12
 801ace8:	2d00      	cmp	r5, #0
 801acea:	4606      	mov	r6, r0
 801acec:	db01      	blt.n	801acf2 <_malloc_r+0x1a>
 801acee:	42a9      	cmp	r1, r5
 801acf0:	d903      	bls.n	801acfa <_malloc_r+0x22>
 801acf2:	230c      	movs	r3, #12
 801acf4:	6033      	str	r3, [r6, #0]
 801acf6:	2000      	movs	r0, #0
 801acf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acfa:	f000 ff21 	bl	801bb40 <__malloc_lock>
 801acfe:	4921      	ldr	r1, [pc, #132]	; (801ad84 <_malloc_r+0xac>)
 801ad00:	680a      	ldr	r2, [r1, #0]
 801ad02:	4614      	mov	r4, r2
 801ad04:	b99c      	cbnz	r4, 801ad2e <_malloc_r+0x56>
 801ad06:	4f20      	ldr	r7, [pc, #128]	; (801ad88 <_malloc_r+0xb0>)
 801ad08:	683b      	ldr	r3, [r7, #0]
 801ad0a:	b923      	cbnz	r3, 801ad16 <_malloc_r+0x3e>
 801ad0c:	4621      	mov	r1, r4
 801ad0e:	4630      	mov	r0, r6
 801ad10:	f000 fbec 	bl	801b4ec <_sbrk_r>
 801ad14:	6038      	str	r0, [r7, #0]
 801ad16:	4629      	mov	r1, r5
 801ad18:	4630      	mov	r0, r6
 801ad1a:	f000 fbe7 	bl	801b4ec <_sbrk_r>
 801ad1e:	1c43      	adds	r3, r0, #1
 801ad20:	d123      	bne.n	801ad6a <_malloc_r+0x92>
 801ad22:	230c      	movs	r3, #12
 801ad24:	6033      	str	r3, [r6, #0]
 801ad26:	4630      	mov	r0, r6
 801ad28:	f000 ff10 	bl	801bb4c <__malloc_unlock>
 801ad2c:	e7e3      	b.n	801acf6 <_malloc_r+0x1e>
 801ad2e:	6823      	ldr	r3, [r4, #0]
 801ad30:	1b5b      	subs	r3, r3, r5
 801ad32:	d417      	bmi.n	801ad64 <_malloc_r+0x8c>
 801ad34:	2b0b      	cmp	r3, #11
 801ad36:	d903      	bls.n	801ad40 <_malloc_r+0x68>
 801ad38:	6023      	str	r3, [r4, #0]
 801ad3a:	441c      	add	r4, r3
 801ad3c:	6025      	str	r5, [r4, #0]
 801ad3e:	e004      	b.n	801ad4a <_malloc_r+0x72>
 801ad40:	6863      	ldr	r3, [r4, #4]
 801ad42:	42a2      	cmp	r2, r4
 801ad44:	bf0c      	ite	eq
 801ad46:	600b      	streq	r3, [r1, #0]
 801ad48:	6053      	strne	r3, [r2, #4]
 801ad4a:	4630      	mov	r0, r6
 801ad4c:	f000 fefe 	bl	801bb4c <__malloc_unlock>
 801ad50:	f104 000b 	add.w	r0, r4, #11
 801ad54:	1d23      	adds	r3, r4, #4
 801ad56:	f020 0007 	bic.w	r0, r0, #7
 801ad5a:	1ac2      	subs	r2, r0, r3
 801ad5c:	d0cc      	beq.n	801acf8 <_malloc_r+0x20>
 801ad5e:	1a1b      	subs	r3, r3, r0
 801ad60:	50a3      	str	r3, [r4, r2]
 801ad62:	e7c9      	b.n	801acf8 <_malloc_r+0x20>
 801ad64:	4622      	mov	r2, r4
 801ad66:	6864      	ldr	r4, [r4, #4]
 801ad68:	e7cc      	b.n	801ad04 <_malloc_r+0x2c>
 801ad6a:	1cc4      	adds	r4, r0, #3
 801ad6c:	f024 0403 	bic.w	r4, r4, #3
 801ad70:	42a0      	cmp	r0, r4
 801ad72:	d0e3      	beq.n	801ad3c <_malloc_r+0x64>
 801ad74:	1a21      	subs	r1, r4, r0
 801ad76:	4630      	mov	r0, r6
 801ad78:	f000 fbb8 	bl	801b4ec <_sbrk_r>
 801ad7c:	3001      	adds	r0, #1
 801ad7e:	d1dd      	bne.n	801ad3c <_malloc_r+0x64>
 801ad80:	e7cf      	b.n	801ad22 <_malloc_r+0x4a>
 801ad82:	bf00      	nop
 801ad84:	20010b44 	.word	0x20010b44
 801ad88:	20010b48 	.word	0x20010b48

0801ad8c <__sfputc_r>:
 801ad8c:	6893      	ldr	r3, [r2, #8]
 801ad8e:	3b01      	subs	r3, #1
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	b410      	push	{r4}
 801ad94:	6093      	str	r3, [r2, #8]
 801ad96:	da08      	bge.n	801adaa <__sfputc_r+0x1e>
 801ad98:	6994      	ldr	r4, [r2, #24]
 801ad9a:	42a3      	cmp	r3, r4
 801ad9c:	db01      	blt.n	801ada2 <__sfputc_r+0x16>
 801ad9e:	290a      	cmp	r1, #10
 801ada0:	d103      	bne.n	801adaa <__sfputc_r+0x1e>
 801ada2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ada6:	f000 bca3 	b.w	801b6f0 <__swbuf_r>
 801adaa:	6813      	ldr	r3, [r2, #0]
 801adac:	1c58      	adds	r0, r3, #1
 801adae:	6010      	str	r0, [r2, #0]
 801adb0:	7019      	strb	r1, [r3, #0]
 801adb2:	4608      	mov	r0, r1
 801adb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801adb8:	4770      	bx	lr

0801adba <__sfputs_r>:
 801adba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adbc:	4606      	mov	r6, r0
 801adbe:	460f      	mov	r7, r1
 801adc0:	4614      	mov	r4, r2
 801adc2:	18d5      	adds	r5, r2, r3
 801adc4:	42ac      	cmp	r4, r5
 801adc6:	d101      	bne.n	801adcc <__sfputs_r+0x12>
 801adc8:	2000      	movs	r0, #0
 801adca:	e007      	b.n	801addc <__sfputs_r+0x22>
 801adcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801add0:	463a      	mov	r2, r7
 801add2:	4630      	mov	r0, r6
 801add4:	f7ff ffda 	bl	801ad8c <__sfputc_r>
 801add8:	1c43      	adds	r3, r0, #1
 801adda:	d1f3      	bne.n	801adc4 <__sfputs_r+0xa>
 801addc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ade0 <_vfiprintf_r>:
 801ade0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ade4:	460d      	mov	r5, r1
 801ade6:	b09d      	sub	sp, #116	; 0x74
 801ade8:	4614      	mov	r4, r2
 801adea:	4698      	mov	r8, r3
 801adec:	4606      	mov	r6, r0
 801adee:	b118      	cbz	r0, 801adf8 <_vfiprintf_r+0x18>
 801adf0:	6983      	ldr	r3, [r0, #24]
 801adf2:	b90b      	cbnz	r3, 801adf8 <_vfiprintf_r+0x18>
 801adf4:	f7ff fdfa 	bl	801a9ec <__sinit>
 801adf8:	4b89      	ldr	r3, [pc, #548]	; (801b020 <_vfiprintf_r+0x240>)
 801adfa:	429d      	cmp	r5, r3
 801adfc:	d11b      	bne.n	801ae36 <_vfiprintf_r+0x56>
 801adfe:	6875      	ldr	r5, [r6, #4]
 801ae00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae02:	07d9      	lsls	r1, r3, #31
 801ae04:	d405      	bmi.n	801ae12 <_vfiprintf_r+0x32>
 801ae06:	89ab      	ldrh	r3, [r5, #12]
 801ae08:	059a      	lsls	r2, r3, #22
 801ae0a:	d402      	bmi.n	801ae12 <_vfiprintf_r+0x32>
 801ae0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae0e:	f7ff fec2 	bl	801ab96 <__retarget_lock_acquire_recursive>
 801ae12:	89ab      	ldrh	r3, [r5, #12]
 801ae14:	071b      	lsls	r3, r3, #28
 801ae16:	d501      	bpl.n	801ae1c <_vfiprintf_r+0x3c>
 801ae18:	692b      	ldr	r3, [r5, #16]
 801ae1a:	b9eb      	cbnz	r3, 801ae58 <_vfiprintf_r+0x78>
 801ae1c:	4629      	mov	r1, r5
 801ae1e:	4630      	mov	r0, r6
 801ae20:	f000 fcca 	bl	801b7b8 <__swsetup_r>
 801ae24:	b1c0      	cbz	r0, 801ae58 <_vfiprintf_r+0x78>
 801ae26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ae28:	07dc      	lsls	r4, r3, #31
 801ae2a:	d50e      	bpl.n	801ae4a <_vfiprintf_r+0x6a>
 801ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 801ae30:	b01d      	add	sp, #116	; 0x74
 801ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae36:	4b7b      	ldr	r3, [pc, #492]	; (801b024 <_vfiprintf_r+0x244>)
 801ae38:	429d      	cmp	r5, r3
 801ae3a:	d101      	bne.n	801ae40 <_vfiprintf_r+0x60>
 801ae3c:	68b5      	ldr	r5, [r6, #8]
 801ae3e:	e7df      	b.n	801ae00 <_vfiprintf_r+0x20>
 801ae40:	4b79      	ldr	r3, [pc, #484]	; (801b028 <_vfiprintf_r+0x248>)
 801ae42:	429d      	cmp	r5, r3
 801ae44:	bf08      	it	eq
 801ae46:	68f5      	ldreq	r5, [r6, #12]
 801ae48:	e7da      	b.n	801ae00 <_vfiprintf_r+0x20>
 801ae4a:	89ab      	ldrh	r3, [r5, #12]
 801ae4c:	0598      	lsls	r0, r3, #22
 801ae4e:	d4ed      	bmi.n	801ae2c <_vfiprintf_r+0x4c>
 801ae50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ae52:	f7ff fea1 	bl	801ab98 <__retarget_lock_release_recursive>
 801ae56:	e7e9      	b.n	801ae2c <_vfiprintf_r+0x4c>
 801ae58:	2300      	movs	r3, #0
 801ae5a:	9309      	str	r3, [sp, #36]	; 0x24
 801ae5c:	2320      	movs	r3, #32
 801ae5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ae62:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae66:	2330      	movs	r3, #48	; 0x30
 801ae68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b02c <_vfiprintf_r+0x24c>
 801ae6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ae70:	f04f 0901 	mov.w	r9, #1
 801ae74:	4623      	mov	r3, r4
 801ae76:	469a      	mov	sl, r3
 801ae78:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae7c:	b10a      	cbz	r2, 801ae82 <_vfiprintf_r+0xa2>
 801ae7e:	2a25      	cmp	r2, #37	; 0x25
 801ae80:	d1f9      	bne.n	801ae76 <_vfiprintf_r+0x96>
 801ae82:	ebba 0b04 	subs.w	fp, sl, r4
 801ae86:	d00b      	beq.n	801aea0 <_vfiprintf_r+0xc0>
 801ae88:	465b      	mov	r3, fp
 801ae8a:	4622      	mov	r2, r4
 801ae8c:	4629      	mov	r1, r5
 801ae8e:	4630      	mov	r0, r6
 801ae90:	f7ff ff93 	bl	801adba <__sfputs_r>
 801ae94:	3001      	adds	r0, #1
 801ae96:	f000 80aa 	beq.w	801afee <_vfiprintf_r+0x20e>
 801ae9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae9c:	445a      	add	r2, fp
 801ae9e:	9209      	str	r2, [sp, #36]	; 0x24
 801aea0:	f89a 3000 	ldrb.w	r3, [sl]
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	f000 80a2 	beq.w	801afee <_vfiprintf_r+0x20e>
 801aeaa:	2300      	movs	r3, #0
 801aeac:	f04f 32ff 	mov.w	r2, #4294967295
 801aeb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aeb4:	f10a 0a01 	add.w	sl, sl, #1
 801aeb8:	9304      	str	r3, [sp, #16]
 801aeba:	9307      	str	r3, [sp, #28]
 801aebc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aec0:	931a      	str	r3, [sp, #104]	; 0x68
 801aec2:	4654      	mov	r4, sl
 801aec4:	2205      	movs	r2, #5
 801aec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aeca:	4858      	ldr	r0, [pc, #352]	; (801b02c <_vfiprintf_r+0x24c>)
 801aecc:	f7e5 f988 	bl	80001e0 <memchr>
 801aed0:	9a04      	ldr	r2, [sp, #16]
 801aed2:	b9d8      	cbnz	r0, 801af0c <_vfiprintf_r+0x12c>
 801aed4:	06d1      	lsls	r1, r2, #27
 801aed6:	bf44      	itt	mi
 801aed8:	2320      	movmi	r3, #32
 801aeda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aede:	0713      	lsls	r3, r2, #28
 801aee0:	bf44      	itt	mi
 801aee2:	232b      	movmi	r3, #43	; 0x2b
 801aee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aee8:	f89a 3000 	ldrb.w	r3, [sl]
 801aeec:	2b2a      	cmp	r3, #42	; 0x2a
 801aeee:	d015      	beq.n	801af1c <_vfiprintf_r+0x13c>
 801aef0:	9a07      	ldr	r2, [sp, #28]
 801aef2:	4654      	mov	r4, sl
 801aef4:	2000      	movs	r0, #0
 801aef6:	f04f 0c0a 	mov.w	ip, #10
 801aefa:	4621      	mov	r1, r4
 801aefc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801af00:	3b30      	subs	r3, #48	; 0x30
 801af02:	2b09      	cmp	r3, #9
 801af04:	d94e      	bls.n	801afa4 <_vfiprintf_r+0x1c4>
 801af06:	b1b0      	cbz	r0, 801af36 <_vfiprintf_r+0x156>
 801af08:	9207      	str	r2, [sp, #28]
 801af0a:	e014      	b.n	801af36 <_vfiprintf_r+0x156>
 801af0c:	eba0 0308 	sub.w	r3, r0, r8
 801af10:	fa09 f303 	lsl.w	r3, r9, r3
 801af14:	4313      	orrs	r3, r2
 801af16:	9304      	str	r3, [sp, #16]
 801af18:	46a2      	mov	sl, r4
 801af1a:	e7d2      	b.n	801aec2 <_vfiprintf_r+0xe2>
 801af1c:	9b03      	ldr	r3, [sp, #12]
 801af1e:	1d19      	adds	r1, r3, #4
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	9103      	str	r1, [sp, #12]
 801af24:	2b00      	cmp	r3, #0
 801af26:	bfbb      	ittet	lt
 801af28:	425b      	neglt	r3, r3
 801af2a:	f042 0202 	orrlt.w	r2, r2, #2
 801af2e:	9307      	strge	r3, [sp, #28]
 801af30:	9307      	strlt	r3, [sp, #28]
 801af32:	bfb8      	it	lt
 801af34:	9204      	strlt	r2, [sp, #16]
 801af36:	7823      	ldrb	r3, [r4, #0]
 801af38:	2b2e      	cmp	r3, #46	; 0x2e
 801af3a:	d10c      	bne.n	801af56 <_vfiprintf_r+0x176>
 801af3c:	7863      	ldrb	r3, [r4, #1]
 801af3e:	2b2a      	cmp	r3, #42	; 0x2a
 801af40:	d135      	bne.n	801afae <_vfiprintf_r+0x1ce>
 801af42:	9b03      	ldr	r3, [sp, #12]
 801af44:	1d1a      	adds	r2, r3, #4
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	9203      	str	r2, [sp, #12]
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	bfb8      	it	lt
 801af4e:	f04f 33ff 	movlt.w	r3, #4294967295
 801af52:	3402      	adds	r4, #2
 801af54:	9305      	str	r3, [sp, #20]
 801af56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b03c <_vfiprintf_r+0x25c>
 801af5a:	7821      	ldrb	r1, [r4, #0]
 801af5c:	2203      	movs	r2, #3
 801af5e:	4650      	mov	r0, sl
 801af60:	f7e5 f93e 	bl	80001e0 <memchr>
 801af64:	b140      	cbz	r0, 801af78 <_vfiprintf_r+0x198>
 801af66:	2340      	movs	r3, #64	; 0x40
 801af68:	eba0 000a 	sub.w	r0, r0, sl
 801af6c:	fa03 f000 	lsl.w	r0, r3, r0
 801af70:	9b04      	ldr	r3, [sp, #16]
 801af72:	4303      	orrs	r3, r0
 801af74:	3401      	adds	r4, #1
 801af76:	9304      	str	r3, [sp, #16]
 801af78:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af7c:	482c      	ldr	r0, [pc, #176]	; (801b030 <_vfiprintf_r+0x250>)
 801af7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801af82:	2206      	movs	r2, #6
 801af84:	f7e5 f92c 	bl	80001e0 <memchr>
 801af88:	2800      	cmp	r0, #0
 801af8a:	d03f      	beq.n	801b00c <_vfiprintf_r+0x22c>
 801af8c:	4b29      	ldr	r3, [pc, #164]	; (801b034 <_vfiprintf_r+0x254>)
 801af8e:	bb1b      	cbnz	r3, 801afd8 <_vfiprintf_r+0x1f8>
 801af90:	9b03      	ldr	r3, [sp, #12]
 801af92:	3307      	adds	r3, #7
 801af94:	f023 0307 	bic.w	r3, r3, #7
 801af98:	3308      	adds	r3, #8
 801af9a:	9303      	str	r3, [sp, #12]
 801af9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af9e:	443b      	add	r3, r7
 801afa0:	9309      	str	r3, [sp, #36]	; 0x24
 801afa2:	e767      	b.n	801ae74 <_vfiprintf_r+0x94>
 801afa4:	fb0c 3202 	mla	r2, ip, r2, r3
 801afa8:	460c      	mov	r4, r1
 801afaa:	2001      	movs	r0, #1
 801afac:	e7a5      	b.n	801aefa <_vfiprintf_r+0x11a>
 801afae:	2300      	movs	r3, #0
 801afb0:	3401      	adds	r4, #1
 801afb2:	9305      	str	r3, [sp, #20]
 801afb4:	4619      	mov	r1, r3
 801afb6:	f04f 0c0a 	mov.w	ip, #10
 801afba:	4620      	mov	r0, r4
 801afbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801afc0:	3a30      	subs	r2, #48	; 0x30
 801afc2:	2a09      	cmp	r2, #9
 801afc4:	d903      	bls.n	801afce <_vfiprintf_r+0x1ee>
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d0c5      	beq.n	801af56 <_vfiprintf_r+0x176>
 801afca:	9105      	str	r1, [sp, #20]
 801afcc:	e7c3      	b.n	801af56 <_vfiprintf_r+0x176>
 801afce:	fb0c 2101 	mla	r1, ip, r1, r2
 801afd2:	4604      	mov	r4, r0
 801afd4:	2301      	movs	r3, #1
 801afd6:	e7f0      	b.n	801afba <_vfiprintf_r+0x1da>
 801afd8:	ab03      	add	r3, sp, #12
 801afda:	9300      	str	r3, [sp, #0]
 801afdc:	462a      	mov	r2, r5
 801afde:	4b16      	ldr	r3, [pc, #88]	; (801b038 <_vfiprintf_r+0x258>)
 801afe0:	a904      	add	r1, sp, #16
 801afe2:	4630      	mov	r0, r6
 801afe4:	f3af 8000 	nop.w
 801afe8:	4607      	mov	r7, r0
 801afea:	1c78      	adds	r0, r7, #1
 801afec:	d1d6      	bne.n	801af9c <_vfiprintf_r+0x1bc>
 801afee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aff0:	07d9      	lsls	r1, r3, #31
 801aff2:	d405      	bmi.n	801b000 <_vfiprintf_r+0x220>
 801aff4:	89ab      	ldrh	r3, [r5, #12]
 801aff6:	059a      	lsls	r2, r3, #22
 801aff8:	d402      	bmi.n	801b000 <_vfiprintf_r+0x220>
 801affa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801affc:	f7ff fdcc 	bl	801ab98 <__retarget_lock_release_recursive>
 801b000:	89ab      	ldrh	r3, [r5, #12]
 801b002:	065b      	lsls	r3, r3, #25
 801b004:	f53f af12 	bmi.w	801ae2c <_vfiprintf_r+0x4c>
 801b008:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b00a:	e711      	b.n	801ae30 <_vfiprintf_r+0x50>
 801b00c:	ab03      	add	r3, sp, #12
 801b00e:	9300      	str	r3, [sp, #0]
 801b010:	462a      	mov	r2, r5
 801b012:	4b09      	ldr	r3, [pc, #36]	; (801b038 <_vfiprintf_r+0x258>)
 801b014:	a904      	add	r1, sp, #16
 801b016:	4630      	mov	r0, r6
 801b018:	f000 f880 	bl	801b11c <_printf_i>
 801b01c:	e7e4      	b.n	801afe8 <_vfiprintf_r+0x208>
 801b01e:	bf00      	nop
 801b020:	0802017c 	.word	0x0802017c
 801b024:	0802019c 	.word	0x0802019c
 801b028:	0802015c 	.word	0x0802015c
 801b02c:	080201c0 	.word	0x080201c0
 801b030:	080201ca 	.word	0x080201ca
 801b034:	00000000 	.word	0x00000000
 801b038:	0801adbb 	.word	0x0801adbb
 801b03c:	080201c6 	.word	0x080201c6

0801b040 <_printf_common>:
 801b040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b044:	4616      	mov	r6, r2
 801b046:	4699      	mov	r9, r3
 801b048:	688a      	ldr	r2, [r1, #8]
 801b04a:	690b      	ldr	r3, [r1, #16]
 801b04c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b050:	4293      	cmp	r3, r2
 801b052:	bfb8      	it	lt
 801b054:	4613      	movlt	r3, r2
 801b056:	6033      	str	r3, [r6, #0]
 801b058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b05c:	4607      	mov	r7, r0
 801b05e:	460c      	mov	r4, r1
 801b060:	b10a      	cbz	r2, 801b066 <_printf_common+0x26>
 801b062:	3301      	adds	r3, #1
 801b064:	6033      	str	r3, [r6, #0]
 801b066:	6823      	ldr	r3, [r4, #0]
 801b068:	0699      	lsls	r1, r3, #26
 801b06a:	bf42      	ittt	mi
 801b06c:	6833      	ldrmi	r3, [r6, #0]
 801b06e:	3302      	addmi	r3, #2
 801b070:	6033      	strmi	r3, [r6, #0]
 801b072:	6825      	ldr	r5, [r4, #0]
 801b074:	f015 0506 	ands.w	r5, r5, #6
 801b078:	d106      	bne.n	801b088 <_printf_common+0x48>
 801b07a:	f104 0a19 	add.w	sl, r4, #25
 801b07e:	68e3      	ldr	r3, [r4, #12]
 801b080:	6832      	ldr	r2, [r6, #0]
 801b082:	1a9b      	subs	r3, r3, r2
 801b084:	42ab      	cmp	r3, r5
 801b086:	dc26      	bgt.n	801b0d6 <_printf_common+0x96>
 801b088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b08c:	1e13      	subs	r3, r2, #0
 801b08e:	6822      	ldr	r2, [r4, #0]
 801b090:	bf18      	it	ne
 801b092:	2301      	movne	r3, #1
 801b094:	0692      	lsls	r2, r2, #26
 801b096:	d42b      	bmi.n	801b0f0 <_printf_common+0xb0>
 801b098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b09c:	4649      	mov	r1, r9
 801b09e:	4638      	mov	r0, r7
 801b0a0:	47c0      	blx	r8
 801b0a2:	3001      	adds	r0, #1
 801b0a4:	d01e      	beq.n	801b0e4 <_printf_common+0xa4>
 801b0a6:	6823      	ldr	r3, [r4, #0]
 801b0a8:	68e5      	ldr	r5, [r4, #12]
 801b0aa:	6832      	ldr	r2, [r6, #0]
 801b0ac:	f003 0306 	and.w	r3, r3, #6
 801b0b0:	2b04      	cmp	r3, #4
 801b0b2:	bf08      	it	eq
 801b0b4:	1aad      	subeq	r5, r5, r2
 801b0b6:	68a3      	ldr	r3, [r4, #8]
 801b0b8:	6922      	ldr	r2, [r4, #16]
 801b0ba:	bf0c      	ite	eq
 801b0bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b0c0:	2500      	movne	r5, #0
 801b0c2:	4293      	cmp	r3, r2
 801b0c4:	bfc4      	itt	gt
 801b0c6:	1a9b      	subgt	r3, r3, r2
 801b0c8:	18ed      	addgt	r5, r5, r3
 801b0ca:	2600      	movs	r6, #0
 801b0cc:	341a      	adds	r4, #26
 801b0ce:	42b5      	cmp	r5, r6
 801b0d0:	d11a      	bne.n	801b108 <_printf_common+0xc8>
 801b0d2:	2000      	movs	r0, #0
 801b0d4:	e008      	b.n	801b0e8 <_printf_common+0xa8>
 801b0d6:	2301      	movs	r3, #1
 801b0d8:	4652      	mov	r2, sl
 801b0da:	4649      	mov	r1, r9
 801b0dc:	4638      	mov	r0, r7
 801b0de:	47c0      	blx	r8
 801b0e0:	3001      	adds	r0, #1
 801b0e2:	d103      	bne.n	801b0ec <_printf_common+0xac>
 801b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 801b0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0ec:	3501      	adds	r5, #1
 801b0ee:	e7c6      	b.n	801b07e <_printf_common+0x3e>
 801b0f0:	18e1      	adds	r1, r4, r3
 801b0f2:	1c5a      	adds	r2, r3, #1
 801b0f4:	2030      	movs	r0, #48	; 0x30
 801b0f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b0fa:	4422      	add	r2, r4
 801b0fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b104:	3302      	adds	r3, #2
 801b106:	e7c7      	b.n	801b098 <_printf_common+0x58>
 801b108:	2301      	movs	r3, #1
 801b10a:	4622      	mov	r2, r4
 801b10c:	4649      	mov	r1, r9
 801b10e:	4638      	mov	r0, r7
 801b110:	47c0      	blx	r8
 801b112:	3001      	adds	r0, #1
 801b114:	d0e6      	beq.n	801b0e4 <_printf_common+0xa4>
 801b116:	3601      	adds	r6, #1
 801b118:	e7d9      	b.n	801b0ce <_printf_common+0x8e>
	...

0801b11c <_printf_i>:
 801b11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b120:	460c      	mov	r4, r1
 801b122:	4691      	mov	r9, r2
 801b124:	7e27      	ldrb	r7, [r4, #24]
 801b126:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b128:	2f78      	cmp	r7, #120	; 0x78
 801b12a:	4680      	mov	r8, r0
 801b12c:	469a      	mov	sl, r3
 801b12e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b132:	d807      	bhi.n	801b144 <_printf_i+0x28>
 801b134:	2f62      	cmp	r7, #98	; 0x62
 801b136:	d80a      	bhi.n	801b14e <_printf_i+0x32>
 801b138:	2f00      	cmp	r7, #0
 801b13a:	f000 80d8 	beq.w	801b2ee <_printf_i+0x1d2>
 801b13e:	2f58      	cmp	r7, #88	; 0x58
 801b140:	f000 80a3 	beq.w	801b28a <_printf_i+0x16e>
 801b144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b14c:	e03a      	b.n	801b1c4 <_printf_i+0xa8>
 801b14e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b152:	2b15      	cmp	r3, #21
 801b154:	d8f6      	bhi.n	801b144 <_printf_i+0x28>
 801b156:	a001      	add	r0, pc, #4	; (adr r0, 801b15c <_printf_i+0x40>)
 801b158:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b15c:	0801b1b5 	.word	0x0801b1b5
 801b160:	0801b1c9 	.word	0x0801b1c9
 801b164:	0801b145 	.word	0x0801b145
 801b168:	0801b145 	.word	0x0801b145
 801b16c:	0801b145 	.word	0x0801b145
 801b170:	0801b145 	.word	0x0801b145
 801b174:	0801b1c9 	.word	0x0801b1c9
 801b178:	0801b145 	.word	0x0801b145
 801b17c:	0801b145 	.word	0x0801b145
 801b180:	0801b145 	.word	0x0801b145
 801b184:	0801b145 	.word	0x0801b145
 801b188:	0801b2d5 	.word	0x0801b2d5
 801b18c:	0801b1f9 	.word	0x0801b1f9
 801b190:	0801b2b7 	.word	0x0801b2b7
 801b194:	0801b145 	.word	0x0801b145
 801b198:	0801b145 	.word	0x0801b145
 801b19c:	0801b2f7 	.word	0x0801b2f7
 801b1a0:	0801b145 	.word	0x0801b145
 801b1a4:	0801b1f9 	.word	0x0801b1f9
 801b1a8:	0801b145 	.word	0x0801b145
 801b1ac:	0801b145 	.word	0x0801b145
 801b1b0:	0801b2bf 	.word	0x0801b2bf
 801b1b4:	680b      	ldr	r3, [r1, #0]
 801b1b6:	1d1a      	adds	r2, r3, #4
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	600a      	str	r2, [r1, #0]
 801b1bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b1c4:	2301      	movs	r3, #1
 801b1c6:	e0a3      	b.n	801b310 <_printf_i+0x1f4>
 801b1c8:	6825      	ldr	r5, [r4, #0]
 801b1ca:	6808      	ldr	r0, [r1, #0]
 801b1cc:	062e      	lsls	r6, r5, #24
 801b1ce:	f100 0304 	add.w	r3, r0, #4
 801b1d2:	d50a      	bpl.n	801b1ea <_printf_i+0xce>
 801b1d4:	6805      	ldr	r5, [r0, #0]
 801b1d6:	600b      	str	r3, [r1, #0]
 801b1d8:	2d00      	cmp	r5, #0
 801b1da:	da03      	bge.n	801b1e4 <_printf_i+0xc8>
 801b1dc:	232d      	movs	r3, #45	; 0x2d
 801b1de:	426d      	negs	r5, r5
 801b1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b1e4:	485e      	ldr	r0, [pc, #376]	; (801b360 <_printf_i+0x244>)
 801b1e6:	230a      	movs	r3, #10
 801b1e8:	e019      	b.n	801b21e <_printf_i+0x102>
 801b1ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b1ee:	6805      	ldr	r5, [r0, #0]
 801b1f0:	600b      	str	r3, [r1, #0]
 801b1f2:	bf18      	it	ne
 801b1f4:	b22d      	sxthne	r5, r5
 801b1f6:	e7ef      	b.n	801b1d8 <_printf_i+0xbc>
 801b1f8:	680b      	ldr	r3, [r1, #0]
 801b1fa:	6825      	ldr	r5, [r4, #0]
 801b1fc:	1d18      	adds	r0, r3, #4
 801b1fe:	6008      	str	r0, [r1, #0]
 801b200:	0628      	lsls	r0, r5, #24
 801b202:	d501      	bpl.n	801b208 <_printf_i+0xec>
 801b204:	681d      	ldr	r5, [r3, #0]
 801b206:	e002      	b.n	801b20e <_printf_i+0xf2>
 801b208:	0669      	lsls	r1, r5, #25
 801b20a:	d5fb      	bpl.n	801b204 <_printf_i+0xe8>
 801b20c:	881d      	ldrh	r5, [r3, #0]
 801b20e:	4854      	ldr	r0, [pc, #336]	; (801b360 <_printf_i+0x244>)
 801b210:	2f6f      	cmp	r7, #111	; 0x6f
 801b212:	bf0c      	ite	eq
 801b214:	2308      	moveq	r3, #8
 801b216:	230a      	movne	r3, #10
 801b218:	2100      	movs	r1, #0
 801b21a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b21e:	6866      	ldr	r6, [r4, #4]
 801b220:	60a6      	str	r6, [r4, #8]
 801b222:	2e00      	cmp	r6, #0
 801b224:	bfa2      	ittt	ge
 801b226:	6821      	ldrge	r1, [r4, #0]
 801b228:	f021 0104 	bicge.w	r1, r1, #4
 801b22c:	6021      	strge	r1, [r4, #0]
 801b22e:	b90d      	cbnz	r5, 801b234 <_printf_i+0x118>
 801b230:	2e00      	cmp	r6, #0
 801b232:	d04d      	beq.n	801b2d0 <_printf_i+0x1b4>
 801b234:	4616      	mov	r6, r2
 801b236:	fbb5 f1f3 	udiv	r1, r5, r3
 801b23a:	fb03 5711 	mls	r7, r3, r1, r5
 801b23e:	5dc7      	ldrb	r7, [r0, r7]
 801b240:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b244:	462f      	mov	r7, r5
 801b246:	42bb      	cmp	r3, r7
 801b248:	460d      	mov	r5, r1
 801b24a:	d9f4      	bls.n	801b236 <_printf_i+0x11a>
 801b24c:	2b08      	cmp	r3, #8
 801b24e:	d10b      	bne.n	801b268 <_printf_i+0x14c>
 801b250:	6823      	ldr	r3, [r4, #0]
 801b252:	07df      	lsls	r7, r3, #31
 801b254:	d508      	bpl.n	801b268 <_printf_i+0x14c>
 801b256:	6923      	ldr	r3, [r4, #16]
 801b258:	6861      	ldr	r1, [r4, #4]
 801b25a:	4299      	cmp	r1, r3
 801b25c:	bfde      	ittt	le
 801b25e:	2330      	movle	r3, #48	; 0x30
 801b260:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b264:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b268:	1b92      	subs	r2, r2, r6
 801b26a:	6122      	str	r2, [r4, #16]
 801b26c:	f8cd a000 	str.w	sl, [sp]
 801b270:	464b      	mov	r3, r9
 801b272:	aa03      	add	r2, sp, #12
 801b274:	4621      	mov	r1, r4
 801b276:	4640      	mov	r0, r8
 801b278:	f7ff fee2 	bl	801b040 <_printf_common>
 801b27c:	3001      	adds	r0, #1
 801b27e:	d14c      	bne.n	801b31a <_printf_i+0x1fe>
 801b280:	f04f 30ff 	mov.w	r0, #4294967295
 801b284:	b004      	add	sp, #16
 801b286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b28a:	4835      	ldr	r0, [pc, #212]	; (801b360 <_printf_i+0x244>)
 801b28c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b290:	6823      	ldr	r3, [r4, #0]
 801b292:	680e      	ldr	r6, [r1, #0]
 801b294:	061f      	lsls	r7, r3, #24
 801b296:	f856 5b04 	ldr.w	r5, [r6], #4
 801b29a:	600e      	str	r6, [r1, #0]
 801b29c:	d514      	bpl.n	801b2c8 <_printf_i+0x1ac>
 801b29e:	07d9      	lsls	r1, r3, #31
 801b2a0:	bf44      	itt	mi
 801b2a2:	f043 0320 	orrmi.w	r3, r3, #32
 801b2a6:	6023      	strmi	r3, [r4, #0]
 801b2a8:	b91d      	cbnz	r5, 801b2b2 <_printf_i+0x196>
 801b2aa:	6823      	ldr	r3, [r4, #0]
 801b2ac:	f023 0320 	bic.w	r3, r3, #32
 801b2b0:	6023      	str	r3, [r4, #0]
 801b2b2:	2310      	movs	r3, #16
 801b2b4:	e7b0      	b.n	801b218 <_printf_i+0xfc>
 801b2b6:	6823      	ldr	r3, [r4, #0]
 801b2b8:	f043 0320 	orr.w	r3, r3, #32
 801b2bc:	6023      	str	r3, [r4, #0]
 801b2be:	2378      	movs	r3, #120	; 0x78
 801b2c0:	4828      	ldr	r0, [pc, #160]	; (801b364 <_printf_i+0x248>)
 801b2c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b2c6:	e7e3      	b.n	801b290 <_printf_i+0x174>
 801b2c8:	065e      	lsls	r6, r3, #25
 801b2ca:	bf48      	it	mi
 801b2cc:	b2ad      	uxthmi	r5, r5
 801b2ce:	e7e6      	b.n	801b29e <_printf_i+0x182>
 801b2d0:	4616      	mov	r6, r2
 801b2d2:	e7bb      	b.n	801b24c <_printf_i+0x130>
 801b2d4:	680b      	ldr	r3, [r1, #0]
 801b2d6:	6826      	ldr	r6, [r4, #0]
 801b2d8:	6960      	ldr	r0, [r4, #20]
 801b2da:	1d1d      	adds	r5, r3, #4
 801b2dc:	600d      	str	r5, [r1, #0]
 801b2de:	0635      	lsls	r5, r6, #24
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	d501      	bpl.n	801b2e8 <_printf_i+0x1cc>
 801b2e4:	6018      	str	r0, [r3, #0]
 801b2e6:	e002      	b.n	801b2ee <_printf_i+0x1d2>
 801b2e8:	0671      	lsls	r1, r6, #25
 801b2ea:	d5fb      	bpl.n	801b2e4 <_printf_i+0x1c8>
 801b2ec:	8018      	strh	r0, [r3, #0]
 801b2ee:	2300      	movs	r3, #0
 801b2f0:	6123      	str	r3, [r4, #16]
 801b2f2:	4616      	mov	r6, r2
 801b2f4:	e7ba      	b.n	801b26c <_printf_i+0x150>
 801b2f6:	680b      	ldr	r3, [r1, #0]
 801b2f8:	1d1a      	adds	r2, r3, #4
 801b2fa:	600a      	str	r2, [r1, #0]
 801b2fc:	681e      	ldr	r6, [r3, #0]
 801b2fe:	6862      	ldr	r2, [r4, #4]
 801b300:	2100      	movs	r1, #0
 801b302:	4630      	mov	r0, r6
 801b304:	f7e4 ff6c 	bl	80001e0 <memchr>
 801b308:	b108      	cbz	r0, 801b30e <_printf_i+0x1f2>
 801b30a:	1b80      	subs	r0, r0, r6
 801b30c:	6060      	str	r0, [r4, #4]
 801b30e:	6863      	ldr	r3, [r4, #4]
 801b310:	6123      	str	r3, [r4, #16]
 801b312:	2300      	movs	r3, #0
 801b314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b318:	e7a8      	b.n	801b26c <_printf_i+0x150>
 801b31a:	6923      	ldr	r3, [r4, #16]
 801b31c:	4632      	mov	r2, r6
 801b31e:	4649      	mov	r1, r9
 801b320:	4640      	mov	r0, r8
 801b322:	47d0      	blx	sl
 801b324:	3001      	adds	r0, #1
 801b326:	d0ab      	beq.n	801b280 <_printf_i+0x164>
 801b328:	6823      	ldr	r3, [r4, #0]
 801b32a:	079b      	lsls	r3, r3, #30
 801b32c:	d413      	bmi.n	801b356 <_printf_i+0x23a>
 801b32e:	68e0      	ldr	r0, [r4, #12]
 801b330:	9b03      	ldr	r3, [sp, #12]
 801b332:	4298      	cmp	r0, r3
 801b334:	bfb8      	it	lt
 801b336:	4618      	movlt	r0, r3
 801b338:	e7a4      	b.n	801b284 <_printf_i+0x168>
 801b33a:	2301      	movs	r3, #1
 801b33c:	4632      	mov	r2, r6
 801b33e:	4649      	mov	r1, r9
 801b340:	4640      	mov	r0, r8
 801b342:	47d0      	blx	sl
 801b344:	3001      	adds	r0, #1
 801b346:	d09b      	beq.n	801b280 <_printf_i+0x164>
 801b348:	3501      	adds	r5, #1
 801b34a:	68e3      	ldr	r3, [r4, #12]
 801b34c:	9903      	ldr	r1, [sp, #12]
 801b34e:	1a5b      	subs	r3, r3, r1
 801b350:	42ab      	cmp	r3, r5
 801b352:	dcf2      	bgt.n	801b33a <_printf_i+0x21e>
 801b354:	e7eb      	b.n	801b32e <_printf_i+0x212>
 801b356:	2500      	movs	r5, #0
 801b358:	f104 0619 	add.w	r6, r4, #25
 801b35c:	e7f5      	b.n	801b34a <_printf_i+0x22e>
 801b35e:	bf00      	nop
 801b360:	080201d1 	.word	0x080201d1
 801b364:	080201e2 	.word	0x080201e2

0801b368 <iprintf>:
 801b368:	b40f      	push	{r0, r1, r2, r3}
 801b36a:	4b0a      	ldr	r3, [pc, #40]	; (801b394 <iprintf+0x2c>)
 801b36c:	b513      	push	{r0, r1, r4, lr}
 801b36e:	681c      	ldr	r4, [r3, #0]
 801b370:	b124      	cbz	r4, 801b37c <iprintf+0x14>
 801b372:	69a3      	ldr	r3, [r4, #24]
 801b374:	b913      	cbnz	r3, 801b37c <iprintf+0x14>
 801b376:	4620      	mov	r0, r4
 801b378:	f7ff fb38 	bl	801a9ec <__sinit>
 801b37c:	ab05      	add	r3, sp, #20
 801b37e:	9a04      	ldr	r2, [sp, #16]
 801b380:	68a1      	ldr	r1, [r4, #8]
 801b382:	9301      	str	r3, [sp, #4]
 801b384:	4620      	mov	r0, r4
 801b386:	f7ff fd2b 	bl	801ade0 <_vfiprintf_r>
 801b38a:	b002      	add	sp, #8
 801b38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b390:	b004      	add	sp, #16
 801b392:	4770      	bx	lr
 801b394:	20000040 	.word	0x20000040

0801b398 <rand>:
 801b398:	4b17      	ldr	r3, [pc, #92]	; (801b3f8 <rand+0x60>)
 801b39a:	b510      	push	{r4, lr}
 801b39c:	681c      	ldr	r4, [r3, #0]
 801b39e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b3a0:	b9b3      	cbnz	r3, 801b3d0 <rand+0x38>
 801b3a2:	2018      	movs	r0, #24
 801b3a4:	f7ff fbfa 	bl	801ab9c <malloc>
 801b3a8:	63a0      	str	r0, [r4, #56]	; 0x38
 801b3aa:	b928      	cbnz	r0, 801b3b8 <rand+0x20>
 801b3ac:	4602      	mov	r2, r0
 801b3ae:	4b13      	ldr	r3, [pc, #76]	; (801b3fc <rand+0x64>)
 801b3b0:	4813      	ldr	r0, [pc, #76]	; (801b400 <rand+0x68>)
 801b3b2:	214e      	movs	r1, #78	; 0x4e
 801b3b4:	f7ff faa0 	bl	801a8f8 <__assert_func>
 801b3b8:	4a12      	ldr	r2, [pc, #72]	; (801b404 <rand+0x6c>)
 801b3ba:	4b13      	ldr	r3, [pc, #76]	; (801b408 <rand+0x70>)
 801b3bc:	e9c0 2300 	strd	r2, r3, [r0]
 801b3c0:	4b12      	ldr	r3, [pc, #72]	; (801b40c <rand+0x74>)
 801b3c2:	6083      	str	r3, [r0, #8]
 801b3c4:	230b      	movs	r3, #11
 801b3c6:	8183      	strh	r3, [r0, #12]
 801b3c8:	2201      	movs	r2, #1
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b3d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b3d2:	480f      	ldr	r0, [pc, #60]	; (801b410 <rand+0x78>)
 801b3d4:	690a      	ldr	r2, [r1, #16]
 801b3d6:	694b      	ldr	r3, [r1, #20]
 801b3d8:	4c0e      	ldr	r4, [pc, #56]	; (801b414 <rand+0x7c>)
 801b3da:	4350      	muls	r0, r2
 801b3dc:	fb04 0003 	mla	r0, r4, r3, r0
 801b3e0:	fba2 3404 	umull	r3, r4, r2, r4
 801b3e4:	1c5a      	adds	r2, r3, #1
 801b3e6:	4404      	add	r4, r0
 801b3e8:	f144 0000 	adc.w	r0, r4, #0
 801b3ec:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801b3f0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b3f4:	bd10      	pop	{r4, pc}
 801b3f6:	bf00      	nop
 801b3f8:	20000040 	.word	0x20000040
 801b3fc:	080201f3 	.word	0x080201f3
 801b400:	0802020a 	.word	0x0802020a
 801b404:	abcd330e 	.word	0xabcd330e
 801b408:	e66d1234 	.word	0xe66d1234
 801b40c:	0005deec 	.word	0x0005deec
 801b410:	5851f42d 	.word	0x5851f42d
 801b414:	4c957f2d 	.word	0x4c957f2d

0801b418 <cleanup_glue>:
 801b418:	b538      	push	{r3, r4, r5, lr}
 801b41a:	460c      	mov	r4, r1
 801b41c:	6809      	ldr	r1, [r1, #0]
 801b41e:	4605      	mov	r5, r0
 801b420:	b109      	cbz	r1, 801b426 <cleanup_glue+0xe>
 801b422:	f7ff fff9 	bl	801b418 <cleanup_glue>
 801b426:	4621      	mov	r1, r4
 801b428:	4628      	mov	r0, r5
 801b42a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b42e:	f7ff bc03 	b.w	801ac38 <_free_r>
	...

0801b434 <_reclaim_reent>:
 801b434:	4b2c      	ldr	r3, [pc, #176]	; (801b4e8 <_reclaim_reent+0xb4>)
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	4283      	cmp	r3, r0
 801b43a:	b570      	push	{r4, r5, r6, lr}
 801b43c:	4604      	mov	r4, r0
 801b43e:	d051      	beq.n	801b4e4 <_reclaim_reent+0xb0>
 801b440:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b442:	b143      	cbz	r3, 801b456 <_reclaim_reent+0x22>
 801b444:	68db      	ldr	r3, [r3, #12]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d14a      	bne.n	801b4e0 <_reclaim_reent+0xac>
 801b44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b44c:	6819      	ldr	r1, [r3, #0]
 801b44e:	b111      	cbz	r1, 801b456 <_reclaim_reent+0x22>
 801b450:	4620      	mov	r0, r4
 801b452:	f7ff fbf1 	bl	801ac38 <_free_r>
 801b456:	6961      	ldr	r1, [r4, #20]
 801b458:	b111      	cbz	r1, 801b460 <_reclaim_reent+0x2c>
 801b45a:	4620      	mov	r0, r4
 801b45c:	f7ff fbec 	bl	801ac38 <_free_r>
 801b460:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b462:	b111      	cbz	r1, 801b46a <_reclaim_reent+0x36>
 801b464:	4620      	mov	r0, r4
 801b466:	f7ff fbe7 	bl	801ac38 <_free_r>
 801b46a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b46c:	b111      	cbz	r1, 801b474 <_reclaim_reent+0x40>
 801b46e:	4620      	mov	r0, r4
 801b470:	f7ff fbe2 	bl	801ac38 <_free_r>
 801b474:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b476:	b111      	cbz	r1, 801b47e <_reclaim_reent+0x4a>
 801b478:	4620      	mov	r0, r4
 801b47a:	f7ff fbdd 	bl	801ac38 <_free_r>
 801b47e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b480:	b111      	cbz	r1, 801b488 <_reclaim_reent+0x54>
 801b482:	4620      	mov	r0, r4
 801b484:	f7ff fbd8 	bl	801ac38 <_free_r>
 801b488:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b48a:	b111      	cbz	r1, 801b492 <_reclaim_reent+0x5e>
 801b48c:	4620      	mov	r0, r4
 801b48e:	f7ff fbd3 	bl	801ac38 <_free_r>
 801b492:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b494:	b111      	cbz	r1, 801b49c <_reclaim_reent+0x68>
 801b496:	4620      	mov	r0, r4
 801b498:	f7ff fbce 	bl	801ac38 <_free_r>
 801b49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b49e:	b111      	cbz	r1, 801b4a6 <_reclaim_reent+0x72>
 801b4a0:	4620      	mov	r0, r4
 801b4a2:	f7ff fbc9 	bl	801ac38 <_free_r>
 801b4a6:	69a3      	ldr	r3, [r4, #24]
 801b4a8:	b1e3      	cbz	r3, 801b4e4 <_reclaim_reent+0xb0>
 801b4aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b4ac:	4620      	mov	r0, r4
 801b4ae:	4798      	blx	r3
 801b4b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b4b2:	b1b9      	cbz	r1, 801b4e4 <_reclaim_reent+0xb0>
 801b4b4:	4620      	mov	r0, r4
 801b4b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b4ba:	f7ff bfad 	b.w	801b418 <cleanup_glue>
 801b4be:	5949      	ldr	r1, [r1, r5]
 801b4c0:	b941      	cbnz	r1, 801b4d4 <_reclaim_reent+0xa0>
 801b4c2:	3504      	adds	r5, #4
 801b4c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4c6:	2d80      	cmp	r5, #128	; 0x80
 801b4c8:	68d9      	ldr	r1, [r3, #12]
 801b4ca:	d1f8      	bne.n	801b4be <_reclaim_reent+0x8a>
 801b4cc:	4620      	mov	r0, r4
 801b4ce:	f7ff fbb3 	bl	801ac38 <_free_r>
 801b4d2:	e7ba      	b.n	801b44a <_reclaim_reent+0x16>
 801b4d4:	680e      	ldr	r6, [r1, #0]
 801b4d6:	4620      	mov	r0, r4
 801b4d8:	f7ff fbae 	bl	801ac38 <_free_r>
 801b4dc:	4631      	mov	r1, r6
 801b4de:	e7ef      	b.n	801b4c0 <_reclaim_reent+0x8c>
 801b4e0:	2500      	movs	r5, #0
 801b4e2:	e7ef      	b.n	801b4c4 <_reclaim_reent+0x90>
 801b4e4:	bd70      	pop	{r4, r5, r6, pc}
 801b4e6:	bf00      	nop
 801b4e8:	20000040 	.word	0x20000040

0801b4ec <_sbrk_r>:
 801b4ec:	b538      	push	{r3, r4, r5, lr}
 801b4ee:	4d06      	ldr	r5, [pc, #24]	; (801b508 <_sbrk_r+0x1c>)
 801b4f0:	2300      	movs	r3, #0
 801b4f2:	4604      	mov	r4, r0
 801b4f4:	4608      	mov	r0, r1
 801b4f6:	602b      	str	r3, [r5, #0]
 801b4f8:	f7e5 fd4c 	bl	8000f94 <_sbrk>
 801b4fc:	1c43      	adds	r3, r0, #1
 801b4fe:	d102      	bne.n	801b506 <_sbrk_r+0x1a>
 801b500:	682b      	ldr	r3, [r5, #0]
 801b502:	b103      	cbz	r3, 801b506 <_sbrk_r+0x1a>
 801b504:	6023      	str	r3, [r4, #0]
 801b506:	bd38      	pop	{r3, r4, r5, pc}
 801b508:	20019200 	.word	0x20019200

0801b50c <__sread>:
 801b50c:	b510      	push	{r4, lr}
 801b50e:	460c      	mov	r4, r1
 801b510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b514:	f000 fca2 	bl	801be5c <_read_r>
 801b518:	2800      	cmp	r0, #0
 801b51a:	bfab      	itete	ge
 801b51c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b51e:	89a3      	ldrhlt	r3, [r4, #12]
 801b520:	181b      	addge	r3, r3, r0
 801b522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b526:	bfac      	ite	ge
 801b528:	6563      	strge	r3, [r4, #84]	; 0x54
 801b52a:	81a3      	strhlt	r3, [r4, #12]
 801b52c:	bd10      	pop	{r4, pc}

0801b52e <__swrite>:
 801b52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b532:	461f      	mov	r7, r3
 801b534:	898b      	ldrh	r3, [r1, #12]
 801b536:	05db      	lsls	r3, r3, #23
 801b538:	4605      	mov	r5, r0
 801b53a:	460c      	mov	r4, r1
 801b53c:	4616      	mov	r6, r2
 801b53e:	d505      	bpl.n	801b54c <__swrite+0x1e>
 801b540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b544:	2302      	movs	r3, #2
 801b546:	2200      	movs	r2, #0
 801b548:	f000 fa84 	bl	801ba54 <_lseek_r>
 801b54c:	89a3      	ldrh	r3, [r4, #12]
 801b54e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b556:	81a3      	strh	r3, [r4, #12]
 801b558:	4632      	mov	r2, r6
 801b55a:	463b      	mov	r3, r7
 801b55c:	4628      	mov	r0, r5
 801b55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b562:	f000 b917 	b.w	801b794 <_write_r>

0801b566 <__sseek>:
 801b566:	b510      	push	{r4, lr}
 801b568:	460c      	mov	r4, r1
 801b56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b56e:	f000 fa71 	bl	801ba54 <_lseek_r>
 801b572:	1c43      	adds	r3, r0, #1
 801b574:	89a3      	ldrh	r3, [r4, #12]
 801b576:	bf15      	itete	ne
 801b578:	6560      	strne	r0, [r4, #84]	; 0x54
 801b57a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b57e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b582:	81a3      	strheq	r3, [r4, #12]
 801b584:	bf18      	it	ne
 801b586:	81a3      	strhne	r3, [r4, #12]
 801b588:	bd10      	pop	{r4, pc}

0801b58a <__sclose>:
 801b58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b58e:	f000 b989 	b.w	801b8a4 <_close_r>
	...

0801b594 <_strtol_l.isra.0>:
 801b594:	2b01      	cmp	r3, #1
 801b596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b59a:	d001      	beq.n	801b5a0 <_strtol_l.isra.0+0xc>
 801b59c:	2b24      	cmp	r3, #36	; 0x24
 801b59e:	d906      	bls.n	801b5ae <_strtol_l.isra.0+0x1a>
 801b5a0:	f000 f990 	bl	801b8c4 <__errno>
 801b5a4:	2316      	movs	r3, #22
 801b5a6:	6003      	str	r3, [r0, #0]
 801b5a8:	2000      	movs	r0, #0
 801b5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5ae:	4f3a      	ldr	r7, [pc, #232]	; (801b698 <_strtol_l.isra.0+0x104>)
 801b5b0:	468e      	mov	lr, r1
 801b5b2:	4676      	mov	r6, lr
 801b5b4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b5b8:	5de5      	ldrb	r5, [r4, r7]
 801b5ba:	f015 0508 	ands.w	r5, r5, #8
 801b5be:	d1f8      	bne.n	801b5b2 <_strtol_l.isra.0+0x1e>
 801b5c0:	2c2d      	cmp	r4, #45	; 0x2d
 801b5c2:	d134      	bne.n	801b62e <_strtol_l.isra.0+0x9a>
 801b5c4:	f89e 4000 	ldrb.w	r4, [lr]
 801b5c8:	f04f 0801 	mov.w	r8, #1
 801b5cc:	f106 0e02 	add.w	lr, r6, #2
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d05c      	beq.n	801b68e <_strtol_l.isra.0+0xfa>
 801b5d4:	2b10      	cmp	r3, #16
 801b5d6:	d10c      	bne.n	801b5f2 <_strtol_l.isra.0+0x5e>
 801b5d8:	2c30      	cmp	r4, #48	; 0x30
 801b5da:	d10a      	bne.n	801b5f2 <_strtol_l.isra.0+0x5e>
 801b5dc:	f89e 4000 	ldrb.w	r4, [lr]
 801b5e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b5e4:	2c58      	cmp	r4, #88	; 0x58
 801b5e6:	d14d      	bne.n	801b684 <_strtol_l.isra.0+0xf0>
 801b5e8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b5ec:	2310      	movs	r3, #16
 801b5ee:	f10e 0e02 	add.w	lr, lr, #2
 801b5f2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b5f6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b5fa:	2600      	movs	r6, #0
 801b5fc:	fbbc f9f3 	udiv	r9, ip, r3
 801b600:	4635      	mov	r5, r6
 801b602:	fb03 ca19 	mls	sl, r3, r9, ip
 801b606:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b60a:	2f09      	cmp	r7, #9
 801b60c:	d818      	bhi.n	801b640 <_strtol_l.isra.0+0xac>
 801b60e:	463c      	mov	r4, r7
 801b610:	42a3      	cmp	r3, r4
 801b612:	dd24      	ble.n	801b65e <_strtol_l.isra.0+0xca>
 801b614:	2e00      	cmp	r6, #0
 801b616:	db1f      	blt.n	801b658 <_strtol_l.isra.0+0xc4>
 801b618:	45a9      	cmp	r9, r5
 801b61a:	d31d      	bcc.n	801b658 <_strtol_l.isra.0+0xc4>
 801b61c:	d101      	bne.n	801b622 <_strtol_l.isra.0+0x8e>
 801b61e:	45a2      	cmp	sl, r4
 801b620:	db1a      	blt.n	801b658 <_strtol_l.isra.0+0xc4>
 801b622:	fb05 4503 	mla	r5, r5, r3, r4
 801b626:	2601      	movs	r6, #1
 801b628:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b62c:	e7eb      	b.n	801b606 <_strtol_l.isra.0+0x72>
 801b62e:	2c2b      	cmp	r4, #43	; 0x2b
 801b630:	bf08      	it	eq
 801b632:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b636:	46a8      	mov	r8, r5
 801b638:	bf08      	it	eq
 801b63a:	f106 0e02 	addeq.w	lr, r6, #2
 801b63e:	e7c7      	b.n	801b5d0 <_strtol_l.isra.0+0x3c>
 801b640:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b644:	2f19      	cmp	r7, #25
 801b646:	d801      	bhi.n	801b64c <_strtol_l.isra.0+0xb8>
 801b648:	3c37      	subs	r4, #55	; 0x37
 801b64a:	e7e1      	b.n	801b610 <_strtol_l.isra.0+0x7c>
 801b64c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b650:	2f19      	cmp	r7, #25
 801b652:	d804      	bhi.n	801b65e <_strtol_l.isra.0+0xca>
 801b654:	3c57      	subs	r4, #87	; 0x57
 801b656:	e7db      	b.n	801b610 <_strtol_l.isra.0+0x7c>
 801b658:	f04f 36ff 	mov.w	r6, #4294967295
 801b65c:	e7e4      	b.n	801b628 <_strtol_l.isra.0+0x94>
 801b65e:	2e00      	cmp	r6, #0
 801b660:	da05      	bge.n	801b66e <_strtol_l.isra.0+0xda>
 801b662:	2322      	movs	r3, #34	; 0x22
 801b664:	6003      	str	r3, [r0, #0]
 801b666:	4665      	mov	r5, ip
 801b668:	b942      	cbnz	r2, 801b67c <_strtol_l.isra.0+0xe8>
 801b66a:	4628      	mov	r0, r5
 801b66c:	e79d      	b.n	801b5aa <_strtol_l.isra.0+0x16>
 801b66e:	f1b8 0f00 	cmp.w	r8, #0
 801b672:	d000      	beq.n	801b676 <_strtol_l.isra.0+0xe2>
 801b674:	426d      	negs	r5, r5
 801b676:	2a00      	cmp	r2, #0
 801b678:	d0f7      	beq.n	801b66a <_strtol_l.isra.0+0xd6>
 801b67a:	b10e      	cbz	r6, 801b680 <_strtol_l.isra.0+0xec>
 801b67c:	f10e 31ff 	add.w	r1, lr, #4294967295
 801b680:	6011      	str	r1, [r2, #0]
 801b682:	e7f2      	b.n	801b66a <_strtol_l.isra.0+0xd6>
 801b684:	2430      	movs	r4, #48	; 0x30
 801b686:	2b00      	cmp	r3, #0
 801b688:	d1b3      	bne.n	801b5f2 <_strtol_l.isra.0+0x5e>
 801b68a:	2308      	movs	r3, #8
 801b68c:	e7b1      	b.n	801b5f2 <_strtol_l.isra.0+0x5e>
 801b68e:	2c30      	cmp	r4, #48	; 0x30
 801b690:	d0a4      	beq.n	801b5dc <_strtol_l.isra.0+0x48>
 801b692:	230a      	movs	r3, #10
 801b694:	e7ad      	b.n	801b5f2 <_strtol_l.isra.0+0x5e>
 801b696:	bf00      	nop
 801b698:	0802005c 	.word	0x0802005c

0801b69c <strtol>:
 801b69c:	4613      	mov	r3, r2
 801b69e:	460a      	mov	r2, r1
 801b6a0:	4601      	mov	r1, r0
 801b6a2:	4802      	ldr	r0, [pc, #8]	; (801b6ac <strtol+0x10>)
 801b6a4:	6800      	ldr	r0, [r0, #0]
 801b6a6:	f7ff bf75 	b.w	801b594 <_strtol_l.isra.0>
 801b6aa:	bf00      	nop
 801b6ac:	20000040 	.word	0x20000040

0801b6b0 <_vsiprintf_r>:
 801b6b0:	b500      	push	{lr}
 801b6b2:	b09b      	sub	sp, #108	; 0x6c
 801b6b4:	9100      	str	r1, [sp, #0]
 801b6b6:	9104      	str	r1, [sp, #16]
 801b6b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b6bc:	9105      	str	r1, [sp, #20]
 801b6be:	9102      	str	r1, [sp, #8]
 801b6c0:	4905      	ldr	r1, [pc, #20]	; (801b6d8 <_vsiprintf_r+0x28>)
 801b6c2:	9103      	str	r1, [sp, #12]
 801b6c4:	4669      	mov	r1, sp
 801b6c6:	f000 fac9 	bl	801bc5c <_svfiprintf_r>
 801b6ca:	9b00      	ldr	r3, [sp, #0]
 801b6cc:	2200      	movs	r2, #0
 801b6ce:	701a      	strb	r2, [r3, #0]
 801b6d0:	b01b      	add	sp, #108	; 0x6c
 801b6d2:	f85d fb04 	ldr.w	pc, [sp], #4
 801b6d6:	bf00      	nop
 801b6d8:	ffff0208 	.word	0xffff0208

0801b6dc <vsiprintf>:
 801b6dc:	4613      	mov	r3, r2
 801b6de:	460a      	mov	r2, r1
 801b6e0:	4601      	mov	r1, r0
 801b6e2:	4802      	ldr	r0, [pc, #8]	; (801b6ec <vsiprintf+0x10>)
 801b6e4:	6800      	ldr	r0, [r0, #0]
 801b6e6:	f7ff bfe3 	b.w	801b6b0 <_vsiprintf_r>
 801b6ea:	bf00      	nop
 801b6ec:	20000040 	.word	0x20000040

0801b6f0 <__swbuf_r>:
 801b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6f2:	460e      	mov	r6, r1
 801b6f4:	4614      	mov	r4, r2
 801b6f6:	4605      	mov	r5, r0
 801b6f8:	b118      	cbz	r0, 801b702 <__swbuf_r+0x12>
 801b6fa:	6983      	ldr	r3, [r0, #24]
 801b6fc:	b90b      	cbnz	r3, 801b702 <__swbuf_r+0x12>
 801b6fe:	f7ff f975 	bl	801a9ec <__sinit>
 801b702:	4b21      	ldr	r3, [pc, #132]	; (801b788 <__swbuf_r+0x98>)
 801b704:	429c      	cmp	r4, r3
 801b706:	d12b      	bne.n	801b760 <__swbuf_r+0x70>
 801b708:	686c      	ldr	r4, [r5, #4]
 801b70a:	69a3      	ldr	r3, [r4, #24]
 801b70c:	60a3      	str	r3, [r4, #8]
 801b70e:	89a3      	ldrh	r3, [r4, #12]
 801b710:	071a      	lsls	r2, r3, #28
 801b712:	d52f      	bpl.n	801b774 <__swbuf_r+0x84>
 801b714:	6923      	ldr	r3, [r4, #16]
 801b716:	b36b      	cbz	r3, 801b774 <__swbuf_r+0x84>
 801b718:	6923      	ldr	r3, [r4, #16]
 801b71a:	6820      	ldr	r0, [r4, #0]
 801b71c:	1ac0      	subs	r0, r0, r3
 801b71e:	6963      	ldr	r3, [r4, #20]
 801b720:	b2f6      	uxtb	r6, r6
 801b722:	4283      	cmp	r3, r0
 801b724:	4637      	mov	r7, r6
 801b726:	dc04      	bgt.n	801b732 <__swbuf_r+0x42>
 801b728:	4621      	mov	r1, r4
 801b72a:	4628      	mov	r0, r5
 801b72c:	f000 f956 	bl	801b9dc <_fflush_r>
 801b730:	bb30      	cbnz	r0, 801b780 <__swbuf_r+0x90>
 801b732:	68a3      	ldr	r3, [r4, #8]
 801b734:	3b01      	subs	r3, #1
 801b736:	60a3      	str	r3, [r4, #8]
 801b738:	6823      	ldr	r3, [r4, #0]
 801b73a:	1c5a      	adds	r2, r3, #1
 801b73c:	6022      	str	r2, [r4, #0]
 801b73e:	701e      	strb	r6, [r3, #0]
 801b740:	6963      	ldr	r3, [r4, #20]
 801b742:	3001      	adds	r0, #1
 801b744:	4283      	cmp	r3, r0
 801b746:	d004      	beq.n	801b752 <__swbuf_r+0x62>
 801b748:	89a3      	ldrh	r3, [r4, #12]
 801b74a:	07db      	lsls	r3, r3, #31
 801b74c:	d506      	bpl.n	801b75c <__swbuf_r+0x6c>
 801b74e:	2e0a      	cmp	r6, #10
 801b750:	d104      	bne.n	801b75c <__swbuf_r+0x6c>
 801b752:	4621      	mov	r1, r4
 801b754:	4628      	mov	r0, r5
 801b756:	f000 f941 	bl	801b9dc <_fflush_r>
 801b75a:	b988      	cbnz	r0, 801b780 <__swbuf_r+0x90>
 801b75c:	4638      	mov	r0, r7
 801b75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b760:	4b0a      	ldr	r3, [pc, #40]	; (801b78c <__swbuf_r+0x9c>)
 801b762:	429c      	cmp	r4, r3
 801b764:	d101      	bne.n	801b76a <__swbuf_r+0x7a>
 801b766:	68ac      	ldr	r4, [r5, #8]
 801b768:	e7cf      	b.n	801b70a <__swbuf_r+0x1a>
 801b76a:	4b09      	ldr	r3, [pc, #36]	; (801b790 <__swbuf_r+0xa0>)
 801b76c:	429c      	cmp	r4, r3
 801b76e:	bf08      	it	eq
 801b770:	68ec      	ldreq	r4, [r5, #12]
 801b772:	e7ca      	b.n	801b70a <__swbuf_r+0x1a>
 801b774:	4621      	mov	r1, r4
 801b776:	4628      	mov	r0, r5
 801b778:	f000 f81e 	bl	801b7b8 <__swsetup_r>
 801b77c:	2800      	cmp	r0, #0
 801b77e:	d0cb      	beq.n	801b718 <__swbuf_r+0x28>
 801b780:	f04f 37ff 	mov.w	r7, #4294967295
 801b784:	e7ea      	b.n	801b75c <__swbuf_r+0x6c>
 801b786:	bf00      	nop
 801b788:	0802017c 	.word	0x0802017c
 801b78c:	0802019c 	.word	0x0802019c
 801b790:	0802015c 	.word	0x0802015c

0801b794 <_write_r>:
 801b794:	b538      	push	{r3, r4, r5, lr}
 801b796:	4d07      	ldr	r5, [pc, #28]	; (801b7b4 <_write_r+0x20>)
 801b798:	4604      	mov	r4, r0
 801b79a:	4608      	mov	r0, r1
 801b79c:	4611      	mov	r1, r2
 801b79e:	2200      	movs	r2, #0
 801b7a0:	602a      	str	r2, [r5, #0]
 801b7a2:	461a      	mov	r2, r3
 801b7a4:	f7fe faa4 	bl	8019cf0 <_write>
 801b7a8:	1c43      	adds	r3, r0, #1
 801b7aa:	d102      	bne.n	801b7b2 <_write_r+0x1e>
 801b7ac:	682b      	ldr	r3, [r5, #0]
 801b7ae:	b103      	cbz	r3, 801b7b2 <_write_r+0x1e>
 801b7b0:	6023      	str	r3, [r4, #0]
 801b7b2:	bd38      	pop	{r3, r4, r5, pc}
 801b7b4:	20019200 	.word	0x20019200

0801b7b8 <__swsetup_r>:
 801b7b8:	4b32      	ldr	r3, [pc, #200]	; (801b884 <__swsetup_r+0xcc>)
 801b7ba:	b570      	push	{r4, r5, r6, lr}
 801b7bc:	681d      	ldr	r5, [r3, #0]
 801b7be:	4606      	mov	r6, r0
 801b7c0:	460c      	mov	r4, r1
 801b7c2:	b125      	cbz	r5, 801b7ce <__swsetup_r+0x16>
 801b7c4:	69ab      	ldr	r3, [r5, #24]
 801b7c6:	b913      	cbnz	r3, 801b7ce <__swsetup_r+0x16>
 801b7c8:	4628      	mov	r0, r5
 801b7ca:	f7ff f90f 	bl	801a9ec <__sinit>
 801b7ce:	4b2e      	ldr	r3, [pc, #184]	; (801b888 <__swsetup_r+0xd0>)
 801b7d0:	429c      	cmp	r4, r3
 801b7d2:	d10f      	bne.n	801b7f4 <__swsetup_r+0x3c>
 801b7d4:	686c      	ldr	r4, [r5, #4]
 801b7d6:	89a3      	ldrh	r3, [r4, #12]
 801b7d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b7dc:	0719      	lsls	r1, r3, #28
 801b7de:	d42c      	bmi.n	801b83a <__swsetup_r+0x82>
 801b7e0:	06dd      	lsls	r5, r3, #27
 801b7e2:	d411      	bmi.n	801b808 <__swsetup_r+0x50>
 801b7e4:	2309      	movs	r3, #9
 801b7e6:	6033      	str	r3, [r6, #0]
 801b7e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b7ec:	81a3      	strh	r3, [r4, #12]
 801b7ee:	f04f 30ff 	mov.w	r0, #4294967295
 801b7f2:	e03e      	b.n	801b872 <__swsetup_r+0xba>
 801b7f4:	4b25      	ldr	r3, [pc, #148]	; (801b88c <__swsetup_r+0xd4>)
 801b7f6:	429c      	cmp	r4, r3
 801b7f8:	d101      	bne.n	801b7fe <__swsetup_r+0x46>
 801b7fa:	68ac      	ldr	r4, [r5, #8]
 801b7fc:	e7eb      	b.n	801b7d6 <__swsetup_r+0x1e>
 801b7fe:	4b24      	ldr	r3, [pc, #144]	; (801b890 <__swsetup_r+0xd8>)
 801b800:	429c      	cmp	r4, r3
 801b802:	bf08      	it	eq
 801b804:	68ec      	ldreq	r4, [r5, #12]
 801b806:	e7e6      	b.n	801b7d6 <__swsetup_r+0x1e>
 801b808:	0758      	lsls	r0, r3, #29
 801b80a:	d512      	bpl.n	801b832 <__swsetup_r+0x7a>
 801b80c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b80e:	b141      	cbz	r1, 801b822 <__swsetup_r+0x6a>
 801b810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b814:	4299      	cmp	r1, r3
 801b816:	d002      	beq.n	801b81e <__swsetup_r+0x66>
 801b818:	4630      	mov	r0, r6
 801b81a:	f7ff fa0d 	bl	801ac38 <_free_r>
 801b81e:	2300      	movs	r3, #0
 801b820:	6363      	str	r3, [r4, #52]	; 0x34
 801b822:	89a3      	ldrh	r3, [r4, #12]
 801b824:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b828:	81a3      	strh	r3, [r4, #12]
 801b82a:	2300      	movs	r3, #0
 801b82c:	6063      	str	r3, [r4, #4]
 801b82e:	6923      	ldr	r3, [r4, #16]
 801b830:	6023      	str	r3, [r4, #0]
 801b832:	89a3      	ldrh	r3, [r4, #12]
 801b834:	f043 0308 	orr.w	r3, r3, #8
 801b838:	81a3      	strh	r3, [r4, #12]
 801b83a:	6923      	ldr	r3, [r4, #16]
 801b83c:	b94b      	cbnz	r3, 801b852 <__swsetup_r+0x9a>
 801b83e:	89a3      	ldrh	r3, [r4, #12]
 801b840:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b848:	d003      	beq.n	801b852 <__swsetup_r+0x9a>
 801b84a:	4621      	mov	r1, r4
 801b84c:	4630      	mov	r0, r6
 801b84e:	f000 f937 	bl	801bac0 <__smakebuf_r>
 801b852:	89a0      	ldrh	r0, [r4, #12]
 801b854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b858:	f010 0301 	ands.w	r3, r0, #1
 801b85c:	d00a      	beq.n	801b874 <__swsetup_r+0xbc>
 801b85e:	2300      	movs	r3, #0
 801b860:	60a3      	str	r3, [r4, #8]
 801b862:	6963      	ldr	r3, [r4, #20]
 801b864:	425b      	negs	r3, r3
 801b866:	61a3      	str	r3, [r4, #24]
 801b868:	6923      	ldr	r3, [r4, #16]
 801b86a:	b943      	cbnz	r3, 801b87e <__swsetup_r+0xc6>
 801b86c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b870:	d1ba      	bne.n	801b7e8 <__swsetup_r+0x30>
 801b872:	bd70      	pop	{r4, r5, r6, pc}
 801b874:	0781      	lsls	r1, r0, #30
 801b876:	bf58      	it	pl
 801b878:	6963      	ldrpl	r3, [r4, #20]
 801b87a:	60a3      	str	r3, [r4, #8]
 801b87c:	e7f4      	b.n	801b868 <__swsetup_r+0xb0>
 801b87e:	2000      	movs	r0, #0
 801b880:	e7f7      	b.n	801b872 <__swsetup_r+0xba>
 801b882:	bf00      	nop
 801b884:	20000040 	.word	0x20000040
 801b888:	0802017c 	.word	0x0802017c
 801b88c:	0802019c 	.word	0x0802019c
 801b890:	0802015c 	.word	0x0802015c

0801b894 <abort>:
 801b894:	b508      	push	{r3, lr}
 801b896:	2006      	movs	r0, #6
 801b898:	f000 fb1a 	bl	801bed0 <raise>
 801b89c:	2001      	movs	r0, #1
 801b89e:	f7e5 fb3b 	bl	8000f18 <_exit>
	...

0801b8a4 <_close_r>:
 801b8a4:	b538      	push	{r3, r4, r5, lr}
 801b8a6:	4d06      	ldr	r5, [pc, #24]	; (801b8c0 <_close_r+0x1c>)
 801b8a8:	2300      	movs	r3, #0
 801b8aa:	4604      	mov	r4, r0
 801b8ac:	4608      	mov	r0, r1
 801b8ae:	602b      	str	r3, [r5, #0]
 801b8b0:	f7e5 fb3c 	bl	8000f2c <_close>
 801b8b4:	1c43      	adds	r3, r0, #1
 801b8b6:	d102      	bne.n	801b8be <_close_r+0x1a>
 801b8b8:	682b      	ldr	r3, [r5, #0]
 801b8ba:	b103      	cbz	r3, 801b8be <_close_r+0x1a>
 801b8bc:	6023      	str	r3, [r4, #0]
 801b8be:	bd38      	pop	{r3, r4, r5, pc}
 801b8c0:	20019200 	.word	0x20019200

0801b8c4 <__errno>:
 801b8c4:	4b01      	ldr	r3, [pc, #4]	; (801b8cc <__errno+0x8>)
 801b8c6:	6818      	ldr	r0, [r3, #0]
 801b8c8:	4770      	bx	lr
 801b8ca:	bf00      	nop
 801b8cc:	20000040 	.word	0x20000040

0801b8d0 <__sflush_r>:
 801b8d0:	898a      	ldrh	r2, [r1, #12]
 801b8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8d6:	4605      	mov	r5, r0
 801b8d8:	0710      	lsls	r0, r2, #28
 801b8da:	460c      	mov	r4, r1
 801b8dc:	d458      	bmi.n	801b990 <__sflush_r+0xc0>
 801b8de:	684b      	ldr	r3, [r1, #4]
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	dc05      	bgt.n	801b8f0 <__sflush_r+0x20>
 801b8e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	dc02      	bgt.n	801b8f0 <__sflush_r+0x20>
 801b8ea:	2000      	movs	r0, #0
 801b8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b8f2:	2e00      	cmp	r6, #0
 801b8f4:	d0f9      	beq.n	801b8ea <__sflush_r+0x1a>
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b8fc:	682f      	ldr	r7, [r5, #0]
 801b8fe:	602b      	str	r3, [r5, #0]
 801b900:	d032      	beq.n	801b968 <__sflush_r+0x98>
 801b902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b904:	89a3      	ldrh	r3, [r4, #12]
 801b906:	075a      	lsls	r2, r3, #29
 801b908:	d505      	bpl.n	801b916 <__sflush_r+0x46>
 801b90a:	6863      	ldr	r3, [r4, #4]
 801b90c:	1ac0      	subs	r0, r0, r3
 801b90e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b910:	b10b      	cbz	r3, 801b916 <__sflush_r+0x46>
 801b912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b914:	1ac0      	subs	r0, r0, r3
 801b916:	2300      	movs	r3, #0
 801b918:	4602      	mov	r2, r0
 801b91a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b91c:	6a21      	ldr	r1, [r4, #32]
 801b91e:	4628      	mov	r0, r5
 801b920:	47b0      	blx	r6
 801b922:	1c43      	adds	r3, r0, #1
 801b924:	89a3      	ldrh	r3, [r4, #12]
 801b926:	d106      	bne.n	801b936 <__sflush_r+0x66>
 801b928:	6829      	ldr	r1, [r5, #0]
 801b92a:	291d      	cmp	r1, #29
 801b92c:	d82c      	bhi.n	801b988 <__sflush_r+0xb8>
 801b92e:	4a2a      	ldr	r2, [pc, #168]	; (801b9d8 <__sflush_r+0x108>)
 801b930:	40ca      	lsrs	r2, r1
 801b932:	07d6      	lsls	r6, r2, #31
 801b934:	d528      	bpl.n	801b988 <__sflush_r+0xb8>
 801b936:	2200      	movs	r2, #0
 801b938:	6062      	str	r2, [r4, #4]
 801b93a:	04d9      	lsls	r1, r3, #19
 801b93c:	6922      	ldr	r2, [r4, #16]
 801b93e:	6022      	str	r2, [r4, #0]
 801b940:	d504      	bpl.n	801b94c <__sflush_r+0x7c>
 801b942:	1c42      	adds	r2, r0, #1
 801b944:	d101      	bne.n	801b94a <__sflush_r+0x7a>
 801b946:	682b      	ldr	r3, [r5, #0]
 801b948:	b903      	cbnz	r3, 801b94c <__sflush_r+0x7c>
 801b94a:	6560      	str	r0, [r4, #84]	; 0x54
 801b94c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b94e:	602f      	str	r7, [r5, #0]
 801b950:	2900      	cmp	r1, #0
 801b952:	d0ca      	beq.n	801b8ea <__sflush_r+0x1a>
 801b954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b958:	4299      	cmp	r1, r3
 801b95a:	d002      	beq.n	801b962 <__sflush_r+0x92>
 801b95c:	4628      	mov	r0, r5
 801b95e:	f7ff f96b 	bl	801ac38 <_free_r>
 801b962:	2000      	movs	r0, #0
 801b964:	6360      	str	r0, [r4, #52]	; 0x34
 801b966:	e7c1      	b.n	801b8ec <__sflush_r+0x1c>
 801b968:	6a21      	ldr	r1, [r4, #32]
 801b96a:	2301      	movs	r3, #1
 801b96c:	4628      	mov	r0, r5
 801b96e:	47b0      	blx	r6
 801b970:	1c41      	adds	r1, r0, #1
 801b972:	d1c7      	bne.n	801b904 <__sflush_r+0x34>
 801b974:	682b      	ldr	r3, [r5, #0]
 801b976:	2b00      	cmp	r3, #0
 801b978:	d0c4      	beq.n	801b904 <__sflush_r+0x34>
 801b97a:	2b1d      	cmp	r3, #29
 801b97c:	d001      	beq.n	801b982 <__sflush_r+0xb2>
 801b97e:	2b16      	cmp	r3, #22
 801b980:	d101      	bne.n	801b986 <__sflush_r+0xb6>
 801b982:	602f      	str	r7, [r5, #0]
 801b984:	e7b1      	b.n	801b8ea <__sflush_r+0x1a>
 801b986:	89a3      	ldrh	r3, [r4, #12]
 801b988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b98c:	81a3      	strh	r3, [r4, #12]
 801b98e:	e7ad      	b.n	801b8ec <__sflush_r+0x1c>
 801b990:	690f      	ldr	r7, [r1, #16]
 801b992:	2f00      	cmp	r7, #0
 801b994:	d0a9      	beq.n	801b8ea <__sflush_r+0x1a>
 801b996:	0793      	lsls	r3, r2, #30
 801b998:	680e      	ldr	r6, [r1, #0]
 801b99a:	bf08      	it	eq
 801b99c:	694b      	ldreq	r3, [r1, #20]
 801b99e:	600f      	str	r7, [r1, #0]
 801b9a0:	bf18      	it	ne
 801b9a2:	2300      	movne	r3, #0
 801b9a4:	eba6 0807 	sub.w	r8, r6, r7
 801b9a8:	608b      	str	r3, [r1, #8]
 801b9aa:	f1b8 0f00 	cmp.w	r8, #0
 801b9ae:	dd9c      	ble.n	801b8ea <__sflush_r+0x1a>
 801b9b0:	6a21      	ldr	r1, [r4, #32]
 801b9b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b9b4:	4643      	mov	r3, r8
 801b9b6:	463a      	mov	r2, r7
 801b9b8:	4628      	mov	r0, r5
 801b9ba:	47b0      	blx	r6
 801b9bc:	2800      	cmp	r0, #0
 801b9be:	dc06      	bgt.n	801b9ce <__sflush_r+0xfe>
 801b9c0:	89a3      	ldrh	r3, [r4, #12]
 801b9c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9c6:	81a3      	strh	r3, [r4, #12]
 801b9c8:	f04f 30ff 	mov.w	r0, #4294967295
 801b9cc:	e78e      	b.n	801b8ec <__sflush_r+0x1c>
 801b9ce:	4407      	add	r7, r0
 801b9d0:	eba8 0800 	sub.w	r8, r8, r0
 801b9d4:	e7e9      	b.n	801b9aa <__sflush_r+0xda>
 801b9d6:	bf00      	nop
 801b9d8:	20400001 	.word	0x20400001

0801b9dc <_fflush_r>:
 801b9dc:	b538      	push	{r3, r4, r5, lr}
 801b9de:	690b      	ldr	r3, [r1, #16]
 801b9e0:	4605      	mov	r5, r0
 801b9e2:	460c      	mov	r4, r1
 801b9e4:	b913      	cbnz	r3, 801b9ec <_fflush_r+0x10>
 801b9e6:	2500      	movs	r5, #0
 801b9e8:	4628      	mov	r0, r5
 801b9ea:	bd38      	pop	{r3, r4, r5, pc}
 801b9ec:	b118      	cbz	r0, 801b9f6 <_fflush_r+0x1a>
 801b9ee:	6983      	ldr	r3, [r0, #24]
 801b9f0:	b90b      	cbnz	r3, 801b9f6 <_fflush_r+0x1a>
 801b9f2:	f7fe fffb 	bl	801a9ec <__sinit>
 801b9f6:	4b14      	ldr	r3, [pc, #80]	; (801ba48 <_fflush_r+0x6c>)
 801b9f8:	429c      	cmp	r4, r3
 801b9fa:	d11b      	bne.n	801ba34 <_fflush_r+0x58>
 801b9fc:	686c      	ldr	r4, [r5, #4]
 801b9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d0ef      	beq.n	801b9e6 <_fflush_r+0xa>
 801ba06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ba08:	07d0      	lsls	r0, r2, #31
 801ba0a:	d404      	bmi.n	801ba16 <_fflush_r+0x3a>
 801ba0c:	0599      	lsls	r1, r3, #22
 801ba0e:	d402      	bmi.n	801ba16 <_fflush_r+0x3a>
 801ba10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba12:	f7ff f8c0 	bl	801ab96 <__retarget_lock_acquire_recursive>
 801ba16:	4628      	mov	r0, r5
 801ba18:	4621      	mov	r1, r4
 801ba1a:	f7ff ff59 	bl	801b8d0 <__sflush_r>
 801ba1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba20:	07da      	lsls	r2, r3, #31
 801ba22:	4605      	mov	r5, r0
 801ba24:	d4e0      	bmi.n	801b9e8 <_fflush_r+0xc>
 801ba26:	89a3      	ldrh	r3, [r4, #12]
 801ba28:	059b      	lsls	r3, r3, #22
 801ba2a:	d4dd      	bmi.n	801b9e8 <_fflush_r+0xc>
 801ba2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba2e:	f7ff f8b3 	bl	801ab98 <__retarget_lock_release_recursive>
 801ba32:	e7d9      	b.n	801b9e8 <_fflush_r+0xc>
 801ba34:	4b05      	ldr	r3, [pc, #20]	; (801ba4c <_fflush_r+0x70>)
 801ba36:	429c      	cmp	r4, r3
 801ba38:	d101      	bne.n	801ba3e <_fflush_r+0x62>
 801ba3a:	68ac      	ldr	r4, [r5, #8]
 801ba3c:	e7df      	b.n	801b9fe <_fflush_r+0x22>
 801ba3e:	4b04      	ldr	r3, [pc, #16]	; (801ba50 <_fflush_r+0x74>)
 801ba40:	429c      	cmp	r4, r3
 801ba42:	bf08      	it	eq
 801ba44:	68ec      	ldreq	r4, [r5, #12]
 801ba46:	e7da      	b.n	801b9fe <_fflush_r+0x22>
 801ba48:	0802017c 	.word	0x0802017c
 801ba4c:	0802019c 	.word	0x0802019c
 801ba50:	0802015c 	.word	0x0802015c

0801ba54 <_lseek_r>:
 801ba54:	b538      	push	{r3, r4, r5, lr}
 801ba56:	4d07      	ldr	r5, [pc, #28]	; (801ba74 <_lseek_r+0x20>)
 801ba58:	4604      	mov	r4, r0
 801ba5a:	4608      	mov	r0, r1
 801ba5c:	4611      	mov	r1, r2
 801ba5e:	2200      	movs	r2, #0
 801ba60:	602a      	str	r2, [r5, #0]
 801ba62:	461a      	mov	r2, r3
 801ba64:	f7e5 fa89 	bl	8000f7a <_lseek>
 801ba68:	1c43      	adds	r3, r0, #1
 801ba6a:	d102      	bne.n	801ba72 <_lseek_r+0x1e>
 801ba6c:	682b      	ldr	r3, [r5, #0]
 801ba6e:	b103      	cbz	r3, 801ba72 <_lseek_r+0x1e>
 801ba70:	6023      	str	r3, [r4, #0]
 801ba72:	bd38      	pop	{r3, r4, r5, pc}
 801ba74:	20019200 	.word	0x20019200

0801ba78 <__swhatbuf_r>:
 801ba78:	b570      	push	{r4, r5, r6, lr}
 801ba7a:	460e      	mov	r6, r1
 801ba7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba80:	2900      	cmp	r1, #0
 801ba82:	b096      	sub	sp, #88	; 0x58
 801ba84:	4614      	mov	r4, r2
 801ba86:	461d      	mov	r5, r3
 801ba88:	da07      	bge.n	801ba9a <__swhatbuf_r+0x22>
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	602b      	str	r3, [r5, #0]
 801ba8e:	89b3      	ldrh	r3, [r6, #12]
 801ba90:	061a      	lsls	r2, r3, #24
 801ba92:	d410      	bmi.n	801bab6 <__swhatbuf_r+0x3e>
 801ba94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ba98:	e00e      	b.n	801bab8 <__swhatbuf_r+0x40>
 801ba9a:	466a      	mov	r2, sp
 801ba9c:	f000 fa34 	bl	801bf08 <_fstat_r>
 801baa0:	2800      	cmp	r0, #0
 801baa2:	dbf2      	blt.n	801ba8a <__swhatbuf_r+0x12>
 801baa4:	9a01      	ldr	r2, [sp, #4]
 801baa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801baaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801baae:	425a      	negs	r2, r3
 801bab0:	415a      	adcs	r2, r3
 801bab2:	602a      	str	r2, [r5, #0]
 801bab4:	e7ee      	b.n	801ba94 <__swhatbuf_r+0x1c>
 801bab6:	2340      	movs	r3, #64	; 0x40
 801bab8:	2000      	movs	r0, #0
 801baba:	6023      	str	r3, [r4, #0]
 801babc:	b016      	add	sp, #88	; 0x58
 801babe:	bd70      	pop	{r4, r5, r6, pc}

0801bac0 <__smakebuf_r>:
 801bac0:	898b      	ldrh	r3, [r1, #12]
 801bac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bac4:	079d      	lsls	r5, r3, #30
 801bac6:	4606      	mov	r6, r0
 801bac8:	460c      	mov	r4, r1
 801baca:	d507      	bpl.n	801badc <__smakebuf_r+0x1c>
 801bacc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bad0:	6023      	str	r3, [r4, #0]
 801bad2:	6123      	str	r3, [r4, #16]
 801bad4:	2301      	movs	r3, #1
 801bad6:	6163      	str	r3, [r4, #20]
 801bad8:	b002      	add	sp, #8
 801bada:	bd70      	pop	{r4, r5, r6, pc}
 801badc:	ab01      	add	r3, sp, #4
 801bade:	466a      	mov	r2, sp
 801bae0:	f7ff ffca 	bl	801ba78 <__swhatbuf_r>
 801bae4:	9900      	ldr	r1, [sp, #0]
 801bae6:	4605      	mov	r5, r0
 801bae8:	4630      	mov	r0, r6
 801baea:	f7ff f8f5 	bl	801acd8 <_malloc_r>
 801baee:	b948      	cbnz	r0, 801bb04 <__smakebuf_r+0x44>
 801baf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801baf4:	059a      	lsls	r2, r3, #22
 801baf6:	d4ef      	bmi.n	801bad8 <__smakebuf_r+0x18>
 801baf8:	f023 0303 	bic.w	r3, r3, #3
 801bafc:	f043 0302 	orr.w	r3, r3, #2
 801bb00:	81a3      	strh	r3, [r4, #12]
 801bb02:	e7e3      	b.n	801bacc <__smakebuf_r+0xc>
 801bb04:	4b0d      	ldr	r3, [pc, #52]	; (801bb3c <__smakebuf_r+0x7c>)
 801bb06:	62b3      	str	r3, [r6, #40]	; 0x28
 801bb08:	89a3      	ldrh	r3, [r4, #12]
 801bb0a:	6020      	str	r0, [r4, #0]
 801bb0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb10:	81a3      	strh	r3, [r4, #12]
 801bb12:	9b00      	ldr	r3, [sp, #0]
 801bb14:	6163      	str	r3, [r4, #20]
 801bb16:	9b01      	ldr	r3, [sp, #4]
 801bb18:	6120      	str	r0, [r4, #16]
 801bb1a:	b15b      	cbz	r3, 801bb34 <__smakebuf_r+0x74>
 801bb1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bb20:	4630      	mov	r0, r6
 801bb22:	f000 fa03 	bl	801bf2c <_isatty_r>
 801bb26:	b128      	cbz	r0, 801bb34 <__smakebuf_r+0x74>
 801bb28:	89a3      	ldrh	r3, [r4, #12]
 801bb2a:	f023 0303 	bic.w	r3, r3, #3
 801bb2e:	f043 0301 	orr.w	r3, r3, #1
 801bb32:	81a3      	strh	r3, [r4, #12]
 801bb34:	89a0      	ldrh	r0, [r4, #12]
 801bb36:	4305      	orrs	r5, r0
 801bb38:	81a5      	strh	r5, [r4, #12]
 801bb3a:	e7cd      	b.n	801bad8 <__smakebuf_r+0x18>
 801bb3c:	0801a985 	.word	0x0801a985

0801bb40 <__malloc_lock>:
 801bb40:	4801      	ldr	r0, [pc, #4]	; (801bb48 <__malloc_lock+0x8>)
 801bb42:	f7ff b828 	b.w	801ab96 <__retarget_lock_acquire_recursive>
 801bb46:	bf00      	nop
 801bb48:	200191f8 	.word	0x200191f8

0801bb4c <__malloc_unlock>:
 801bb4c:	4801      	ldr	r0, [pc, #4]	; (801bb54 <__malloc_unlock+0x8>)
 801bb4e:	f7ff b823 	b.w	801ab98 <__retarget_lock_release_recursive>
 801bb52:	bf00      	nop
 801bb54:	200191f8 	.word	0x200191f8

0801bb58 <_realloc_r>:
 801bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb5a:	4607      	mov	r7, r0
 801bb5c:	4614      	mov	r4, r2
 801bb5e:	460e      	mov	r6, r1
 801bb60:	b921      	cbnz	r1, 801bb6c <_realloc_r+0x14>
 801bb62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bb66:	4611      	mov	r1, r2
 801bb68:	f7ff b8b6 	b.w	801acd8 <_malloc_r>
 801bb6c:	b922      	cbnz	r2, 801bb78 <_realloc_r+0x20>
 801bb6e:	f7ff f863 	bl	801ac38 <_free_r>
 801bb72:	4625      	mov	r5, r4
 801bb74:	4628      	mov	r0, r5
 801bb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb78:	f000 f9e8 	bl	801bf4c <_malloc_usable_size_r>
 801bb7c:	42a0      	cmp	r0, r4
 801bb7e:	d20f      	bcs.n	801bba0 <_realloc_r+0x48>
 801bb80:	4621      	mov	r1, r4
 801bb82:	4638      	mov	r0, r7
 801bb84:	f7ff f8a8 	bl	801acd8 <_malloc_r>
 801bb88:	4605      	mov	r5, r0
 801bb8a:	2800      	cmp	r0, #0
 801bb8c:	d0f2      	beq.n	801bb74 <_realloc_r+0x1c>
 801bb8e:	4631      	mov	r1, r6
 801bb90:	4622      	mov	r2, r4
 801bb92:	f7ff f821 	bl	801abd8 <memcpy>
 801bb96:	4631      	mov	r1, r6
 801bb98:	4638      	mov	r0, r7
 801bb9a:	f7ff f84d 	bl	801ac38 <_free_r>
 801bb9e:	e7e9      	b.n	801bb74 <_realloc_r+0x1c>
 801bba0:	4635      	mov	r5, r6
 801bba2:	e7e7      	b.n	801bb74 <_realloc_r+0x1c>

0801bba4 <__ssputs_r>:
 801bba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bba8:	688e      	ldr	r6, [r1, #8]
 801bbaa:	429e      	cmp	r6, r3
 801bbac:	4682      	mov	sl, r0
 801bbae:	460c      	mov	r4, r1
 801bbb0:	4690      	mov	r8, r2
 801bbb2:	461f      	mov	r7, r3
 801bbb4:	d838      	bhi.n	801bc28 <__ssputs_r+0x84>
 801bbb6:	898a      	ldrh	r2, [r1, #12]
 801bbb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bbbc:	d032      	beq.n	801bc24 <__ssputs_r+0x80>
 801bbbe:	6825      	ldr	r5, [r4, #0]
 801bbc0:	6909      	ldr	r1, [r1, #16]
 801bbc2:	eba5 0901 	sub.w	r9, r5, r1
 801bbc6:	6965      	ldr	r5, [r4, #20]
 801bbc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bbcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bbd0:	3301      	adds	r3, #1
 801bbd2:	444b      	add	r3, r9
 801bbd4:	106d      	asrs	r5, r5, #1
 801bbd6:	429d      	cmp	r5, r3
 801bbd8:	bf38      	it	cc
 801bbda:	461d      	movcc	r5, r3
 801bbdc:	0553      	lsls	r3, r2, #21
 801bbde:	d531      	bpl.n	801bc44 <__ssputs_r+0xa0>
 801bbe0:	4629      	mov	r1, r5
 801bbe2:	f7ff f879 	bl	801acd8 <_malloc_r>
 801bbe6:	4606      	mov	r6, r0
 801bbe8:	b950      	cbnz	r0, 801bc00 <__ssputs_r+0x5c>
 801bbea:	230c      	movs	r3, #12
 801bbec:	f8ca 3000 	str.w	r3, [sl]
 801bbf0:	89a3      	ldrh	r3, [r4, #12]
 801bbf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bbf6:	81a3      	strh	r3, [r4, #12]
 801bbf8:	f04f 30ff 	mov.w	r0, #4294967295
 801bbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc00:	6921      	ldr	r1, [r4, #16]
 801bc02:	464a      	mov	r2, r9
 801bc04:	f7fe ffe8 	bl	801abd8 <memcpy>
 801bc08:	89a3      	ldrh	r3, [r4, #12]
 801bc0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bc0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc12:	81a3      	strh	r3, [r4, #12]
 801bc14:	6126      	str	r6, [r4, #16]
 801bc16:	6165      	str	r5, [r4, #20]
 801bc18:	444e      	add	r6, r9
 801bc1a:	eba5 0509 	sub.w	r5, r5, r9
 801bc1e:	6026      	str	r6, [r4, #0]
 801bc20:	60a5      	str	r5, [r4, #8]
 801bc22:	463e      	mov	r6, r7
 801bc24:	42be      	cmp	r6, r7
 801bc26:	d900      	bls.n	801bc2a <__ssputs_r+0x86>
 801bc28:	463e      	mov	r6, r7
 801bc2a:	4632      	mov	r2, r6
 801bc2c:	6820      	ldr	r0, [r4, #0]
 801bc2e:	4641      	mov	r1, r8
 801bc30:	f7fe ffe0 	bl	801abf4 <memmove>
 801bc34:	68a3      	ldr	r3, [r4, #8]
 801bc36:	6822      	ldr	r2, [r4, #0]
 801bc38:	1b9b      	subs	r3, r3, r6
 801bc3a:	4432      	add	r2, r6
 801bc3c:	60a3      	str	r3, [r4, #8]
 801bc3e:	6022      	str	r2, [r4, #0]
 801bc40:	2000      	movs	r0, #0
 801bc42:	e7db      	b.n	801bbfc <__ssputs_r+0x58>
 801bc44:	462a      	mov	r2, r5
 801bc46:	f7ff ff87 	bl	801bb58 <_realloc_r>
 801bc4a:	4606      	mov	r6, r0
 801bc4c:	2800      	cmp	r0, #0
 801bc4e:	d1e1      	bne.n	801bc14 <__ssputs_r+0x70>
 801bc50:	6921      	ldr	r1, [r4, #16]
 801bc52:	4650      	mov	r0, sl
 801bc54:	f7fe fff0 	bl	801ac38 <_free_r>
 801bc58:	e7c7      	b.n	801bbea <__ssputs_r+0x46>
	...

0801bc5c <_svfiprintf_r>:
 801bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc60:	4698      	mov	r8, r3
 801bc62:	898b      	ldrh	r3, [r1, #12]
 801bc64:	061b      	lsls	r3, r3, #24
 801bc66:	b09d      	sub	sp, #116	; 0x74
 801bc68:	4607      	mov	r7, r0
 801bc6a:	460d      	mov	r5, r1
 801bc6c:	4614      	mov	r4, r2
 801bc6e:	d50e      	bpl.n	801bc8e <_svfiprintf_r+0x32>
 801bc70:	690b      	ldr	r3, [r1, #16]
 801bc72:	b963      	cbnz	r3, 801bc8e <_svfiprintf_r+0x32>
 801bc74:	2140      	movs	r1, #64	; 0x40
 801bc76:	f7ff f82f 	bl	801acd8 <_malloc_r>
 801bc7a:	6028      	str	r0, [r5, #0]
 801bc7c:	6128      	str	r0, [r5, #16]
 801bc7e:	b920      	cbnz	r0, 801bc8a <_svfiprintf_r+0x2e>
 801bc80:	230c      	movs	r3, #12
 801bc82:	603b      	str	r3, [r7, #0]
 801bc84:	f04f 30ff 	mov.w	r0, #4294967295
 801bc88:	e0d1      	b.n	801be2e <_svfiprintf_r+0x1d2>
 801bc8a:	2340      	movs	r3, #64	; 0x40
 801bc8c:	616b      	str	r3, [r5, #20]
 801bc8e:	2300      	movs	r3, #0
 801bc90:	9309      	str	r3, [sp, #36]	; 0x24
 801bc92:	2320      	movs	r3, #32
 801bc94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bc98:	f8cd 800c 	str.w	r8, [sp, #12]
 801bc9c:	2330      	movs	r3, #48	; 0x30
 801bc9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801be48 <_svfiprintf_r+0x1ec>
 801bca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bca6:	f04f 0901 	mov.w	r9, #1
 801bcaa:	4623      	mov	r3, r4
 801bcac:	469a      	mov	sl, r3
 801bcae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bcb2:	b10a      	cbz	r2, 801bcb8 <_svfiprintf_r+0x5c>
 801bcb4:	2a25      	cmp	r2, #37	; 0x25
 801bcb6:	d1f9      	bne.n	801bcac <_svfiprintf_r+0x50>
 801bcb8:	ebba 0b04 	subs.w	fp, sl, r4
 801bcbc:	d00b      	beq.n	801bcd6 <_svfiprintf_r+0x7a>
 801bcbe:	465b      	mov	r3, fp
 801bcc0:	4622      	mov	r2, r4
 801bcc2:	4629      	mov	r1, r5
 801bcc4:	4638      	mov	r0, r7
 801bcc6:	f7ff ff6d 	bl	801bba4 <__ssputs_r>
 801bcca:	3001      	adds	r0, #1
 801bccc:	f000 80aa 	beq.w	801be24 <_svfiprintf_r+0x1c8>
 801bcd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bcd2:	445a      	add	r2, fp
 801bcd4:	9209      	str	r2, [sp, #36]	; 0x24
 801bcd6:	f89a 3000 	ldrb.w	r3, [sl]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	f000 80a2 	beq.w	801be24 <_svfiprintf_r+0x1c8>
 801bce0:	2300      	movs	r3, #0
 801bce2:	f04f 32ff 	mov.w	r2, #4294967295
 801bce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bcea:	f10a 0a01 	add.w	sl, sl, #1
 801bcee:	9304      	str	r3, [sp, #16]
 801bcf0:	9307      	str	r3, [sp, #28]
 801bcf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bcf6:	931a      	str	r3, [sp, #104]	; 0x68
 801bcf8:	4654      	mov	r4, sl
 801bcfa:	2205      	movs	r2, #5
 801bcfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd00:	4851      	ldr	r0, [pc, #324]	; (801be48 <_svfiprintf_r+0x1ec>)
 801bd02:	f7e4 fa6d 	bl	80001e0 <memchr>
 801bd06:	9a04      	ldr	r2, [sp, #16]
 801bd08:	b9d8      	cbnz	r0, 801bd42 <_svfiprintf_r+0xe6>
 801bd0a:	06d0      	lsls	r0, r2, #27
 801bd0c:	bf44      	itt	mi
 801bd0e:	2320      	movmi	r3, #32
 801bd10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd14:	0711      	lsls	r1, r2, #28
 801bd16:	bf44      	itt	mi
 801bd18:	232b      	movmi	r3, #43	; 0x2b
 801bd1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd1e:	f89a 3000 	ldrb.w	r3, [sl]
 801bd22:	2b2a      	cmp	r3, #42	; 0x2a
 801bd24:	d015      	beq.n	801bd52 <_svfiprintf_r+0xf6>
 801bd26:	9a07      	ldr	r2, [sp, #28]
 801bd28:	4654      	mov	r4, sl
 801bd2a:	2000      	movs	r0, #0
 801bd2c:	f04f 0c0a 	mov.w	ip, #10
 801bd30:	4621      	mov	r1, r4
 801bd32:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bd36:	3b30      	subs	r3, #48	; 0x30
 801bd38:	2b09      	cmp	r3, #9
 801bd3a:	d94e      	bls.n	801bdda <_svfiprintf_r+0x17e>
 801bd3c:	b1b0      	cbz	r0, 801bd6c <_svfiprintf_r+0x110>
 801bd3e:	9207      	str	r2, [sp, #28]
 801bd40:	e014      	b.n	801bd6c <_svfiprintf_r+0x110>
 801bd42:	eba0 0308 	sub.w	r3, r0, r8
 801bd46:	fa09 f303 	lsl.w	r3, r9, r3
 801bd4a:	4313      	orrs	r3, r2
 801bd4c:	9304      	str	r3, [sp, #16]
 801bd4e:	46a2      	mov	sl, r4
 801bd50:	e7d2      	b.n	801bcf8 <_svfiprintf_r+0x9c>
 801bd52:	9b03      	ldr	r3, [sp, #12]
 801bd54:	1d19      	adds	r1, r3, #4
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	9103      	str	r1, [sp, #12]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	bfbb      	ittet	lt
 801bd5e:	425b      	neglt	r3, r3
 801bd60:	f042 0202 	orrlt.w	r2, r2, #2
 801bd64:	9307      	strge	r3, [sp, #28]
 801bd66:	9307      	strlt	r3, [sp, #28]
 801bd68:	bfb8      	it	lt
 801bd6a:	9204      	strlt	r2, [sp, #16]
 801bd6c:	7823      	ldrb	r3, [r4, #0]
 801bd6e:	2b2e      	cmp	r3, #46	; 0x2e
 801bd70:	d10c      	bne.n	801bd8c <_svfiprintf_r+0x130>
 801bd72:	7863      	ldrb	r3, [r4, #1]
 801bd74:	2b2a      	cmp	r3, #42	; 0x2a
 801bd76:	d135      	bne.n	801bde4 <_svfiprintf_r+0x188>
 801bd78:	9b03      	ldr	r3, [sp, #12]
 801bd7a:	1d1a      	adds	r2, r3, #4
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	9203      	str	r2, [sp, #12]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	bfb8      	it	lt
 801bd84:	f04f 33ff 	movlt.w	r3, #4294967295
 801bd88:	3402      	adds	r4, #2
 801bd8a:	9305      	str	r3, [sp, #20]
 801bd8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801be58 <_svfiprintf_r+0x1fc>
 801bd90:	7821      	ldrb	r1, [r4, #0]
 801bd92:	2203      	movs	r2, #3
 801bd94:	4650      	mov	r0, sl
 801bd96:	f7e4 fa23 	bl	80001e0 <memchr>
 801bd9a:	b140      	cbz	r0, 801bdae <_svfiprintf_r+0x152>
 801bd9c:	2340      	movs	r3, #64	; 0x40
 801bd9e:	eba0 000a 	sub.w	r0, r0, sl
 801bda2:	fa03 f000 	lsl.w	r0, r3, r0
 801bda6:	9b04      	ldr	r3, [sp, #16]
 801bda8:	4303      	orrs	r3, r0
 801bdaa:	3401      	adds	r4, #1
 801bdac:	9304      	str	r3, [sp, #16]
 801bdae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdb2:	4826      	ldr	r0, [pc, #152]	; (801be4c <_svfiprintf_r+0x1f0>)
 801bdb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bdb8:	2206      	movs	r2, #6
 801bdba:	f7e4 fa11 	bl	80001e0 <memchr>
 801bdbe:	2800      	cmp	r0, #0
 801bdc0:	d038      	beq.n	801be34 <_svfiprintf_r+0x1d8>
 801bdc2:	4b23      	ldr	r3, [pc, #140]	; (801be50 <_svfiprintf_r+0x1f4>)
 801bdc4:	bb1b      	cbnz	r3, 801be0e <_svfiprintf_r+0x1b2>
 801bdc6:	9b03      	ldr	r3, [sp, #12]
 801bdc8:	3307      	adds	r3, #7
 801bdca:	f023 0307 	bic.w	r3, r3, #7
 801bdce:	3308      	adds	r3, #8
 801bdd0:	9303      	str	r3, [sp, #12]
 801bdd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdd4:	4433      	add	r3, r6
 801bdd6:	9309      	str	r3, [sp, #36]	; 0x24
 801bdd8:	e767      	b.n	801bcaa <_svfiprintf_r+0x4e>
 801bdda:	fb0c 3202 	mla	r2, ip, r2, r3
 801bdde:	460c      	mov	r4, r1
 801bde0:	2001      	movs	r0, #1
 801bde2:	e7a5      	b.n	801bd30 <_svfiprintf_r+0xd4>
 801bde4:	2300      	movs	r3, #0
 801bde6:	3401      	adds	r4, #1
 801bde8:	9305      	str	r3, [sp, #20]
 801bdea:	4619      	mov	r1, r3
 801bdec:	f04f 0c0a 	mov.w	ip, #10
 801bdf0:	4620      	mov	r0, r4
 801bdf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bdf6:	3a30      	subs	r2, #48	; 0x30
 801bdf8:	2a09      	cmp	r2, #9
 801bdfa:	d903      	bls.n	801be04 <_svfiprintf_r+0x1a8>
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d0c5      	beq.n	801bd8c <_svfiprintf_r+0x130>
 801be00:	9105      	str	r1, [sp, #20]
 801be02:	e7c3      	b.n	801bd8c <_svfiprintf_r+0x130>
 801be04:	fb0c 2101 	mla	r1, ip, r1, r2
 801be08:	4604      	mov	r4, r0
 801be0a:	2301      	movs	r3, #1
 801be0c:	e7f0      	b.n	801bdf0 <_svfiprintf_r+0x194>
 801be0e:	ab03      	add	r3, sp, #12
 801be10:	9300      	str	r3, [sp, #0]
 801be12:	462a      	mov	r2, r5
 801be14:	4b0f      	ldr	r3, [pc, #60]	; (801be54 <_svfiprintf_r+0x1f8>)
 801be16:	a904      	add	r1, sp, #16
 801be18:	4638      	mov	r0, r7
 801be1a:	f3af 8000 	nop.w
 801be1e:	1c42      	adds	r2, r0, #1
 801be20:	4606      	mov	r6, r0
 801be22:	d1d6      	bne.n	801bdd2 <_svfiprintf_r+0x176>
 801be24:	89ab      	ldrh	r3, [r5, #12]
 801be26:	065b      	lsls	r3, r3, #25
 801be28:	f53f af2c 	bmi.w	801bc84 <_svfiprintf_r+0x28>
 801be2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801be2e:	b01d      	add	sp, #116	; 0x74
 801be30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be34:	ab03      	add	r3, sp, #12
 801be36:	9300      	str	r3, [sp, #0]
 801be38:	462a      	mov	r2, r5
 801be3a:	4b06      	ldr	r3, [pc, #24]	; (801be54 <_svfiprintf_r+0x1f8>)
 801be3c:	a904      	add	r1, sp, #16
 801be3e:	4638      	mov	r0, r7
 801be40:	f7ff f96c 	bl	801b11c <_printf_i>
 801be44:	e7eb      	b.n	801be1e <_svfiprintf_r+0x1c2>
 801be46:	bf00      	nop
 801be48:	080201c0 	.word	0x080201c0
 801be4c:	080201ca 	.word	0x080201ca
 801be50:	00000000 	.word	0x00000000
 801be54:	0801bba5 	.word	0x0801bba5
 801be58:	080201c6 	.word	0x080201c6

0801be5c <_read_r>:
 801be5c:	b538      	push	{r3, r4, r5, lr}
 801be5e:	4d07      	ldr	r5, [pc, #28]	; (801be7c <_read_r+0x20>)
 801be60:	4604      	mov	r4, r0
 801be62:	4608      	mov	r0, r1
 801be64:	4611      	mov	r1, r2
 801be66:	2200      	movs	r2, #0
 801be68:	602a      	str	r2, [r5, #0]
 801be6a:	461a      	mov	r2, r3
 801be6c:	f7fd ff24 	bl	8019cb8 <_read>
 801be70:	1c43      	adds	r3, r0, #1
 801be72:	d102      	bne.n	801be7a <_read_r+0x1e>
 801be74:	682b      	ldr	r3, [r5, #0]
 801be76:	b103      	cbz	r3, 801be7a <_read_r+0x1e>
 801be78:	6023      	str	r3, [r4, #0]
 801be7a:	bd38      	pop	{r3, r4, r5, pc}
 801be7c:	20019200 	.word	0x20019200

0801be80 <_raise_r>:
 801be80:	291f      	cmp	r1, #31
 801be82:	b538      	push	{r3, r4, r5, lr}
 801be84:	4604      	mov	r4, r0
 801be86:	460d      	mov	r5, r1
 801be88:	d904      	bls.n	801be94 <_raise_r+0x14>
 801be8a:	2316      	movs	r3, #22
 801be8c:	6003      	str	r3, [r0, #0]
 801be8e:	f04f 30ff 	mov.w	r0, #4294967295
 801be92:	bd38      	pop	{r3, r4, r5, pc}
 801be94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801be96:	b112      	cbz	r2, 801be9e <_raise_r+0x1e>
 801be98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801be9c:	b94b      	cbnz	r3, 801beb2 <_raise_r+0x32>
 801be9e:	4620      	mov	r0, r4
 801bea0:	f000 f830 	bl	801bf04 <_getpid_r>
 801bea4:	462a      	mov	r2, r5
 801bea6:	4601      	mov	r1, r0
 801bea8:	4620      	mov	r0, r4
 801beaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801beae:	f000 b817 	b.w	801bee0 <_kill_r>
 801beb2:	2b01      	cmp	r3, #1
 801beb4:	d00a      	beq.n	801becc <_raise_r+0x4c>
 801beb6:	1c59      	adds	r1, r3, #1
 801beb8:	d103      	bne.n	801bec2 <_raise_r+0x42>
 801beba:	2316      	movs	r3, #22
 801bebc:	6003      	str	r3, [r0, #0]
 801bebe:	2001      	movs	r0, #1
 801bec0:	e7e7      	b.n	801be92 <_raise_r+0x12>
 801bec2:	2400      	movs	r4, #0
 801bec4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bec8:	4628      	mov	r0, r5
 801beca:	4798      	blx	r3
 801becc:	2000      	movs	r0, #0
 801bece:	e7e0      	b.n	801be92 <_raise_r+0x12>

0801bed0 <raise>:
 801bed0:	4b02      	ldr	r3, [pc, #8]	; (801bedc <raise+0xc>)
 801bed2:	4601      	mov	r1, r0
 801bed4:	6818      	ldr	r0, [r3, #0]
 801bed6:	f7ff bfd3 	b.w	801be80 <_raise_r>
 801beda:	bf00      	nop
 801bedc:	20000040 	.word	0x20000040

0801bee0 <_kill_r>:
 801bee0:	b538      	push	{r3, r4, r5, lr}
 801bee2:	4d07      	ldr	r5, [pc, #28]	; (801bf00 <_kill_r+0x20>)
 801bee4:	2300      	movs	r3, #0
 801bee6:	4604      	mov	r4, r0
 801bee8:	4608      	mov	r0, r1
 801beea:	4611      	mov	r1, r2
 801beec:	602b      	str	r3, [r5, #0]
 801beee:	f7e5 f801 	bl	8000ef4 <_kill>
 801bef2:	1c43      	adds	r3, r0, #1
 801bef4:	d102      	bne.n	801befc <_kill_r+0x1c>
 801bef6:	682b      	ldr	r3, [r5, #0]
 801bef8:	b103      	cbz	r3, 801befc <_kill_r+0x1c>
 801befa:	6023      	str	r3, [r4, #0]
 801befc:	bd38      	pop	{r3, r4, r5, pc}
 801befe:	bf00      	nop
 801bf00:	20019200 	.word	0x20019200

0801bf04 <_getpid_r>:
 801bf04:	f7e4 bfee 	b.w	8000ee4 <_getpid>

0801bf08 <_fstat_r>:
 801bf08:	b538      	push	{r3, r4, r5, lr}
 801bf0a:	4d07      	ldr	r5, [pc, #28]	; (801bf28 <_fstat_r+0x20>)
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	4604      	mov	r4, r0
 801bf10:	4608      	mov	r0, r1
 801bf12:	4611      	mov	r1, r2
 801bf14:	602b      	str	r3, [r5, #0]
 801bf16:	f7e5 f815 	bl	8000f44 <_fstat>
 801bf1a:	1c43      	adds	r3, r0, #1
 801bf1c:	d102      	bne.n	801bf24 <_fstat_r+0x1c>
 801bf1e:	682b      	ldr	r3, [r5, #0]
 801bf20:	b103      	cbz	r3, 801bf24 <_fstat_r+0x1c>
 801bf22:	6023      	str	r3, [r4, #0]
 801bf24:	bd38      	pop	{r3, r4, r5, pc}
 801bf26:	bf00      	nop
 801bf28:	20019200 	.word	0x20019200

0801bf2c <_isatty_r>:
 801bf2c:	b538      	push	{r3, r4, r5, lr}
 801bf2e:	4d06      	ldr	r5, [pc, #24]	; (801bf48 <_isatty_r+0x1c>)
 801bf30:	2300      	movs	r3, #0
 801bf32:	4604      	mov	r4, r0
 801bf34:	4608      	mov	r0, r1
 801bf36:	602b      	str	r3, [r5, #0]
 801bf38:	f7e5 f814 	bl	8000f64 <_isatty>
 801bf3c:	1c43      	adds	r3, r0, #1
 801bf3e:	d102      	bne.n	801bf46 <_isatty_r+0x1a>
 801bf40:	682b      	ldr	r3, [r5, #0]
 801bf42:	b103      	cbz	r3, 801bf46 <_isatty_r+0x1a>
 801bf44:	6023      	str	r3, [r4, #0]
 801bf46:	bd38      	pop	{r3, r4, r5, pc}
 801bf48:	20019200 	.word	0x20019200

0801bf4c <_malloc_usable_size_r>:
 801bf4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bf50:	1f18      	subs	r0, r3, #4
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	bfbc      	itt	lt
 801bf56:	580b      	ldrlt	r3, [r1, r0]
 801bf58:	18c0      	addlt	r0, r0, r3
 801bf5a:	4770      	bx	lr

0801bf5c <_init>:
 801bf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf5e:	bf00      	nop
 801bf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf62:	bc08      	pop	{r3}
 801bf64:	469e      	mov	lr, r3
 801bf66:	4770      	bx	lr

0801bf68 <_fini>:
 801bf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf6a:	bf00      	nop
 801bf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf6e:	bc08      	pop	{r3}
 801bf70:	469e      	mov	lr, r3
 801bf72:	4770      	bx	lr
