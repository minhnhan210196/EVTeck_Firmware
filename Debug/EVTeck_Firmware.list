
EVTeck_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000133dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dbc  0801356c  0801356c  0002356c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016328  08016328  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08016328  08016328  00026328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016330  08016330  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016330  08016330  00026330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016334  08016334  00026334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08016338  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011c90  20000080  080163b8  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011d10  080163b8  00031d10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043883  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007fe5  00000000  00000000  00073933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d8  00000000  00000000  0007b918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002058  00000000  00000000  0007daf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010d2d  00000000  00000000  0007fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033171  00000000  00000000  00090875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1140  00000000  00000000  000c39e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b4b26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000944c  00000000  00000000  001b4b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013554 	.word	0x08013554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08013554 	.word	0x08013554

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fc4e 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f81a 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f908 	bl	8000788 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000578:	f000 f880 	bl	800067c <MX_SPI1_Init>
  MX_TIM1_Init();
 800057c:	f000 f8b4 	bl	80006e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000580:	f004 f836 	bl	80045f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000584:	4a05      	ldr	r2, [pc, #20]	; (800059c <main+0x34>)
 8000586:	2100      	movs	r1, #0
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <main+0x38>)
 800058a:	f004 f890 	bl	80046ae <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <main+0x3c>)
 8000592:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000594:	f004 f850 	bl	8004638 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0x30>
 800059a:	bf00      	nop
 800059c:	0801607c 	.word	0x0801607c
 80005a0:	08000971 	.word	0x08000971
 80005a4:	2000b250 	.word	0x2000b250

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f012 f870 	bl	801269c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b28      	ldr	r3, [pc, #160]	; (8000674 <SystemClock_Config+0xcc>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a27      	ldr	r2, [pc, #156]	; (8000674 <SystemClock_Config+0xcc>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b22      	ldr	r3, [pc, #136]	; (8000678 <SystemClock_Config+0xd0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xd0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800061c:	23a8      	movs	r3, #168	; 0xa8
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f002 f891 	bl	8002754 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 f9b6 	bl	80009a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000648:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2105      	movs	r1, #5
 800065a:	4618      	mov	r0, r3
 800065c:	f002 faf2 	bl	8002c44 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000666:	f000 f99f 	bl	80009a8 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <MX_SPI1_Init+0x68>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006c8:	220a      	movs	r2, #10
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006ce:	f002 fcd3 	bl	8003078 <HAL_SPI_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d8:	f000 f966 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000b29c 	.word	0x2000b29c
 80006e4:	40013000 	.word	0x40013000

080006e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	463b      	mov	r3, r7
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_TIM1_Init+0x98>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	; (8000784 <MX_TIM1_Init+0x9c>)
 8000708:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_TIM1_Init+0x98>)
 800070c:	22a7      	movs	r2, #167	; 0xa7
 800070e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_TIM1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_TIM1_Init+0x98>)
 8000718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800071c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_TIM1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_TIM1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_TIM1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000730:	4813      	ldr	r0, [pc, #76]	; (8000780 <MX_TIM1_Init+0x98>)
 8000732:	f002 fd2a 	bl	800318a <HAL_TIM_Base_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800073c:	f000 f934 	bl	80009a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000746:	f107 0308 	add.w	r3, r7, #8
 800074a:	4619      	mov	r1, r3
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_TIM1_Init+0x98>)
 800074e:	f002 fee3 	bl	8003518 <HAL_TIM_ConfigClockSource>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000758:	f000 f926 	bl	80009a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_TIM1_Init+0x98>)
 800076a:	f003 f8ff 	bl	800396c <HAL_TIMEx_MasterConfigSynchronization>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000774:	f000 f918 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000b254 	.word	0x2000b254
 8000784:	40010000 	.word	0x40010000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	; 0x38
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
 80007a2:	4b6e      	ldr	r3, [pc, #440]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a6d      	ldr	r2, [pc, #436]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b6b      	ldr	r3, [pc, #428]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	623b      	str	r3, [r7, #32]
 80007b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
 80007be:	4b67      	ldr	r3, [pc, #412]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a66      	ldr	r2, [pc, #408]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b64      	ldr	r3, [pc, #400]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	61fb      	str	r3, [r7, #28]
 80007d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	4b60      	ldr	r3, [pc, #384]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a5f      	ldr	r2, [pc, #380]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b5d      	ldr	r3, [pc, #372]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	4b59      	ldr	r3, [pc, #356]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a58      	ldr	r2, [pc, #352]	; (800095c <MX_GPIO_Init+0x1d4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b56      	ldr	r3, [pc, #344]	; (800095c <MX_GPIO_Init+0x1d4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b52      	ldr	r3, [pc, #328]	; (800095c <MX_GPIO_Init+0x1d4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a51      	ldr	r2, [pc, #324]	; (800095c <MX_GPIO_Init+0x1d4>)
 8000818:	f043 0320 	orr.w	r3, r3, #32
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b4f      	ldr	r3, [pc, #316]	; (800095c <MX_GPIO_Init+0x1d4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0320 	and.w	r3, r3, #32
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	4b4b      	ldr	r3, [pc, #300]	; (800095c <MX_GPIO_Init+0x1d4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a4a      	ldr	r2, [pc, #296]	; (800095c <MX_GPIO_Init+0x1d4>)
 8000834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b48      	ldr	r3, [pc, #288]	; (800095c <MX_GPIO_Init+0x1d4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b44      	ldr	r3, [pc, #272]	; (800095c <MX_GPIO_Init+0x1d4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a43      	ldr	r2, [pc, #268]	; (800095c <MX_GPIO_Init+0x1d4>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b41      	ldr	r3, [pc, #260]	; (800095c <MX_GPIO_Init+0x1d4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_GPIO_Init+0x1d4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a3c      	ldr	r2, [pc, #240]	; (800095c <MX_GPIO_Init+0x1d4>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <MX_GPIO_Init+0x1d4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VAL_Pin|MOTOR_Pin|MUX_B3_Pin|MUX_A4_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8000884:	4836      	ldr	r0, [pc, #216]	; (8000960 <MX_GPIO_Init+0x1d8>)
 8000886:	f001 ff4b 	bl	8002720 <HAL_GPIO_WritePin>
                          |MUX_B4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MUX_A1_Pin|MUX_B1_Pin|MUX_A2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000890:	4834      	ldr	r0, [pc, #208]	; (8000964 <MX_GPIO_Init+0x1dc>)
 8000892:	f001 ff45 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_B2_Pin|MUX_A3_Pin|ADC_CNV2_Pin|ADC_RS2_Pin
 8000896:	2200      	movs	r2, #0
 8000898:	2137      	movs	r1, #55	; 0x37
 800089a:	4833      	ldr	r0, [pc, #204]	; (8000968 <MX_GPIO_Init+0x1e0>)
 800089c:	f001 ff40 	bl	8002720 <HAL_GPIO_WritePin>
                          |ADC_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADC_CNV1_Pin|ADC_RS1_Pin|ADC_CS1_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 80008a6:	4831      	ldr	r0, [pc, #196]	; (800096c <MX_GPIO_Init+0x1e4>)
 80008a8:	f001 ff3a 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VAL_Pin MOTOR_Pin MUX_B3_Pin MUX_A4_Pin
                           MUX_B4_Pin */
  GPIO_InitStruct.Pin = VAL_Pin|MOTOR_Pin|MUX_B3_Pin|MUX_A4_Pin
 80008ac:	f44f 7363 	mov.w	r3, #908	; 0x38c
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
                          |MUX_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	4826      	ldr	r0, [pc, #152]	; (8000960 <MX_GPIO_Init+0x1d8>)
 80008c6:	f001 fd8f 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_A1_Pin MUX_B1_Pin MUX_A2_Pin */
  GPIO_InitStruct.Pin = MUX_A1_Pin|MUX_B1_Pin|MUX_A2_Pin;
 80008ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e0:	4619      	mov	r1, r3
 80008e2:	4820      	ldr	r0, [pc, #128]	; (8000964 <MX_GPIO_Init+0x1dc>)
 80008e4:	f001 fd80 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_B2_Pin MUX_A3_Pin ADC_CNV2_Pin ADC_RS2_Pin
                           ADC_CS2_Pin */
  GPIO_InitStruct.Pin = MUX_B2_Pin|MUX_A3_Pin|ADC_CNV2_Pin|ADC_RS2_Pin
 80008e8:	2337      	movs	r3, #55	; 0x37
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |ADC_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	481a      	ldr	r0, [pc, #104]	; (8000968 <MX_GPIO_Init+0x1e0>)
 8000900:	f001 fd72 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CNV1_Pin ADC_RS1_Pin ADC_CS1_Pin */
  GPIO_InitStruct.Pin = ADC_CNV1_Pin|ADC_RS1_Pin|ADC_CS1_Pin;
 8000904:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4813      	ldr	r0, [pc, #76]	; (800096c <MX_GPIO_Init+0x1e4>)
 800091e:	f001 fd63 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_BUSY1_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY1_Pin;
 8000922:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_GPIO_Init+0x1e4>)
 8000938:	f001 fd56 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_BUSY2_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY2_Pin;
 800093c:	2308      	movs	r3, #8
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY2_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_GPIO_Init+0x1e0>)
 8000950:	f001 fd4a 	bl	80023e8 <HAL_GPIO_Init>

}
 8000954:	bf00      	nop
 8000956:	3738      	adds	r7, #56	; 0x38
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40021000 	.word	0x40021000
 8000964:	40021400 	.word	0x40021400
 8000968:	40021800 	.word	0x40021800
 800096c:	40020c00 	.word	0x40020c00

08000970 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000978:	f003 f888 	bl	8003a8c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800097c:	2001      	movs	r0, #1
 800097e:	f003 ff29 	bl	80047d4 <osDelay>
 8000982:	e7fb      	b.n	800097c <StartDefaultTask+0xc>

08000984 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000996:	f000 fa5b 	bl	8000e50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40001000 	.word	0x40001000

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_MspInit+0x54>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <HAL_MspInit+0x54>)
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x54>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_MspInit+0x54>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_MspInit+0x54>)
 80009e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_MspInit+0x54>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	210f      	movs	r1, #15
 80009f6:	f06f 0001 	mvn.w	r0, #1
 80009fa:	f000 fb25 	bl	8001048 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_SPI_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12b      	bne.n	8000a86 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_SPI_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a66:	2338      	movs	r3, #56	; 0x38
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a76:	2305      	movs	r3, #5
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_SPI_MspInit+0x8c>)
 8000a82:	f001 fcb1 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40013000 	.word	0x40013000
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020400 	.word	0x40020400

08000a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1a      	ldr	r2, [pc, #104]	; (8000b14 <HAL_TIM_Base_MspInit+0x78>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d12d      	bne.n	8000b0a <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_TIM_Base_MspInit+0x7c>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <HAL_TIM_Base_MspInit+0x7c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <HAL_TIM_Base_MspInit+0x7c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2105      	movs	r1, #5
 8000ace:	2018      	movs	r0, #24
 8000ad0:	f000 faba 	bl	8001048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ad4:	2018      	movs	r0, #24
 8000ad6:	f000 fad3 	bl	8001080 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2105      	movs	r1, #5
 8000ade:	2019      	movs	r0, #25
 8000ae0:	f000 fab2 	bl	8001048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ae4:	2019      	movs	r0, #25
 8000ae6:	f000 facb 	bl	8001080 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2105      	movs	r1, #5
 8000aee:	201a      	movs	r0, #26
 8000af0:	f000 faaa 	bl	8001048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000af4:	201a      	movs	r0, #26
 8000af6:	f000 fac3 	bl	8001080 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2105      	movs	r1, #5
 8000afe:	201b      	movs	r0, #27
 8000b00:	f000 faa2 	bl	8001048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b04:	201b      	movs	r0, #27
 8000b06:	f000 fabb 	bl	8001080 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40010000 	.word	0x40010000
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	2036      	movs	r0, #54	; 0x36
 8000b32:	f000 fa89 	bl	8001048 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b36:	2036      	movs	r0, #54	; 0x36
 8000b38:	f000 faa2 	bl	8001080 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <HAL_InitTick+0xa4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <HAL_InitTick+0xa4>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <HAL_InitTick+0xa4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f003 0310 	and.w	r3, r3, #16
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b58:	f107 0210 	add.w	r2, r7, #16
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fa56 	bl	8003014 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b68:	f002 fa40 	bl	8002fec <HAL_RCC_GetPCLK1Freq>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b74:	4a13      	ldr	r2, [pc, #76]	; (8000bc4 <HAL_InitTick+0xa8>)
 8000b76:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7a:	0c9b      	lsrs	r3, r3, #18
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_InitTick+0xac>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <HAL_InitTick+0xb0>)
 8000b84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_InitTick+0xac>)
 8000b88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b8c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <HAL_InitTick+0xac>)
 8000b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b92:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <HAL_InitTick+0xac>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_InitTick+0xac>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <HAL_InitTick+0xac>)
 8000ba2:	f002 faf2 	bl	800318a <HAL_TIM_Base_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d104      	bne.n	8000bb6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bac:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <HAL_InitTick+0xac>)
 8000bae:	f002 fb3b 	bl	8003228 <HAL_TIM_Base_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3730      	adds	r7, #48	; 0x30
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	431bde83 	.word	0x431bde83
 8000bc8:	2000b2f4 	.word	0x2000b2f4
 8000bcc:	40001000 	.word	0x40001000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000c02:	f002 fb81 	bl	8003308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000b254 	.word	0x2000b254

08000c10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c16:	f002 fb77 	bl	8003308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000b254 	.word	0x2000b254

08000c24 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000c2a:	f002 fb6d 	bl	8003308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000b254 	.word	0x2000b254

08000c38 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM1_CC_IRQHandler+0x10>)
 8000c3e:	f002 fb63 	bl	8003308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000b254 	.word	0x2000b254

08000c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM6_DAC_IRQHandler+0x10>)
 8000c52:	f002 fb59 	bl	8003308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000b2f4 	.word	0x2000b2f4

08000c60 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <ETH_IRQHandler+0x10>)
 8000c66:	f000 fdfd 	bl	8001864 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000cc88 	.word	0x2000cc88

08000c74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	return 1;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <_kill>:

int _kill(int pid, int sig)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <_kill+0x20>)
 8000c90:	2216      	movs	r2, #22
 8000c92:	601a      	str	r2, [r3, #0]
	return -1;
 8000c94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20011c14 	.word	0x20011c14

08000ca8 <_exit>:

void _exit (int status)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f7ff ffe5 	bl	8000c84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cba:	e7fe      	b.n	8000cba <_exit+0x12>

08000cbc <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	return -1;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce4:	605a      	str	r2, [r3, #4]
	return 0;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_isatty>:

int _isatty(int file)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
	return 0;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d205      	bcs.n	8000d60 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <_sbrk+0x6c>)
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	371c      	adds	r7, #28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20020000 	.word	0x20020000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	2000009c 	.word	0x2000009c
 8000d8c:	20011d10 	.word	0x20011d10
 8000d90:	20011c14 	.word	0x20011c14

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f011 fc0d 	bl	8012604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fbbd 	bl	8000568 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000dfc:	08016338 	.word	0x08016338
  ldr r2, =_sbss
 8000e00:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e04:	20011d10 	.word	0x20011d10

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f8fc 	bl	8001032 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff fe6e 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fdb8 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	2000b33c 	.word	0x2000b33c

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	2000b33c 	.word	0x2000b33c

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	; (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	; (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	; 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff4c 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105a:	f7ff ff61 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 800105e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	6978      	ldr	r0, [r7, #20]
 8001066:	f7ff ffb1 	bl	8000fcc <NVIC_EncodePriority>
 800106a:	4602      	mov	r2, r0
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff80 	bl	8000f78 <__NVIC_SetPriority>
}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff54 	bl	8000f3c <__NVIC_EnableIRQ>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80010ac:	4baa      	ldr	r3, [pc, #680]	; (8001358 <HAL_ETH_Init+0x2bc>)
 80010ae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e183      	b.n	80013ca <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d106      	bne.n	80010dc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f002 fe3a 	bl	8003d50 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b9e      	ldr	r3, [pc, #632]	; (800135c <HAL_ETH_Init+0x2c0>)
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	4a9d      	ldr	r2, [pc, #628]	; (800135c <HAL_ETH_Init+0x2c0>)
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ea:	6453      	str	r3, [r2, #68]	; 0x44
 80010ec:	4b9b      	ldr	r3, [pc, #620]	; (800135c <HAL_ETH_Init+0x2c0>)
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010f8:	4b99      	ldr	r3, [pc, #612]	; (8001360 <HAL_ETH_Init+0x2c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4a98      	ldr	r2, [pc, #608]	; (8001360 <HAL_ETH_Init+0x2c4>)
 80010fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001102:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001104:	4b96      	ldr	r3, [pc, #600]	; (8001360 <HAL_ETH_Init+0x2c4>)
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	4994      	ldr	r1, [pc, #592]	; (8001360 <HAL_ETH_Init+0x2c4>)
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f042 0201 	orr.w	r2, r2, #1
 8001124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001128:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800112a:	f7ff fea5 	bl	8000e78 <HAL_GetTick>
 800112e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001130:	e011      	b.n	8001156 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001132:	f7ff fea1 	bl	8000e78 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001140:	d909      	bls.n	8001156 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e139      	b.n	80013ca <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1e4      	bne.n	8001132 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f023 031c 	bic.w	r3, r3, #28
 8001176:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001178:	f001 ff2c 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 800117c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4a78      	ldr	r2, [pc, #480]	; (8001364 <HAL_ETH_Init+0x2c8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d908      	bls.n	8001198 <HAL_ETH_Init+0xfc>
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4a77      	ldr	r2, [pc, #476]	; (8001368 <HAL_ETH_Init+0x2cc>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d804      	bhi.n	8001198 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e027      	b.n	80011e8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	4a73      	ldr	r2, [pc, #460]	; (8001368 <HAL_ETH_Init+0x2cc>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d908      	bls.n	80011b2 <HAL_ETH_Init+0x116>
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	4a6d      	ldr	r2, [pc, #436]	; (8001358 <HAL_ETH_Init+0x2bc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d204      	bcs.n	80011b2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f043 030c 	orr.w	r3, r3, #12
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	e01a      	b.n	80011e8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	4a68      	ldr	r2, [pc, #416]	; (8001358 <HAL_ETH_Init+0x2bc>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d303      	bcc.n	80011c2 <HAL_ETH_Init+0x126>
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4a6b      	ldr	r2, [pc, #428]	; (800136c <HAL_ETH_Init+0x2d0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d911      	bls.n	80011e6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4a69      	ldr	r2, [pc, #420]	; (800136c <HAL_ETH_Init+0x2d0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d908      	bls.n	80011dc <HAL_ETH_Init+0x140>
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4a68      	ldr	r2, [pc, #416]	; (8001370 <HAL_ETH_Init+0x2d4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d804      	bhi.n	80011dc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	e005      	b.n	80011e8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	e000      	b.n	80011e8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80011e6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80011f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011f4:	2100      	movs	r1, #0
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 fc17 	bl	8001a2a <HAL_ETH_WritePHYRegister>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001206:	6939      	ldr	r1, [r7, #16]
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fdcd 	bl	8001da8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0d7      	b.n	80013ca <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800121a:	20ff      	movs	r0, #255	; 0xff
 800121c:	f7ff fe38 	bl	8000e90 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a5 	beq.w	8001374 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800122a:	f7ff fe25 	bl	8000e78 <HAL_GetTick>
 800122e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	461a      	mov	r2, r3
 8001236:	2101      	movs	r1, #1
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fb8e 	bl	800195a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800123e:	f7ff fe1b 	bl	8000e78 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f241 3288 	movw	r2, #5000	; 0x1388
 800124c:	4293      	cmp	r3, r2
 800124e:	d90f      	bls.n	8001270 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001254:	6939      	ldr	r1, [r7, #16]
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 fda6 	bl	8001da8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e0ac      	b.n	80013ca <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0da      	beq.n	8001230 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800127a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127e:	2100      	movs	r1, #0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fbd2 	bl	8001a2a <HAL_ETH_WritePHYRegister>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00b      	beq.n	80012a4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fd88 	bl	8001da8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012a0:	2301      	movs	r3, #1
 80012a2:	e092      	b.n	80013ca <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80012a4:	f7ff fde8 	bl	8000e78 <HAL_GetTick>
 80012a8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	461a      	mov	r2, r3
 80012b0:	2101      	movs	r1, #1
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 fb51 	bl	800195a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80012b8:	f7ff fdde 	bl	8000e78 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d90f      	bls.n	80012ea <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fd69 	bl	8001da8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e06f      	b.n	80013ca <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0da      	beq.n	80012aa <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	461a      	mov	r2, r3
 80012fa:	2110      	movs	r1, #16
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 fb2c 	bl	800195a <HAL_ETH_ReadPHYRegister>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00b      	beq.n	8001320 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800130c:	6939      	ldr	r1, [r7, #16]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 fd4a 	bl	8001da8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800131c:	2301      	movs	r3, #1
 800131e:	e054      	b.n	80013ca <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	e002      	b.n	800133a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	e035      	b.n	80013b8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	e030      	b.n	80013b8 <HAL_ETH_Init+0x31c>
 8001356:	bf00      	nop
 8001358:	03938700 	.word	0x03938700
 800135c:	40023800 	.word	0x40023800
 8001360:	40013800 	.word	0x40013800
 8001364:	01312cff 	.word	0x01312cff
 8001368:	02160ebf 	.word	0x02160ebf
 800136c:	05f5e0ff 	.word	0x05f5e0ff
 8001370:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	085b      	lsrs	r3, r3, #1
 8001382:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001384:	4313      	orrs	r3, r2
 8001386:	b29b      	uxth	r3, r3
 8001388:	461a      	mov	r2, r3
 800138a:	2100      	movs	r1, #0
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fb4c 	bl	8001a2a <HAL_ETH_WritePHYRegister>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800139c:	6939      	ldr	r1, [r7, #16]
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fd02 	bl	8001da8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e00c      	b.n	80013ca <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80013b0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80013b4:	f7ff fd6c 	bl	8000e90 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fcf4 	bl	8001da8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop

080013d4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_ETH_DMATxDescListInit+0x20>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e052      	b.n	800149a <HAL_ETH_DMATxDescListInit+0xc6>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e030      	b.n	8001472 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	015b      	lsls	r3, r3, #5
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	4413      	add	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001420:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	461a      	mov	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d105      	bne.n	800144a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	3b01      	subs	r3, #1
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	d208      	bcs.n	8001466 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	015b      	lsls	r3, r3, #5
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	461a      	mov	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	e002      	b.n	800146c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3ca      	bcc.n	8001410 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001484:	3310      	adds	r3, #16
 8001486:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b087      	sub	sp, #28
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ETH_DMARxDescListInit+0x20>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e056      	b.n	8001574 <HAL_ETH_DMARxDescListInit+0xce>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2202      	movs	r2, #2
 80014d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e034      	b.n	800154c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	015b      	lsls	r3, r3, #5
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014f2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80014fa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	4413      	add	r3, r2
 800150a:	461a      	mov	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3b01      	subs	r3, #1
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	429a      	cmp	r2, r3
 800152c:	d208      	bcs.n	8001540 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	3301      	adds	r3, #1
 8001532:	015b      	lsls	r3, r3, #5
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	4413      	add	r3, r2
 8001538:	461a      	mov	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	e002      	b.n	8001546 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3c6      	bcc.n	80014e2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800155e:	330c      	adds	r3, #12
 8001560:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	371c      	adds	r7, #28
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_ETH_TransmitFrame+0x24>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e0cd      	b.n	8001740 <HAL_ETH_TransmitFrame+0x1c0>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d109      	bne.n	80015ce <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0b8      	b.n	8001740 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da09      	bge.n	80015ec <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2212      	movs	r2, #18
 80015dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0a9      	b.n	8001740 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d915      	bls.n	8001622 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	4a54      	ldr	r2, [pc, #336]	; (800174c <HAL_ETH_TransmitFrame+0x1cc>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0a9b      	lsrs	r3, r3, #10
 8001600:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	4b51      	ldr	r3, [pc, #324]	; (800174c <HAL_ETH_TransmitFrame+0x1cc>)
 8001606:	fba3 1302 	umull	r1, r3, r3, r2
 800160a:	0a9b      	lsrs	r3, r3, #10
 800160c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3301      	adds	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e001      	b.n	8001626 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001622:	2301      	movs	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d11c      	bne.n	8001666 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800163a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001646:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001656:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	461a      	mov	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
 8001664:	e04b      	b.n	80016fe <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	e044      	b.n	80016f6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800167a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d107      	bne.n	8001692 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001690:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800169a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3b01      	subs	r3, #1
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d116      	bne.n	80016d4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80016b4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	4a25      	ldr	r2, [pc, #148]	; (8001750 <HAL_ETH_TransmitFrame+0x1d0>)
 80016ba:	fb02 f203 	mul.w	r2, r2, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80016c6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016d2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016e2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	461a      	mov	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	3301      	adds	r3, #1
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d3b6      	bcc.n	800166c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001706:	3314      	adds	r3, #20
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00d      	beq.n	800172e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171a:	3314      	adds	r3, #20
 800171c:	2204      	movs	r2, #4
 800171e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001728:	3304      	adds	r3, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	371c      	adds	r7, #28
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	ac02b00b 	.word	0xac02b00b
 8001750:	fffffa0c 	.word	0xfffffa0c

08001754 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800176a:	2302      	movs	r3, #2
 800176c:	e074      	b.n	8001858 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2202      	movs	r2, #2
 800177a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800177e:	e05a      	b.n	8001836 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001794:	d10d      	bne.n	80017b2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	461a      	mov	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28
 80017b0:	e041      	b.n	8001836 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10b      	bne.n	80017d8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	461a      	mov	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
 80017d6:	e02e      	b.n	8001836 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d103      	bne.n	80017fa <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	0c1b      	lsrs	r3, r3, #16
 8001802:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001806:	1f1a      	subs	r2, r3, #4
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	e010      	b.n	8001858 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db02      	blt.n	8001846 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b03      	cmp	r3, #3
 8001844:	d99c      	bls.n	8001780 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001874:	3314      	adds	r3, #20
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187c:	2b40      	cmp	r3, #64	; 0x40
 800187e:	d112      	bne.n	80018a6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f002 fb13 	bl	8003eac <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188e:	3314      	adds	r3, #20
 8001890:	2240      	movs	r2, #64	; 0x40
 8001892:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018a4:	e01b      	b.n	80018de <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ae:	3314      	adds	r3, #20
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d111      	bne.n	80018de <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f839 	bl	8001932 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c8:	3314      	adds	r3, #20
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e6:	3314      	adds	r3, #20
 80018e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018ec:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f6:	3314      	adds	r3, #20
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001902:	d112      	bne.n	800192a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f81e 	bl	8001946 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001912:	3314      	adds	r3, #20
 8001914:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001918:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	460b      	mov	r3, r1
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b82      	cmp	r3, #130	; 0x82
 800197a:	d101      	bne.n	8001980 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800197c:	2302      	movs	r3, #2
 800197e:	e050      	b.n	8001a22 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2282      	movs	r2, #130	; 0x82
 8001984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 031c 	and.w	r3, r3, #28
 8001996:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8a1b      	ldrh	r3, [r3, #16]
 800199c:	02db      	lsls	r3, r3, #11
 800199e:	b29b      	uxth	r3, r3
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80019a6:	897b      	ldrh	r3, [r7, #10]
 80019a8:	019b      	lsls	r3, r3, #6
 80019aa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f023 0302 	bic.w	r3, r3, #2
 80019ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019cc:	f7ff fa54 	bl	8000e78 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019d2:	e015      	b.n	8001a00 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80019d4:	f7ff fa50 	bl	8000e78 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d309      	bcc.n	80019f8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e014      	b.n	8001a22 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1e4      	bne.n	80019d4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	460b      	mov	r3, r1
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b42      	cmp	r3, #66	; 0x42
 8001a4a:	d101      	bne.n	8001a50 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e04e      	b.n	8001aee <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2242      	movs	r2, #66	; 0x42
 8001a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 031c 	and.w	r3, r3, #28
 8001a66:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	8a1b      	ldrh	r3, [r3, #16]
 8001a6c:	02db      	lsls	r3, r3, #11
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	019b      	lsls	r3, r3, #6
 8001a7a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001aa6:	f7ff f9e7 	bl	8000e78 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aac:	e015      	b.n	8001ada <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001aae:	f7ff f9e3 	bl	8000e78 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001abc:	d309      	bcc.n	8001ad2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e00d      	b.n	8001aee <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1e4      	bne.n	8001aae <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_ETH_Start+0x16>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e01f      	b.n	8001b4c <HAL_ETH_Start+0x56>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 fb45 	bl	80021ac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fb7c 	bl	8002220 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 fc13 	bl	8002354 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 fbb0 	bl	8002294 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fbdd 	bl	80022f4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_ETH_Stop+0x16>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e01f      	b.n	8001baa <HAL_ETH_Stop+0x56>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fba2 	bl	80022c4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fbcf 	bl	8002324 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 fb67 	bl	800225a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fbe1 	bl	8002354 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fb27 	bl	80021e6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_ETH_ConfigMAC+0x1c>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e0e4      	b.n	8001d9a <HAL_ETH_ConfigMAC+0x1e6>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80b1 	beq.w	8001d4a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4b6c      	ldr	r3, [pc, #432]	; (8001da4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c00:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001c06:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001c0c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001c12:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001c18:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001c1e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001c24:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001c2a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001c30:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001c36:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001c3c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001c42:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7ff f918 	bl	8000e90 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c70:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001c76:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c7c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001c82:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001c88:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001c8e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001c9a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c9c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7ff f8f2 	bl	8000e90 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cbc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cc6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cde:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ce4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001cea:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001cf0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001cf6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001cfc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d14:	2001      	movs	r0, #1
 8001d16:	f7ff f8bb 	bl	8000e90 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	f7ff f8a8 	bl	8000e90 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	61da      	str	r2, [r3, #28]
 8001d48:	e01e      	b.n	8001d88 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d58:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f7ff f888 	bl	8000e90 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	ff20810f 	.word	0xff20810f

08001da8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b0b0      	sub	sp, #192	; 0xc0
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dc4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d103      	bne.n	8001df6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df2:	663b      	str	r3, [r7, #96]	; 0x60
 8001df4:	e001      	b.n	8001dfa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e04:	2300      	movs	r3, #0
 8001e06:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e14:	2340      	movs	r3, #64	; 0x40
 8001e16:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e80:	4bac      	ldr	r3, [pc, #688]	; (8002134 <ETH_MACDMAConfig+0x38c>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e8c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001e90:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001e94:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001e9a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001e9e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ea2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ea8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001eac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001eb0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001eb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001eb4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001eb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001eb8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001ebc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001ebe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ed0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7fe ffd7 	bl	8000e90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001eec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ef0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001ef2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001ef4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001ef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001efa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f00:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f06:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f0c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f18:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f1a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f7fe ffb2 	bl	8000e90 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f34:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f3e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f48:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f58:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f66:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f6c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f72:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f78:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f7e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001f80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001f84:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001f86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f98:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7fe ff73 	bl	8000e90 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001fb4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001fb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7fe ff5e 	bl	8000e90 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fdc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fe6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001fec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ff0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002002:	2304      	movs	r3, #4
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002010:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002022:	2300      	movs	r3, #0
 8002024:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002026:	2300      	movs	r3, #0
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002032:	3318      	adds	r3, #24
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800203a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <ETH_MACDMAConfig+0x390>)
 8002040:	4013      	ands	r3, r2
 8002042:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002046:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002048:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800204a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800204c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800204e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002050:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002052:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002054:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002056:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002058:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800205a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800205c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800205e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002062:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002064:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002066:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002068:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207a:	3318      	adds	r3, #24
 800207c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002080:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208a:	3318      	adds	r3, #24
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002092:	2001      	movs	r0, #1
 8002094:	f7fe fefc 	bl	8000e90 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a0:	3318      	adds	r3, #24
 80020a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020ac:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80020b0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80020b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020b4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80020b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80020b8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80020ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020bc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80020be:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80020c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80020c2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e0:	2001      	movs	r0, #1
 80020e2:	f7fe fed5 	bl	8000e90 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d10f      	bne.n	800211c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002104:	331c      	adds	r3, #28
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002118:	331c      	adds	r3, #28
 800211a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	461a      	mov	r2, r3
 8002122:	2100      	movs	r1, #0
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f809 	bl	800213c <ETH_MACAddressConfig>
}
 800212a:	bf00      	nop
 800212c:	37c0      	adds	r7, #192	; 0xc0
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	ff20810f 	.word	0xff20810f
 8002138:	f8de3f23 	.word	0xf8de3f23

0800213c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3305      	adds	r3, #5
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	3204      	adds	r2, #4
 8002154:	7812      	ldrb	r2, [r2, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <ETH_MACAddressConfig+0x68>)
 800215e:	4413      	add	r3, r2
 8002160:	461a      	mov	r2, r3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3303      	adds	r3, #3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	061a      	lsls	r2, r3, #24
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3302      	adds	r3, #2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3301      	adds	r3, #1
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	021b      	lsls	r3, r3, #8
 8002180:	4313      	orrs	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <ETH_MACAddressConfig+0x6c>)
 800218e:	4413      	add	r3, r2
 8002190:	461a      	mov	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	6013      	str	r3, [r2, #0]
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40028040 	.word	0x40028040
 80021a8:	40028044 	.word	0x40028044

080021ac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0208 	orr.w	r2, r2, #8
 80021c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021d0:	2001      	movs	r0, #1
 80021d2:	f000 f8e9 	bl	80023a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	601a      	str	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0208 	bic.w	r2, r2, #8
 8002200:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800220a:	2001      	movs	r0, #1
 800220c:	f000 f8cc 	bl	80023a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	601a      	str	r2, [r3, #0]
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0204 	orr.w	r2, r2, #4
 800223a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002244:	2001      	movs	r0, #1
 8002246:	f000 f8af 	bl	80023a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800225a:	b580      	push	{r7, lr}
 800225c:	b084      	sub	sp, #16
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0204 	bic.w	r2, r2, #4
 8002274:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800227e:	2001      	movs	r0, #1
 8002280:	f000 f892 	bl	80023a8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a4:	3318      	adds	r3, #24
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b4:	3318      	adds	r3, #24
 80022b6:	601a      	str	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d4:	3318      	adds	r3, #24
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e4:	3318      	adds	r3, #24
 80022e6:	601a      	str	r2, [r3, #0]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002304:	3318      	adds	r3, #24
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f042 0202 	orr.w	r2, r2, #2
 8002310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002314:	3318      	adds	r3, #24
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	3318      	adds	r3, #24
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0202 	bic.w	r2, r2, #2
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	3318      	adds	r3, #24
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002368:	3318      	adds	r3, #24
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002378:	3318      	adds	r3, #24
 800237a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	3318      	adds	r3, #24
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800238a:	2001      	movs	r0, #1
 800238c:	f000 f80c 	bl	80023a8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239a:	3318      	adds	r3, #24
 800239c:	601a      	str	r2, [r3, #0]
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <ETH_Delay+0x38>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <ETH_Delay+0x3c>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0a5b      	lsrs	r3, r3, #9
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80023c4:	bf00      	nop
  } 
  while (Delay --);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1e5a      	subs	r2, r3, #1
 80023ca:	60fa      	str	r2, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f9      	bne.n	80023c4 <ETH_Delay+0x1c>
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000000 	.word	0x20000000
 80023e4:	10624dd3 	.word	0x10624dd3

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e16b      	b.n	80026dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 815a 	bne.w	80026d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002436:	2b02      	cmp	r3, #2
 8002438:	d130      	bne.n	800249c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 0201 	and.w	r2, r3, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d017      	beq.n	80024d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80b4 	beq.w	80026d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b60      	ldr	r3, [pc, #384]	; (80026f4 <HAL_GPIO_Init+0x30c>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a5f      	ldr	r2, [pc, #380]	; (80026f4 <HAL_GPIO_Init+0x30c>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <HAL_GPIO_Init+0x30c>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258a:	4a5b      	ldr	r2, [pc, #364]	; (80026f8 <HAL_GPIO_Init+0x310>)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_GPIO_Init+0x314>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d02b      	beq.n	800260e <HAL_GPIO_Init+0x226>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a51      	ldr	r2, [pc, #324]	; (8002700 <HAL_GPIO_Init+0x318>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d025      	beq.n	800260a <HAL_GPIO_Init+0x222>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a50      	ldr	r2, [pc, #320]	; (8002704 <HAL_GPIO_Init+0x31c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d01f      	beq.n	8002606 <HAL_GPIO_Init+0x21e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a4f      	ldr	r2, [pc, #316]	; (8002708 <HAL_GPIO_Init+0x320>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d019      	beq.n	8002602 <HAL_GPIO_Init+0x21a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4e      	ldr	r2, [pc, #312]	; (800270c <HAL_GPIO_Init+0x324>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d013      	beq.n	80025fe <HAL_GPIO_Init+0x216>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4d      	ldr	r2, [pc, #308]	; (8002710 <HAL_GPIO_Init+0x328>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00d      	beq.n	80025fa <HAL_GPIO_Init+0x212>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4c      	ldr	r2, [pc, #304]	; (8002714 <HAL_GPIO_Init+0x32c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <HAL_GPIO_Init+0x20e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4b      	ldr	r2, [pc, #300]	; (8002718 <HAL_GPIO_Init+0x330>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d101      	bne.n	80025f2 <HAL_GPIO_Init+0x20a>
 80025ee:	2307      	movs	r3, #7
 80025f0:	e00e      	b.n	8002610 <HAL_GPIO_Init+0x228>
 80025f2:	2308      	movs	r3, #8
 80025f4:	e00c      	b.n	8002610 <HAL_GPIO_Init+0x228>
 80025f6:	2306      	movs	r3, #6
 80025f8:	e00a      	b.n	8002610 <HAL_GPIO_Init+0x228>
 80025fa:	2305      	movs	r3, #5
 80025fc:	e008      	b.n	8002610 <HAL_GPIO_Init+0x228>
 80025fe:	2304      	movs	r3, #4
 8002600:	e006      	b.n	8002610 <HAL_GPIO_Init+0x228>
 8002602:	2303      	movs	r3, #3
 8002604:	e004      	b.n	8002610 <HAL_GPIO_Init+0x228>
 8002606:	2302      	movs	r3, #2
 8002608:	e002      	b.n	8002610 <HAL_GPIO_Init+0x228>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_GPIO_Init+0x228>
 800260e:	2300      	movs	r3, #0
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	f002 0203 	and.w	r2, r2, #3
 8002616:	0092      	lsls	r2, r2, #2
 8002618:	4093      	lsls	r3, r2
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002620:	4935      	ldr	r1, [pc, #212]	; (80026f8 <HAL_GPIO_Init+0x310>)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	089b      	lsrs	r3, r3, #2
 8002626:	3302      	adds	r3, #2
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800262e:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_GPIO_Init+0x334>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	43db      	mvns	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4013      	ands	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002652:	4a32      	ldr	r2, [pc, #200]	; (800271c <HAL_GPIO_Init+0x334>)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002658:	4b30      	ldr	r3, [pc, #192]	; (800271c <HAL_GPIO_Init+0x334>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800267c:	4a27      	ldr	r2, [pc, #156]	; (800271c <HAL_GPIO_Init+0x334>)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <HAL_GPIO_Init+0x334>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_GPIO_Init+0x334>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_GPIO_Init+0x334>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d0:	4a12      	ldr	r2, [pc, #72]	; (800271c <HAL_GPIO_Init+0x334>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3301      	adds	r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	f67f ae90 	bls.w	8002404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40013800 	.word	0x40013800
 80026fc:	40020000 	.word	0x40020000
 8002700:	40020400 	.word	0x40020400
 8002704:	40020800 	.word	0x40020800
 8002708:	40020c00 	.word	0x40020c00
 800270c:	40021000 	.word	0x40021000
 8002710:	40021400 	.word	0x40021400
 8002714:	40021800 	.word	0x40021800
 8002718:	40021c00 	.word	0x40021c00
 800271c:	40013c00 	.word	0x40013c00

08002720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	807b      	strh	r3, [r7, #2]
 800272c:	4613      	mov	r3, r2
 800272e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002730:	787b      	ldrb	r3, [r7, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800273c:	e003      	b.n	8002746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273e:	887b      	ldrh	r3, [r7, #2]
 8002740:	041a      	lsls	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	619a      	str	r2, [r3, #24]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e264      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d075      	beq.n	800285e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002772:	4ba3      	ldr	r3, [pc, #652]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d00c      	beq.n	8002798 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277e:	4ba0      	ldr	r3, [pc, #640]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002786:	2b08      	cmp	r3, #8
 8002788:	d112      	bne.n	80027b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278a:	4b9d      	ldr	r3, [pc, #628]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002796:	d10b      	bne.n	80027b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	4b99      	ldr	r3, [pc, #612]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d05b      	beq.n	800285c <HAL_RCC_OscConfig+0x108>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d157      	bne.n	800285c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e23f      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b8:	d106      	bne.n	80027c8 <HAL_RCC_OscConfig+0x74>
 80027ba:	4b91      	ldr	r3, [pc, #580]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a90      	ldr	r2, [pc, #576]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e01d      	b.n	8002804 <HAL_RCC_OscConfig+0xb0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x98>
 80027d2:	4b8b      	ldr	r3, [pc, #556]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a8a      	ldr	r2, [pc, #552]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a87      	ldr	r2, [pc, #540]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0xb0>
 80027ec:	4b84      	ldr	r3, [pc, #528]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a83      	ldr	r2, [pc, #524]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7fe fb34 	bl	8000e78 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe fb30 	bl	8000e78 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e204      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0xc0>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7fe fb20 	bl	8000e78 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283c:	f7fe fb1c 	bl	8000e78 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1f0      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0xe8>
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d063      	beq.n	8002932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286a:	4b65      	ldr	r3, [pc, #404]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002876:	4b62      	ldr	r3, [pc, #392]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287e:	2b08      	cmp	r3, #8
 8002880:	d11c      	bne.n	80028bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d116      	bne.n	80028bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_RCC_OscConfig+0x152>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e1c4      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4952      	ldr	r1, [pc, #328]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ba:	e03a      	b.n	8002932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c4:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <HAL_RCC_OscConfig+0x2b0>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe fad5 	bl	8000e78 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d2:	f7fe fad1 	bl	8000e78 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e1a5      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e4:	4b46      	ldr	r3, [pc, #280]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b43      	ldr	r3, [pc, #268]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4940      	ldr	r1, [pc, #256]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
 8002904:	e015      	b.n	8002932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCC_OscConfig+0x2b0>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fab4 	bl	8000e78 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002914:	f7fe fab0 	bl	8000e78 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e184      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d030      	beq.n	80029a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002946:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <HAL_RCC_OscConfig+0x2b4>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7fe fa94 	bl	8000e78 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002954:	f7fe fa90 	bl	8000e78 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e164      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x200>
 8002972:	e015      	b.n	80029a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <HAL_RCC_OscConfig+0x2b4>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7fe fa7d 	bl	8000e78 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002982:	f7fe fa79 	bl	8000e78 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e14d      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f0      	bne.n	8002982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a0 	beq.w	8002aee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10f      	bne.n	80029de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x2b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d121      	bne.n	8002a2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_RCC_OscConfig+0x2b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_RCC_OscConfig+0x2b8>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f6:	f7fe fa3f 	bl	8000e78 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	e011      	b.n	8002a22 <HAL_RCC_OscConfig+0x2ce>
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	42470000 	.word	0x42470000
 8002a08:	42470e80 	.word	0x42470e80
 8002a0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a10:	f7fe fa32 	bl	8000e78 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e106      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b85      	ldr	r3, [pc, #532]	; (8002c38 <HAL_RCC_OscConfig+0x4e4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2f0>
 8002a36:	4b81      	ldr	r3, [pc, #516]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a80      	ldr	r2, [pc, #512]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
 8002a42:	e01c      	b.n	8002a7e <HAL_RCC_OscConfig+0x32a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d10c      	bne.n	8002a66 <HAL_RCC_OscConfig+0x312>
 8002a4c:	4b7b      	ldr	r3, [pc, #492]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a7a      	ldr	r2, [pc, #488]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	4b78      	ldr	r3, [pc, #480]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a77      	ldr	r2, [pc, #476]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
 8002a64:	e00b      	b.n	8002a7e <HAL_RCC_OscConfig+0x32a>
 8002a66:	4b75      	ldr	r3, [pc, #468]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a74      	ldr	r2, [pc, #464]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	4b72      	ldr	r3, [pc, #456]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a71      	ldr	r2, [pc, #452]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d015      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7fe f9f7 	bl	8000e78 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe f9f3 	bl	8000e78 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0c5      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	4b65      	ldr	r3, [pc, #404]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ee      	beq.n	8002a8e <HAL_RCC_OscConfig+0x33a>
 8002ab0:	e014      	b.n	8002adc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7fe f9e1 	bl	8000e78 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7fe f9dd 	bl	8000e78 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0af      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad0:	4b5a      	ldr	r3, [pc, #360]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ee      	bne.n	8002aba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a55      	ldr	r2, [pc, #340]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 809b 	beq.w	8002c2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d05c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d141      	bne.n	8002b90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <HAL_RCC_OscConfig+0x4ec>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7fe f9b1 	bl	8000e78 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe f9ad 	bl	8000e78 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e081      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2c:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	019b      	lsls	r3, r3, #6
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	061b      	lsls	r3, r3, #24
 8002b5c:	4937      	ldr	r1, [pc, #220]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCC_OscConfig+0x4ec>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe f986 	bl	8000e78 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b70:	f7fe f982 	bl	8000e78 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e056      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x41c>
 8002b8e:	e04e      	b.n	8002c2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b90:	4b2b      	ldr	r3, [pc, #172]	; (8002c40 <HAL_RCC_OscConfig+0x4ec>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe f96f 	bl	8000e78 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe f96b 	bl	8000e78 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e03f      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb0:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f0      	bne.n	8002b9e <HAL_RCC_OscConfig+0x44a>
 8002bbc:	e037      	b.n	8002c2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e032      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <HAL_RCC_OscConfig+0x4e8>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d028      	beq.n	8002c2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d121      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d11a      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d111      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	3b01      	subs	r3, #1
 8002c14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	42470060 	.word	0x42470060

08002c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0cc      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c58:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d90c      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c66:	4b65      	ldr	r3, [pc, #404]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b63      	ldr	r3, [pc, #396]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0b8      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d020      	beq.n	8002cce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c98:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ca2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cb0:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a52      	ldr	r2, [pc, #328]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	494d      	ldr	r1, [pc, #308]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d044      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d119      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e07f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d003      	beq.n	8002d02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e067      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d22:	4b37      	ldr	r3, [pc, #220]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f023 0203 	bic.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	4934      	ldr	r1, [pc, #208]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d34:	f7fe f8a0 	bl	8000e78 <HAL_GetTick>
 8002d38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3a:	e00a      	b.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3c:	f7fe f89c 	bl	8000e78 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04f      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d52:	4b2b      	ldr	r3, [pc, #172]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 020c 	and.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d1eb      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d20c      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e032      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d008      	beq.n	8002daa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d98:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4916      	ldr	r1, [pc, #88]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d009      	beq.n	8002dca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	490e      	ldr	r1, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dca:	f000 f821 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	5ccb      	ldrb	r3, [r1, r3]
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fe96 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023c00 	.word	0x40023c00
 8002e00:	40023800 	.word	0x40023800
 8002e04:	080160a0 	.word	0x080160a0
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	20000004 	.word	0x20000004

08002e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	2300      	movs	r3, #0
 8002e22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e28:	4b67      	ldr	r3, [pc, #412]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d00d      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x40>
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	f200 80bd 	bhi.w	8002fb4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_RCC_GetSysClockFreq+0x34>
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d003      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e42:	e0b7      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e46:	60bb      	str	r3, [r7, #8]
       break;
 8002e48:	e0b7      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e4a:	4b61      	ldr	r3, [pc, #388]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e4c:	60bb      	str	r3, [r7, #8]
      break;
 8002e4e:	e0b4      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e50:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d04d      	beq.n	8002f02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e66:	4b58      	ldr	r3, [pc, #352]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	ea02 0800 	and.w	r8, r2, r0
 8002e7e:	ea03 0901 	and.w	r9, r3, r1
 8002e82:	4640      	mov	r0, r8
 8002e84:	4649      	mov	r1, r9
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	014b      	lsls	r3, r1, #5
 8002e90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e94:	0142      	lsls	r2, r0, #5
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	ebb0 0008 	subs.w	r0, r0, r8
 8002e9e:	eb61 0109 	sbc.w	r1, r1, r9
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	018b      	lsls	r3, r1, #6
 8002eac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002eb0:	0182      	lsls	r2, r0, #6
 8002eb2:	1a12      	subs	r2, r2, r0
 8002eb4:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb8:	f04f 0000 	mov.w	r0, #0
 8002ebc:	f04f 0100 	mov.w	r1, #0
 8002ec0:	00d9      	lsls	r1, r3, #3
 8002ec2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ec6:	00d0      	lsls	r0, r2, #3
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	eb12 0208 	adds.w	r2, r2, r8
 8002ed0:	eb43 0309 	adc.w	r3, r3, r9
 8002ed4:	f04f 0000 	mov.w	r0, #0
 8002ed8:	f04f 0100 	mov.w	r1, #0
 8002edc:	0259      	lsls	r1, r3, #9
 8002ede:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ee2:	0250      	lsls	r0, r2, #9
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4610      	mov	r0, r2
 8002eea:	4619      	mov	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	f7fd f9bc 	bl	8000270 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4613      	mov	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e04a      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	099b      	lsrs	r3, r3, #6
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f12:	f04f 0100 	mov.w	r1, #0
 8002f16:	ea02 0400 	and.w	r4, r2, r0
 8002f1a:	ea03 0501 	and.w	r5, r3, r1
 8002f1e:	4620      	mov	r0, r4
 8002f20:	4629      	mov	r1, r5
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	014b      	lsls	r3, r1, #5
 8002f2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f30:	0142      	lsls	r2, r0, #5
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	1b00      	subs	r0, r0, r4
 8002f38:	eb61 0105 	sbc.w	r1, r1, r5
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	018b      	lsls	r3, r1, #6
 8002f46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f4a:	0182      	lsls	r2, r0, #6
 8002f4c:	1a12      	subs	r2, r2, r0
 8002f4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	f04f 0100 	mov.w	r1, #0
 8002f5a:	00d9      	lsls	r1, r3, #3
 8002f5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f60:	00d0      	lsls	r0, r2, #3
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	1912      	adds	r2, r2, r4
 8002f68:	eb45 0303 	adc.w	r3, r5, r3
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	0299      	lsls	r1, r3, #10
 8002f76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f7a:	0290      	lsls	r0, r2, #10
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	461a      	mov	r2, r3
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	f7fd f970 	bl	8000270 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4613      	mov	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	f003 0303 	and.w	r3, r3, #3
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	60bb      	str	r3, [r7, #8]
      break;
 8002fb2:	e002      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fb6:	60bb      	str	r3, [r7, #8]
      break;
 8002fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fba:	68bb      	ldr	r3, [r7, #8]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	00f42400 	.word	0x00f42400
 8002fd0:	007a1200 	.word	0x007a1200

08002fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fda:	681b      	ldr	r3, [r3, #0]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	20000000 	.word	0x20000000

08002fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ff0:	f7ff fff0 	bl	8002fd4 <HAL_RCC_GetHCLKFreq>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	0a9b      	lsrs	r3, r3, #10
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003002:	5ccb      	ldrb	r3, [r1, r3]
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40023800 	.word	0x40023800
 8003010:	080160b0 	.word	0x080160b0

08003014 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	220f      	movs	r2, #15
 8003022:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003024:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_RCC_GetClockConfig+0x5c>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0203 	and.w	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_RCC_GetClockConfig+0x5c>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_RCC_GetClockConfig+0x5c>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003048:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_GetClockConfig+0x5c>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003056:	4b07      	ldr	r3, [pc, #28]	; (8003074 <HAL_RCC_GetClockConfig+0x60>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0207 	and.w	r2, r3, #7
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	601a      	str	r2, [r3, #0]
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	40023c00 	.word	0x40023c00

08003078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e07b      	b.n	8003182 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	2b00      	cmp	r3, #0
 8003090:	d108      	bne.n	80030a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800309a:	d009      	beq.n	80030b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	61da      	str	r2, [r3, #28]
 80030a2:	e005      	b.n	80030b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d106      	bne.n	80030d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fc9e 	bl	8000a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	431a      	orrs	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003134:	ea42 0103 	orr.w	r1, r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 0104 	and.w	r1, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	f003 0210 	and.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003170:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e041      	b.n	8003220 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d106      	bne.n	80031b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd fc73 	bl	8000a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3304      	adds	r3, #4
 80031c6:	4619      	mov	r1, r3
 80031c8:	4610      	mov	r0, r2
 80031ca:	f000 fa95 	bl	80036f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b01      	cmp	r3, #1
 800323a:	d001      	beq.n	8003240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e04e      	b.n	80032de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_TIM_Base_Start_IT+0xc4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d022      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d01d      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <HAL_TIM_Base_Start_IT+0xd8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0x80>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_TIM_Base_Start_IT+0xdc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d111      	bne.n	80032cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2b06      	cmp	r3, #6
 80032b8:	d010      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0201 	orr.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ca:	e007      	b.n	80032dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40000c00 	.word	0x40000c00
 80032fc:	40010400 	.word	0x40010400
 8003300:	40014000 	.word	0x40014000
 8003304:	40001800 	.word	0x40001800

08003308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d122      	bne.n	8003364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0202 	mvn.w	r2, #2
 8003334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f9b5 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f9a7 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f9b8 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b04      	cmp	r3, #4
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0204 	mvn.w	r2, #4
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2202      	movs	r2, #2
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f98b 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f97d 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f98e 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0208 	mvn.w	r2, #8
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2204      	movs	r2, #4
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f961 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f953 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f964 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b10      	cmp	r3, #16
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b10      	cmp	r3, #16
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0210 	mvn.w	r2, #16
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2208      	movs	r2, #8
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f937 	bl	80036ba <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f929 	bl	80036a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f93a 	bl	80036ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10e      	bne.n	800348c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b01      	cmp	r3, #1
 800347a:	d107      	bne.n	800348c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0201 	mvn.w	r2, #1
 8003484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7fd fa7c 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	2b80      	cmp	r3, #128	; 0x80
 8003498:	d10e      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	2b80      	cmp	r3, #128	; 0x80
 80034a6:	d107      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fae0 	bl	8003a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b40      	cmp	r3, #64	; 0x40
 80034c4:	d10e      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d0:	2b40      	cmp	r3, #64	; 0x40
 80034d2:	d107      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8ff 	bl	80036e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d107      	bne.n	8003510 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0220 	mvn.w	r2, #32
 8003508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 faaa 	bl	8003a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIM_ConfigClockSource+0x1c>
 8003530:	2302      	movs	r3, #2
 8003532:	e0b4      	b.n	800369e <HAL_TIM_ConfigClockSource+0x186>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800355a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800356c:	d03e      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0xd4>
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003572:	f200 8087 	bhi.w	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357a:	f000 8086 	beq.w	800368a <HAL_TIM_ConfigClockSource+0x172>
 800357e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003582:	d87f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003584:	2b70      	cmp	r3, #112	; 0x70
 8003586:	d01a      	beq.n	80035be <HAL_TIM_ConfigClockSource+0xa6>
 8003588:	2b70      	cmp	r3, #112	; 0x70
 800358a:	d87b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800358c:	2b60      	cmp	r3, #96	; 0x60
 800358e:	d050      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0x11a>
 8003590:	2b60      	cmp	r3, #96	; 0x60
 8003592:	d877      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 8003594:	2b50      	cmp	r3, #80	; 0x50
 8003596:	d03c      	beq.n	8003612 <HAL_TIM_ConfigClockSource+0xfa>
 8003598:	2b50      	cmp	r3, #80	; 0x50
 800359a:	d873      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 800359c:	2b40      	cmp	r3, #64	; 0x40
 800359e:	d058      	beq.n	8003652 <HAL_TIM_ConfigClockSource+0x13a>
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d86f      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035a4:	2b30      	cmp	r3, #48	; 0x30
 80035a6:	d064      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	2b30      	cmp	r3, #48	; 0x30
 80035aa:	d86b      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d060      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d867      	bhi.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05c      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d05a      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0x15a>
 80035bc:	e062      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6899      	ldr	r1, [r3, #8]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f000 f9ad 	bl	800392c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	609a      	str	r2, [r3, #8]
      break;
 80035ea:	e04f      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f000 f996 	bl	800392c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800360e:	609a      	str	r2, [r3, #8]
      break;
 8003610:	e03c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	461a      	mov	r2, r3
 8003620:	f000 f90a 	bl	8003838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2150      	movs	r1, #80	; 0x50
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f963 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003630:	e02c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	461a      	mov	r2, r3
 8003640:	f000 f929 	bl	8003896 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2160      	movs	r1, #96	; 0x60
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f953 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003650:	e01c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	461a      	mov	r2, r3
 8003660:	f000 f8ea 	bl	8003838 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	4618      	mov	r0, r3
 800366c:	f000 f943 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003670:	e00c      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 f93a 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 8003682:	e003      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
      break;
 8003688:	e000      	b.n	800368c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800368a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a6:	b480      	push	{r7}
 80036a8:	b083      	sub	sp, #12
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a40      	ldr	r2, [pc, #256]	; (800380c <TIM_Base_SetConfig+0x114>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d00f      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a3d      	ldr	r2, [pc, #244]	; (8003810 <TIM_Base_SetConfig+0x118>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00b      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3c      	ldr	r2, [pc, #240]	; (8003814 <TIM_Base_SetConfig+0x11c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d007      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3b      	ldr	r2, [pc, #236]	; (8003818 <TIM_Base_SetConfig+0x120>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d003      	beq.n	8003738 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3a      	ldr	r2, [pc, #232]	; (800381c <TIM_Base_SetConfig+0x124>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d108      	bne.n	800374a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <TIM_Base_SetConfig+0x114>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d02b      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003758:	d027      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <TIM_Base_SetConfig+0x118>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d023      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2b      	ldr	r2, [pc, #172]	; (8003814 <TIM_Base_SetConfig+0x11c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <TIM_Base_SetConfig+0x120>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01b      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a29      	ldr	r2, [pc, #164]	; (800381c <TIM_Base_SetConfig+0x124>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d017      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a28      	ldr	r2, [pc, #160]	; (8003820 <TIM_Base_SetConfig+0x128>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a27      	ldr	r2, [pc, #156]	; (8003824 <TIM_Base_SetConfig+0x12c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00f      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a26      	ldr	r2, [pc, #152]	; (8003828 <TIM_Base_SetConfig+0x130>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00b      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a25      	ldr	r2, [pc, #148]	; (800382c <TIM_Base_SetConfig+0x134>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a24      	ldr	r2, [pc, #144]	; (8003830 <TIM_Base_SetConfig+0x138>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d003      	beq.n	80037aa <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a23      	ldr	r2, [pc, #140]	; (8003834 <TIM_Base_SetConfig+0x13c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d108      	bne.n	80037bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a0a      	ldr	r2, [pc, #40]	; (800380c <TIM_Base_SetConfig+0x114>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_Base_SetConfig+0xf8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0c      	ldr	r2, [pc, #48]	; (800381c <TIM_Base_SetConfig+0x124>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	615a      	str	r2, [r3, #20]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40010400 	.word	0x40010400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800
 800382c:	40001800 	.word	0x40001800
 8003830:	40001c00 	.word	0x40001c00
 8003834:	40002000 	.word	0x40002000

08003838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0201 	bic.w	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f023 030a 	bic.w	r3, r3, #10
 8003874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	371c      	adds	r7, #28
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003896:	b480      	push	{r7}
 8003898:	b087      	sub	sp, #28
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f023 0210 	bic.w	r2, r3, #16
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	031b      	lsls	r3, r3, #12
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	621a      	str	r2, [r3, #32]
}
 80038ea:	bf00      	nop
 80038ec:	371c      	adds	r7, #28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	f043 0307 	orr.w	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	021a      	lsls	r2, r3, #8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	431a      	orrs	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4313      	orrs	r3, r2
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	609a      	str	r2, [r3, #8]
}
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003980:	2302      	movs	r3, #2
 8003982:	e05a      	b.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a21      	ldr	r2, [pc, #132]	; (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d0:	d01d      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1b      	ldr	r2, [pc, #108]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a17      	ldr	r2, [pc, #92]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10c      	bne.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40010400 	.word	0x40010400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40001800 	.word	0x40001800

08003a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003a92:	4ba0      	ldr	r3, [pc, #640]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003a94:	22c0      	movs	r2, #192	; 0xc0
 8003a96:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003a98:	4b9e      	ldr	r3, [pc, #632]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003a9a:	22a8      	movs	r2, #168	; 0xa8
 8003a9c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003a9e:	4b9d      	ldr	r3, [pc, #628]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8003aa4:	4b9b      	ldr	r3, [pc, #620]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003aaa:	4b9b      	ldr	r3, [pc, #620]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003aac:	22ff      	movs	r2, #255	; 0xff
 8003aae:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003ab0:	4b99      	ldr	r3, [pc, #612]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003ab2:	22ff      	movs	r2, #255	; 0xff
 8003ab4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003ab6:	4b98      	ldr	r3, [pc, #608]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003abc:	4b96      	ldr	r3, [pc, #600]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003ac2:	4b96      	ldr	r3, [pc, #600]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003ac4:	22c0      	movs	r2, #192	; 0xc0
 8003ac6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003ac8:	4b94      	ldr	r3, [pc, #592]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003aca:	22a8      	movs	r2, #168	; 0xa8
 8003acc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003ace:	4b93      	ldr	r3, [pc, #588]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003ad4:	4b91      	ldr	r3, [pc, #580]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003ada:	2100      	movs	r1, #0
 8003adc:	2000      	movs	r0, #0
 8003ade:	f004 fcc5 	bl	800846c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003ae2:	4b8c      	ldr	r3, [pc, #560]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	061a      	lsls	r2, r3, #24
 8003ae8:	4b8a      	ldr	r3, [pc, #552]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003aea:	785b      	ldrb	r3, [r3, #1]
 8003aec:	041b      	lsls	r3, r3, #16
 8003aee:	431a      	orrs	r2, r3
 8003af0:	4b88      	ldr	r3, [pc, #544]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003af2:	789b      	ldrb	r3, [r3, #2]
 8003af4:	021b      	lsls	r3, r3, #8
 8003af6:	4313      	orrs	r3, r2
 8003af8:	4a86      	ldr	r2, [pc, #536]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003afa:	78d2      	ldrb	r2, [r2, #3]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	061a      	lsls	r2, r3, #24
 8003b00:	4b84      	ldr	r3, [pc, #528]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	0619      	lsls	r1, r3, #24
 8003b06:	4b83      	ldr	r3, [pc, #524]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	4319      	orrs	r1, r3
 8003b0e:	4b81      	ldr	r3, [pc, #516]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b10:	789b      	ldrb	r3, [r3, #2]
 8003b12:	021b      	lsls	r3, r3, #8
 8003b14:	430b      	orrs	r3, r1
 8003b16:	497f      	ldr	r1, [pc, #508]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b18:	78c9      	ldrb	r1, [r1, #3]
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b22:	431a      	orrs	r2, r3
 8003b24:	4b7b      	ldr	r3, [pc, #492]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	0619      	lsls	r1, r3, #24
 8003b2a:	4b7a      	ldr	r3, [pc, #488]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	041b      	lsls	r3, r3, #16
 8003b30:	4319      	orrs	r1, r3
 8003b32:	4b78      	ldr	r3, [pc, #480]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b34:	789b      	ldrb	r3, [r3, #2]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	4976      	ldr	r1, [pc, #472]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b3c:	78c9      	ldrb	r1, [r1, #3]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	0a1b      	lsrs	r3, r3, #8
 8003b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b46:	431a      	orrs	r2, r3
 8003b48:	4b72      	ldr	r3, [pc, #456]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	0619      	lsls	r1, r3, #24
 8003b4e:	4b71      	ldr	r3, [pc, #452]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	041b      	lsls	r3, r3, #16
 8003b54:	4319      	orrs	r1, r3
 8003b56:	4b6f      	ldr	r3, [pc, #444]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b58:	789b      	ldrb	r3, [r3, #2]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	496d      	ldr	r1, [pc, #436]	; (8003d14 <MX_LWIP_Init+0x288>)
 8003b60:	78c9      	ldrb	r1, [r1, #3]
 8003b62:	430b      	orrs	r3, r1
 8003b64:	0e1b      	lsrs	r3, r3, #24
 8003b66:	4313      	orrs	r3, r2
 8003b68:	4a6d      	ldr	r2, [pc, #436]	; (8003d20 <MX_LWIP_Init+0x294>)
 8003b6a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003b6c:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	061a      	lsls	r2, r3, #24
 8003b72:	4b69      	ldr	r3, [pc, #420]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	4b67      	ldr	r3, [pc, #412]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003b7c:	789b      	ldrb	r3, [r3, #2]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	4313      	orrs	r3, r2
 8003b82:	4a65      	ldr	r2, [pc, #404]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003b84:	78d2      	ldrb	r2, [r2, #3]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	061a      	lsls	r2, r3, #24
 8003b8a:	4b63      	ldr	r3, [pc, #396]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	0619      	lsls	r1, r3, #24
 8003b90:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003b92:	785b      	ldrb	r3, [r3, #1]
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	4319      	orrs	r1, r3
 8003b98:	4b5f      	ldr	r3, [pc, #380]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003b9a:	789b      	ldrb	r3, [r3, #2]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	495d      	ldr	r1, [pc, #372]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003ba2:	78c9      	ldrb	r1, [r1, #3]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	021b      	lsls	r3, r3, #8
 8003ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bac:	431a      	orrs	r2, r3
 8003bae:	4b5a      	ldr	r3, [pc, #360]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	0619      	lsls	r1, r3, #24
 8003bb4:	4b58      	ldr	r3, [pc, #352]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	041b      	lsls	r3, r3, #16
 8003bba:	4319      	orrs	r1, r3
 8003bbc:	4b56      	ldr	r3, [pc, #344]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003bbe:	789b      	ldrb	r3, [r3, #2]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	4954      	ldr	r1, [pc, #336]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003bc6:	78c9      	ldrb	r1, [r1, #3]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	4b51      	ldr	r3, [pc, #324]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	0619      	lsls	r1, r3, #24
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003bda:	785b      	ldrb	r3, [r3, #1]
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	4319      	orrs	r1, r3
 8003be0:	4b4d      	ldr	r3, [pc, #308]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003be2:	789b      	ldrb	r3, [r3, #2]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	430b      	orrs	r3, r1
 8003be8:	494b      	ldr	r1, [pc, #300]	; (8003d18 <MX_LWIP_Init+0x28c>)
 8003bea:	78c9      	ldrb	r1, [r1, #3]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	0e1b      	lsrs	r3, r3, #24
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	4a4c      	ldr	r2, [pc, #304]	; (8003d24 <MX_LWIP_Init+0x298>)
 8003bf4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003bf6:	4b49      	ldr	r3, [pc, #292]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	061a      	lsls	r2, r3, #24
 8003bfc:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	4b45      	ldr	r3, [pc, #276]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c06:	789b      	ldrb	r3, [r3, #2]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	4a43      	ldr	r2, [pc, #268]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c0e:	78d2      	ldrb	r2, [r2, #3]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	061a      	lsls	r2, r3, #24
 8003c14:	4b41      	ldr	r3, [pc, #260]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	0619      	lsls	r1, r3, #24
 8003c1a:	4b40      	ldr	r3, [pc, #256]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	041b      	lsls	r3, r3, #16
 8003c20:	4319      	orrs	r1, r3
 8003c22:	4b3e      	ldr	r3, [pc, #248]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c24:	789b      	ldrb	r3, [r3, #2]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	430b      	orrs	r3, r1
 8003c2a:	493c      	ldr	r1, [pc, #240]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c2c:	78c9      	ldrb	r1, [r1, #3]
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c36:	431a      	orrs	r2, r3
 8003c38:	4b38      	ldr	r3, [pc, #224]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	0619      	lsls	r1, r3, #24
 8003c3e:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c40:	785b      	ldrb	r3, [r3, #1]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	4319      	orrs	r1, r3
 8003c46:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c48:	789b      	ldrb	r3, [r3, #2]
 8003c4a:	021b      	lsls	r3, r3, #8
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	4933      	ldr	r1, [pc, #204]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c50:	78c9      	ldrb	r1, [r1, #3]
 8003c52:	430b      	orrs	r3, r1
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	0619      	lsls	r1, r3, #24
 8003c62:	4b2e      	ldr	r3, [pc, #184]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	4319      	orrs	r1, r3
 8003c6a:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c6c:	789b      	ldrb	r3, [r3, #2]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	430b      	orrs	r3, r1
 8003c72:	492a      	ldr	r1, [pc, #168]	; (8003d1c <MX_LWIP_Init+0x290>)
 8003c74:	78c9      	ldrb	r1, [r1, #3]
 8003c76:	430b      	orrs	r3, r1
 8003c78:	0e1b      	lsrs	r3, r3, #24
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	4a2a      	ldr	r2, [pc, #168]	; (8003d28 <MX_LWIP_Init+0x29c>)
 8003c7e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <MX_LWIP_Init+0x2a0>)
 8003c82:	9302      	str	r3, [sp, #8]
 8003c84:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <MX_LWIP_Init+0x2a4>)
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <MX_LWIP_Init+0x29c>)
 8003c8e:	4a25      	ldr	r2, [pc, #148]	; (8003d24 <MX_LWIP_Init+0x298>)
 8003c90:	4923      	ldr	r1, [pc, #140]	; (8003d20 <MX_LWIP_Init+0x294>)
 8003c92:	4828      	ldr	r0, [pc, #160]	; (8003d34 <MX_LWIP_Init+0x2a8>)
 8003c94:	f005 f96e 	bl	8008f74 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003c98:	4826      	ldr	r0, [pc, #152]	; (8003d34 <MX_LWIP_Init+0x2a8>)
 8003c9a:	f005 fb1d 	bl	80092d8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003c9e:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <MX_LWIP_Init+0x2a8>)
 8003ca0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003cb0:	4820      	ldr	r0, [pc, #128]	; (8003d34 <MX_LWIP_Init+0x2a8>)
 8003cb2:	f005 fb21 	bl	80092f8 <netif_set_up>
 8003cb6:	e002      	b.n	8003cbe <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003cb8:	481e      	ldr	r0, [pc, #120]	; (8003d34 <MX_LWIP_Init+0x2a8>)
 8003cba:	f005 fb89 	bl	80093d0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003cbe:	491e      	ldr	r1, [pc, #120]	; (8003d38 <MX_LWIP_Init+0x2ac>)
 8003cc0:	481c      	ldr	r0, [pc, #112]	; (8003d34 <MX_LWIP_Init+0x2a8>)
 8003cc2:	f005 fc1b 	bl	80094fc <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2101      	movs	r1, #1
 8003cca:	2001      	movs	r0, #1
 8003ccc:	f000 feab 	bl	8004a26 <osSemaphoreNew>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4a1a      	ldr	r2, [pc, #104]	; (8003d3c <MX_LWIP_Init+0x2b0>)
 8003cd4:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <MX_LWIP_Init+0x2b4>)
 8003cd8:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <MX_LWIP_Init+0x2a8>)
 8003cda:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003cdc:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <MX_LWIP_Init+0x2b0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a17      	ldr	r2, [pc, #92]	; (8003d40 <MX_LWIP_Init+0x2b4>)
 8003ce2:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003ce4:	2224      	movs	r2, #36	; 0x24
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4816      	ldr	r0, [pc, #88]	; (8003d44 <MX_LWIP_Init+0x2b8>)
 8003cea:	f00e fcd7 	bl	801269c <memset>
  attributes.name = "LinkThr";
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <MX_LWIP_Init+0x2b8>)
 8003cf0:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <MX_LWIP_Init+0x2bc>)
 8003cf2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003cf4:	4b13      	ldr	r3, [pc, #76]	; (8003d44 <MX_LWIP_Init+0x2b8>)
 8003cf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cfa:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <MX_LWIP_Init+0x2b8>)
 8003cfe:	2210      	movs	r2, #16
 8003d00:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8003d02:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <MX_LWIP_Init+0x2b8>)
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <MX_LWIP_Init+0x2b4>)
 8003d06:	4811      	ldr	r0, [pc, #68]	; (8003d4c <MX_LWIP_Init+0x2c0>)
 8003d08:	f000 fcd1 	bl	80046ae <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	2000b3ac 	.word	0x2000b3ac
 8003d18:	2000b3a8 	.word	0x2000b3a8
 8003d1c:	2000b348 	.word	0x2000b348
 8003d20:	2000b3a4 	.word	0x2000b3a4
 8003d24:	2000b3b0 	.word	0x2000b3b0
 8003d28:	2000b3b4 	.word	0x2000b3b4
 8003d2c:	080083a9 	.word	0x080083a9
 8003d30:	08004379 	.word	0x08004379
 8003d34:	2000b370 	.word	0x2000b370
 8003d38:	0800445d 	.word	0x0800445d
 8003d3c:	200000a0 	.word	0x200000a0
 8003d40:	2000b340 	.word	0x2000b340
 8003d44:	2000b34c 	.word	0x2000b34c
 8003d48:	08013578 	.word	0x08013578
 8003d4c:	080043e5 	.word	0x080043e5

08003d50 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08e      	sub	sp, #56	; 0x38
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a4a      	ldr	r2, [pc, #296]	; (8003e98 <HAL_ETH_MspInit+0x148>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	f040 808d 	bne.w	8003e8e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003d74:	2300      	movs	r3, #0
 8003d76:	623b      	str	r3, [r7, #32]
 8003d78:	4b48      	ldr	r3, [pc, #288]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	4a47      	ldr	r2, [pc, #284]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d82:	6313      	str	r3, [r2, #48]	; 0x30
 8003d84:	4b45      	ldr	r3, [pc, #276]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8c:	623b      	str	r3, [r7, #32]
 8003d8e:	6a3b      	ldr	r3, [r7, #32]
 8003d90:	2300      	movs	r3, #0
 8003d92:	61fb      	str	r3, [r7, #28]
 8003d94:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003d9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003da0:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	2300      	movs	r3, #0
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	4b3a      	ldr	r3, [pc, #232]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	4a39      	ldr	r2, [pc, #228]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003db6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dba:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbc:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	4b33      	ldr	r3, [pc, #204]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	4a32      	ldr	r2, [pc, #200]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003dd2:	f043 0304 	orr.w	r3, r3, #4
 8003dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd8:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	4a2b      	ldr	r2, [pc, #172]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003dee:	f043 0301 	orr.w	r3, r3, #1
 8003df2:	6313      	str	r3, [r2, #48]	; 0x30
 8003df4:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	4a24      	ldr	r2, [pc, #144]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003e0a:	f043 0302 	orr.w	r3, r3, #2
 8003e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e10:	4b22      	ldr	r3, [pc, #136]	; (8003e9c <HAL_ETH_MspInit+0x14c>)
 8003e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003e1c:	2332      	movs	r3, #50	; 0x32
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e20:	2302      	movs	r3, #2
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e2c:	230b      	movs	r3, #11
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e34:	4619      	mov	r1, r3
 8003e36:	481a      	ldr	r0, [pc, #104]	; (8003ea0 <HAL_ETH_MspInit+0x150>)
 8003e38:	f7fe fad6 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003e3c:	2386      	movs	r3, #134	; 0x86
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e40:	2302      	movs	r3, #2
 8003e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e4c:	230b      	movs	r3, #11
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e54:	4619      	mov	r1, r3
 8003e56:	4813      	ldr	r0, [pc, #76]	; (8003ea4 <HAL_ETH_MspInit+0x154>)
 8003e58:	f7fe fac6 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003e5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e62:	2302      	movs	r3, #2
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e6e:	230b      	movs	r3, #11
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e76:	4619      	mov	r1, r3
 8003e78:	480b      	ldr	r0, [pc, #44]	; (8003ea8 <HAL_ETH_MspInit+0x158>)
 8003e7a:	f7fe fab5 	bl	80023e8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2105      	movs	r1, #5
 8003e82:	203d      	movs	r0, #61	; 0x3d
 8003e84:	f7fd f8e0 	bl	8001048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003e88:	203d      	movs	r0, #61	; 0x3d
 8003e8a:	f7fd f8f9 	bl	8001080 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3738      	adds	r7, #56	; 0x38
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40028000 	.word	0x40028000
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	40020800 	.word	0x40020800
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	40020400 	.word	0x40020400

08003eac <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <HAL_ETH_RxCpltCallback+0x1c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fe8f 	bl	8004bdc <osSemaphoreRelease>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200000a4 	.word	0x200000a4

08003ecc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b090      	sub	sp, #64	; 0x40
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003ed8:	4b5d      	ldr	r3, [pc, #372]	; (8004050 <low_level_init+0x184>)
 8003eda:	4a5e      	ldr	r2, [pc, #376]	; (8004054 <low_level_init+0x188>)
 8003edc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003ede:	4b5c      	ldr	r3, [pc, #368]	; (8004050 <low_level_init+0x184>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003ee4:	4b5a      	ldr	r3, [pc, #360]	; (8004050 <low_level_init+0x184>)
 8003ee6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003eea:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003eec:	4b58      	ldr	r3, [pc, #352]	; (8004050 <low_level_init+0x184>)
 8003eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ef2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003ef4:	4b56      	ldr	r3, [pc, #344]	; (8004050 <low_level_init+0x184>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003efa:	2300      	movs	r3, #0
 8003efc:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8003efe:	2380      	movs	r3, #128	; 0x80
 8003f00:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8003f02:	23e1      	movs	r3, #225	; 0xe1
 8003f04:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8003f12:	4a4f      	ldr	r2, [pc, #316]	; (8004050 <low_level_init+0x184>)
 8003f14:	f107 030c 	add.w	r3, r7, #12
 8003f18:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003f1a:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <low_level_init+0x184>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003f20:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <low_level_init+0x184>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003f26:	4b4a      	ldr	r3, [pc, #296]	; (8004050 <low_level_init+0x184>)
 8003f28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003f2c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003f2e:	4848      	ldr	r0, [pc, #288]	; (8004050 <low_level_init+0x184>)
 8003f30:	f7fd f8b4 	bl	800109c <HAL_ETH_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003f3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d108      	bne.n	8003f54 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003f54:	2304      	movs	r3, #4
 8003f56:	4a40      	ldr	r2, [pc, #256]	; (8004058 <low_level_init+0x18c>)
 8003f58:	4940      	ldr	r1, [pc, #256]	; (800405c <low_level_init+0x190>)
 8003f5a:	483d      	ldr	r0, [pc, #244]	; (8004050 <low_level_init+0x184>)
 8003f5c:	f7fd fa3a 	bl	80013d4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003f60:	2304      	movs	r3, #4
 8003f62:	4a3f      	ldr	r2, [pc, #252]	; (8004060 <low_level_init+0x194>)
 8003f64:	493f      	ldr	r1, [pc, #252]	; (8004064 <low_level_init+0x198>)
 8003f66:	483a      	ldr	r0, [pc, #232]	; (8004050 <low_level_init+0x184>)
 8003f68:	f7fd fa9d 	bl	80014a6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2206      	movs	r2, #6
 8003f70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003f74:	4b36      	ldr	r3, [pc, #216]	; (8004050 <low_level_init+0x184>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003f80:	4b33      	ldr	r3, [pc, #204]	; (8004050 <low_level_init+0x184>)
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	785a      	ldrb	r2, [r3, #1]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003f8c:	4b30      	ldr	r3, [pc, #192]	; (8004050 <low_level_init+0x184>)
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	789a      	ldrb	r2, [r3, #2]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003f98:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <low_level_init+0x184>)
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	78da      	ldrb	r2, [r3, #3]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003fa4:	4b2a      	ldr	r3, [pc, #168]	; (8004050 <low_level_init+0x184>)
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	791a      	ldrb	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <low_level_init+0x184>)
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	795a      	ldrb	r2, [r3, #5]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003fc2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003fca:	f043 030a 	orr.w	r3, r3, #10
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2101      	movs	r1, #1
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f000 fd23 	bl	8004a26 <osSemaphoreNew>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4a21      	ldr	r2, [pc, #132]	; (8004068 <low_level_init+0x19c>)
 8003fe4:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003fe6:	f107 0314 	add.w	r3, r7, #20
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f00e fb54 	bl	801269c <memset>
  attributes.name = "EthIf";
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	; (800406c <low_level_init+0x1a0>)
 8003ff6:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003ff8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8003ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8003ffe:	2330      	movs	r3, #48	; 0x30
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	461a      	mov	r2, r3
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4819      	ldr	r0, [pc, #100]	; (8004070 <low_level_init+0x1a4>)
 800400c:	f000 fb4f 	bl	80046ae <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004010:	480f      	ldr	r0, [pc, #60]	; (8004050 <low_level_init+0x184>)
 8004012:	f7fd fd70 	bl	8001af6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004016:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800401a:	461a      	mov	r2, r3
 800401c:	211d      	movs	r1, #29
 800401e:	480c      	ldr	r0, [pc, #48]	; (8004050 <low_level_init+0x184>)
 8004020:	f7fd fc9b 	bl	800195a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	f043 030b 	orr.w	r3, r3, #11
 800402a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	461a      	mov	r2, r3
 8004030:	211d      	movs	r1, #29
 8004032:	4807      	ldr	r0, [pc, #28]	; (8004050 <low_level_init+0x184>)
 8004034:	f7fd fcf9 	bl	8001a2a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004038:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800403c:	461a      	mov	r2, r3
 800403e:	211d      	movs	r1, #29
 8004040:	4803      	ldr	r0, [pc, #12]	; (8004050 <low_level_init+0x184>)
 8004042:	f7fd fc8a 	bl	800195a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004046:	bf00      	nop
 8004048:	3740      	adds	r7, #64	; 0x40
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	2000cc88 	.word	0x2000cc88
 8004054:	40028000 	.word	0x40028000
 8004058:	2000ccd0 	.word	0x2000ccd0
 800405c:	2000b3b8 	.word	0x2000b3b8
 8004060:	2000b438 	.word	0x2000b438
 8004064:	2000cc08 	.word	0x2000cc08
 8004068:	200000a4 	.word	0x200000a4
 800406c:	08013580 	.word	0x08013580
 8004070:	08004319 	.word	0x08004319

08004074 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08a      	sub	sp, #40	; 0x28
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800407e:	4b4b      	ldr	r3, [pc, #300]	; (80041ac <low_level_output+0x138>)
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004096:	4b45      	ldr	r3, [pc, #276]	; (80041ac <low_level_output+0x138>)
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	e05a      	b.n	800415c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	da03      	bge.n	80040b6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80040ae:	23f8      	movs	r3, #248	; 0xf8
 80040b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80040b4:	e05c      	b.n	8004170 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	895b      	ldrh	r3, [r3, #10]
 80040ba:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80040c0:	e02f      	b.n	8004122 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	18d0      	adds	r0, r2, r3
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	18d1      	adds	r1, r2, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80040d6:	3304      	adds	r3, #4
 80040d8:	461a      	mov	r2, r3
 80040da:	f00e fad1 	bl	8012680 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	da03      	bge.n	80040f4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80040ec:	23f8      	movs	r3, #248	; 0xf8
 80040ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80040f2:	e03d      	b.n	8004170 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004104:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004110:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800411c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800412c:	4293      	cmp	r3, r2
 800412e:	d8c8      	bhi.n	80040c2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	18d0      	adds	r0, r2, r3
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4619      	mov	r1, r3
 8004142:	f00e fa9d 	bl	8012680 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	623b      	str	r3, [r7, #32]
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1a1      	bne.n	80040a6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004162:	6979      	ldr	r1, [r7, #20]
 8004164:	4811      	ldr	r0, [pc, #68]	; (80041ac <low_level_output+0x138>)
 8004166:	f7fd fa0b 	bl	8001580 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004170:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <low_level_output+0x138>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004178:	3314      	adds	r3, #20
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00d      	beq.n	80041a0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <low_level_output+0x138>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418c:	3314      	adds	r3, #20
 800418e:	2220      	movs	r2, #32
 8004190:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <low_level_output+0x138>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419a:	3304      	adds	r3, #4
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80041a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3728      	adds	r7, #40	; 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	2000cc88 	.word	0x2000cc88

080041b0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08c      	sub	sp, #48	; 0x30
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80041d4:	484f      	ldr	r0, [pc, #316]	; (8004314 <low_level_input+0x164>)
 80041d6:	f7fd fabd 	bl	8001754 <HAL_ETH_GetReceivedFrame_IT>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <low_level_input+0x34>

    return NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e092      	b.n	800430a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80041e4:	4b4b      	ldr	r3, [pc, #300]	; (8004314 <low_level_input+0x164>)
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80041ea:	4b4a      	ldr	r3, [pc, #296]	; (8004314 <low_level_input+0x164>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80041f0:	89fb      	ldrh	r3, [r7, #14]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80041f6:	89fb      	ldrh	r3, [r7, #14]
 80041f8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80041fc:	4619      	mov	r1, r3
 80041fe:	2000      	movs	r0, #0
 8004200:	f005 fa46 	bl	8009690 <pbuf_alloc>
 8004204:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d04b      	beq.n	80042a4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800420c:	4b41      	ldr	r3, [pc, #260]	; (8004314 <low_level_input+0x164>)
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
 800421a:	e040      	b.n	800429e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800421c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421e:	895b      	ldrh	r3, [r3, #10]
 8004220:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004226:	e021      	b.n	800426c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	18d0      	adds	r0, r2, r3
 8004230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	18d1      	adds	r1, r2, r3
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800423c:	3304      	adds	r3, #4
 800423e:	461a      	mov	r2, r3
 8004240:	f00e fa1e 	bl	8012680 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004250:	69fa      	ldr	r2, [r7, #28]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4413      	add	r3, r2
 8004256:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800425a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004266:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	4413      	add	r3, r2
 8004272:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004276:	4293      	cmp	r3, r2
 8004278:	d8d6      	bhi.n	8004228 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	18d0      	adds	r0, r2, r3
 8004282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4619      	mov	r1, r3
 800428c:	f00e f9f8 	bl	8012680 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	4413      	add	r3, r2
 8004296:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1bb      	bne.n	800421c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <low_level_input+0x164>)
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	e00b      	b.n	80042c8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3301      	adds	r3, #1
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	4b12      	ldr	r3, [pc, #72]	; (8004314 <low_level_input+0x164>)
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d3ee      	bcc.n	80042b0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <low_level_input+0x164>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <low_level_input+0x164>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e0:	3314      	adds	r3, #20
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <low_level_input+0x164>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f4:	3314      	adds	r3, #20
 80042f6:	2280      	movs	r2, #128	; 0x80
 80042f8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <low_level_input+0x164>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004302:	3308      	adds	r3, #8
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800430a:	4618      	mov	r0, r3
 800430c:	3730      	adds	r7, #48	; 0x30
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	2000cc88 	.word	0x2000cc88

08004318 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <ethernetif_input+0x58>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f04f 31ff 	mov.w	r1, #4294967295
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fc03 	bl	8004b38 <osSemaphoreAcquire>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f5      	bne.n	8004324 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004338:	480e      	ldr	r0, [pc, #56]	; (8004374 <ethernetif_input+0x5c>)
 800433a:	f00d ff0b 	bl	8012154 <sys_mutex_lock>
        p = low_level_input( netif );
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f7ff ff36 	bl	80041b0 <low_level_input>
 8004344:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	68b8      	ldr	r0, [r7, #8]
 8004354:	4798      	blx	r3
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800435c:	68b8      	ldr	r0, [r7, #8]
 800435e:	f005 fc7b 	bl	8009c58 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004362:	4804      	ldr	r0, [pc, #16]	; (8004374 <ethernetif_input+0x5c>)
 8004364:	f00d ff05 	bl	8012172 <sys_mutex_unlock>
      } while(p!=NULL);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e4      	bne.n	8004338 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800436e:	e7d9      	b.n	8004324 <ethernetif_input+0xc>
 8004370:	200000a4 	.word	0x200000a4
 8004374:	2000e4e0 	.word	0x2000e4e0

08004378 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <ethernetif_init+0x1c>
 8004386:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <ethernetif_init+0x48>)
 8004388:	f44f 720c 	mov.w	r2, #560	; 0x230
 800438c:	490d      	ldr	r1, [pc, #52]	; (80043c4 <ethernetif_init+0x4c>)
 800438e:	480e      	ldr	r0, [pc, #56]	; (80043c8 <ethernetif_init+0x50>)
 8004390:	f00e fd24 	bl	8012ddc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2273      	movs	r2, #115	; 0x73
 8004398:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2274      	movs	r2, #116	; 0x74
 80043a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <ethernetif_init+0x54>)
 80043a8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a08      	ldr	r2, [pc, #32]	; (80043d0 <ethernetif_init+0x58>)
 80043ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff fd8b 	bl	8003ecc <low_level_init>

  return ERR_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	08013588 	.word	0x08013588
 80043c4:	080135a4 	.word	0x080135a4
 80043c8:	080135b4 	.word	0x080135b4
 80043cc:	0801033d 	.word	0x0801033d
 80043d0:	08004075 	.word	0x08004075

080043d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80043d8:	f7fc fd4e 	bl	8000e78 <HAL_GetTick>
 80043dc:	4603      	mov	r3, r0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80043f4:	f107 0308 	add.w	r3, r7, #8
 80043f8:	461a      	mov	r2, r3
 80043fa:	2101      	movs	r1, #1
 80043fc:	4816      	ldr	r0, [pc, #88]	; (8004458 <ethernetif_set_link+0x74>)
 80043fe:	f7fd faac 	bl	800195a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d108      	bne.n	800442c <ethernetif_set_link+0x48>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f005 f805 	bl	8009434 <netif_set_link_up>
 800442a:	e011      	b.n	8004450 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004434:	089b      	lsrs	r3, r3, #2
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <ethernetif_set_link+0x6c>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f005 f826 	bl	800949c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004450:	20c8      	movs	r0, #200	; 0xc8
 8004452:	f000 f9bf 	bl	80047d4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004456:	e7cd      	b.n	80043f4 <ethernetif_set_link+0x10>
 8004458:	2000cc88 	.word	0x2000cc88

0800445c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004472:	089b      	lsrs	r3, r3, #2
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d05d      	beq.n	800453a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800447e:	4b34      	ldr	r3, [pc, #208]	; (8004550 <ethernetif_update_config+0xf4>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d03f      	beq.n	8004506 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004486:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800448a:	2100      	movs	r1, #0
 800448c:	4830      	ldr	r0, [pc, #192]	; (8004550 <ethernetif_update_config+0xf4>)
 800448e:	f7fd facc 	bl	8001a2a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004492:	f7fc fcf1 	bl	8000e78 <HAL_GetTick>
 8004496:	4603      	mov	r3, r0
 8004498:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800449a:	f107 0308 	add.w	r3, r7, #8
 800449e:	461a      	mov	r2, r3
 80044a0:	2101      	movs	r1, #1
 80044a2:	482b      	ldr	r0, [pc, #172]	; (8004550 <ethernetif_update_config+0xf4>)
 80044a4:	f7fd fa59 	bl	800195a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80044a8:	f7fc fce6 	bl	8000e78 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044b6:	d828      	bhi.n	800450a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0eb      	beq.n	800449a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80044c2:	f107 0308 	add.w	r3, r7, #8
 80044c6:	461a      	mov	r2, r3
 80044c8:	2110      	movs	r1, #16
 80044ca:	4821      	ldr	r0, [pc, #132]	; (8004550 <ethernetif_update_config+0xf4>)
 80044cc:	f7fd fa45 	bl	800195a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d004      	beq.n	80044e4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80044da:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <ethernetif_update_config+0xf4>)
 80044dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044e0:	60da      	str	r2, [r3, #12]
 80044e2:	e002      	b.n	80044ea <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80044e4:	4b1a      	ldr	r3, [pc, #104]	; (8004550 <ethernetif_update_config+0xf4>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80044f4:	4b16      	ldr	r3, [pc, #88]	; (8004550 <ethernetif_update_config+0xf4>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
 80044fa:	e016      	b.n	800452a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80044fc:	4b14      	ldr	r3, [pc, #80]	; (8004550 <ethernetif_update_config+0xf4>)
 80044fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	e011      	b.n	800452a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <ethernetif_update_config+0xb0>
          goto error;
 800450a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800450c:	4b10      	ldr	r3, [pc, #64]	; (8004550 <ethernetif_update_config+0xf4>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <ethernetif_update_config+0xf4>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800451c:	4313      	orrs	r3, r2
 800451e:	b29b      	uxth	r3, r3
 8004520:	461a      	mov	r2, r3
 8004522:	2100      	movs	r1, #0
 8004524:	480a      	ldr	r0, [pc, #40]	; (8004550 <ethernetif_update_config+0xf4>)
 8004526:	f7fd fa80 	bl	8001a2a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800452a:	2100      	movs	r1, #0
 800452c:	4808      	ldr	r0, [pc, #32]	; (8004550 <ethernetif_update_config+0xf4>)
 800452e:	f7fd fb41 	bl	8001bb4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004532:	4807      	ldr	r0, [pc, #28]	; (8004550 <ethernetif_update_config+0xf4>)
 8004534:	f7fd fadf 	bl	8001af6 <HAL_ETH_Start>
 8004538:	e002      	b.n	8004540 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800453a:	4805      	ldr	r0, [pc, #20]	; (8004550 <ethernetif_update_config+0xf4>)
 800453c:	f7fd fb0a 	bl	8001b54 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f807 	bl	8004554 <ethernetif_notify_conn_changed>
}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	2000cc88 	.word	0x2000cc88

08004554 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <__NVIC_SetPriority>:
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004578:	2b00      	cmp	r3, #0
 800457a:	db0a      	blt.n	8004592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	490c      	ldr	r1, [pc, #48]	; (80045b4 <__NVIC_SetPriority+0x4c>)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	0112      	lsls	r2, r2, #4
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	440b      	add	r3, r1
 800458c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004590:	e00a      	b.n	80045a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	4908      	ldr	r1, [pc, #32]	; (80045b8 <__NVIC_SetPriority+0x50>)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	3b04      	subs	r3, #4
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	440b      	add	r3, r1
 80045a6:	761a      	strb	r2, [r3, #24]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000e100 	.word	0xe000e100
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <SysTick_Handler+0x1c>)
 80045c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80045c4:	f002 fc96 	bl	8006ef4 <xTaskGetSchedulerState>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d001      	beq.n	80045d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80045ce:	f003 fb7b 	bl	8007cc8 <xPortSysTickHandler>
  }
}
 80045d2:	bf00      	nop
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000e010 	.word	0xe000e010

080045dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045e0:	2100      	movs	r1, #0
 80045e2:	f06f 0004 	mvn.w	r0, #4
 80045e6:	f7ff ffbf 	bl	8004568 <__NVIC_SetPriority>
#endif
}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f6:	f3ef 8305 	mrs	r3, IPSR
 80045fa:	603b      	str	r3, [r7, #0]
  return(result);
 80045fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004602:	f06f 0305 	mvn.w	r3, #5
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	e00c      	b.n	8004624 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800460a:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <osKernelInitialize+0x44>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d105      	bne.n	800461e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004612:	4b08      	ldr	r3, [pc, #32]	; (8004634 <osKernelInitialize+0x44>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004618:	2300      	movs	r3, #0
 800461a:	607b      	str	r3, [r7, #4]
 800461c:	e002      	b.n	8004624 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800461e:	f04f 33ff 	mov.w	r3, #4294967295
 8004622:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004624:	687b      	ldr	r3, [r7, #4]
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	200000a8 	.word	0x200000a8

08004638 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800463e:	f3ef 8305 	mrs	r3, IPSR
 8004642:	603b      	str	r3, [r7, #0]
  return(result);
 8004644:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <osKernelStart+0x1a>
    stat = osErrorISR;
 800464a:	f06f 0305 	mvn.w	r3, #5
 800464e:	607b      	str	r3, [r7, #4]
 8004650:	e010      	b.n	8004674 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004652:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <osKernelStart+0x48>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d109      	bne.n	800466e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800465a:	f7ff ffbf 	bl	80045dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <osKernelStart+0x48>)
 8004660:	2202      	movs	r2, #2
 8004662:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004664:	f001 ffc8 	bl	80065f8 <vTaskStartScheduler>
      stat = osOK;
 8004668:	2300      	movs	r3, #0
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	e002      	b.n	8004674 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004674:	687b      	ldr	r3, [r7, #4]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	200000a8 	.word	0x200000a8

08004684 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468a:	f3ef 8305 	mrs	r3, IPSR
 800468e:	603b      	str	r3, [r7, #0]
  return(result);
 8004690:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004696:	f002 f8db 	bl	8006850 <xTaskGetTickCountFromISR>
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	e002      	b.n	80046a4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800469e:	f002 f8c7 	bl	8006830 <xTaskGetTickCount>
 80046a2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80046a4:	687b      	ldr	r3, [r7, #4]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b08e      	sub	sp, #56	; 0x38
 80046b2:	af04      	add	r7, sp, #16
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046be:	f3ef 8305 	mrs	r3, IPSR
 80046c2:	617b      	str	r3, [r7, #20]
  return(result);
 80046c4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d17f      	bne.n	80047ca <osThreadNew+0x11c>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d07c      	beq.n	80047ca <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80046d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046d6:	2318      	movs	r3, #24
 80046d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80046de:	f04f 33ff 	mov.w	r3, #4294967295
 80046e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d045      	beq.n	8004776 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <osThreadNew+0x4a>
        name = attr->name;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <osThreadNew+0x70>
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2b38      	cmp	r3, #56	; 0x38
 8004710:	d805      	bhi.n	800471e <osThreadNew+0x70>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <osThreadNew+0x74>
        return (NULL);
 800471e:	2300      	movs	r3, #0
 8004720:	e054      	b.n	80047cc <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	089b      	lsrs	r3, r3, #2
 8004730:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00e      	beq.n	8004758 <osThreadNew+0xaa>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2bbb      	cmp	r3, #187	; 0xbb
 8004740:	d90a      	bls.n	8004758 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004746:	2b00      	cmp	r3, #0
 8004748:	d006      	beq.n	8004758 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <osThreadNew+0xaa>
        mem = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e010      	b.n	800477a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10c      	bne.n	800477a <osThreadNew+0xcc>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d108      	bne.n	800477a <osThreadNew+0xcc>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <osThreadNew+0xcc>
          mem = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e001      	b.n	800477a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d110      	bne.n	80047a2 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004788:	9202      	str	r2, [sp, #8]
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	6a3a      	ldr	r2, [r7, #32]
 8004794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f001 fd42 	bl	8006220 <xTaskCreateStatic>
 800479c:	4603      	mov	r3, r0
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	e013      	b.n	80047ca <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d110      	bne.n	80047ca <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	f107 0310 	add.w	r3, r7, #16
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f001 fd8d 	bl	80062da <xTaskCreate>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <osThreadNew+0x11c>
            hTask = NULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047ca:	693b      	ldr	r3, [r7, #16]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3728      	adds	r7, #40	; 0x28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047dc:	f3ef 8305 	mrs	r3, IPSR
 80047e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80047e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <osDelay+0x1c>
    stat = osErrorISR;
 80047e8:	f06f 0305 	mvn.w	r3, #5
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	e007      	b.n	8004800 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <osDelay+0x2c>
      vTaskDelay(ticks);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f001 fec8 	bl	8006590 <vTaskDelay>
    }
  }

  return (stat);
 8004800:	68fb      	ldr	r3, [r7, #12]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800480a:	b580      	push	{r7, lr}
 800480c:	b088      	sub	sp, #32
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004816:	f3ef 8305 	mrs	r3, IPSR
 800481a:	60bb      	str	r3, [r7, #8]
  return(result);
 800481c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800481e:	2b00      	cmp	r3, #0
 8004820:	d174      	bne.n	800490c <osMutexNew+0x102>
    if (attr != NULL) {
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	e001      	b.n	8004834 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <osMutexNew+0x3a>
      rmtx = 1U;
 800483e:	2301      	movs	r3, #1
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e001      	b.n	8004848 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d15c      	bne.n	800490c <osMutexNew+0x102>
      mem = -1;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d015      	beq.n	800488a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d006      	beq.n	8004874 <osMutexNew+0x6a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	2b4f      	cmp	r3, #79	; 0x4f
 800486c:	d902      	bls.n	8004874 <osMutexNew+0x6a>
          mem = 1;
 800486e:	2301      	movs	r3, #1
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	e00c      	b.n	800488e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d108      	bne.n	800488e <osMutexNew+0x84>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <osMutexNew+0x84>
            mem = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	e001      	b.n	800488e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d112      	bne.n	80048ba <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4619      	mov	r1, r3
 80048a0:	2004      	movs	r0, #4
 80048a2:	f000 fd68 	bl	8005376 <xQueueCreateMutexStatic>
 80048a6:	61f8      	str	r0, [r7, #28]
 80048a8:	e016      	b.n	80048d8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	4619      	mov	r1, r3
 80048b0:	2001      	movs	r0, #1
 80048b2:	f000 fd60 	bl	8005376 <xQueueCreateMutexStatic>
 80048b6:	61f8      	str	r0, [r7, #28]
 80048b8:	e00e      	b.n	80048d8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80048c6:	2004      	movs	r0, #4
 80048c8:	f000 fd3d 	bl	8005346 <xQueueCreateMutex>
 80048cc:	61f8      	str	r0, [r7, #28]
 80048ce:	e003      	b.n	80048d8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80048d0:	2001      	movs	r0, #1
 80048d2:	f000 fd38 	bl	8005346 <xQueueCreateMutex>
 80048d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00c      	beq.n	80048f8 <osMutexNew+0xee>
        if (attr != NULL) {
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <osMutexNew+0xe2>
          name = attr->name;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	e001      	b.n	80048f0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80048f0:	68f9      	ldr	r1, [r7, #12]
 80048f2:	69f8      	ldr	r0, [r7, #28]
 80048f4:	f001 fc0c 	bl	8006110 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d006      	beq.n	800490c <osMutexNew+0x102>
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800490c:	69fb      	ldr	r3, [r7, #28]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004934:	f3ef 8305 	mrs	r3, IPSR
 8004938:	60bb      	str	r3, [r7, #8]
  return(result);
 800493a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004940:	f06f 0305 	mvn.w	r3, #5
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	e02c      	b.n	80049a2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800494e:	f06f 0303 	mvn.w	r3, #3
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e025      	b.n	80049a2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d011      	beq.n	8004980 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	6938      	ldr	r0, [r7, #16]
 8004960:	f000 fd58 	bl	8005414 <xQueueTakeMutexRecursive>
 8004964:	4603      	mov	r3, r0
 8004966:	2b01      	cmp	r3, #1
 8004968:	d01b      	beq.n	80049a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004970:	f06f 0301 	mvn.w	r3, #1
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e014      	b.n	80049a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004978:	f06f 0302 	mvn.w	r3, #2
 800497c:	617b      	str	r3, [r7, #20]
 800497e:	e010      	b.n	80049a2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	6938      	ldr	r0, [r7, #16]
 8004984:	f001 f8ec 	bl	8005b60 <xQueueSemaphoreTake>
 8004988:	4603      	mov	r3, r0
 800498a:	2b01      	cmp	r3, #1
 800498c:	d009      	beq.n	80049a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004994:	f06f 0301 	mvn.w	r3, #1
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	e002      	b.n	80049a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800499c:	f06f 0302 	mvn.w	r3, #2
 80049a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80049a2:	697b      	ldr	r3, [r7, #20]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049c8:	f3ef 8305 	mrs	r3, IPSR
 80049cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80049ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <osMutexRelease+0x30>
    stat = osErrorISR;
 80049d4:	f06f 0305 	mvn.w	r3, #5
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e01f      	b.n	8004a1c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80049e2:	f06f 0303 	mvn.w	r3, #3
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e018      	b.n	8004a1c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80049f0:	6938      	ldr	r0, [r7, #16]
 80049f2:	f000 fcdb 	bl	80053ac <xQueueGiveMutexRecursive>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d00f      	beq.n	8004a1c <osMutexRelease+0x70>
        stat = osErrorResource;
 80049fc:	f06f 0302 	mvn.w	r3, #2
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	e00b      	b.n	8004a1c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004a04:	2300      	movs	r3, #0
 8004a06:	2200      	movs	r2, #0
 8004a08:	2100      	movs	r1, #0
 8004a0a:	6938      	ldr	r0, [r7, #16]
 8004a0c:	f000 fda2 	bl	8005554 <xQueueGenericSend>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d002      	beq.n	8004a1c <osMutexRelease+0x70>
        stat = osErrorResource;
 8004a16:	f06f 0302 	mvn.w	r3, #2
 8004a1a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004a1c:	697b      	ldr	r3, [r7, #20]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b08a      	sub	sp, #40	; 0x28
 8004a2a:	af02      	add	r7, sp, #8
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a36:	f3ef 8305 	mrs	r3, IPSR
 8004a3a:	613b      	str	r3, [r7, #16]
  return(result);
 8004a3c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d175      	bne.n	8004b2e <osSemaphoreNew+0x108>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d072      	beq.n	8004b2e <osSemaphoreNew+0x108>
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d86e      	bhi.n	8004b2e <osSemaphoreNew+0x108>
    mem = -1;
 8004a50:	f04f 33ff 	mov.w	r3, #4294967295
 8004a54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d015      	beq.n	8004a88 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d006      	beq.n	8004a72 <osSemaphoreNew+0x4c>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b4f      	cmp	r3, #79	; 0x4f
 8004a6a:	d902      	bls.n	8004a72 <osSemaphoreNew+0x4c>
        mem = 1;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	e00c      	b.n	8004a8c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d108      	bne.n	8004a8c <osSemaphoreNew+0x66>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <osSemaphoreNew+0x66>
          mem = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	e001      	b.n	8004a8c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a92:	d04c      	beq.n	8004b2e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d128      	bne.n	8004aec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d10a      	bne.n	8004ab6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	9200      	str	r2, [sp, #0]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2100      	movs	r1, #0
 8004aac:	2001      	movs	r0, #1
 8004aae:	f000 fb5b 	bl	8005168 <xQueueGenericCreateStatic>
 8004ab2:	61f8      	str	r0, [r7, #28]
 8004ab4:	e005      	b.n	8004ac2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	2100      	movs	r1, #0
 8004aba:	2001      	movs	r0, #1
 8004abc:	f000 fbcc 	bl	8005258 <xQueueGenericCreate>
 8004ac0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d022      	beq.n	8004b0e <osSemaphoreNew+0xe8>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01f      	beq.n	8004b0e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	69f8      	ldr	r0, [r7, #28]
 8004ad6:	f000 fd3d 	bl	8005554 <xQueueGenericSend>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d016      	beq.n	8004b0e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004ae0:	69f8      	ldr	r0, [r7, #28]
 8004ae2:	f001 f9c9 	bl	8005e78 <vQueueDelete>
            hSemaphore = NULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
 8004aea:	e010      	b.n	8004b0e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d108      	bne.n	8004b04 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	461a      	mov	r2, r3
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fcc0 	bl	8005480 <xQueueCreateCountingSemaphoreStatic>
 8004b00:	61f8      	str	r0, [r7, #28]
 8004b02:	e004      	b.n	8004b0e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fcf1 	bl	80054ee <xQueueCreateCountingSemaphore>
 8004b0c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00c      	beq.n	8004b2e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	e001      	b.n	8004b26 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004b26:	6979      	ldr	r1, [r7, #20]
 8004b28:	69f8      	ldr	r0, [r7, #28]
 8004b2a:	f001 faf1 	bl	8006110 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004b2e:	69fb      	ldr	r3, [r7, #28]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d103      	bne.n	8004b58 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004b50:	f06f 0303 	mvn.w	r3, #3
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e039      	b.n	8004bcc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b58:	f3ef 8305 	mrs	r3, IPSR
 8004b5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d022      	beq.n	8004baa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004b6a:	f06f 0303 	mvn.w	r3, #3
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e02c      	b.n	8004bcc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004b76:	f107 0308 	add.w	r3, r7, #8
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	6938      	ldr	r0, [r7, #16]
 8004b80:	f001 f8fa 	bl	8005d78 <xQueueReceiveFromISR>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d003      	beq.n	8004b92 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004b8a:	f06f 0302 	mvn.w	r3, #2
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e01c      	b.n	8004bcc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d019      	beq.n	8004bcc <osSemaphoreAcquire+0x94>
 8004b98:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <osSemaphoreAcquire+0xa0>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	e010      	b.n	8004bcc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004baa:	6839      	ldr	r1, [r7, #0]
 8004bac:	6938      	ldr	r0, [r7, #16]
 8004bae:	f000 ffd7 	bl	8005b60 <xQueueSemaphoreTake>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d009      	beq.n	8004bcc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004bbe:	f06f 0301 	mvn.w	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e002      	b.n	8004bcc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004bc6:	f06f 0302 	mvn.w	r3, #2
 8004bca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004bcc:	697b      	ldr	r3, [r7, #20]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3718      	adds	r7, #24
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d103      	bne.n	8004bfa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004bf2:	f06f 0303 	mvn.w	r3, #3
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e02c      	b.n	8004c54 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bfa:	f3ef 8305 	mrs	r3, IPSR
 8004bfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c00:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01a      	beq.n	8004c3c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6938      	ldr	r0, [r7, #16]
 8004c12:	f000 fe38 	bl	8005886 <xQueueGiveFromISR>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d003      	beq.n	8004c24 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004c1c:	f06f 0302 	mvn.w	r3, #2
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	e017      	b.n	8004c54 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d014      	beq.n	8004c54 <osSemaphoreRelease+0x78>
 8004c2a:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <osSemaphoreRelease+0x84>)
 8004c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	e00b      	b.n	8004c54 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	6938      	ldr	r0, [r7, #16]
 8004c44:	f000 fc86 	bl	8005554 <xQueueGenericSend>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d002      	beq.n	8004c54 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004c4e:	f06f 0302 	mvn.w	r3, #2
 8004c52:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004c54:	697b      	ldr	r3, [r7, #20]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c74:	f3ef 8305 	mrs	r3, IPSR
 8004c78:	613b      	str	r3, [r7, #16]
  return(result);
 8004c7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d15f      	bne.n	8004d40 <osMessageQueueNew+0xdc>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d05c      	beq.n	8004d40 <osMessageQueueNew+0xdc>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d059      	beq.n	8004d40 <osMessageQueueNew+0xdc>
    mem = -1;
 8004c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d029      	beq.n	8004cec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <osMessageQueueNew+0x62>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b4f      	cmp	r3, #79	; 0x4f
 8004ca6:	d90e      	bls.n	8004cc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	fb01 f303 	mul.w	r3, r1, r3
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d302      	bcc.n	8004cc6 <osMessageQueueNew+0x62>
        mem = 1;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	e014      	b.n	8004cf0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d110      	bne.n	8004cf0 <osMessageQueueNew+0x8c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d108      	bne.n	8004cf0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <osMessageQueueNew+0x8c>
          mem = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	e001      	b.n	8004cf0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d10b      	bne.n	8004d0e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2100      	movs	r1, #0
 8004d00:	9100      	str	r1, [sp, #0]
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fa2f 	bl	8005168 <xQueueGenericCreateStatic>
 8004d0a:	61f8      	str	r0, [r7, #28]
 8004d0c:	e008      	b.n	8004d20 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d105      	bne.n	8004d20 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004d14:	2200      	movs	r2, #0
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 fa9d 	bl	8005258 <xQueueGenericCreate>
 8004d1e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00c      	beq.n	8004d40 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	617b      	str	r3, [r7, #20]
 8004d32:	e001      	b.n	8004d38 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004d38:	6979      	ldr	r1, [r7, #20]
 8004d3a:	69f8      	ldr	r0, [r7, #28]
 8004d3c:	f001 f9e8 	bl	8006110 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004d40:	69fb      	ldr	r3, [r7, #28]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3720      	adds	r7, #32
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d64:	f3ef 8305 	mrs	r3, IPSR
 8004d68:	617b      	str	r3, [r7, #20]
  return(result);
 8004d6a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d028      	beq.n	8004dc2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <osMessageQueuePut+0x36>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <osMessageQueuePut+0x36>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004d82:	f06f 0303 	mvn.w	r3, #3
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e038      	b.n	8004dfc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004d8e:	f107 0210 	add.w	r2, r7, #16
 8004d92:	2300      	movs	r3, #0
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	f000 fcda 	bl	8005750 <xQueueGenericSendFromISR>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d003      	beq.n	8004daa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004da2:	f06f 0302 	mvn.w	r3, #2
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	e028      	b.n	8004dfc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d025      	beq.n	8004dfc <osMessageQueuePut+0xb0>
 8004db0:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <osMessageQueuePut+0xbc>)
 8004db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	e01c      	b.n	8004dfc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <osMessageQueuePut+0x82>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004dce:	f06f 0303 	mvn.w	r3, #3
 8004dd2:	61fb      	str	r3, [r7, #28]
 8004dd4:	e012      	b.n	8004dfc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	68b9      	ldr	r1, [r7, #8]
 8004ddc:	69b8      	ldr	r0, [r7, #24]
 8004dde:	f000 fbb9 	bl	8005554 <xQueueGenericSend>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d009      	beq.n	8004dfc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004dee:	f06f 0301 	mvn.w	r3, #1
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e002      	b.n	8004dfc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004df6:	f06f 0302 	mvn.w	r3, #2
 8004dfa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e22:	f3ef 8305 	mrs	r3, IPSR
 8004e26:	617b      	str	r3, [r7, #20]
  return(result);
 8004e28:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d028      	beq.n	8004e80 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <osMessageQueueGet+0x34>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <osMessageQueueGet+0x34>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004e40:	f06f 0303 	mvn.w	r3, #3
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	e037      	b.n	8004eb8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004e4c:	f107 0310 	add.w	r3, r7, #16
 8004e50:	461a      	mov	r2, r3
 8004e52:	68b9      	ldr	r1, [r7, #8]
 8004e54:	69b8      	ldr	r0, [r7, #24]
 8004e56:	f000 ff8f 	bl	8005d78 <xQueueReceiveFromISR>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d003      	beq.n	8004e68 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004e60:	f06f 0302 	mvn.w	r3, #2
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	e027      	b.n	8004eb8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d024      	beq.n	8004eb8 <osMessageQueueGet+0xac>
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <osMessageQueueGet+0xb8>)
 8004e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	e01b      	b.n	8004eb8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <osMessageQueueGet+0x80>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d103      	bne.n	8004e94 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004e8c:	f06f 0303 	mvn.w	r3, #3
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	e011      	b.n	8004eb8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	68b9      	ldr	r1, [r7, #8]
 8004e98:	69b8      	ldr	r0, [r7, #24]
 8004e9a:	f000 fd81 	bl	80059a0 <xQueueReceive>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d009      	beq.n	8004eb8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004eaa:	f06f 0301 	mvn.w	r3, #1
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	e002      	b.n	8004eb8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004eb2:	f06f 0302 	mvn.w	r3, #2
 8004eb6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004eb8:	69fb      	ldr	r3, [r7, #28]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4a07      	ldr	r2, [pc, #28]	; (8004ef4 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	4a06      	ldr	r2, [pc, #24]	; (8004ef8 <vApplicationGetIdleTaskMemory+0x30>)
 8004ede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ee6:	601a      	str	r2, [r3, #0]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	200000ac 	.word	0x200000ac
 8004ef8:	20000168 	.word	0x20000168

08004efc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a07      	ldr	r2, [pc, #28]	; (8004f28 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4a06      	ldr	r2, [pc, #24]	; (8004f2c <vApplicationGetTimerTaskMemory+0x30>)
 8004f12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f1a:	601a      	str	r2, [r3, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	20000568 	.word	0x20000568
 8004f2c:	20000624 	.word	0x20000624

08004f30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f103 0208 	add.w	r2, r3, #8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f04f 32ff 	mov.w	r2, #4294967295
 8004f48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f103 0208 	add.w	r2, r3, #8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f103 0208 	add.w	r2, r3, #8
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d103      	bne.n	8004ff2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e00c      	b.n	800500c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e002      	b.n	8005000 <vListInsert+0x2e>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	429a      	cmp	r2, r3
 800500a:	d2f6      	bcs.n	8004ffa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	601a      	str	r2, [r3, #0]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6892      	ldr	r2, [r2, #8]
 800505a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6852      	ldr	r2, [r2, #4]
 8005064:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	429a      	cmp	r2, r3
 800506e:	d103      	bne.n	8005078 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	1e5a      	subs	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3714      	adds	r7, #20
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050c2:	f002 fd6f 	bl	8007ba4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050d2:	fb01 f303 	mul.w	r3, r1, r3
 80050d6:	441a      	add	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f2:	3b01      	subs	r3, #1
 80050f4:	68f9      	ldr	r1, [r7, #12]
 80050f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	441a      	add	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	22ff      	movs	r2, #255	; 0xff
 8005106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	22ff      	movs	r2, #255	; 0xff
 800510e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d114      	bne.n	8005142 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d01a      	beq.n	8005156 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3310      	adds	r3, #16
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fd13 	bl	8006b50 <xTaskRemoveFromEventList>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d012      	beq.n	8005156 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005130:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <xQueueGenericReset+0xcc>)
 8005132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	e009      	b.n	8005156 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3310      	adds	r3, #16
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff fef2 	bl	8004f30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3324      	adds	r3, #36	; 0x24
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff feed 	bl	8004f30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005156:	f002 fd55 	bl	8007c04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800515a:	2301      	movs	r3, #1
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08e      	sub	sp, #56	; 0x38
 800516c:	af02      	add	r7, sp, #8
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <xQueueGenericCreateStatic+0x52>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <xQueueGenericCreateStatic+0x56>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <xQueueGenericCreateStatic+0x58>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	623b      	str	r3, [r7, #32]
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <xQueueGenericCreateStatic+0x7e>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <xQueueGenericCreateStatic+0x82>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <xQueueGenericCreateStatic+0x84>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	61fb      	str	r3, [r7, #28]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005206:	2350      	movs	r3, #80	; 0x50
 8005208:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b50      	cmp	r3, #80	; 0x50
 800520e:	d00a      	beq.n	8005226 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	61bb      	str	r3, [r7, #24]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005226:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800522c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00d      	beq.n	800524e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800523a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	4613      	mov	r3, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f83f 	bl	80052cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800524e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005250:	4618      	mov	r0, r3
 8005252:	3730      	adds	r7, #48	; 0x30
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08a      	sub	sp, #40	; 0x28
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	4613      	mov	r3, r2
 8005264:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10a      	bne.n	8005282 <xQueueGenericCreate+0x2a>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	613b      	str	r3, [r7, #16]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	fb02 f303 	mul.w	r3, r2, r3
 800528a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3350      	adds	r3, #80	; 0x50
 8005290:	4618      	mov	r0, r3
 8005292:	f002 fda9 	bl	8007de8 <pvPortMalloc>
 8005296:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d011      	beq.n	80052c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	3350      	adds	r3, #80	; 0x50
 80052a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052b0:	79fa      	ldrb	r2, [r7, #7]
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	4613      	mov	r3, r2
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f805 	bl	80052cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052c2:	69bb      	ldr	r3, [r7, #24]
	}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d103      	bne.n	80052e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e002      	b.n	80052ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052fa:	2101      	movs	r1, #1
 80052fc:	69b8      	ldr	r0, [r7, #24]
 80052fe:	f7ff fecb 	bl	8005098 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800530a:	bf00      	nop
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00e      	beq.n	800533e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005332:	2300      	movs	r3, #0
 8005334:	2200      	movs	r2, #0
 8005336:	2100      	movs	r1, #0
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f90b 	bl	8005554 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005346:	b580      	push	{r7, lr}
 8005348:	b086      	sub	sp, #24
 800534a:	af00      	add	r7, sp, #0
 800534c:	4603      	mov	r3, r0
 800534e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005350:	2301      	movs	r3, #1
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	461a      	mov	r2, r3
 800535c:	6939      	ldr	r1, [r7, #16]
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	f7ff ff7a 	bl	8005258 <xQueueGenericCreate>
 8005364:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7ff ffd3 	bl	8005312 <prvInitialiseMutex>

		return xNewQueue;
 800536c:	68fb      	ldr	r3, [r7, #12]
	}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005376:	b580      	push	{r7, lr}
 8005378:	b088      	sub	sp, #32
 800537a:	af02      	add	r7, sp, #8
 800537c:	4603      	mov	r3, r0
 800537e:	6039      	str	r1, [r7, #0]
 8005380:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005382:	2301      	movs	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2200      	movs	r2, #0
 8005392:	6939      	ldr	r1, [r7, #16]
 8005394:	6978      	ldr	r0, [r7, #20]
 8005396:	f7ff fee7 	bl	8005168 <xQueueGenericCreateStatic>
 800539a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff ffb8 	bl	8005312 <prvInitialiseMutex>

		return xNewQueue;
 80053a2:	68fb      	ldr	r3, [r7, #12]
	}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80053ac:	b590      	push	{r4, r7, lr}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10a      	bne.n	80053d4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	60fb      	str	r3, [r7, #12]
}
 80053d0:	bf00      	nop
 80053d2:	e7fe      	b.n	80053d2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	689c      	ldr	r4, [r3, #8]
 80053d8:	f001 fd7c 	bl	8006ed4 <xTaskGetCurrentTaskHandle>
 80053dc:	4603      	mov	r3, r0
 80053de:	429c      	cmp	r4, r3
 80053e0:	d111      	bne.n	8005406 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	1e5a      	subs	r2, r3, #1
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d105      	bne.n	8005400 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80053f4:	2300      	movs	r3, #0
 80053f6:	2200      	movs	r2, #0
 80053f8:	2100      	movs	r1, #0
 80053fa:	6938      	ldr	r0, [r7, #16]
 80053fc:	f000 f8aa 	bl	8005554 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005400:	2301      	movs	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	e001      	b.n	800540a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800540a:	697b      	ldr	r3, [r7, #20]
	}
 800540c:	4618      	mov	r0, r3
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	bd90      	pop	{r4, r7, pc}

08005414 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	60fb      	str	r3, [r7, #12]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	689c      	ldr	r4, [r3, #8]
 8005442:	f001 fd47 	bl	8006ed4 <xTaskGetCurrentTaskHandle>
 8005446:	4603      	mov	r3, r0
 8005448:	429c      	cmp	r4, r3
 800544a:	d107      	bne.n	800545c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005456:	2301      	movs	r3, #1
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	e00c      	b.n	8005476 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	6938      	ldr	r0, [r7, #16]
 8005460:	f000 fb7e 	bl	8005b60 <xQueueSemaphoreTake>
 8005464:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d004      	beq.n	8005476 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005476:	697b      	ldr	r3, [r7, #20]
	}
 8005478:	4618      	mov	r0, r3
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	bd90      	pop	{r4, r7, pc}

08005480 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	61bb      	str	r3, [r7, #24]
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d90a      	bls.n	80054c6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	617b      	str	r3, [r7, #20]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80054c6:	2302      	movs	r3, #2
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	2100      	movs	r1, #0
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff fe49 	bl	8005168 <xQueueGenericCreateStatic>
 80054d6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80054e4:	69fb      	ldr	r3, [r7, #28]
	}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	613b      	str	r3, [r7, #16]
}
 8005510:	bf00      	nop
 8005512:	e7fe      	b.n	8005512 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	429a      	cmp	r2, r3
 800551a:	d90a      	bls.n	8005532 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60fb      	str	r3, [r7, #12]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005532:	2202      	movs	r2, #2
 8005534:	2100      	movs	r1, #0
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff fe8e 	bl	8005258 <xQueueGenericCreate>
 800553c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800554a:	697b      	ldr	r3, [r7, #20]
	}
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08e      	sub	sp, #56	; 0x38
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
 8005560:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005562:	2300      	movs	r3, #0
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <xQueueGenericSend+0x32>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d103      	bne.n	8005594 <xQueueGenericSend+0x40>
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <xQueueGenericSend+0x44>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <xQueueGenericSend+0x46>
 8005598:	2300      	movs	r3, #0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10a      	bne.n	80055b4 <xQueueGenericSend+0x60>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	f383 8811 	msr	BASEPRI, r3
 80055a6:	f3bf 8f6f 	isb	sy
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055b0:	bf00      	nop
 80055b2:	e7fe      	b.n	80055b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d103      	bne.n	80055c2 <xQueueGenericSend+0x6e>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <xQueueGenericSend+0x72>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xQueueGenericSend+0x74>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <xQueueGenericSend+0x8e>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	623b      	str	r3, [r7, #32]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055e2:	f001 fc87 	bl	8006ef4 <xTaskGetSchedulerState>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <xQueueGenericSend+0x9e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <xQueueGenericSend+0xa2>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <xQueueGenericSend+0xa4>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <xQueueGenericSend+0xbe>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	61fb      	str	r3, [r7, #28]
}
 800560e:	bf00      	nop
 8005610:	e7fe      	b.n	8005610 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005612:	f002 fac7 	bl	8007ba4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <xQueueGenericSend+0xd4>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d129      	bne.n	800567c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800562e:	f000 fc5e 	bl	8005eee <prvCopyDataToQueue>
 8005632:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	3324      	adds	r3, #36	; 0x24
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fa85 	bl	8006b50 <xTaskRemoveFromEventList>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d013      	beq.n	8005674 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800564c:	4b3f      	ldr	r3, [pc, #252]	; (800574c <xQueueGenericSend+0x1f8>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	e00a      	b.n	8005674 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005664:	4b39      	ldr	r3, [pc, #228]	; (800574c <xQueueGenericSend+0x1f8>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005674:	f002 fac6 	bl	8007c04 <vPortExitCritical>
				return pdPASS;
 8005678:	2301      	movs	r3, #1
 800567a:	e063      	b.n	8005744 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d103      	bne.n	800568a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005682:	f002 fabf 	bl	8007c04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005686:	2300      	movs	r3, #0
 8005688:	e05c      	b.n	8005744 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800568a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	4618      	mov	r0, r3
 8005696:	f001 fabf 	bl	8006c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800569a:	2301      	movs	r3, #1
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800569e:	f002 fab1 	bl	8007c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056a2:	f001 f819 	bl	80066d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056a6:	f002 fa7d 	bl	8007ba4 <vPortEnterCritical>
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b0:	b25b      	sxtb	r3, r3
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d103      	bne.n	80056c0 <xQueueGenericSend+0x16c>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c6:	b25b      	sxtb	r3, r3
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d103      	bne.n	80056d6 <xQueueGenericSend+0x182>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d6:	f002 fa95 	bl	8007c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056da:	1d3a      	adds	r2, r7, #4
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 faae 	bl	8006c44 <xTaskCheckForTimeOut>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d124      	bne.n	8005738 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056f0:	f000 fcf5 	bl	80060de <prvIsQueueFull>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d018      	beq.n	800572c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	3310      	adds	r3, #16
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f001 f9d4 	bl	8006ab0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570a:	f000 fc80 	bl	800600e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800570e:	f000 fff1 	bl	80066f4 <xTaskResumeAll>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	f47f af7c 	bne.w	8005612 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <xQueueGenericSend+0x1f8>)
 800571c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	e772      	b.n	8005612 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800572c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800572e:	f000 fc6e 	bl	800600e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005732:	f000 ffdf 	bl	80066f4 <xTaskResumeAll>
 8005736:	e76c      	b.n	8005612 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800573a:	f000 fc68 	bl	800600e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800573e:	f000 ffd9 	bl	80066f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005742:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005744:	4618      	mov	r0, r3
 8005746:	3738      	adds	r7, #56	; 0x38
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	e000ed04 	.word	0xe000ed04

08005750 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b090      	sub	sp, #64	; 0x40
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d103      	bne.n	800578c <xQueueGenericSendFromISR+0x3c>
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <xQueueGenericSendFromISR+0x40>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <xQueueGenericSendFromISR+0x42>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057a8:	bf00      	nop
 80057aa:	e7fe      	b.n	80057aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d103      	bne.n	80057ba <xQueueGenericSendFromISR+0x6a>
 80057b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <xQueueGenericSendFromISR+0x6e>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <xQueueGenericSendFromISR+0x70>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	623b      	str	r3, [r7, #32]
}
 80057d6:	bf00      	nop
 80057d8:	e7fe      	b.n	80057d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057da:	f002 fac5 	bl	8007d68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057de:	f3ef 8211 	mrs	r2, BASEPRI
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	61fa      	str	r2, [r7, #28]
 80057f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <xQueueGenericSendFromISR+0xbc>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d12f      	bne.n	800586c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800580c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005822:	f000 fb64 	bl	8005eee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005826:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d112      	bne.n	8005856 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d016      	beq.n	8005866 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	3324      	adds	r3, #36	; 0x24
 800583c:	4618      	mov	r0, r3
 800583e:	f001 f987 	bl	8006b50 <xTaskRemoveFromEventList>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00e      	beq.n	8005866 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e007      	b.n	8005866 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005856:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800585a:	3301      	adds	r3, #1
 800585c:	b2db      	uxtb	r3, r3
 800585e:	b25a      	sxtb	r2, r3
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005866:	2301      	movs	r3, #1
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800586a:	e001      	b.n	8005870 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800586c:	2300      	movs	r3, #0
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005872:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800587a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800587c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800587e:	4618      	mov	r0, r3
 8005880:	3740      	adds	r7, #64	; 0x40
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b08e      	sub	sp, #56	; 0x38
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	623b      	str	r3, [r7, #32]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <xQueueGiveFromISR+0x48>
	__asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	61fb      	str	r3, [r7, #28]
}
 80058ca:	bf00      	nop
 80058cc:	e7fe      	b.n	80058cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d103      	bne.n	80058de <xQueueGiveFromISR+0x58>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <xQueueGiveFromISR+0x5c>
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <xQueueGiveFromISR+0x5e>
 80058e2:	2300      	movs	r3, #0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <xQueueGiveFromISR+0x78>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	61bb      	str	r3, [r7, #24]
}
 80058fa:	bf00      	nop
 80058fc:	e7fe      	b.n	80058fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058fe:	f002 fa33 	bl	8007d68 <vPortValidateInterruptPriority>
	__asm volatile
 8005902:	f3ef 8211 	mrs	r2, BASEPRI
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	617a      	str	r2, [r7, #20]
 8005918:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800591a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005922:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800592a:	429a      	cmp	r2, r3
 800592c:	d22b      	bcs.n	8005986 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005940:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005948:	d112      	bne.n	8005970 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	3324      	adds	r3, #36	; 0x24
 8005956:	4618      	mov	r0, r3
 8005958:	f001 f8fa 	bl	8006b50 <xTaskRemoveFromEventList>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00e      	beq.n	8005980 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2201      	movs	r2, #1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	e007      	b.n	8005980 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005974:	3301      	adds	r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	b25a      	sxtb	r2, r3
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005980:	2301      	movs	r3, #1
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
 8005984:	e001      	b.n	800598a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005986:	2300      	movs	r3, #0
 8005988:	637b      	str	r3, [r7, #52]	; 0x34
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f383 8811 	msr	BASEPRI, r3
}
 8005994:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005998:	4618      	mov	r0, r3
 800599a:	3738      	adds	r7, #56	; 0x38
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08c      	sub	sp, #48	; 0x30
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <xQueueReceive+0x30>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	623b      	str	r3, [r7, #32]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <xQueueReceive+0x3e>
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <xQueueReceive+0x42>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueReceive+0x44>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueReceive+0x5e>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	61fb      	str	r3, [r7, #28]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059fe:	f001 fa79 	bl	8006ef4 <xTaskGetSchedulerState>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <xQueueReceive+0x6e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <xQueueReceive+0x72>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueReceive+0x74>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xQueueReceive+0x8e>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	61bb      	str	r3, [r7, #24]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a2e:	f002 f8b9 	bl	8007ba4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01f      	beq.n	8005a7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a42:	f000 fabe 	bl	8005fc2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	1e5a      	subs	r2, r3, #1
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00f      	beq.n	8005a76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	3310      	adds	r3, #16
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 f878 	bl	8006b50 <xTaskRemoveFromEventList>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a66:	4b3d      	ldr	r3, [pc, #244]	; (8005b5c <xQueueReceive+0x1bc>)
 8005a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a76:	f002 f8c5 	bl	8007c04 <vPortExitCritical>
				return pdPASS;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e069      	b.n	8005b52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a84:	f002 f8be 	bl	8007c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e062      	b.n	8005b52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a92:	f107 0310 	add.w	r3, r7, #16
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f8be 	bl	8006c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa0:	f002 f8b0 	bl	8007c04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa4:	f000 fe18 	bl	80066d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa8:	f002 f87c 	bl	8007ba4 <vPortEnterCritical>
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d103      	bne.n	8005ac2 <xQueueReceive+0x122>
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d103      	bne.n	8005ad8 <xQueueReceive+0x138>
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad8:	f002 f894 	bl	8007c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005adc:	1d3a      	adds	r2, r7, #4
 8005ade:	f107 0310 	add.w	r3, r7, #16
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 f8ad 	bl	8006c44 <xTaskCheckForTimeOut>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d123      	bne.n	8005b38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af2:	f000 fade 	bl	80060b2 <prvIsQueueEmpty>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d017      	beq.n	8005b2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	3324      	adds	r3, #36	; 0x24
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 ffd3 	bl	8006ab0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0c:	f000 fa7f 	bl	800600e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b10:	f000 fdf0 	bl	80066f4 <xTaskResumeAll>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d189      	bne.n	8005a2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b1a:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <xQueueReceive+0x1bc>)
 8005b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	e780      	b.n	8005a2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2e:	f000 fa6e 	bl	800600e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b32:	f000 fddf 	bl	80066f4 <xTaskResumeAll>
 8005b36:	e77a      	b.n	8005a2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b3a:	f000 fa68 	bl	800600e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b3e:	f000 fdd9 	bl	80066f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b44:	f000 fab5 	bl	80060b2 <prvIsQueueEmpty>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f43f af6f 	beq.w	8005a2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3730      	adds	r7, #48	; 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08e      	sub	sp, #56	; 0x38
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	623b      	str	r3, [r7, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	61fb      	str	r3, [r7, #28]
}
 8005bac:	bf00      	nop
 8005bae:	e7fe      	b.n	8005bae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bb0:	f001 f9a0 	bl	8006ef4 <xTaskGetSchedulerState>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d102      	bne.n	8005bc0 <xQueueSemaphoreTake+0x60>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <xQueueSemaphoreTake+0x64>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <xQueueSemaphoreTake+0x66>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	61bb      	str	r3, [r7, #24]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005be0:	f001 ffe0 	bl	8007ba4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d024      	beq.n	8005c3a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf2:	1e5a      	subs	r2, r3, #1
 8005bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c00:	f001 faee 	bl	80071e0 <pvTaskIncrementMutexHeldCount>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00f      	beq.n	8005c32 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	3310      	adds	r3, #16
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 ff9a 	bl	8006b50 <xTaskRemoveFromEventList>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d007      	beq.n	8005c32 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c22:	4b54      	ldr	r3, [pc, #336]	; (8005d74 <xQueueSemaphoreTake+0x214>)
 8005c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c32:	f001 ffe7 	bl	8007c04 <vPortExitCritical>
				return pdPASS;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e097      	b.n	8005d6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d111      	bne.n	8005c64 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	617b      	str	r3, [r7, #20]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c5c:	f001 ffd2 	bl	8007c04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e082      	b.n	8005d6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 ffd2 	bl	8006c18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c74:	2301      	movs	r3, #1
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c78:	f001 ffc4 	bl	8007c04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c7c:	f000 fd2c 	bl	80066d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c80:	f001 ff90 	bl	8007ba4 <vPortEnterCritical>
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c8a:	b25b      	sxtb	r3, r3
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d103      	bne.n	8005c9a <xQueueSemaphoreTake+0x13a>
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d103      	bne.n	8005cb0 <xQueueSemaphoreTake+0x150>
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb0:	f001 ffa8 	bl	8007c04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cb4:	463a      	mov	r2, r7
 8005cb6:	f107 030c 	add.w	r3, r7, #12
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f000 ffc1 	bl	8006c44 <xTaskCheckForTimeOut>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d132      	bne.n	8005d2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cca:	f000 f9f2 	bl	80060b2 <prvIsQueueEmpty>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d026      	beq.n	8005d22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d109      	bne.n	8005cf0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005cdc:	f001 ff62 	bl	8007ba4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 f923 	bl	8006f30 <xTaskPriorityInherit>
 8005cea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005cec:	f001 ff8a 	bl	8007c04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	3324      	adds	r3, #36	; 0x24
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fed9 	bl	8006ab0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d00:	f000 f985 	bl	800600e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d04:	f000 fcf6 	bl	80066f4 <xTaskResumeAll>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f47f af68 	bne.w	8005be0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005d10:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <xQueueSemaphoreTake+0x214>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	e75e      	b.n	8005be0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d24:	f000 f973 	bl	800600e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d28:	f000 fce4 	bl	80066f4 <xTaskResumeAll>
 8005d2c:	e758      	b.n	8005be0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d30:	f000 f96d 	bl	800600e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d34:	f000 fcde 	bl	80066f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d3a:	f000 f9ba 	bl	80060b2 <prvIsQueueEmpty>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f43f af4d 	beq.w	8005be0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005d4c:	f001 ff2a 	bl	8007ba4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d52:	f000 f8b4 	bl	8005ebe <prvGetDisinheritPriorityAfterTimeout>
 8005d56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f001 f9bc 	bl	80070dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d64:	f001 ff4e 	bl	8007c04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3738      	adds	r7, #56	; 0x38
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08e      	sub	sp, #56	; 0x38
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10a      	bne.n	8005da4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	623b      	str	r3, [r7, #32]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <xQueueReceiveFromISR+0x3a>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <xQueueReceiveFromISR+0x3e>
 8005db2:	2301      	movs	r3, #1
 8005db4:	e000      	b.n	8005db8 <xQueueReceiveFromISR+0x40>
 8005db6:	2300      	movs	r3, #0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	61fb      	str	r3, [r7, #28]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dd2:	f001 ffc9 	bl	8007d68 <vPortValidateInterruptPriority>
	__asm volatile
 8005dd6:	f3ef 8211 	mrs	r2, BASEPRI
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	61ba      	str	r2, [r7, #24]
 8005dec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005dee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005df0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d02f      	beq.n	8005e5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e0c:	f000 f8d9 	bl	8005fc2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e12:	1e5a      	subs	r2, r3, #1
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d112      	bne.n	8005e48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d016      	beq.n	8005e58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	3310      	adds	r3, #16
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 fe8e 	bl	8006b50 <xTaskRemoveFromEventList>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00e      	beq.n	8005e58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e007      	b.n	8005e58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	b25a      	sxtb	r2, r3
 8005e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005e5c:	e001      	b.n	8005e62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	637b      	str	r3, [r7, #52]	; 0x34
 8005e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f383 8811 	msr	BASEPRI, r3
}
 8005e6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3738      	adds	r7, #56	; 0x38
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <vQueueDelete+0x28>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	60bb      	str	r3, [r7, #8]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f95f 	bl	8006164 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f002 f865 	bl	8007f80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d006      	beq.n	8005edc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e001      	b.n	8005ee0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005edc:	2300      	movs	r3, #0
 8005ede:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
	}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b086      	sub	sp, #24
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10d      	bne.n	8005f28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d14d      	bne.n	8005fb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f001 f871 	bl	8007000 <xTaskPriorityDisinherit>
 8005f1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	609a      	str	r2, [r3, #8]
 8005f26:	e043      	b.n	8005fb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d119      	bne.n	8005f62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6858      	ldr	r0, [r3, #4]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	461a      	mov	r2, r3
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	f00c fba1 	bl	8012680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	441a      	add	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d32b      	bcc.n	8005fb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	605a      	str	r2, [r3, #4]
 8005f60:	e026      	b.n	8005fb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	68d8      	ldr	r0, [r3, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	f00c fb87 	bl	8012680 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	425b      	negs	r3, r3
 8005f7c:	441a      	add	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d207      	bcs.n	8005f9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	425b      	negs	r3, r3
 8005f98:	441a      	add	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d105      	bne.n	8005fb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fb8:	697b      	ldr	r3, [r7, #20]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b082      	sub	sp, #8
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d018      	beq.n	8006006 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	441a      	add	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d303      	bcc.n	8005ff6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68d9      	ldr	r1, [r3, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	461a      	mov	r2, r3
 8006000:	6838      	ldr	r0, [r7, #0]
 8006002:	f00c fb3d 	bl	8012680 <memcpy>
	}
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006016:	f001 fdc5 	bl	8007ba4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006020:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006022:	e011      	b.n	8006048 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	d012      	beq.n	8006052 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3324      	adds	r3, #36	; 0x24
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fd8d 	bl	8006b50 <xTaskRemoveFromEventList>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800603c:	f000 fe64 	bl	8006d08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	3b01      	subs	r3, #1
 8006044:	b2db      	uxtb	r3, r3
 8006046:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800604c:	2b00      	cmp	r3, #0
 800604e:	dce9      	bgt.n	8006024 <prvUnlockQueue+0x16>
 8006050:	e000      	b.n	8006054 <prvUnlockQueue+0x46>
					break;
 8006052:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	22ff      	movs	r2, #255	; 0xff
 8006058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800605c:	f001 fdd2 	bl	8007c04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006060:	f001 fda0 	bl	8007ba4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800606a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800606c:	e011      	b.n	8006092 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d012      	beq.n	800609c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3310      	adds	r3, #16
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fd68 	bl	8006b50 <xTaskRemoveFromEventList>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006086:	f000 fe3f 	bl	8006d08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800608a:	7bbb      	ldrb	r3, [r7, #14]
 800608c:	3b01      	subs	r3, #1
 800608e:	b2db      	uxtb	r3, r3
 8006090:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006096:	2b00      	cmp	r3, #0
 8006098:	dce9      	bgt.n	800606e <prvUnlockQueue+0x60>
 800609a:	e000      	b.n	800609e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800609c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	22ff      	movs	r2, #255	; 0xff
 80060a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060a6:	f001 fdad 	bl	8007c04 <vPortExitCritical>
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060ba:	f001 fd73 	bl	8007ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060c6:	2301      	movs	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	e001      	b.n	80060d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060d0:	f001 fd98 	bl	8007c04 <vPortExitCritical>

	return xReturn;
 80060d4:	68fb      	ldr	r3, [r7, #12]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060e6:	f001 fd5d 	bl	8007ba4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d102      	bne.n	80060fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060f6:	2301      	movs	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]
 80060fa:	e001      	b.n	8006100 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006100:	f001 fd80 	bl	8007c04 <vPortExitCritical>

	return xReturn;
 8006104:	68fb      	ldr	r3, [r7, #12]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800611a:	2300      	movs	r3, #0
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e014      	b.n	800614a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006120:	4a0f      	ldr	r2, [pc, #60]	; (8006160 <vQueueAddToRegistry+0x50>)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800612c:	490c      	ldr	r1, [pc, #48]	; (8006160 <vQueueAddToRegistry+0x50>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <vQueueAddToRegistry+0x50>)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4413      	add	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006142:	e006      	b.n	8006152 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3301      	adds	r3, #1
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b07      	cmp	r3, #7
 800614e:	d9e7      	bls.n	8006120 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	2000e4a0 	.word	0x2000e4a0

08006164 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e016      	b.n	80061a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006172:	4a10      	ldr	r2, [pc, #64]	; (80061b4 <vQueueUnregisterQueue+0x50>)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	4413      	add	r3, r2
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	429a      	cmp	r2, r3
 8006180:	d10b      	bne.n	800619a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006182:	4a0c      	ldr	r2, [pc, #48]	; (80061b4 <vQueueUnregisterQueue+0x50>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2100      	movs	r1, #0
 8006188:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800618c:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <vQueueUnregisterQueue+0x50>)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	4413      	add	r3, r2
 8006194:	2200      	movs	r2, #0
 8006196:	605a      	str	r2, [r3, #4]
				break;
 8006198:	e006      	b.n	80061a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2b07      	cmp	r3, #7
 80061a4:	d9e5      	bls.n	8006172 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	2000e4a0 	.word	0x2000e4a0

080061b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061c8:	f001 fcec 	bl	8007ba4 <vPortEnterCritical>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d8:	d103      	bne.n	80061e2 <vQueueWaitForMessageRestricted+0x2a>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061e8:	b25b      	sxtb	r3, r3
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d103      	bne.n	80061f8 <vQueueWaitForMessageRestricted+0x40>
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f8:	f001 fd04 	bl	8007c04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006200:	2b00      	cmp	r3, #0
 8006202:	d106      	bne.n	8006212 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	3324      	adds	r3, #36	; 0x24
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fc73 	bl	8006af8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006212:	6978      	ldr	r0, [r7, #20]
 8006214:	f7ff fefb 	bl	800600e <prvUnlockQueue>
	}
 8006218:	bf00      	nop
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08e      	sub	sp, #56	; 0x38
 8006224:	af04      	add	r7, sp, #16
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	623b      	str	r3, [r7, #32]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800624a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <xTaskCreateStatic+0x46>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	61fb      	str	r3, [r7, #28]
}
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006266:	23bc      	movs	r3, #188	; 0xbc
 8006268:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2bbc      	cmp	r3, #188	; 0xbc
 800626e:	d00a      	beq.n	8006286 <xTaskCreateStatic+0x66>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	61bb      	str	r3, [r7, #24]
}
 8006282:	bf00      	nop
 8006284:	e7fe      	b.n	8006284 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006286:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628a:	2b00      	cmp	r3, #0
 800628c:	d01e      	beq.n	80062cc <xTaskCreateStatic+0xac>
 800628e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01b      	beq.n	80062cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800629c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	2202      	movs	r2, #2
 80062a2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062a6:	2300      	movs	r3, #0
 80062a8:	9303      	str	r3, [sp, #12]
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	9302      	str	r3, [sp, #8]
 80062ae:	f107 0314 	add.w	r3, r7, #20
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 f850 	bl	8006364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062c6:	f000 f8f3 	bl	80064b0 <prvAddNewTaskToReadyList>
 80062ca:	e001      	b.n	80062d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062d0:	697b      	ldr	r3, [r7, #20]
	}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3728      	adds	r7, #40	; 0x28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b08c      	sub	sp, #48	; 0x30
 80062de:	af04      	add	r7, sp, #16
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	603b      	str	r3, [r7, #0]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 fd7a 	bl	8007de8 <pvPortMalloc>
 80062f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00e      	beq.n	800631a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062fc:	20bc      	movs	r0, #188	; 0xbc
 80062fe:	f001 fd73 	bl	8007de8 <pvPortMalloc>
 8006302:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
 8006310:	e005      	b.n	800631e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006312:	6978      	ldr	r0, [r7, #20]
 8006314:	f001 fe34 	bl	8007f80 <vPortFree>
 8006318:	e001      	b.n	800631e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d017      	beq.n	8006354 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800632c:	88fa      	ldrh	r2, [r7, #6]
 800632e:	2300      	movs	r3, #0
 8006330:	9303      	str	r3, [sp, #12]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	9302      	str	r3, [sp, #8]
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	9301      	str	r3, [sp, #4]
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f80e 	bl	8006364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006348:	69f8      	ldr	r0, [r7, #28]
 800634a:	f000 f8b1 	bl	80064b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800634e:	2301      	movs	r3, #1
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	e002      	b.n	800635a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006354:	f04f 33ff 	mov.w	r3, #4294967295
 8006358:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800635a:	69bb      	ldr	r3, [r7, #24]
	}
 800635c:	4618      	mov	r0, r3
 800635e:	3720      	adds	r7, #32
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	461a      	mov	r2, r3
 800637c:	21a5      	movs	r1, #165	; 0xa5
 800637e:	f00c f98d 	bl	801269c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800638c:	3b01      	subs	r3, #1
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	f023 0307 	bic.w	r3, r3, #7
 800639a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	617b      	str	r3, [r7, #20]
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01f      	beq.n	8006402 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063c2:	2300      	movs	r3, #0
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	e012      	b.n	80063ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	7819      	ldrb	r1, [r3, #0]
 80063d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	4413      	add	r3, r2
 80063d6:	3334      	adds	r3, #52	; 0x34
 80063d8:	460a      	mov	r2, r1
 80063da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	4413      	add	r3, r2
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d006      	beq.n	80063f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	3301      	adds	r3, #1
 80063ec:	61fb      	str	r3, [r7, #28]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	2b0f      	cmp	r3, #15
 80063f2:	d9e9      	bls.n	80063c8 <prvInitialiseNewTask+0x64>
 80063f4:	e000      	b.n	80063f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80063f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006400:	e003      	b.n	800640a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	2b37      	cmp	r3, #55	; 0x37
 800640e:	d901      	bls.n	8006414 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006410:	2337      	movs	r3, #55	; 0x37
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006418:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800641e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	2200      	movs	r2, #0
 8006424:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	3304      	adds	r3, #4
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe fda0 	bl	8004f70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006432:	3318      	adds	r3, #24
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fd9b 	bl	8004f70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800643e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800644e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	2200      	movs	r2, #0
 8006454:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	2200      	movs	r2, #0
 800645c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	3354      	adds	r3, #84	; 0x54
 8006464:	2260      	movs	r2, #96	; 0x60
 8006466:	2100      	movs	r1, #0
 8006468:	4618      	mov	r0, r3
 800646a:	f00c f917 	bl	801269c <memset>
 800646e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006470:	4a0c      	ldr	r2, [pc, #48]	; (80064a4 <prvInitialiseNewTask+0x140>)
 8006472:	659a      	str	r2, [r3, #88]	; 0x58
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	4a0c      	ldr	r2, [pc, #48]	; (80064a8 <prvInitialiseNewTask+0x144>)
 8006478:	65da      	str	r2, [r3, #92]	; 0x5c
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	4a0b      	ldr	r2, [pc, #44]	; (80064ac <prvInitialiseNewTask+0x148>)
 800647e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	69b8      	ldr	r0, [r7, #24]
 8006486:	f001 fa61 	bl	800794c <pxPortInitialiseStack>
 800648a:	4602      	mov	r2, r0
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d002      	beq.n	800649c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800649a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800649c:	bf00      	nop
 800649e:	3720      	adds	r7, #32
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	08016238 	.word	0x08016238
 80064a8:	08016258 	.word	0x08016258
 80064ac:	08016218 	.word	0x08016218

080064b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064b8:	f001 fb74 	bl	8007ba4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064bc:	4b2d      	ldr	r3, [pc, #180]	; (8006574 <prvAddNewTaskToReadyList+0xc4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3301      	adds	r3, #1
 80064c2:	4a2c      	ldr	r2, [pc, #176]	; (8006574 <prvAddNewTaskToReadyList+0xc4>)
 80064c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064c6:	4b2c      	ldr	r3, [pc, #176]	; (8006578 <prvAddNewTaskToReadyList+0xc8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064ce:	4a2a      	ldr	r2, [pc, #168]	; (8006578 <prvAddNewTaskToReadyList+0xc8>)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064d4:	4b27      	ldr	r3, [pc, #156]	; (8006574 <prvAddNewTaskToReadyList+0xc4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d110      	bne.n	80064fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064dc:	f000 fc38 	bl	8006d50 <prvInitialiseTaskLists>
 80064e0:	e00d      	b.n	80064fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064e2:	4b26      	ldr	r3, [pc, #152]	; (800657c <prvAddNewTaskToReadyList+0xcc>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064ea:	4b23      	ldr	r3, [pc, #140]	; (8006578 <prvAddNewTaskToReadyList+0xc8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d802      	bhi.n	80064fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064f8:	4a1f      	ldr	r2, [pc, #124]	; (8006578 <prvAddNewTaskToReadyList+0xc8>)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064fe:	4b20      	ldr	r3, [pc, #128]	; (8006580 <prvAddNewTaskToReadyList+0xd0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3301      	adds	r3, #1
 8006504:	4a1e      	ldr	r2, [pc, #120]	; (8006580 <prvAddNewTaskToReadyList+0xd0>)
 8006506:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006508:	4b1d      	ldr	r3, [pc, #116]	; (8006580 <prvAddNewTaskToReadyList+0xd0>)
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006514:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <prvAddNewTaskToReadyList+0xd4>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d903      	bls.n	8006524 <prvAddNewTaskToReadyList+0x74>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	4a18      	ldr	r2, [pc, #96]	; (8006584 <prvAddNewTaskToReadyList+0xd4>)
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	4613      	mov	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4a15      	ldr	r2, [pc, #84]	; (8006588 <prvAddNewTaskToReadyList+0xd8>)
 8006532:	441a      	add	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3304      	adds	r3, #4
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f7fe fd25 	bl	8004f8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006540:	f001 fb60 	bl	8007c04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006544:	4b0d      	ldr	r3, [pc, #52]	; (800657c <prvAddNewTaskToReadyList+0xcc>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00e      	beq.n	800656a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800654c:	4b0a      	ldr	r3, [pc, #40]	; (8006578 <prvAddNewTaskToReadyList+0xc8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	429a      	cmp	r2, r3
 8006558:	d207      	bcs.n	800656a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800655a:	4b0c      	ldr	r3, [pc, #48]	; (800658c <prvAddNewTaskToReadyList+0xdc>)
 800655c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200012f8 	.word	0x200012f8
 8006578:	20000e24 	.word	0x20000e24
 800657c:	20001304 	.word	0x20001304
 8006580:	20001314 	.word	0x20001314
 8006584:	20001300 	.word	0x20001300
 8006588:	20000e28 	.word	0x20000e28
 800658c:	e000ed04 	.word	0xe000ed04

08006590 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d017      	beq.n	80065d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065a2:	4b13      	ldr	r3, [pc, #76]	; (80065f0 <vTaskDelay+0x60>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <vTaskDelay+0x30>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	60bb      	str	r3, [r7, #8]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065c0:	f000 f88a 	bl	80066d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065c4:	2100      	movs	r1, #0
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fe1e 	bl	8007208 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065cc:	f000 f892 	bl	80066f4 <xTaskResumeAll>
 80065d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d107      	bne.n	80065e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <vTaskDelay+0x64>)
 80065da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065de:	601a      	str	r2, [r3, #0]
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20001320 	.word	0x20001320
 80065f4:	e000ed04 	.word	0xe000ed04

080065f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006602:	2300      	movs	r3, #0
 8006604:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006606:	463a      	mov	r2, r7
 8006608:	1d39      	adds	r1, r7, #4
 800660a:	f107 0308 	add.w	r3, r7, #8
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe fc5a 	bl	8004ec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	9202      	str	r2, [sp, #8]
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	2300      	movs	r3, #0
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	460a      	mov	r2, r1
 8006626:	4924      	ldr	r1, [pc, #144]	; (80066b8 <vTaskStartScheduler+0xc0>)
 8006628:	4824      	ldr	r0, [pc, #144]	; (80066bc <vTaskStartScheduler+0xc4>)
 800662a:	f7ff fdf9 	bl	8006220 <xTaskCreateStatic>
 800662e:	4603      	mov	r3, r0
 8006630:	4a23      	ldr	r2, [pc, #140]	; (80066c0 <vTaskStartScheduler+0xc8>)
 8006632:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006634:	4b22      	ldr	r3, [pc, #136]	; (80066c0 <vTaskStartScheduler+0xc8>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800663c:	2301      	movs	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	e001      	b.n	8006646 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006642:	2300      	movs	r3, #0
 8006644:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d102      	bne.n	8006652 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800664c:	f000 fe30 	bl	80072b0 <xTimerCreateTimerTask>
 8006650:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d11b      	bne.n	8006690 <vTaskStartScheduler+0x98>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	613b      	str	r3, [r7, #16]
}
 800666a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800666c:	4b15      	ldr	r3, [pc, #84]	; (80066c4 <vTaskStartScheduler+0xcc>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3354      	adds	r3, #84	; 0x54
 8006672:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <vTaskStartScheduler+0xd0>)
 8006674:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006676:	4b15      	ldr	r3, [pc, #84]	; (80066cc <vTaskStartScheduler+0xd4>)
 8006678:	f04f 32ff 	mov.w	r2, #4294967295
 800667c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800667e:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <vTaskStartScheduler+0xd8>)
 8006680:	2201      	movs	r2, #1
 8006682:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006684:	4b13      	ldr	r3, [pc, #76]	; (80066d4 <vTaskStartScheduler+0xdc>)
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800668a:	f001 f9e9 	bl	8007a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800668e:	e00e      	b.n	80066ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006696:	d10a      	bne.n	80066ae <vTaskStartScheduler+0xb6>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	60fb      	str	r3, [r7, #12]
}
 80066aa:	bf00      	nop
 80066ac:	e7fe      	b.n	80066ac <vTaskStartScheduler+0xb4>
}
 80066ae:	bf00      	nop
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	080135dc 	.word	0x080135dc
 80066bc:	08006d21 	.word	0x08006d21
 80066c0:	2000131c 	.word	0x2000131c
 80066c4:	20000e24 	.word	0x20000e24
 80066c8:	2000001c 	.word	0x2000001c
 80066cc:	20001318 	.word	0x20001318
 80066d0:	20001304 	.word	0x20001304
 80066d4:	200012fc 	.word	0x200012fc

080066d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80066dc:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <vTaskSuspendAll+0x18>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	4a03      	ldr	r2, [pc, #12]	; (80066f0 <vTaskSuspendAll+0x18>)
 80066e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80066e6:	bf00      	nop
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	20001320 	.word	0x20001320

080066f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006702:	4b42      	ldr	r3, [pc, #264]	; (800680c <xTaskResumeAll+0x118>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10a      	bne.n	8006720 <xTaskResumeAll+0x2c>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	603b      	str	r3, [r7, #0]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006720:	f001 fa40 	bl	8007ba4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006724:	4b39      	ldr	r3, [pc, #228]	; (800680c <xTaskResumeAll+0x118>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3b01      	subs	r3, #1
 800672a:	4a38      	ldr	r2, [pc, #224]	; (800680c <xTaskResumeAll+0x118>)
 800672c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800672e:	4b37      	ldr	r3, [pc, #220]	; (800680c <xTaskResumeAll+0x118>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d162      	bne.n	80067fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006736:	4b36      	ldr	r3, [pc, #216]	; (8006810 <xTaskResumeAll+0x11c>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d05e      	beq.n	80067fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800673e:	e02f      	b.n	80067a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006740:	4b34      	ldr	r3, [pc, #208]	; (8006814 <xTaskResumeAll+0x120>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3318      	adds	r3, #24
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe fc79 	bl	8005044 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3304      	adds	r3, #4
 8006756:	4618      	mov	r0, r3
 8006758:	f7fe fc74 	bl	8005044 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006760:	4b2d      	ldr	r3, [pc, #180]	; (8006818 <xTaskResumeAll+0x124>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	429a      	cmp	r2, r3
 8006766:	d903      	bls.n	8006770 <xTaskResumeAll+0x7c>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	4a2a      	ldr	r2, [pc, #168]	; (8006818 <xTaskResumeAll+0x124>)
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4a27      	ldr	r2, [pc, #156]	; (800681c <xTaskResumeAll+0x128>)
 800677e:	441a      	add	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f7fe fbff 	bl	8004f8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006790:	4b23      	ldr	r3, [pc, #140]	; (8006820 <xTaskResumeAll+0x12c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006796:	429a      	cmp	r2, r3
 8006798:	d302      	bcc.n	80067a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800679a:	4b22      	ldr	r3, [pc, #136]	; (8006824 <xTaskResumeAll+0x130>)
 800679c:	2201      	movs	r2, #1
 800679e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067a0:	4b1c      	ldr	r3, [pc, #112]	; (8006814 <xTaskResumeAll+0x120>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d1cb      	bne.n	8006740 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067ae:	f000 fb71 	bl	8006e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067b2:	4b1d      	ldr	r3, [pc, #116]	; (8006828 <xTaskResumeAll+0x134>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d010      	beq.n	80067e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067be:	f000 f859 	bl	8006874 <xTaskIncrementTick>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067c8:	4b16      	ldr	r3, [pc, #88]	; (8006824 <xTaskResumeAll+0x130>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f1      	bne.n	80067be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <xTaskResumeAll+0x134>)
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067e0:	4b10      	ldr	r3, [pc, #64]	; (8006824 <xTaskResumeAll+0x130>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <xTaskResumeAll+0x138>)
 80067ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067fc:	f001 fa02 	bl	8007c04 <vPortExitCritical>

	return xAlreadyYielded;
 8006800:	68bb      	ldr	r3, [r7, #8]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20001320 	.word	0x20001320
 8006810:	200012f8 	.word	0x200012f8
 8006814:	200012b8 	.word	0x200012b8
 8006818:	20001300 	.word	0x20001300
 800681c:	20000e28 	.word	0x20000e28
 8006820:	20000e24 	.word	0x20000e24
 8006824:	2000130c 	.word	0x2000130c
 8006828:	20001308 	.word	0x20001308
 800682c:	e000ed04 	.word	0xe000ed04

08006830 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <xTaskGetTickCount+0x1c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800683c:	687b      	ldr	r3, [r7, #4]
}
 800683e:	4618      	mov	r0, r3
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop
 800684c:	200012fc 	.word	0x200012fc

08006850 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006856:	f001 fa87 	bl	8007d68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800685a:	2300      	movs	r3, #0
 800685c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800685e:	4b04      	ldr	r3, [pc, #16]	; (8006870 <xTaskGetTickCountFromISR+0x20>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006864:	683b      	ldr	r3, [r7, #0]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	200012fc 	.word	0x200012fc

08006874 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800687a:	2300      	movs	r3, #0
 800687c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800687e:	4b4f      	ldr	r3, [pc, #316]	; (80069bc <xTaskIncrementTick+0x148>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f040 808f 	bne.w	80069a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006888:	4b4d      	ldr	r3, [pc, #308]	; (80069c0 <xTaskIncrementTick+0x14c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	3301      	adds	r3, #1
 800688e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006890:	4a4b      	ldr	r2, [pc, #300]	; (80069c0 <xTaskIncrementTick+0x14c>)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d120      	bne.n	80068de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800689c:	4b49      	ldr	r3, [pc, #292]	; (80069c4 <xTaskIncrementTick+0x150>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <xTaskIncrementTick+0x48>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	603b      	str	r3, [r7, #0]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <xTaskIncrementTick+0x46>
 80068bc:	4b41      	ldr	r3, [pc, #260]	; (80069c4 <xTaskIncrementTick+0x150>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	4b41      	ldr	r3, [pc, #260]	; (80069c8 <xTaskIncrementTick+0x154>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a3f      	ldr	r2, [pc, #252]	; (80069c4 <xTaskIncrementTick+0x150>)
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	4a3f      	ldr	r2, [pc, #252]	; (80069c8 <xTaskIncrementTick+0x154>)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	4b3e      	ldr	r3, [pc, #248]	; (80069cc <xTaskIncrementTick+0x158>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	3301      	adds	r3, #1
 80068d6:	4a3d      	ldr	r2, [pc, #244]	; (80069cc <xTaskIncrementTick+0x158>)
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	f000 fadb 	bl	8006e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068de:	4b3c      	ldr	r3, [pc, #240]	; (80069d0 <xTaskIncrementTick+0x15c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d349      	bcc.n	800697c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068e8:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <xTaskIncrementTick+0x150>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d104      	bne.n	80068fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f2:	4b37      	ldr	r3, [pc, #220]	; (80069d0 <xTaskIncrementTick+0x15c>)
 80068f4:	f04f 32ff 	mov.w	r2, #4294967295
 80068f8:	601a      	str	r2, [r3, #0]
					break;
 80068fa:	e03f      	b.n	800697c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068fc:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <xTaskIncrementTick+0x150>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d203      	bcs.n	800691c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006914:	4a2e      	ldr	r2, [pc, #184]	; (80069d0 <xTaskIncrementTick+0x15c>)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800691a:	e02f      	b.n	800697c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	3304      	adds	r3, #4
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe fb8f 	bl	8005044 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692a:	2b00      	cmp	r3, #0
 800692c:	d004      	beq.n	8006938 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	3318      	adds	r3, #24
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fb86 	bl	8005044 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <xTaskIncrementTick+0x160>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d903      	bls.n	800694c <xTaskIncrementTick+0xd8>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	4a22      	ldr	r2, [pc, #136]	; (80069d4 <xTaskIncrementTick+0x160>)
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4a1f      	ldr	r2, [pc, #124]	; (80069d8 <xTaskIncrementTick+0x164>)
 800695a:	441a      	add	r2, r3
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	3304      	adds	r3, #4
 8006960:	4619      	mov	r1, r3
 8006962:	4610      	mov	r0, r2
 8006964:	f7fe fb11 	bl	8004f8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696c:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <xTaskIncrementTick+0x168>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	429a      	cmp	r2, r3
 8006974:	d3b8      	bcc.n	80068e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006976:	2301      	movs	r3, #1
 8006978:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800697a:	e7b5      	b.n	80068e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800697c:	4b17      	ldr	r3, [pc, #92]	; (80069dc <xTaskIncrementTick+0x168>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006982:	4915      	ldr	r1, [pc, #84]	; (80069d8 <xTaskIncrementTick+0x164>)
 8006984:	4613      	mov	r3, r2
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d901      	bls.n	8006998 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006998:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <xTaskIncrementTick+0x16c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d007      	beq.n	80069b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80069a0:	2301      	movs	r3, #1
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e004      	b.n	80069b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <xTaskIncrementTick+0x170>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3301      	adds	r3, #1
 80069ac:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <xTaskIncrementTick+0x170>)
 80069ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80069b0:	697b      	ldr	r3, [r7, #20]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	20001320 	.word	0x20001320
 80069c0:	200012fc 	.word	0x200012fc
 80069c4:	200012b0 	.word	0x200012b0
 80069c8:	200012b4 	.word	0x200012b4
 80069cc:	20001310 	.word	0x20001310
 80069d0:	20001318 	.word	0x20001318
 80069d4:	20001300 	.word	0x20001300
 80069d8:	20000e28 	.word	0x20000e28
 80069dc:	20000e24 	.word	0x20000e24
 80069e0:	2000130c 	.word	0x2000130c
 80069e4:	20001308 	.word	0x20001308

080069e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069ee:	4b2a      	ldr	r3, [pc, #168]	; (8006a98 <vTaskSwitchContext+0xb0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069f6:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <vTaskSwitchContext+0xb4>)
 80069f8:	2201      	movs	r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069fc:	e046      	b.n	8006a8c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80069fe:	4b27      	ldr	r3, [pc, #156]	; (8006a9c <vTaskSwitchContext+0xb4>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a04:	4b26      	ldr	r3, [pc, #152]	; (8006aa0 <vTaskSwitchContext+0xb8>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e010      	b.n	8006a2e <vTaskSwitchContext+0x46>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <vTaskSwitchContext+0x40>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	607b      	str	r3, [r7, #4]
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <vTaskSwitchContext+0x3e>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	491d      	ldr	r1, [pc, #116]	; (8006aa4 <vTaskSwitchContext+0xbc>)
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	440b      	add	r3, r1
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0e4      	beq.n	8006a0c <vTaskSwitchContext+0x24>
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4a15      	ldr	r2, [pc, #84]	; (8006aa4 <vTaskSwitchContext+0xbc>)
 8006a4e:	4413      	add	r3, r2
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	605a      	str	r2, [r3, #4]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	3308      	adds	r3, #8
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d104      	bne.n	8006a72 <vTaskSwitchContext+0x8a>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	605a      	str	r2, [r3, #4]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4a0b      	ldr	r2, [pc, #44]	; (8006aa8 <vTaskSwitchContext+0xc0>)
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	4a08      	ldr	r2, [pc, #32]	; (8006aa0 <vTaskSwitchContext+0xb8>)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <vTaskSwitchContext+0xc0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	3354      	adds	r3, #84	; 0x54
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <vTaskSwitchContext+0xc4>)
 8006a8a:	6013      	str	r3, [r2, #0]
}
 8006a8c:	bf00      	nop
 8006a8e:	3714      	adds	r7, #20
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	20001320 	.word	0x20001320
 8006a9c:	2000130c 	.word	0x2000130c
 8006aa0:	20001300 	.word	0x20001300
 8006aa4:	20000e28 	.word	0x20000e28
 8006aa8:	20000e24 	.word	0x20000e24
 8006aac:	2000001c 	.word	0x2000001c

08006ab0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	60fb      	str	r3, [r7, #12]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ad6:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <vTaskPlaceOnEventList+0x44>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3318      	adds	r3, #24
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fe fa77 	bl	8004fd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ae4:	2101      	movs	r1, #1
 8006ae6:	6838      	ldr	r0, [r7, #0]
 8006ae8:	f000 fb8e 	bl	8007208 <prvAddCurrentTaskToDelayedList>
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000e24 	.word	0x20000e24

08006af8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	617b      	str	r3, [r7, #20]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b20:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <vTaskPlaceOnEventListRestricted+0x54>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3318      	adds	r3, #24
 8006b26:	4619      	mov	r1, r3
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f7fe fa2e 	bl	8004f8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b34:	f04f 33ff 	mov.w	r3, #4294967295
 8006b38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	68b8      	ldr	r0, [r7, #8]
 8006b3e:	f000 fb63 	bl	8007208 <prvAddCurrentTaskToDelayedList>
	}
 8006b42:	bf00      	nop
 8006b44:	3718      	adds	r7, #24
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000e24 	.word	0x20000e24

08006b50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10a      	bne.n	8006b7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	60fb      	str	r3, [r7, #12]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	3318      	adds	r3, #24
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fe fa5f 	bl	8005044 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b86:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <xTaskRemoveFromEventList+0xb0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d11d      	bne.n	8006bca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fa56 	bl	8005044 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4b19      	ldr	r3, [pc, #100]	; (8006c04 <xTaskRemoveFromEventList+0xb4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d903      	bls.n	8006bac <xTaskRemoveFromEventList+0x5c>
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	4a16      	ldr	r2, [pc, #88]	; (8006c04 <xTaskRemoveFromEventList+0xb4>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4a13      	ldr	r2, [pc, #76]	; (8006c08 <xTaskRemoveFromEventList+0xb8>)
 8006bba:	441a      	add	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fe f9e1 	bl	8004f8a <vListInsertEnd>
 8006bc8:	e005      	b.n	8006bd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	3318      	adds	r3, #24
 8006bce:	4619      	mov	r1, r3
 8006bd0:	480e      	ldr	r0, [pc, #56]	; (8006c0c <xTaskRemoveFromEventList+0xbc>)
 8006bd2:	f7fe f9da 	bl	8004f8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bda:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <xTaskRemoveFromEventList+0xc0>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d905      	bls.n	8006bf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006be8:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <xTaskRemoveFromEventList+0xc4>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	e001      	b.n	8006bf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006bf4:	697b      	ldr	r3, [r7, #20]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3718      	adds	r7, #24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20001320 	.word	0x20001320
 8006c04:	20001300 	.word	0x20001300
 8006c08:	20000e28 	.word	0x20000e28
 8006c0c:	200012b8 	.word	0x200012b8
 8006c10:	20000e24 	.word	0x20000e24
 8006c14:	2000130c 	.word	0x2000130c

08006c18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <vTaskInternalSetTimeOutState+0x24>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <vTaskInternalSetTimeOutState+0x28>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	605a      	str	r2, [r3, #4]
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20001310 	.word	0x20001310
 8006c40:	200012fc 	.word	0x200012fc

08006c44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	613b      	str	r3, [r7, #16]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	60fb      	str	r3, [r7, #12]
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c86:	f000 ff8d 	bl	8007ba4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c8a:	4b1d      	ldr	r3, [pc, #116]	; (8006d00 <xTaskCheckForTimeOut+0xbc>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	d102      	bne.n	8006caa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	e023      	b.n	8006cf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b15      	ldr	r3, [pc, #84]	; (8006d04 <xTaskCheckForTimeOut+0xc0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d007      	beq.n	8006cc6 <xTaskCheckForTimeOut+0x82>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d302      	bcc.n	8006cc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	e015      	b.n	8006cf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d20b      	bcs.n	8006ce8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	1ad2      	subs	r2, r2, r3
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f7ff ff9b 	bl	8006c18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
 8006ce6:	e004      	b.n	8006cf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cf2:	f000 ff87 	bl	8007c04 <vPortExitCritical>

	return xReturn;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200012fc 	.word	0x200012fc
 8006d04:	20001310 	.word	0x20001310

08006d08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d0c:	4b03      	ldr	r3, [pc, #12]	; (8006d1c <vTaskMissedYield+0x14>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	601a      	str	r2, [r3, #0]
}
 8006d12:	bf00      	nop
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	2000130c 	.word	0x2000130c

08006d20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d28:	f000 f852 	bl	8006dd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <prvIdleTask+0x28>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d9f9      	bls.n	8006d28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <prvIdleTask+0x2c>)
 8006d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d44:	e7f0      	b.n	8006d28 <prvIdleTask+0x8>
 8006d46:	bf00      	nop
 8006d48:	20000e28 	.word	0x20000e28
 8006d4c:	e000ed04 	.word	0xe000ed04

08006d50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	e00c      	b.n	8006d76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4a12      	ldr	r2, [pc, #72]	; (8006db0 <prvInitialiseTaskLists+0x60>)
 8006d68:	4413      	add	r3, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe f8e0 	bl	8004f30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3301      	adds	r3, #1
 8006d74:	607b      	str	r3, [r7, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b37      	cmp	r3, #55	; 0x37
 8006d7a:	d9ef      	bls.n	8006d5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d7c:	480d      	ldr	r0, [pc, #52]	; (8006db4 <prvInitialiseTaskLists+0x64>)
 8006d7e:	f7fe f8d7 	bl	8004f30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d82:	480d      	ldr	r0, [pc, #52]	; (8006db8 <prvInitialiseTaskLists+0x68>)
 8006d84:	f7fe f8d4 	bl	8004f30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d88:	480c      	ldr	r0, [pc, #48]	; (8006dbc <prvInitialiseTaskLists+0x6c>)
 8006d8a:	f7fe f8d1 	bl	8004f30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d8e:	480c      	ldr	r0, [pc, #48]	; (8006dc0 <prvInitialiseTaskLists+0x70>)
 8006d90:	f7fe f8ce 	bl	8004f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d94:	480b      	ldr	r0, [pc, #44]	; (8006dc4 <prvInitialiseTaskLists+0x74>)
 8006d96:	f7fe f8cb 	bl	8004f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <prvInitialiseTaskLists+0x78>)
 8006d9c:	4a05      	ldr	r2, [pc, #20]	; (8006db4 <prvInitialiseTaskLists+0x64>)
 8006d9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006da0:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <prvInitialiseTaskLists+0x7c>)
 8006da2:	4a05      	ldr	r2, [pc, #20]	; (8006db8 <prvInitialiseTaskLists+0x68>)
 8006da4:	601a      	str	r2, [r3, #0]
}
 8006da6:	bf00      	nop
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	20000e28 	.word	0x20000e28
 8006db4:	20001288 	.word	0x20001288
 8006db8:	2000129c 	.word	0x2000129c
 8006dbc:	200012b8 	.word	0x200012b8
 8006dc0:	200012cc 	.word	0x200012cc
 8006dc4:	200012e4 	.word	0x200012e4
 8006dc8:	200012b0 	.word	0x200012b0
 8006dcc:	200012b4 	.word	0x200012b4

08006dd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dd6:	e019      	b.n	8006e0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dd8:	f000 fee4 	bl	8007ba4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ddc:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <prvCheckTasksWaitingTermination+0x50>)
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	3304      	adds	r3, #4
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe f92b 	bl	8005044 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dee:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <prvCheckTasksWaitingTermination+0x54>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	4a0b      	ldr	r2, [pc, #44]	; (8006e24 <prvCheckTasksWaitingTermination+0x54>)
 8006df6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006df8:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <prvCheckTasksWaitingTermination+0x58>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	4a0a      	ldr	r2, [pc, #40]	; (8006e28 <prvCheckTasksWaitingTermination+0x58>)
 8006e00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e02:	f000 feff 	bl	8007c04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f810 	bl	8006e2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e0c:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <prvCheckTasksWaitingTermination+0x58>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e1      	bne.n	8006dd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	200012cc 	.word	0x200012cc
 8006e24:	200012f8 	.word	0x200012f8
 8006e28:	200012e0 	.word	0x200012e0

08006e2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3354      	adds	r3, #84	; 0x54
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f00c f835 	bl	8012ea8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d108      	bne.n	8006e5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 f897 	bl	8007f80 <vPortFree>
				vPortFree( pxTCB );
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 f894 	bl	8007f80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e58:	e018      	b.n	8006e8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d103      	bne.n	8006e6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f88b 	bl	8007f80 <vPortFree>
	}
 8006e6a:	e00f      	b.n	8006e8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d00a      	beq.n	8006e8c <prvDeleteTCB+0x60>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	60fb      	str	r3, [r7, #12]
}
 8006e88:	bf00      	nop
 8006e8a:	e7fe      	b.n	8006e8a <prvDeleteTCB+0x5e>
	}
 8006e8c:	bf00      	nop
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <prvResetNextTaskUnblockTime+0x38>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d104      	bne.n	8006eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ea4:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8006ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006eac:	e008      	b.n	8006ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eae:	4b07      	ldr	r3, [pc, #28]	; (8006ecc <prvResetNextTaskUnblockTime+0x38>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4a04      	ldr	r2, [pc, #16]	; (8006ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8006ebe:	6013      	str	r3, [r2, #0]
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	200012b0 	.word	0x200012b0
 8006ed0:	20001318 	.word	0x20001318

08006ed4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006eda:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <xTaskGetCurrentTaskHandle+0x1c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006ee0:	687b      	ldr	r3, [r7, #4]
	}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000e24 	.word	0x20000e24

08006ef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006efa:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <xTaskGetSchedulerState+0x34>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f02:	2301      	movs	r3, #1
 8006f04:	607b      	str	r3, [r7, #4]
 8006f06:	e008      	b.n	8006f1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f08:	4b08      	ldr	r3, [pc, #32]	; (8006f2c <xTaskGetSchedulerState+0x38>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f10:	2302      	movs	r3, #2
 8006f12:	607b      	str	r3, [r7, #4]
 8006f14:	e001      	b.n	8006f1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f16:	2300      	movs	r3, #0
 8006f18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f1a:	687b      	ldr	r3, [r7, #4]
	}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	20001304 	.word	0x20001304
 8006f2c:	20001320 	.word	0x20001320

08006f30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d051      	beq.n	8006fea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4a:	4b2a      	ldr	r3, [pc, #168]	; (8006ff4 <xTaskPriorityInherit+0xc4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d241      	bcs.n	8006fd8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	db06      	blt.n	8006f6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f5c:	4b25      	ldr	r3, [pc, #148]	; (8006ff4 <xTaskPriorityInherit+0xc4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6959      	ldr	r1, [r3, #20]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4a1f      	ldr	r2, [pc, #124]	; (8006ff8 <xTaskPriorityInherit+0xc8>)
 8006f7c:	4413      	add	r3, r2
 8006f7e:	4299      	cmp	r1, r3
 8006f80:	d122      	bne.n	8006fc8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe f85c 	bl	8005044 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f8c:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <xTaskPriorityInherit+0xc4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f9a:	4b18      	ldr	r3, [pc, #96]	; (8006ffc <xTaskPriorityInherit+0xcc>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d903      	bls.n	8006faa <xTaskPriorityInherit+0x7a>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <xTaskPriorityInherit+0xcc>)
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4a10      	ldr	r2, [pc, #64]	; (8006ff8 <xTaskPriorityInherit+0xc8>)
 8006fb8:	441a      	add	r2, r3
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	f7fd ffe2 	bl	8004f8a <vListInsertEnd>
 8006fc6:	e004      	b.n	8006fd2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fc8:	4b0a      	ldr	r3, [pc, #40]	; (8006ff4 <xTaskPriorityInherit+0xc4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	e008      	b.n	8006fea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fdc:	4b05      	ldr	r3, [pc, #20]	; (8006ff4 <xTaskPriorityInherit+0xc4>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d201      	bcs.n	8006fea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006fea:	68fb      	ldr	r3, [r7, #12]
	}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000e24 	.word	0x20000e24
 8006ff8:	20000e28 	.word	0x20000e28
 8006ffc:	20001300 	.word	0x20001300

08007000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d056      	beq.n	80070c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007016:	4b2e      	ldr	r3, [pc, #184]	; (80070d0 <xTaskPriorityDisinherit+0xd0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	429a      	cmp	r2, r3
 800701e:	d00a      	beq.n	8007036 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007024:	f383 8811 	msr	BASEPRI, r3
 8007028:	f3bf 8f6f 	isb	sy
 800702c:	f3bf 8f4f 	dsb	sy
 8007030:	60fb      	str	r3, [r7, #12]
}
 8007032:	bf00      	nop
 8007034:	e7fe      	b.n	8007034 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	60bb      	str	r3, [r7, #8]
}
 8007050:	bf00      	nop
 8007052:	e7fe      	b.n	8007052 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007058:	1e5a      	subs	r2, r3, #1
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007066:	429a      	cmp	r2, r3
 8007068:	d02c      	beq.n	80070c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800706e:	2b00      	cmp	r3, #0
 8007070:	d128      	bne.n	80070c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3304      	adds	r3, #4
 8007076:	4618      	mov	r0, r3
 8007078:	f7fd ffe4 	bl	8005044 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007088:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007094:	4b0f      	ldr	r3, [pc, #60]	; (80070d4 <xTaskPriorityDisinherit+0xd4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d903      	bls.n	80070a4 <xTaskPriorityDisinherit+0xa4>
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	4a0c      	ldr	r2, [pc, #48]	; (80070d4 <xTaskPriorityDisinherit+0xd4>)
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4a09      	ldr	r2, [pc, #36]	; (80070d8 <xTaskPriorityDisinherit+0xd8>)
 80070b2:	441a      	add	r2, r3
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	3304      	adds	r3, #4
 80070b8:	4619      	mov	r1, r3
 80070ba:	4610      	mov	r0, r2
 80070bc:	f7fd ff65 	bl	8004f8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070c4:	697b      	ldr	r3, [r7, #20]
	}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20000e24 	.word	0x20000e24
 80070d4:	20001300 	.word	0x20001300
 80070d8:	20000e28 	.word	0x20000e28

080070dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b088      	sub	sp, #32
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070ea:	2301      	movs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d06a      	beq.n	80071ca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	60fb      	str	r3, [r7, #12]
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	429a      	cmp	r2, r3
 800711a:	d902      	bls.n	8007122 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	61fb      	str	r3, [r7, #28]
 8007120:	e002      	b.n	8007128 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007126:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712c:	69fa      	ldr	r2, [r7, #28]
 800712e:	429a      	cmp	r2, r3
 8007130:	d04b      	beq.n	80071ca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	429a      	cmp	r2, r3
 800713a:	d146      	bne.n	80071ca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800713c:	4b25      	ldr	r3, [pc, #148]	; (80071d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	429a      	cmp	r2, r3
 8007144:	d10a      	bne.n	800715c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714a:	f383 8811 	msr	BASEPRI, r3
 800714e:	f3bf 8f6f 	isb	sy
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	60bb      	str	r3, [r7, #8]
}
 8007158:	bf00      	nop
 800715a:	e7fe      	b.n	800715a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	69fa      	ldr	r2, [r7, #28]
 8007166:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	db04      	blt.n	800717a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	6959      	ldr	r1, [r3, #20]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4a13      	ldr	r2, [pc, #76]	; (80071d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800718a:	4413      	add	r3, r2
 800718c:	4299      	cmp	r1, r3
 800718e:	d11c      	bne.n	80071ca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	3304      	adds	r3, #4
 8007194:	4618      	mov	r0, r3
 8007196:	f7fd ff55 	bl	8005044 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719e:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d903      	bls.n	80071ae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071aa:	4a0c      	ldr	r2, [pc, #48]	; (80071dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80071ac:	6013      	str	r3, [r2, #0]
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4a07      	ldr	r2, [pc, #28]	; (80071d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80071bc:	441a      	add	r2, r3
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4619      	mov	r1, r3
 80071c4:	4610      	mov	r0, r2
 80071c6:	f7fd fee0 	bl	8004f8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071ca:	bf00      	nop
 80071cc:	3720      	adds	r7, #32
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000e24 	.word	0x20000e24
 80071d8:	20000e28 	.word	0x20000e28
 80071dc:	20001300 	.word	0x20001300

080071e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80071e0:	b480      	push	{r7}
 80071e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80071e4:	4b07      	ldr	r3, [pc, #28]	; (8007204 <pvTaskIncrementMutexHeldCount+0x24>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <pvTaskIncrementMutexHeldCount+0x24>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071f2:	3201      	adds	r2, #1
 80071f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80071f6:	4b03      	ldr	r3, [pc, #12]	; (8007204 <pvTaskIncrementMutexHeldCount+0x24>)
 80071f8:	681b      	ldr	r3, [r3, #0]
	}
 80071fa:	4618      	mov	r0, r3
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	20000e24 	.word	0x20000e24

08007208 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007212:	4b21      	ldr	r3, [pc, #132]	; (8007298 <prvAddCurrentTaskToDelayedList+0x90>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007218:	4b20      	ldr	r3, [pc, #128]	; (800729c <prvAddCurrentTaskToDelayedList+0x94>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3304      	adds	r3, #4
 800721e:	4618      	mov	r0, r3
 8007220:	f7fd ff10 	bl	8005044 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722a:	d10a      	bne.n	8007242 <prvAddCurrentTaskToDelayedList+0x3a>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d007      	beq.n	8007242 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007232:	4b1a      	ldr	r3, [pc, #104]	; (800729c <prvAddCurrentTaskToDelayedList+0x94>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3304      	adds	r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	4819      	ldr	r0, [pc, #100]	; (80072a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800723c:	f7fd fea5 	bl	8004f8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007240:	e026      	b.n	8007290 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4413      	add	r3, r2
 8007248:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800724a:	4b14      	ldr	r3, [pc, #80]	; (800729c <prvAddCurrentTaskToDelayedList+0x94>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	429a      	cmp	r2, r3
 8007258:	d209      	bcs.n	800726e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800725a:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	4b0f      	ldr	r3, [pc, #60]	; (800729c <prvAddCurrentTaskToDelayedList+0x94>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3304      	adds	r3, #4
 8007264:	4619      	mov	r1, r3
 8007266:	4610      	mov	r0, r2
 8007268:	f7fd feb3 	bl	8004fd2 <vListInsert>
}
 800726c:	e010      	b.n	8007290 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800726e:	4b0e      	ldr	r3, [pc, #56]	; (80072a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	4b0a      	ldr	r3, [pc, #40]	; (800729c <prvAddCurrentTaskToDelayedList+0x94>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3304      	adds	r3, #4
 8007278:	4619      	mov	r1, r3
 800727a:	4610      	mov	r0, r2
 800727c:	f7fd fea9 	bl	8004fd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007280:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	429a      	cmp	r2, r3
 8007288:	d202      	bcs.n	8007290 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800728a:	4a08      	ldr	r2, [pc, #32]	; (80072ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	6013      	str	r3, [r2, #0]
}
 8007290:	bf00      	nop
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	200012fc 	.word	0x200012fc
 800729c:	20000e24 	.word	0x20000e24
 80072a0:	200012e4 	.word	0x200012e4
 80072a4:	200012b4 	.word	0x200012b4
 80072a8:	200012b0 	.word	0x200012b0
 80072ac:	20001318 	.word	0x20001318

080072b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	; 0x28
 80072b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072ba:	f000 fb07 	bl	80078cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072be:	4b1c      	ldr	r3, [pc, #112]	; (8007330 <xTimerCreateTimerTask+0x80>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d021      	beq.n	800730a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072ce:	1d3a      	adds	r2, r7, #4
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	f107 030c 	add.w	r3, r7, #12
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fd fe0f 	bl	8004efc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	9202      	str	r2, [sp, #8]
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	2302      	movs	r3, #2
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	2300      	movs	r3, #0
 80072ee:	460a      	mov	r2, r1
 80072f0:	4910      	ldr	r1, [pc, #64]	; (8007334 <xTimerCreateTimerTask+0x84>)
 80072f2:	4811      	ldr	r0, [pc, #68]	; (8007338 <xTimerCreateTimerTask+0x88>)
 80072f4:	f7fe ff94 	bl	8006220 <xTaskCreateStatic>
 80072f8:	4603      	mov	r3, r0
 80072fa:	4a10      	ldr	r2, [pc, #64]	; (800733c <xTimerCreateTimerTask+0x8c>)
 80072fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <xTimerCreateTimerTask+0x8c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007306:	2301      	movs	r3, #1
 8007308:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10a      	bne.n	8007326 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	613b      	str	r3, [r7, #16]
}
 8007322:	bf00      	nop
 8007324:	e7fe      	b.n	8007324 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007326:	697b      	ldr	r3, [r7, #20]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20001354 	.word	0x20001354
 8007334:	080135e4 	.word	0x080135e4
 8007338:	08007475 	.word	0x08007475
 800733c:	20001358 	.word	0x20001358

08007340 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800734e:	2300      	movs	r3, #0
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	623b      	str	r3, [r7, #32]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800736e:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <xTimerGenericCommand+0x98>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d02a      	beq.n	80073cc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2b05      	cmp	r3, #5
 8007386:	dc18      	bgt.n	80073ba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007388:	f7ff fdb4 	bl	8006ef4 <xTaskGetSchedulerState>
 800738c:	4603      	mov	r3, r0
 800738e:	2b02      	cmp	r3, #2
 8007390:	d109      	bne.n	80073a6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007392:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <xTimerGenericCommand+0x98>)
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	f107 0110 	add.w	r1, r7, #16
 800739a:	2300      	movs	r3, #0
 800739c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739e:	f7fe f8d9 	bl	8005554 <xQueueGenericSend>
 80073a2:	6278      	str	r0, [r7, #36]	; 0x24
 80073a4:	e012      	b.n	80073cc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <xTimerGenericCommand+0x98>)
 80073a8:	6818      	ldr	r0, [r3, #0]
 80073aa:	f107 0110 	add.w	r1, r7, #16
 80073ae:	2300      	movs	r3, #0
 80073b0:	2200      	movs	r2, #0
 80073b2:	f7fe f8cf 	bl	8005554 <xQueueGenericSend>
 80073b6:	6278      	str	r0, [r7, #36]	; 0x24
 80073b8:	e008      	b.n	80073cc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073ba:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <xTimerGenericCommand+0x98>)
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	f107 0110 	add.w	r1, r7, #16
 80073c2:	2300      	movs	r3, #0
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	f7fe f9c3 	bl	8005750 <xQueueGenericSendFromISR>
 80073ca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3728      	adds	r7, #40	; 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20001354 	.word	0x20001354

080073dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e6:	4b22      	ldr	r3, [pc, #136]	; (8007470 <prvProcessExpiredTimer+0x94>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	3304      	adds	r3, #4
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fd fe25 	bl	8005044 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d022      	beq.n	800744e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	699a      	ldr	r2, [r3, #24]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	18d1      	adds	r1, r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	6978      	ldr	r0, [r7, #20]
 8007416:	f000 f8d1 	bl	80075bc <prvInsertTimerInActiveList>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01f      	beq.n	8007460 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007420:	2300      	movs	r3, #0
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	2300      	movs	r3, #0
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	2100      	movs	r1, #0
 800742a:	6978      	ldr	r0, [r7, #20]
 800742c:	f7ff ff88 	bl	8007340 <xTimerGenericCommand>
 8007430:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d113      	bne.n	8007460 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	60fb      	str	r3, [r7, #12]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007454:	f023 0301 	bic.w	r3, r3, #1
 8007458:	b2da      	uxtb	r2, r3
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	6978      	ldr	r0, [r7, #20]
 8007466:	4798      	blx	r3
}
 8007468:	bf00      	nop
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	2000134c 	.word	0x2000134c

08007474 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800747c:	f107 0308 	add.w	r3, r7, #8
 8007480:	4618      	mov	r0, r3
 8007482:	f000 f857 	bl	8007534 <prvGetNextExpireTime>
 8007486:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4619      	mov	r1, r3
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f803 	bl	8007498 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007492:	f000 f8d5 	bl	8007640 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007496:	e7f1      	b.n	800747c <prvTimerTask+0x8>

08007498 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074a2:	f7ff f919 	bl	80066d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074a6:	f107 0308 	add.w	r3, r7, #8
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f866 	bl	800757c <prvSampleTimeNow>
 80074b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d130      	bne.n	800751a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <prvProcessTimerOrBlockTask+0x3c>
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d806      	bhi.n	80074d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074c6:	f7ff f915 	bl	80066f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074ca:	68f9      	ldr	r1, [r7, #12]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff ff85 	bl	80073dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074d2:	e024      	b.n	800751e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d008      	beq.n	80074ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074da:	4b13      	ldr	r3, [pc, #76]	; (8007528 <prvProcessTimerOrBlockTask+0x90>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <prvProcessTimerOrBlockTask+0x50>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <prvProcessTimerOrBlockTask+0x52>
 80074e8:	2300      	movs	r3, #0
 80074ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074ec:	4b0f      	ldr	r3, [pc, #60]	; (800752c <prvProcessTimerOrBlockTask+0x94>)
 80074ee:	6818      	ldr	r0, [r3, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	4619      	mov	r1, r3
 80074fa:	f7fe fe5d 	bl	80061b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074fe:	f7ff f8f9 	bl	80066f4 <xTaskResumeAll>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007508:	4b09      	ldr	r3, [pc, #36]	; (8007530 <prvProcessTimerOrBlockTask+0x98>)
 800750a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	f3bf 8f6f 	isb	sy
}
 8007518:	e001      	b.n	800751e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800751a:	f7ff f8eb 	bl	80066f4 <xTaskResumeAll>
}
 800751e:	bf00      	nop
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	20001350 	.word	0x20001350
 800752c:	20001354 	.word	0x20001354
 8007530:	e000ed04 	.word	0xe000ed04

08007534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800753c:	4b0e      	ldr	r3, [pc, #56]	; (8007578 <prvGetNextExpireTime+0x44>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <prvGetNextExpireTime+0x16>
 8007546:	2201      	movs	r2, #1
 8007548:	e000      	b.n	800754c <prvGetNextExpireTime+0x18>
 800754a:	2200      	movs	r2, #0
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007558:	4b07      	ldr	r3, [pc, #28]	; (8007578 <prvGetNextExpireTime+0x44>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	e001      	b.n	8007568 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007568:	68fb      	ldr	r3, [r7, #12]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	2000134c 	.word	0x2000134c

0800757c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007584:	f7ff f954 	bl	8006830 <xTaskGetTickCount>
 8007588:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800758a:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <prvSampleTimeNow+0x3c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	429a      	cmp	r2, r3
 8007592:	d205      	bcs.n	80075a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007594:	f000 f936 	bl	8007804 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e002      	b.n	80075a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075a6:	4a04      	ldr	r2, [pc, #16]	; (80075b8 <prvSampleTimeNow+0x3c>)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	2000135c 	.word	0x2000135c

080075bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075ca:	2300      	movs	r3, #0
 80075cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d812      	bhi.n	8007608 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	1ad2      	subs	r2, r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d302      	bcc.n	80075f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075f0:	2301      	movs	r3, #1
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	e01b      	b.n	800762e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075f6:	4b10      	ldr	r3, [pc, #64]	; (8007638 <prvInsertTimerInActiveList+0x7c>)
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3304      	adds	r3, #4
 80075fe:	4619      	mov	r1, r3
 8007600:	4610      	mov	r0, r2
 8007602:	f7fd fce6 	bl	8004fd2 <vListInsert>
 8007606:	e012      	b.n	800762e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	429a      	cmp	r2, r3
 800760e:	d206      	bcs.n	800761e <prvInsertTimerInActiveList+0x62>
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	429a      	cmp	r2, r3
 8007616:	d302      	bcc.n	800761e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	e007      	b.n	800762e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800761e:	4b07      	ldr	r3, [pc, #28]	; (800763c <prvInsertTimerInActiveList+0x80>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3304      	adds	r3, #4
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f7fd fcd2 	bl	8004fd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800762e:	697b      	ldr	r3, [r7, #20]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	20001350 	.word	0x20001350
 800763c:	2000134c 	.word	0x2000134c

08007640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08e      	sub	sp, #56	; 0x38
 8007644:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007646:	e0ca      	b.n	80077de <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	da18      	bge.n	8007680 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800764e:	1d3b      	adds	r3, r7, #4
 8007650:	3304      	adds	r3, #4
 8007652:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	61fb      	str	r3, [r7, #28]
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007676:	6850      	ldr	r0, [r2, #4]
 8007678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800767a:	6892      	ldr	r2, [r2, #8]
 800767c:	4611      	mov	r1, r2
 800767e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	f2c0 80aa 	blt.w	80077dc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800768c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007696:	3304      	adds	r3, #4
 8007698:	4618      	mov	r0, r3
 800769a:	f7fd fcd3 	bl	8005044 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800769e:	463b      	mov	r3, r7
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff ff6b 	bl	800757c <prvSampleTimeNow>
 80076a6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b09      	cmp	r3, #9
 80076ac:	f200 8097 	bhi.w	80077de <prvProcessReceivedCommands+0x19e>
 80076b0:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <prvProcessReceivedCommands+0x78>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	080076e1 	.word	0x080076e1
 80076bc:	080076e1 	.word	0x080076e1
 80076c0:	080076e1 	.word	0x080076e1
 80076c4:	08007755 	.word	0x08007755
 80076c8:	08007769 	.word	0x08007769
 80076cc:	080077b3 	.word	0x080077b3
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	080076e1 	.word	0x080076e1
 80076d8:	08007755 	.word	0x08007755
 80076dc:	08007769 	.word	0x08007769
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076e6:	f043 0301 	orr.w	r3, r3, #1
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	18d1      	adds	r1, r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007700:	f7ff ff5c 	bl	80075bc <prvInsertTimerInActiveList>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d069      	beq.n	80077de <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007710:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d05e      	beq.n	80077de <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	441a      	add	r2, r3
 8007728:	2300      	movs	r3, #0
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	2300      	movs	r3, #0
 800772e:	2100      	movs	r1, #0
 8007730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007732:	f7ff fe05 	bl	8007340 <xTimerGenericCommand>
 8007736:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007738:	6a3b      	ldr	r3, [r7, #32]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d14f      	bne.n	80077de <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	61bb      	str	r3, [r7, #24]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800775a:	f023 0301 	bic.w	r3, r3, #1
 800775e:	b2da      	uxtb	r2, r3
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007766:	e03a      	b.n	80077de <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	b2da      	uxtb	r2, r3
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10a      	bne.n	800779e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	617b      	str	r3, [r7, #20]
}
 800779a:	bf00      	nop
 800779c:	e7fe      	b.n	800779c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	699a      	ldr	r2, [r3, #24]
 80077a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a4:	18d1      	adds	r1, r2, r3
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077ac:	f7ff ff06 	bl	80075bc <prvInsertTimerInActiveList>
					break;
 80077b0:	e015      	b.n	80077de <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80077c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077c2:	f000 fbdd 	bl	8007f80 <vPortFree>
 80077c6:	e00a      	b.n	80077de <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ce:	f023 0301 	bic.w	r3, r3, #1
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077da:	e000      	b.n	80077de <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80077dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077de:	4b08      	ldr	r3, [pc, #32]	; (8007800 <prvProcessReceivedCommands+0x1c0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	1d39      	adds	r1, r7, #4
 80077e4:	2200      	movs	r2, #0
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe f8da 	bl	80059a0 <xQueueReceive>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f47f af2a 	bne.w	8007648 <prvProcessReceivedCommands+0x8>
	}
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	3730      	adds	r7, #48	; 0x30
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20001354 	.word	0x20001354

08007804 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800780a:	e048      	b.n	800789e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800780c:	4b2d      	ldr	r3, [pc, #180]	; (80078c4 <prvSwitchTimerLists+0xc0>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007816:	4b2b      	ldr	r3, [pc, #172]	; (80078c4 <prvSwitchTimerLists+0xc0>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	3304      	adds	r3, #4
 8007824:	4618      	mov	r0, r3
 8007826:	f7fd fc0d 	bl	8005044 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d02e      	beq.n	800789e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	4413      	add	r3, r2
 8007848:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	429a      	cmp	r2, r3
 8007850:	d90e      	bls.n	8007870 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800785e:	4b19      	ldr	r3, [pc, #100]	; (80078c4 <prvSwitchTimerLists+0xc0>)
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3304      	adds	r3, #4
 8007866:	4619      	mov	r1, r3
 8007868:	4610      	mov	r0, r2
 800786a:	f7fd fbb2 	bl	8004fd2 <vListInsert>
 800786e:	e016      	b.n	800789e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007870:	2300      	movs	r3, #0
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	2300      	movs	r3, #0
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	2100      	movs	r1, #0
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff fd60 	bl	8007340 <xTimerGenericCommand>
 8007880:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	603b      	str	r3, [r7, #0]
}
 800789a:	bf00      	nop
 800789c:	e7fe      	b.n	800789c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800789e:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <prvSwitchTimerLists+0xc0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1b1      	bne.n	800780c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078a8:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <prvSwitchTimerLists+0xc0>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <prvSwitchTimerLists+0xc4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a04      	ldr	r2, [pc, #16]	; (80078c4 <prvSwitchTimerLists+0xc0>)
 80078b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078b6:	4a04      	ldr	r2, [pc, #16]	; (80078c8 <prvSwitchTimerLists+0xc4>)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	6013      	str	r3, [r2, #0]
}
 80078bc:	bf00      	nop
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	2000134c 	.word	0x2000134c
 80078c8:	20001350 	.word	0x20001350

080078cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078d2:	f000 f967 	bl	8007ba4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80078d6:	4b15      	ldr	r3, [pc, #84]	; (800792c <prvCheckForValidListAndQueue+0x60>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d120      	bne.n	8007920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078de:	4814      	ldr	r0, [pc, #80]	; (8007930 <prvCheckForValidListAndQueue+0x64>)
 80078e0:	f7fd fb26 	bl	8004f30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078e4:	4813      	ldr	r0, [pc, #76]	; (8007934 <prvCheckForValidListAndQueue+0x68>)
 80078e6:	f7fd fb23 	bl	8004f30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078ea:	4b13      	ldr	r3, [pc, #76]	; (8007938 <prvCheckForValidListAndQueue+0x6c>)
 80078ec:	4a10      	ldr	r2, [pc, #64]	; (8007930 <prvCheckForValidListAndQueue+0x64>)
 80078ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078f0:	4b12      	ldr	r3, [pc, #72]	; (800793c <prvCheckForValidListAndQueue+0x70>)
 80078f2:	4a10      	ldr	r2, [pc, #64]	; (8007934 <prvCheckForValidListAndQueue+0x68>)
 80078f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078f6:	2300      	movs	r3, #0
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	4b11      	ldr	r3, [pc, #68]	; (8007940 <prvCheckForValidListAndQueue+0x74>)
 80078fc:	4a11      	ldr	r2, [pc, #68]	; (8007944 <prvCheckForValidListAndQueue+0x78>)
 80078fe:	2110      	movs	r1, #16
 8007900:	200a      	movs	r0, #10
 8007902:	f7fd fc31 	bl	8005168 <xQueueGenericCreateStatic>
 8007906:	4603      	mov	r3, r0
 8007908:	4a08      	ldr	r2, [pc, #32]	; (800792c <prvCheckForValidListAndQueue+0x60>)
 800790a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800790c:	4b07      	ldr	r3, [pc, #28]	; (800792c <prvCheckForValidListAndQueue+0x60>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <prvCheckForValidListAndQueue+0x60>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	490b      	ldr	r1, [pc, #44]	; (8007948 <prvCheckForValidListAndQueue+0x7c>)
 800791a:	4618      	mov	r0, r3
 800791c:	f7fe fbf8 	bl	8006110 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007920:	f000 f970 	bl	8007c04 <vPortExitCritical>
}
 8007924:	bf00      	nop
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20001354 	.word	0x20001354
 8007930:	20001324 	.word	0x20001324
 8007934:	20001338 	.word	0x20001338
 8007938:	2000134c 	.word	0x2000134c
 800793c:	20001350 	.word	0x20001350
 8007940:	20001400 	.word	0x20001400
 8007944:	20001360 	.word	0x20001360
 8007948:	080135ec 	.word	0x080135ec

0800794c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	3b04      	subs	r3, #4
 800795c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3b04      	subs	r3, #4
 800796a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	f023 0201 	bic.w	r2, r3, #1
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3b04      	subs	r3, #4
 800797a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800797c:	4a0c      	ldr	r2, [pc, #48]	; (80079b0 <pxPortInitialiseStack+0x64>)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3b14      	subs	r3, #20
 8007986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3b04      	subs	r3, #4
 8007992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f06f 0202 	mvn.w	r2, #2
 800799a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3b20      	subs	r3, #32
 80079a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079a2:	68fb      	ldr	r3, [r7, #12]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	080079b5 	.word	0x080079b5

080079b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079be:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <prvTaskExitError+0x54>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c6:	d00a      	beq.n	80079de <prvTaskExitError+0x2a>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	60fb      	str	r3, [r7, #12]
}
 80079da:	bf00      	nop
 80079dc:	e7fe      	b.n	80079dc <prvTaskExitError+0x28>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	60bb      	str	r3, [r7, #8]
}
 80079f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079f2:	bf00      	nop
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0fc      	beq.n	80079f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	2000000c 	.word	0x2000000c
 8007a0c:	00000000 	.word	0x00000000

08007a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a10:	4b07      	ldr	r3, [pc, #28]	; (8007a30 <pxCurrentTCBConst2>)
 8007a12:	6819      	ldr	r1, [r3, #0]
 8007a14:	6808      	ldr	r0, [r1, #0]
 8007a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1a:	f380 8809 	msr	PSP, r0
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f04f 0000 	mov.w	r0, #0
 8007a26:	f380 8811 	msr	BASEPRI, r0
 8007a2a:	4770      	bx	lr
 8007a2c:	f3af 8000 	nop.w

08007a30 <pxCurrentTCBConst2>:
 8007a30:	20000e24 	.word	0x20000e24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop

08007a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a38:	4808      	ldr	r0, [pc, #32]	; (8007a5c <prvPortStartFirstTask+0x24>)
 8007a3a:	6800      	ldr	r0, [r0, #0]
 8007a3c:	6800      	ldr	r0, [r0, #0]
 8007a3e:	f380 8808 	msr	MSP, r0
 8007a42:	f04f 0000 	mov.w	r0, #0
 8007a46:	f380 8814 	msr	CONTROL, r0
 8007a4a:	b662      	cpsie	i
 8007a4c:	b661      	cpsie	f
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	df00      	svc	0
 8007a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a5a:	bf00      	nop
 8007a5c:	e000ed08 	.word	0xe000ed08

08007a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a66:	4b46      	ldr	r3, [pc, #280]	; (8007b80 <xPortStartScheduler+0x120>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a46      	ldr	r2, [pc, #280]	; (8007b84 <xPortStartScheduler+0x124>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d10a      	bne.n	8007a86 <xPortStartScheduler+0x26>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	613b      	str	r3, [r7, #16]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a86:	4b3e      	ldr	r3, [pc, #248]	; (8007b80 <xPortStartScheduler+0x120>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a3f      	ldr	r2, [pc, #252]	; (8007b88 <xPortStartScheduler+0x128>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d10a      	bne.n	8007aa6 <xPortStartScheduler+0x46>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	60fb      	str	r3, [r7, #12]
}
 8007aa2:	bf00      	nop
 8007aa4:	e7fe      	b.n	8007aa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007aa6:	4b39      	ldr	r3, [pc, #228]	; (8007b8c <xPortStartScheduler+0x12c>)
 8007aa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	22ff      	movs	r2, #255	; 0xff
 8007ab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	4b31      	ldr	r3, [pc, #196]	; (8007b90 <xPortStartScheduler+0x130>)
 8007acc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ace:	4b31      	ldr	r3, [pc, #196]	; (8007b94 <xPortStartScheduler+0x134>)
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ad4:	e009      	b.n	8007aea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ad6:	4b2f      	ldr	r3, [pc, #188]	; (8007b94 <xPortStartScheduler+0x134>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	4a2d      	ldr	r2, [pc, #180]	; (8007b94 <xPortStartScheduler+0x134>)
 8007ade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ae0:	78fb      	ldrb	r3, [r7, #3]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af2:	2b80      	cmp	r3, #128	; 0x80
 8007af4:	d0ef      	beq.n	8007ad6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007af6:	4b27      	ldr	r3, [pc, #156]	; (8007b94 <xPortStartScheduler+0x134>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f1c3 0307 	rsb	r3, r3, #7
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d00a      	beq.n	8007b18 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	60bb      	str	r3, [r7, #8]
}
 8007b14:	bf00      	nop
 8007b16:	e7fe      	b.n	8007b16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b18:	4b1e      	ldr	r3, [pc, #120]	; (8007b94 <xPortStartScheduler+0x134>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	021b      	lsls	r3, r3, #8
 8007b1e:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <xPortStartScheduler+0x134>)
 8007b20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b22:	4b1c      	ldr	r3, [pc, #112]	; (8007b94 <xPortStartScheduler+0x134>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b2a:	4a1a      	ldr	r2, [pc, #104]	; (8007b94 <xPortStartScheduler+0x134>)
 8007b2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b36:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <xPortStartScheduler+0x138>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a17      	ldr	r2, [pc, #92]	; (8007b98 <xPortStartScheduler+0x138>)
 8007b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b42:	4b15      	ldr	r3, [pc, #84]	; (8007b98 <xPortStartScheduler+0x138>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a14      	ldr	r2, [pc, #80]	; (8007b98 <xPortStartScheduler+0x138>)
 8007b48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b4e:	f000 f8dd 	bl	8007d0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b52:	4b12      	ldr	r3, [pc, #72]	; (8007b9c <xPortStartScheduler+0x13c>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b58:	f000 f8fc 	bl	8007d54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b5c:	4b10      	ldr	r3, [pc, #64]	; (8007ba0 <xPortStartScheduler+0x140>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a0f      	ldr	r2, [pc, #60]	; (8007ba0 <xPortStartScheduler+0x140>)
 8007b62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b68:	f7ff ff66 	bl	8007a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b6c:	f7fe ff3c 	bl	80069e8 <vTaskSwitchContext>
	prvTaskExitError();
 8007b70:	f7ff ff20 	bl	80079b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	e000ed00 	.word	0xe000ed00
 8007b84:	410fc271 	.word	0x410fc271
 8007b88:	410fc270 	.word	0x410fc270
 8007b8c:	e000e400 	.word	0xe000e400
 8007b90:	20001450 	.word	0x20001450
 8007b94:	20001454 	.word	0x20001454
 8007b98:	e000ed20 	.word	0xe000ed20
 8007b9c:	2000000c 	.word	0x2000000c
 8007ba0:	e000ef34 	.word	0xe000ef34

08007ba4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	607b      	str	r3, [r7, #4]
}
 8007bbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <vPortEnterCritical+0x58>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	4a0d      	ldr	r2, [pc, #52]	; (8007bfc <vPortEnterCritical+0x58>)
 8007bc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <vPortEnterCritical+0x58>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d10f      	bne.n	8007bf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <vPortEnterCritical+0x5c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	603b      	str	r3, [r7, #0]
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <vPortEnterCritical+0x4a>
	}
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	2000000c 	.word	0x2000000c
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c0a:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <vPortExitCritical+0x50>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <vPortExitCritical+0x24>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	607b      	str	r3, [r7, #4]
}
 8007c24:	bf00      	nop
 8007c26:	e7fe      	b.n	8007c26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <vPortExitCritical+0x50>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	4a09      	ldr	r2, [pc, #36]	; (8007c54 <vPortExitCritical+0x50>)
 8007c30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c32:	4b08      	ldr	r3, [pc, #32]	; (8007c54 <vPortExitCritical+0x50>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d105      	bne.n	8007c46 <vPortExitCritical+0x42>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	f383 8811 	msr	BASEPRI, r3
}
 8007c44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	2000000c 	.word	0x2000000c
	...

08007c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c60:	f3ef 8009 	mrs	r0, PSP
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	4b15      	ldr	r3, [pc, #84]	; (8007cc0 <pxCurrentTCBConst>)
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	f01e 0f10 	tst.w	lr, #16
 8007c70:	bf08      	it	eq
 8007c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7a:	6010      	str	r0, [r2, #0]
 8007c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c84:	f380 8811 	msr	BASEPRI, r0
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f7fe feaa 	bl	80069e8 <vTaskSwitchContext>
 8007c94:	f04f 0000 	mov.w	r0, #0
 8007c98:	f380 8811 	msr	BASEPRI, r0
 8007c9c:	bc09      	pop	{r0, r3}
 8007c9e:	6819      	ldr	r1, [r3, #0]
 8007ca0:	6808      	ldr	r0, [r1, #0]
 8007ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca6:	f01e 0f10 	tst.w	lr, #16
 8007caa:	bf08      	it	eq
 8007cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cb0:	f380 8809 	msr	PSP, r0
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	f3af 8000 	nop.w

08007cc0 <pxCurrentTCBConst>:
 8007cc0:	20000e24 	.word	0x20000e24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop

08007cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	607b      	str	r3, [r7, #4]
}
 8007ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ce2:	f7fe fdc7 	bl	8006874 <xTaskIncrementTick>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d003      	beq.n	8007cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cec:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <xPortSysTickHandler+0x40>)
 8007cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	f383 8811 	msr	BASEPRI, r3
}
 8007cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d10:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <vPortSetupTimerInterrupt+0x34>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d16:	4b0b      	ldr	r3, [pc, #44]	; (8007d44 <vPortSetupTimerInterrupt+0x38>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <vPortSetupTimerInterrupt+0x3c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a0a      	ldr	r2, [pc, #40]	; (8007d4c <vPortSetupTimerInterrupt+0x40>)
 8007d22:	fba2 2303 	umull	r2, r3, r2, r3
 8007d26:	099b      	lsrs	r3, r3, #6
 8007d28:	4a09      	ldr	r2, [pc, #36]	; (8007d50 <vPortSetupTimerInterrupt+0x44>)
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d2e:	4b04      	ldr	r3, [pc, #16]	; (8007d40 <vPortSetupTimerInterrupt+0x34>)
 8007d30:	2207      	movs	r2, #7
 8007d32:	601a      	str	r2, [r3, #0]
}
 8007d34:	bf00      	nop
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	e000e010 	.word	0xe000e010
 8007d44:	e000e018 	.word	0xe000e018
 8007d48:	20000000 	.word	0x20000000
 8007d4c:	10624dd3 	.word	0x10624dd3
 8007d50:	e000e014 	.word	0xe000e014

08007d54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d64 <vPortEnableVFP+0x10>
 8007d58:	6801      	ldr	r1, [r0, #0]
 8007d5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d5e:	6001      	str	r1, [r0, #0]
 8007d60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d62:	bf00      	nop
 8007d64:	e000ed88 	.word	0xe000ed88

08007d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d6e:	f3ef 8305 	mrs	r3, IPSR
 8007d72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b0f      	cmp	r3, #15
 8007d78:	d914      	bls.n	8007da4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d7a:	4a17      	ldr	r2, [pc, #92]	; (8007dd8 <vPortValidateInterruptPriority+0x70>)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d84:	4b15      	ldr	r3, [pc, #84]	; (8007ddc <vPortValidateInterruptPriority+0x74>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	7afa      	ldrb	r2, [r7, #11]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d20a      	bcs.n	8007da4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	607b      	str	r3, [r7, #4]
}
 8007da0:	bf00      	nop
 8007da2:	e7fe      	b.n	8007da2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007da4:	4b0e      	ldr	r3, [pc, #56]	; (8007de0 <vPortValidateInterruptPriority+0x78>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dac:	4b0d      	ldr	r3, [pc, #52]	; (8007de4 <vPortValidateInterruptPriority+0x7c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d90a      	bls.n	8007dca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	603b      	str	r3, [r7, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <vPortValidateInterruptPriority+0x60>
	}
 8007dca:	bf00      	nop
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	e000e3f0 	.word	0xe000e3f0
 8007ddc:	20001450 	.word	0x20001450
 8007de0:	e000ed0c 	.word	0xe000ed0c
 8007de4:	20001454 	.word	0x20001454

08007de8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08a      	sub	sp, #40	; 0x28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007df4:	f7fe fc70 	bl	80066d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007df8:	4b5b      	ldr	r3, [pc, #364]	; (8007f68 <pvPortMalloc+0x180>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e00:	f000 f920 	bl	8008044 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e04:	4b59      	ldr	r3, [pc, #356]	; (8007f6c <pvPortMalloc+0x184>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f040 8093 	bne.w	8007f38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01d      	beq.n	8007e54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e18:	2208      	movs	r2, #8
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d014      	beq.n	8007e54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f023 0307 	bic.w	r3, r3, #7
 8007e30:	3308      	adds	r3, #8
 8007e32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00a      	beq.n	8007e54 <pvPortMalloc+0x6c>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	617b      	str	r3, [r7, #20]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d06e      	beq.n	8007f38 <pvPortMalloc+0x150>
 8007e5a:	4b45      	ldr	r3, [pc, #276]	; (8007f70 <pvPortMalloc+0x188>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d869      	bhi.n	8007f38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e64:	4b43      	ldr	r3, [pc, #268]	; (8007f74 <pvPortMalloc+0x18c>)
 8007e66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e68:	4b42      	ldr	r3, [pc, #264]	; (8007f74 <pvPortMalloc+0x18c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e6e:	e004      	b.n	8007e7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d903      	bls.n	8007e8c <pvPortMalloc+0xa4>
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1f1      	bne.n	8007e70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e8c:	4b36      	ldr	r3, [pc, #216]	; (8007f68 <pvPortMalloc+0x180>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d050      	beq.n	8007f38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2208      	movs	r2, #8
 8007e9c:	4413      	add	r3, r2
 8007e9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	2308      	movs	r3, #8
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d91f      	bls.n	8007ef8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f003 0307 	and.w	r3, r3, #7
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00a      	beq.n	8007ee0 <pvPortMalloc+0xf8>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	613b      	str	r3, [r7, #16]
}
 8007edc:	bf00      	nop
 8007ede:	e7fe      	b.n	8007ede <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	1ad2      	subs	r2, r2, r3
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ef2:	69b8      	ldr	r0, [r7, #24]
 8007ef4:	f000 f908 	bl	8008108 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ef8:	4b1d      	ldr	r3, [pc, #116]	; (8007f70 <pvPortMalloc+0x188>)
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	4a1b      	ldr	r2, [pc, #108]	; (8007f70 <pvPortMalloc+0x188>)
 8007f04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f06:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <pvPortMalloc+0x188>)
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <pvPortMalloc+0x190>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d203      	bcs.n	8007f1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f12:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <pvPortMalloc+0x188>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a18      	ldr	r2, [pc, #96]	; (8007f78 <pvPortMalloc+0x190>)
 8007f18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	4b13      	ldr	r3, [pc, #76]	; (8007f6c <pvPortMalloc+0x184>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f2e:	4b13      	ldr	r3, [pc, #76]	; (8007f7c <pvPortMalloc+0x194>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3301      	adds	r3, #1
 8007f34:	4a11      	ldr	r2, [pc, #68]	; (8007f7c <pvPortMalloc+0x194>)
 8007f36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f38:	f7fe fbdc 	bl	80066f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <pvPortMalloc+0x174>
	__asm volatile
 8007f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f4a:	f383 8811 	msr	BASEPRI, r3
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f3bf 8f4f 	dsb	sy
 8007f56:	60fb      	str	r3, [r7, #12]
}
 8007f58:	bf00      	nop
 8007f5a:	e7fe      	b.n	8007f5a <pvPortMalloc+0x172>
	return pvReturn;
 8007f5c:	69fb      	ldr	r3, [r7, #28]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3728      	adds	r7, #40	; 0x28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	2000b0a0 	.word	0x2000b0a0
 8007f6c:	2000b0b4 	.word	0x2000b0b4
 8007f70:	2000b0a4 	.word	0x2000b0a4
 8007f74:	2000b098 	.word	0x2000b098
 8007f78:	2000b0a8 	.word	0x2000b0a8
 8007f7c:	2000b0ac 	.word	0x2000b0ac

08007f80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d04d      	beq.n	800802e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f92:	2308      	movs	r3, #8
 8007f94:	425b      	negs	r3, r3
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4413      	add	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	4b24      	ldr	r3, [pc, #144]	; (8008038 <vPortFree+0xb8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4013      	ands	r3, r2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <vPortFree+0x44>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	60fb      	str	r3, [r7, #12]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <vPortFree+0x62>
	__asm volatile
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	60bb      	str	r3, [r7, #8]
}
 8007fde:	bf00      	nop
 8007fe0:	e7fe      	b.n	8007fe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	4b14      	ldr	r3, [pc, #80]	; (8008038 <vPortFree+0xb8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4013      	ands	r3, r2
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d01e      	beq.n	800802e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d11a      	bne.n	800802e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <vPortFree+0xb8>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	43db      	mvns	r3, r3
 8008002:	401a      	ands	r2, r3
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008008:	f7fe fb66 	bl	80066d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	4b0a      	ldr	r3, [pc, #40]	; (800803c <vPortFree+0xbc>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4413      	add	r3, r2
 8008016:	4a09      	ldr	r2, [pc, #36]	; (800803c <vPortFree+0xbc>)
 8008018:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800801a:	6938      	ldr	r0, [r7, #16]
 800801c:	f000 f874 	bl	8008108 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008020:	4b07      	ldr	r3, [pc, #28]	; (8008040 <vPortFree+0xc0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3301      	adds	r3, #1
 8008026:	4a06      	ldr	r2, [pc, #24]	; (8008040 <vPortFree+0xc0>)
 8008028:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800802a:	f7fe fb63 	bl	80066f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800802e:	bf00      	nop
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	2000b0b4 	.word	0x2000b0b4
 800803c:	2000b0a4 	.word	0x2000b0a4
 8008040:	2000b0b0 	.word	0x2000b0b0

08008044 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800804a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800804e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008050:	4b27      	ldr	r3, [pc, #156]	; (80080f0 <prvHeapInit+0xac>)
 8008052:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f003 0307 	and.w	r3, r3, #7
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00c      	beq.n	8008078 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3307      	adds	r3, #7
 8008062:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0307 	bic.w	r3, r3, #7
 800806a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	4a1f      	ldr	r2, [pc, #124]	; (80080f0 <prvHeapInit+0xac>)
 8008074:	4413      	add	r3, r2
 8008076:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800807c:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <prvHeapInit+0xb0>)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008082:	4b1c      	ldr	r3, [pc, #112]	; (80080f4 <prvHeapInit+0xb0>)
 8008084:	2200      	movs	r2, #0
 8008086:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	4413      	add	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008090:	2208      	movs	r2, #8
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	1a9b      	subs	r3, r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0307 	bic.w	r3, r3, #7
 800809e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4a15      	ldr	r2, [pc, #84]	; (80080f8 <prvHeapInit+0xb4>)
 80080a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080a6:	4b14      	ldr	r3, [pc, #80]	; (80080f8 <prvHeapInit+0xb4>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2200      	movs	r2, #0
 80080ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080ae:	4b12      	ldr	r3, [pc, #72]	; (80080f8 <prvHeapInit+0xb4>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	1ad2      	subs	r2, r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080c4:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <prvHeapInit+0xb4>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <prvHeapInit+0xb8>)
 80080d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	4a09      	ldr	r2, [pc, #36]	; (8008100 <prvHeapInit+0xbc>)
 80080da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080dc:	4b09      	ldr	r3, [pc, #36]	; (8008104 <prvHeapInit+0xc0>)
 80080de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080e2:	601a      	str	r2, [r3, #0]
}
 80080e4:	bf00      	nop
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	20001458 	.word	0x20001458
 80080f4:	2000b098 	.word	0x2000b098
 80080f8:	2000b0a0 	.word	0x2000b0a0
 80080fc:	2000b0a8 	.word	0x2000b0a8
 8008100:	2000b0a4 	.word	0x2000b0a4
 8008104:	2000b0b4 	.word	0x2000b0b4

08008108 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008110:	4b28      	ldr	r3, [pc, #160]	; (80081b4 <prvInsertBlockIntoFreeList+0xac>)
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	e002      	b.n	800811c <prvInsertBlockIntoFreeList+0x14>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	429a      	cmp	r2, r3
 8008124:	d8f7      	bhi.n	8008116 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	4413      	add	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	429a      	cmp	r2, r3
 8008136:	d108      	bne.n	800814a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	441a      	add	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	441a      	add	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d118      	bne.n	8008190 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	4b15      	ldr	r3, [pc, #84]	; (80081b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	429a      	cmp	r2, r3
 8008168:	d00d      	beq.n	8008186 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	441a      	add	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	e008      	b.n	8008198 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008186:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	e003      	b.n	8008198 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	429a      	cmp	r2, r3
 800819e:	d002      	beq.n	80081a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	2000b098 	.word	0x2000b098
 80081b8:	2000b0a0 	.word	0x2000b0a0

080081bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80081c6:	f007 fa7b 	bl	800f6c0 <sys_timeouts_sleeptime>
 80081ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d2:	d10b      	bne.n	80081ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80081d4:	4813      	ldr	r0, [pc, #76]	; (8008224 <tcpip_timeouts_mbox_fetch+0x68>)
 80081d6:	f009 ffcc 	bl	8012172 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80081da:	2200      	movs	r2, #0
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f009 ff54 	bl	801208c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80081e4:	480f      	ldr	r0, [pc, #60]	; (8008224 <tcpip_timeouts_mbox_fetch+0x68>)
 80081e6:	f009 ffb5 	bl	8012154 <sys_mutex_lock>
    return;
 80081ea:	e018      	b.n	800821e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d102      	bne.n	80081f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80081f2:	f007 fa2b 	bl	800f64c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80081f6:	e7e6      	b.n	80081c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80081f8:	480a      	ldr	r0, [pc, #40]	; (8008224 <tcpip_timeouts_mbox_fetch+0x68>)
 80081fa:	f009 ffba 	bl	8012172 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f009 ff42 	bl	801208c <sys_arch_mbox_fetch>
 8008208:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800820a:	4806      	ldr	r0, [pc, #24]	; (8008224 <tcpip_timeouts_mbox_fetch+0x68>)
 800820c:	f009 ffa2 	bl	8012154 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008216:	d102      	bne.n	800821e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8008218:	f007 fa18 	bl	800f64c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800821c:	e7d3      	b.n	80081c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	2000e4e0 	.word	0x2000e4e0

08008228 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008230:	4810      	ldr	r0, [pc, #64]	; (8008274 <tcpip_thread+0x4c>)
 8008232:	f009 ff8f 	bl	8012154 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008236:	4b10      	ldr	r3, [pc, #64]	; (8008278 <tcpip_thread+0x50>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d005      	beq.n	800824a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800823e:	4b0e      	ldr	r3, [pc, #56]	; (8008278 <tcpip_thread+0x50>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a0e      	ldr	r2, [pc, #56]	; (800827c <tcpip_thread+0x54>)
 8008244:	6812      	ldr	r2, [r2, #0]
 8008246:	4610      	mov	r0, r2
 8008248:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800824a:	f107 030c 	add.w	r3, r7, #12
 800824e:	4619      	mov	r1, r3
 8008250:	480b      	ldr	r0, [pc, #44]	; (8008280 <tcpip_thread+0x58>)
 8008252:	f7ff ffb3 	bl	80081bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d106      	bne.n	800826a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800825c:	4b09      	ldr	r3, [pc, #36]	; (8008284 <tcpip_thread+0x5c>)
 800825e:	2291      	movs	r2, #145	; 0x91
 8008260:	4909      	ldr	r1, [pc, #36]	; (8008288 <tcpip_thread+0x60>)
 8008262:	480a      	ldr	r0, [pc, #40]	; (800828c <tcpip_thread+0x64>)
 8008264:	f00a fdba 	bl	8012ddc <iprintf>
      continue;
 8008268:	e003      	b.n	8008272 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 f80f 	bl	8008290 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008272:	e7ea      	b.n	800824a <tcpip_thread+0x22>
 8008274:	2000e4e0 	.word	0x2000e4e0
 8008278:	2000b0b8 	.word	0x2000b0b8
 800827c:	2000b0bc 	.word	0x2000b0bc
 8008280:	2000b0c0 	.word	0x2000b0c0
 8008284:	080135f4 	.word	0x080135f4
 8008288:	08013624 	.word	0x08013624
 800828c:	08013644 	.word	0x08013644

08008290 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d026      	beq.n	80082ee <tcpip_thread_handle_msg+0x5e>
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	dc2b      	bgt.n	80082fc <tcpip_thread_handle_msg+0x6c>
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <tcpip_thread_handle_msg+0x1e>
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d015      	beq.n	80082d8 <tcpip_thread_handle_msg+0x48>
 80082ac:	e026      	b.n	80082fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6850      	ldr	r0, [r2, #4]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	6892      	ldr	r2, [r2, #8]
 80082ba:	4611      	mov	r1, r2
 80082bc:	4798      	blx	r3
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d004      	beq.n	80082ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 fcc5 	bl	8009c58 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80082ce:	6879      	ldr	r1, [r7, #4]
 80082d0:	2009      	movs	r0, #9
 80082d2:	f000 fe1d 	bl	8008f10 <memp_free>
      break;
 80082d6:	e018      	b.n	800830a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6892      	ldr	r2, [r2, #8]
 80082e0:	4610      	mov	r0, r2
 80082e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	2008      	movs	r0, #8
 80082e8:	f000 fe12 	bl	8008f10 <memp_free>
      break;
 80082ec:	e00d      	b.n	800830a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6892      	ldr	r2, [r2, #8]
 80082f6:	4610      	mov	r0, r2
 80082f8:	4798      	blx	r3
      break;
 80082fa:	e006      	b.n	800830a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80082fc:	4b05      	ldr	r3, [pc, #20]	; (8008314 <tcpip_thread_handle_msg+0x84>)
 80082fe:	22cf      	movs	r2, #207	; 0xcf
 8008300:	4905      	ldr	r1, [pc, #20]	; (8008318 <tcpip_thread_handle_msg+0x88>)
 8008302:	4806      	ldr	r0, [pc, #24]	; (800831c <tcpip_thread_handle_msg+0x8c>)
 8008304:	f00a fd6a 	bl	8012ddc <iprintf>
      break;
 8008308:	bf00      	nop
  }
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	080135f4 	.word	0x080135f4
 8008318:	08013624 	.word	0x08013624
 800831c:	08013644 	.word	0x08013644

08008320 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800832c:	481a      	ldr	r0, [pc, #104]	; (8008398 <tcpip_inpkt+0x78>)
 800832e:	f009 fede 	bl	80120ee <sys_mbox_valid>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <tcpip_inpkt+0x24>
 8008338:	4b18      	ldr	r3, [pc, #96]	; (800839c <tcpip_inpkt+0x7c>)
 800833a:	22fc      	movs	r2, #252	; 0xfc
 800833c:	4918      	ldr	r1, [pc, #96]	; (80083a0 <tcpip_inpkt+0x80>)
 800833e:	4819      	ldr	r0, [pc, #100]	; (80083a4 <tcpip_inpkt+0x84>)
 8008340:	f00a fd4c 	bl	8012ddc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008344:	2009      	movs	r0, #9
 8008346:	f000 fd91 	bl	8008e6c <memp_malloc>
 800834a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d102      	bne.n	8008358 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008352:	f04f 33ff 	mov.w	r3, #4294967295
 8008356:	e01a      	b.n	800838e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008370:	6979      	ldr	r1, [r7, #20]
 8008372:	4809      	ldr	r0, [pc, #36]	; (8008398 <tcpip_inpkt+0x78>)
 8008374:	f009 fe70 	bl	8012058 <sys_mbox_trypost>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d006      	beq.n	800838c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800837e:	6979      	ldr	r1, [r7, #20]
 8008380:	2009      	movs	r0, #9
 8008382:	f000 fdc5 	bl	8008f10 <memp_free>
    return ERR_MEM;
 8008386:	f04f 33ff 	mov.w	r3, #4294967295
 800838a:	e000      	b.n	800838e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800838c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	2000b0c0 	.word	0x2000b0c0
 800839c:	080135f4 	.word	0x080135f4
 80083a0:	0801366c 	.word	0x0801366c
 80083a4:	08013644 	.word	0x08013644

080083a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80083b8:	f003 0318 	and.w	r3, r3, #24
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d006      	beq.n	80083ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80083c0:	4a08      	ldr	r2, [pc, #32]	; (80083e4 <tcpip_input+0x3c>)
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f7ff ffab 	bl	8008320 <tcpip_inpkt>
 80083ca:	4603      	mov	r3, r0
 80083cc:	e005      	b.n	80083da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80083ce:	4a06      	ldr	r2, [pc, #24]	; (80083e8 <tcpip_input+0x40>)
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7ff ffa4 	bl	8008320 <tcpip_inpkt>
 80083d8:	4603      	mov	r3, r0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	08011e79 	.word	0x08011e79
 80083e8:	08010d8d 	.word	0x08010d8d

080083ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80083f6:	4819      	ldr	r0, [pc, #100]	; (800845c <tcpip_try_callback+0x70>)
 80083f8:	f009 fe79 	bl	80120ee <sys_mbox_valid>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d106      	bne.n	8008410 <tcpip_try_callback+0x24>
 8008402:	4b17      	ldr	r3, [pc, #92]	; (8008460 <tcpip_try_callback+0x74>)
 8008404:	f240 125d 	movw	r2, #349	; 0x15d
 8008408:	4916      	ldr	r1, [pc, #88]	; (8008464 <tcpip_try_callback+0x78>)
 800840a:	4817      	ldr	r0, [pc, #92]	; (8008468 <tcpip_try_callback+0x7c>)
 800840c:	f00a fce6 	bl	8012ddc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008410:	2008      	movs	r0, #8
 8008412:	f000 fd2b 	bl	8008e6c <memp_malloc>
 8008416:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d102      	bne.n	8008424 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800841e:	f04f 33ff 	mov.w	r3, #4294967295
 8008422:	e017      	b.n	8008454 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008436:	68f9      	ldr	r1, [r7, #12]
 8008438:	4808      	ldr	r0, [pc, #32]	; (800845c <tcpip_try_callback+0x70>)
 800843a:	f009 fe0d 	bl	8012058 <sys_mbox_trypost>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d006      	beq.n	8008452 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008444:	68f9      	ldr	r1, [r7, #12]
 8008446:	2008      	movs	r0, #8
 8008448:	f000 fd62 	bl	8008f10 <memp_free>
    return ERR_MEM;
 800844c:	f04f 33ff 	mov.w	r3, #4294967295
 8008450:	e000      	b.n	8008454 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	2000b0c0 	.word	0x2000b0c0
 8008460:	080135f4 	.word	0x080135f4
 8008464:	0801366c 	.word	0x0801366c
 8008468:	08013644 	.word	0x08013644

0800846c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af02      	add	r7, sp, #8
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008476:	f000 f871 	bl	800855c <lwip_init>

  tcpip_init_done = initfunc;
 800847a:	4a17      	ldr	r2, [pc, #92]	; (80084d8 <tcpip_init+0x6c>)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008480:	4a16      	ldr	r2, [pc, #88]	; (80084dc <tcpip_init+0x70>)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008486:	2106      	movs	r1, #6
 8008488:	4815      	ldr	r0, [pc, #84]	; (80084e0 <tcpip_init+0x74>)
 800848a:	f009 fdcb 	bl	8012024 <sys_mbox_new>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d006      	beq.n	80084a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008494:	4b13      	ldr	r3, [pc, #76]	; (80084e4 <tcpip_init+0x78>)
 8008496:	f240 2261 	movw	r2, #609	; 0x261
 800849a:	4913      	ldr	r1, [pc, #76]	; (80084e8 <tcpip_init+0x7c>)
 800849c:	4813      	ldr	r0, [pc, #76]	; (80084ec <tcpip_init+0x80>)
 800849e:	f00a fc9d 	bl	8012ddc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80084a2:	4813      	ldr	r0, [pc, #76]	; (80084f0 <tcpip_init+0x84>)
 80084a4:	f009 fe40 	bl	8012128 <sys_mutex_new>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d006      	beq.n	80084bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <tcpip_init+0x78>)
 80084b0:	f240 2265 	movw	r2, #613	; 0x265
 80084b4:	490f      	ldr	r1, [pc, #60]	; (80084f4 <tcpip_init+0x88>)
 80084b6:	480d      	ldr	r0, [pc, #52]	; (80084ec <tcpip_init+0x80>)
 80084b8:	f00a fc90 	bl	8012ddc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80084bc:	2318      	movs	r3, #24
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084c4:	2200      	movs	r2, #0
 80084c6:	490c      	ldr	r1, [pc, #48]	; (80084f8 <tcpip_init+0x8c>)
 80084c8:	480c      	ldr	r0, [pc, #48]	; (80084fc <tcpip_init+0x90>)
 80084ca:	f009 fe5f 	bl	801218c <sys_thread_new>
}
 80084ce:	bf00      	nop
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	2000b0b8 	.word	0x2000b0b8
 80084dc:	2000b0bc 	.word	0x2000b0bc
 80084e0:	2000b0c0 	.word	0x2000b0c0
 80084e4:	080135f4 	.word	0x080135f4
 80084e8:	0801367c 	.word	0x0801367c
 80084ec:	08013644 	.word	0x08013644
 80084f0:	2000e4e0 	.word	0x2000e4e0
 80084f4:	080136a0 	.word	0x080136a0
 80084f8:	08008229 	.word	0x08008229
 80084fc:	080136c4 	.word	0x080136c4

08008500 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800850a:	88fb      	ldrh	r3, [r7, #6]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	b21a      	sxth	r2, r3
 8008510:	88fb      	ldrh	r3, [r7, #6]
 8008512:	0a1b      	lsrs	r3, r3, #8
 8008514:	b29b      	uxth	r3, r3
 8008516:	b21b      	sxth	r3, r3
 8008518:	4313      	orrs	r3, r2
 800851a:	b21b      	sxth	r3, r3
 800851c:	b29b      	uxth	r3, r3
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	061a      	lsls	r2, r3, #24
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	021b      	lsls	r3, r3, #8
 800853a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800853e:	431a      	orrs	r2, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	0a1b      	lsrs	r3, r3, #8
 8008544:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008548:	431a      	orrs	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	0e1b      	lsrs	r3, r3, #24
 800854e:	4313      	orrs	r3, r2
}
 8008550:	4618      	mov	r0, r3
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8008566:	f009 fdd3 	bl	8012110 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800856a:	f000 f8d5 	bl	8008718 <mem_init>
  memp_init();
 800856e:	f000 fc31 	bl	8008dd4 <memp_init>
  pbuf_init();
  netif_init();
 8008572:	f000 fcf7 	bl	8008f64 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8008576:	f007 f8db 	bl	800f730 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800857a:	f001 fe07 	bl	800a18c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800857e:	f007 f81d 	bl	800f5bc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8008596:	4b05      	ldr	r3, [pc, #20]	; (80085ac <ptr_to_mem+0x20>)
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	88fb      	ldrh	r3, [r7, #6]
 800859c:	4413      	add	r3, r2
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	2000b0c4 	.word	0x2000b0c4

080085b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80085b8:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <mem_to_ptr+0x20>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	b29b      	uxth	r3, r3
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	2000b0c4 	.word	0x2000b0c4

080085d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80085d4:	b590      	push	{r4, r7, lr}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80085dc:	4b45      	ldr	r3, [pc, #276]	; (80086f4 <plug_holes+0x120>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d206      	bcs.n	80085f4 <plug_holes+0x20>
 80085e6:	4b44      	ldr	r3, [pc, #272]	; (80086f8 <plug_holes+0x124>)
 80085e8:	f240 12df 	movw	r2, #479	; 0x1df
 80085ec:	4943      	ldr	r1, [pc, #268]	; (80086fc <plug_holes+0x128>)
 80085ee:	4844      	ldr	r0, [pc, #272]	; (8008700 <plug_holes+0x12c>)
 80085f0:	f00a fbf4 	bl	8012ddc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80085f4:	4b43      	ldr	r3, [pc, #268]	; (8008704 <plug_holes+0x130>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d306      	bcc.n	800860c <plug_holes+0x38>
 80085fe:	4b3e      	ldr	r3, [pc, #248]	; (80086f8 <plug_holes+0x124>)
 8008600:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008604:	4940      	ldr	r1, [pc, #256]	; (8008708 <plug_holes+0x134>)
 8008606:	483e      	ldr	r0, [pc, #248]	; (8008700 <plug_holes+0x12c>)
 8008608:	f00a fbe8 	bl	8012ddc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	791b      	ldrb	r3, [r3, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d006      	beq.n	8008622 <plug_holes+0x4e>
 8008614:	4b38      	ldr	r3, [pc, #224]	; (80086f8 <plug_holes+0x124>)
 8008616:	f240 12e1 	movw	r2, #481	; 0x1e1
 800861a:	493c      	ldr	r1, [pc, #240]	; (800870c <plug_holes+0x138>)
 800861c:	4838      	ldr	r0, [pc, #224]	; (8008700 <plug_holes+0x12c>)
 800861e:	f00a fbdd 	bl	8012ddc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800862a:	d906      	bls.n	800863a <plug_holes+0x66>
 800862c:	4b32      	ldr	r3, [pc, #200]	; (80086f8 <plug_holes+0x124>)
 800862e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8008632:	4937      	ldr	r1, [pc, #220]	; (8008710 <plug_holes+0x13c>)
 8008634:	4832      	ldr	r0, [pc, #200]	; (8008700 <plug_holes+0x12c>)
 8008636:	f00a fbd1 	bl	8012ddc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff ffa4 	bl	800858c <ptr_to_mem>
 8008644:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	429a      	cmp	r2, r3
 800864c:	d024      	beq.n	8008698 <plug_holes+0xc4>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	791b      	ldrb	r3, [r3, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d120      	bne.n	8008698 <plug_holes+0xc4>
 8008656:	4b2b      	ldr	r3, [pc, #172]	; (8008704 <plug_holes+0x130>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	429a      	cmp	r2, r3
 800865e:	d01b      	beq.n	8008698 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008660:	4b2c      	ldr	r3, [pc, #176]	; (8008714 <plug_holes+0x140>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	429a      	cmp	r2, r3
 8008668:	d102      	bne.n	8008670 <plug_holes+0x9c>
      lfree = mem;
 800866a:	4a2a      	ldr	r2, [pc, #168]	; (8008714 <plug_holes+0x140>)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	881a      	ldrh	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008680:	d00a      	beq.n	8008698 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	4618      	mov	r0, r3
 8008688:	f7ff ff80 	bl	800858c <ptr_to_mem>
 800868c:	4604      	mov	r4, r0
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff ff8e 	bl	80085b0 <mem_to_ptr>
 8008694:	4603      	mov	r3, r0
 8008696:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	885b      	ldrh	r3, [r3, #2]
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff ff75 	bl	800858c <ptr_to_mem>
 80086a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d01f      	beq.n	80086ec <plug_holes+0x118>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	791b      	ldrb	r3, [r3, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d11b      	bne.n	80086ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80086b4:	4b17      	ldr	r3, [pc, #92]	; (8008714 <plug_holes+0x140>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d102      	bne.n	80086c4 <plug_holes+0xf0>
      lfree = pmem;
 80086be:	4a15      	ldr	r2, [pc, #84]	; (8008714 <plug_holes+0x140>)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	881a      	ldrh	r2, [r3, #0]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80086d4:	d00a      	beq.n	80086ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff ff56 	bl	800858c <ptr_to_mem>
 80086e0:	4604      	mov	r4, r0
 80086e2:	68b8      	ldr	r0, [r7, #8]
 80086e4:	f7ff ff64 	bl	80085b0 <mem_to_ptr>
 80086e8:	4603      	mov	r3, r0
 80086ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80086ec:	bf00      	nop
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd90      	pop	{r4, r7, pc}
 80086f4:	2000b0c4 	.word	0x2000b0c4
 80086f8:	080136d4 	.word	0x080136d4
 80086fc:	08013704 	.word	0x08013704
 8008700:	0801371c 	.word	0x0801371c
 8008704:	2000b0c8 	.word	0x2000b0c8
 8008708:	08013744 	.word	0x08013744
 800870c:	08013760 	.word	0x08013760
 8008710:	0801377c 	.word	0x0801377c
 8008714:	2000b0d0 	.word	0x2000b0d0

08008718 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800871e:	4b1f      	ldr	r3, [pc, #124]	; (800879c <mem_init+0x84>)
 8008720:	3303      	adds	r3, #3
 8008722:	f023 0303 	bic.w	r3, r3, #3
 8008726:	461a      	mov	r2, r3
 8008728:	4b1d      	ldr	r3, [pc, #116]	; (80087a0 <mem_init+0x88>)
 800872a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800872c:	4b1c      	ldr	r3, [pc, #112]	; (80087a0 <mem_init+0x88>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008738:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8008746:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800874a:	f7ff ff1f 	bl	800858c <ptr_to_mem>
 800874e:	4603      	mov	r3, r0
 8008750:	4a14      	ldr	r2, [pc, #80]	; (80087a4 <mem_init+0x8c>)
 8008752:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008754:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <mem_init+0x8c>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2201      	movs	r2, #1
 800875a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800875c:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <mem_init+0x8c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008764:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <mem_init+0x8c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800876e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008770:	4b0b      	ldr	r3, [pc, #44]	; (80087a0 <mem_init+0x88>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a0c      	ldr	r2, [pc, #48]	; (80087a8 <mem_init+0x90>)
 8008776:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8008778:	480c      	ldr	r0, [pc, #48]	; (80087ac <mem_init+0x94>)
 800877a:	f009 fcd5 	bl	8012128 <sys_mutex_new>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d006      	beq.n	8008792 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8008784:	4b0a      	ldr	r3, [pc, #40]	; (80087b0 <mem_init+0x98>)
 8008786:	f240 221f 	movw	r2, #543	; 0x21f
 800878a:	490a      	ldr	r1, [pc, #40]	; (80087b4 <mem_init+0x9c>)
 800878c:	480a      	ldr	r0, [pc, #40]	; (80087b8 <mem_init+0xa0>)
 800878e:	f00a fb25 	bl	8012ddc <iprintf>
  }
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	2000e4fc 	.word	0x2000e4fc
 80087a0:	2000b0c4 	.word	0x2000b0c4
 80087a4:	2000b0c8 	.word	0x2000b0c8
 80087a8:	2000b0d0 	.word	0x2000b0d0
 80087ac:	2000b0cc 	.word	0x2000b0cc
 80087b0:	080136d4 	.word	0x080136d4
 80087b4:	080137a8 	.word	0x080137a8
 80087b8:	0801371c 	.word	0x0801371c

080087bc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff fef3 	bl	80085b0 <mem_to_ptr>
 80087ca:	4603      	mov	r3, r0
 80087cc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff feda 	bl	800858c <ptr_to_mem>
 80087d8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	885b      	ldrh	r3, [r3, #2]
 80087de:	4618      	mov	r0, r3
 80087e0:	f7ff fed4 	bl	800858c <ptr_to_mem>
 80087e4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80087ee:	d818      	bhi.n	8008822 <mem_link_valid+0x66>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	885b      	ldrh	r3, [r3, #2]
 80087f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80087f8:	d813      	bhi.n	8008822 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80087fe:	8afa      	ldrh	r2, [r7, #22]
 8008800:	429a      	cmp	r2, r3
 8008802:	d004      	beq.n	800880e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	8afa      	ldrh	r2, [r7, #22]
 800880a:	429a      	cmp	r2, r3
 800880c:	d109      	bne.n	8008822 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800880e:	4b08      	ldr	r3, [pc, #32]	; (8008830 <mem_link_valid+0x74>)
 8008810:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	429a      	cmp	r2, r3
 8008816:	d006      	beq.n	8008826 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	885b      	ldrh	r3, [r3, #2]
 800881c:	8afa      	ldrh	r2, [r7, #22]
 800881e:	429a      	cmp	r2, r3
 8008820:	d001      	beq.n	8008826 <mem_link_valid+0x6a>
    return 0;
 8008822:	2300      	movs	r3, #0
 8008824:	e000      	b.n	8008828 <mem_link_valid+0x6c>
  }
  return 1;
 8008826:	2301      	movs	r3, #1
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	2000b0c8 	.word	0x2000b0c8

08008834 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b088      	sub	sp, #32
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d070      	beq.n	8008924 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00d      	beq.n	8008868 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800884c:	4b37      	ldr	r3, [pc, #220]	; (800892c <mem_free+0xf8>)
 800884e:	f240 2273 	movw	r2, #627	; 0x273
 8008852:	4937      	ldr	r1, [pc, #220]	; (8008930 <mem_free+0xfc>)
 8008854:	4837      	ldr	r0, [pc, #220]	; (8008934 <mem_free+0x100>)
 8008856:	f00a fac1 	bl	8012ddc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800885a:	f009 fcb7 	bl	80121cc <sys_arch_protect>
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f009 fcc1 	bl	80121e8 <sys_arch_unprotect>
    return;
 8008866:	e05e      	b.n	8008926 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3b08      	subs	r3, #8
 800886c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800886e:	4b32      	ldr	r3, [pc, #200]	; (8008938 <mem_free+0x104>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69fa      	ldr	r2, [r7, #28]
 8008874:	429a      	cmp	r2, r3
 8008876:	d306      	bcc.n	8008886 <mem_free+0x52>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f103 020c 	add.w	r2, r3, #12
 800887e:	4b2f      	ldr	r3, [pc, #188]	; (800893c <mem_free+0x108>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d90d      	bls.n	80088a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008886:	4b29      	ldr	r3, [pc, #164]	; (800892c <mem_free+0xf8>)
 8008888:	f240 227f 	movw	r2, #639	; 0x27f
 800888c:	492c      	ldr	r1, [pc, #176]	; (8008940 <mem_free+0x10c>)
 800888e:	4829      	ldr	r0, [pc, #164]	; (8008934 <mem_free+0x100>)
 8008890:	f00a faa4 	bl	8012ddc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008894:	f009 fc9a 	bl	80121cc <sys_arch_protect>
 8008898:	6138      	str	r0, [r7, #16]
 800889a:	6938      	ldr	r0, [r7, #16]
 800889c:	f009 fca4 	bl	80121e8 <sys_arch_unprotect>
    return;
 80088a0:	e041      	b.n	8008926 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80088a2:	4828      	ldr	r0, [pc, #160]	; (8008944 <mem_free+0x110>)
 80088a4:	f009 fc56 	bl	8012154 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	791b      	ldrb	r3, [r3, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d110      	bne.n	80088d2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80088b0:	4b1e      	ldr	r3, [pc, #120]	; (800892c <mem_free+0xf8>)
 80088b2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80088b6:	4924      	ldr	r1, [pc, #144]	; (8008948 <mem_free+0x114>)
 80088b8:	481e      	ldr	r0, [pc, #120]	; (8008934 <mem_free+0x100>)
 80088ba:	f00a fa8f 	bl	8012ddc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80088be:	4821      	ldr	r0, [pc, #132]	; (8008944 <mem_free+0x110>)
 80088c0:	f009 fc57 	bl	8012172 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80088c4:	f009 fc82 	bl	80121cc <sys_arch_protect>
 80088c8:	6178      	str	r0, [r7, #20]
 80088ca:	6978      	ldr	r0, [r7, #20]
 80088cc:	f009 fc8c 	bl	80121e8 <sys_arch_unprotect>
    return;
 80088d0:	e029      	b.n	8008926 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80088d2:	69f8      	ldr	r0, [r7, #28]
 80088d4:	f7ff ff72 	bl	80087bc <mem_link_valid>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d110      	bne.n	8008900 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80088de:	4b13      	ldr	r3, [pc, #76]	; (800892c <mem_free+0xf8>)
 80088e0:	f240 2295 	movw	r2, #661	; 0x295
 80088e4:	4919      	ldr	r1, [pc, #100]	; (800894c <mem_free+0x118>)
 80088e6:	4813      	ldr	r0, [pc, #76]	; (8008934 <mem_free+0x100>)
 80088e8:	f00a fa78 	bl	8012ddc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80088ec:	4815      	ldr	r0, [pc, #84]	; (8008944 <mem_free+0x110>)
 80088ee:	f009 fc40 	bl	8012172 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80088f2:	f009 fc6b 	bl	80121cc <sys_arch_protect>
 80088f6:	61b8      	str	r0, [r7, #24]
 80088f8:	69b8      	ldr	r0, [r7, #24]
 80088fa:	f009 fc75 	bl	80121e8 <sys_arch_unprotect>
    return;
 80088fe:	e012      	b.n	8008926 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2200      	movs	r2, #0
 8008904:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008906:	4b12      	ldr	r3, [pc, #72]	; (8008950 <mem_free+0x11c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69fa      	ldr	r2, [r7, #28]
 800890c:	429a      	cmp	r2, r3
 800890e:	d202      	bcs.n	8008916 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008910:	4a0f      	ldr	r2, [pc, #60]	; (8008950 <mem_free+0x11c>)
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008916:	69f8      	ldr	r0, [r7, #28]
 8008918:	f7ff fe5c 	bl	80085d4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800891c:	4809      	ldr	r0, [pc, #36]	; (8008944 <mem_free+0x110>)
 800891e:	f009 fc28 	bl	8012172 <sys_mutex_unlock>
 8008922:	e000      	b.n	8008926 <mem_free+0xf2>
    return;
 8008924:	bf00      	nop
}
 8008926:	3720      	adds	r7, #32
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	080136d4 	.word	0x080136d4
 8008930:	080137c4 	.word	0x080137c4
 8008934:	0801371c 	.word	0x0801371c
 8008938:	2000b0c4 	.word	0x2000b0c4
 800893c:	2000b0c8 	.word	0x2000b0c8
 8008940:	080137e8 	.word	0x080137e8
 8008944:	2000b0cc 	.word	0x2000b0cc
 8008948:	08013804 	.word	0x08013804
 800894c:	0801382c 	.word	0x0801382c
 8008950:	2000b0d0 	.word	0x2000b0d0

08008954 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b088      	sub	sp, #32
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008960:	887b      	ldrh	r3, [r7, #2]
 8008962:	3303      	adds	r3, #3
 8008964:	b29b      	uxth	r3, r3
 8008966:	f023 0303 	bic.w	r3, r3, #3
 800896a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800896c:	8bfb      	ldrh	r3, [r7, #30]
 800896e:	2b0b      	cmp	r3, #11
 8008970:	d801      	bhi.n	8008976 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008972:	230c      	movs	r3, #12
 8008974:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008976:	8bfb      	ldrh	r3, [r7, #30]
 8008978:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800897c:	d803      	bhi.n	8008986 <mem_trim+0x32>
 800897e:	8bfa      	ldrh	r2, [r7, #30]
 8008980:	887b      	ldrh	r3, [r7, #2]
 8008982:	429a      	cmp	r2, r3
 8008984:	d201      	bcs.n	800898a <mem_trim+0x36>
    return NULL;
 8008986:	2300      	movs	r3, #0
 8008988:	e0d8      	b.n	8008b3c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800898a:	4b6e      	ldr	r3, [pc, #440]	; (8008b44 <mem_trim+0x1f0>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d304      	bcc.n	800899e <mem_trim+0x4a>
 8008994:	4b6c      	ldr	r3, [pc, #432]	; (8008b48 <mem_trim+0x1f4>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d306      	bcc.n	80089ac <mem_trim+0x58>
 800899e:	4b6b      	ldr	r3, [pc, #428]	; (8008b4c <mem_trim+0x1f8>)
 80089a0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80089a4:	496a      	ldr	r1, [pc, #424]	; (8008b50 <mem_trim+0x1fc>)
 80089a6:	486b      	ldr	r0, [pc, #428]	; (8008b54 <mem_trim+0x200>)
 80089a8:	f00a fa18 	bl	8012ddc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80089ac:	4b65      	ldr	r3, [pc, #404]	; (8008b44 <mem_trim+0x1f0>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d304      	bcc.n	80089c0 <mem_trim+0x6c>
 80089b6:	4b64      	ldr	r3, [pc, #400]	; (8008b48 <mem_trim+0x1f4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d307      	bcc.n	80089d0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80089c0:	f009 fc04 	bl	80121cc <sys_arch_protect>
 80089c4:	60b8      	str	r0, [r7, #8]
 80089c6:	68b8      	ldr	r0, [r7, #8]
 80089c8:	f009 fc0e 	bl	80121e8 <sys_arch_unprotect>
    return rmem;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	e0b5      	b.n	8008b3c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3b08      	subs	r3, #8
 80089d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80089d6:	69b8      	ldr	r0, [r7, #24]
 80089d8:	f7ff fdea 	bl	80085b0 <mem_to_ptr>
 80089dc:	4603      	mov	r3, r0
 80089de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	881a      	ldrh	r2, [r3, #0]
 80089e4:	8afb      	ldrh	r3, [r7, #22]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	3b08      	subs	r3, #8
 80089ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80089ee:	8bfa      	ldrh	r2, [r7, #30]
 80089f0:	8abb      	ldrh	r3, [r7, #20]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d906      	bls.n	8008a04 <mem_trim+0xb0>
 80089f6:	4b55      	ldr	r3, [pc, #340]	; (8008b4c <mem_trim+0x1f8>)
 80089f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80089fc:	4956      	ldr	r1, [pc, #344]	; (8008b58 <mem_trim+0x204>)
 80089fe:	4855      	ldr	r0, [pc, #340]	; (8008b54 <mem_trim+0x200>)
 8008a00:	f00a f9ec 	bl	8012ddc <iprintf>
  if (newsize > size) {
 8008a04:	8bfa      	ldrh	r2, [r7, #30]
 8008a06:	8abb      	ldrh	r3, [r7, #20]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d901      	bls.n	8008a10 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	e095      	b.n	8008b3c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8008a10:	8bfa      	ldrh	r2, [r7, #30]
 8008a12:	8abb      	ldrh	r3, [r7, #20]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d101      	bne.n	8008a1c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	e08f      	b.n	8008b3c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008a1c:	484f      	ldr	r0, [pc, #316]	; (8008b5c <mem_trim+0x208>)
 8008a1e:	f009 fb99 	bl	8012154 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff fdb0 	bl	800858c <ptr_to_mem>
 8008a2c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	791b      	ldrb	r3, [r3, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d13f      	bne.n	8008ab6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008a3e:	d106      	bne.n	8008a4e <mem_trim+0xfa>
 8008a40:	4b42      	ldr	r3, [pc, #264]	; (8008b4c <mem_trim+0x1f8>)
 8008a42:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008a46:	4946      	ldr	r1, [pc, #280]	; (8008b60 <mem_trim+0x20c>)
 8008a48:	4842      	ldr	r0, [pc, #264]	; (8008b54 <mem_trim+0x200>)
 8008a4a:	f00a f9c7 	bl	8012ddc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008a54:	8afa      	ldrh	r2, [r7, #22]
 8008a56:	8bfb      	ldrh	r3, [r7, #30]
 8008a58:	4413      	add	r3, r2
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008a60:	4b40      	ldr	r3, [pc, #256]	; (8008b64 <mem_trim+0x210>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d106      	bne.n	8008a78 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8008a6a:	89fb      	ldrh	r3, [r7, #14]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff fd8d 	bl	800858c <ptr_to_mem>
 8008a72:	4603      	mov	r3, r0
 8008a74:	4a3b      	ldr	r2, [pc, #236]	; (8008b64 <mem_trim+0x210>)
 8008a76:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008a78:	89fb      	ldrh	r3, [r7, #14]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff fd86 	bl	800858c <ptr_to_mem>
 8008a80:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	2200      	movs	r2, #0
 8008a86:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	89ba      	ldrh	r2, [r7, #12]
 8008a8c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	8afa      	ldrh	r2, [r7, #22]
 8008a92:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	89fa      	ldrh	r2, [r7, #14]
 8008a98:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008aa2:	d047      	beq.n	8008b34 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7ff fd6f 	bl	800858c <ptr_to_mem>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	89fb      	ldrh	r3, [r7, #14]
 8008ab2:	8053      	strh	r3, [r2, #2]
 8008ab4:	e03e      	b.n	8008b34 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008ab6:	8bfb      	ldrh	r3, [r7, #30]
 8008ab8:	f103 0214 	add.w	r2, r3, #20
 8008abc:	8abb      	ldrh	r3, [r7, #20]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d838      	bhi.n	8008b34 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008ac2:	8afa      	ldrh	r2, [r7, #22]
 8008ac4:	8bfb      	ldrh	r3, [r7, #30]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3308      	adds	r3, #8
 8008acc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008ad6:	d106      	bne.n	8008ae6 <mem_trim+0x192>
 8008ad8:	4b1c      	ldr	r3, [pc, #112]	; (8008b4c <mem_trim+0x1f8>)
 8008ada:	f240 3216 	movw	r2, #790	; 0x316
 8008ade:	4920      	ldr	r1, [pc, #128]	; (8008b60 <mem_trim+0x20c>)
 8008ae0:	481c      	ldr	r0, [pc, #112]	; (8008b54 <mem_trim+0x200>)
 8008ae2:	f00a f97b 	bl	8012ddc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008ae6:	89fb      	ldrh	r3, [r7, #14]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fd4f 	bl	800858c <ptr_to_mem>
 8008aee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008af0:	4b1c      	ldr	r3, [pc, #112]	; (8008b64 <mem_trim+0x210>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d202      	bcs.n	8008b00 <mem_trim+0x1ac>
      lfree = mem2;
 8008afa:	4a1a      	ldr	r2, [pc, #104]	; (8008b64 <mem_trim+0x210>)
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	2200      	movs	r2, #0
 8008b04:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	881a      	ldrh	r2, [r3, #0]
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	8afa      	ldrh	r2, [r7, #22]
 8008b12:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	89fa      	ldrh	r2, [r7, #14]
 8008b18:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008b22:	d007      	beq.n	8008b34 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	881b      	ldrh	r3, [r3, #0]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff fd2f 	bl	800858c <ptr_to_mem>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	89fb      	ldrh	r3, [r7, #14]
 8008b32:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008b34:	4809      	ldr	r0, [pc, #36]	; (8008b5c <mem_trim+0x208>)
 8008b36:	f009 fb1c 	bl	8012172 <sys_mutex_unlock>
  return rmem;
 8008b3a:	687b      	ldr	r3, [r7, #4]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3720      	adds	r7, #32
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	2000b0c4 	.word	0x2000b0c4
 8008b48:	2000b0c8 	.word	0x2000b0c8
 8008b4c:	080136d4 	.word	0x080136d4
 8008b50:	08013860 	.word	0x08013860
 8008b54:	0801371c 	.word	0x0801371c
 8008b58:	08013878 	.word	0x08013878
 8008b5c:	2000b0cc 	.word	0x2000b0cc
 8008b60:	08013898 	.word	0x08013898
 8008b64:	2000b0d0 	.word	0x2000b0d0

08008b68 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008b72:	88fb      	ldrh	r3, [r7, #6]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <mem_malloc+0x14>
    return NULL;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e0e2      	b.n	8008d42 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008b7c:	88fb      	ldrh	r3, [r7, #6]
 8008b7e:	3303      	adds	r3, #3
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	f023 0303 	bic.w	r3, r3, #3
 8008b86:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008b88:	8bbb      	ldrh	r3, [r7, #28]
 8008b8a:	2b0b      	cmp	r3, #11
 8008b8c:	d801      	bhi.n	8008b92 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008b8e:	230c      	movs	r3, #12
 8008b90:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008b92:	8bbb      	ldrh	r3, [r7, #28]
 8008b94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008b98:	d803      	bhi.n	8008ba2 <mem_malloc+0x3a>
 8008b9a:	8bba      	ldrh	r2, [r7, #28]
 8008b9c:	88fb      	ldrh	r3, [r7, #6]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d201      	bcs.n	8008ba6 <mem_malloc+0x3e>
    return NULL;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e0cd      	b.n	8008d42 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008ba6:	4869      	ldr	r0, [pc, #420]	; (8008d4c <mem_malloc+0x1e4>)
 8008ba8:	f009 fad4 	bl	8012154 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008bac:	4b68      	ldr	r3, [pc, #416]	; (8008d50 <mem_malloc+0x1e8>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7ff fcfd 	bl	80085b0 <mem_to_ptr>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	83fb      	strh	r3, [r7, #30]
 8008bba:	e0b7      	b.n	8008d2c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008bbc:	8bfb      	ldrh	r3, [r7, #30]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7ff fce4 	bl	800858c <ptr_to_mem>
 8008bc4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	791b      	ldrb	r3, [r3, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f040 80a7 	bne.w	8008d1e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	8bfb      	ldrh	r3, [r7, #30]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	f1a3 0208 	sub.w	r2, r3, #8
 8008bde:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008be0:	429a      	cmp	r2, r3
 8008be2:	f0c0 809c 	bcc.w	8008d1e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	8bfb      	ldrh	r3, [r7, #30]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	f1a3 0208 	sub.w	r2, r3, #8
 8008bf4:	8bbb      	ldrh	r3, [r7, #28]
 8008bf6:	3314      	adds	r3, #20
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d333      	bcc.n	8008c64 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008bfc:	8bfa      	ldrh	r2, [r7, #30]
 8008bfe:	8bbb      	ldrh	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	3308      	adds	r3, #8
 8008c06:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008c08:	8a7b      	ldrh	r3, [r7, #18]
 8008c0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008c0e:	d106      	bne.n	8008c1e <mem_malloc+0xb6>
 8008c10:	4b50      	ldr	r3, [pc, #320]	; (8008d54 <mem_malloc+0x1ec>)
 8008c12:	f240 3287 	movw	r2, #903	; 0x387
 8008c16:	4950      	ldr	r1, [pc, #320]	; (8008d58 <mem_malloc+0x1f0>)
 8008c18:	4850      	ldr	r0, [pc, #320]	; (8008d5c <mem_malloc+0x1f4>)
 8008c1a:	f00a f8df 	bl	8012ddc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008c1e:	8a7b      	ldrh	r3, [r7, #18]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7ff fcb3 	bl	800858c <ptr_to_mem>
 8008c26:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	881a      	ldrh	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	8bfa      	ldrh	r2, [r7, #30]
 8008c3a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	8a7a      	ldrh	r2, [r7, #18]
 8008c40:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2201      	movs	r2, #1
 8008c46:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008c50:	d00b      	beq.n	8008c6a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fc98 	bl	800858c <ptr_to_mem>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	8a7b      	ldrh	r3, [r7, #18]
 8008c60:	8053      	strh	r3, [r2, #2]
 8008c62:	e002      	b.n	8008c6a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	2201      	movs	r2, #1
 8008c68:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008c6a:	4b39      	ldr	r3, [pc, #228]	; (8008d50 <mem_malloc+0x1e8>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d127      	bne.n	8008cc4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8008c74:	4b36      	ldr	r3, [pc, #216]	; (8008d50 <mem_malloc+0x1e8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008c7a:	e005      	b.n	8008c88 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff fc83 	bl	800858c <ptr_to_mem>
 8008c86:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	791b      	ldrb	r3, [r3, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <mem_malloc+0x132>
 8008c90:	4b33      	ldr	r3, [pc, #204]	; (8008d60 <mem_malloc+0x1f8>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d1f0      	bne.n	8008c7c <mem_malloc+0x114>
          }
          lfree = cur;
 8008c9a:	4a2d      	ldr	r2, [pc, #180]	; (8008d50 <mem_malloc+0x1e8>)
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008ca0:	4b2b      	ldr	r3, [pc, #172]	; (8008d50 <mem_malloc+0x1e8>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	4b2e      	ldr	r3, [pc, #184]	; (8008d60 <mem_malloc+0x1f8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d00b      	beq.n	8008cc4 <mem_malloc+0x15c>
 8008cac:	4b28      	ldr	r3, [pc, #160]	; (8008d50 <mem_malloc+0x1e8>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	791b      	ldrb	r3, [r3, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d006      	beq.n	8008cc4 <mem_malloc+0x15c>
 8008cb6:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <mem_malloc+0x1ec>)
 8008cb8:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008cbc:	4929      	ldr	r1, [pc, #164]	; (8008d64 <mem_malloc+0x1fc>)
 8008cbe:	4827      	ldr	r0, [pc, #156]	; (8008d5c <mem_malloc+0x1f4>)
 8008cc0:	f00a f88c 	bl	8012ddc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008cc4:	4821      	ldr	r0, [pc, #132]	; (8008d4c <mem_malloc+0x1e4>)
 8008cc6:	f009 fa54 	bl	8012172 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008cca:	8bba      	ldrh	r2, [r7, #28]
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	4413      	add	r3, r2
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	4a23      	ldr	r2, [pc, #140]	; (8008d60 <mem_malloc+0x1f8>)
 8008cd4:	6812      	ldr	r2, [r2, #0]
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d906      	bls.n	8008ce8 <mem_malloc+0x180>
 8008cda:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <mem_malloc+0x1ec>)
 8008cdc:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008ce0:	4921      	ldr	r1, [pc, #132]	; (8008d68 <mem_malloc+0x200>)
 8008ce2:	481e      	ldr	r0, [pc, #120]	; (8008d5c <mem_malloc+0x1f4>)
 8008ce4:	f00a f87a 	bl	8012ddc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d006      	beq.n	8008d00 <mem_malloc+0x198>
 8008cf2:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <mem_malloc+0x1ec>)
 8008cf4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008cf8:	491c      	ldr	r1, [pc, #112]	; (8008d6c <mem_malloc+0x204>)
 8008cfa:	4818      	ldr	r0, [pc, #96]	; (8008d5c <mem_malloc+0x1f4>)
 8008cfc:	f00a f86e 	bl	8012ddc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d006      	beq.n	8008d18 <mem_malloc+0x1b0>
 8008d0a:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <mem_malloc+0x1ec>)
 8008d0c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008d10:	4917      	ldr	r1, [pc, #92]	; (8008d70 <mem_malloc+0x208>)
 8008d12:	4812      	ldr	r0, [pc, #72]	; (8008d5c <mem_malloc+0x1f4>)
 8008d14:	f00a f862 	bl	8012ddc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	e011      	b.n	8008d42 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8008d1e:	8bfb      	ldrh	r3, [r7, #30]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff fc33 	bl	800858c <ptr_to_mem>
 8008d26:	4603      	mov	r3, r0
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008d2c:	8bfa      	ldrh	r2, [r7, #30]
 8008d2e:	8bbb      	ldrh	r3, [r7, #28]
 8008d30:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008d34:	429a      	cmp	r2, r3
 8008d36:	f4ff af41 	bcc.w	8008bbc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008d3a:	4804      	ldr	r0, [pc, #16]	; (8008d4c <mem_malloc+0x1e4>)
 8008d3c:	f009 fa19 	bl	8012172 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3720      	adds	r7, #32
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	2000b0cc 	.word	0x2000b0cc
 8008d50:	2000b0d0 	.word	0x2000b0d0
 8008d54:	080136d4 	.word	0x080136d4
 8008d58:	08013898 	.word	0x08013898
 8008d5c:	0801371c 	.word	0x0801371c
 8008d60:	2000b0c8 	.word	0x2000b0c8
 8008d64:	080138ac 	.word	0x080138ac
 8008d68:	080138c8 	.word	0x080138c8
 8008d6c:	080138f8 	.word	0x080138f8
 8008d70:	08013928 	.word	0x08013928

08008d74 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	3303      	adds	r3, #3
 8008d8a:	f023 0303 	bic.w	r3, r3, #3
 8008d8e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008d90:	2300      	movs	r3, #0
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	e011      	b.n	8008dba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	4413      	add	r3, r2
 8008db2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3301      	adds	r3, #1
 8008db8:	60fb      	str	r3, [r7, #12]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	885b      	ldrh	r3, [r3, #2]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	dbe7      	blt.n	8008d96 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008dda:	2300      	movs	r3, #0
 8008ddc:	80fb      	strh	r3, [r7, #6]
 8008dde:	e009      	b.n	8008df4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008de0:	88fb      	ldrh	r3, [r7, #6]
 8008de2:	4a08      	ldr	r2, [pc, #32]	; (8008e04 <memp_init+0x30>)
 8008de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7ff ffc3 	bl	8008d74 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008dee:	88fb      	ldrh	r3, [r7, #6]
 8008df0:	3301      	adds	r3, #1
 8008df2:	80fb      	strh	r3, [r7, #6]
 8008df4:	88fb      	ldrh	r3, [r7, #6]
 8008df6:	2b0c      	cmp	r3, #12
 8008df8:	d9f2      	bls.n	8008de0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008dfa:	bf00      	nop
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	08016154 	.word	0x08016154

08008e08 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008e10:	f009 f9dc 	bl	80121cc <sys_arch_protect>
 8008e14:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d015      	beq.n	8008e50 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	6812      	ldr	r2, [r2, #0]
 8008e2c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f003 0303 	and.w	r3, r3, #3
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d006      	beq.n	8008e46 <do_memp_malloc_pool+0x3e>
 8008e38:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <do_memp_malloc_pool+0x58>)
 8008e3a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008e3e:	4909      	ldr	r1, [pc, #36]	; (8008e64 <do_memp_malloc_pool+0x5c>)
 8008e40:	4809      	ldr	r0, [pc, #36]	; (8008e68 <do_memp_malloc_pool+0x60>)
 8008e42:	f009 ffcb 	bl	8012ddc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f009 f9ce 	bl	80121e8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	e003      	b.n	8008e58 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f009 f9c9 	bl	80121e8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	0801394c 	.word	0x0801394c
 8008e64:	0801397c 	.word	0x0801397c
 8008e68:	080139a0 	.word	0x080139a0

08008e6c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008e76:	79fb      	ldrb	r3, [r7, #7]
 8008e78:	2b0c      	cmp	r3, #12
 8008e7a:	d908      	bls.n	8008e8e <memp_malloc+0x22>
 8008e7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ea8 <memp_malloc+0x3c>)
 8008e7e:	f240 1257 	movw	r2, #343	; 0x157
 8008e82:	490a      	ldr	r1, [pc, #40]	; (8008eac <memp_malloc+0x40>)
 8008e84:	480a      	ldr	r0, [pc, #40]	; (8008eb0 <memp_malloc+0x44>)
 8008e86:	f009 ffa9 	bl	8012ddc <iprintf>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e008      	b.n	8008ea0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	4a08      	ldr	r2, [pc, #32]	; (8008eb4 <memp_malloc+0x48>)
 8008e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff ffb6 	bl	8008e08 <do_memp_malloc_pool>
 8008e9c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	0801394c 	.word	0x0801394c
 8008eac:	080139dc 	.word	0x080139dc
 8008eb0:	080139a0 	.word	0x080139a0
 8008eb4:	08016154 	.word	0x08016154

08008eb8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	f003 0303 	and.w	r3, r3, #3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d006      	beq.n	8008eda <do_memp_free_pool+0x22>
 8008ecc:	4b0d      	ldr	r3, [pc, #52]	; (8008f04 <do_memp_free_pool+0x4c>)
 8008ece:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008ed2:	490d      	ldr	r1, [pc, #52]	; (8008f08 <do_memp_free_pool+0x50>)
 8008ed4:	480d      	ldr	r0, [pc, #52]	; (8008f0c <do_memp_free_pool+0x54>)
 8008ed6:	f009 ff81 	bl	8012ddc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008ede:	f009 f975 	bl	80121cc <sys_arch_protect>
 8008ee2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008ef6:	68b8      	ldr	r0, [r7, #8]
 8008ef8:	f009 f976 	bl	80121e8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008efc:	bf00      	nop
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	0801394c 	.word	0x0801394c
 8008f08:	080139fc 	.word	0x080139fc
 8008f0c:	080139a0 	.word	0x080139a0

08008f10 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	6039      	str	r1, [r7, #0]
 8008f1a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008f1c:	79fb      	ldrb	r3, [r7, #7]
 8008f1e:	2b0c      	cmp	r3, #12
 8008f20:	d907      	bls.n	8008f32 <memp_free+0x22>
 8008f22:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <memp_free+0x44>)
 8008f24:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008f28:	490b      	ldr	r1, [pc, #44]	; (8008f58 <memp_free+0x48>)
 8008f2a:	480c      	ldr	r0, [pc, #48]	; (8008f5c <memp_free+0x4c>)
 8008f2c:	f009 ff56 	bl	8012ddc <iprintf>
 8008f30:	e00c      	b.n	8008f4c <memp_free+0x3c>

  if (mem == NULL) {
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d008      	beq.n	8008f4a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008f38:	79fb      	ldrb	r3, [r7, #7]
 8008f3a:	4a09      	ldr	r2, [pc, #36]	; (8008f60 <memp_free+0x50>)
 8008f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff ffb8 	bl	8008eb8 <do_memp_free_pool>
 8008f48:	e000      	b.n	8008f4c <memp_free+0x3c>
    return;
 8008f4a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	0801394c 	.word	0x0801394c
 8008f58:	08013a1c 	.word	0x08013a1c
 8008f5c:	080139a0 	.word	0x080139a0
 8008f60:	08016154 	.word	0x08016154

08008f64 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008f68:	bf00      	nop
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
	...

08008f74 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d108      	bne.n	8008f9a <netif_add+0x26>
 8008f88:	4b57      	ldr	r3, [pc, #348]	; (80090e8 <netif_add+0x174>)
 8008f8a:	f240 1227 	movw	r2, #295	; 0x127
 8008f8e:	4957      	ldr	r1, [pc, #348]	; (80090ec <netif_add+0x178>)
 8008f90:	4857      	ldr	r0, [pc, #348]	; (80090f0 <netif_add+0x17c>)
 8008f92:	f009 ff23 	bl	8012ddc <iprintf>
 8008f96:	2300      	movs	r3, #0
 8008f98:	e0a2      	b.n	80090e0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d108      	bne.n	8008fb2 <netif_add+0x3e>
 8008fa0:	4b51      	ldr	r3, [pc, #324]	; (80090e8 <netif_add+0x174>)
 8008fa2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008fa6:	4953      	ldr	r1, [pc, #332]	; (80090f4 <netif_add+0x180>)
 8008fa8:	4851      	ldr	r0, [pc, #324]	; (80090f0 <netif_add+0x17c>)
 8008faa:	f009 ff17 	bl	8012ddc <iprintf>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e096      	b.n	80090e0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008fb8:	4b4f      	ldr	r3, [pc, #316]	; (80090f8 <netif_add+0x184>)
 8008fba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008fc2:	4b4d      	ldr	r3, [pc, #308]	; (80090f8 <netif_add+0x184>)
 8008fc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008fcc:	4b4a      	ldr	r3, [pc, #296]	; (80090f8 <netif_add+0x184>)
 8008fce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	4a45      	ldr	r2, [pc, #276]	; (80090fc <netif_add+0x188>)
 8008fe6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6a3a      	ldr	r2, [r7, #32]
 8009000:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009002:	4b3f      	ldr	r3, [pc, #252]	; (8009100 <netif_add+0x18c>)
 8009004:	781a      	ldrb	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009010:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 f913 	bl	8009244 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	4798      	blx	r3
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <netif_add+0xba>
    return NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	e058      	b.n	80090e0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009034:	2bff      	cmp	r3, #255	; 0xff
 8009036:	d103      	bne.n	8009040 <netif_add+0xcc>
        netif->num = 0;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009044:	4b2f      	ldr	r3, [pc, #188]	; (8009104 <netif_add+0x190>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	617b      	str	r3, [r7, #20]
 800904a:	e02b      	b.n	80090a4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	429a      	cmp	r2, r3
 8009052:	d106      	bne.n	8009062 <netif_add+0xee>
 8009054:	4b24      	ldr	r3, [pc, #144]	; (80090e8 <netif_add+0x174>)
 8009056:	f240 128b 	movw	r2, #395	; 0x18b
 800905a:	492b      	ldr	r1, [pc, #172]	; (8009108 <netif_add+0x194>)
 800905c:	4824      	ldr	r0, [pc, #144]	; (80090f0 <netif_add+0x17c>)
 800905e:	f009 febd 	bl	8012ddc <iprintf>
        num_netifs++;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	3301      	adds	r3, #1
 8009066:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	2bff      	cmp	r3, #255	; 0xff
 800906c:	dd06      	ble.n	800907c <netif_add+0x108>
 800906e:	4b1e      	ldr	r3, [pc, #120]	; (80090e8 <netif_add+0x174>)
 8009070:	f240 128d 	movw	r2, #397	; 0x18d
 8009074:	4925      	ldr	r1, [pc, #148]	; (800910c <netif_add+0x198>)
 8009076:	481e      	ldr	r0, [pc, #120]	; (80090f0 <netif_add+0x17c>)
 8009078:	f009 feb0 	bl	8012ddc <iprintf>
        if (netif2->num == netif->num) {
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009088:	429a      	cmp	r2, r3
 800908a:	d108      	bne.n	800909e <netif_add+0x12a>
          netif->num++;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009092:	3301      	adds	r3, #1
 8009094:	b2da      	uxtb	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800909c:	e005      	b.n	80090aa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	617b      	str	r3, [r7, #20]
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1d0      	bne.n	800904c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1be      	bne.n	800902e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090b6:	2bfe      	cmp	r3, #254	; 0xfe
 80090b8:	d103      	bne.n	80090c2 <netif_add+0x14e>
    netif_num = 0;
 80090ba:	4b11      	ldr	r3, [pc, #68]	; (8009100 <netif_add+0x18c>)
 80090bc:	2200      	movs	r2, #0
 80090be:	701a      	strb	r2, [r3, #0]
 80090c0:	e006      	b.n	80090d0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090c8:	3301      	adds	r3, #1
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	4b0c      	ldr	r3, [pc, #48]	; (8009100 <netif_add+0x18c>)
 80090ce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80090d0:	4b0c      	ldr	r3, [pc, #48]	; (8009104 <netif_add+0x190>)
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80090d8:	4a0a      	ldr	r2, [pc, #40]	; (8009104 <netif_add+0x190>)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80090de:	68fb      	ldr	r3, [r7, #12]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3718      	adds	r7, #24
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	08013a38 	.word	0x08013a38
 80090ec:	08013acc 	.word	0x08013acc
 80090f0:	08013a88 	.word	0x08013a88
 80090f4:	08013ae8 	.word	0x08013ae8
 80090f8:	080161c8 	.word	0x080161c8
 80090fc:	0800951f 	.word	0x0800951f
 8009100:	2000b108 	.word	0x2000b108
 8009104:	20011be8 	.word	0x20011be8
 8009108:	08013b0c 	.word	0x08013b0c
 800910c:	08013b20 	.word	0x08013b20

08009110 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f002 fb7d 	bl	800b81c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f006 fc8d 	bl	800fa44 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d106      	bne.n	8009154 <netif_do_set_ipaddr+0x20>
 8009146:	4b1d      	ldr	r3, [pc, #116]	; (80091bc <netif_do_set_ipaddr+0x88>)
 8009148:	f240 12cb 	movw	r2, #459	; 0x1cb
 800914c:	491c      	ldr	r1, [pc, #112]	; (80091c0 <netif_do_set_ipaddr+0x8c>)
 800914e:	481d      	ldr	r0, [pc, #116]	; (80091c4 <netif_do_set_ipaddr+0x90>)
 8009150:	f009 fe44 	bl	8012ddc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <netif_do_set_ipaddr+0x34>
 800915a:	4b18      	ldr	r3, [pc, #96]	; (80091bc <netif_do_set_ipaddr+0x88>)
 800915c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8009160:	4917      	ldr	r1, [pc, #92]	; (80091c0 <netif_do_set_ipaddr+0x8c>)
 8009162:	4818      	ldr	r0, [pc, #96]	; (80091c4 <netif_do_set_ipaddr+0x90>)
 8009164:	f009 fe3a 	bl	8012ddc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3304      	adds	r3, #4
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d01c      	beq.n	80091b0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3304      	adds	r3, #4
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8009186:	f107 0314 	add.w	r3, r7, #20
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff ffbf 	bl	8009110 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <netif_do_set_ipaddr+0x6a>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	e000      	b.n	80091a0 <netif_do_set_ipaddr+0x6c>
 800919e:	2300      	movs	r3, #0
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80091a4:	2101      	movs	r1, #1
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f8d2 	bl	8009350 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80091ac:	2301      	movs	r3, #1
 80091ae:	e000      	b.n	80091b2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3718      	adds	r7, #24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	08013a38 	.word	0x08013a38
 80091c0:	08013b50 	.word	0x08013b50
 80091c4:	08013a88 	.word	0x08013a88

080091c8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3308      	adds	r3, #8
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d00a      	beq.n	80091f8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <netif_do_set_netmask+0x26>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	e000      	b.n	80091f0 <netif_do_set_netmask+0x28>
 80091ee:	2300      	movs	r3, #0
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80091f4:	2301      	movs	r3, #1
 80091f6:	e000      	b.n	80091fa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8009206:	b480      	push	{r7}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	60b9      	str	r1, [r7, #8]
 8009210:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	330c      	adds	r3, #12
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d00a      	beq.n	8009236 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <netif_do_set_gw+0x26>
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	e000      	b.n	800922e <netif_do_set_gw+0x28>
 800922c:	2300      	movs	r3, #0
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8009232:	2301      	movs	r3, #1
 8009234:	e000      	b.n	8009238 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b088      	sub	sp, #32
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
 8009250:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009260:	4b1c      	ldr	r3, [pc, #112]	; (80092d4 <netif_set_addr+0x90>)
 8009262:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800926a:	4b1a      	ldr	r3, [pc, #104]	; (80092d4 <netif_set_addr+0x90>)
 800926c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d101      	bne.n	8009278 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8009274:	4b17      	ldr	r3, [pc, #92]	; (80092d4 <netif_set_addr+0x90>)
 8009276:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <netif_set_addr+0x42>
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <netif_set_addr+0x46>
 8009286:	2301      	movs	r3, #1
 8009288:	e000      	b.n	800928c <netif_set_addr+0x48>
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d006      	beq.n	80092a2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009294:	f107 0310 	add.w	r3, r7, #16
 8009298:	461a      	mov	r2, r3
 800929a:	68b9      	ldr	r1, [r7, #8]
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f7ff ff49 	bl	8009134 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80092a2:	69fa      	ldr	r2, [r7, #28]
 80092a4:	6879      	ldr	r1, [r7, #4]
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7ff ff8e 	bl	80091c8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	6839      	ldr	r1, [r7, #0]
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f7ff ffa8 	bl	8009206 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d106      	bne.n	80092ca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80092bc:	f107 0310 	add.w	r3, r7, #16
 80092c0:	461a      	mov	r2, r3
 80092c2:	68b9      	ldr	r1, [r7, #8]
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f7ff ff35 	bl	8009134 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80092ca:	bf00      	nop
 80092cc:	3720      	adds	r7, #32
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	080161c8 	.word	0x080161c8

080092d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80092e0:	4a04      	ldr	r2, [pc, #16]	; (80092f4 <netif_set_default+0x1c>)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80092e6:	bf00      	nop
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20011bec 	.word	0x20011bec

080092f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d107      	bne.n	8009316 <netif_set_up+0x1e>
 8009306:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <netif_set_up+0x4c>)
 8009308:	f44f 7254 	mov.w	r2, #848	; 0x350
 800930c:	490e      	ldr	r1, [pc, #56]	; (8009348 <netif_set_up+0x50>)
 800930e:	480f      	ldr	r0, [pc, #60]	; (800934c <netif_set_up+0x54>)
 8009310:	f009 fd64 	bl	8012ddc <iprintf>
 8009314:	e013      	b.n	800933e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10c      	bne.n	800933e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800932a:	f043 0301 	orr.w	r3, r3, #1
 800932e:	b2da      	uxtb	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009336:	2103      	movs	r1, #3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f809 	bl	8009350 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	08013a38 	.word	0x08013a38
 8009348:	08013bc0 	.word	0x08013bc0
 800934c:	08013a88 	.word	0x08013a88

08009350 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <netif_issue_reports+0x20>
 8009362:	4b18      	ldr	r3, [pc, #96]	; (80093c4 <netif_issue_reports+0x74>)
 8009364:	f240 326d 	movw	r2, #877	; 0x36d
 8009368:	4917      	ldr	r1, [pc, #92]	; (80093c8 <netif_issue_reports+0x78>)
 800936a:	4818      	ldr	r0, [pc, #96]	; (80093cc <netif_issue_reports+0x7c>)
 800936c:	f009 fd36 	bl	8012ddc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b00      	cmp	r3, #0
 800937c:	d01e      	beq.n	80093bc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009384:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009388:	2b00      	cmp	r3, #0
 800938a:	d017      	beq.n	80093bc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800938c:	78fb      	ldrb	r3, [r7, #3]
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d013      	beq.n	80093be <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3304      	adds	r3, #4
 800939a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00e      	beq.n	80093be <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093a6:	f003 0308 	and.w	r3, r3, #8
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d007      	beq.n	80093be <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3304      	adds	r3, #4
 80093b2:	4619      	mov	r1, r3
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f007 faaf 	bl	8010918 <etharp_request>
 80093ba:	e000      	b.n	80093be <netif_issue_reports+0x6e>
    return;
 80093bc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	08013a38 	.word	0x08013a38
 80093c8:	08013bdc 	.word	0x08013bdc
 80093cc:	08013a88 	.word	0x08013a88

080093d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d107      	bne.n	80093ee <netif_set_down+0x1e>
 80093de:	4b12      	ldr	r3, [pc, #72]	; (8009428 <netif_set_down+0x58>)
 80093e0:	f240 329b 	movw	r2, #923	; 0x39b
 80093e4:	4911      	ldr	r1, [pc, #68]	; (800942c <netif_set_down+0x5c>)
 80093e6:	4812      	ldr	r0, [pc, #72]	; (8009430 <netif_set_down+0x60>)
 80093e8:	f009 fcf8 	bl	8012ddc <iprintf>
 80093ec:	e019      	b.n	8009422 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d012      	beq.n	8009422 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009402:	f023 0301 	bic.w	r3, r3, #1
 8009406:	b2da      	uxtb	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009414:	f003 0308 	and.w	r3, r3, #8
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f006 fe39 	bl	8010094 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	08013a38 	.word	0x08013a38
 800942c:	08013c00 	.word	0x08013c00
 8009430:	08013a88 	.word	0x08013a88

08009434 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d107      	bne.n	8009452 <netif_set_link_up+0x1e>
 8009442:	4b13      	ldr	r3, [pc, #76]	; (8009490 <netif_set_link_up+0x5c>)
 8009444:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8009448:	4912      	ldr	r1, [pc, #72]	; (8009494 <netif_set_link_up+0x60>)
 800944a:	4813      	ldr	r0, [pc, #76]	; (8009498 <netif_set_link_up+0x64>)
 800944c:	f009 fcc6 	bl	8012ddc <iprintf>
 8009450:	e01b      	b.n	800948a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b00      	cmp	r3, #0
 800945e:	d114      	bne.n	800948a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009466:	f043 0304 	orr.w	r3, r3, #4
 800946a:	b2da      	uxtb	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8009472:	2103      	movs	r1, #3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff ff6b 	bl	8009350 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <netif_set_link_up+0x56>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	08013a38 	.word	0x08013a38
 8009494:	08013c20 	.word	0x08013c20
 8009498:	08013a88 	.word	0x08013a88

0800949c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d107      	bne.n	80094ba <netif_set_link_down+0x1e>
 80094aa:	4b11      	ldr	r3, [pc, #68]	; (80094f0 <netif_set_link_down+0x54>)
 80094ac:	f240 4206 	movw	r2, #1030	; 0x406
 80094b0:	4910      	ldr	r1, [pc, #64]	; (80094f4 <netif_set_link_down+0x58>)
 80094b2:	4811      	ldr	r0, [pc, #68]	; (80094f8 <netif_set_link_down+0x5c>)
 80094b4:	f009 fc92 	bl	8012ddc <iprintf>
 80094b8:	e017      	b.n	80094ea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094c0:	f003 0304 	and.w	r3, r3, #4
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d010      	beq.n	80094ea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80094ce:	f023 0304 	bic.w	r3, r3, #4
 80094d2:	b2da      	uxtb	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69db      	ldr	r3, [r3, #28]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <netif_set_link_down+0x4e>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80094ea:	3708      	adds	r7, #8
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	08013a38 	.word	0x08013a38
 80094f4:	08013c44 	.word	0x08013c44
 80094f8:	08013a88 	.word	0x08013a88

080094fc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	61da      	str	r2, [r3, #28]
  }
}
 8009512:	bf00      	nop
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800951e:	b480      	push	{r7}
 8009520:	b085      	sub	sp, #20
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800952a:	f06f 030b 	mvn.w	r3, #11
}
 800952e:	4618      	mov	r0, r3
 8009530:	3714      	adds	r7, #20
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
	...

0800953c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8009546:	79fb      	ldrb	r3, [r7, #7]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d013      	beq.n	8009574 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800954c:	4b0d      	ldr	r3, [pc, #52]	; (8009584 <netif_get_by_index+0x48>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	e00c      	b.n	800956e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800955a:	3301      	adds	r3, #1
 800955c:	b2db      	uxtb	r3, r3
 800955e:	79fa      	ldrb	r2, [r7, #7]
 8009560:	429a      	cmp	r2, r3
 8009562:	d101      	bne.n	8009568 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	e006      	b.n	8009576 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	60fb      	str	r3, [r7, #12]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1ef      	bne.n	8009554 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20011be8 	.word	0x20011be8

08009588 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800958e:	f008 fe1d 	bl	80121cc <sys_arch_protect>
 8009592:	6038      	str	r0, [r7, #0]
 8009594:	4b0d      	ldr	r3, [pc, #52]	; (80095cc <pbuf_free_ooseq+0x44>)
 8009596:	2200      	movs	r2, #0
 8009598:	701a      	strb	r2, [r3, #0]
 800959a:	6838      	ldr	r0, [r7, #0]
 800959c:	f008 fe24 	bl	80121e8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80095a0:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <pbuf_free_ooseq+0x48>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	607b      	str	r3, [r7, #4]
 80095a6:	e00a      	b.n	80095be <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f002 f971 	bl	800b898 <tcp_free_ooseq>
      return;
 80095b6:	e005      	b.n	80095c4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	607b      	str	r3, [r7, #4]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1f1      	bne.n	80095a8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20011bf0 	.word	0x20011bf0
 80095d0:	20011bf8 	.word	0x20011bf8

080095d4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80095dc:	f7ff ffd4 	bl	8009588 <pbuf_free_ooseq>
}
 80095e0:	bf00      	nop
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80095ee:	f008 fded 	bl	80121cc <sys_arch_protect>
 80095f2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80095f4:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <pbuf_pool_is_empty+0x4c>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80095fa:	4b0e      	ldr	r3, [pc, #56]	; (8009634 <pbuf_pool_is_empty+0x4c>)
 80095fc:	2201      	movs	r2, #1
 80095fe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f008 fdf1 	bl	80121e8 <sys_arch_unprotect>

  if (!queued) {
 8009606:	78fb      	ldrb	r3, [r7, #3]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10f      	bne.n	800962c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800960c:	2100      	movs	r1, #0
 800960e:	480a      	ldr	r0, [pc, #40]	; (8009638 <pbuf_pool_is_empty+0x50>)
 8009610:	f7fe feec 	bl	80083ec <tcpip_try_callback>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d008      	beq.n	800962c <pbuf_pool_is_empty+0x44>
 800961a:	f008 fdd7 	bl	80121cc <sys_arch_protect>
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	4b04      	ldr	r3, [pc, #16]	; (8009634 <pbuf_pool_is_empty+0x4c>)
 8009622:	2200      	movs	r2, #0
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f008 fdde 	bl	80121e8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	20011bf0 	.word	0x20011bf0
 8009638:	080095d5 	.word	0x080095d5

0800963c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4611      	mov	r1, r2
 8009648:	461a      	mov	r2, r3
 800964a:	460b      	mov	r3, r1
 800964c:	80fb      	strh	r3, [r7, #6]
 800964e:	4613      	mov	r3, r2
 8009650:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	88fa      	ldrh	r2, [r7, #6]
 8009662:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	88ba      	ldrh	r2, [r7, #4]
 8009668:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800966a:	8b3b      	ldrh	r3, [r7, #24]
 800966c:	b2da      	uxtb	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	7f3a      	ldrb	r2, [r7, #28]
 8009676:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2201      	movs	r2, #1
 800967c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	73da      	strb	r2, [r3, #15]
}
 8009684:	bf00      	nop
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b08c      	sub	sp, #48	; 0x30
 8009694:	af02      	add	r7, sp, #8
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
 800969a:	460b      	mov	r3, r1
 800969c:	80bb      	strh	r3, [r7, #4]
 800969e:	4613      	mov	r3, r2
 80096a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80096a2:	79fb      	ldrb	r3, [r7, #7]
 80096a4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80096a6:	887b      	ldrh	r3, [r7, #2]
 80096a8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80096ac:	d07f      	beq.n	80097ae <pbuf_alloc+0x11e>
 80096ae:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80096b2:	f300 80c8 	bgt.w	8009846 <pbuf_alloc+0x1b6>
 80096b6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80096ba:	d010      	beq.n	80096de <pbuf_alloc+0x4e>
 80096bc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80096c0:	f300 80c1 	bgt.w	8009846 <pbuf_alloc+0x1b6>
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d002      	beq.n	80096ce <pbuf_alloc+0x3e>
 80096c8:	2b41      	cmp	r3, #65	; 0x41
 80096ca:	f040 80bc 	bne.w	8009846 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80096ce:	887a      	ldrh	r2, [r7, #2]
 80096d0:	88bb      	ldrh	r3, [r7, #4]
 80096d2:	4619      	mov	r1, r3
 80096d4:	2000      	movs	r0, #0
 80096d6:	f000 f8d1 	bl	800987c <pbuf_alloc_reference>
 80096da:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80096dc:	e0bd      	b.n	800985a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80096e6:	88bb      	ldrh	r3, [r7, #4]
 80096e8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80096ea:	200c      	movs	r0, #12
 80096ec:	f7ff fbbe 	bl	8008e6c <memp_malloc>
 80096f0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d109      	bne.n	800970c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80096f8:	f7ff ff76 	bl	80095e8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d002      	beq.n	8009708 <pbuf_alloc+0x78>
            pbuf_free(p);
 8009702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009704:	f000 faa8 	bl	8009c58 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009708:	2300      	movs	r3, #0
 800970a:	e0a7      	b.n	800985c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800970c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800970e:	3303      	adds	r3, #3
 8009710:	b29b      	uxth	r3, r3
 8009712:	f023 0303 	bic.w	r3, r3, #3
 8009716:	b29b      	uxth	r3, r3
 8009718:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800971c:	b29b      	uxth	r3, r3
 800971e:	8b7a      	ldrh	r2, [r7, #26]
 8009720:	4293      	cmp	r3, r2
 8009722:	bf28      	it	cs
 8009724:	4613      	movcs	r3, r2
 8009726:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800972a:	3310      	adds	r3, #16
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	4413      	add	r3, r2
 8009730:	3303      	adds	r3, #3
 8009732:	f023 0303 	bic.w	r3, r3, #3
 8009736:	4618      	mov	r0, r3
 8009738:	89f9      	ldrh	r1, [r7, #14]
 800973a:	8b7a      	ldrh	r2, [r7, #26]
 800973c:	2300      	movs	r3, #0
 800973e:	9301      	str	r3, [sp, #4]
 8009740:	887b      	ldrh	r3, [r7, #2]
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	460b      	mov	r3, r1
 8009746:	4601      	mov	r1, r0
 8009748:	6938      	ldr	r0, [r7, #16]
 800974a:	f7ff ff77 	bl	800963c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f003 0303 	and.w	r3, r3, #3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d006      	beq.n	8009768 <pbuf_alloc+0xd8>
 800975a:	4b42      	ldr	r3, [pc, #264]	; (8009864 <pbuf_alloc+0x1d4>)
 800975c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009760:	4941      	ldr	r1, [pc, #260]	; (8009868 <pbuf_alloc+0x1d8>)
 8009762:	4842      	ldr	r0, [pc, #264]	; (800986c <pbuf_alloc+0x1dc>)
 8009764:	f009 fb3a 	bl	8012ddc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009768:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800976a:	3303      	adds	r3, #3
 800976c:	f023 0303 	bic.w	r3, r3, #3
 8009770:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009774:	d106      	bne.n	8009784 <pbuf_alloc+0xf4>
 8009776:	4b3b      	ldr	r3, [pc, #236]	; (8009864 <pbuf_alloc+0x1d4>)
 8009778:	f44f 7281 	mov.w	r2, #258	; 0x102
 800977c:	493c      	ldr	r1, [pc, #240]	; (8009870 <pbuf_alloc+0x1e0>)
 800977e:	483b      	ldr	r0, [pc, #236]	; (800986c <pbuf_alloc+0x1dc>)
 8009780:	f009 fb2c 	bl	8012ddc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	2b00      	cmp	r3, #0
 8009788:	d102      	bne.n	8009790 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
 800978e:	e002      	b.n	8009796 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	693a      	ldr	r2, [r7, #16]
 8009794:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800979a:	8b7a      	ldrh	r2, [r7, #26]
 800979c:	89fb      	ldrh	r3, [r7, #14]
 800979e:	1ad3      	subs	r3, r2, r3
 80097a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80097a6:	8b7b      	ldrh	r3, [r7, #26]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d19e      	bne.n	80096ea <pbuf_alloc+0x5a>
      break;
 80097ac:	e055      	b.n	800985a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80097ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80097b0:	3303      	adds	r3, #3
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	f023 0303 	bic.w	r3, r3, #3
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	88bb      	ldrh	r3, [r7, #4]
 80097bc:	3303      	adds	r3, #3
 80097be:	b29b      	uxth	r3, r3
 80097c0:	f023 0303 	bic.w	r3, r3, #3
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	4413      	add	r3, r2
 80097c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80097ca:	8b3b      	ldrh	r3, [r7, #24]
 80097cc:	3310      	adds	r3, #16
 80097ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80097d0:	8b3a      	ldrh	r2, [r7, #24]
 80097d2:	88bb      	ldrh	r3, [r7, #4]
 80097d4:	3303      	adds	r3, #3
 80097d6:	f023 0303 	bic.w	r3, r3, #3
 80097da:	429a      	cmp	r2, r3
 80097dc:	d306      	bcc.n	80097ec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80097de:	8afa      	ldrh	r2, [r7, #22]
 80097e0:	88bb      	ldrh	r3, [r7, #4]
 80097e2:	3303      	adds	r3, #3
 80097e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d201      	bcs.n	80097f0 <pbuf_alloc+0x160>
        return NULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	e035      	b.n	800985c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80097f0:	8afb      	ldrh	r3, [r7, #22]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff f9b8 	bl	8008b68 <mem_malloc>
 80097f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <pbuf_alloc+0x174>
        return NULL;
 8009800:	2300      	movs	r3, #0
 8009802:	e02b      	b.n	800985c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009804:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009806:	3310      	adds	r3, #16
 8009808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800980a:	4413      	add	r3, r2
 800980c:	3303      	adds	r3, #3
 800980e:	f023 0303 	bic.w	r3, r3, #3
 8009812:	4618      	mov	r0, r3
 8009814:	88b9      	ldrh	r1, [r7, #4]
 8009816:	88ba      	ldrh	r2, [r7, #4]
 8009818:	2300      	movs	r3, #0
 800981a:	9301      	str	r3, [sp, #4]
 800981c:	887b      	ldrh	r3, [r7, #2]
 800981e:	9300      	str	r3, [sp, #0]
 8009820:	460b      	mov	r3, r1
 8009822:	4601      	mov	r1, r0
 8009824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009826:	f7ff ff09 	bl	800963c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d010      	beq.n	8009858 <pbuf_alloc+0x1c8>
 8009836:	4b0b      	ldr	r3, [pc, #44]	; (8009864 <pbuf_alloc+0x1d4>)
 8009838:	f44f 7291 	mov.w	r2, #290	; 0x122
 800983c:	490d      	ldr	r1, [pc, #52]	; (8009874 <pbuf_alloc+0x1e4>)
 800983e:	480b      	ldr	r0, [pc, #44]	; (800986c <pbuf_alloc+0x1dc>)
 8009840:	f009 facc 	bl	8012ddc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009844:	e008      	b.n	8009858 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009846:	4b07      	ldr	r3, [pc, #28]	; (8009864 <pbuf_alloc+0x1d4>)
 8009848:	f240 1227 	movw	r2, #295	; 0x127
 800984c:	490a      	ldr	r1, [pc, #40]	; (8009878 <pbuf_alloc+0x1e8>)
 800984e:	4807      	ldr	r0, [pc, #28]	; (800986c <pbuf_alloc+0x1dc>)
 8009850:	f009 fac4 	bl	8012ddc <iprintf>
      return NULL;
 8009854:	2300      	movs	r3, #0
 8009856:	e001      	b.n	800985c <pbuf_alloc+0x1cc>
      break;
 8009858:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800985c:	4618      	mov	r0, r3
 800985e:	3728      	adds	r7, #40	; 0x28
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	08013c68 	.word	0x08013c68
 8009868:	08013c98 	.word	0x08013c98
 800986c:	08013cc8 	.word	0x08013cc8
 8009870:	08013cf0 	.word	0x08013cf0
 8009874:	08013d24 	.word	0x08013d24
 8009878:	08013d50 	.word	0x08013d50

0800987c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af02      	add	r7, sp, #8
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	460b      	mov	r3, r1
 8009886:	807b      	strh	r3, [r7, #2]
 8009888:	4613      	mov	r3, r2
 800988a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800988c:	883b      	ldrh	r3, [r7, #0]
 800988e:	2b41      	cmp	r3, #65	; 0x41
 8009890:	d009      	beq.n	80098a6 <pbuf_alloc_reference+0x2a>
 8009892:	883b      	ldrh	r3, [r7, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d006      	beq.n	80098a6 <pbuf_alloc_reference+0x2a>
 8009898:	4b0f      	ldr	r3, [pc, #60]	; (80098d8 <pbuf_alloc_reference+0x5c>)
 800989a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800989e:	490f      	ldr	r1, [pc, #60]	; (80098dc <pbuf_alloc_reference+0x60>)
 80098a0:	480f      	ldr	r0, [pc, #60]	; (80098e0 <pbuf_alloc_reference+0x64>)
 80098a2:	f009 fa9b 	bl	8012ddc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80098a6:	200b      	movs	r0, #11
 80098a8:	f7ff fae0 	bl	8008e6c <memp_malloc>
 80098ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d101      	bne.n	80098b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	e00b      	b.n	80098d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80098b8:	8879      	ldrh	r1, [r7, #2]
 80098ba:	887a      	ldrh	r2, [r7, #2]
 80098bc:	2300      	movs	r3, #0
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	883b      	ldrh	r3, [r7, #0]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	460b      	mov	r3, r1
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7ff feb7 	bl	800963c <pbuf_init_alloced_pbuf>
  return p;
 80098ce:	68fb      	ldr	r3, [r7, #12]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	08013c68 	.word	0x08013c68
 80098dc:	08013d6c 	.word	0x08013d6c
 80098e0:	08013cc8 	.word	0x08013cc8

080098e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af02      	add	r7, sp, #8
 80098ea:	607b      	str	r3, [r7, #4]
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]
 80098f0:	460b      	mov	r3, r1
 80098f2:	81bb      	strh	r3, [r7, #12]
 80098f4:	4613      	mov	r3, r2
 80098f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80098fc:	8a7b      	ldrh	r3, [r7, #18]
 80098fe:	3303      	adds	r3, #3
 8009900:	f023 0203 	bic.w	r2, r3, #3
 8009904:	89bb      	ldrh	r3, [r7, #12]
 8009906:	441a      	add	r2, r3
 8009908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800990a:	429a      	cmp	r2, r3
 800990c:	d901      	bls.n	8009912 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	e018      	b.n	8009944 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d007      	beq.n	8009928 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009918:	8a7b      	ldrh	r3, [r7, #18]
 800991a:	3303      	adds	r3, #3
 800991c:	f023 0303 	bic.w	r3, r3, #3
 8009920:	6a3a      	ldr	r2, [r7, #32]
 8009922:	4413      	add	r3, r2
 8009924:	617b      	str	r3, [r7, #20]
 8009926:	e001      	b.n	800992c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009928:	2300      	movs	r3, #0
 800992a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	89b9      	ldrh	r1, [r7, #12]
 8009930:	89ba      	ldrh	r2, [r7, #12]
 8009932:	2302      	movs	r3, #2
 8009934:	9301      	str	r3, [sp, #4]
 8009936:	897b      	ldrh	r3, [r7, #10]
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	460b      	mov	r3, r1
 800993c:	6979      	ldr	r1, [r7, #20]
 800993e:	f7ff fe7d 	bl	800963c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8009942:	687b      	ldr	r3, [r7, #4]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d106      	bne.n	800996c <pbuf_realloc+0x20>
 800995e:	4b3a      	ldr	r3, [pc, #232]	; (8009a48 <pbuf_realloc+0xfc>)
 8009960:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009964:	4939      	ldr	r1, [pc, #228]	; (8009a4c <pbuf_realloc+0x100>)
 8009966:	483a      	ldr	r0, [pc, #232]	; (8009a50 <pbuf_realloc+0x104>)
 8009968:	f009 fa38 	bl	8012ddc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	891b      	ldrh	r3, [r3, #8]
 8009970:	887a      	ldrh	r2, [r7, #2]
 8009972:	429a      	cmp	r2, r3
 8009974:	d263      	bcs.n	8009a3e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	891a      	ldrh	r2, [r3, #8]
 800997a:	887b      	ldrh	r3, [r7, #2]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009980:	887b      	ldrh	r3, [r7, #2]
 8009982:	817b      	strh	r3, [r7, #10]
  q = p;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009988:	e018      	b.n	80099bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	895b      	ldrh	r3, [r3, #10]
 800998e:	897a      	ldrh	r2, [r7, #10]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	891a      	ldrh	r2, [r3, #8]
 8009998:	893b      	ldrh	r3, [r7, #8]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	b29a      	uxth	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d106      	bne.n	80099bc <pbuf_realloc+0x70>
 80099ae:	4b26      	ldr	r3, [pc, #152]	; (8009a48 <pbuf_realloc+0xfc>)
 80099b0:	f240 12af 	movw	r2, #431	; 0x1af
 80099b4:	4927      	ldr	r1, [pc, #156]	; (8009a54 <pbuf_realloc+0x108>)
 80099b6:	4826      	ldr	r0, [pc, #152]	; (8009a50 <pbuf_realloc+0x104>)
 80099b8:	f009 fa10 	bl	8012ddc <iprintf>
  while (rem_len > q->len) {
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	895b      	ldrh	r3, [r3, #10]
 80099c0:	897a      	ldrh	r2, [r7, #10]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d8e1      	bhi.n	800998a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	7b1b      	ldrb	r3, [r3, #12]
 80099ca:	f003 030f 	and.w	r3, r3, #15
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d121      	bne.n	8009a16 <pbuf_realloc+0xca>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	895b      	ldrh	r3, [r3, #10]
 80099d6:	897a      	ldrh	r2, [r7, #10]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d01c      	beq.n	8009a16 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	7b5b      	ldrb	r3, [r3, #13]
 80099e0:	f003 0302 	and.w	r3, r3, #2
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d116      	bne.n	8009a16 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	1ad3      	subs	r3, r2, r3
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	897b      	ldrh	r3, [r7, #10]
 80099f4:	4413      	add	r3, r2
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	4619      	mov	r1, r3
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f7fe ffaa 	bl	8008954 <mem_trim>
 8009a00:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d106      	bne.n	8009a16 <pbuf_realloc+0xca>
 8009a08:	4b0f      	ldr	r3, [pc, #60]	; (8009a48 <pbuf_realloc+0xfc>)
 8009a0a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009a0e:	4912      	ldr	r1, [pc, #72]	; (8009a58 <pbuf_realloc+0x10c>)
 8009a10:	480f      	ldr	r0, [pc, #60]	; (8009a50 <pbuf_realloc+0x104>)
 8009a12:	f009 f9e3 	bl	8012ddc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	897a      	ldrh	r2, [r7, #10]
 8009a1a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	895a      	ldrh	r2, [r3, #10]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d004      	beq.n	8009a36 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 f911 	bl	8009c58 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	e000      	b.n	8009a40 <pbuf_realloc+0xf4>
    return;
 8009a3e:	bf00      	nop

}
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	08013c68 	.word	0x08013c68
 8009a4c:	08013d80 	.word	0x08013d80
 8009a50:	08013cc8 	.word	0x08013cc8
 8009a54:	08013d98 	.word	0x08013d98
 8009a58:	08013db0 	.word	0x08013db0

08009a5c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	4613      	mov	r3, r2
 8009a68:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d106      	bne.n	8009a7e <pbuf_add_header_impl+0x22>
 8009a70:	4b2b      	ldr	r3, [pc, #172]	; (8009b20 <pbuf_add_header_impl+0xc4>)
 8009a72:	f240 12df 	movw	r2, #479	; 0x1df
 8009a76:	492b      	ldr	r1, [pc, #172]	; (8009b24 <pbuf_add_header_impl+0xc8>)
 8009a78:	482b      	ldr	r0, [pc, #172]	; (8009b28 <pbuf_add_header_impl+0xcc>)
 8009a7a:	f009 f9af 	bl	8012ddc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d003      	beq.n	8009a8c <pbuf_add_header_impl+0x30>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a8a:	d301      	bcc.n	8009a90 <pbuf_add_header_impl+0x34>
    return 1;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e043      	b.n	8009b18 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <pbuf_add_header_impl+0x3e>
    return 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e03e      	b.n	8009b18 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	891a      	ldrh	r2, [r3, #8]
 8009aa2:	8a7b      	ldrh	r3, [r7, #18]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	8a7a      	ldrh	r2, [r7, #18]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d901      	bls.n	8009ab2 <pbuf_add_header_impl+0x56>
    return 1;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e032      	b.n	8009b18 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	7b1b      	ldrb	r3, [r3, #12]
 8009ab6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009ab8:	8a3b      	ldrh	r3, [r7, #16]
 8009aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00c      	beq.n	8009adc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	685a      	ldr	r2, [r3, #4]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	425b      	negs	r3, r3
 8009aca:	4413      	add	r3, r2
 8009acc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3310      	adds	r3, #16
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d20d      	bcs.n	8009af4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e01d      	b.n	8009b18 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009adc:	79fb      	ldrb	r3, [r7, #7]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d006      	beq.n	8009af0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	685a      	ldr	r2, [r3, #4]
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	425b      	negs	r3, r3
 8009aea:	4413      	add	r3, r2
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	e001      	b.n	8009af4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e011      	b.n	8009b18 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	697a      	ldr	r2, [r7, #20]
 8009af8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	895a      	ldrh	r2, [r3, #10]
 8009afe:	8a7b      	ldrh	r3, [r7, #18]
 8009b00:	4413      	add	r3, r2
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	891a      	ldrh	r2, [r3, #8]
 8009b0c:	8a7b      	ldrh	r3, [r7, #18]
 8009b0e:	4413      	add	r3, r2
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	811a      	strh	r2, [r3, #8]


  return 0;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	08013c68 	.word	0x08013c68
 8009b24:	08013dcc 	.word	0x08013dcc
 8009b28:	08013cc8 	.word	0x08013cc8

08009b2c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009b36:	2200      	movs	r2, #0
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7ff ff8e 	bl	8009a5c <pbuf_add_header_impl>
 8009b40:	4603      	mov	r3, r0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d106      	bne.n	8009b6a <pbuf_remove_header+0x1e>
 8009b5c:	4b20      	ldr	r3, [pc, #128]	; (8009be0 <pbuf_remove_header+0x94>)
 8009b5e:	f240 224b 	movw	r2, #587	; 0x24b
 8009b62:	4920      	ldr	r1, [pc, #128]	; (8009be4 <pbuf_remove_header+0x98>)
 8009b64:	4820      	ldr	r0, [pc, #128]	; (8009be8 <pbuf_remove_header+0x9c>)
 8009b66:	f009 f939 	bl	8012ddc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <pbuf_remove_header+0x2c>
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b76:	d301      	bcc.n	8009b7c <pbuf_remove_header+0x30>
    return 1;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e02c      	b.n	8009bd6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <pbuf_remove_header+0x3a>
    return 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	e027      	b.n	8009bd6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	895b      	ldrh	r3, [r3, #10]
 8009b8e:	89fa      	ldrh	r2, [r7, #14]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d908      	bls.n	8009ba6 <pbuf_remove_header+0x5a>
 8009b94:	4b12      	ldr	r3, [pc, #72]	; (8009be0 <pbuf_remove_header+0x94>)
 8009b96:	f240 2255 	movw	r2, #597	; 0x255
 8009b9a:	4914      	ldr	r1, [pc, #80]	; (8009bec <pbuf_remove_header+0xa0>)
 8009b9c:	4812      	ldr	r0, [pc, #72]	; (8009be8 <pbuf_remove_header+0x9c>)
 8009b9e:	f009 f91d 	bl	8012ddc <iprintf>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e017      	b.n	8009bd6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	441a      	add	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	895a      	ldrh	r2, [r3, #10]
 8009bbc:	89fb      	ldrh	r3, [r7, #14]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	891a      	ldrh	r2, [r3, #8]
 8009bca:	89fb      	ldrh	r3, [r7, #14]
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	08013c68 	.word	0x08013c68
 8009be4:	08013dcc 	.word	0x08013dcc
 8009be8:	08013cc8 	.word	0x08013cc8
 8009bec:	08013dd8 	.word	0x08013dd8

08009bf0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	807b      	strh	r3, [r7, #2]
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009c00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	da08      	bge.n	8009c1a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009c08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f7ff ff9b 	bl	8009b4c <pbuf_remove_header>
 8009c16:	4603      	mov	r3, r0
 8009c18:	e007      	b.n	8009c2a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009c1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c1e:	787a      	ldrb	r2, [r7, #1]
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f7ff ff1a 	bl	8009a5c <pbuf_add_header_impl>
 8009c28:	4603      	mov	r3, r0
  }
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b082      	sub	sp, #8
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009c3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c42:	2201      	movs	r2, #1
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff ffd2 	bl	8009bf0 <pbuf_header_impl>
 8009c4c:	4603      	mov	r3, r0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3708      	adds	r7, #8
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10b      	bne.n	8009c7e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d106      	bne.n	8009c7a <pbuf_free+0x22>
 8009c6c:	4b3b      	ldr	r3, [pc, #236]	; (8009d5c <pbuf_free+0x104>)
 8009c6e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009c72:	493b      	ldr	r1, [pc, #236]	; (8009d60 <pbuf_free+0x108>)
 8009c74:	483b      	ldr	r0, [pc, #236]	; (8009d64 <pbuf_free+0x10c>)
 8009c76:	f009 f8b1 	bl	8012ddc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e069      	b.n	8009d52 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009c82:	e062      	b.n	8009d4a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009c84:	f008 faa2 	bl	80121cc <sys_arch_protect>
 8009c88:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	7b9b      	ldrb	r3, [r3, #14]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d106      	bne.n	8009ca0 <pbuf_free+0x48>
 8009c92:	4b32      	ldr	r3, [pc, #200]	; (8009d5c <pbuf_free+0x104>)
 8009c94:	f240 22f1 	movw	r2, #753	; 0x2f1
 8009c98:	4933      	ldr	r1, [pc, #204]	; (8009d68 <pbuf_free+0x110>)
 8009c9a:	4832      	ldr	r0, [pc, #200]	; (8009d64 <pbuf_free+0x10c>)
 8009c9c:	f009 f89e 	bl	8012ddc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	7b9b      	ldrb	r3, [r3, #14]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	b2da      	uxtb	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	739a      	strb	r2, [r3, #14]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7b9b      	ldrb	r3, [r3, #14]
 8009cb0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8009cb2:	69b8      	ldr	r0, [r7, #24]
 8009cb4:	f008 fa98 	bl	80121e8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d143      	bne.n	8009d46 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	7b1b      	ldrb	r3, [r3, #12]
 8009cc8:	f003 030f 	and.w	r3, r3, #15
 8009ccc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	7b5b      	ldrb	r3, [r3, #13]
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d011      	beq.n	8009cfe <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <pbuf_free+0x9c>
 8009ce6:	4b1d      	ldr	r3, [pc, #116]	; (8009d5c <pbuf_free+0x104>)
 8009ce8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009cec:	491f      	ldr	r1, [pc, #124]	; (8009d6c <pbuf_free+0x114>)
 8009cee:	481d      	ldr	r0, [pc, #116]	; (8009d64 <pbuf_free+0x10c>)
 8009cf0:	f009 f874 	bl	8012ddc <iprintf>
        pc->custom_free_function(p);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	4798      	blx	r3
 8009cfc:	e01d      	b.n	8009d3a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d104      	bne.n	8009d0e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009d04:	6879      	ldr	r1, [r7, #4]
 8009d06:	200c      	movs	r0, #12
 8009d08:	f7ff f902 	bl	8008f10 <memp_free>
 8009d0c:	e015      	b.n	8009d3a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d104      	bne.n	8009d1e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009d14:	6879      	ldr	r1, [r7, #4]
 8009d16:	200b      	movs	r0, #11
 8009d18:	f7ff f8fa 	bl	8008f10 <memp_free>
 8009d1c:	e00d      	b.n	8009d3a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d103      	bne.n	8009d2c <pbuf_free+0xd4>
          mem_free(p);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7fe fd85 	bl	8008834 <mem_free>
 8009d2a:	e006      	b.n	8009d3a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009d2c:	4b0b      	ldr	r3, [pc, #44]	; (8009d5c <pbuf_free+0x104>)
 8009d2e:	f240 320f 	movw	r2, #783	; 0x30f
 8009d32:	490f      	ldr	r1, [pc, #60]	; (8009d70 <pbuf_free+0x118>)
 8009d34:	480b      	ldr	r0, [pc, #44]	; (8009d64 <pbuf_free+0x10c>)
 8009d36:	f009 f851 	bl	8012ddc <iprintf>
        }
      }
      count++;
 8009d3a:	7ffb      	ldrb	r3, [r7, #31]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	607b      	str	r3, [r7, #4]
 8009d44:	e001      	b.n	8009d4a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009d46:	2300      	movs	r3, #0
 8009d48:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d199      	bne.n	8009c84 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009d50:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3720      	adds	r7, #32
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	08013c68 	.word	0x08013c68
 8009d60:	08013dcc 	.word	0x08013dcc
 8009d64:	08013cc8 	.word	0x08013cc8
 8009d68:	08013df8 	.word	0x08013df8
 8009d6c:	08013e10 	.word	0x08013e10
 8009d70:	08013e34 	.word	0x08013e34

08009d74 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009d80:	e005      	b.n	8009d8e <pbuf_clen+0x1a>
    ++len;
 8009d82:	89fb      	ldrh	r3, [r7, #14]
 8009d84:	3301      	adds	r3, #1
 8009d86:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1f6      	bne.n	8009d82 <pbuf_clen+0xe>
  }
  return len;
 8009d94:	89fb      	ldrh	r3, [r7, #14]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
	...

08009da4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d016      	beq.n	8009de0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009db2:	f008 fa0b 	bl	80121cc <sys_arch_protect>
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7b9b      	ldrb	r3, [r3, #14]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	739a      	strb	r2, [r3, #14]
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f008 fa0f 	bl	80121e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	7b9b      	ldrb	r3, [r3, #14]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d106      	bne.n	8009de0 <pbuf_ref+0x3c>
 8009dd2:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <pbuf_ref+0x44>)
 8009dd4:	f240 3242 	movw	r2, #834	; 0x342
 8009dd8:	4904      	ldr	r1, [pc, #16]	; (8009dec <pbuf_ref+0x48>)
 8009dda:	4805      	ldr	r0, [pc, #20]	; (8009df0 <pbuf_ref+0x4c>)
 8009ddc:	f008 fffe 	bl	8012ddc <iprintf>
  }
}
 8009de0:	bf00      	nop
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	08013c68 	.word	0x08013c68
 8009dec:	08013e48 	.word	0x08013e48
 8009df0:	08013cc8 	.word	0x08013cc8

08009df4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <pbuf_cat+0x16>
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d107      	bne.n	8009e1a <pbuf_cat+0x26>
 8009e0a:	4b20      	ldr	r3, [pc, #128]	; (8009e8c <pbuf_cat+0x98>)
 8009e0c:	f240 3259 	movw	r2, #857	; 0x359
 8009e10:	491f      	ldr	r1, [pc, #124]	; (8009e90 <pbuf_cat+0x9c>)
 8009e12:	4820      	ldr	r0, [pc, #128]	; (8009e94 <pbuf_cat+0xa0>)
 8009e14:	f008 ffe2 	bl	8012ddc <iprintf>
 8009e18:	e034      	b.n	8009e84 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	60fb      	str	r3, [r7, #12]
 8009e1e:	e00a      	b.n	8009e36 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	891a      	ldrh	r2, [r3, #8]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	891b      	ldrh	r3, [r3, #8]
 8009e28:	4413      	add	r3, r2
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1f0      	bne.n	8009e20 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	891a      	ldrh	r2, [r3, #8]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	895b      	ldrh	r3, [r3, #10]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d006      	beq.n	8009e58 <pbuf_cat+0x64>
 8009e4a:	4b10      	ldr	r3, [pc, #64]	; (8009e8c <pbuf_cat+0x98>)
 8009e4c:	f240 3262 	movw	r2, #866	; 0x362
 8009e50:	4911      	ldr	r1, [pc, #68]	; (8009e98 <pbuf_cat+0xa4>)
 8009e52:	4810      	ldr	r0, [pc, #64]	; (8009e94 <pbuf_cat+0xa0>)
 8009e54:	f008 ffc2 	bl	8012ddc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d006      	beq.n	8009e6e <pbuf_cat+0x7a>
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <pbuf_cat+0x98>)
 8009e62:	f240 3263 	movw	r2, #867	; 0x363
 8009e66:	490d      	ldr	r1, [pc, #52]	; (8009e9c <pbuf_cat+0xa8>)
 8009e68:	480a      	ldr	r0, [pc, #40]	; (8009e94 <pbuf_cat+0xa0>)
 8009e6a:	f008 ffb7 	bl	8012ddc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	891a      	ldrh	r2, [r3, #8]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	891b      	ldrh	r3, [r3, #8]
 8009e76:	4413      	add	r3, r2
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	08013c68 	.word	0x08013c68
 8009e90:	08013e5c 	.word	0x08013e5c
 8009e94:	08013cc8 	.word	0x08013cc8
 8009e98:	08013e94 	.word	0x08013e94
 8009e9c:	08013ec4 	.word	0x08013ec4

08009ea0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	617b      	str	r3, [r7, #20]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d008      	beq.n	8009eca <pbuf_copy+0x2a>
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d005      	beq.n	8009eca <pbuf_copy+0x2a>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	891a      	ldrh	r2, [r3, #8]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	891b      	ldrh	r3, [r3, #8]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d209      	bcs.n	8009ede <pbuf_copy+0x3e>
 8009eca:	4b57      	ldr	r3, [pc, #348]	; (800a028 <pbuf_copy+0x188>)
 8009ecc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009ed0:	4956      	ldr	r1, [pc, #344]	; (800a02c <pbuf_copy+0x18c>)
 8009ed2:	4857      	ldr	r0, [pc, #348]	; (800a030 <pbuf_copy+0x190>)
 8009ed4:	f008 ff82 	bl	8012ddc <iprintf>
 8009ed8:	f06f 030f 	mvn.w	r3, #15
 8009edc:	e09f      	b.n	800a01e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	895b      	ldrh	r3, [r3, #10]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	1ad2      	subs	r2, r2, r3
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	895b      	ldrh	r3, [r3, #10]
 8009eec:	4619      	mov	r1, r3
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	1acb      	subs	r3, r1, r3
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d306      	bcc.n	8009f04 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	895b      	ldrh	r3, [r3, #10]
 8009efa:	461a      	mov	r2, r3
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	60fb      	str	r3, [r7, #12]
 8009f02:	e005      	b.n	8009f10 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	895b      	ldrh	r3, [r3, #10]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685a      	ldr	r2, [r3, #4]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	18d0      	adds	r0, r2, r3
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685a      	ldr	r2, [r3, #4]
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	4413      	add	r3, r2
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	4619      	mov	r1, r3
 8009f24:	f008 fbac 	bl	8012680 <memcpy>
    offset_to += len;
 8009f28:	697a      	ldr	r2, [r7, #20]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4413      	add	r3, r2
 8009f36:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	895b      	ldrh	r3, [r3, #10]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d906      	bls.n	8009f52 <pbuf_copy+0xb2>
 8009f44:	4b38      	ldr	r3, [pc, #224]	; (800a028 <pbuf_copy+0x188>)
 8009f46:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009f4a:	493a      	ldr	r1, [pc, #232]	; (800a034 <pbuf_copy+0x194>)
 8009f4c:	4838      	ldr	r0, [pc, #224]	; (800a030 <pbuf_copy+0x190>)
 8009f4e:	f008 ff45 	bl	8012ddc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	895b      	ldrh	r3, [r3, #10]
 8009f56:	461a      	mov	r2, r3
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d906      	bls.n	8009f6c <pbuf_copy+0xcc>
 8009f5e:	4b32      	ldr	r3, [pc, #200]	; (800a028 <pbuf_copy+0x188>)
 8009f60:	f240 32da 	movw	r2, #986	; 0x3da
 8009f64:	4934      	ldr	r1, [pc, #208]	; (800a038 <pbuf_copy+0x198>)
 8009f66:	4832      	ldr	r0, [pc, #200]	; (800a030 <pbuf_copy+0x190>)
 8009f68:	f008 ff38 	bl	8012ddc <iprintf>
    if (offset_from >= p_from->len) {
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	895b      	ldrh	r3, [r3, #10]
 8009f70:	461a      	mov	r2, r3
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d304      	bcc.n	8009f82 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	895b      	ldrh	r3, [r3, #10]
 8009f86:	461a      	mov	r2, r3
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d114      	bne.n	8009fb8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10c      	bne.n	8009fb8 <pbuf_copy+0x118>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d009      	beq.n	8009fb8 <pbuf_copy+0x118>
 8009fa4:	4b20      	ldr	r3, [pc, #128]	; (800a028 <pbuf_copy+0x188>)
 8009fa6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009faa:	4924      	ldr	r1, [pc, #144]	; (800a03c <pbuf_copy+0x19c>)
 8009fac:	4820      	ldr	r0, [pc, #128]	; (800a030 <pbuf_copy+0x190>)
 8009fae:	f008 ff15 	bl	8012ddc <iprintf>
 8009fb2:	f06f 030f 	mvn.w	r3, #15
 8009fb6:	e032      	b.n	800a01e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d013      	beq.n	8009fe6 <pbuf_copy+0x146>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	895a      	ldrh	r2, [r3, #10]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	891b      	ldrh	r3, [r3, #8]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d10d      	bne.n	8009fe6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d009      	beq.n	8009fe6 <pbuf_copy+0x146>
 8009fd2:	4b15      	ldr	r3, [pc, #84]	; (800a028 <pbuf_copy+0x188>)
 8009fd4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009fd8:	4919      	ldr	r1, [pc, #100]	; (800a040 <pbuf_copy+0x1a0>)
 8009fda:	4815      	ldr	r0, [pc, #84]	; (800a030 <pbuf_copy+0x190>)
 8009fdc:	f008 fefe 	bl	8012ddc <iprintf>
 8009fe0:	f06f 0305 	mvn.w	r3, #5
 8009fe4:	e01b      	b.n	800a01e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d013      	beq.n	800a014 <pbuf_copy+0x174>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	895a      	ldrh	r2, [r3, #10]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	891b      	ldrh	r3, [r3, #8]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d10d      	bne.n	800a014 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d009      	beq.n	800a014 <pbuf_copy+0x174>
 800a000:	4b09      	ldr	r3, [pc, #36]	; (800a028 <pbuf_copy+0x188>)
 800a002:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a006:	490e      	ldr	r1, [pc, #56]	; (800a040 <pbuf_copy+0x1a0>)
 800a008:	4809      	ldr	r0, [pc, #36]	; (800a030 <pbuf_copy+0x190>)
 800a00a:	f008 fee7 	bl	8012ddc <iprintf>
 800a00e:	f06f 0305 	mvn.w	r3, #5
 800a012:	e004      	b.n	800a01e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f47f af61 	bne.w	8009ede <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3718      	adds	r7, #24
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	08013c68 	.word	0x08013c68
 800a02c:	08013f10 	.word	0x08013f10
 800a030:	08013cc8 	.word	0x08013cc8
 800a034:	08013f40 	.word	0x08013f40
 800a038:	08013f58 	.word	0x08013f58
 800a03c:	08013f74 	.word	0x08013f74
 800a040:	08013f84 	.word	0x08013f84

0800a044 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b088      	sub	sp, #32
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	4611      	mov	r1, r2
 800a050:	461a      	mov	r2, r3
 800a052:	460b      	mov	r3, r1
 800a054:	80fb      	strh	r3, [r7, #6]
 800a056:	4613      	mov	r3, r2
 800a058:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d108      	bne.n	800a07a <pbuf_copy_partial+0x36>
 800a068:	4b2b      	ldr	r3, [pc, #172]	; (800a118 <pbuf_copy_partial+0xd4>)
 800a06a:	f240 420a 	movw	r2, #1034	; 0x40a
 800a06e:	492b      	ldr	r1, [pc, #172]	; (800a11c <pbuf_copy_partial+0xd8>)
 800a070:	482b      	ldr	r0, [pc, #172]	; (800a120 <pbuf_copy_partial+0xdc>)
 800a072:	f008 feb3 	bl	8012ddc <iprintf>
 800a076:	2300      	movs	r3, #0
 800a078:	e04a      	b.n	800a110 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d108      	bne.n	800a092 <pbuf_copy_partial+0x4e>
 800a080:	4b25      	ldr	r3, [pc, #148]	; (800a118 <pbuf_copy_partial+0xd4>)
 800a082:	f240 420b 	movw	r2, #1035	; 0x40b
 800a086:	4927      	ldr	r1, [pc, #156]	; (800a124 <pbuf_copy_partial+0xe0>)
 800a088:	4825      	ldr	r0, [pc, #148]	; (800a120 <pbuf_copy_partial+0xdc>)
 800a08a:	f008 fea7 	bl	8012ddc <iprintf>
 800a08e:	2300      	movs	r3, #0
 800a090:	e03e      	b.n	800a110 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	61fb      	str	r3, [r7, #28]
 800a096:	e034      	b.n	800a102 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a098:	88bb      	ldrh	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <pbuf_copy_partial+0x70>
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	895b      	ldrh	r3, [r3, #10]
 800a0a2:	88ba      	ldrh	r2, [r7, #4]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d305      	bcc.n	800a0b4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	895b      	ldrh	r3, [r3, #10]
 800a0ac:	88ba      	ldrh	r2, [r7, #4]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	80bb      	strh	r3, [r7, #4]
 800a0b2:	e023      	b.n	800a0fc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	895a      	ldrh	r2, [r3, #10]
 800a0b8:	88bb      	ldrh	r3, [r7, #4]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a0be:	8b3a      	ldrh	r2, [r7, #24]
 800a0c0:	88fb      	ldrh	r3, [r7, #6]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d901      	bls.n	800a0ca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a0c6:	88fb      	ldrh	r3, [r7, #6]
 800a0c8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a0ca:	8b7b      	ldrh	r3, [r7, #26]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	18d0      	adds	r0, r2, r3
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	685a      	ldr	r2, [r3, #4]
 800a0d4:	88bb      	ldrh	r3, [r7, #4]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	8b3a      	ldrh	r2, [r7, #24]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	f008 fad0 	bl	8012680 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a0e0:	8afa      	ldrh	r2, [r7, #22]
 800a0e2:	8b3b      	ldrh	r3, [r7, #24]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a0e8:	8b7a      	ldrh	r2, [r7, #26]
 800a0ea:	8b3b      	ldrh	r3, [r7, #24]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a0f0:	88fa      	ldrh	r2, [r7, #6]
 800a0f2:	8b3b      	ldrh	r3, [r7, #24]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	61fb      	str	r3, [r7, #28]
 800a102:	88fb      	ldrh	r3, [r7, #6]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <pbuf_copy_partial+0xca>
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d1c4      	bne.n	800a098 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a10e:	8afb      	ldrh	r3, [r7, #22]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3720      	adds	r7, #32
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	08013c68 	.word	0x08013c68
 800a11c:	08013fb0 	.word	0x08013fb0
 800a120:	08013cc8 	.word	0x08013cc8
 800a124:	08013fd0 	.word	0x08013fd0

0800a128 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	603a      	str	r2, [r7, #0]
 800a132:	71fb      	strb	r3, [r7, #7]
 800a134:	460b      	mov	r3, r1
 800a136:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	8919      	ldrh	r1, [r3, #8]
 800a13c:	88ba      	ldrh	r2, [r7, #4]
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	4618      	mov	r0, r3
 800a142:	f7ff faa5 	bl	8009690 <pbuf_alloc>
 800a146:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <pbuf_clone+0x2a>
    return NULL;
 800a14e:	2300      	movs	r3, #0
 800a150:	e011      	b.n	800a176 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f7ff fea3 	bl	8009ea0 <pbuf_copy>
 800a15a:	4603      	mov	r3, r0
 800a15c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a15e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d006      	beq.n	800a174 <pbuf_clone+0x4c>
 800a166:	4b06      	ldr	r3, [pc, #24]	; (800a180 <pbuf_clone+0x58>)
 800a168:	f240 5224 	movw	r2, #1316	; 0x524
 800a16c:	4905      	ldr	r1, [pc, #20]	; (800a184 <pbuf_clone+0x5c>)
 800a16e:	4806      	ldr	r0, [pc, #24]	; (800a188 <pbuf_clone+0x60>)
 800a170:	f008 fe34 	bl	8012ddc <iprintf>
  return q;
 800a174:	68fb      	ldr	r3, [r7, #12]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	08013c68 	.word	0x08013c68
 800a184:	080140dc 	.word	0x080140dc
 800a188:	08013cc8 	.word	0x08013cc8

0800a18c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a190:	f008 fe3c 	bl	8012e0c <rand>
 800a194:	4603      	mov	r3, r0
 800a196:	b29b      	uxth	r3, r3
 800a198:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	4b01      	ldr	r3, [pc, #4]	; (800a1ac <tcp_init+0x20>)
 800a1a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a1a8:	bf00      	nop
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	20000010 	.word	0x20000010

0800a1b0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	7d1b      	ldrb	r3, [r3, #20]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d105      	bne.n	800a1cc <tcp_free+0x1c>
 800a1c0:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <tcp_free+0x2c>)
 800a1c2:	22d4      	movs	r2, #212	; 0xd4
 800a1c4:	4906      	ldr	r1, [pc, #24]	; (800a1e0 <tcp_free+0x30>)
 800a1c6:	4807      	ldr	r0, [pc, #28]	; (800a1e4 <tcp_free+0x34>)
 800a1c8:	f008 fe08 	bl	8012ddc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a1cc:	6879      	ldr	r1, [r7, #4]
 800a1ce:	2001      	movs	r0, #1
 800a1d0:	f7fe fe9e 	bl	8008f10 <memp_free>
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	08014168 	.word	0x08014168
 800a1e0:	08014198 	.word	0x08014198
 800a1e4:	080141ac 	.word	0x080141ac

0800a1e8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	7d1b      	ldrb	r3, [r3, #20]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d105      	bne.n	800a204 <tcp_free_listen+0x1c>
 800a1f8:	4b06      	ldr	r3, [pc, #24]	; (800a214 <tcp_free_listen+0x2c>)
 800a1fa:	22df      	movs	r2, #223	; 0xdf
 800a1fc:	4906      	ldr	r1, [pc, #24]	; (800a218 <tcp_free_listen+0x30>)
 800a1fe:	4807      	ldr	r0, [pc, #28]	; (800a21c <tcp_free_listen+0x34>)
 800a200:	f008 fdec 	bl	8012ddc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	2002      	movs	r0, #2
 800a208:	f7fe fe82 	bl	8008f10 <memp_free>
}
 800a20c:	bf00      	nop
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	08014168 	.word	0x08014168
 800a218:	080141d4 	.word	0x080141d4
 800a21c:	080141ac 	.word	0x080141ac

0800a220 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a224:	f000 fea2 	bl	800af6c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a228:	4b07      	ldr	r3, [pc, #28]	; (800a248 <tcp_tmr+0x28>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	3301      	adds	r3, #1
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	4b05      	ldr	r3, [pc, #20]	; (800a248 <tcp_tmr+0x28>)
 800a232:	701a      	strb	r2, [r3, #0]
 800a234:	4b04      	ldr	r3, [pc, #16]	; (800a248 <tcp_tmr+0x28>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a240:	f000 fb54 	bl	800a8ec <tcp_slowtmr>
  }
}
 800a244:	bf00      	nop
 800a246:	bd80      	pop	{r7, pc}
 800a248:	2000b109 	.word	0x2000b109

0800a24c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d105      	bne.n	800a268 <tcp_remove_listener+0x1c>
 800a25c:	4b0d      	ldr	r3, [pc, #52]	; (800a294 <tcp_remove_listener+0x48>)
 800a25e:	22ff      	movs	r2, #255	; 0xff
 800a260:	490d      	ldr	r1, [pc, #52]	; (800a298 <tcp_remove_listener+0x4c>)
 800a262:	480e      	ldr	r0, [pc, #56]	; (800a29c <tcp_remove_listener+0x50>)
 800a264:	f008 fdba 	bl	8012ddc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	e00a      	b.n	800a284 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	429a      	cmp	r2, r3
 800a276:	d102      	bne.n	800a27e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1f1      	bne.n	800a26e <tcp_remove_listener+0x22>
    }
  }
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}
 800a294:	08014168 	.word	0x08014168
 800a298:	080141f0 	.word	0x080141f0
 800a29c:	080141ac 	.word	0x080141ac

0800a2a0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d106      	bne.n	800a2bc <tcp_listen_closed+0x1c>
 800a2ae:	4b14      	ldr	r3, [pc, #80]	; (800a300 <tcp_listen_closed+0x60>)
 800a2b0:	f240 1211 	movw	r2, #273	; 0x111
 800a2b4:	4913      	ldr	r1, [pc, #76]	; (800a304 <tcp_listen_closed+0x64>)
 800a2b6:	4814      	ldr	r0, [pc, #80]	; (800a308 <tcp_listen_closed+0x68>)
 800a2b8:	f008 fd90 	bl	8012ddc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	7d1b      	ldrb	r3, [r3, #20]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d006      	beq.n	800a2d2 <tcp_listen_closed+0x32>
 800a2c4:	4b0e      	ldr	r3, [pc, #56]	; (800a300 <tcp_listen_closed+0x60>)
 800a2c6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800a2ca:	4910      	ldr	r1, [pc, #64]	; (800a30c <tcp_listen_closed+0x6c>)
 800a2cc:	480e      	ldr	r0, [pc, #56]	; (800a308 <tcp_listen_closed+0x68>)
 800a2ce:	f008 fd85 	bl	8012ddc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	60fb      	str	r3, [r7, #12]
 800a2d6:	e00b      	b.n	800a2f0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a2d8:	4a0d      	ldr	r2, [pc, #52]	; (800a310 <tcp_listen_closed+0x70>)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6879      	ldr	r1, [r7, #4]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7ff ffb1 	bl	800a24c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	60fb      	str	r3, [r7, #12]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2b03      	cmp	r3, #3
 800a2f4:	d9f0      	bls.n	800a2d8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a2f6:	bf00      	nop
 800a2f8:	bf00      	nop
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	08014168 	.word	0x08014168
 800a304:	08014218 	.word	0x08014218
 800a308:	080141ac 	.word	0x080141ac
 800a30c:	08014224 	.word	0x08014224
 800a310:	080161a0 	.word	0x080161a0

0800a314 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a314:	b5b0      	push	{r4, r5, r7, lr}
 800a316:	b088      	sub	sp, #32
 800a318:	af04      	add	r7, sp, #16
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	460b      	mov	r3, r1
 800a31e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d106      	bne.n	800a334 <tcp_close_shutdown+0x20>
 800a326:	4b63      	ldr	r3, [pc, #396]	; (800a4b4 <tcp_close_shutdown+0x1a0>)
 800a328:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a32c:	4962      	ldr	r1, [pc, #392]	; (800a4b8 <tcp_close_shutdown+0x1a4>)
 800a32e:	4863      	ldr	r0, [pc, #396]	; (800a4bc <tcp_close_shutdown+0x1a8>)
 800a330:	f008 fd54 	bl	8012ddc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d066      	beq.n	800a408 <tcp_close_shutdown+0xf4>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	7d1b      	ldrb	r3, [r3, #20]
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d003      	beq.n	800a34a <tcp_close_shutdown+0x36>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	7d1b      	ldrb	r3, [r3, #20]
 800a346:	2b07      	cmp	r3, #7
 800a348:	d15e      	bne.n	800a408 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d104      	bne.n	800a35c <tcp_close_shutdown+0x48>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a356:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a35a:	d055      	beq.n	800a408 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	8b5b      	ldrh	r3, [r3, #26]
 800a360:	f003 0310 	and.w	r3, r3, #16
 800a364:	2b00      	cmp	r3, #0
 800a366:	d106      	bne.n	800a376 <tcp_close_shutdown+0x62>
 800a368:	4b52      	ldr	r3, [pc, #328]	; (800a4b4 <tcp_close_shutdown+0x1a0>)
 800a36a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800a36e:	4954      	ldr	r1, [pc, #336]	; (800a4c0 <tcp_close_shutdown+0x1ac>)
 800a370:	4852      	ldr	r0, [pc, #328]	; (800a4bc <tcp_close_shutdown+0x1a8>)
 800a372:	f008 fd33 	bl	8012ddc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a37e:	687d      	ldr	r5, [r7, #4]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3304      	adds	r3, #4
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	8ad2      	ldrh	r2, [r2, #22]
 800a388:	6879      	ldr	r1, [r7, #4]
 800a38a:	8b09      	ldrh	r1, [r1, #24]
 800a38c:	9102      	str	r1, [sp, #8]
 800a38e:	9201      	str	r2, [sp, #4]
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	462b      	mov	r3, r5
 800a394:	4622      	mov	r2, r4
 800a396:	4601      	mov	r1, r0
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f004 fe8d 	bl	800f0b8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f001 f8c6 	bl	800b530 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a3a4:	4b47      	ldr	r3, [pc, #284]	; (800a4c4 <tcp_close_shutdown+0x1b0>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d105      	bne.n	800a3ba <tcp_close_shutdown+0xa6>
 800a3ae:	4b45      	ldr	r3, [pc, #276]	; (800a4c4 <tcp_close_shutdown+0x1b0>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68db      	ldr	r3, [r3, #12]
 800a3b4:	4a43      	ldr	r2, [pc, #268]	; (800a4c4 <tcp_close_shutdown+0x1b0>)
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	e013      	b.n	800a3e2 <tcp_close_shutdown+0xce>
 800a3ba:	4b42      	ldr	r3, [pc, #264]	; (800a4c4 <tcp_close_shutdown+0x1b0>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	60fb      	str	r3, [r7, #12]
 800a3c0:	e00c      	b.n	800a3dc <tcp_close_shutdown+0xc8>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d104      	bne.n	800a3d6 <tcp_close_shutdown+0xc2>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68da      	ldr	r2, [r3, #12]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	60da      	str	r2, [r3, #12]
 800a3d4:	e005      	b.n	800a3e2 <tcp_close_shutdown+0xce>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d1ef      	bne.n	800a3c2 <tcp_close_shutdown+0xae>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	60da      	str	r2, [r3, #12]
 800a3e8:	4b37      	ldr	r3, [pc, #220]	; (800a4c8 <tcp_close_shutdown+0x1b4>)
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a3ee:	4b37      	ldr	r3, [pc, #220]	; (800a4cc <tcp_close_shutdown+0x1b8>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d102      	bne.n	800a3fe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a3f8:	f003 fd5a 	bl	800deb0 <tcp_trigger_input_pcb_close>
 800a3fc:	e002      	b.n	800a404 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7ff fed6 	bl	800a1b0 <tcp_free>
      }
      return ERR_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	e050      	b.n	800a4aa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	7d1b      	ldrb	r3, [r3, #20]
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d03b      	beq.n	800a488 <tcp_close_shutdown+0x174>
 800a410:	2b02      	cmp	r3, #2
 800a412:	dc44      	bgt.n	800a49e <tcp_close_shutdown+0x18a>
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <tcp_close_shutdown+0x10a>
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d02a      	beq.n	800a472 <tcp_close_shutdown+0x15e>
 800a41c:	e03f      	b.n	800a49e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	8adb      	ldrh	r3, [r3, #22]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d021      	beq.n	800a46a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a426:	4b2a      	ldr	r3, [pc, #168]	; (800a4d0 <tcp_close_shutdown+0x1bc>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d105      	bne.n	800a43c <tcp_close_shutdown+0x128>
 800a430:	4b27      	ldr	r3, [pc, #156]	; (800a4d0 <tcp_close_shutdown+0x1bc>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	4a26      	ldr	r2, [pc, #152]	; (800a4d0 <tcp_close_shutdown+0x1bc>)
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	e013      	b.n	800a464 <tcp_close_shutdown+0x150>
 800a43c:	4b24      	ldr	r3, [pc, #144]	; (800a4d0 <tcp_close_shutdown+0x1bc>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	60bb      	str	r3, [r7, #8]
 800a442:	e00c      	b.n	800a45e <tcp_close_shutdown+0x14a>
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d104      	bne.n	800a458 <tcp_close_shutdown+0x144>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68da      	ldr	r2, [r3, #12]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	60da      	str	r2, [r3, #12]
 800a456:	e005      	b.n	800a464 <tcp_close_shutdown+0x150>
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	60bb      	str	r3, [r7, #8]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1ef      	bne.n	800a444 <tcp_close_shutdown+0x130>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff fea0 	bl	800a1b0 <tcp_free>
      break;
 800a470:	e01a      	b.n	800a4a8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7ff ff14 	bl	800a2a0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	4816      	ldr	r0, [pc, #88]	; (800a4d4 <tcp_close_shutdown+0x1c0>)
 800a47c:	f001 f8a8 	bl	800b5d0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7ff feb1 	bl	800a1e8 <tcp_free_listen>
      break;
 800a486:	e00f      	b.n	800a4a8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a488:	6879      	ldr	r1, [r7, #4]
 800a48a:	480e      	ldr	r0, [pc, #56]	; (800a4c4 <tcp_close_shutdown+0x1b0>)
 800a48c:	f001 f8a0 	bl	800b5d0 <tcp_pcb_remove>
 800a490:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <tcp_close_shutdown+0x1b4>)
 800a492:	2201      	movs	r2, #1
 800a494:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff fe8a 	bl	800a1b0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a49c:	e004      	b.n	800a4a8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f81a 	bl	800a4d8 <tcp_close_shutdown_fin>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	e000      	b.n	800a4aa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	08014168 	.word	0x08014168
 800a4b8:	0801423c 	.word	0x0801423c
 800a4bc:	080141ac 	.word	0x080141ac
 800a4c0:	0801425c 	.word	0x0801425c
 800a4c4:	20011bf8 	.word	0x20011bf8
 800a4c8:	20011bf4 	.word	0x20011bf4
 800a4cc:	20011c0c 	.word	0x20011c0c
 800a4d0:	20011c04 	.word	0x20011c04
 800a4d4:	20011c00 	.word	0x20011c00

0800a4d8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d106      	bne.n	800a4f4 <tcp_close_shutdown_fin+0x1c>
 800a4e6:	4b2e      	ldr	r3, [pc, #184]	; (800a5a0 <tcp_close_shutdown_fin+0xc8>)
 800a4e8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a4ec:	492d      	ldr	r1, [pc, #180]	; (800a5a4 <tcp_close_shutdown_fin+0xcc>)
 800a4ee:	482e      	ldr	r0, [pc, #184]	; (800a5a8 <tcp_close_shutdown_fin+0xd0>)
 800a4f0:	f008 fc74 	bl	8012ddc <iprintf>

  switch (pcb->state) {
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	7d1b      	ldrb	r3, [r3, #20]
 800a4f8:	2b07      	cmp	r3, #7
 800a4fa:	d020      	beq.n	800a53e <tcp_close_shutdown_fin+0x66>
 800a4fc:	2b07      	cmp	r3, #7
 800a4fe:	dc2b      	bgt.n	800a558 <tcp_close_shutdown_fin+0x80>
 800a500:	2b03      	cmp	r3, #3
 800a502:	d002      	beq.n	800a50a <tcp_close_shutdown_fin+0x32>
 800a504:	2b04      	cmp	r3, #4
 800a506:	d00d      	beq.n	800a524 <tcp_close_shutdown_fin+0x4c>
 800a508:	e026      	b.n	800a558 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f003 fee2 	bl	800e2d4 <tcp_send_fin>
 800a510:	4603      	mov	r3, r0
 800a512:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d11f      	bne.n	800a55c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2205      	movs	r2, #5
 800a520:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a522:	e01b      	b.n	800a55c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f003 fed5 	bl	800e2d4 <tcp_send_fin>
 800a52a:	4603      	mov	r3, r0
 800a52c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a52e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d114      	bne.n	800a560 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2205      	movs	r2, #5
 800a53a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a53c:	e010      	b.n	800a560 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f003 fec8 	bl	800e2d4 <tcp_send_fin>
 800a544:	4603      	mov	r3, r0
 800a546:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d109      	bne.n	800a564 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2209      	movs	r2, #9
 800a554:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a556:	e005      	b.n	800a564 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	e01c      	b.n	800a596 <tcp_close_shutdown_fin+0xbe>
      break;
 800a55c:	bf00      	nop
 800a55e:	e002      	b.n	800a566 <tcp_close_shutdown_fin+0x8e>
      break;
 800a560:	bf00      	nop
 800a562:	e000      	b.n	800a566 <tcp_close_shutdown_fin+0x8e>
      break;
 800a564:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d103      	bne.n	800a576 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f003 ffee 	bl	800e550 <tcp_output>
 800a574:	e00d      	b.n	800a592 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57e:	d108      	bne.n	800a592 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	8b5b      	ldrh	r3, [r3, #26]
 800a584:	f043 0308 	orr.w	r3, r3, #8
 800a588:	b29a      	uxth	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	e001      	b.n	800a596 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a592:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	08014168 	.word	0x08014168
 800a5a4:	08014218 	.word	0x08014218
 800a5a8:	080141ac 	.word	0x080141ac

0800a5ac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d109      	bne.n	800a5ce <tcp_close+0x22>
 800a5ba:	4b0f      	ldr	r3, [pc, #60]	; (800a5f8 <tcp_close+0x4c>)
 800a5bc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a5c0:	490e      	ldr	r1, [pc, #56]	; (800a5fc <tcp_close+0x50>)
 800a5c2:	480f      	ldr	r0, [pc, #60]	; (800a600 <tcp_close+0x54>)
 800a5c4:	f008 fc0a 	bl	8012ddc <iprintf>
 800a5c8:	f06f 030f 	mvn.w	r3, #15
 800a5cc:	e00f      	b.n	800a5ee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	7d1b      	ldrb	r3, [r3, #20]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d006      	beq.n	800a5e4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	8b5b      	ldrh	r3, [r3, #26]
 800a5da:	f043 0310 	orr.w	r3, r3, #16
 800a5de:	b29a      	uxth	r2, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f7ff fe94 	bl	800a314 <tcp_close_shutdown>
 800a5ec:	4603      	mov	r3, r0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3708      	adds	r7, #8
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	08014168 	.word	0x08014168
 800a5fc:	08014278 	.word	0x08014278
 800a600:	080141ac 	.word	0x080141ac

0800a604 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b08e      	sub	sp, #56	; 0x38
 800a608:	af04      	add	r7, sp, #16
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d107      	bne.n	800a624 <tcp_abandon+0x20>
 800a614:	4b52      	ldr	r3, [pc, #328]	; (800a760 <tcp_abandon+0x15c>)
 800a616:	f240 223d 	movw	r2, #573	; 0x23d
 800a61a:	4952      	ldr	r1, [pc, #328]	; (800a764 <tcp_abandon+0x160>)
 800a61c:	4852      	ldr	r0, [pc, #328]	; (800a768 <tcp_abandon+0x164>)
 800a61e:	f008 fbdd 	bl	8012ddc <iprintf>
 800a622:	e099      	b.n	800a758 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	7d1b      	ldrb	r3, [r3, #20]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d106      	bne.n	800a63a <tcp_abandon+0x36>
 800a62c:	4b4c      	ldr	r3, [pc, #304]	; (800a760 <tcp_abandon+0x15c>)
 800a62e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800a632:	494e      	ldr	r1, [pc, #312]	; (800a76c <tcp_abandon+0x168>)
 800a634:	484c      	ldr	r0, [pc, #304]	; (800a768 <tcp_abandon+0x164>)
 800a636:	f008 fbd1 	bl	8012ddc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	7d1b      	ldrb	r3, [r3, #20]
 800a63e:	2b0a      	cmp	r3, #10
 800a640:	d107      	bne.n	800a652 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a642:	6879      	ldr	r1, [r7, #4]
 800a644:	484a      	ldr	r0, [pc, #296]	; (800a770 <tcp_abandon+0x16c>)
 800a646:	f000 ffc3 	bl	800b5d0 <tcp_pcb_remove>
    tcp_free(pcb);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff fdb0 	bl	800a1b0 <tcp_free>
 800a650:	e082      	b.n	800a758 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a656:	2300      	movs	r3, #0
 800a658:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a65e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a664:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a66c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	7d1b      	ldrb	r3, [r3, #20]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d126      	bne.n	800a6ca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	8adb      	ldrh	r3, [r3, #22]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d02e      	beq.n	800a6e2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a684:	4b3b      	ldr	r3, [pc, #236]	; (800a774 <tcp_abandon+0x170>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d105      	bne.n	800a69a <tcp_abandon+0x96>
 800a68e:	4b39      	ldr	r3, [pc, #228]	; (800a774 <tcp_abandon+0x170>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	4a37      	ldr	r2, [pc, #220]	; (800a774 <tcp_abandon+0x170>)
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	e013      	b.n	800a6c2 <tcp_abandon+0xbe>
 800a69a:	4b36      	ldr	r3, [pc, #216]	; (800a774 <tcp_abandon+0x170>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	61fb      	str	r3, [r7, #28]
 800a6a0:	e00c      	b.n	800a6bc <tcp_abandon+0xb8>
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d104      	bne.n	800a6b6 <tcp_abandon+0xb2>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68da      	ldr	r2, [r3, #12]
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	60da      	str	r2, [r3, #12]
 800a6b4:	e005      	b.n	800a6c2 <tcp_abandon+0xbe>
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	61fb      	str	r3, [r7, #28]
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1ef      	bne.n	800a6a2 <tcp_abandon+0x9e>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	60da      	str	r2, [r3, #12]
 800a6c8:	e00b      	b.n	800a6e2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	8adb      	ldrh	r3, [r3, #22]
 800a6d2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	4828      	ldr	r0, [pc, #160]	; (800a778 <tcp_abandon+0x174>)
 800a6d8:	f000 ff7a 	bl	800b5d0 <tcp_pcb_remove>
 800a6dc:	4b27      	ldr	r3, [pc, #156]	; (800a77c <tcp_abandon+0x178>)
 800a6de:	2201      	movs	r2, #1
 800a6e0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d004      	beq.n	800a6f4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fd1c 	bl	800b12c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d004      	beq.n	800a706 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a700:	4618      	mov	r0, r3
 800a702:	f000 fd13 	bl	800b12c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d004      	beq.n	800a718 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a712:	4618      	mov	r0, r3
 800a714:	f000 fd0a 	bl	800b12c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00e      	beq.n	800a73c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a71e:	6879      	ldr	r1, [r7, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3304      	adds	r3, #4
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	8b12      	ldrh	r2, [r2, #24]
 800a728:	9202      	str	r2, [sp, #8]
 800a72a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a72c:	9201      	str	r2, [sp, #4]
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	460b      	mov	r3, r1
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	69b9      	ldr	r1, [r7, #24]
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f004 fcbe 	bl	800f0b8 <tcp_rst>
    }
    last_state = pcb->state;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	7d1b      	ldrb	r3, [r3, #20]
 800a740:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f7ff fd34 	bl	800a1b0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d004      	beq.n	800a758 <tcp_abandon+0x154>
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f06f 010c 	mvn.w	r1, #12
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	4798      	blx	r3
  }
}
 800a758:	3728      	adds	r7, #40	; 0x28
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	08014168 	.word	0x08014168
 800a764:	080142ac 	.word	0x080142ac
 800a768:	080141ac 	.word	0x080141ac
 800a76c:	080142c8 	.word	0x080142c8
 800a770:	20011c08 	.word	0x20011c08
 800a774:	20011c04 	.word	0x20011c04
 800a778:	20011bf8 	.word	0x20011bf8
 800a77c:	20011bf4 	.word	0x20011bf4

0800a780 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a788:	2101      	movs	r1, #1
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff ff3a 	bl	800a604 <tcp_abandon>
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <tcp_update_rcv_ann_wnd+0x1c>
 800a7a6:	4b25      	ldr	r3, [pc, #148]	; (800a83c <tcp_update_rcv_ann_wnd+0xa4>)
 800a7a8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a7ac:	4924      	ldr	r1, [pc, #144]	; (800a840 <tcp_update_rcv_ann_wnd+0xa8>)
 800a7ae:	4825      	ldr	r0, [pc, #148]	; (800a844 <tcp_update_rcv_ann_wnd+0xac>)
 800a7b0:	f008 fb14 	bl	8012ddc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a7bc:	4413      	add	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a7c8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a7cc:	bf28      	it	cs
 800a7ce:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a7d2:	b292      	uxth	r2, r2
 800a7d4:	4413      	add	r3, r2
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	db08      	blt.n	800a7f0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	e020      	b.n	800a832 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	dd03      	ble.n	800a806 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a804:	e014      	b.n	800a830 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a818:	d306      	bcc.n	800a828 <tcp_update_rcv_ann_wnd+0x90>
 800a81a:	4b08      	ldr	r3, [pc, #32]	; (800a83c <tcp_update_rcv_ann_wnd+0xa4>)
 800a81c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a820:	4909      	ldr	r1, [pc, #36]	; (800a848 <tcp_update_rcv_ann_wnd+0xb0>)
 800a822:	4808      	ldr	r0, [pc, #32]	; (800a844 <tcp_update_rcv_ann_wnd+0xac>)
 800a824:	f008 fada 	bl	8012ddc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a830:	2300      	movs	r3, #0
  }
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
 800a83a:	bf00      	nop
 800a83c:	08014168 	.word	0x08014168
 800a840:	080143c4 	.word	0x080143c4
 800a844:	080141ac 	.word	0x080141ac
 800a848:	080143e8 	.word	0x080143e8

0800a84c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d107      	bne.n	800a86e <tcp_recved+0x22>
 800a85e:	4b1f      	ldr	r3, [pc, #124]	; (800a8dc <tcp_recved+0x90>)
 800a860:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a864:	491e      	ldr	r1, [pc, #120]	; (800a8e0 <tcp_recved+0x94>)
 800a866:	481f      	ldr	r0, [pc, #124]	; (800a8e4 <tcp_recved+0x98>)
 800a868:	f008 fab8 	bl	8012ddc <iprintf>
 800a86c:	e032      	b.n	800a8d4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	7d1b      	ldrb	r3, [r3, #20]
 800a872:	2b01      	cmp	r3, #1
 800a874:	d106      	bne.n	800a884 <tcp_recved+0x38>
 800a876:	4b19      	ldr	r3, [pc, #100]	; (800a8dc <tcp_recved+0x90>)
 800a878:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a87c:	491a      	ldr	r1, [pc, #104]	; (800a8e8 <tcp_recved+0x9c>)
 800a87e:	4819      	ldr	r0, [pc, #100]	; (800a8e4 <tcp_recved+0x98>)
 800a880:	f008 faac 	bl	8012ddc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a888:	887b      	ldrh	r3, [r7, #2]
 800a88a:	4413      	add	r3, r2
 800a88c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a88e:	89fb      	ldrh	r3, [r7, #14]
 800a890:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a894:	d804      	bhi.n	800a8a0 <tcp_recved+0x54>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a89a:	89fa      	ldrh	r2, [r7, #14]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d204      	bcs.n	800a8aa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a8a6:	851a      	strh	r2, [r3, #40]	; 0x28
 800a8a8:	e002      	b.n	800a8b0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	89fa      	ldrh	r2, [r7, #14]
 800a8ae:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7ff ff71 	bl	800a798 <tcp_update_rcv_ann_wnd>
 800a8b6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a8be:	d309      	bcc.n	800a8d4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	8b5b      	ldrh	r3, [r3, #26]
 800a8c4:	f043 0302 	orr.w	r3, r3, #2
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f003 fe3e 	bl	800e550 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	08014168 	.word	0x08014168
 800a8e0:	08014404 	.word	0x08014404
 800a8e4:	080141ac 	.word	0x080141ac
 800a8e8:	0801441c 	.word	0x0801441c

0800a8ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a8ec:	b5b0      	push	{r4, r5, r7, lr}
 800a8ee:	b090      	sub	sp, #64	; 0x40
 800a8f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a8f8:	4b94      	ldr	r3, [pc, #592]	; (800ab4c <tcp_slowtmr+0x260>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	4a93      	ldr	r2, [pc, #588]	; (800ab4c <tcp_slowtmr+0x260>)
 800a900:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a902:	4b93      	ldr	r3, [pc, #588]	; (800ab50 <tcp_slowtmr+0x264>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	3301      	adds	r3, #1
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	4b91      	ldr	r3, [pc, #580]	; (800ab50 <tcp_slowtmr+0x264>)
 800a90c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a912:	4b90      	ldr	r3, [pc, #576]	; (800ab54 <tcp_slowtmr+0x268>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a918:	e29f      	b.n	800ae5a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	7d1b      	ldrb	r3, [r3, #20]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d106      	bne.n	800a930 <tcp_slowtmr+0x44>
 800a922:	4b8d      	ldr	r3, [pc, #564]	; (800ab58 <tcp_slowtmr+0x26c>)
 800a924:	f240 42be 	movw	r2, #1214	; 0x4be
 800a928:	498c      	ldr	r1, [pc, #560]	; (800ab5c <tcp_slowtmr+0x270>)
 800a92a:	488d      	ldr	r0, [pc, #564]	; (800ab60 <tcp_slowtmr+0x274>)
 800a92c:	f008 fa56 	bl	8012ddc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a932:	7d1b      	ldrb	r3, [r3, #20]
 800a934:	2b01      	cmp	r3, #1
 800a936:	d106      	bne.n	800a946 <tcp_slowtmr+0x5a>
 800a938:	4b87      	ldr	r3, [pc, #540]	; (800ab58 <tcp_slowtmr+0x26c>)
 800a93a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a93e:	4989      	ldr	r1, [pc, #548]	; (800ab64 <tcp_slowtmr+0x278>)
 800a940:	4887      	ldr	r0, [pc, #540]	; (800ab60 <tcp_slowtmr+0x274>)
 800a942:	f008 fa4b 	bl	8012ddc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	7d1b      	ldrb	r3, [r3, #20]
 800a94a:	2b0a      	cmp	r3, #10
 800a94c:	d106      	bne.n	800a95c <tcp_slowtmr+0x70>
 800a94e:	4b82      	ldr	r3, [pc, #520]	; (800ab58 <tcp_slowtmr+0x26c>)
 800a950:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a954:	4984      	ldr	r1, [pc, #528]	; (800ab68 <tcp_slowtmr+0x27c>)
 800a956:	4882      	ldr	r0, [pc, #520]	; (800ab60 <tcp_slowtmr+0x274>)
 800a958:	f008 fa40 	bl	8012ddc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	7f9a      	ldrb	r2, [r3, #30]
 800a960:	4b7b      	ldr	r3, [pc, #492]	; (800ab50 <tcp_slowtmr+0x264>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	429a      	cmp	r2, r3
 800a966:	d105      	bne.n	800a974 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a972:	e272      	b.n	800ae5a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a974:	4b76      	ldr	r3, [pc, #472]	; (800ab50 <tcp_slowtmr+0x264>)
 800a976:	781a      	ldrb	r2, [r3, #0]
 800a978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a97c:	2300      	movs	r3, #0
 800a97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98a:	7d1b      	ldrb	r3, [r3, #20]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	d10a      	bne.n	800a9a6 <tcp_slowtmr+0xba>
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a996:	2b05      	cmp	r3, #5
 800a998:	d905      	bls.n	800a9a6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a99a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a99e:	3301      	adds	r3, #1
 800a9a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9a4:	e11e      	b.n	800abe4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9ac:	2b0b      	cmp	r3, #11
 800a9ae:	d905      	bls.n	800a9bc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a9ba:	e113      	b.n	800abe4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d075      	beq.n	800aab2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d006      	beq.n	800a9dc <tcp_slowtmr+0xf0>
 800a9ce:	4b62      	ldr	r3, [pc, #392]	; (800ab58 <tcp_slowtmr+0x26c>)
 800a9d0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a9d4:	4965      	ldr	r1, [pc, #404]	; (800ab6c <tcp_slowtmr+0x280>)
 800a9d6:	4862      	ldr	r0, [pc, #392]	; (800ab60 <tcp_slowtmr+0x274>)
 800a9d8:	f008 fa00 	bl	8012ddc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d106      	bne.n	800a9f2 <tcp_slowtmr+0x106>
 800a9e4:	4b5c      	ldr	r3, [pc, #368]	; (800ab58 <tcp_slowtmr+0x26c>)
 800a9e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a9ea:	4961      	ldr	r1, [pc, #388]	; (800ab70 <tcp_slowtmr+0x284>)
 800a9ec:	485c      	ldr	r0, [pc, #368]	; (800ab60 <tcp_slowtmr+0x274>)
 800a9ee:	f008 f9f5 	bl	8012ddc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a9f8:	2b0b      	cmp	r3, #11
 800a9fa:	d905      	bls.n	800aa08 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa00:	3301      	adds	r3, #1
 800aa02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa06:	e0ed      	b.n	800abe4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800aa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	4a58      	ldr	r2, [pc, #352]	; (800ab74 <tcp_slowtmr+0x288>)
 800aa12:	5cd3      	ldrb	r3, [r2, r3]
 800aa14:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800aa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa1c:	7c7a      	ldrb	r2, [r7, #17]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d907      	bls.n	800aa32 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa28:	3301      	adds	r3, #1
 800aa2a:	b2da      	uxtb	r2, r3
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800aa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800aa38:	7c7a      	ldrb	r2, [r7, #17]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	f200 80d2 	bhi.w	800abe4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800aa40:	2301      	movs	r3, #1
 800aa42:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d108      	bne.n	800aa60 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800aa4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa50:	f004 fc26 	bl	800f2a0 <tcp_zero_window_probe>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d014      	beq.n	800aa84 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	623b      	str	r3, [r7, #32]
 800aa5e:	e011      	b.n	800aa84 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800aa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa66:	4619      	mov	r1, r3
 800aa68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa6a:	f003 faeb 	bl	800e044 <tcp_split_unsent_seg>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d107      	bne.n	800aa84 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800aa74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa76:	f003 fd6b 	bl	800e550 <tcp_output>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800aa80:	2300      	movs	r3, #0
 800aa82:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 80ac 	beq.w	800abe4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800aa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800aa94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aa9a:	2b06      	cmp	r3, #6
 800aa9c:	f200 80a2 	bhi.w	800abe4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	b2da      	uxtb	r2, r3
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800aab0:	e098      	b.n	800abe4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800aab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	db0f      	blt.n	800aadc <tcp_slowtmr+0x1f0>
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aac2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d008      	beq.n	800aadc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	3301      	adds	r3, #1
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	b21a      	sxth	r2, r3
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800aadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aade:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800aae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800aae8:	429a      	cmp	r2, r3
 800aaea:	db7b      	blt.n	800abe4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800aaec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aaee:	f004 f821 	bl	800eb34 <tcp_rexmit_rto_prepare>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d007      	beq.n	800ab08 <tcp_slowtmr+0x21c>
 800aaf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d171      	bne.n	800abe4 <tcp_slowtmr+0x2f8>
 800ab00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d06d      	beq.n	800abe4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ab08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0a:	7d1b      	ldrb	r3, [r3, #20]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d03a      	beq.n	800ab86 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ab10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab16:	2b0c      	cmp	r3, #12
 800ab18:	bf28      	it	cs
 800ab1a:	230c      	movcs	r3, #12
 800ab1c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ab24:	10db      	asrs	r3, r3, #3
 800ab26:	b21b      	sxth	r3, r3
 800ab28:	461a      	mov	r2, r3
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ab30:	4413      	add	r3, r2
 800ab32:	7efa      	ldrb	r2, [r7, #27]
 800ab34:	4910      	ldr	r1, [pc, #64]	; (800ab78 <tcp_slowtmr+0x28c>)
 800ab36:	5c8a      	ldrb	r2, [r1, r2]
 800ab38:	4093      	lsls	r3, r2
 800ab3a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ab42:	4293      	cmp	r3, r2
 800ab44:	dc1a      	bgt.n	800ab7c <tcp_slowtmr+0x290>
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	b21a      	sxth	r2, r3
 800ab4a:	e019      	b.n	800ab80 <tcp_slowtmr+0x294>
 800ab4c:	20011bfc 	.word	0x20011bfc
 800ab50:	2000b10a 	.word	0x2000b10a
 800ab54:	20011bf8 	.word	0x20011bf8
 800ab58:	08014168 	.word	0x08014168
 800ab5c:	080144ac 	.word	0x080144ac
 800ab60:	080141ac 	.word	0x080141ac
 800ab64:	080144d8 	.word	0x080144d8
 800ab68:	08014504 	.word	0x08014504
 800ab6c:	08014534 	.word	0x08014534
 800ab70:	08014568 	.word	0x08014568
 800ab74:	08016198 	.word	0x08016198
 800ab78:	08016188 	.word	0x08016188
 800ab7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ab86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab88:	2200      	movs	r2, #0
 800ab8a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ab92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	bf28      	it	cs
 800ab9c:	4613      	movcs	r3, r2
 800ab9e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800aba0:	8a7b      	ldrh	r3, [r7, #18]
 800aba2:	085b      	lsrs	r3, r3, #1
 800aba4:	b29a      	uxth	r2, r3
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	b29b      	uxth	r3, r3
 800abba:	429a      	cmp	r2, r3
 800abbc:	d206      	bcs.n	800abcc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800abbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	2200      	movs	r2, #0
 800abda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800abde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abe0:	f004 f818 	bl	800ec14 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800abe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe6:	7d1b      	ldrb	r3, [r3, #20]
 800abe8:	2b06      	cmp	r3, #6
 800abea:	d111      	bne.n	800ac10 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800abec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abee:	8b5b      	ldrh	r3, [r3, #26]
 800abf0:	f003 0310 	and.w	r3, r3, #16
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00b      	beq.n	800ac10 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800abf8:	4b9d      	ldr	r3, [pc, #628]	; (800ae70 <tcp_slowtmr+0x584>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfe:	6a1b      	ldr	r3, [r3, #32]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	2b28      	cmp	r3, #40	; 0x28
 800ac04:	d904      	bls.n	800ac10 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ac06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ac10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac12:	7a5b      	ldrb	r3, [r3, #9]
 800ac14:	f003 0308 	and.w	r3, r3, #8
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d04c      	beq.n	800acb6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ac1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d003      	beq.n	800ac2c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ac24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac26:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ac28:	2b07      	cmp	r3, #7
 800ac2a:	d144      	bne.n	800acb6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac2c:	4b90      	ldr	r3, [pc, #576]	; (800ae70 <tcp_slowtmr+0x584>)
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ac36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac3c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ac40:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ac44:	498b      	ldr	r1, [pc, #556]	; (800ae74 <tcp_slowtmr+0x588>)
 800ac46:	fba1 1303 	umull	r1, r3, r1, r3
 800ac4a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d90a      	bls.n	800ac66 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ac50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac54:	3301      	adds	r3, #1
 800ac56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ac5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac5e:	3301      	adds	r3, #1
 800ac60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ac64:	e027      	b.n	800acb6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac66:	4b82      	ldr	r3, [pc, #520]	; (800ae70 <tcp_slowtmr+0x584>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ac70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac72:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ac76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac78:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	4b7e      	ldr	r3, [pc, #504]	; (800ae78 <tcp_slowtmr+0x58c>)
 800ac80:	fb03 f300 	mul.w	r3, r3, r0
 800ac84:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ac86:	497b      	ldr	r1, [pc, #492]	; (800ae74 <tcp_slowtmr+0x588>)
 800ac88:	fba1 1303 	umull	r1, r3, r1, r3
 800ac8c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d911      	bls.n	800acb6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ac92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac94:	f004 fac4 	bl	800f220 <tcp_keepalive>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ac9e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d107      	bne.n	800acb6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800aca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800acac:	3301      	adds	r3, #1
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800acb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d011      	beq.n	800ace2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800acbe:	4b6c      	ldr	r3, [pc, #432]	; (800ae70 <tcp_slowtmr+0x584>)
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	6a1b      	ldr	r3, [r3, #32]
 800acc6:	1ad2      	subs	r2, r2, r3
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800acce:	4619      	mov	r1, r3
 800acd0:	460b      	mov	r3, r1
 800acd2:	005b      	lsls	r3, r3, #1
 800acd4:	440b      	add	r3, r1
 800acd6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800acd8:	429a      	cmp	r2, r3
 800acda:	d302      	bcc.n	800ace2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800acdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acde:	f000 fddb 	bl	800b898 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	7d1b      	ldrb	r3, [r3, #20]
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d10b      	bne.n	800ad02 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800acea:	4b61      	ldr	r3, [pc, #388]	; (800ae70 <tcp_slowtmr+0x584>)
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	2b28      	cmp	r3, #40	; 0x28
 800acf6:	d904      	bls.n	800ad02 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800acf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800acfc:	3301      	adds	r3, #1
 800acfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ad02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad04:	7d1b      	ldrb	r3, [r3, #20]
 800ad06:	2b09      	cmp	r3, #9
 800ad08:	d10b      	bne.n	800ad22 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ad0a:	4b59      	ldr	r3, [pc, #356]	; (800ae70 <tcp_slowtmr+0x584>)
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	2bf0      	cmp	r3, #240	; 0xf0
 800ad16:	d904      	bls.n	800ad22 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ad18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ad22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d060      	beq.n	800adec <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad30:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ad32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad34:	f000 fbfc 	bl	800b530 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ad38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d010      	beq.n	800ad60 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ad3e:	4b4f      	ldr	r3, [pc, #316]	; (800ae7c <tcp_slowtmr+0x590>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d106      	bne.n	800ad56 <tcp_slowtmr+0x46a>
 800ad48:	4b4d      	ldr	r3, [pc, #308]	; (800ae80 <tcp_slowtmr+0x594>)
 800ad4a:	f240 526d 	movw	r2, #1389	; 0x56d
 800ad4e:	494d      	ldr	r1, [pc, #308]	; (800ae84 <tcp_slowtmr+0x598>)
 800ad50:	484d      	ldr	r0, [pc, #308]	; (800ae88 <tcp_slowtmr+0x59c>)
 800ad52:	f008 f843 	bl	8012ddc <iprintf>
        prev->next = pcb->next;
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	68da      	ldr	r2, [r3, #12]
 800ad5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5c:	60da      	str	r2, [r3, #12]
 800ad5e:	e00f      	b.n	800ad80 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ad60:	4b46      	ldr	r3, [pc, #280]	; (800ae7c <tcp_slowtmr+0x590>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d006      	beq.n	800ad78 <tcp_slowtmr+0x48c>
 800ad6a:	4b45      	ldr	r3, [pc, #276]	; (800ae80 <tcp_slowtmr+0x594>)
 800ad6c:	f240 5271 	movw	r2, #1393	; 0x571
 800ad70:	4946      	ldr	r1, [pc, #280]	; (800ae8c <tcp_slowtmr+0x5a0>)
 800ad72:	4845      	ldr	r0, [pc, #276]	; (800ae88 <tcp_slowtmr+0x59c>)
 800ad74:	f008 f832 	bl	8012ddc <iprintf>
        tcp_active_pcbs = pcb->next;
 800ad78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	4a3f      	ldr	r2, [pc, #252]	; (800ae7c <tcp_slowtmr+0x590>)
 800ad7e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ad80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d013      	beq.n	800adb0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ad88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ad8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ad90:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	3304      	adds	r3, #4
 800ad96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad98:	8ad2      	ldrh	r2, [r2, #22]
 800ad9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad9c:	8b09      	ldrh	r1, [r1, #24]
 800ad9e:	9102      	str	r1, [sp, #8]
 800ada0:	9201      	str	r2, [sp, #4]
 800ada2:	9300      	str	r3, [sp, #0]
 800ada4:	462b      	mov	r3, r5
 800ada6:	4622      	mov	r2, r4
 800ada8:	4601      	mov	r1, r0
 800adaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adac:	f004 f984 	bl	800f0b8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800adb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	7d1b      	ldrb	r3, [r3, #20]
 800adba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800adbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800adc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800adc6:	6838      	ldr	r0, [r7, #0]
 800adc8:	f7ff f9f2 	bl	800a1b0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800adcc:	4b30      	ldr	r3, [pc, #192]	; (800ae90 <tcp_slowtmr+0x5a4>)
 800adce:	2200      	movs	r2, #0
 800add0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d004      	beq.n	800ade2 <tcp_slowtmr+0x4f6>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f06f 010c 	mvn.w	r1, #12
 800adde:	68b8      	ldr	r0, [r7, #8]
 800ade0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ade2:	4b2b      	ldr	r3, [pc, #172]	; (800ae90 <tcp_slowtmr+0x5a4>)
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d037      	beq.n	800ae5a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800adea:	e590      	b.n	800a90e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800adf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800adf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adf8:	7f1b      	ldrb	r3, [r3, #28]
 800adfa:	3301      	adds	r3, #1
 800adfc:	b2da      	uxtb	r2, r3
 800adfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae00:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	7f1a      	ldrb	r2, [r3, #28]
 800ae06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae08:	7f5b      	ldrb	r3, [r3, #29]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d325      	bcc.n	800ae5a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ae0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae10:	2200      	movs	r2, #0
 800ae12:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ae14:	4b1e      	ldr	r3, [pc, #120]	; (800ae90 <tcp_slowtmr+0x5a4>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00b      	beq.n	800ae3c <tcp_slowtmr+0x550>
 800ae24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae2c:	6912      	ldr	r2, [r2, #16]
 800ae2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae30:	4610      	mov	r0, r2
 800ae32:	4798      	blx	r3
 800ae34:	4603      	mov	r3, r0
 800ae36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ae3a:	e002      	b.n	800ae42 <tcp_slowtmr+0x556>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ae42:	4b13      	ldr	r3, [pc, #76]	; (800ae90 <tcp_slowtmr+0x5a4>)
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d000      	beq.n	800ae4c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ae4a:	e560      	b.n	800a90e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ae4c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d102      	bne.n	800ae5a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ae54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae56:	f003 fb7b 	bl	800e550 <tcp_output>
  while (pcb != NULL) {
 800ae5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f47f ad5c 	bne.w	800a91a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ae66:	4b0b      	ldr	r3, [pc, #44]	; (800ae94 <tcp_slowtmr+0x5a8>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ae6c:	e067      	b.n	800af3e <tcp_slowtmr+0x652>
 800ae6e:	bf00      	nop
 800ae70:	20011bfc 	.word	0x20011bfc
 800ae74:	10624dd3 	.word	0x10624dd3
 800ae78:	000124f8 	.word	0x000124f8
 800ae7c:	20011bf8 	.word	0x20011bf8
 800ae80:	08014168 	.word	0x08014168
 800ae84:	080145a0 	.word	0x080145a0
 800ae88:	080141ac 	.word	0x080141ac
 800ae8c:	080145cc 	.word	0x080145cc
 800ae90:	20011bf4 	.word	0x20011bf4
 800ae94:	20011c08 	.word	0x20011c08
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ae98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9a:	7d1b      	ldrb	r3, [r3, #20]
 800ae9c:	2b0a      	cmp	r3, #10
 800ae9e:	d006      	beq.n	800aeae <tcp_slowtmr+0x5c2>
 800aea0:	4b2b      	ldr	r3, [pc, #172]	; (800af50 <tcp_slowtmr+0x664>)
 800aea2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800aea6:	492b      	ldr	r1, [pc, #172]	; (800af54 <tcp_slowtmr+0x668>)
 800aea8:	482b      	ldr	r0, [pc, #172]	; (800af58 <tcp_slowtmr+0x66c>)
 800aeaa:	f007 ff97 	bl	8012ddc <iprintf>
    pcb_remove = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800aeb4:	4b29      	ldr	r3, [pc, #164]	; (800af5c <tcp_slowtmr+0x670>)
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeba:	6a1b      	ldr	r3, [r3, #32]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	2bf0      	cmp	r3, #240	; 0xf0
 800aec0:	d904      	bls.n	800aecc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800aec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aec6:	3301      	adds	r3, #1
 800aec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800aecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d02f      	beq.n	800af34 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800aed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aed6:	f000 fb2b 	bl	800b530 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800aeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d010      	beq.n	800af02 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800aee0:	4b1f      	ldr	r3, [pc, #124]	; (800af60 <tcp_slowtmr+0x674>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d106      	bne.n	800aef8 <tcp_slowtmr+0x60c>
 800aeea:	4b19      	ldr	r3, [pc, #100]	; (800af50 <tcp_slowtmr+0x664>)
 800aeec:	f240 52af 	movw	r2, #1455	; 0x5af
 800aef0:	491c      	ldr	r1, [pc, #112]	; (800af64 <tcp_slowtmr+0x678>)
 800aef2:	4819      	ldr	r0, [pc, #100]	; (800af58 <tcp_slowtmr+0x66c>)
 800aef4:	f007 ff72 	bl	8012ddc <iprintf>
        prev->next = pcb->next;
 800aef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefa:	68da      	ldr	r2, [r3, #12]
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	60da      	str	r2, [r3, #12]
 800af00:	e00f      	b.n	800af22 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800af02:	4b17      	ldr	r3, [pc, #92]	; (800af60 <tcp_slowtmr+0x674>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af08:	429a      	cmp	r2, r3
 800af0a:	d006      	beq.n	800af1a <tcp_slowtmr+0x62e>
 800af0c:	4b10      	ldr	r3, [pc, #64]	; (800af50 <tcp_slowtmr+0x664>)
 800af0e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800af12:	4915      	ldr	r1, [pc, #84]	; (800af68 <tcp_slowtmr+0x67c>)
 800af14:	4810      	ldr	r0, [pc, #64]	; (800af58 <tcp_slowtmr+0x66c>)
 800af16:	f007 ff61 	bl	8012ddc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800af1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	4a10      	ldr	r2, [pc, #64]	; (800af60 <tcp_slowtmr+0x674>)
 800af20:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800af26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800af2c:	69f8      	ldr	r0, [r7, #28]
 800af2e:	f7ff f93f 	bl	800a1b0 <tcp_free>
 800af32:	e004      	b.n	800af3e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800af34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800af38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800af3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1a9      	bne.n	800ae98 <tcp_slowtmr+0x5ac>
    }
  }
}
 800af44:	bf00      	nop
 800af46:	bf00      	nop
 800af48:	3730      	adds	r7, #48	; 0x30
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bdb0      	pop	{r4, r5, r7, pc}
 800af4e:	bf00      	nop
 800af50:	08014168 	.word	0x08014168
 800af54:	080145f8 	.word	0x080145f8
 800af58:	080141ac 	.word	0x080141ac
 800af5c:	20011bfc 	.word	0x20011bfc
 800af60:	20011c08 	.word	0x20011c08
 800af64:	08014628 	.word	0x08014628
 800af68:	08014650 	.word	0x08014650

0800af6c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800af72:	4b2d      	ldr	r3, [pc, #180]	; (800b028 <tcp_fasttmr+0xbc>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	3301      	adds	r3, #1
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	4b2b      	ldr	r3, [pc, #172]	; (800b028 <tcp_fasttmr+0xbc>)
 800af7c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800af7e:	4b2b      	ldr	r3, [pc, #172]	; (800b02c <tcp_fasttmr+0xc0>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800af84:	e048      	b.n	800b018 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	7f9a      	ldrb	r2, [r3, #30]
 800af8a:	4b27      	ldr	r3, [pc, #156]	; (800b028 <tcp_fasttmr+0xbc>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d03f      	beq.n	800b012 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800af92:	4b25      	ldr	r3, [pc, #148]	; (800b028 <tcp_fasttmr+0xbc>)
 800af94:	781a      	ldrb	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	8b5b      	ldrh	r3, [r3, #26]
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d010      	beq.n	800afc8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	8b5b      	ldrh	r3, [r3, #26]
 800afaa:	f043 0302 	orr.w	r3, r3, #2
 800afae:	b29a      	uxth	r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f003 facb 	bl	800e550 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	8b5b      	ldrh	r3, [r3, #26]
 800afbe:	f023 0303 	bic.w	r3, r3, #3
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	8b5b      	ldrh	r3, [r3, #26]
 800afcc:	f003 0308 	and.w	r3, r3, #8
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d009      	beq.n	800afe8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	8b5b      	ldrh	r3, [r3, #26]
 800afd8:	f023 0308 	bic.w	r3, r3, #8
 800afdc:	b29a      	uxth	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff fa78 	bl	800a4d8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00a      	beq.n	800b00c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800aff6:	4b0e      	ldr	r3, [pc, #56]	; (800b030 <tcp_fasttmr+0xc4>)
 800aff8:	2200      	movs	r2, #0
 800affa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f819 	bl	800b034 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b002:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <tcp_fasttmr+0xc4>)
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d000      	beq.n	800b00c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b00a:	e7b8      	b.n	800af7e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	607b      	str	r3, [r7, #4]
 800b010:	e002      	b.n	800b018 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1b3      	bne.n	800af86 <tcp_fasttmr+0x1a>
    }
  }
}
 800b01e:	bf00      	nop
 800b020:	bf00      	nop
 800b022:	3708      	adds	r7, #8
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}
 800b028:	2000b10a 	.word	0x2000b10a
 800b02c:	20011bf8 	.word	0x20011bf8
 800b030:	20011bf4 	.word	0x20011bf4

0800b034 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b034:	b590      	push	{r4, r7, lr}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d109      	bne.n	800b056 <tcp_process_refused_data+0x22>
 800b042:	4b37      	ldr	r3, [pc, #220]	; (800b120 <tcp_process_refused_data+0xec>)
 800b044:	f240 6209 	movw	r2, #1545	; 0x609
 800b048:	4936      	ldr	r1, [pc, #216]	; (800b124 <tcp_process_refused_data+0xf0>)
 800b04a:	4837      	ldr	r0, [pc, #220]	; (800b128 <tcp_process_refused_data+0xf4>)
 800b04c:	f007 fec6 	bl	8012ddc <iprintf>
 800b050:	f06f 030f 	mvn.w	r3, #15
 800b054:	e060      	b.n	800b118 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b05a:	7b5b      	ldrb	r3, [r3, #13]
 800b05c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b062:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2200      	movs	r2, #0
 800b068:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00b      	beq.n	800b08c <tcp_process_refused_data+0x58>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6918      	ldr	r0, [r3, #16]
 800b07e:	2300      	movs	r3, #0
 800b080:	68ba      	ldr	r2, [r7, #8]
 800b082:	6879      	ldr	r1, [r7, #4]
 800b084:	47a0      	blx	r4
 800b086:	4603      	mov	r3, r0
 800b088:	73fb      	strb	r3, [r7, #15]
 800b08a:	e007      	b.n	800b09c <tcp_process_refused_data+0x68>
 800b08c:	2300      	movs	r3, #0
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	2000      	movs	r0, #0
 800b094:	f000 f8a4 	bl	800b1e0 <tcp_recv_null>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d12a      	bne.n	800b0fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	f003 0320 	and.w	r3, r3, #32
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d033      	beq.n	800b116 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b0b6:	d005      	beq.n	800b0c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0bc:	3301      	adds	r3, #1
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00b      	beq.n	800b0e6 <tcp_process_refused_data+0xb2>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6918      	ldr	r0, [r3, #16]
 800b0d8:	2300      	movs	r3, #0
 800b0da:	2200      	movs	r2, #0
 800b0dc:	6879      	ldr	r1, [r7, #4]
 800b0de:	47a0      	blx	r4
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	73fb      	strb	r3, [r7, #15]
 800b0e4:	e001      	b.n	800b0ea <tcp_process_refused_data+0xb6>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ee:	f113 0f0d 	cmn.w	r3, #13
 800b0f2:	d110      	bne.n	800b116 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b0f4:	f06f 030c 	mvn.w	r3, #12
 800b0f8:	e00e      	b.n	800b118 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0fe:	f113 0f0d 	cmn.w	r3, #13
 800b102:	d102      	bne.n	800b10a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b104:	f06f 030c 	mvn.w	r3, #12
 800b108:	e006      	b.n	800b118 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68ba      	ldr	r2, [r7, #8]
 800b10e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b110:	f06f 0304 	mvn.w	r3, #4
 800b114:	e000      	b.n	800b118 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd90      	pop	{r4, r7, pc}
 800b120:	08014168 	.word	0x08014168
 800b124:	08014678 	.word	0x08014678
 800b128:	080141ac 	.word	0x080141ac

0800b12c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b134:	e007      	b.n	800b146 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f80a 	bl	800b156 <tcp_seg_free>
    seg = next;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1f4      	bne.n	800b136 <tcp_segs_free+0xa>
  }
}
 800b14c:	bf00      	nop
 800b14e:	bf00      	nop
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b082      	sub	sp, #8
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00c      	beq.n	800b17e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d004      	beq.n	800b176 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	f7fe fd71 	bl	8009c58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b176:	6879      	ldr	r1, [r7, #4]
 800b178:	2003      	movs	r0, #3
 800b17a:	f7fd fec9 	bl	8008f10 <memp_free>
  }
}
 800b17e:	bf00      	nop
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
	...

0800b188 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d106      	bne.n	800b1a4 <tcp_seg_copy+0x1c>
 800b196:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <tcp_seg_copy+0x4c>)
 800b198:	f240 6282 	movw	r2, #1666	; 0x682
 800b19c:	490e      	ldr	r1, [pc, #56]	; (800b1d8 <tcp_seg_copy+0x50>)
 800b19e:	480f      	ldr	r0, [pc, #60]	; (800b1dc <tcp_seg_copy+0x54>)
 800b1a0:	f007 fe1c 	bl	8012ddc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b1a4:	2003      	movs	r0, #3
 800b1a6:	f7fd fe61 	bl	8008e6c <memp_malloc>
 800b1aa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <tcp_seg_copy+0x2e>
    return NULL;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	e00a      	b.n	800b1cc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b1b6:	2210      	movs	r2, #16
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f007 fa60 	bl	8012680 <memcpy>
  pbuf_ref(cseg->p);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7fe fded 	bl	8009da4 <pbuf_ref>
  return cseg;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	08014168 	.word	0x08014168
 800b1d8:	080146bc 	.word	0x080146bc
 800b1dc:	080141ac 	.word	0x080141ac

0800b1e0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
 800b1ec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d109      	bne.n	800b208 <tcp_recv_null+0x28>
 800b1f4:	4b12      	ldr	r3, [pc, #72]	; (800b240 <tcp_recv_null+0x60>)
 800b1f6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b1fa:	4912      	ldr	r1, [pc, #72]	; (800b244 <tcp_recv_null+0x64>)
 800b1fc:	4812      	ldr	r0, [pc, #72]	; (800b248 <tcp_recv_null+0x68>)
 800b1fe:	f007 fded 	bl	8012ddc <iprintf>
 800b202:	f06f 030f 	mvn.w	r3, #15
 800b206:	e016      	b.n	800b236 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d009      	beq.n	800b222 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	891b      	ldrh	r3, [r3, #8]
 800b212:	4619      	mov	r1, r3
 800b214:	68b8      	ldr	r0, [r7, #8]
 800b216:	f7ff fb19 	bl	800a84c <tcp_recved>
    pbuf_free(p);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7fe fd1c 	bl	8009c58 <pbuf_free>
 800b220:	e008      	b.n	800b234 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d104      	bne.n	800b234 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b22a:	68b8      	ldr	r0, [r7, #8]
 800b22c:	f7ff f9be 	bl	800a5ac <tcp_close>
 800b230:	4603      	mov	r3, r0
 800b232:	e000      	b.n	800b236 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	08014168 	.word	0x08014168
 800b244:	080146d8 	.word	0x080146d8
 800b248:	080141ac 	.word	0x080141ac

0800b24c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b086      	sub	sp, #24
 800b250:	af00      	add	r7, sp, #0
 800b252:	4603      	mov	r3, r0
 800b254:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	db01      	blt.n	800b262 <tcp_kill_prio+0x16>
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	e000      	b.n	800b264 <tcp_kill_prio+0x18>
 800b262:	237f      	movs	r3, #127	; 0x7f
 800b264:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b266:	7afb      	ldrb	r3, [r7, #11]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d034      	beq.n	800b2d6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b26c:	7afb      	ldrb	r3, [r7, #11]
 800b26e:	3b01      	subs	r3, #1
 800b270:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b276:	2300      	movs	r3, #0
 800b278:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b27a:	4b19      	ldr	r3, [pc, #100]	; (800b2e0 <tcp_kill_prio+0x94>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	617b      	str	r3, [r7, #20]
 800b280:	e01f      	b.n	800b2c2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	7d5b      	ldrb	r3, [r3, #21]
 800b286:	7afa      	ldrb	r2, [r7, #11]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d80c      	bhi.n	800b2a6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b290:	7afa      	ldrb	r2, [r7, #11]
 800b292:	429a      	cmp	r2, r3
 800b294:	d112      	bne.n	800b2bc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b296:	4b13      	ldr	r3, [pc, #76]	; (800b2e4 <tcp_kill_prio+0x98>)
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d80a      	bhi.n	800b2bc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b2a6:	4b0f      	ldr	r3, [pc, #60]	; (800b2e4 <tcp_kill_prio+0x98>)
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	7d5b      	ldrb	r3, [r3, #21]
 800b2ba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1dc      	bne.n	800b282 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d004      	beq.n	800b2d8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b2ce:	6938      	ldr	r0, [r7, #16]
 800b2d0:	f7ff fa56 	bl	800a780 <tcp_abort>
 800b2d4:	e000      	b.n	800b2d8 <tcp_kill_prio+0x8c>
    return;
 800b2d6:	bf00      	nop
  }
}
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20011bf8 	.word	0x20011bf8
 800b2e4:	20011bfc 	.word	0x20011bfc

0800b2e8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b2f2:	79fb      	ldrb	r3, [r7, #7]
 800b2f4:	2b08      	cmp	r3, #8
 800b2f6:	d009      	beq.n	800b30c <tcp_kill_state+0x24>
 800b2f8:	79fb      	ldrb	r3, [r7, #7]
 800b2fa:	2b09      	cmp	r3, #9
 800b2fc:	d006      	beq.n	800b30c <tcp_kill_state+0x24>
 800b2fe:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <tcp_kill_state+0x80>)
 800b300:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b304:	4919      	ldr	r1, [pc, #100]	; (800b36c <tcp_kill_state+0x84>)
 800b306:	481a      	ldr	r0, [pc, #104]	; (800b370 <tcp_kill_state+0x88>)
 800b308:	f007 fd68 	bl	8012ddc <iprintf>

  inactivity = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b310:	2300      	movs	r3, #0
 800b312:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b314:	4b17      	ldr	r3, [pc, #92]	; (800b374 <tcp_kill_state+0x8c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	617b      	str	r3, [r7, #20]
 800b31a:	e017      	b.n	800b34c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	7d1b      	ldrb	r3, [r3, #20]
 800b320:	79fa      	ldrb	r2, [r7, #7]
 800b322:	429a      	cmp	r2, r3
 800b324:	d10f      	bne.n	800b346 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b326:	4b14      	ldr	r3, [pc, #80]	; (800b378 <tcp_kill_state+0x90>)
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	6a1b      	ldr	r3, [r3, #32]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	429a      	cmp	r2, r3
 800b334:	d807      	bhi.n	800b346 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b336:	4b10      	ldr	r3, [pc, #64]	; (800b378 <tcp_kill_state+0x90>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	617b      	str	r3, [r7, #20]
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d1e4      	bne.n	800b31c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d003      	beq.n	800b360 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b358:	2100      	movs	r1, #0
 800b35a:	6938      	ldr	r0, [r7, #16]
 800b35c:	f7ff f952 	bl	800a604 <tcp_abandon>
  }
}
 800b360:	bf00      	nop
 800b362:	3718      	adds	r7, #24
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	08014168 	.word	0x08014168
 800b36c:	080146f4 	.word	0x080146f4
 800b370:	080141ac 	.word	0x080141ac
 800b374:	20011bf8 	.word	0x20011bf8
 800b378:	20011bfc 	.word	0x20011bfc

0800b37c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b386:	2300      	movs	r3, #0
 800b388:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b38a:	4b12      	ldr	r3, [pc, #72]	; (800b3d4 <tcp_kill_timewait+0x58>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	60fb      	str	r3, [r7, #12]
 800b390:	e012      	b.n	800b3b8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b392:	4b11      	ldr	r3, [pc, #68]	; (800b3d8 <tcp_kill_timewait+0x5c>)
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d807      	bhi.n	800b3b2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b3a2:	4b0d      	ldr	r3, [pc, #52]	; (800b3d8 <tcp_kill_timewait+0x5c>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1e9      	bne.n	800b392 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b3c4:	68b8      	ldr	r0, [r7, #8]
 800b3c6:	f7ff f9db 	bl	800a780 <tcp_abort>
  }
}
 800b3ca:	bf00      	nop
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20011c08 	.word	0x20011c08
 800b3d8:	20011bfc 	.word	0x20011bfc

0800b3dc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b3e2:	4b10      	ldr	r3, [pc, #64]	; (800b424 <tcp_handle_closepend+0x48>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b3e8:	e014      	b.n	800b414 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68db      	ldr	r3, [r3, #12]
 800b3ee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	8b5b      	ldrh	r3, [r3, #26]
 800b3f4:	f003 0308 	and.w	r3, r3, #8
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d009      	beq.n	800b410 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	8b5b      	ldrh	r3, [r3, #26]
 800b400:	f023 0308 	bic.w	r3, r3, #8
 800b404:	b29a      	uxth	r2, r3
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7ff f864 	bl	800a4d8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1e7      	bne.n	800b3ea <tcp_handle_closepend+0xe>
  }
}
 800b41a:	bf00      	nop
 800b41c:	bf00      	nop
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	20011bf8 	.word	0x20011bf8

0800b428 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b432:	2001      	movs	r0, #1
 800b434:	f7fd fd1a 	bl	8008e6c <memp_malloc>
 800b438:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d126      	bne.n	800b48e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b440:	f7ff ffcc 	bl	800b3dc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b444:	f7ff ff9a 	bl	800b37c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b448:	2001      	movs	r0, #1
 800b44a:	f7fd fd0f 	bl	8008e6c <memp_malloc>
 800b44e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d11b      	bne.n	800b48e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b456:	2009      	movs	r0, #9
 800b458:	f7ff ff46 	bl	800b2e8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b45c:	2001      	movs	r0, #1
 800b45e:	f7fd fd05 	bl	8008e6c <memp_malloc>
 800b462:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d111      	bne.n	800b48e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b46a:	2008      	movs	r0, #8
 800b46c:	f7ff ff3c 	bl	800b2e8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b470:	2001      	movs	r0, #1
 800b472:	f7fd fcfb 	bl	8008e6c <memp_malloc>
 800b476:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d107      	bne.n	800b48e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b47e:	79fb      	ldrb	r3, [r7, #7]
 800b480:	4618      	mov	r0, r3
 800b482:	f7ff fee3 	bl	800b24c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b486:	2001      	movs	r0, #1
 800b488:	f7fd fcf0 	bl	8008e6c <memp_malloc>
 800b48c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d03f      	beq.n	800b514 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b494:	229c      	movs	r2, #156	; 0x9c
 800b496:	2100      	movs	r1, #0
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f007 f8ff 	bl	801269c <memset>
    pcb->prio = prio;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	79fa      	ldrb	r2, [r7, #7]
 800b4a2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b4aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b4b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	22ff      	movs	r2, #255	; 0xff
 800b4c2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b4ca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2206      	movs	r2, #6
 800b4d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2206      	movs	r2, #6
 800b4d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4e0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b4ea:	4b0d      	ldr	r3, [pc, #52]	; (800b520 <tcp_alloc+0xf8>)
 800b4ec:	681a      	ldr	r2, [r3, #0]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b4f2:	4b0c      	ldr	r3, [pc, #48]	; (800b524 <tcp_alloc+0xfc>)
 800b4f4:	781a      	ldrb	r2, [r3, #0]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b500:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	4a08      	ldr	r2, [pc, #32]	; (800b528 <tcp_alloc+0x100>)
 800b508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4a07      	ldr	r2, [pc, #28]	; (800b52c <tcp_alloc+0x104>)
 800b510:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b514:	68fb      	ldr	r3, [r7, #12]
}
 800b516:	4618      	mov	r0, r3
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20011bfc 	.word	0x20011bfc
 800b524:	2000b10a 	.word	0x2000b10a
 800b528:	0800b1e1 	.word	0x0800b1e1
 800b52c:	006ddd00 	.word	0x006ddd00

0800b530 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d107      	bne.n	800b54e <tcp_pcb_purge+0x1e>
 800b53e:	4b21      	ldr	r3, [pc, #132]	; (800b5c4 <tcp_pcb_purge+0x94>)
 800b540:	f640 0251 	movw	r2, #2129	; 0x851
 800b544:	4920      	ldr	r1, [pc, #128]	; (800b5c8 <tcp_pcb_purge+0x98>)
 800b546:	4821      	ldr	r0, [pc, #132]	; (800b5cc <tcp_pcb_purge+0x9c>)
 800b548:	f007 fc48 	bl	8012ddc <iprintf>
 800b54c:	e037      	b.n	800b5be <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	7d1b      	ldrb	r3, [r3, #20]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d033      	beq.n	800b5be <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b55a:	2b0a      	cmp	r3, #10
 800b55c:	d02f      	beq.n	800b5be <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b562:	2b01      	cmp	r3, #1
 800b564:	d02b      	beq.n	800b5be <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d007      	beq.n	800b57e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b572:	4618      	mov	r0, r3
 800b574:	f7fe fb70 	bl	8009c58 <pbuf_free>
      pcb->refused_data = NULL;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b582:	2b00      	cmp	r3, #0
 800b584:	d002      	beq.n	800b58c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f986 	bl	800b898 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b592:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b598:	4618      	mov	r0, r3
 800b59a:	f7ff fdc7 	bl	800b12c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff fdc2 	bl	800b12c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	66da      	str	r2, [r3, #108]	; 0x6c
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}
 800b5c4:	08014168 	.word	0x08014168
 800b5c8:	080147b4 	.word	0x080147b4
 800b5cc:	080141ac 	.word	0x080141ac

0800b5d0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d106      	bne.n	800b5ee <tcp_pcb_remove+0x1e>
 800b5e0:	4b3e      	ldr	r3, [pc, #248]	; (800b6dc <tcp_pcb_remove+0x10c>)
 800b5e2:	f640 0283 	movw	r2, #2179	; 0x883
 800b5e6:	493e      	ldr	r1, [pc, #248]	; (800b6e0 <tcp_pcb_remove+0x110>)
 800b5e8:	483e      	ldr	r0, [pc, #248]	; (800b6e4 <tcp_pcb_remove+0x114>)
 800b5ea:	f007 fbf7 	bl	8012ddc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d106      	bne.n	800b602 <tcp_pcb_remove+0x32>
 800b5f4:	4b39      	ldr	r3, [pc, #228]	; (800b6dc <tcp_pcb_remove+0x10c>)
 800b5f6:	f640 0284 	movw	r2, #2180	; 0x884
 800b5fa:	493b      	ldr	r1, [pc, #236]	; (800b6e8 <tcp_pcb_remove+0x118>)
 800b5fc:	4839      	ldr	r0, [pc, #228]	; (800b6e4 <tcp_pcb_remove+0x114>)
 800b5fe:	f007 fbed 	bl	8012ddc <iprintf>

  TCP_RMV(pcblist, pcb);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d105      	bne.n	800b618 <tcp_pcb_remove+0x48>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	e013      	b.n	800b640 <tcp_pcb_remove+0x70>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	60fb      	str	r3, [r7, #12]
 800b61e:	e00c      	b.n	800b63a <tcp_pcb_remove+0x6a>
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	429a      	cmp	r2, r3
 800b628:	d104      	bne.n	800b634 <tcp_pcb_remove+0x64>
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	68da      	ldr	r2, [r3, #12]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	60da      	str	r2, [r3, #12]
 800b632:	e005      	b.n	800b640 <tcp_pcb_remove+0x70>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	60fb      	str	r3, [r7, #12]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d1ef      	bne.n	800b620 <tcp_pcb_remove+0x50>
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2200      	movs	r2, #0
 800b644:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b646:	6838      	ldr	r0, [r7, #0]
 800b648:	f7ff ff72 	bl	800b530 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	7d1b      	ldrb	r3, [r3, #20]
 800b650:	2b0a      	cmp	r3, #10
 800b652:	d013      	beq.n	800b67c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d00f      	beq.n	800b67c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	8b5b      	ldrh	r3, [r3, #26]
 800b660:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b664:	2b00      	cmp	r3, #0
 800b666:	d009      	beq.n	800b67c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	8b5b      	ldrh	r3, [r3, #26]
 800b66c:	f043 0302 	orr.w	r3, r3, #2
 800b670:	b29a      	uxth	r2, r3
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b676:	6838      	ldr	r0, [r7, #0]
 800b678:	f002 ff6a 	bl	800e550 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	7d1b      	ldrb	r3, [r3, #20]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d020      	beq.n	800b6c6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d006      	beq.n	800b69a <tcp_pcb_remove+0xca>
 800b68c:	4b13      	ldr	r3, [pc, #76]	; (800b6dc <tcp_pcb_remove+0x10c>)
 800b68e:	f640 0293 	movw	r2, #2195	; 0x893
 800b692:	4916      	ldr	r1, [pc, #88]	; (800b6ec <tcp_pcb_remove+0x11c>)
 800b694:	4813      	ldr	r0, [pc, #76]	; (800b6e4 <tcp_pcb_remove+0x114>)
 800b696:	f007 fba1 	bl	8012ddc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d006      	beq.n	800b6b0 <tcp_pcb_remove+0xe0>
 800b6a2:	4b0e      	ldr	r3, [pc, #56]	; (800b6dc <tcp_pcb_remove+0x10c>)
 800b6a4:	f640 0294 	movw	r2, #2196	; 0x894
 800b6a8:	4911      	ldr	r1, [pc, #68]	; (800b6f0 <tcp_pcb_remove+0x120>)
 800b6aa:	480e      	ldr	r0, [pc, #56]	; (800b6e4 <tcp_pcb_remove+0x114>)
 800b6ac:	f007 fb96 	bl	8012ddc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d006      	beq.n	800b6c6 <tcp_pcb_remove+0xf6>
 800b6b8:	4b08      	ldr	r3, [pc, #32]	; (800b6dc <tcp_pcb_remove+0x10c>)
 800b6ba:	f640 0296 	movw	r2, #2198	; 0x896
 800b6be:	490d      	ldr	r1, [pc, #52]	; (800b6f4 <tcp_pcb_remove+0x124>)
 800b6c0:	4808      	ldr	r0, [pc, #32]	; (800b6e4 <tcp_pcb_remove+0x114>)
 800b6c2:	f007 fb8b 	bl	8012ddc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b6d2:	bf00      	nop
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	08014168 	.word	0x08014168
 800b6e0:	080147d0 	.word	0x080147d0
 800b6e4:	080141ac 	.word	0x080141ac
 800b6e8:	080147ec 	.word	0x080147ec
 800b6ec:	0801480c 	.word	0x0801480c
 800b6f0:	08014824 	.word	0x08014824
 800b6f4:	08014840 	.word	0x08014840

0800b6f8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d106      	bne.n	800b714 <tcp_next_iss+0x1c>
 800b706:	4b0a      	ldr	r3, [pc, #40]	; (800b730 <tcp_next_iss+0x38>)
 800b708:	f640 02af 	movw	r2, #2223	; 0x8af
 800b70c:	4909      	ldr	r1, [pc, #36]	; (800b734 <tcp_next_iss+0x3c>)
 800b70e:	480a      	ldr	r0, [pc, #40]	; (800b738 <tcp_next_iss+0x40>)
 800b710:	f007 fb64 	bl	8012ddc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b714:	4b09      	ldr	r3, [pc, #36]	; (800b73c <tcp_next_iss+0x44>)
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	4b09      	ldr	r3, [pc, #36]	; (800b740 <tcp_next_iss+0x48>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4413      	add	r3, r2
 800b71e:	4a07      	ldr	r2, [pc, #28]	; (800b73c <tcp_next_iss+0x44>)
 800b720:	6013      	str	r3, [r2, #0]
  return iss;
 800b722:	4b06      	ldr	r3, [pc, #24]	; (800b73c <tcp_next_iss+0x44>)
 800b724:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b726:	4618      	mov	r0, r3
 800b728:	3708      	adds	r7, #8
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	08014168 	.word	0x08014168
 800b734:	08014858 	.word	0x08014858
 800b738:	080141ac 	.word	0x080141ac
 800b73c:	20000014 	.word	0x20000014
 800b740:	20011bfc 	.word	0x20011bfc

0800b744 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b086      	sub	sp, #24
 800b748:	af00      	add	r7, sp, #0
 800b74a:	4603      	mov	r3, r0
 800b74c:	60b9      	str	r1, [r7, #8]
 800b74e:	607a      	str	r2, [r7, #4]
 800b750:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d106      	bne.n	800b766 <tcp_eff_send_mss_netif+0x22>
 800b758:	4b14      	ldr	r3, [pc, #80]	; (800b7ac <tcp_eff_send_mss_netif+0x68>)
 800b75a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b75e:	4914      	ldr	r1, [pc, #80]	; (800b7b0 <tcp_eff_send_mss_netif+0x6c>)
 800b760:	4814      	ldr	r0, [pc, #80]	; (800b7b4 <tcp_eff_send_mss_netif+0x70>)
 800b762:	f007 fb3b 	bl	8012ddc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b76c:	89fb      	ldrh	r3, [r7, #14]
 800b76e:	e019      	b.n	800b7a4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b774:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b776:	8afb      	ldrh	r3, [r7, #22]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d012      	beq.n	800b7a2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b77c:	2328      	movs	r3, #40	; 0x28
 800b77e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b780:	8afa      	ldrh	r2, [r7, #22]
 800b782:	8abb      	ldrh	r3, [r7, #20]
 800b784:	429a      	cmp	r2, r3
 800b786:	d904      	bls.n	800b792 <tcp_eff_send_mss_netif+0x4e>
 800b788:	8afa      	ldrh	r2, [r7, #22]
 800b78a:	8abb      	ldrh	r3, [r7, #20]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	b29b      	uxth	r3, r3
 800b790:	e000      	b.n	800b794 <tcp_eff_send_mss_netif+0x50>
 800b792:	2300      	movs	r3, #0
 800b794:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b796:	8a7a      	ldrh	r2, [r7, #18]
 800b798:	89fb      	ldrh	r3, [r7, #14]
 800b79a:	4293      	cmp	r3, r2
 800b79c:	bf28      	it	cs
 800b79e:	4613      	movcs	r3, r2
 800b7a0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b7a2:	89fb      	ldrh	r3, [r7, #14]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	08014168 	.word	0x08014168
 800b7b0:	08014874 	.word	0x08014874
 800b7b4:	080141ac 	.word	0x080141ac

0800b7b8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d119      	bne.n	800b800 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b7cc:	4b10      	ldr	r3, [pc, #64]	; (800b810 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b7ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b7d2:	4910      	ldr	r1, [pc, #64]	; (800b814 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b7d4:	4810      	ldr	r0, [pc, #64]	; (800b818 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b7d6:	f007 fb01 	bl	8012ddc <iprintf>

  while (pcb != NULL) {
 800b7da:	e011      	b.n	800b800 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d108      	bne.n	800b7fa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f7fe ffc6 	bl	800a780 <tcp_abort>
      pcb = next;
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	e002      	b.n	800b800 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1ea      	bne.n	800b7dc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b806:	bf00      	nop
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	08014168 	.word	0x08014168
 800b814:	0801489c 	.word	0x0801489c
 800b818:	080141ac 	.word	0x080141ac

0800b81c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d02a      	beq.n	800b882 <tcp_netif_ip_addr_changed+0x66>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d026      	beq.n	800b882 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b834:	4b15      	ldr	r3, [pc, #84]	; (800b88c <tcp_netif_ip_addr_changed+0x70>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4619      	mov	r1, r3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7ff ffbc 	bl	800b7b8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b840:	4b13      	ldr	r3, [pc, #76]	; (800b890 <tcp_netif_ip_addr_changed+0x74>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f7ff ffb6 	bl	800b7b8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d017      	beq.n	800b882 <tcp_netif_ip_addr_changed+0x66>
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d013      	beq.n	800b882 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b85a:	4b0e      	ldr	r3, [pc, #56]	; (800b894 <tcp_netif_ip_addr_changed+0x78>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	e00c      	b.n	800b87c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d103      	bne.n	800b876 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	60fb      	str	r3, [r7, #12]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1ef      	bne.n	800b862 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20011bf8 	.word	0x20011bf8
 800b890:	20011c04 	.word	0x20011c04
 800b894:	20011c00 	.word	0x20011c00

0800b898 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d007      	beq.n	800b8b8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff fc3d 	bl	800b12c <tcp_segs_free>
    pcb->ooseq = NULL;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b8b8:	bf00      	nop
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b8c0:	b590      	push	{r4, r7, lr}
 800b8c2:	b08d      	sub	sp, #52	; 0x34
 800b8c4:	af04      	add	r7, sp, #16
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d105      	bne.n	800b8dc <tcp_input+0x1c>
 800b8d0:	4b9b      	ldr	r3, [pc, #620]	; (800bb40 <tcp_input+0x280>)
 800b8d2:	2283      	movs	r2, #131	; 0x83
 800b8d4:	499b      	ldr	r1, [pc, #620]	; (800bb44 <tcp_input+0x284>)
 800b8d6:	489c      	ldr	r0, [pc, #624]	; (800bb48 <tcp_input+0x288>)
 800b8d8:	f007 fa80 	bl	8012ddc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	4a9a      	ldr	r2, [pc, #616]	; (800bb4c <tcp_input+0x28c>)
 800b8e2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	895b      	ldrh	r3, [r3, #10]
 800b8e8:	2b13      	cmp	r3, #19
 800b8ea:	f240 83c4 	bls.w	800c076 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b8ee:	4b98      	ldr	r3, [pc, #608]	; (800bb50 <tcp_input+0x290>)
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	4a97      	ldr	r2, [pc, #604]	; (800bb50 <tcp_input+0x290>)
 800b8f4:	6812      	ldr	r2, [r2, #0]
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f005 fc43 	bl	8011184 <ip4_addr_isbroadcast_u32>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	f040 83ba 	bne.w	800c07a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b906:	4b92      	ldr	r3, [pc, #584]	; (800bb50 <tcp_input+0x290>)
 800b908:	695b      	ldr	r3, [r3, #20]
 800b90a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b90e:	2be0      	cmp	r3, #224	; 0xe0
 800b910:	f000 83b3 	beq.w	800c07a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b914:	4b8d      	ldr	r3, [pc, #564]	; (800bb4c <tcp_input+0x28c>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	899b      	ldrh	r3, [r3, #12]
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fc fdef 	bl	8008500 <lwip_htons>
 800b922:	4603      	mov	r3, r0
 800b924:	0b1b      	lsrs	r3, r3, #12
 800b926:	b29b      	uxth	r3, r3
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b92e:	7cbb      	ldrb	r3, [r7, #18]
 800b930:	2b13      	cmp	r3, #19
 800b932:	f240 83a4 	bls.w	800c07e <tcp_input+0x7be>
 800b936:	7cbb      	ldrb	r3, [r7, #18]
 800b938:	b29a      	uxth	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	891b      	ldrh	r3, [r3, #8]
 800b93e:	429a      	cmp	r2, r3
 800b940:	f200 839d 	bhi.w	800c07e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b944:	7cbb      	ldrb	r3, [r7, #18]
 800b946:	b29b      	uxth	r3, r3
 800b948:	3b14      	subs	r3, #20
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	4b81      	ldr	r3, [pc, #516]	; (800bb54 <tcp_input+0x294>)
 800b94e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b950:	4b81      	ldr	r3, [pc, #516]	; (800bb58 <tcp_input+0x298>)
 800b952:	2200      	movs	r2, #0
 800b954:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	895a      	ldrh	r2, [r3, #10]
 800b95a:	7cbb      	ldrb	r3, [r7, #18]
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	429a      	cmp	r2, r3
 800b960:	d309      	bcc.n	800b976 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b962:	4b7c      	ldr	r3, [pc, #496]	; (800bb54 <tcp_input+0x294>)
 800b964:	881a      	ldrh	r2, [r3, #0]
 800b966:	4b7d      	ldr	r3, [pc, #500]	; (800bb5c <tcp_input+0x29c>)
 800b968:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b96a:	7cbb      	ldrb	r3, [r7, #18]
 800b96c:	4619      	mov	r1, r3
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7fe f8ec 	bl	8009b4c <pbuf_remove_header>
 800b974:	e04e      	b.n	800ba14 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d105      	bne.n	800b98a <tcp_input+0xca>
 800b97e:	4b70      	ldr	r3, [pc, #448]	; (800bb40 <tcp_input+0x280>)
 800b980:	22c2      	movs	r2, #194	; 0xc2
 800b982:	4977      	ldr	r1, [pc, #476]	; (800bb60 <tcp_input+0x2a0>)
 800b984:	4870      	ldr	r0, [pc, #448]	; (800bb48 <tcp_input+0x288>)
 800b986:	f007 fa29 	bl	8012ddc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b98a:	2114      	movs	r1, #20
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7fe f8dd 	bl	8009b4c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	895a      	ldrh	r2, [r3, #10]
 800b996:	4b71      	ldr	r3, [pc, #452]	; (800bb5c <tcp_input+0x29c>)
 800b998:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b99a:	4b6e      	ldr	r3, [pc, #440]	; (800bb54 <tcp_input+0x294>)
 800b99c:	881a      	ldrh	r2, [r3, #0]
 800b99e:	4b6f      	ldr	r3, [pc, #444]	; (800bb5c <tcp_input+0x29c>)
 800b9a0:	881b      	ldrh	r3, [r3, #0]
 800b9a2:	1ad3      	subs	r3, r2, r3
 800b9a4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b9a6:	4b6d      	ldr	r3, [pc, #436]	; (800bb5c <tcp_input+0x29c>)
 800b9a8:	881b      	ldrh	r3, [r3, #0]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7fe f8cd 	bl	8009b4c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	895b      	ldrh	r3, [r3, #10]
 800b9b8:	8a3a      	ldrh	r2, [r7, #16]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	f200 8361 	bhi.w	800c082 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	4a64      	ldr	r2, [pc, #400]	; (800bb58 <tcp_input+0x298>)
 800b9c8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	8a3a      	ldrh	r2, [r7, #16]
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe f8ba 	bl	8009b4c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	891a      	ldrh	r2, [r3, #8]
 800b9dc:	8a3b      	ldrh	r3, [r7, #16]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	895b      	ldrh	r3, [r3, #10]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <tcp_input+0x13a>
 800b9ee:	4b54      	ldr	r3, [pc, #336]	; (800bb40 <tcp_input+0x280>)
 800b9f0:	22df      	movs	r2, #223	; 0xdf
 800b9f2:	495c      	ldr	r1, [pc, #368]	; (800bb64 <tcp_input+0x2a4>)
 800b9f4:	4854      	ldr	r0, [pc, #336]	; (800bb48 <tcp_input+0x288>)
 800b9f6:	f007 f9f1 	bl	8012ddc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	891a      	ldrh	r2, [r3, #8]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	891b      	ldrh	r3, [r3, #8]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d005      	beq.n	800ba14 <tcp_input+0x154>
 800ba08:	4b4d      	ldr	r3, [pc, #308]	; (800bb40 <tcp_input+0x280>)
 800ba0a:	22e0      	movs	r2, #224	; 0xe0
 800ba0c:	4956      	ldr	r1, [pc, #344]	; (800bb68 <tcp_input+0x2a8>)
 800ba0e:	484e      	ldr	r0, [pc, #312]	; (800bb48 <tcp_input+0x288>)
 800ba10:	f007 f9e4 	bl	8012ddc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ba14:	4b4d      	ldr	r3, [pc, #308]	; (800bb4c <tcp_input+0x28c>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	4a4b      	ldr	r2, [pc, #300]	; (800bb4c <tcp_input+0x28c>)
 800ba1e:	6814      	ldr	r4, [r2, #0]
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fc fd6d 	bl	8008500 <lwip_htons>
 800ba26:	4603      	mov	r3, r0
 800ba28:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ba2a:	4b48      	ldr	r3, [pc, #288]	; (800bb4c <tcp_input+0x28c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	885b      	ldrh	r3, [r3, #2]
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	4a46      	ldr	r2, [pc, #280]	; (800bb4c <tcp_input+0x28c>)
 800ba34:	6814      	ldr	r4, [r2, #0]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fc fd62 	bl	8008500 <lwip_htons>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ba40:	4b42      	ldr	r3, [pc, #264]	; (800bb4c <tcp_input+0x28c>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	4a41      	ldr	r2, [pc, #260]	; (800bb4c <tcp_input+0x28c>)
 800ba48:	6814      	ldr	r4, [r2, #0]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7fc fd6d 	bl	800852a <lwip_htonl>
 800ba50:	4603      	mov	r3, r0
 800ba52:	6063      	str	r3, [r4, #4]
 800ba54:	6863      	ldr	r3, [r4, #4]
 800ba56:	4a45      	ldr	r2, [pc, #276]	; (800bb6c <tcp_input+0x2ac>)
 800ba58:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ba5a:	4b3c      	ldr	r3, [pc, #240]	; (800bb4c <tcp_input+0x28c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	4a3a      	ldr	r2, [pc, #232]	; (800bb4c <tcp_input+0x28c>)
 800ba62:	6814      	ldr	r4, [r2, #0]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fc fd60 	bl	800852a <lwip_htonl>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	60a3      	str	r3, [r4, #8]
 800ba6e:	68a3      	ldr	r3, [r4, #8]
 800ba70:	4a3f      	ldr	r2, [pc, #252]	; (800bb70 <tcp_input+0x2b0>)
 800ba72:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ba74:	4b35      	ldr	r3, [pc, #212]	; (800bb4c <tcp_input+0x28c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	89db      	ldrh	r3, [r3, #14]
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	4a33      	ldr	r2, [pc, #204]	; (800bb4c <tcp_input+0x28c>)
 800ba7e:	6814      	ldr	r4, [r2, #0]
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7fc fd3d 	bl	8008500 <lwip_htons>
 800ba86:	4603      	mov	r3, r0
 800ba88:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ba8a:	4b30      	ldr	r3, [pc, #192]	; (800bb4c <tcp_input+0x28c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	899b      	ldrh	r3, [r3, #12]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fc fd34 	bl	8008500 <lwip_htons>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	4b34      	ldr	r3, [pc, #208]	; (800bb74 <tcp_input+0x2b4>)
 800baa4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	891a      	ldrh	r2, [r3, #8]
 800baaa:	4b33      	ldr	r3, [pc, #204]	; (800bb78 <tcp_input+0x2b8>)
 800baac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800baae:	4b31      	ldr	r3, [pc, #196]	; (800bb74 <tcp_input+0x2b4>)
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	f003 0303 	and.w	r3, r3, #3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00c      	beq.n	800bad4 <tcp_input+0x214>
    tcplen++;
 800baba:	4b2f      	ldr	r3, [pc, #188]	; (800bb78 <tcp_input+0x2b8>)
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	3301      	adds	r3, #1
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	4b2d      	ldr	r3, [pc, #180]	; (800bb78 <tcp_input+0x2b8>)
 800bac4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	891a      	ldrh	r2, [r3, #8]
 800baca:	4b2b      	ldr	r3, [pc, #172]	; (800bb78 <tcp_input+0x2b8>)
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	f200 82d9 	bhi.w	800c086 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bad8:	4b28      	ldr	r3, [pc, #160]	; (800bb7c <tcp_input+0x2bc>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	61fb      	str	r3, [r7, #28]
 800bade:	e09d      	b.n	800bc1c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	7d1b      	ldrb	r3, [r3, #20]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d105      	bne.n	800baf4 <tcp_input+0x234>
 800bae8:	4b15      	ldr	r3, [pc, #84]	; (800bb40 <tcp_input+0x280>)
 800baea:	22fb      	movs	r2, #251	; 0xfb
 800baec:	4924      	ldr	r1, [pc, #144]	; (800bb80 <tcp_input+0x2c0>)
 800baee:	4816      	ldr	r0, [pc, #88]	; (800bb48 <tcp_input+0x288>)
 800baf0:	f007 f974 	bl	8012ddc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	7d1b      	ldrb	r3, [r3, #20]
 800baf8:	2b0a      	cmp	r3, #10
 800bafa:	d105      	bne.n	800bb08 <tcp_input+0x248>
 800bafc:	4b10      	ldr	r3, [pc, #64]	; (800bb40 <tcp_input+0x280>)
 800bafe:	22fc      	movs	r2, #252	; 0xfc
 800bb00:	4920      	ldr	r1, [pc, #128]	; (800bb84 <tcp_input+0x2c4>)
 800bb02:	4811      	ldr	r0, [pc, #68]	; (800bb48 <tcp_input+0x288>)
 800bb04:	f007 f96a 	bl	8012ddc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	7d1b      	ldrb	r3, [r3, #20]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d105      	bne.n	800bb1c <tcp_input+0x25c>
 800bb10:	4b0b      	ldr	r3, [pc, #44]	; (800bb40 <tcp_input+0x280>)
 800bb12:	22fd      	movs	r2, #253	; 0xfd
 800bb14:	491c      	ldr	r1, [pc, #112]	; (800bb88 <tcp_input+0x2c8>)
 800bb16:	480c      	ldr	r0, [pc, #48]	; (800bb48 <tcp_input+0x288>)
 800bb18:	f007 f960 	bl	8012ddc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	7a1b      	ldrb	r3, [r3, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d033      	beq.n	800bb8c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	7a1a      	ldrb	r2, [r3, #8]
 800bb28:	4b09      	ldr	r3, [pc, #36]	; (800bb50 <tcp_input+0x290>)
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb30:	3301      	adds	r3, #1
 800bb32:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d029      	beq.n	800bb8c <tcp_input+0x2cc>
      prev = pcb;
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	61bb      	str	r3, [r7, #24]
      continue;
 800bb3c:	e06b      	b.n	800bc16 <tcp_input+0x356>
 800bb3e:	bf00      	nop
 800bb40:	080148d0 	.word	0x080148d0
 800bb44:	08014904 	.word	0x08014904
 800bb48:	0801491c 	.word	0x0801491c
 800bb4c:	2000b11c 	.word	0x2000b11c
 800bb50:	2000e4e4 	.word	0x2000e4e4
 800bb54:	2000b120 	.word	0x2000b120
 800bb58:	2000b124 	.word	0x2000b124
 800bb5c:	2000b122 	.word	0x2000b122
 800bb60:	08014944 	.word	0x08014944
 800bb64:	08014954 	.word	0x08014954
 800bb68:	08014960 	.word	0x08014960
 800bb6c:	2000b12c 	.word	0x2000b12c
 800bb70:	2000b130 	.word	0x2000b130
 800bb74:	2000b138 	.word	0x2000b138
 800bb78:	2000b136 	.word	0x2000b136
 800bb7c:	20011bf8 	.word	0x20011bf8
 800bb80:	08014980 	.word	0x08014980
 800bb84:	080149a8 	.word	0x080149a8
 800bb88:	080149d4 	.word	0x080149d4
    }

    if (pcb->remote_port == tcphdr->src &&
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	8b1a      	ldrh	r2, [r3, #24]
 800bb90:	4b94      	ldr	r3, [pc, #592]	; (800bde4 <tcp_input+0x524>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d13a      	bne.n	800bc12 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	8ada      	ldrh	r2, [r3, #22]
 800bba0:	4b90      	ldr	r3, [pc, #576]	; (800bde4 <tcp_input+0x524>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	885b      	ldrh	r3, [r3, #2]
 800bba6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d132      	bne.n	800bc12 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	4b8d      	ldr	r3, [pc, #564]	; (800bde8 <tcp_input+0x528>)
 800bbb2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d12c      	bne.n	800bc12 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bbb8:	69fb      	ldr	r3, [r7, #28]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	4b8a      	ldr	r3, [pc, #552]	; (800bde8 <tcp_input+0x528>)
 800bbbe:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d126      	bne.n	800bc12 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bbc4:	69fb      	ldr	r3, [r7, #28]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	69fa      	ldr	r2, [r7, #28]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d106      	bne.n	800bbdc <tcp_input+0x31c>
 800bbce:	4b87      	ldr	r3, [pc, #540]	; (800bdec <tcp_input+0x52c>)
 800bbd0:	f240 120d 	movw	r2, #269	; 0x10d
 800bbd4:	4986      	ldr	r1, [pc, #536]	; (800bdf0 <tcp_input+0x530>)
 800bbd6:	4887      	ldr	r0, [pc, #540]	; (800bdf4 <tcp_input+0x534>)
 800bbd8:	f007 f900 	bl	8012ddc <iprintf>
      if (prev != NULL) {
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00a      	beq.n	800bbf8 <tcp_input+0x338>
        prev->next = pcb->next;
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	68da      	ldr	r2, [r3, #12]
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bbea:	4b83      	ldr	r3, [pc, #524]	; (800bdf8 <tcp_input+0x538>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bbf2:	4a81      	ldr	r2, [pc, #516]	; (800bdf8 <tcp_input+0x538>)
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bbf8:	69fb      	ldr	r3, [r7, #28]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	69fa      	ldr	r2, [r7, #28]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d111      	bne.n	800bc26 <tcp_input+0x366>
 800bc02:	4b7a      	ldr	r3, [pc, #488]	; (800bdec <tcp_input+0x52c>)
 800bc04:	f240 1215 	movw	r2, #277	; 0x115
 800bc08:	497c      	ldr	r1, [pc, #496]	; (800bdfc <tcp_input+0x53c>)
 800bc0a:	487a      	ldr	r0, [pc, #488]	; (800bdf4 <tcp_input+0x534>)
 800bc0c:	f007 f8e6 	bl	8012ddc <iprintf>
      break;
 800bc10:	e009      	b.n	800bc26 <tcp_input+0x366>
    }
    prev = pcb;
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	61fb      	str	r3, [r7, #28]
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f47f af5e 	bne.w	800bae0 <tcp_input+0x220>
 800bc24:	e000      	b.n	800bc28 <tcp_input+0x368>
      break;
 800bc26:	bf00      	nop
  }

  if (pcb == NULL) {
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f040 8095 	bne.w	800bd5a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc30:	4b73      	ldr	r3, [pc, #460]	; (800be00 <tcp_input+0x540>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	61fb      	str	r3, [r7, #28]
 800bc36:	e03f      	b.n	800bcb8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	7d1b      	ldrb	r3, [r3, #20]
 800bc3c:	2b0a      	cmp	r3, #10
 800bc3e:	d006      	beq.n	800bc4e <tcp_input+0x38e>
 800bc40:	4b6a      	ldr	r3, [pc, #424]	; (800bdec <tcp_input+0x52c>)
 800bc42:	f240 121f 	movw	r2, #287	; 0x11f
 800bc46:	496f      	ldr	r1, [pc, #444]	; (800be04 <tcp_input+0x544>)
 800bc48:	486a      	ldr	r0, [pc, #424]	; (800bdf4 <tcp_input+0x534>)
 800bc4a:	f007 f8c7 	bl	8012ddc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	7a1b      	ldrb	r3, [r3, #8]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d009      	beq.n	800bc6a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	7a1a      	ldrb	r2, [r3, #8]
 800bc5a:	4b63      	ldr	r3, [pc, #396]	; (800bde8 <tcp_input+0x528>)
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc62:	3301      	adds	r3, #1
 800bc64:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d122      	bne.n	800bcb0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	8b1a      	ldrh	r2, [r3, #24]
 800bc6e:	4b5d      	ldr	r3, [pc, #372]	; (800bde4 <tcp_input+0x524>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d11b      	bne.n	800bcb2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	8ada      	ldrh	r2, [r3, #22]
 800bc7e:	4b59      	ldr	r3, [pc, #356]	; (800bde4 <tcp_input+0x524>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	885b      	ldrh	r3, [r3, #2]
 800bc84:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d113      	bne.n	800bcb2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	4b56      	ldr	r3, [pc, #344]	; (800bde8 <tcp_input+0x528>)
 800bc90:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d10d      	bne.n	800bcb2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	4b53      	ldr	r3, [pc, #332]	; (800bde8 <tcp_input+0x528>)
 800bc9c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d107      	bne.n	800bcb2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bca2:	69f8      	ldr	r0, [r7, #28]
 800bca4:	f000 fb54 	bl	800c350 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7fd ffd5 	bl	8009c58 <pbuf_free>
        return;
 800bcae:	e1f0      	b.n	800c092 <tcp_input+0x7d2>
        continue;
 800bcb0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	61fb      	str	r3, [r7, #28]
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1bc      	bne.n	800bc38 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bcc2:	4b51      	ldr	r3, [pc, #324]	; (800be08 <tcp_input+0x548>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	617b      	str	r3, [r7, #20]
 800bcc8:	e02a      	b.n	800bd20 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	7a1b      	ldrb	r3, [r3, #8]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00c      	beq.n	800bcec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	7a1a      	ldrb	r2, [r3, #8]
 800bcd6:	4b44      	ldr	r3, [pc, #272]	; (800bde8 <tcp_input+0x528>)
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bcde:	3301      	adds	r3, #1
 800bce0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d002      	beq.n	800bcec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	61bb      	str	r3, [r7, #24]
        continue;
 800bcea:	e016      	b.n	800bd1a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	8ada      	ldrh	r2, [r3, #22]
 800bcf0:	4b3c      	ldr	r3, [pc, #240]	; (800bde4 <tcp_input+0x524>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	885b      	ldrh	r3, [r3, #2]
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d10c      	bne.n	800bd16 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	4b39      	ldr	r3, [pc, #228]	; (800bde8 <tcp_input+0x528>)
 800bd02:	695b      	ldr	r3, [r3, #20]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d00f      	beq.n	800bd28 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00d      	beq.n	800bd2a <tcp_input+0x46a>
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d009      	beq.n	800bd2a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	617b      	str	r3, [r7, #20]
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1d1      	bne.n	800bcca <tcp_input+0x40a>
 800bd26:	e000      	b.n	800bd2a <tcp_input+0x46a>
            break;
 800bd28:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d014      	beq.n	800bd5a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d00a      	beq.n	800bd4c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	68da      	ldr	r2, [r3, #12]
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bd3e:	4b32      	ldr	r3, [pc, #200]	; (800be08 <tcp_input+0x548>)
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bd46:	4a30      	ldr	r2, [pc, #192]	; (800be08 <tcp_input+0x548>)
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bd4c:	6978      	ldr	r0, [r7, #20]
 800bd4e:	f000 fa01 	bl	800c154 <tcp_listen_input>
      }
      pbuf_free(p);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f7fd ff80 	bl	8009c58 <pbuf_free>
      return;
 800bd58:	e19b      	b.n	800c092 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f000 8160 	beq.w	800c022 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bd62:	4b2a      	ldr	r3, [pc, #168]	; (800be0c <tcp_input+0x54c>)
 800bd64:	2200      	movs	r2, #0
 800bd66:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	891a      	ldrh	r2, [r3, #8]
 800bd6c:	4b27      	ldr	r3, [pc, #156]	; (800be0c <tcp_input+0x54c>)
 800bd6e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bd70:	4a26      	ldr	r2, [pc, #152]	; (800be0c <tcp_input+0x54c>)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bd76:	4b1b      	ldr	r3, [pc, #108]	; (800bde4 <tcp_input+0x524>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a24      	ldr	r2, [pc, #144]	; (800be0c <tcp_input+0x54c>)
 800bd7c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bd7e:	4b24      	ldr	r3, [pc, #144]	; (800be10 <tcp_input+0x550>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bd84:	4b23      	ldr	r3, [pc, #140]	; (800be14 <tcp_input+0x554>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bd8a:	4b23      	ldr	r3, [pc, #140]	; (800be18 <tcp_input+0x558>)
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bd90:	4b22      	ldr	r3, [pc, #136]	; (800be1c <tcp_input+0x55c>)
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	f003 0308 	and.w	r3, r3, #8
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d006      	beq.n	800bdaa <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	7b5b      	ldrb	r3, [r3, #13]
 800bda0:	f043 0301 	orr.w	r3, r3, #1
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d038      	beq.n	800be24 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bdb2:	69f8      	ldr	r0, [r7, #28]
 800bdb4:	f7ff f93e 	bl	800b034 <tcp_process_refused_data>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f113 0f0d 	cmn.w	r3, #13
 800bdbe:	d007      	beq.n	800bdd0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d02d      	beq.n	800be24 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bdc8:	4b15      	ldr	r3, [pc, #84]	; (800be20 <tcp_input+0x560>)
 800bdca:	881b      	ldrh	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d029      	beq.n	800be24 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f040 8104 	bne.w	800bfe2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bdda:	69f8      	ldr	r0, [r7, #28]
 800bddc:	f003 f9be 	bl	800f15c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bde0:	e0ff      	b.n	800bfe2 <tcp_input+0x722>
 800bde2:	bf00      	nop
 800bde4:	2000b11c 	.word	0x2000b11c
 800bde8:	2000e4e4 	.word	0x2000e4e4
 800bdec:	080148d0 	.word	0x080148d0
 800bdf0:	080149fc 	.word	0x080149fc
 800bdf4:	0801491c 	.word	0x0801491c
 800bdf8:	20011bf8 	.word	0x20011bf8
 800bdfc:	08014a28 	.word	0x08014a28
 800be00:	20011c08 	.word	0x20011c08
 800be04:	08014a54 	.word	0x08014a54
 800be08:	20011c00 	.word	0x20011c00
 800be0c:	2000b10c 	.word	0x2000b10c
 800be10:	2000b13c 	.word	0x2000b13c
 800be14:	2000b139 	.word	0x2000b139
 800be18:	2000b134 	.word	0x2000b134
 800be1c:	2000b138 	.word	0x2000b138
 800be20:	2000b136 	.word	0x2000b136
      }
    }
    tcp_input_pcb = pcb;
 800be24:	4a9c      	ldr	r2, [pc, #624]	; (800c098 <tcp_input+0x7d8>)
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800be2a:	69f8      	ldr	r0, [r7, #28]
 800be2c:	f000 fb0a 	bl	800c444 <tcp_process>
 800be30:	4603      	mov	r3, r0
 800be32:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800be34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800be38:	f113 0f0d 	cmn.w	r3, #13
 800be3c:	f000 80d3 	beq.w	800bfe6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800be40:	4b96      	ldr	r3, [pc, #600]	; (800c09c <tcp_input+0x7dc>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	f003 0308 	and.w	r3, r3, #8
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d015      	beq.n	800be78 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be52:	2b00      	cmp	r3, #0
 800be54:	d008      	beq.n	800be68 <tcp_input+0x5a8>
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be5c:	69fa      	ldr	r2, [r7, #28]
 800be5e:	6912      	ldr	r2, [r2, #16]
 800be60:	f06f 010d 	mvn.w	r1, #13
 800be64:	4610      	mov	r0, r2
 800be66:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800be68:	69f9      	ldr	r1, [r7, #28]
 800be6a:	488d      	ldr	r0, [pc, #564]	; (800c0a0 <tcp_input+0x7e0>)
 800be6c:	f7ff fbb0 	bl	800b5d0 <tcp_pcb_remove>
        tcp_free(pcb);
 800be70:	69f8      	ldr	r0, [r7, #28]
 800be72:	f7fe f99d 	bl	800a1b0 <tcp_free>
 800be76:	e0c1      	b.n	800bffc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800be7c:	4b89      	ldr	r3, [pc, #548]	; (800c0a4 <tcp_input+0x7e4>)
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d01d      	beq.n	800bec0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800be84:	4b87      	ldr	r3, [pc, #540]	; (800c0a4 <tcp_input+0x7e4>)
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00a      	beq.n	800beaa <tcp_input+0x5ea>
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be9a:	69fa      	ldr	r2, [r7, #28]
 800be9c:	6910      	ldr	r0, [r2, #16]
 800be9e:	89fa      	ldrh	r2, [r7, #14]
 800bea0:	69f9      	ldr	r1, [r7, #28]
 800bea2:	4798      	blx	r3
 800bea4:	4603      	mov	r3, r0
 800bea6:	74fb      	strb	r3, [r7, #19]
 800bea8:	e001      	b.n	800beae <tcp_input+0x5ee>
 800beaa:	2300      	movs	r3, #0
 800beac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800beae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800beb2:	f113 0f0d 	cmn.w	r3, #13
 800beb6:	f000 8098 	beq.w	800bfea <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800beba:	4b7a      	ldr	r3, [pc, #488]	; (800c0a4 <tcp_input+0x7e4>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bec0:	69f8      	ldr	r0, [r7, #28]
 800bec2:	f000 f907 	bl	800c0d4 <tcp_input_delayed_close>
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f040 8090 	bne.w	800bfee <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bece:	4b76      	ldr	r3, [pc, #472]	; (800c0a8 <tcp_input+0x7e8>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d041      	beq.n	800bf5a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d006      	beq.n	800beec <tcp_input+0x62c>
 800bede:	4b73      	ldr	r3, [pc, #460]	; (800c0ac <tcp_input+0x7ec>)
 800bee0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bee4:	4972      	ldr	r1, [pc, #456]	; (800c0b0 <tcp_input+0x7f0>)
 800bee6:	4873      	ldr	r0, [pc, #460]	; (800c0b4 <tcp_input+0x7f4>)
 800bee8:	f006 ff78 	bl	8012ddc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	8b5b      	ldrh	r3, [r3, #26]
 800bef0:	f003 0310 	and.w	r3, r3, #16
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d008      	beq.n	800bf0a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bef8:	4b6b      	ldr	r3, [pc, #428]	; (800c0a8 <tcp_input+0x7e8>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4618      	mov	r0, r3
 800befe:	f7fd feab 	bl	8009c58 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bf02:	69f8      	ldr	r0, [r7, #28]
 800bf04:	f7fe fc3c 	bl	800a780 <tcp_abort>
            goto aborted;
 800bf08:	e078      	b.n	800bffc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00c      	beq.n	800bf2e <tcp_input+0x66e>
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	6918      	ldr	r0, [r3, #16]
 800bf1e:	4b62      	ldr	r3, [pc, #392]	; (800c0a8 <tcp_input+0x7e8>)
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	2300      	movs	r3, #0
 800bf24:	69f9      	ldr	r1, [r7, #28]
 800bf26:	47a0      	blx	r4
 800bf28:	4603      	mov	r3, r0
 800bf2a:	74fb      	strb	r3, [r7, #19]
 800bf2c:	e008      	b.n	800bf40 <tcp_input+0x680>
 800bf2e:	4b5e      	ldr	r3, [pc, #376]	; (800c0a8 <tcp_input+0x7e8>)
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	2300      	movs	r3, #0
 800bf34:	69f9      	ldr	r1, [r7, #28]
 800bf36:	2000      	movs	r0, #0
 800bf38:	f7ff f952 	bl	800b1e0 <tcp_recv_null>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bf40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf44:	f113 0f0d 	cmn.w	r3, #13
 800bf48:	d053      	beq.n	800bff2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bf4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d003      	beq.n	800bf5a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bf52:	4b55      	ldr	r3, [pc, #340]	; (800c0a8 <tcp_input+0x7e8>)
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bf5a:	4b50      	ldr	r3, [pc, #320]	; (800c09c <tcp_input+0x7dc>)
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	f003 0320 	and.w	r3, r3, #32
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d030      	beq.n	800bfc8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d009      	beq.n	800bf82 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf72:	7b5a      	ldrb	r2, [r3, #13]
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf78:	f042 0220 	orr.w	r2, r2, #32
 800bf7c:	b2d2      	uxtb	r2, r2
 800bf7e:	735a      	strb	r2, [r3, #13]
 800bf80:	e022      	b.n	800bfc8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf86:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf8a:	d005      	beq.n	800bf98 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf90:	3301      	adds	r3, #1
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00b      	beq.n	800bfba <tcp_input+0x6fa>
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	6918      	ldr	r0, [r3, #16]
 800bfac:	2300      	movs	r3, #0
 800bfae:	2200      	movs	r2, #0
 800bfb0:	69f9      	ldr	r1, [r7, #28]
 800bfb2:	47a0      	blx	r4
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	74fb      	strb	r3, [r7, #19]
 800bfb8:	e001      	b.n	800bfbe <tcp_input+0x6fe>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bfbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfc2:	f113 0f0d 	cmn.w	r3, #13
 800bfc6:	d016      	beq.n	800bff6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bfc8:	4b33      	ldr	r3, [pc, #204]	; (800c098 <tcp_input+0x7d8>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bfce:	69f8      	ldr	r0, [r7, #28]
 800bfd0:	f000 f880 	bl	800c0d4 <tcp_input_delayed_close>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10f      	bne.n	800bffa <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bfda:	69f8      	ldr	r0, [r7, #28]
 800bfdc:	f002 fab8 	bl	800e550 <tcp_output>
 800bfe0:	e00c      	b.n	800bffc <tcp_input+0x73c>
        goto aborted;
 800bfe2:	bf00      	nop
 800bfe4:	e00a      	b.n	800bffc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bfe6:	bf00      	nop
 800bfe8:	e008      	b.n	800bffc <tcp_input+0x73c>
              goto aborted;
 800bfea:	bf00      	nop
 800bfec:	e006      	b.n	800bffc <tcp_input+0x73c>
          goto aborted;
 800bfee:	bf00      	nop
 800bff0:	e004      	b.n	800bffc <tcp_input+0x73c>
            goto aborted;
 800bff2:	bf00      	nop
 800bff4:	e002      	b.n	800bffc <tcp_input+0x73c>
              goto aborted;
 800bff6:	bf00      	nop
 800bff8:	e000      	b.n	800bffc <tcp_input+0x73c>
          goto aborted;
 800bffa:	bf00      	nop
    tcp_input_pcb = NULL;
 800bffc:	4b26      	ldr	r3, [pc, #152]	; (800c098 <tcp_input+0x7d8>)
 800bffe:	2200      	movs	r2, #0
 800c000:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c002:	4b29      	ldr	r3, [pc, #164]	; (800c0a8 <tcp_input+0x7e8>)
 800c004:	2200      	movs	r2, #0
 800c006:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c008:	4b2b      	ldr	r3, [pc, #172]	; (800c0b8 <tcp_input+0x7f8>)
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d03f      	beq.n	800c090 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800c010:	4b29      	ldr	r3, [pc, #164]	; (800c0b8 <tcp_input+0x7f8>)
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	4618      	mov	r0, r3
 800c016:	f7fd fe1f 	bl	8009c58 <pbuf_free>
      inseg.p = NULL;
 800c01a:	4b27      	ldr	r3, [pc, #156]	; (800c0b8 <tcp_input+0x7f8>)
 800c01c:	2200      	movs	r2, #0
 800c01e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c020:	e036      	b.n	800c090 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c022:	4b26      	ldr	r3, [pc, #152]	; (800c0bc <tcp_input+0x7fc>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	899b      	ldrh	r3, [r3, #12]
 800c028:	b29b      	uxth	r3, r3
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fc fa68 	bl	8008500 <lwip_htons>
 800c030:	4603      	mov	r3, r0
 800c032:	b2db      	uxtb	r3, r3
 800c034:	f003 0304 	and.w	r3, r3, #4
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d118      	bne.n	800c06e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c03c:	4b20      	ldr	r3, [pc, #128]	; (800c0c0 <tcp_input+0x800>)
 800c03e:	6819      	ldr	r1, [r3, #0]
 800c040:	4b20      	ldr	r3, [pc, #128]	; (800c0c4 <tcp_input+0x804>)
 800c042:	881b      	ldrh	r3, [r3, #0]
 800c044:	461a      	mov	r2, r3
 800c046:	4b20      	ldr	r3, [pc, #128]	; (800c0c8 <tcp_input+0x808>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c04c:	4b1b      	ldr	r3, [pc, #108]	; (800c0bc <tcp_input+0x7fc>)
 800c04e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c050:	885b      	ldrh	r3, [r3, #2]
 800c052:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c054:	4a19      	ldr	r2, [pc, #100]	; (800c0bc <tcp_input+0x7fc>)
 800c056:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c058:	8812      	ldrh	r2, [r2, #0]
 800c05a:	b292      	uxth	r2, r2
 800c05c:	9202      	str	r2, [sp, #8]
 800c05e:	9301      	str	r3, [sp, #4]
 800c060:	4b1a      	ldr	r3, [pc, #104]	; (800c0cc <tcp_input+0x80c>)
 800c062:	9300      	str	r3, [sp, #0]
 800c064:	4b1a      	ldr	r3, [pc, #104]	; (800c0d0 <tcp_input+0x810>)
 800c066:	4602      	mov	r2, r0
 800c068:	2000      	movs	r0, #0
 800c06a:	f003 f825 	bl	800f0b8 <tcp_rst>
    pbuf_free(p);
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	f7fd fdf2 	bl	8009c58 <pbuf_free>
  return;
 800c074:	e00c      	b.n	800c090 <tcp_input+0x7d0>
    goto dropped;
 800c076:	bf00      	nop
 800c078:	e006      	b.n	800c088 <tcp_input+0x7c8>
    goto dropped;
 800c07a:	bf00      	nop
 800c07c:	e004      	b.n	800c088 <tcp_input+0x7c8>
    goto dropped;
 800c07e:	bf00      	nop
 800c080:	e002      	b.n	800c088 <tcp_input+0x7c8>
      goto dropped;
 800c082:	bf00      	nop
 800c084:	e000      	b.n	800c088 <tcp_input+0x7c8>
      goto dropped;
 800c086:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f7fd fde5 	bl	8009c58 <pbuf_free>
 800c08e:	e000      	b.n	800c092 <tcp_input+0x7d2>
  return;
 800c090:	bf00      	nop
}
 800c092:	3724      	adds	r7, #36	; 0x24
 800c094:	46bd      	mov	sp, r7
 800c096:	bd90      	pop	{r4, r7, pc}
 800c098:	20011c0c 	.word	0x20011c0c
 800c09c:	2000b139 	.word	0x2000b139
 800c0a0:	20011bf8 	.word	0x20011bf8
 800c0a4:	2000b134 	.word	0x2000b134
 800c0a8:	2000b13c 	.word	0x2000b13c
 800c0ac:	080148d0 	.word	0x080148d0
 800c0b0:	08014a84 	.word	0x08014a84
 800c0b4:	0801491c 	.word	0x0801491c
 800c0b8:	2000b10c 	.word	0x2000b10c
 800c0bc:	2000b11c 	.word	0x2000b11c
 800c0c0:	2000b130 	.word	0x2000b130
 800c0c4:	2000b136 	.word	0x2000b136
 800c0c8:	2000b12c 	.word	0x2000b12c
 800c0cc:	2000e4f4 	.word	0x2000e4f4
 800c0d0:	2000e4f8 	.word	0x2000e4f8

0800c0d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d106      	bne.n	800c0f0 <tcp_input_delayed_close+0x1c>
 800c0e2:	4b17      	ldr	r3, [pc, #92]	; (800c140 <tcp_input_delayed_close+0x6c>)
 800c0e4:	f240 225a 	movw	r2, #602	; 0x25a
 800c0e8:	4916      	ldr	r1, [pc, #88]	; (800c144 <tcp_input_delayed_close+0x70>)
 800c0ea:	4817      	ldr	r0, [pc, #92]	; (800c148 <tcp_input_delayed_close+0x74>)
 800c0ec:	f006 fe76 	bl	8012ddc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c0f0:	4b16      	ldr	r3, [pc, #88]	; (800c14c <tcp_input_delayed_close+0x78>)
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	f003 0310 	and.w	r3, r3, #16
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d01c      	beq.n	800c136 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	8b5b      	ldrh	r3, [r3, #26]
 800c100:	f003 0310 	and.w	r3, r3, #16
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10d      	bne.n	800c124 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d008      	beq.n	800c124 <tcp_input_delayed_close+0x50>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	6912      	ldr	r2, [r2, #16]
 800c11c:	f06f 010e 	mvn.w	r1, #14
 800c120:	4610      	mov	r0, r2
 800c122:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c124:	6879      	ldr	r1, [r7, #4]
 800c126:	480a      	ldr	r0, [pc, #40]	; (800c150 <tcp_input_delayed_close+0x7c>)
 800c128:	f7ff fa52 	bl	800b5d0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7fe f83f 	bl	800a1b0 <tcp_free>
    return 1;
 800c132:	2301      	movs	r3, #1
 800c134:	e000      	b.n	800c138 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c136:	2300      	movs	r3, #0
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3708      	adds	r7, #8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}
 800c140:	080148d0 	.word	0x080148d0
 800c144:	08014aa0 	.word	0x08014aa0
 800c148:	0801491c 	.word	0x0801491c
 800c14c:	2000b139 	.word	0x2000b139
 800c150:	20011bf8 	.word	0x20011bf8

0800c154 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c154:	b590      	push	{r4, r7, lr}
 800c156:	b08b      	sub	sp, #44	; 0x2c
 800c158:	af04      	add	r7, sp, #16
 800c15a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c15c:	4b6f      	ldr	r3, [pc, #444]	; (800c31c <tcp_listen_input+0x1c8>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	f040 80d2 	bne.w	800c30e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d106      	bne.n	800c17e <tcp_listen_input+0x2a>
 800c170:	4b6b      	ldr	r3, [pc, #428]	; (800c320 <tcp_listen_input+0x1cc>)
 800c172:	f240 2281 	movw	r2, #641	; 0x281
 800c176:	496b      	ldr	r1, [pc, #428]	; (800c324 <tcp_listen_input+0x1d0>)
 800c178:	486b      	ldr	r0, [pc, #428]	; (800c328 <tcp_listen_input+0x1d4>)
 800c17a:	f006 fe2f 	bl	8012ddc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c17e:	4b67      	ldr	r3, [pc, #412]	; (800c31c <tcp_listen_input+0x1c8>)
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	f003 0310 	and.w	r3, r3, #16
 800c186:	2b00      	cmp	r3, #0
 800c188:	d019      	beq.n	800c1be <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c18a:	4b68      	ldr	r3, [pc, #416]	; (800c32c <tcp_listen_input+0x1d8>)
 800c18c:	6819      	ldr	r1, [r3, #0]
 800c18e:	4b68      	ldr	r3, [pc, #416]	; (800c330 <tcp_listen_input+0x1dc>)
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	4b67      	ldr	r3, [pc, #412]	; (800c334 <tcp_listen_input+0x1e0>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c19a:	4b67      	ldr	r3, [pc, #412]	; (800c338 <tcp_listen_input+0x1e4>)
 800c19c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c19e:	885b      	ldrh	r3, [r3, #2]
 800c1a0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1a2:	4a65      	ldr	r2, [pc, #404]	; (800c338 <tcp_listen_input+0x1e4>)
 800c1a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1a6:	8812      	ldrh	r2, [r2, #0]
 800c1a8:	b292      	uxth	r2, r2
 800c1aa:	9202      	str	r2, [sp, #8]
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	4b63      	ldr	r3, [pc, #396]	; (800c33c <tcp_listen_input+0x1e8>)
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	4b63      	ldr	r3, [pc, #396]	; (800c340 <tcp_listen_input+0x1ec>)
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f002 ff7e 	bl	800f0b8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c1bc:	e0a9      	b.n	800c312 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c1be:	4b57      	ldr	r3, [pc, #348]	; (800c31c <tcp_listen_input+0x1c8>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	f003 0302 	and.w	r3, r3, #2
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 80a3 	beq.w	800c312 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	7d5b      	ldrb	r3, [r3, #21]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7ff f929 	bl	800b428 <tcp_alloc>
 800c1d6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d111      	bne.n	800c202 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00a      	beq.n	800c1fc <tcp_listen_input+0xa8>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	6910      	ldr	r0, [r2, #16]
 800c1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c1f2:	2100      	movs	r1, #0
 800c1f4:	4798      	blx	r3
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73bb      	strb	r3, [r7, #14]
      return;
 800c1fa:	e08b      	b.n	800c314 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c1fc:	23f0      	movs	r3, #240	; 0xf0
 800c1fe:	73bb      	strb	r3, [r7, #14]
      return;
 800c200:	e088      	b.n	800c314 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c202:	4b50      	ldr	r3, [pc, #320]	; (800c344 <tcp_listen_input+0x1f0>)
 800c204:	695a      	ldr	r2, [r3, #20]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c20a:	4b4e      	ldr	r3, [pc, #312]	; (800c344 <tcp_listen_input+0x1f0>)
 800c20c:	691a      	ldr	r2, [r3, #16]
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	8ada      	ldrh	r2, [r3, #22]
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c21a:	4b47      	ldr	r3, [pc, #284]	; (800c338 <tcp_listen_input+0x1e4>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	881b      	ldrh	r3, [r3, #0]
 800c220:	b29a      	uxth	r2, r3
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	2203      	movs	r2, #3
 800c22a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c22c:	4b41      	ldr	r3, [pc, #260]	; (800c334 <tcp_listen_input+0x1e0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	1c5a      	adds	r2, r3, #1
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c23e:	6978      	ldr	r0, [r7, #20]
 800c240:	f7ff fa5a 	bl	800b6f8 <tcp_next_iss>
 800c244:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c25e:	4b35      	ldr	r3, [pc, #212]	; (800c334 <tcp_listen_input+0x1e0>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	1e5a      	subs	r2, r3, #1
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	691a      	ldr	r2, [r3, #16]
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	7a5b      	ldrb	r3, [r3, #9]
 800c27a:	f003 030c 	and.w	r3, r3, #12
 800c27e:	b2da      	uxtb	r2, r3
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	7a1a      	ldrb	r2, [r3, #8]
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c28c:	4b2e      	ldr	r3, [pc, #184]	; (800c348 <tcp_listen_input+0x1f4>)
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	60da      	str	r2, [r3, #12]
 800c294:	4a2c      	ldr	r2, [pc, #176]	; (800c348 <tcp_listen_input+0x1f4>)
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	6013      	str	r3, [r2, #0]
 800c29a:	f003 f8cf 	bl	800f43c <tcp_timer_needed>
 800c29e:	4b2b      	ldr	r3, [pc, #172]	; (800c34c <tcp_listen_input+0x1f8>)
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c2a4:	6978      	ldr	r0, [r7, #20]
 800c2a6:	f001 fd8d 	bl	800ddc4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c2aa:	4b23      	ldr	r3, [pc, #140]	; (800c338 <tcp_listen_input+0x1e4>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	89db      	ldrh	r3, [r3, #14]
 800c2b0:	b29a      	uxth	r2, r3
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f004 fcc3 	bl	8010c58 <ip4_route>
 800c2d2:	4601      	mov	r1, r0
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	461a      	mov	r2, r3
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f7ff fa32 	bl	800b744 <tcp_eff_send_mss_netif>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c2e8:	2112      	movs	r1, #18
 800c2ea:	6978      	ldr	r0, [r7, #20]
 800c2ec:	f002 f842 	bl	800e374 <tcp_enqueue_flags>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c2f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d004      	beq.n	800c306 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	6978      	ldr	r0, [r7, #20]
 800c300:	f7fe f980 	bl	800a604 <tcp_abandon>
      return;
 800c304:	e006      	b.n	800c314 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c306:	6978      	ldr	r0, [r7, #20]
 800c308:	f002 f922 	bl	800e550 <tcp_output>
  return;
 800c30c:	e001      	b.n	800c312 <tcp_listen_input+0x1be>
    return;
 800c30e:	bf00      	nop
 800c310:	e000      	b.n	800c314 <tcp_listen_input+0x1c0>
  return;
 800c312:	bf00      	nop
}
 800c314:	371c      	adds	r7, #28
 800c316:	46bd      	mov	sp, r7
 800c318:	bd90      	pop	{r4, r7, pc}
 800c31a:	bf00      	nop
 800c31c:	2000b138 	.word	0x2000b138
 800c320:	080148d0 	.word	0x080148d0
 800c324:	08014ac8 	.word	0x08014ac8
 800c328:	0801491c 	.word	0x0801491c
 800c32c:	2000b130 	.word	0x2000b130
 800c330:	2000b136 	.word	0x2000b136
 800c334:	2000b12c 	.word	0x2000b12c
 800c338:	2000b11c 	.word	0x2000b11c
 800c33c:	2000e4f4 	.word	0x2000e4f4
 800c340:	2000e4f8 	.word	0x2000e4f8
 800c344:	2000e4e4 	.word	0x2000e4e4
 800c348:	20011bf8 	.word	0x20011bf8
 800c34c:	20011bf4 	.word	0x20011bf4

0800c350 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af04      	add	r7, sp, #16
 800c356:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c358:	4b2f      	ldr	r3, [pc, #188]	; (800c418 <tcp_timewait_input+0xc8>)
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	f003 0304 	and.w	r3, r3, #4
 800c360:	2b00      	cmp	r3, #0
 800c362:	d153      	bne.n	800c40c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d106      	bne.n	800c378 <tcp_timewait_input+0x28>
 800c36a:	4b2c      	ldr	r3, [pc, #176]	; (800c41c <tcp_timewait_input+0xcc>)
 800c36c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c370:	492b      	ldr	r1, [pc, #172]	; (800c420 <tcp_timewait_input+0xd0>)
 800c372:	482c      	ldr	r0, [pc, #176]	; (800c424 <tcp_timewait_input+0xd4>)
 800c374:	f006 fd32 	bl	8012ddc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c378:	4b27      	ldr	r3, [pc, #156]	; (800c418 <tcp_timewait_input+0xc8>)
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	f003 0302 	and.w	r3, r3, #2
 800c380:	2b00      	cmp	r3, #0
 800c382:	d02a      	beq.n	800c3da <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c384:	4b28      	ldr	r3, [pc, #160]	; (800c428 <tcp_timewait_input+0xd8>)
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	2b00      	cmp	r3, #0
 800c390:	db2d      	blt.n	800c3ee <tcp_timewait_input+0x9e>
 800c392:	4b25      	ldr	r3, [pc, #148]	; (800c428 <tcp_timewait_input+0xd8>)
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39a:	6879      	ldr	r1, [r7, #4]
 800c39c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c39e:	440b      	add	r3, r1
 800c3a0:	1ad3      	subs	r3, r2, r3
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	dc23      	bgt.n	800c3ee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3a6:	4b21      	ldr	r3, [pc, #132]	; (800c42c <tcp_timewait_input+0xdc>)
 800c3a8:	6819      	ldr	r1, [r3, #0]
 800c3aa:	4b21      	ldr	r3, [pc, #132]	; (800c430 <tcp_timewait_input+0xe0>)
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	4b1d      	ldr	r3, [pc, #116]	; (800c428 <tcp_timewait_input+0xd8>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3b6:	4b1f      	ldr	r3, [pc, #124]	; (800c434 <tcp_timewait_input+0xe4>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3ba:	885b      	ldrh	r3, [r3, #2]
 800c3bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3be:	4a1d      	ldr	r2, [pc, #116]	; (800c434 <tcp_timewait_input+0xe4>)
 800c3c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3c2:	8812      	ldrh	r2, [r2, #0]
 800c3c4:	b292      	uxth	r2, r2
 800c3c6:	9202      	str	r2, [sp, #8]
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	4b1b      	ldr	r3, [pc, #108]	; (800c438 <tcp_timewait_input+0xe8>)
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	4b1b      	ldr	r3, [pc, #108]	; (800c43c <tcp_timewait_input+0xec>)
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f002 fe70 	bl	800f0b8 <tcp_rst>
      return;
 800c3d8:	e01b      	b.n	800c412 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c3da:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <tcp_timewait_input+0xc8>)
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	f003 0301 	and.w	r3, r3, #1
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c3e6:	4b16      	ldr	r3, [pc, #88]	; (800c440 <tcp_timewait_input+0xf0>)
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c3ee:	4b10      	ldr	r3, [pc, #64]	; (800c430 <tcp_timewait_input+0xe0>)
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00c      	beq.n	800c410 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	8b5b      	ldrh	r3, [r3, #26]
 800c3fa:	f043 0302 	orr.w	r3, r3, #2
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f002 f8a3 	bl	800e550 <tcp_output>
  }
  return;
 800c40a:	e001      	b.n	800c410 <tcp_timewait_input+0xc0>
    return;
 800c40c:	bf00      	nop
 800c40e:	e000      	b.n	800c412 <tcp_timewait_input+0xc2>
  return;
 800c410:	bf00      	nop
}
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	2000b138 	.word	0x2000b138
 800c41c:	080148d0 	.word	0x080148d0
 800c420:	08014ae8 	.word	0x08014ae8
 800c424:	0801491c 	.word	0x0801491c
 800c428:	2000b12c 	.word	0x2000b12c
 800c42c:	2000b130 	.word	0x2000b130
 800c430:	2000b136 	.word	0x2000b136
 800c434:	2000b11c 	.word	0x2000b11c
 800c438:	2000e4f4 	.word	0x2000e4f4
 800c43c:	2000e4f8 	.word	0x2000e4f8
 800c440:	20011bfc 	.word	0x20011bfc

0800c444 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c444:	b590      	push	{r4, r7, lr}
 800c446:	b08d      	sub	sp, #52	; 0x34
 800c448:	af04      	add	r7, sp, #16
 800c44a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c44c:	2300      	movs	r3, #0
 800c44e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d106      	bne.n	800c468 <tcp_process+0x24>
 800c45a:	4ba5      	ldr	r3, [pc, #660]	; (800c6f0 <tcp_process+0x2ac>)
 800c45c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c460:	49a4      	ldr	r1, [pc, #656]	; (800c6f4 <tcp_process+0x2b0>)
 800c462:	48a5      	ldr	r0, [pc, #660]	; (800c6f8 <tcp_process+0x2b4>)
 800c464:	f006 fcba 	bl	8012ddc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c468:	4ba4      	ldr	r3, [pc, #656]	; (800c6fc <tcp_process+0x2b8>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	f003 0304 	and.w	r3, r3, #4
 800c470:	2b00      	cmp	r3, #0
 800c472:	d04e      	beq.n	800c512 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	7d1b      	ldrb	r3, [r3, #20]
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d108      	bne.n	800c48e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c480:	4b9f      	ldr	r3, [pc, #636]	; (800c700 <tcp_process+0x2bc>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	429a      	cmp	r2, r3
 800c486:	d123      	bne.n	800c4d0 <tcp_process+0x8c>
        acceptable = 1;
 800c488:	2301      	movs	r3, #1
 800c48a:	76fb      	strb	r3, [r7, #27]
 800c48c:	e020      	b.n	800c4d0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c492:	4b9c      	ldr	r3, [pc, #624]	; (800c704 <tcp_process+0x2c0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	d102      	bne.n	800c4a0 <tcp_process+0x5c>
        acceptable = 1;
 800c49a:	2301      	movs	r3, #1
 800c49c:	76fb      	strb	r3, [r7, #27]
 800c49e:	e017      	b.n	800c4d0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c4a0:	4b98      	ldr	r3, [pc, #608]	; (800c704 <tcp_process+0x2c0>)
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	db10      	blt.n	800c4d0 <tcp_process+0x8c>
 800c4ae:	4b95      	ldr	r3, [pc, #596]	; (800c704 <tcp_process+0x2c0>)
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b6:	6879      	ldr	r1, [r7, #4]
 800c4b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c4ba:	440b      	add	r3, r1
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	dc06      	bgt.n	800c4d0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	8b5b      	ldrh	r3, [r3, #26]
 800c4c6:	f043 0302 	orr.w	r3, r3, #2
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c4d0:	7efb      	ldrb	r3, [r7, #27]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d01b      	beq.n	800c50e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	7d1b      	ldrb	r3, [r3, #20]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d106      	bne.n	800c4ec <tcp_process+0xa8>
 800c4de:	4b84      	ldr	r3, [pc, #528]	; (800c6f0 <tcp_process+0x2ac>)
 800c4e0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c4e4:	4988      	ldr	r1, [pc, #544]	; (800c708 <tcp_process+0x2c4>)
 800c4e6:	4884      	ldr	r0, [pc, #528]	; (800c6f8 <tcp_process+0x2b4>)
 800c4e8:	f006 fc78 	bl	8012ddc <iprintf>
      recv_flags |= TF_RESET;
 800c4ec:	4b87      	ldr	r3, [pc, #540]	; (800c70c <tcp_process+0x2c8>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	f043 0308 	orr.w	r3, r3, #8
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	4b85      	ldr	r3, [pc, #532]	; (800c70c <tcp_process+0x2c8>)
 800c4f8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	8b5b      	ldrh	r3, [r3, #26]
 800c4fe:	f023 0301 	bic.w	r3, r3, #1
 800c502:	b29a      	uxth	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c508:	f06f 030d 	mvn.w	r3, #13
 800c50c:	e37a      	b.n	800cc04 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	e378      	b.n	800cc04 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c512:	4b7a      	ldr	r3, [pc, #488]	; (800c6fc <tcp_process+0x2b8>)
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	f003 0302 	and.w	r3, r3, #2
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d010      	beq.n	800c540 <tcp_process+0xfc>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	7d1b      	ldrb	r3, [r3, #20]
 800c522:	2b02      	cmp	r3, #2
 800c524:	d00c      	beq.n	800c540 <tcp_process+0xfc>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	7d1b      	ldrb	r3, [r3, #20]
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	d008      	beq.n	800c540 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	8b5b      	ldrh	r3, [r3, #26]
 800c532:	f043 0302 	orr.w	r3, r3, #2
 800c536:	b29a      	uxth	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c53c:	2300      	movs	r3, #0
 800c53e:	e361      	b.n	800cc04 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	8b5b      	ldrh	r3, [r3, #26]
 800c544:	f003 0310 	and.w	r3, r3, #16
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d103      	bne.n	800c554 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c54c:	4b70      	ldr	r3, [pc, #448]	; (800c710 <tcp_process+0x2cc>)
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f001 fc2d 	bl	800ddc4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7d1b      	ldrb	r3, [r3, #20]
 800c56e:	3b02      	subs	r3, #2
 800c570:	2b07      	cmp	r3, #7
 800c572:	f200 8337 	bhi.w	800cbe4 <tcp_process+0x7a0>
 800c576:	a201      	add	r2, pc, #4	; (adr r2, 800c57c <tcp_process+0x138>)
 800c578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57c:	0800c59d 	.word	0x0800c59d
 800c580:	0800c7cd 	.word	0x0800c7cd
 800c584:	0800c945 	.word	0x0800c945
 800c588:	0800c96f 	.word	0x0800c96f
 800c58c:	0800ca93 	.word	0x0800ca93
 800c590:	0800c945 	.word	0x0800c945
 800c594:	0800cb1f 	.word	0x0800cb1f
 800c598:	0800cbaf 	.word	0x0800cbaf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c59c:	4b57      	ldr	r3, [pc, #348]	; (800c6fc <tcp_process+0x2b8>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	f003 0310 	and.w	r3, r3, #16
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 80e4 	beq.w	800c772 <tcp_process+0x32e>
 800c5aa:	4b54      	ldr	r3, [pc, #336]	; (800c6fc <tcp_process+0x2b8>)
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	f003 0302 	and.w	r3, r3, #2
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 80dd 	beq.w	800c772 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5bc:	1c5a      	adds	r2, r3, #1
 800c5be:	4b50      	ldr	r3, [pc, #320]	; (800c700 <tcp_process+0x2bc>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	f040 80d5 	bne.w	800c772 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c5c8:	4b4e      	ldr	r3, [pc, #312]	; (800c704 <tcp_process+0x2c0>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c5da:	4b49      	ldr	r3, [pc, #292]	; (800c700 <tcp_process+0x2bc>)
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c5e2:	4b4c      	ldr	r3, [pc, #304]	; (800c714 <tcp_process+0x2d0>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	89db      	ldrh	r3, [r3, #14]
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c5fc:	4b41      	ldr	r3, [pc, #260]	; (800c704 <tcp_process+0x2c0>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	1e5a      	subs	r2, r3, #1
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2204      	movs	r2, #4
 800c60a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	3304      	adds	r3, #4
 800c614:	4618      	mov	r0, r3
 800c616:	f004 fb1f 	bl	8010c58 <ip4_route>
 800c61a:	4601      	mov	r1, r0
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3304      	adds	r3, #4
 800c620:	461a      	mov	r2, r3
 800c622:	4620      	mov	r0, r4
 800c624:	f7ff f88e 	bl	800b744 <tcp_eff_send_mss_netif>
 800c628:	4603      	mov	r3, r0
 800c62a:	461a      	mov	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c634:	009a      	lsls	r2, r3, #2
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c63a:	005b      	lsls	r3, r3, #1
 800c63c:	f241 111c 	movw	r1, #4380	; 0x111c
 800c640:	428b      	cmp	r3, r1
 800c642:	bf38      	it	cc
 800c644:	460b      	movcc	r3, r1
 800c646:	429a      	cmp	r2, r3
 800c648:	d204      	bcs.n	800c654 <tcp_process+0x210>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	b29b      	uxth	r3, r3
 800c652:	e00d      	b.n	800c670 <tcp_process+0x22c>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	f241 121c 	movw	r2, #4380	; 0x111c
 800c65e:	4293      	cmp	r3, r2
 800c660:	d904      	bls.n	800c66c <tcp_process+0x228>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c666:	005b      	lsls	r3, r3, #1
 800c668:	b29b      	uxth	r3, r3
 800c66a:	e001      	b.n	800c670 <tcp_process+0x22c>
 800c66c:	f241 131c 	movw	r3, #4380	; 0x111c
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d106      	bne.n	800c68e <tcp_process+0x24a>
 800c680:	4b1b      	ldr	r3, [pc, #108]	; (800c6f0 <tcp_process+0x2ac>)
 800c682:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c686:	4924      	ldr	r1, [pc, #144]	; (800c718 <tcp_process+0x2d4>)
 800c688:	481b      	ldr	r0, [pc, #108]	; (800c6f8 <tcp_process+0x2b4>)
 800c68a:	f006 fba7 	bl	8012ddc <iprintf>
        --pcb->snd_queuelen;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c694:	3b01      	subs	r3, #1
 800c696:	b29a      	uxth	r2, r3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d111      	bne.n	800c6ce <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d106      	bne.n	800c6c4 <tcp_process+0x280>
 800c6b6:	4b0e      	ldr	r3, [pc, #56]	; (800c6f0 <tcp_process+0x2ac>)
 800c6b8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c6bc:	4917      	ldr	r1, [pc, #92]	; (800c71c <tcp_process+0x2d8>)
 800c6be:	480e      	ldr	r0, [pc, #56]	; (800c6f8 <tcp_process+0x2b4>)
 800c6c0:	f006 fb8c 	bl	8012ddc <iprintf>
          pcb->unsent = rseg->next;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	66da      	str	r2, [r3, #108]	; 0x6c
 800c6cc:	e003      	b.n	800c6d6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c6d6:	69f8      	ldr	r0, [r7, #28]
 800c6d8:	f7fe fd3d 	bl	800b156 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d11d      	bne.n	800c720 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c6ea:	861a      	strh	r2, [r3, #48]	; 0x30
 800c6ec:	e01f      	b.n	800c72e <tcp_process+0x2ea>
 800c6ee:	bf00      	nop
 800c6f0:	080148d0 	.word	0x080148d0
 800c6f4:	08014b08 	.word	0x08014b08
 800c6f8:	0801491c 	.word	0x0801491c
 800c6fc:	2000b138 	.word	0x2000b138
 800c700:	2000b130 	.word	0x2000b130
 800c704:	2000b12c 	.word	0x2000b12c
 800c708:	08014b24 	.word	0x08014b24
 800c70c:	2000b139 	.word	0x2000b139
 800c710:	20011bfc 	.word	0x20011bfc
 800c714:	2000b11c 	.word	0x2000b11c
 800c718:	08014b44 	.word	0x08014b44
 800c71c:	08014b5c 	.word	0x08014b5c
        } else {
          pcb->rtime = 0;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2200      	movs	r2, #0
 800c724:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00a      	beq.n	800c74e <tcp_process+0x30a>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	6910      	ldr	r0, [r2, #16]
 800c742:	2200      	movs	r2, #0
 800c744:	6879      	ldr	r1, [r7, #4]
 800c746:	4798      	blx	r3
 800c748:	4603      	mov	r3, r0
 800c74a:	76bb      	strb	r3, [r7, #26]
 800c74c:	e001      	b.n	800c752 <tcp_process+0x30e>
 800c74e:	2300      	movs	r3, #0
 800c750:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c752:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c756:	f113 0f0d 	cmn.w	r3, #13
 800c75a:	d102      	bne.n	800c762 <tcp_process+0x31e>
          return ERR_ABRT;
 800c75c:	f06f 030c 	mvn.w	r3, #12
 800c760:	e250      	b.n	800cc04 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	8b5b      	ldrh	r3, [r3, #26]
 800c766:	f043 0302 	orr.w	r3, r3, #2
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c770:	e23a      	b.n	800cbe8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c772:	4b9d      	ldr	r3, [pc, #628]	; (800c9e8 <tcp_process+0x5a4>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	f003 0310 	and.w	r3, r3, #16
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f000 8234 	beq.w	800cbe8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c780:	4b9a      	ldr	r3, [pc, #616]	; (800c9ec <tcp_process+0x5a8>)
 800c782:	6819      	ldr	r1, [r3, #0]
 800c784:	4b9a      	ldr	r3, [pc, #616]	; (800c9f0 <tcp_process+0x5ac>)
 800c786:	881b      	ldrh	r3, [r3, #0]
 800c788:	461a      	mov	r2, r3
 800c78a:	4b9a      	ldr	r3, [pc, #616]	; (800c9f4 <tcp_process+0x5b0>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c790:	4b99      	ldr	r3, [pc, #612]	; (800c9f8 <tcp_process+0x5b4>)
 800c792:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c794:	885b      	ldrh	r3, [r3, #2]
 800c796:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c798:	4a97      	ldr	r2, [pc, #604]	; (800c9f8 <tcp_process+0x5b4>)
 800c79a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c79c:	8812      	ldrh	r2, [r2, #0]
 800c79e:	b292      	uxth	r2, r2
 800c7a0:	9202      	str	r2, [sp, #8]
 800c7a2:	9301      	str	r3, [sp, #4]
 800c7a4:	4b95      	ldr	r3, [pc, #596]	; (800c9fc <tcp_process+0x5b8>)
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	4b95      	ldr	r3, [pc, #596]	; (800ca00 <tcp_process+0x5bc>)
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f002 fc83 	bl	800f0b8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c7b8:	2b05      	cmp	r3, #5
 800c7ba:	f200 8215 	bhi.w	800cbe8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f002 fa4d 	bl	800ec64 <tcp_rexmit_rto>
      break;
 800c7ca:	e20d      	b.n	800cbe8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c7cc:	4b86      	ldr	r3, [pc, #536]	; (800c9e8 <tcp_process+0x5a4>)
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	f003 0310 	and.w	r3, r3, #16
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 80a1 	beq.w	800c91c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c7da:	4b84      	ldr	r3, [pc, #528]	; (800c9ec <tcp_process+0x5a8>)
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7e2:	1ad3      	subs	r3, r2, r3
 800c7e4:	3b01      	subs	r3, #1
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	db7e      	blt.n	800c8e8 <tcp_process+0x4a4>
 800c7ea:	4b80      	ldr	r3, [pc, #512]	; (800c9ec <tcp_process+0x5a8>)
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7f2:	1ad3      	subs	r3, r2, r3
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	dc77      	bgt.n	800c8e8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2204      	movs	r2, #4
 800c7fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c802:	2b00      	cmp	r3, #0
 800c804:	d102      	bne.n	800c80c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c806:	23fa      	movs	r3, #250	; 0xfa
 800c808:	76bb      	strb	r3, [r7, #26]
 800c80a:	e01d      	b.n	800c848 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d106      	bne.n	800c824 <tcp_process+0x3e0>
 800c816:	4b7b      	ldr	r3, [pc, #492]	; (800ca04 <tcp_process+0x5c0>)
 800c818:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c81c:	497a      	ldr	r1, [pc, #488]	; (800ca08 <tcp_process+0x5c4>)
 800c81e:	487b      	ldr	r0, [pc, #492]	; (800ca0c <tcp_process+0x5c8>)
 800c820:	f006 fadc 	bl	8012ddc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c828:	699b      	ldr	r3, [r3, #24]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00a      	beq.n	800c844 <tcp_process+0x400>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c832:	699b      	ldr	r3, [r3, #24]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	6910      	ldr	r0, [r2, #16]
 800c838:	2200      	movs	r2, #0
 800c83a:	6879      	ldr	r1, [r7, #4]
 800c83c:	4798      	blx	r3
 800c83e:	4603      	mov	r3, r0
 800c840:	76bb      	strb	r3, [r7, #26]
 800c842:	e001      	b.n	800c848 <tcp_process+0x404>
 800c844:	23f0      	movs	r3, #240	; 0xf0
 800c846:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c848:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00a      	beq.n	800c866 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c850:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c854:	f113 0f0d 	cmn.w	r3, #13
 800c858:	d002      	beq.n	800c860 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7fd ff90 	bl	800a780 <tcp_abort>
            }
            return ERR_ABRT;
 800c860:	f06f 030c 	mvn.w	r3, #12
 800c864:	e1ce      	b.n	800cc04 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 fae0 	bl	800ce2c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c86c:	4b68      	ldr	r3, [pc, #416]	; (800ca10 <tcp_process+0x5cc>)
 800c86e:	881b      	ldrh	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d005      	beq.n	800c880 <tcp_process+0x43c>
            recv_acked--;
 800c874:	4b66      	ldr	r3, [pc, #408]	; (800ca10 <tcp_process+0x5cc>)
 800c876:	881b      	ldrh	r3, [r3, #0]
 800c878:	3b01      	subs	r3, #1
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	4b64      	ldr	r3, [pc, #400]	; (800ca10 <tcp_process+0x5cc>)
 800c87e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c884:	009a      	lsls	r2, r3, #2
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c88a:	005b      	lsls	r3, r3, #1
 800c88c:	f241 111c 	movw	r1, #4380	; 0x111c
 800c890:	428b      	cmp	r3, r1
 800c892:	bf38      	it	cc
 800c894:	460b      	movcc	r3, r1
 800c896:	429a      	cmp	r2, r3
 800c898:	d204      	bcs.n	800c8a4 <tcp_process+0x460>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	e00d      	b.n	800c8c0 <tcp_process+0x47c>
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8a8:	005b      	lsls	r3, r3, #1
 800c8aa:	f241 121c 	movw	r2, #4380	; 0x111c
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d904      	bls.n	800c8bc <tcp_process+0x478>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	e001      	b.n	800c8c0 <tcp_process+0x47c>
 800c8bc:	f241 131c 	movw	r3, #4380	; 0x111c
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c8c6:	4b53      	ldr	r3, [pc, #332]	; (800ca14 <tcp_process+0x5d0>)
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	f003 0320 	and.w	r3, r3, #32
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d037      	beq.n	800c942 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	8b5b      	ldrh	r3, [r3, #26]
 800c8d6:	f043 0302 	orr.w	r3, r3, #2
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2207      	movs	r2, #7
 800c8e4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c8e6:	e02c      	b.n	800c942 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8e8:	4b40      	ldr	r3, [pc, #256]	; (800c9ec <tcp_process+0x5a8>)
 800c8ea:	6819      	ldr	r1, [r3, #0]
 800c8ec:	4b40      	ldr	r3, [pc, #256]	; (800c9f0 <tcp_process+0x5ac>)
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	4b40      	ldr	r3, [pc, #256]	; (800c9f4 <tcp_process+0x5b0>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8f8:	4b3f      	ldr	r3, [pc, #252]	; (800c9f8 <tcp_process+0x5b4>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8fc:	885b      	ldrh	r3, [r3, #2]
 800c8fe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c900:	4a3d      	ldr	r2, [pc, #244]	; (800c9f8 <tcp_process+0x5b4>)
 800c902:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c904:	8812      	ldrh	r2, [r2, #0]
 800c906:	b292      	uxth	r2, r2
 800c908:	9202      	str	r2, [sp, #8]
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	4b3b      	ldr	r3, [pc, #236]	; (800c9fc <tcp_process+0x5b8>)
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	4b3b      	ldr	r3, [pc, #236]	; (800ca00 <tcp_process+0x5bc>)
 800c912:	4602      	mov	r2, r0
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f002 fbcf 	bl	800f0b8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c91a:	e167      	b.n	800cbec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c91c:	4b32      	ldr	r3, [pc, #200]	; (800c9e8 <tcp_process+0x5a4>)
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	f003 0302 	and.w	r3, r3, #2
 800c924:	2b00      	cmp	r3, #0
 800c926:	f000 8161 	beq.w	800cbec <tcp_process+0x7a8>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92e:	1e5a      	subs	r2, r3, #1
 800c930:	4b30      	ldr	r3, [pc, #192]	; (800c9f4 <tcp_process+0x5b0>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	429a      	cmp	r2, r3
 800c936:	f040 8159 	bne.w	800cbec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f002 f9b4 	bl	800eca8 <tcp_rexmit>
      break;
 800c940:	e154      	b.n	800cbec <tcp_process+0x7a8>
 800c942:	e153      	b.n	800cbec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fa71 	bl	800ce2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c94a:	4b32      	ldr	r3, [pc, #200]	; (800ca14 <tcp_process+0x5d0>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	f003 0320 	and.w	r3, r3, #32
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 814c 	beq.w	800cbf0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	8b5b      	ldrh	r3, [r3, #26]
 800c95c:	f043 0302 	orr.w	r3, r3, #2
 800c960:	b29a      	uxth	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2207      	movs	r2, #7
 800c96a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c96c:	e140      	b.n	800cbf0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fa5c 	bl	800ce2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c974:	4b27      	ldr	r3, [pc, #156]	; (800ca14 <tcp_process+0x5d0>)
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	f003 0320 	and.w	r3, r3, #32
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d071      	beq.n	800ca64 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c980:	4b19      	ldr	r3, [pc, #100]	; (800c9e8 <tcp_process+0x5a4>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	f003 0310 	and.w	r3, r3, #16
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d060      	beq.n	800ca4e <tcp_process+0x60a>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c990:	4b16      	ldr	r3, [pc, #88]	; (800c9ec <tcp_process+0x5a8>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	429a      	cmp	r2, r3
 800c996:	d15a      	bne.n	800ca4e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d156      	bne.n	800ca4e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	8b5b      	ldrh	r3, [r3, #26]
 800c9a4:	f043 0302 	orr.w	r3, r3, #2
 800c9a8:	b29a      	uxth	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7fe fdbe 	bl	800b530 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c9b4:	4b18      	ldr	r3, [pc, #96]	; (800ca18 <tcp_process+0x5d4>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d105      	bne.n	800c9ca <tcp_process+0x586>
 800c9be:	4b16      	ldr	r3, [pc, #88]	; (800ca18 <tcp_process+0x5d4>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68db      	ldr	r3, [r3, #12]
 800c9c4:	4a14      	ldr	r2, [pc, #80]	; (800ca18 <tcp_process+0x5d4>)
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	e02e      	b.n	800ca28 <tcp_process+0x5e4>
 800c9ca:	4b13      	ldr	r3, [pc, #76]	; (800ca18 <tcp_process+0x5d4>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	617b      	str	r3, [r7, #20]
 800c9d0:	e027      	b.n	800ca22 <tcp_process+0x5de>
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d11f      	bne.n	800ca1c <tcp_process+0x5d8>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	68da      	ldr	r2, [r3, #12]
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	60da      	str	r2, [r3, #12]
 800c9e4:	e020      	b.n	800ca28 <tcp_process+0x5e4>
 800c9e6:	bf00      	nop
 800c9e8:	2000b138 	.word	0x2000b138
 800c9ec:	2000b130 	.word	0x2000b130
 800c9f0:	2000b136 	.word	0x2000b136
 800c9f4:	2000b12c 	.word	0x2000b12c
 800c9f8:	2000b11c 	.word	0x2000b11c
 800c9fc:	2000e4f4 	.word	0x2000e4f4
 800ca00:	2000e4f8 	.word	0x2000e4f8
 800ca04:	080148d0 	.word	0x080148d0
 800ca08:	08014b70 	.word	0x08014b70
 800ca0c:	0801491c 	.word	0x0801491c
 800ca10:	2000b134 	.word	0x2000b134
 800ca14:	2000b139 	.word	0x2000b139
 800ca18:	20011bf8 	.word	0x20011bf8
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	617b      	str	r3, [r7, #20]
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1d4      	bne.n	800c9d2 <tcp_process+0x58e>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	60da      	str	r2, [r3, #12]
 800ca2e:	4b77      	ldr	r3, [pc, #476]	; (800cc0c <tcp_process+0x7c8>)
 800ca30:	2201      	movs	r2, #1
 800ca32:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	220a      	movs	r2, #10
 800ca38:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ca3a:	4b75      	ldr	r3, [pc, #468]	; (800cc10 <tcp_process+0x7cc>)
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	60da      	str	r2, [r3, #12]
 800ca42:	4a73      	ldr	r2, [pc, #460]	; (800cc10 <tcp_process+0x7cc>)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6013      	str	r3, [r2, #0]
 800ca48:	f002 fcf8 	bl	800f43c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ca4c:	e0d2      	b.n	800cbf4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	8b5b      	ldrh	r3, [r3, #26]
 800ca52:	f043 0302 	orr.w	r3, r3, #2
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2208      	movs	r2, #8
 800ca60:	751a      	strb	r2, [r3, #20]
      break;
 800ca62:	e0c7      	b.n	800cbf4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ca64:	4b6b      	ldr	r3, [pc, #428]	; (800cc14 <tcp_process+0x7d0>)
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	f003 0310 	and.w	r3, r3, #16
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 80c1 	beq.w	800cbf4 <tcp_process+0x7b0>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca76:	4b68      	ldr	r3, [pc, #416]	; (800cc18 <tcp_process+0x7d4>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	f040 80ba 	bne.w	800cbf4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f040 80b5 	bne.w	800cbf4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2206      	movs	r2, #6
 800ca8e:	751a      	strb	r2, [r3, #20]
      break;
 800ca90:	e0b0      	b.n	800cbf4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f000 f9ca 	bl	800ce2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ca98:	4b60      	ldr	r3, [pc, #384]	; (800cc1c <tcp_process+0x7d8>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	f003 0320 	and.w	r3, r3, #32
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f000 80a9 	beq.w	800cbf8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	8b5b      	ldrh	r3, [r3, #26]
 800caaa:	f043 0302 	orr.w	r3, r3, #2
 800caae:	b29a      	uxth	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f7fe fd3b 	bl	800b530 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800caba:	4b59      	ldr	r3, [pc, #356]	; (800cc20 <tcp_process+0x7dc>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d105      	bne.n	800cad0 <tcp_process+0x68c>
 800cac4:	4b56      	ldr	r3, [pc, #344]	; (800cc20 <tcp_process+0x7dc>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	4a55      	ldr	r2, [pc, #340]	; (800cc20 <tcp_process+0x7dc>)
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	e013      	b.n	800caf8 <tcp_process+0x6b4>
 800cad0:	4b53      	ldr	r3, [pc, #332]	; (800cc20 <tcp_process+0x7dc>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	613b      	str	r3, [r7, #16]
 800cad6:	e00c      	b.n	800caf2 <tcp_process+0x6ae>
 800cad8:	693b      	ldr	r3, [r7, #16]
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d104      	bne.n	800caec <tcp_process+0x6a8>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	68da      	ldr	r2, [r3, #12]
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	60da      	str	r2, [r3, #12]
 800caea:	e005      	b.n	800caf8 <tcp_process+0x6b4>
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	613b      	str	r3, [r7, #16]
 800caf2:	693b      	ldr	r3, [r7, #16]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1ef      	bne.n	800cad8 <tcp_process+0x694>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	60da      	str	r2, [r3, #12]
 800cafe:	4b43      	ldr	r3, [pc, #268]	; (800cc0c <tcp_process+0x7c8>)
 800cb00:	2201      	movs	r2, #1
 800cb02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	220a      	movs	r2, #10
 800cb08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cb0a:	4b41      	ldr	r3, [pc, #260]	; (800cc10 <tcp_process+0x7cc>)
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	60da      	str	r2, [r3, #12]
 800cb12:	4a3f      	ldr	r2, [pc, #252]	; (800cc10 <tcp_process+0x7cc>)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	f002 fc90 	bl	800f43c <tcp_timer_needed>
      }
      break;
 800cb1c:	e06c      	b.n	800cbf8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f984 	bl	800ce2c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cb24:	4b3b      	ldr	r3, [pc, #236]	; (800cc14 <tcp_process+0x7d0>)
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	f003 0310 	and.w	r3, r3, #16
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d065      	beq.n	800cbfc <tcp_process+0x7b8>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb34:	4b38      	ldr	r3, [pc, #224]	; (800cc18 <tcp_process+0x7d4>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d15f      	bne.n	800cbfc <tcp_process+0x7b8>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d15b      	bne.n	800cbfc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7fe fcf3 	bl	800b530 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cb4a:	4b35      	ldr	r3, [pc, #212]	; (800cc20 <tcp_process+0x7dc>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d105      	bne.n	800cb60 <tcp_process+0x71c>
 800cb54:	4b32      	ldr	r3, [pc, #200]	; (800cc20 <tcp_process+0x7dc>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	4a31      	ldr	r2, [pc, #196]	; (800cc20 <tcp_process+0x7dc>)
 800cb5c:	6013      	str	r3, [r2, #0]
 800cb5e:	e013      	b.n	800cb88 <tcp_process+0x744>
 800cb60:	4b2f      	ldr	r3, [pc, #188]	; (800cc20 <tcp_process+0x7dc>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	60fb      	str	r3, [r7, #12]
 800cb66:	e00c      	b.n	800cb82 <tcp_process+0x73e>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d104      	bne.n	800cb7c <tcp_process+0x738>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	68da      	ldr	r2, [r3, #12]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	60da      	str	r2, [r3, #12]
 800cb7a:	e005      	b.n	800cb88 <tcp_process+0x744>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	60fb      	str	r3, [r7, #12]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1ef      	bne.n	800cb68 <tcp_process+0x724>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	60da      	str	r2, [r3, #12]
 800cb8e:	4b1f      	ldr	r3, [pc, #124]	; (800cc0c <tcp_process+0x7c8>)
 800cb90:	2201      	movs	r2, #1
 800cb92:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	220a      	movs	r2, #10
 800cb98:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cb9a:	4b1d      	ldr	r3, [pc, #116]	; (800cc10 <tcp_process+0x7cc>)
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	60da      	str	r2, [r3, #12]
 800cba2:	4a1b      	ldr	r2, [pc, #108]	; (800cc10 <tcp_process+0x7cc>)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6013      	str	r3, [r2, #0]
 800cba8:	f002 fc48 	bl	800f43c <tcp_timer_needed>
      }
      break;
 800cbac:	e026      	b.n	800cbfc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 f93c 	bl	800ce2c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cbb4:	4b17      	ldr	r3, [pc, #92]	; (800cc14 <tcp_process+0x7d0>)
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	f003 0310 	and.w	r3, r3, #16
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d01f      	beq.n	800cc00 <tcp_process+0x7bc>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbc4:	4b14      	ldr	r3, [pc, #80]	; (800cc18 <tcp_process+0x7d4>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d119      	bne.n	800cc00 <tcp_process+0x7bc>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d115      	bne.n	800cc00 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cbd4:	4b11      	ldr	r3, [pc, #68]	; (800cc1c <tcp_process+0x7d8>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	f043 0310 	orr.w	r3, r3, #16
 800cbdc:	b2da      	uxtb	r2, r3
 800cbde:	4b0f      	ldr	r3, [pc, #60]	; (800cc1c <tcp_process+0x7d8>)
 800cbe0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cbe2:	e00d      	b.n	800cc00 <tcp_process+0x7bc>
    default:
      break;
 800cbe4:	bf00      	nop
 800cbe6:	e00c      	b.n	800cc02 <tcp_process+0x7be>
      break;
 800cbe8:	bf00      	nop
 800cbea:	e00a      	b.n	800cc02 <tcp_process+0x7be>
      break;
 800cbec:	bf00      	nop
 800cbee:	e008      	b.n	800cc02 <tcp_process+0x7be>
      break;
 800cbf0:	bf00      	nop
 800cbf2:	e006      	b.n	800cc02 <tcp_process+0x7be>
      break;
 800cbf4:	bf00      	nop
 800cbf6:	e004      	b.n	800cc02 <tcp_process+0x7be>
      break;
 800cbf8:	bf00      	nop
 800cbfa:	e002      	b.n	800cc02 <tcp_process+0x7be>
      break;
 800cbfc:	bf00      	nop
 800cbfe:	e000      	b.n	800cc02 <tcp_process+0x7be>
      break;
 800cc00:	bf00      	nop
  }
  return ERR_OK;
 800cc02:	2300      	movs	r3, #0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3724      	adds	r7, #36	; 0x24
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd90      	pop	{r4, r7, pc}
 800cc0c:	20011bf4 	.word	0x20011bf4
 800cc10:	20011c08 	.word	0x20011c08
 800cc14:	2000b138 	.word	0x2000b138
 800cc18:	2000b130 	.word	0x2000b130
 800cc1c:	2000b139 	.word	0x2000b139
 800cc20:	20011bf8 	.word	0x20011bf8

0800cc24 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cc24:	b590      	push	{r4, r7, lr}
 800cc26:	b085      	sub	sp, #20
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d106      	bne.n	800cc42 <tcp_oos_insert_segment+0x1e>
 800cc34:	4b3b      	ldr	r3, [pc, #236]	; (800cd24 <tcp_oos_insert_segment+0x100>)
 800cc36:	f240 421f 	movw	r2, #1055	; 0x41f
 800cc3a:	493b      	ldr	r1, [pc, #236]	; (800cd28 <tcp_oos_insert_segment+0x104>)
 800cc3c:	483b      	ldr	r0, [pc, #236]	; (800cd2c <tcp_oos_insert_segment+0x108>)
 800cc3e:	f006 f8cd 	bl	8012ddc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	899b      	ldrh	r3, [r3, #12]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fb fc58 	bl	8008500 <lwip_htons>
 800cc50:	4603      	mov	r3, r0
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	f003 0301 	and.w	r3, r3, #1
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d028      	beq.n	800ccae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cc5c:	6838      	ldr	r0, [r7, #0]
 800cc5e:	f7fe fa65 	bl	800b12c <tcp_segs_free>
    next = NULL;
 800cc62:	2300      	movs	r3, #0
 800cc64:	603b      	str	r3, [r7, #0]
 800cc66:	e056      	b.n	800cd16 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	899b      	ldrh	r3, [r3, #12]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fb fc45 	bl	8008500 <lwip_htons>
 800cc76:	4603      	mov	r3, r0
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00d      	beq.n	800cc9e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	899b      	ldrh	r3, [r3, #12]
 800cc88:	b29c      	uxth	r4, r3
 800cc8a:	2001      	movs	r0, #1
 800cc8c:	f7fb fc38 	bl	8008500 <lwip_htons>
 800cc90:	4603      	mov	r3, r0
 800cc92:	461a      	mov	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	4322      	orrs	r2, r4
 800cc9a:	b292      	uxth	r2, r2
 800cc9c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f7fe fa54 	bl	800b156 <tcp_seg_free>
    while (next &&
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00e      	beq.n	800ccd2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	891b      	ldrh	r3, [r3, #8]
 800ccb8:	461a      	mov	r2, r3
 800ccba:	4b1d      	ldr	r3, [pc, #116]	; (800cd30 <tcp_oos_insert_segment+0x10c>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	441a      	add	r2, r3
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	8909      	ldrh	r1, [r1, #8]
 800ccca:	440b      	add	r3, r1
 800cccc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	daca      	bge.n	800cc68 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d01e      	beq.n	800cd16 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	891b      	ldrh	r3, [r3, #8]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	4b14      	ldr	r3, [pc, #80]	; (800cd30 <tcp_oos_insert_segment+0x10c>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	441a      	add	r2, r3
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	dd12      	ble.n	800cd16 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	4b0d      	ldr	r3, [pc, #52]	; (800cd30 <tcp_oos_insert_segment+0x10c>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	685a      	ldr	r2, [r3, #4]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	891b      	ldrh	r3, [r3, #8]
 800cd0e:	4619      	mov	r1, r3
 800cd10:	4610      	mov	r0, r2
 800cd12:	f7fc fe1b 	bl	800994c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	683a      	ldr	r2, [r7, #0]
 800cd1a:	601a      	str	r2, [r3, #0]
}
 800cd1c:	bf00      	nop
 800cd1e:	3714      	adds	r7, #20
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd90      	pop	{r4, r7, pc}
 800cd24:	080148d0 	.word	0x080148d0
 800cd28:	08014b90 	.word	0x08014b90
 800cd2c:	0801491c 	.word	0x0801491c
 800cd30:	2000b12c 	.word	0x2000b12c

0800cd34 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cd34:	b5b0      	push	{r4, r5, r7, lr}
 800cd36:	b086      	sub	sp, #24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
 800cd40:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cd42:	e03e      	b.n	800cdc2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fd f80e 	bl	8009d74 <pbuf_clen>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cd62:	8a7a      	ldrh	r2, [r7, #18]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d906      	bls.n	800cd76 <tcp_free_acked_segments+0x42>
 800cd68:	4b2a      	ldr	r3, [pc, #168]	; (800ce14 <tcp_free_acked_segments+0xe0>)
 800cd6a:	f240 4257 	movw	r2, #1111	; 0x457
 800cd6e:	492a      	ldr	r1, [pc, #168]	; (800ce18 <tcp_free_acked_segments+0xe4>)
 800cd70:	482a      	ldr	r0, [pc, #168]	; (800ce1c <tcp_free_acked_segments+0xe8>)
 800cd72:	f006 f833 	bl	8012ddc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800cd7c:	8a7b      	ldrh	r3, [r7, #18]
 800cd7e:	1ad3      	subs	r3, r2, r3
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	891a      	ldrh	r2, [r3, #8]
 800cd8c:	4b24      	ldr	r3, [pc, #144]	; (800ce20 <tcp_free_acked_segments+0xec>)
 800cd8e:	881b      	ldrh	r3, [r3, #0]
 800cd90:	4413      	add	r3, r2
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	4b22      	ldr	r3, [pc, #136]	; (800ce20 <tcp_free_acked_segments+0xec>)
 800cd96:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cd98:	6978      	ldr	r0, [r7, #20]
 800cd9a:	f7fe f9dc 	bl	800b156 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d00c      	beq.n	800cdc2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d109      	bne.n	800cdc2 <tcp_free_acked_segments+0x8e>
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d106      	bne.n	800cdc2 <tcp_free_acked_segments+0x8e>
 800cdb4:	4b17      	ldr	r3, [pc, #92]	; (800ce14 <tcp_free_acked_segments+0xe0>)
 800cdb6:	f240 4261 	movw	r2, #1121	; 0x461
 800cdba:	491a      	ldr	r1, [pc, #104]	; (800ce24 <tcp_free_acked_segments+0xf0>)
 800cdbc:	4817      	ldr	r0, [pc, #92]	; (800ce1c <tcp_free_acked_segments+0xe8>)
 800cdbe:	f006 f80d 	bl	8012ddc <iprintf>
  while (seg_list != NULL &&
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d020      	beq.n	800ce0a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fb fbab 	bl	800852a <lwip_htonl>
 800cdd4:	4604      	mov	r4, r0
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	891b      	ldrh	r3, [r3, #8]
 800cdda:	461d      	mov	r5, r3
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	899b      	ldrh	r3, [r3, #12]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fb fb8b 	bl	8008500 <lwip_htons>
 800cdea:	4603      	mov	r3, r0
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	f003 0303 	and.w	r3, r3, #3
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d001      	beq.n	800cdfa <tcp_free_acked_segments+0xc6>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	e000      	b.n	800cdfc <tcp_free_acked_segments+0xc8>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	442b      	add	r3, r5
 800cdfe:	18e2      	adds	r2, r4, r3
 800ce00:	4b09      	ldr	r3, [pc, #36]	; (800ce28 <tcp_free_acked_segments+0xf4>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	dd9c      	ble.n	800cd44 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ce0a:	68bb      	ldr	r3, [r7, #8]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3718      	adds	r7, #24
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bdb0      	pop	{r4, r5, r7, pc}
 800ce14:	080148d0 	.word	0x080148d0
 800ce18:	08014bb8 	.word	0x08014bb8
 800ce1c:	0801491c 	.word	0x0801491c
 800ce20:	2000b134 	.word	0x2000b134
 800ce24:	08014be0 	.word	0x08014be0
 800ce28:	2000b130 	.word	0x2000b130

0800ce2c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ce2c:	b5b0      	push	{r4, r5, r7, lr}
 800ce2e:	b094      	sub	sp, #80	; 0x50
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ce34:	2300      	movs	r3, #0
 800ce36:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d106      	bne.n	800ce4c <tcp_receive+0x20>
 800ce3e:	4ba6      	ldr	r3, [pc, #664]	; (800d0d8 <tcp_receive+0x2ac>)
 800ce40:	f240 427b 	movw	r2, #1147	; 0x47b
 800ce44:	49a5      	ldr	r1, [pc, #660]	; (800d0dc <tcp_receive+0x2b0>)
 800ce46:	48a6      	ldr	r0, [pc, #664]	; (800d0e0 <tcp_receive+0x2b4>)
 800ce48:	f005 ffc8 	bl	8012ddc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	7d1b      	ldrb	r3, [r3, #20]
 800ce50:	2b03      	cmp	r3, #3
 800ce52:	d806      	bhi.n	800ce62 <tcp_receive+0x36>
 800ce54:	4ba0      	ldr	r3, [pc, #640]	; (800d0d8 <tcp_receive+0x2ac>)
 800ce56:	f240 427c 	movw	r2, #1148	; 0x47c
 800ce5a:	49a2      	ldr	r1, [pc, #648]	; (800d0e4 <tcp_receive+0x2b8>)
 800ce5c:	48a0      	ldr	r0, [pc, #640]	; (800d0e0 <tcp_receive+0x2b4>)
 800ce5e:	f005 ffbd 	bl	8012ddc <iprintf>

  if (flags & TCP_ACK) {
 800ce62:	4ba1      	ldr	r3, [pc, #644]	; (800d0e8 <tcp_receive+0x2bc>)
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	f003 0310 	and.w	r3, r3, #16
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f000 8263 	beq.w	800d336 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce76:	461a      	mov	r2, r3
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce7c:	4413      	add	r3, r2
 800ce7e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce84:	4b99      	ldr	r3, [pc, #612]	; (800d0ec <tcp_receive+0x2c0>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	db1b      	blt.n	800cec6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ce92:	4b96      	ldr	r3, [pc, #600]	; (800d0ec <tcp_receive+0x2c0>)
 800ce94:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d106      	bne.n	800cea8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ce9e:	4b94      	ldr	r3, [pc, #592]	; (800d0f0 <tcp_receive+0x2c4>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	db0e      	blt.n	800cec6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ceac:	4b90      	ldr	r3, [pc, #576]	; (800d0f0 <tcp_receive+0x2c4>)
 800ceae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d125      	bne.n	800cf00 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ceb4:	4b8f      	ldr	r3, [pc, #572]	; (800d0f4 <tcp_receive+0x2c8>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	89db      	ldrh	r3, [r3, #14]
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d91c      	bls.n	800cf00 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cec6:	4b8b      	ldr	r3, [pc, #556]	; (800d0f4 <tcp_receive+0x2c8>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	89db      	ldrh	r3, [r3, #14]
 800cecc:	b29a      	uxth	r2, r3
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d205      	bcs.n	800cef0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800cef0:	4b7e      	ldr	r3, [pc, #504]	; (800d0ec <tcp_receive+0x2c0>)
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800cef8:	4b7d      	ldr	r3, [pc, #500]	; (800d0f0 <tcp_receive+0x2c4>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cf00:	4b7b      	ldr	r3, [pc, #492]	; (800d0f0 <tcp_receive+0x2c4>)
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	dc58      	bgt.n	800cfc0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800cf0e:	4b7a      	ldr	r3, [pc, #488]	; (800d0f8 <tcp_receive+0x2cc>)
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d14b      	bne.n	800cfae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800cf20:	4413      	add	r3, r2
 800cf22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d142      	bne.n	800cfae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	db3d      	blt.n	800cfae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf36:	4b6e      	ldr	r3, [pc, #440]	; (800d0f0 <tcp_receive+0x2c4>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d137      	bne.n	800cfae <tcp_receive+0x182>
              found_dupack = 1;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf48:	2bff      	cmp	r3, #255	; 0xff
 800cf4a:	d007      	beq.n	800cf5c <tcp_receive+0x130>
                ++pcb->dupacks;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf52:	3301      	adds	r3, #1
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cf62:	2b03      	cmp	r3, #3
 800cf64:	d91b      	bls.n	800cf9e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf70:	4413      	add	r3, r2
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d30a      	bcc.n	800cf94 <tcp_receive+0x168>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf88:	4413      	add	r3, r2
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800cf92:	e004      	b.n	800cf9e <tcp_receive+0x172>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d902      	bls.n	800cfae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f001 fee9 	bl	800ed80 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800cfae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f040 8160 	bne.w	800d276 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cfbe:	e15a      	b.n	800d276 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cfc0:	4b4b      	ldr	r3, [pc, #300]	; (800d0f0 <tcp_receive+0x2c4>)
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfc8:	1ad3      	subs	r3, r2, r3
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	f2c0 814d 	blt.w	800d26c <tcp_receive+0x440>
 800cfd2:	4b47      	ldr	r3, [pc, #284]	; (800d0f0 <tcp_receive+0x2c4>)
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f300 8145 	bgt.w	800d26c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	8b5b      	ldrh	r3, [r3, #26]
 800cfe6:	f003 0304 	and.w	r3, r3, #4
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d010      	beq.n	800d010 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	8b5b      	ldrh	r3, [r3, #26]
 800cff2:	f023 0304 	bic.w	r3, r3, #4
 800cff6:	b29a      	uxth	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d01e:	10db      	asrs	r3, r3, #3
 800d020:	b21b      	sxth	r3, r3
 800d022:	b29a      	uxth	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	4413      	add	r3, r2
 800d02e:	b29b      	uxth	r3, r3
 800d030:	b21a      	sxth	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d038:	4b2d      	ldr	r3, [pc, #180]	; (800d0f0 <tcp_receive+0x2c4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	b29a      	uxth	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d042:	b29b      	uxth	r3, r3
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d050:	4b27      	ldr	r3, [pc, #156]	; (800d0f0 <tcp_receive+0x2c4>)
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	7d1b      	ldrb	r3, [r3, #20]
 800d05c:	2b03      	cmp	r3, #3
 800d05e:	f240 8096 	bls.w	800d18e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d06e:	429a      	cmp	r2, r3
 800d070:	d244      	bcs.n	800d0fc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	8b5b      	ldrh	r3, [r3, #26]
 800d076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d001      	beq.n	800d082 <tcp_receive+0x256>
 800d07e:	2301      	movs	r3, #1
 800d080:	e000      	b.n	800d084 <tcp_receive+0x258>
 800d082:	2302      	movs	r3, #2
 800d084:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d088:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d092:	fb12 f303 	smulbb	r3, r2, r3
 800d096:	b29b      	uxth	r3, r3
 800d098:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d09a:	4293      	cmp	r3, r2
 800d09c:	bf28      	it	cs
 800d09e:	4613      	movcs	r3, r2
 800d0a0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d0aa:	4413      	add	r3, r2
 800d0ac:	b29a      	uxth	r2, r3
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d309      	bcc.n	800d0cc <tcp_receive+0x2a0>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d0be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d0c0:	4413      	add	r3, r2
 800d0c2:	b29a      	uxth	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d0ca:	e060      	b.n	800d18e <tcp_receive+0x362>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d0d6:	e05a      	b.n	800d18e <tcp_receive+0x362>
 800d0d8:	080148d0 	.word	0x080148d0
 800d0dc:	08014c00 	.word	0x08014c00
 800d0e0:	0801491c 	.word	0x0801491c
 800d0e4:	08014c1c 	.word	0x08014c1c
 800d0e8:	2000b138 	.word	0x2000b138
 800d0ec:	2000b12c 	.word	0x2000b12c
 800d0f0:	2000b130 	.word	0x2000b130
 800d0f4:	2000b11c 	.word	0x2000b11c
 800d0f8:	2000b136 	.word	0x2000b136
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d102:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d104:	4413      	add	r3, r2
 800d106:	b29a      	uxth	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d10e:	429a      	cmp	r2, r3
 800d110:	d309      	bcc.n	800d126 <tcp_receive+0x2fa>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d118:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d11a:	4413      	add	r3, r2
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d124:	e004      	b.n	800d130 <tcp_receive+0x304>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d12c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d326      	bcc.n	800d18e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d14c:	1ad3      	subs	r3, r2, r3
 800d14e:	b29a      	uxth	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d160:	4413      	add	r3, r2
 800d162:	b29a      	uxth	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d30a      	bcc.n	800d184 <tcp_receive+0x358>
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d178:	4413      	add	r3, r2
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d182:	e004      	b.n	800d18e <tcp_receive+0x362>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d18a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d196:	4a98      	ldr	r2, [pc, #608]	; (800d3f8 <tcp_receive+0x5cc>)
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f7ff fdcb 	bl	800cd34 <tcp_free_acked_segments>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1ac:	4a93      	ldr	r2, [pc, #588]	; (800d3fc <tcp_receive+0x5d0>)
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f7ff fdc0 	bl	800cd34 <tcp_free_acked_segments>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d104      	bne.n	800d1cc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1c8:	861a      	strh	r2, [r3, #48]	; 0x30
 800d1ca:	e002      	b.n	800d1d2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d103      	bne.n	800d1e8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d1ee:	4b84      	ldr	r3, [pc, #528]	; (800d400 <tcp_receive+0x5d4>)
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	8b5b      	ldrh	r3, [r3, #26]
 800d200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d204:	2b00      	cmp	r3, #0
 800d206:	d035      	beq.n	800d274 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d118      	bne.n	800d242 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00c      	beq.n	800d232 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	4618      	mov	r0, r3
 800d226:	f7fb f980 	bl	800852a <lwip_htonl>
 800d22a:	4603      	mov	r3, r0
 800d22c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d22e:	2b00      	cmp	r3, #0
 800d230:	dc20      	bgt.n	800d274 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	8b5b      	ldrh	r3, [r3, #26]
 800d236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d240:	e018      	b.n	800d274 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fb f96b 	bl	800852a <lwip_htonl>
 800d254:	4603      	mov	r3, r0
 800d256:	1ae3      	subs	r3, r4, r3
 800d258:	2b00      	cmp	r3, #0
 800d25a:	dc0b      	bgt.n	800d274 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	8b5b      	ldrh	r3, [r3, #26]
 800d260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d264:	b29a      	uxth	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d26a:	e003      	b.n	800d274 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f001 ff75 	bl	800f15c <tcp_send_empty_ack>
 800d272:	e000      	b.n	800d276 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d274:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d05b      	beq.n	800d336 <tcp_receive+0x50a>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d282:	4b60      	ldr	r3, [pc, #384]	; (800d404 <tcp_receive+0x5d8>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	2b00      	cmp	r3, #0
 800d28a:	da54      	bge.n	800d336 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d28c:	4b5e      	ldr	r3, [pc, #376]	; (800d408 <tcp_receive+0x5dc>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	b29a      	uxth	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d296:	b29b      	uxth	r3, r3
 800d298:	1ad3      	subs	r3, r2, r3
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d2a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d2aa:	10db      	asrs	r3, r3, #3
 800d2ac:	b21b      	sxth	r3, r3
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d2c4:	4413      	add	r3, r2
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	b21a      	sxth	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d2ce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	da05      	bge.n	800d2e2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800d2d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d2da:	425b      	negs	r3, r3
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d2e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d2ec:	109b      	asrs	r3, r3, #2
 800d2ee:	b21b      	sxth	r3, r3
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d300:	b29a      	uxth	r2, r3
 800d302:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d306:	4413      	add	r3, r2
 800d308:	b29b      	uxth	r3, r3
 800d30a:	b21a      	sxth	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d316:	10db      	asrs	r3, r3, #3
 800d318:	b21b      	sxth	r3, r3
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d322:	b29b      	uxth	r3, r3
 800d324:	4413      	add	r3, r2
 800d326:	b29b      	uxth	r3, r3
 800d328:	b21a      	sxth	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d336:	4b35      	ldr	r3, [pc, #212]	; (800d40c <tcp_receive+0x5e0>)
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f000 84e1 	beq.w	800dd02 <tcp_receive+0xed6>
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	7d1b      	ldrb	r3, [r3, #20]
 800d344:	2b06      	cmp	r3, #6
 800d346:	f200 84dc 	bhi.w	800dd02 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d34e:	4b30      	ldr	r3, [pc, #192]	; (800d410 <tcp_receive+0x5e4>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	3b01      	subs	r3, #1
 800d356:	2b00      	cmp	r3, #0
 800d358:	f2c0 808e 	blt.w	800d478 <tcp_receive+0x64c>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d360:	4b2a      	ldr	r3, [pc, #168]	; (800d40c <tcp_receive+0x5e0>)
 800d362:	881b      	ldrh	r3, [r3, #0]
 800d364:	4619      	mov	r1, r3
 800d366:	4b2a      	ldr	r3, [pc, #168]	; (800d410 <tcp_receive+0x5e4>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	440b      	add	r3, r1
 800d36c:	1ad3      	subs	r3, r2, r3
 800d36e:	3301      	adds	r3, #1
 800d370:	2b00      	cmp	r3, #0
 800d372:	f300 8081 	bgt.w	800d478 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d376:	4b27      	ldr	r3, [pc, #156]	; (800d414 <tcp_receive+0x5e8>)
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d380:	4b23      	ldr	r3, [pc, #140]	; (800d410 <tcp_receive+0x5e4>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	1ad3      	subs	r3, r2, r3
 800d386:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d388:	4b22      	ldr	r3, [pc, #136]	; (800d414 <tcp_receive+0x5e8>)
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d106      	bne.n	800d39e <tcp_receive+0x572>
 800d390:	4b21      	ldr	r3, [pc, #132]	; (800d418 <tcp_receive+0x5ec>)
 800d392:	f240 5294 	movw	r2, #1428	; 0x594
 800d396:	4921      	ldr	r1, [pc, #132]	; (800d41c <tcp_receive+0x5f0>)
 800d398:	4821      	ldr	r0, [pc, #132]	; (800d420 <tcp_receive+0x5f4>)
 800d39a:	f005 fd1f 	bl	8012ddc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d906      	bls.n	800d3b6 <tcp_receive+0x58a>
 800d3a8:	4b1b      	ldr	r3, [pc, #108]	; (800d418 <tcp_receive+0x5ec>)
 800d3aa:	f240 5295 	movw	r2, #1429	; 0x595
 800d3ae:	491d      	ldr	r1, [pc, #116]	; (800d424 <tcp_receive+0x5f8>)
 800d3b0:	481b      	ldr	r0, [pc, #108]	; (800d420 <tcp_receive+0x5f4>)
 800d3b2:	f005 fd13 	bl	8012ddc <iprintf>
      off = (u16_t)off32;
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d3bc:	4b15      	ldr	r3, [pc, #84]	; (800d414 <tcp_receive+0x5e8>)
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	891b      	ldrh	r3, [r3, #8]
 800d3c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d906      	bls.n	800d3d8 <tcp_receive+0x5ac>
 800d3ca:	4b13      	ldr	r3, [pc, #76]	; (800d418 <tcp_receive+0x5ec>)
 800d3cc:	f240 5297 	movw	r2, #1431	; 0x597
 800d3d0:	4915      	ldr	r1, [pc, #84]	; (800d428 <tcp_receive+0x5fc>)
 800d3d2:	4813      	ldr	r0, [pc, #76]	; (800d420 <tcp_receive+0x5f4>)
 800d3d4:	f005 fd02 	bl	8012ddc <iprintf>
      inseg.len -= off;
 800d3d8:	4b0e      	ldr	r3, [pc, #56]	; (800d414 <tcp_receive+0x5e8>)
 800d3da:	891a      	ldrh	r2, [r3, #8]
 800d3dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	b29a      	uxth	r2, r3
 800d3e4:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <tcp_receive+0x5e8>)
 800d3e6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d3e8:	4b0a      	ldr	r3, [pc, #40]	; (800d414 <tcp_receive+0x5e8>)
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	891a      	ldrh	r2, [r3, #8]
 800d3ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d3f6:	e029      	b.n	800d44c <tcp_receive+0x620>
 800d3f8:	08014c38 	.word	0x08014c38
 800d3fc:	08014c40 	.word	0x08014c40
 800d400:	2000b134 	.word	0x2000b134
 800d404:	2000b130 	.word	0x2000b130
 800d408:	20011bfc 	.word	0x20011bfc
 800d40c:	2000b136 	.word	0x2000b136
 800d410:	2000b12c 	.word	0x2000b12c
 800d414:	2000b10c 	.word	0x2000b10c
 800d418:	080148d0 	.word	0x080148d0
 800d41c:	08014c48 	.word	0x08014c48
 800d420:	0801491c 	.word	0x0801491c
 800d424:	08014c58 	.word	0x08014c58
 800d428:	08014c68 	.word	0x08014c68
        off -= p->len;
 800d42c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d42e:	895b      	ldrh	r3, [r3, #10]
 800d430:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d434:	1ad3      	subs	r3, r2, r3
 800d436:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d43a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d43c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d43e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d442:	2200      	movs	r2, #0
 800d444:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d44c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d44e:	895b      	ldrh	r3, [r3, #10]
 800d450:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d454:	429a      	cmp	r2, r3
 800d456:	d8e9      	bhi.n	800d42c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d458:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d45c:	4619      	mov	r1, r3
 800d45e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d460:	f7fc fb74 	bl	8009b4c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d468:	4a91      	ldr	r2, [pc, #580]	; (800d6b0 <tcp_receive+0x884>)
 800d46a:	6013      	str	r3, [r2, #0]
 800d46c:	4b91      	ldr	r3, [pc, #580]	; (800d6b4 <tcp_receive+0x888>)
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	4a8f      	ldr	r2, [pc, #572]	; (800d6b0 <tcp_receive+0x884>)
 800d472:	6812      	ldr	r2, [r2, #0]
 800d474:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d476:	e00d      	b.n	800d494 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d478:	4b8d      	ldr	r3, [pc, #564]	; (800d6b0 <tcp_receive+0x884>)
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	2b00      	cmp	r3, #0
 800d484:	da06      	bge.n	800d494 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	8b5b      	ldrh	r3, [r3, #26]
 800d48a:	f043 0302 	orr.w	r3, r3, #2
 800d48e:	b29a      	uxth	r2, r3
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d494:	4b86      	ldr	r3, [pc, #536]	; (800d6b0 <tcp_receive+0x884>)
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	f2c0 842a 	blt.w	800dcf8 <tcp_receive+0xecc>
 800d4a4:	4b82      	ldr	r3, [pc, #520]	; (800d6b0 <tcp_receive+0x884>)
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ac:	6879      	ldr	r1, [r7, #4]
 800d4ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d4b0:	440b      	add	r3, r1
 800d4b2:	1ad3      	subs	r3, r2, r3
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f300 841e 	bgt.w	800dcf8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4c0:	4b7b      	ldr	r3, [pc, #492]	; (800d6b0 <tcp_receive+0x884>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	f040 829a 	bne.w	800d9fe <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d4ca:	4b7a      	ldr	r3, [pc, #488]	; (800d6b4 <tcp_receive+0x888>)
 800d4cc:	891c      	ldrh	r4, [r3, #8]
 800d4ce:	4b79      	ldr	r3, [pc, #484]	; (800d6b4 <tcp_receive+0x888>)
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	899b      	ldrh	r3, [r3, #12]
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fb f812 	bl	8008500 <lwip_htons>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	f003 0303 	and.w	r3, r3, #3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d001      	beq.n	800d4ec <tcp_receive+0x6c0>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e000      	b.n	800d4ee <tcp_receive+0x6c2>
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	4423      	add	r3, r4
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	4b71      	ldr	r3, [pc, #452]	; (800d6b8 <tcp_receive+0x88c>)
 800d4f4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d4fa:	4b6f      	ldr	r3, [pc, #444]	; (800d6b8 <tcp_receive+0x88c>)
 800d4fc:	881b      	ldrh	r3, [r3, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d275      	bcs.n	800d5ee <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d502:	4b6c      	ldr	r3, [pc, #432]	; (800d6b4 <tcp_receive+0x888>)
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	899b      	ldrh	r3, [r3, #12]
 800d508:	b29b      	uxth	r3, r3
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fa fff8 	bl	8008500 <lwip_htons>
 800d510:	4603      	mov	r3, r0
 800d512:	b2db      	uxtb	r3, r3
 800d514:	f003 0301 	and.w	r3, r3, #1
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d01f      	beq.n	800d55c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d51c:	4b65      	ldr	r3, [pc, #404]	; (800d6b4 <tcp_receive+0x888>)
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	899b      	ldrh	r3, [r3, #12]
 800d522:	b29b      	uxth	r3, r3
 800d524:	b21b      	sxth	r3, r3
 800d526:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d52a:	b21c      	sxth	r4, r3
 800d52c:	4b61      	ldr	r3, [pc, #388]	; (800d6b4 <tcp_receive+0x888>)
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	899b      	ldrh	r3, [r3, #12]
 800d532:	b29b      	uxth	r3, r3
 800d534:	4618      	mov	r0, r3
 800d536:	f7fa ffe3 	bl	8008500 <lwip_htons>
 800d53a:	4603      	mov	r3, r0
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	b29b      	uxth	r3, r3
 800d540:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d544:	b29b      	uxth	r3, r3
 800d546:	4618      	mov	r0, r3
 800d548:	f7fa ffda 	bl	8008500 <lwip_htons>
 800d54c:	4603      	mov	r3, r0
 800d54e:	b21b      	sxth	r3, r3
 800d550:	4323      	orrs	r3, r4
 800d552:	b21a      	sxth	r2, r3
 800d554:	4b57      	ldr	r3, [pc, #348]	; (800d6b4 <tcp_receive+0x888>)
 800d556:	68db      	ldr	r3, [r3, #12]
 800d558:	b292      	uxth	r2, r2
 800d55a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d560:	4b54      	ldr	r3, [pc, #336]	; (800d6b4 <tcp_receive+0x888>)
 800d562:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d564:	4b53      	ldr	r3, [pc, #332]	; (800d6b4 <tcp_receive+0x888>)
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	899b      	ldrh	r3, [r3, #12]
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7fa ffc7 	bl	8008500 <lwip_htons>
 800d572:	4603      	mov	r3, r0
 800d574:	b2db      	uxtb	r3, r3
 800d576:	f003 0302 	and.w	r3, r3, #2
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d005      	beq.n	800d58a <tcp_receive+0x75e>
            inseg.len -= 1;
 800d57e:	4b4d      	ldr	r3, [pc, #308]	; (800d6b4 <tcp_receive+0x888>)
 800d580:	891b      	ldrh	r3, [r3, #8]
 800d582:	3b01      	subs	r3, #1
 800d584:	b29a      	uxth	r2, r3
 800d586:	4b4b      	ldr	r3, [pc, #300]	; (800d6b4 <tcp_receive+0x888>)
 800d588:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d58a:	4b4a      	ldr	r3, [pc, #296]	; (800d6b4 <tcp_receive+0x888>)
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	4a49      	ldr	r2, [pc, #292]	; (800d6b4 <tcp_receive+0x888>)
 800d590:	8912      	ldrh	r2, [r2, #8]
 800d592:	4611      	mov	r1, r2
 800d594:	4618      	mov	r0, r3
 800d596:	f7fc f9d9 	bl	800994c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d59a:	4b46      	ldr	r3, [pc, #280]	; (800d6b4 <tcp_receive+0x888>)
 800d59c:	891c      	ldrh	r4, [r3, #8]
 800d59e:	4b45      	ldr	r3, [pc, #276]	; (800d6b4 <tcp_receive+0x888>)
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	899b      	ldrh	r3, [r3, #12]
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fa ffaa 	bl	8008500 <lwip_htons>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	f003 0303 	and.w	r3, r3, #3
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <tcp_receive+0x790>
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e000      	b.n	800d5be <tcp_receive+0x792>
 800d5bc:	2300      	movs	r3, #0
 800d5be:	4423      	add	r3, r4
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	4b3d      	ldr	r3, [pc, #244]	; (800d6b8 <tcp_receive+0x88c>)
 800d5c4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d5c6:	4b3c      	ldr	r3, [pc, #240]	; (800d6b8 <tcp_receive+0x88c>)
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	4b38      	ldr	r3, [pc, #224]	; (800d6b0 <tcp_receive+0x884>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	441a      	add	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d6:	6879      	ldr	r1, [r7, #4]
 800d5d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d5da:	440b      	add	r3, r1
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d006      	beq.n	800d5ee <tcp_receive+0x7c2>
 800d5e0:	4b36      	ldr	r3, [pc, #216]	; (800d6bc <tcp_receive+0x890>)
 800d5e2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800d5e6:	4936      	ldr	r1, [pc, #216]	; (800d6c0 <tcp_receive+0x894>)
 800d5e8:	4836      	ldr	r0, [pc, #216]	; (800d6c4 <tcp_receive+0x898>)
 800d5ea:	f005 fbf7 	bl	8012ddc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f000 80e7 	beq.w	800d7c6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d5f8:	4b2e      	ldr	r3, [pc, #184]	; (800d6b4 <tcp_receive+0x888>)
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	899b      	ldrh	r3, [r3, #12]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	4618      	mov	r0, r3
 800d602:	f7fa ff7d 	bl	8008500 <lwip_htons>
 800d606:	4603      	mov	r3, r0
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d010      	beq.n	800d634 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d612:	e00a      	b.n	800d62a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d618:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f7fd fd96 	bl	800b156 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d1f0      	bne.n	800d614 <tcp_receive+0x7e8>
 800d632:	e0c8      	b.n	800d7c6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d638:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d63a:	e052      	b.n	800d6e2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	899b      	ldrh	r3, [r3, #12]
 800d642:	b29b      	uxth	r3, r3
 800d644:	4618      	mov	r0, r3
 800d646:	f7fa ff5b 	bl	8008500 <lwip_htons>
 800d64a:	4603      	mov	r3, r0
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d03d      	beq.n	800d6d2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d656:	4b17      	ldr	r3, [pc, #92]	; (800d6b4 <tcp_receive+0x888>)
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	899b      	ldrh	r3, [r3, #12]
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fa ff4e 	bl	8008500 <lwip_htons>
 800d664:	4603      	mov	r3, r0
 800d666:	b2db      	uxtb	r3, r3
 800d668:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d130      	bne.n	800d6d2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d670:	4b10      	ldr	r3, [pc, #64]	; (800d6b4 <tcp_receive+0x888>)
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	899b      	ldrh	r3, [r3, #12]
 800d676:	b29c      	uxth	r4, r3
 800d678:	2001      	movs	r0, #1
 800d67a:	f7fa ff41 	bl	8008500 <lwip_htons>
 800d67e:	4603      	mov	r3, r0
 800d680:	461a      	mov	r2, r3
 800d682:	4b0c      	ldr	r3, [pc, #48]	; (800d6b4 <tcp_receive+0x888>)
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	4322      	orrs	r2, r4
 800d688:	b292      	uxth	r2, r2
 800d68a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d68c:	4b09      	ldr	r3, [pc, #36]	; (800d6b4 <tcp_receive+0x888>)
 800d68e:	891c      	ldrh	r4, [r3, #8]
 800d690:	4b08      	ldr	r3, [pc, #32]	; (800d6b4 <tcp_receive+0x888>)
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	899b      	ldrh	r3, [r3, #12]
 800d696:	b29b      	uxth	r3, r3
 800d698:	4618      	mov	r0, r3
 800d69a:	f7fa ff31 	bl	8008500 <lwip_htons>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	f003 0303 	and.w	r3, r3, #3
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00e      	beq.n	800d6c8 <tcp_receive+0x89c>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e00d      	b.n	800d6ca <tcp_receive+0x89e>
 800d6ae:	bf00      	nop
 800d6b0:	2000b12c 	.word	0x2000b12c
 800d6b4:	2000b10c 	.word	0x2000b10c
 800d6b8:	2000b136 	.word	0x2000b136
 800d6bc:	080148d0 	.word	0x080148d0
 800d6c0:	08014c78 	.word	0x08014c78
 800d6c4:	0801491c 	.word	0x0801491c
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	4423      	add	r3, r4
 800d6cc:	b29a      	uxth	r2, r3
 800d6ce:	4b98      	ldr	r3, [pc, #608]	; (800d930 <tcp_receive+0xb04>)
 800d6d0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d6d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d6d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d6dc:	6938      	ldr	r0, [r7, #16]
 800d6de:	f7fd fd3a 	bl	800b156 <tcp_seg_free>
            while (next &&
 800d6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00e      	beq.n	800d706 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d6e8:	4b91      	ldr	r3, [pc, #580]	; (800d930 <tcp_receive+0xb04>)
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	4b91      	ldr	r3, [pc, #580]	; (800d934 <tcp_receive+0xb08>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	441a      	add	r2, r3
 800d6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d6fc:	8909      	ldrh	r1, [r1, #8]
 800d6fe:	440b      	add	r3, r1
 800d700:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d702:	2b00      	cmp	r3, #0
 800d704:	da9a      	bge.n	800d63c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d059      	beq.n	800d7c0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d70c:	4b88      	ldr	r3, [pc, #544]	; (800d930 <tcp_receive+0xb04>)
 800d70e:	881b      	ldrh	r3, [r3, #0]
 800d710:	461a      	mov	r2, r3
 800d712:	4b88      	ldr	r3, [pc, #544]	; (800d934 <tcp_receive+0xb08>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	441a      	add	r2, r3
 800d718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d720:	2b00      	cmp	r3, #0
 800d722:	dd4d      	ble.n	800d7c0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	4b81      	ldr	r3, [pc, #516]	; (800d934 <tcp_receive+0xb08>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	b29b      	uxth	r3, r3
 800d732:	1ad3      	subs	r3, r2, r3
 800d734:	b29a      	uxth	r2, r3
 800d736:	4b80      	ldr	r3, [pc, #512]	; (800d938 <tcp_receive+0xb0c>)
 800d738:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d73a:	4b7f      	ldr	r3, [pc, #508]	; (800d938 <tcp_receive+0xb0c>)
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	899b      	ldrh	r3, [r3, #12]
 800d740:	b29b      	uxth	r3, r3
 800d742:	4618      	mov	r0, r3
 800d744:	f7fa fedc 	bl	8008500 <lwip_htons>
 800d748:	4603      	mov	r3, r0
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	f003 0302 	and.w	r3, r3, #2
 800d750:	2b00      	cmp	r3, #0
 800d752:	d005      	beq.n	800d760 <tcp_receive+0x934>
                inseg.len -= 1;
 800d754:	4b78      	ldr	r3, [pc, #480]	; (800d938 <tcp_receive+0xb0c>)
 800d756:	891b      	ldrh	r3, [r3, #8]
 800d758:	3b01      	subs	r3, #1
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	4b76      	ldr	r3, [pc, #472]	; (800d938 <tcp_receive+0xb0c>)
 800d75e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d760:	4b75      	ldr	r3, [pc, #468]	; (800d938 <tcp_receive+0xb0c>)
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	4a74      	ldr	r2, [pc, #464]	; (800d938 <tcp_receive+0xb0c>)
 800d766:	8912      	ldrh	r2, [r2, #8]
 800d768:	4611      	mov	r1, r2
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fc f8ee 	bl	800994c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d770:	4b71      	ldr	r3, [pc, #452]	; (800d938 <tcp_receive+0xb0c>)
 800d772:	891c      	ldrh	r4, [r3, #8]
 800d774:	4b70      	ldr	r3, [pc, #448]	; (800d938 <tcp_receive+0xb0c>)
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	899b      	ldrh	r3, [r3, #12]
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fa febf 	bl	8008500 <lwip_htons>
 800d782:	4603      	mov	r3, r0
 800d784:	b2db      	uxtb	r3, r3
 800d786:	f003 0303 	and.w	r3, r3, #3
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d001      	beq.n	800d792 <tcp_receive+0x966>
 800d78e:	2301      	movs	r3, #1
 800d790:	e000      	b.n	800d794 <tcp_receive+0x968>
 800d792:	2300      	movs	r3, #0
 800d794:	4423      	add	r3, r4
 800d796:	b29a      	uxth	r2, r3
 800d798:	4b65      	ldr	r3, [pc, #404]	; (800d930 <tcp_receive+0xb04>)
 800d79a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d79c:	4b64      	ldr	r3, [pc, #400]	; (800d930 <tcp_receive+0xb04>)
 800d79e:	881b      	ldrh	r3, [r3, #0]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	4b64      	ldr	r3, [pc, #400]	; (800d934 <tcp_receive+0xb08>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	441a      	add	r2, r3
 800d7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d006      	beq.n	800d7c0 <tcp_receive+0x994>
 800d7b2:	4b62      	ldr	r3, [pc, #392]	; (800d93c <tcp_receive+0xb10>)
 800d7b4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d7b8:	4961      	ldr	r1, [pc, #388]	; (800d940 <tcp_receive+0xb14>)
 800d7ba:	4862      	ldr	r0, [pc, #392]	; (800d944 <tcp_receive+0xb18>)
 800d7bc:	f005 fb0e 	bl	8012ddc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d7c4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d7c6:	4b5a      	ldr	r3, [pc, #360]	; (800d930 <tcp_receive+0xb04>)
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	4b59      	ldr	r3, [pc, #356]	; (800d934 <tcp_receive+0xb08>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	441a      	add	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d7da:	4b55      	ldr	r3, [pc, #340]	; (800d930 <tcp_receive+0xb04>)
 800d7dc:	881b      	ldrh	r3, [r3, #0]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d206      	bcs.n	800d7f0 <tcp_receive+0x9c4>
 800d7e2:	4b56      	ldr	r3, [pc, #344]	; (800d93c <tcp_receive+0xb10>)
 800d7e4:	f240 6207 	movw	r2, #1543	; 0x607
 800d7e8:	4957      	ldr	r1, [pc, #348]	; (800d948 <tcp_receive+0xb1c>)
 800d7ea:	4856      	ldr	r0, [pc, #344]	; (800d944 <tcp_receive+0xb18>)
 800d7ec:	f005 faf6 	bl	8012ddc <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d7f4:	4b4e      	ldr	r3, [pc, #312]	; (800d930 <tcp_receive+0xb04>)
 800d7f6:	881b      	ldrh	r3, [r3, #0]
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	b29a      	uxth	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d800:	6878      	ldr	r0, [r7, #4]
 800d802:	f7fc ffc9 	bl	800a798 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d806:	4b4c      	ldr	r3, [pc, #304]	; (800d938 <tcp_receive+0xb0c>)
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	891b      	ldrh	r3, [r3, #8]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d006      	beq.n	800d81e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d810:	4b49      	ldr	r3, [pc, #292]	; (800d938 <tcp_receive+0xb0c>)
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	4a4d      	ldr	r2, [pc, #308]	; (800d94c <tcp_receive+0xb20>)
 800d816:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d818:	4b47      	ldr	r3, [pc, #284]	; (800d938 <tcp_receive+0xb0c>)
 800d81a:	2200      	movs	r2, #0
 800d81c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d81e:	4b46      	ldr	r3, [pc, #280]	; (800d938 <tcp_receive+0xb0c>)
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	899b      	ldrh	r3, [r3, #12]
 800d824:	b29b      	uxth	r3, r3
 800d826:	4618      	mov	r0, r3
 800d828:	f7fa fe6a 	bl	8008500 <lwip_htons>
 800d82c:	4603      	mov	r3, r0
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	f000 80b8 	beq.w	800d9aa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d83a:	4b45      	ldr	r3, [pc, #276]	; (800d950 <tcp_receive+0xb24>)
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	f043 0320 	orr.w	r3, r3, #32
 800d842:	b2da      	uxtb	r2, r3
 800d844:	4b42      	ldr	r3, [pc, #264]	; (800d950 <tcp_receive+0xb24>)
 800d846:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d848:	e0af      	b.n	800d9aa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d84e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	4a36      	ldr	r2, [pc, #216]	; (800d934 <tcp_receive+0xb08>)
 800d85a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d85c:	68bb      	ldr	r3, [r7, #8]
 800d85e:	891b      	ldrh	r3, [r3, #8]
 800d860:	461c      	mov	r4, r3
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	899b      	ldrh	r3, [r3, #12]
 800d868:	b29b      	uxth	r3, r3
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fa fe48 	bl	8008500 <lwip_htons>
 800d870:	4603      	mov	r3, r0
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 0303 	and.w	r3, r3, #3
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d001      	beq.n	800d880 <tcp_receive+0xa54>
 800d87c:	2301      	movs	r3, #1
 800d87e:	e000      	b.n	800d882 <tcp_receive+0xa56>
 800d880:	2300      	movs	r3, #0
 800d882:	191a      	adds	r2, r3, r4
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d888:	441a      	add	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d892:	461c      	mov	r4, r3
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	891b      	ldrh	r3, [r3, #8]
 800d898:	461d      	mov	r5, r3
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	899b      	ldrh	r3, [r3, #12]
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f7fa fe2c 	bl	8008500 <lwip_htons>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	f003 0303 	and.w	r3, r3, #3
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d001      	beq.n	800d8b8 <tcp_receive+0xa8c>
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e000      	b.n	800d8ba <tcp_receive+0xa8e>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	442b      	add	r3, r5
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	d206      	bcs.n	800d8ce <tcp_receive+0xaa2>
 800d8c0:	4b1e      	ldr	r3, [pc, #120]	; (800d93c <tcp_receive+0xb10>)
 800d8c2:	f240 622b 	movw	r2, #1579	; 0x62b
 800d8c6:	4923      	ldr	r1, [pc, #140]	; (800d954 <tcp_receive+0xb28>)
 800d8c8:	481e      	ldr	r0, [pc, #120]	; (800d944 <tcp_receive+0xb18>)
 800d8ca:	f005 fa87 	bl	8012ddc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	891b      	ldrh	r3, [r3, #8]
 800d8d2:	461c      	mov	r4, r3
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	899b      	ldrh	r3, [r3, #12]
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fa fe0f 	bl	8008500 <lwip_htons>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	f003 0303 	and.w	r3, r3, #3
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <tcp_receive+0xac6>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e000      	b.n	800d8f4 <tcp_receive+0xac8>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	1919      	adds	r1, r3, r4
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d8fa:	b28b      	uxth	r3, r1
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d904:	6878      	ldr	r0, [r7, #4]
 800d906:	f7fc ff47 	bl	800a798 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	891b      	ldrh	r3, [r3, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d028      	beq.n	800d966 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d914:	4b0d      	ldr	r3, [pc, #52]	; (800d94c <tcp_receive+0xb20>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d01d      	beq.n	800d958 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d91c:	4b0b      	ldr	r3, [pc, #44]	; (800d94c <tcp_receive+0xb20>)
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	f7fc fa64 	bl	8009df4 <pbuf_cat>
 800d92c:	e018      	b.n	800d960 <tcp_receive+0xb34>
 800d92e:	bf00      	nop
 800d930:	2000b136 	.word	0x2000b136
 800d934:	2000b12c 	.word	0x2000b12c
 800d938:	2000b10c 	.word	0x2000b10c
 800d93c:	080148d0 	.word	0x080148d0
 800d940:	08014cb0 	.word	0x08014cb0
 800d944:	0801491c 	.word	0x0801491c
 800d948:	08014cec 	.word	0x08014cec
 800d94c:	2000b13c 	.word	0x2000b13c
 800d950:	2000b139 	.word	0x2000b139
 800d954:	08014d0c 	.word	0x08014d0c
            } else {
              recv_data = cseg->p;
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	4a70      	ldr	r2, [pc, #448]	; (800db20 <tcp_receive+0xcf4>)
 800d95e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	2200      	movs	r2, #0
 800d964:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	899b      	ldrh	r3, [r3, #12]
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fa fdc6 	bl	8008500 <lwip_htons>
 800d974:	4603      	mov	r3, r0
 800d976:	b2db      	uxtb	r3, r3
 800d978:	f003 0301 	and.w	r3, r3, #1
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d00d      	beq.n	800d99c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d980:	4b68      	ldr	r3, [pc, #416]	; (800db24 <tcp_receive+0xcf8>)
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	f043 0320 	orr.w	r3, r3, #32
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	4b66      	ldr	r3, [pc, #408]	; (800db24 <tcp_receive+0xcf8>)
 800d98c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	7d1b      	ldrb	r3, [r3, #20]
 800d992:	2b04      	cmp	r3, #4
 800d994:	d102      	bne.n	800d99c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2207      	movs	r2, #7
 800d99a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d9a4:	68b8      	ldr	r0, [r7, #8]
 800d9a6:	f7fd fbd6 	bl	800b156 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d008      	beq.n	800d9c4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	685a      	ldr	r2, [r3, #4]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	f43f af43 	beq.w	800d84a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	8b5b      	ldrh	r3, [r3, #26]
 800d9c8:	f003 0301 	and.w	r3, r3, #1
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00e      	beq.n	800d9ee <tcp_receive+0xbc2>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	8b5b      	ldrh	r3, [r3, #26]
 800d9d4:	f023 0301 	bic.w	r3, r3, #1
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	835a      	strh	r2, [r3, #26]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	8b5b      	ldrh	r3, [r3, #26]
 800d9e2:	f043 0302 	orr.w	r3, r3, #2
 800d9e6:	b29a      	uxth	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d9ec:	e188      	b.n	800dd00 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	8b5b      	ldrh	r3, [r3, #26]
 800d9f2:	f043 0301 	orr.w	r3, r3, #1
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d9fc:	e180      	b.n	800dd00 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da02:	2b00      	cmp	r3, #0
 800da04:	d106      	bne.n	800da14 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800da06:	4848      	ldr	r0, [pc, #288]	; (800db28 <tcp_receive+0xcfc>)
 800da08:	f7fd fbbe 	bl	800b188 <tcp_seg_copy>
 800da0c:	4602      	mov	r2, r0
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	675a      	str	r2, [r3, #116]	; 0x74
 800da12:	e16d      	b.n	800dcf0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800da14:	2300      	movs	r3, #0
 800da16:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800da1e:	e157      	b.n	800dcd0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800da20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	685a      	ldr	r2, [r3, #4]
 800da26:	4b41      	ldr	r3, [pc, #260]	; (800db2c <tcp_receive+0xd00>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d11d      	bne.n	800da6a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800da2e:	4b3e      	ldr	r3, [pc, #248]	; (800db28 <tcp_receive+0xcfc>)
 800da30:	891a      	ldrh	r2, [r3, #8]
 800da32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da34:	891b      	ldrh	r3, [r3, #8]
 800da36:	429a      	cmp	r2, r3
 800da38:	f240 814f 	bls.w	800dcda <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800da3c:	483a      	ldr	r0, [pc, #232]	; (800db28 <tcp_receive+0xcfc>)
 800da3e:	f7fd fba3 	bl	800b188 <tcp_seg_copy>
 800da42:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	2b00      	cmp	r3, #0
 800da48:	f000 8149 	beq.w	800dcde <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800da4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800da52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da54:	697a      	ldr	r2, [r7, #20]
 800da56:	601a      	str	r2, [r3, #0]
 800da58:	e002      	b.n	800da60 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	697a      	ldr	r2, [r7, #20]
 800da5e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800da60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da62:	6978      	ldr	r0, [r7, #20]
 800da64:	f7ff f8de 	bl	800cc24 <tcp_oos_insert_segment>
                }
                break;
 800da68:	e139      	b.n	800dcde <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800da6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d117      	bne.n	800daa0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800da70:	4b2e      	ldr	r3, [pc, #184]	; (800db2c <tcp_receive+0xd00>)
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	1ad3      	subs	r3, r2, r3
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	da57      	bge.n	800db30 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800da80:	4829      	ldr	r0, [pc, #164]	; (800db28 <tcp_receive+0xcfc>)
 800da82:	f7fd fb81 	bl	800b188 <tcp_seg_copy>
 800da86:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f000 8129 	beq.w	800dce2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	69ba      	ldr	r2, [r7, #24]
 800da94:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800da96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800da98:	69b8      	ldr	r0, [r7, #24]
 800da9a:	f7ff f8c3 	bl	800cc24 <tcp_oos_insert_segment>
                  }
                  break;
 800da9e:	e120      	b.n	800dce2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800daa0:	4b22      	ldr	r3, [pc, #136]	; (800db2c <tcp_receive+0xd00>)
 800daa2:	681a      	ldr	r2, [r3, #0]
 800daa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	1ad3      	subs	r3, r2, r3
 800daac:	3b01      	subs	r3, #1
 800daae:	2b00      	cmp	r3, #0
 800dab0:	db3e      	blt.n	800db30 <tcp_receive+0xd04>
 800dab2:	4b1e      	ldr	r3, [pc, #120]	; (800db2c <tcp_receive+0xd00>)
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	1ad3      	subs	r3, r2, r3
 800dabe:	3301      	adds	r3, #1
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	dc35      	bgt.n	800db30 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dac4:	4818      	ldr	r0, [pc, #96]	; (800db28 <tcp_receive+0xcfc>)
 800dac6:	f7fd fb5f 	bl	800b188 <tcp_seg_copy>
 800daca:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f000 8109 	beq.w	800dce6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800dad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dadc:	8912      	ldrh	r2, [r2, #8]
 800dade:	441a      	add	r2, r3
 800dae0:	4b12      	ldr	r3, [pc, #72]	; (800db2c <tcp_receive+0xd00>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	1ad3      	subs	r3, r2, r3
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	dd12      	ble.n	800db10 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800daea:	4b10      	ldr	r3, [pc, #64]	; (800db2c <tcp_receive+0xd00>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	b29a      	uxth	r2, r3
 800daf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	b29a      	uxth	r2, r3
 800dafc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dafe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800db00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db02:	685a      	ldr	r2, [r3, #4]
 800db04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db06:	891b      	ldrh	r3, [r3, #8]
 800db08:	4619      	mov	r1, r3
 800db0a:	4610      	mov	r0, r2
 800db0c:	f7fb ff1e 	bl	800994c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800db10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db12:	69fa      	ldr	r2, [r7, #28]
 800db14:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800db16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db18:	69f8      	ldr	r0, [r7, #28]
 800db1a:	f7ff f883 	bl	800cc24 <tcp_oos_insert_segment>
                  }
                  break;
 800db1e:	e0e2      	b.n	800dce6 <tcp_receive+0xeba>
 800db20:	2000b13c 	.word	0x2000b13c
 800db24:	2000b139 	.word	0x2000b139
 800db28:	2000b10c 	.word	0x2000b10c
 800db2c:	2000b12c 	.word	0x2000b12c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800db30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db32:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800db34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f040 80c6 	bne.w	800dcca <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800db3e:	4b80      	ldr	r3, [pc, #512]	; (800dd40 <tcp_receive+0xf14>)
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db44:	68db      	ldr	r3, [r3, #12]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	f340 80bd 	ble.w	800dcca <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800db50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	899b      	ldrh	r3, [r3, #12]
 800db56:	b29b      	uxth	r3, r3
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fa fcd1 	bl	8008500 <lwip_htons>
 800db5e:	4603      	mov	r3, r0
 800db60:	b2db      	uxtb	r3, r3
 800db62:	f003 0301 	and.w	r3, r3, #1
 800db66:	2b00      	cmp	r3, #0
 800db68:	f040 80bf 	bne.w	800dcea <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800db6c:	4875      	ldr	r0, [pc, #468]	; (800dd44 <tcp_receive+0xf18>)
 800db6e:	f7fd fb0b 	bl	800b188 <tcp_seg_copy>
 800db72:	4602      	mov	r2, r0
 800db74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db76:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800db78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f000 80b6 	beq.w	800dcee <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800db82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db84:	68db      	ldr	r3, [r3, #12]
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db8a:	8912      	ldrh	r2, [r2, #8]
 800db8c:	441a      	add	r2, r3
 800db8e:	4b6c      	ldr	r3, [pc, #432]	; (800dd40 <tcp_receive+0xf14>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	2b00      	cmp	r3, #0
 800db96:	dd12      	ble.n	800dbbe <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800db98:	4b69      	ldr	r3, [pc, #420]	; (800dd40 <tcp_receive+0xf14>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	1ad3      	subs	r3, r2, r3
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb0:	685a      	ldr	r2, [r3, #4]
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb4:	891b      	ldrh	r3, [r3, #8]
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	4610      	mov	r0, r2
 800dbba:	f7fb fec7 	bl	800994c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dbbe:	4b62      	ldr	r3, [pc, #392]	; (800dd48 <tcp_receive+0xf1c>)
 800dbc0:	881b      	ldrh	r3, [r3, #0]
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	4b5e      	ldr	r3, [pc, #376]	; (800dd40 <tcp_receive+0xf14>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	441a      	add	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbce:	6879      	ldr	r1, [r7, #4]
 800dbd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dbd2:	440b      	add	r3, r1
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f340 8089 	ble.w	800dcee <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	68db      	ldr	r3, [r3, #12]
 800dbe2:	899b      	ldrh	r3, [r3, #12]
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7fa fc8a 	bl	8008500 <lwip_htons>
 800dbec:	4603      	mov	r3, r0
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	f003 0301 	and.w	r3, r3, #1
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d022      	beq.n	800dc3e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800dbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	899b      	ldrh	r3, [r3, #12]
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	b21b      	sxth	r3, r3
 800dc04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dc08:	b21c      	sxth	r4, r3
 800dc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	899b      	ldrh	r3, [r3, #12]
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fa fc73 	bl	8008500 <lwip_htons>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7fa fc6a 	bl	8008500 <lwip_htons>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	b21b      	sxth	r3, r3
 800dc30:	4323      	orrs	r3, r4
 800dc32:	b21a      	sxth	r2, r3
 800dc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	b292      	uxth	r2, r2
 800dc3c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc48:	4413      	add	r3, r2
 800dc4a:	b299      	uxth	r1, r3
 800dc4c:	4b3c      	ldr	r3, [pc, #240]	; (800dd40 <tcp_receive+0xf14>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	1a8a      	subs	r2, r1, r2
 800dc58:	b292      	uxth	r2, r2
 800dc5a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	685a      	ldr	r2, [r3, #4]
 800dc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	891b      	ldrh	r3, [r3, #8]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	4610      	mov	r0, r2
 800dc6c:	f7fb fe6e 	bl	800994c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800dc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	891c      	ldrh	r4, [r3, #8]
 800dc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	899b      	ldrh	r3, [r3, #12]
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7fa fc3d 	bl	8008500 <lwip_htons>
 800dc86:	4603      	mov	r3, r0
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	f003 0303 	and.w	r3, r3, #3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <tcp_receive+0xe6a>
 800dc92:	2301      	movs	r3, #1
 800dc94:	e000      	b.n	800dc98 <tcp_receive+0xe6c>
 800dc96:	2300      	movs	r3, #0
 800dc98:	4423      	add	r3, r4
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	4b2a      	ldr	r3, [pc, #168]	; (800dd48 <tcp_receive+0xf1c>)
 800dc9e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dca0:	4b29      	ldr	r3, [pc, #164]	; (800dd48 <tcp_receive+0xf1c>)
 800dca2:	881b      	ldrh	r3, [r3, #0]
 800dca4:	461a      	mov	r2, r3
 800dca6:	4b26      	ldr	r3, [pc, #152]	; (800dd40 <tcp_receive+0xf14>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	441a      	add	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb0:	6879      	ldr	r1, [r7, #4]
 800dcb2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dcb4:	440b      	add	r3, r1
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d019      	beq.n	800dcee <tcp_receive+0xec2>
 800dcba:	4b24      	ldr	r3, [pc, #144]	; (800dd4c <tcp_receive+0xf20>)
 800dcbc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800dcc0:	4923      	ldr	r1, [pc, #140]	; (800dd50 <tcp_receive+0xf24>)
 800dcc2:	4824      	ldr	r0, [pc, #144]	; (800dd54 <tcp_receive+0xf28>)
 800dcc4:	f005 f88a 	bl	8012ddc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dcc8:	e011      	b.n	800dcee <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	63bb      	str	r3, [r7, #56]	; 0x38
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f47f aea4 	bne.w	800da20 <tcp_receive+0xbf4>
 800dcd8:	e00a      	b.n	800dcf0 <tcp_receive+0xec4>
                break;
 800dcda:	bf00      	nop
 800dcdc:	e008      	b.n	800dcf0 <tcp_receive+0xec4>
                break;
 800dcde:	bf00      	nop
 800dce0:	e006      	b.n	800dcf0 <tcp_receive+0xec4>
                  break;
 800dce2:	bf00      	nop
 800dce4:	e004      	b.n	800dcf0 <tcp_receive+0xec4>
                  break;
 800dce6:	bf00      	nop
 800dce8:	e002      	b.n	800dcf0 <tcp_receive+0xec4>
                  break;
 800dcea:	bf00      	nop
 800dcec:	e000      	b.n	800dcf0 <tcp_receive+0xec4>
                break;
 800dcee:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f001 fa33 	bl	800f15c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dcf6:	e003      	b.n	800dd00 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f001 fa2f 	bl	800f15c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dcfe:	e01a      	b.n	800dd36 <tcp_receive+0xf0a>
 800dd00:	e019      	b.n	800dd36 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dd02:	4b0f      	ldr	r3, [pc, #60]	; (800dd40 <tcp_receive+0xf14>)
 800dd04:	681a      	ldr	r2, [r3, #0]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	db0a      	blt.n	800dd26 <tcp_receive+0xefa>
 800dd10:	4b0b      	ldr	r3, [pc, #44]	; (800dd40 <tcp_receive+0xf14>)
 800dd12:	681a      	ldr	r2, [r3, #0]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd18:	6879      	ldr	r1, [r7, #4]
 800dd1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd1c:	440b      	add	r3, r1
 800dd1e:	1ad3      	subs	r3, r2, r3
 800dd20:	3301      	adds	r3, #1
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	dd07      	ble.n	800dd36 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	8b5b      	ldrh	r3, [r3, #26]
 800dd2a:	f043 0302 	orr.w	r3, r3, #2
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800dd34:	e7ff      	b.n	800dd36 <tcp_receive+0xf0a>
 800dd36:	bf00      	nop
 800dd38:	3750      	adds	r7, #80	; 0x50
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bdb0      	pop	{r4, r5, r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	2000b12c 	.word	0x2000b12c
 800dd44:	2000b10c 	.word	0x2000b10c
 800dd48:	2000b136 	.word	0x2000b136
 800dd4c:	080148d0 	.word	0x080148d0
 800dd50:	08014c78 	.word	0x08014c78
 800dd54:	0801491c 	.word	0x0801491c

0800dd58 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b083      	sub	sp, #12
 800dd5c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800dd5e:	4b15      	ldr	r3, [pc, #84]	; (800ddb4 <tcp_get_next_optbyte+0x5c>)
 800dd60:	881b      	ldrh	r3, [r3, #0]
 800dd62:	1c5a      	adds	r2, r3, #1
 800dd64:	b291      	uxth	r1, r2
 800dd66:	4a13      	ldr	r2, [pc, #76]	; (800ddb4 <tcp_get_next_optbyte+0x5c>)
 800dd68:	8011      	strh	r1, [r2, #0]
 800dd6a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dd6c:	4b12      	ldr	r3, [pc, #72]	; (800ddb8 <tcp_get_next_optbyte+0x60>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d004      	beq.n	800dd7e <tcp_get_next_optbyte+0x26>
 800dd74:	4b11      	ldr	r3, [pc, #68]	; (800ddbc <tcp_get_next_optbyte+0x64>)
 800dd76:	881b      	ldrh	r3, [r3, #0]
 800dd78:	88fa      	ldrh	r2, [r7, #6]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d208      	bcs.n	800dd90 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800dd7e:	4b10      	ldr	r3, [pc, #64]	; (800ddc0 <tcp_get_next_optbyte+0x68>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	3314      	adds	r3, #20
 800dd84:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800dd86:	88fb      	ldrh	r3, [r7, #6]
 800dd88:	683a      	ldr	r2, [r7, #0]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	e00b      	b.n	800dda8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800dd90:	88fb      	ldrh	r3, [r7, #6]
 800dd92:	b2da      	uxtb	r2, r3
 800dd94:	4b09      	ldr	r3, [pc, #36]	; (800ddbc <tcp_get_next_optbyte+0x64>)
 800dd96:	881b      	ldrh	r3, [r3, #0]
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	1ad3      	subs	r3, r2, r3
 800dd9c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800dd9e:	4b06      	ldr	r3, [pc, #24]	; (800ddb8 <tcp_get_next_optbyte+0x60>)
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	797b      	ldrb	r3, [r7, #5]
 800dda4:	4413      	add	r3, r2
 800dda6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	370c      	adds	r7, #12
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr
 800ddb4:	2000b128 	.word	0x2000b128
 800ddb8:	2000b124 	.word	0x2000b124
 800ddbc:	2000b122 	.word	0x2000b122
 800ddc0:	2000b11c 	.word	0x2000b11c

0800ddc4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d106      	bne.n	800dde0 <tcp_parseopt+0x1c>
 800ddd2:	4b32      	ldr	r3, [pc, #200]	; (800de9c <tcp_parseopt+0xd8>)
 800ddd4:	f240 727d 	movw	r2, #1917	; 0x77d
 800ddd8:	4931      	ldr	r1, [pc, #196]	; (800dea0 <tcp_parseopt+0xdc>)
 800ddda:	4832      	ldr	r0, [pc, #200]	; (800dea4 <tcp_parseopt+0xe0>)
 800dddc:	f004 fffe 	bl	8012ddc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800dde0:	4b31      	ldr	r3, [pc, #196]	; (800dea8 <tcp_parseopt+0xe4>)
 800dde2:	881b      	ldrh	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d055      	beq.n	800de94 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dde8:	4b30      	ldr	r3, [pc, #192]	; (800deac <tcp_parseopt+0xe8>)
 800ddea:	2200      	movs	r2, #0
 800ddec:	801a      	strh	r2, [r3, #0]
 800ddee:	e045      	b.n	800de7c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ddf0:	f7ff ffb2 	bl	800dd58 <tcp_get_next_optbyte>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ddf8:	7bfb      	ldrb	r3, [r7, #15]
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	d006      	beq.n	800de0c <tcp_parseopt+0x48>
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	dc2b      	bgt.n	800de5a <tcp_parseopt+0x96>
 800de02:	2b00      	cmp	r3, #0
 800de04:	d041      	beq.n	800de8a <tcp_parseopt+0xc6>
 800de06:	2b01      	cmp	r3, #1
 800de08:	d127      	bne.n	800de5a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800de0a:	e037      	b.n	800de7c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800de0c:	f7ff ffa4 	bl	800dd58 <tcp_get_next_optbyte>
 800de10:	4603      	mov	r3, r0
 800de12:	2b04      	cmp	r3, #4
 800de14:	d13b      	bne.n	800de8e <tcp_parseopt+0xca>
 800de16:	4b25      	ldr	r3, [pc, #148]	; (800deac <tcp_parseopt+0xe8>)
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	3301      	adds	r3, #1
 800de1c:	4a22      	ldr	r2, [pc, #136]	; (800dea8 <tcp_parseopt+0xe4>)
 800de1e:	8812      	ldrh	r2, [r2, #0]
 800de20:	4293      	cmp	r3, r2
 800de22:	da34      	bge.n	800de8e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800de24:	f7ff ff98 	bl	800dd58 <tcp_get_next_optbyte>
 800de28:	4603      	mov	r3, r0
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	021b      	lsls	r3, r3, #8
 800de2e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800de30:	f7ff ff92 	bl	800dd58 <tcp_get_next_optbyte>
 800de34:	4603      	mov	r3, r0
 800de36:	b29a      	uxth	r2, r3
 800de38:	89bb      	ldrh	r3, [r7, #12]
 800de3a:	4313      	orrs	r3, r2
 800de3c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800de3e:	89bb      	ldrh	r3, [r7, #12]
 800de40:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800de44:	d804      	bhi.n	800de50 <tcp_parseopt+0x8c>
 800de46:	89bb      	ldrh	r3, [r7, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <tcp_parseopt+0x8c>
 800de4c:	89ba      	ldrh	r2, [r7, #12]
 800de4e:	e001      	b.n	800de54 <tcp_parseopt+0x90>
 800de50:	f44f 7206 	mov.w	r2, #536	; 0x218
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800de58:	e010      	b.n	800de7c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800de5a:	f7ff ff7d 	bl	800dd58 <tcp_get_next_optbyte>
 800de5e:	4603      	mov	r3, r0
 800de60:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800de62:	7afb      	ldrb	r3, [r7, #11]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d914      	bls.n	800de92 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800de68:	7afb      	ldrb	r3, [r7, #11]
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	4b0f      	ldr	r3, [pc, #60]	; (800deac <tcp_parseopt+0xe8>)
 800de6e:	881b      	ldrh	r3, [r3, #0]
 800de70:	4413      	add	r3, r2
 800de72:	b29b      	uxth	r3, r3
 800de74:	3b02      	subs	r3, #2
 800de76:	b29a      	uxth	r2, r3
 800de78:	4b0c      	ldr	r3, [pc, #48]	; (800deac <tcp_parseopt+0xe8>)
 800de7a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800de7c:	4b0b      	ldr	r3, [pc, #44]	; (800deac <tcp_parseopt+0xe8>)
 800de7e:	881a      	ldrh	r2, [r3, #0]
 800de80:	4b09      	ldr	r3, [pc, #36]	; (800dea8 <tcp_parseopt+0xe4>)
 800de82:	881b      	ldrh	r3, [r3, #0]
 800de84:	429a      	cmp	r2, r3
 800de86:	d3b3      	bcc.n	800ddf0 <tcp_parseopt+0x2c>
 800de88:	e004      	b.n	800de94 <tcp_parseopt+0xd0>
          return;
 800de8a:	bf00      	nop
 800de8c:	e002      	b.n	800de94 <tcp_parseopt+0xd0>
            return;
 800de8e:	bf00      	nop
 800de90:	e000      	b.n	800de94 <tcp_parseopt+0xd0>
            return;
 800de92:	bf00      	nop
      }
    }
  }
}
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	080148d0 	.word	0x080148d0
 800dea0:	08014d34 	.word	0x08014d34
 800dea4:	0801491c 	.word	0x0801491c
 800dea8:	2000b120 	.word	0x2000b120
 800deac:	2000b128 	.word	0x2000b128

0800deb0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800deb0:	b480      	push	{r7}
 800deb2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800deb4:	4b05      	ldr	r3, [pc, #20]	; (800decc <tcp_trigger_input_pcb_close+0x1c>)
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f043 0310 	orr.w	r3, r3, #16
 800debc:	b2da      	uxtb	r2, r3
 800debe:	4b03      	ldr	r3, [pc, #12]	; (800decc <tcp_trigger_input_pcb_close+0x1c>)
 800dec0:	701a      	strb	r2, [r3, #0]
}
 800dec2:	bf00      	nop
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	2000b139 	.word	0x2000b139

0800ded0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d00a      	beq.n	800def8 <tcp_route+0x28>
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	7a1b      	ldrb	r3, [r3, #8]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d006      	beq.n	800def8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	7a1b      	ldrb	r3, [r3, #8]
 800deee:	4618      	mov	r0, r3
 800def0:	f7fb fb24 	bl	800953c <netif_get_by_index>
 800def4:	4603      	mov	r3, r0
 800def6:	e003      	b.n	800df00 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f002 fead 	bl	8010c58 <ip4_route>
 800defe:	4603      	mov	r3, r0
  }
}
 800df00:	4618      	mov	r0, r3
 800df02:	3710      	adds	r7, #16
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800df08:	b590      	push	{r4, r7, lr}
 800df0a:	b087      	sub	sp, #28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	603b      	str	r3, [r7, #0]
 800df14:	4613      	mov	r3, r2
 800df16:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d105      	bne.n	800df2a <tcp_create_segment+0x22>
 800df1e:	4b44      	ldr	r3, [pc, #272]	; (800e030 <tcp_create_segment+0x128>)
 800df20:	22a3      	movs	r2, #163	; 0xa3
 800df22:	4944      	ldr	r1, [pc, #272]	; (800e034 <tcp_create_segment+0x12c>)
 800df24:	4844      	ldr	r0, [pc, #272]	; (800e038 <tcp_create_segment+0x130>)
 800df26:	f004 ff59 	bl	8012ddc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d105      	bne.n	800df3c <tcp_create_segment+0x34>
 800df30:	4b3f      	ldr	r3, [pc, #252]	; (800e030 <tcp_create_segment+0x128>)
 800df32:	22a4      	movs	r2, #164	; 0xa4
 800df34:	4941      	ldr	r1, [pc, #260]	; (800e03c <tcp_create_segment+0x134>)
 800df36:	4840      	ldr	r0, [pc, #256]	; (800e038 <tcp_create_segment+0x130>)
 800df38:	f004 ff50 	bl	8012ddc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800df3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	b2db      	uxtb	r3, r3
 800df44:	f003 0304 	and.w	r3, r3, #4
 800df48:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800df4a:	2003      	movs	r0, #3
 800df4c:	f7fa ff8e 	bl	8008e6c <memp_malloc>
 800df50:	6138      	str	r0, [r7, #16]
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d104      	bne.n	800df62 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800df58:	68b8      	ldr	r0, [r7, #8]
 800df5a:	f7fb fe7d 	bl	8009c58 <pbuf_free>
    return NULL;
 800df5e:	2300      	movs	r3, #0
 800df60:	e061      	b.n	800e026 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800df68:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2200      	movs	r2, #0
 800df6e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	68ba      	ldr	r2, [r7, #8]
 800df74:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	891a      	ldrh	r2, [r3, #8]
 800df7a:	7dfb      	ldrb	r3, [r7, #23]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	429a      	cmp	r2, r3
 800df80:	d205      	bcs.n	800df8e <tcp_create_segment+0x86>
 800df82:	4b2b      	ldr	r3, [pc, #172]	; (800e030 <tcp_create_segment+0x128>)
 800df84:	22b0      	movs	r2, #176	; 0xb0
 800df86:	492e      	ldr	r1, [pc, #184]	; (800e040 <tcp_create_segment+0x138>)
 800df88:	482b      	ldr	r0, [pc, #172]	; (800e038 <tcp_create_segment+0x130>)
 800df8a:	f004 ff27 	bl	8012ddc <iprintf>
  seg->len = p->tot_len - optlen;
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	891a      	ldrh	r2, [r3, #8]
 800df92:	7dfb      	ldrb	r3, [r7, #23]
 800df94:	b29b      	uxth	r3, r3
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	b29a      	uxth	r2, r3
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800df9e:	2114      	movs	r1, #20
 800dfa0:	68b8      	ldr	r0, [r7, #8]
 800dfa2:	f7fb fdc3 	bl	8009b2c <pbuf_add_header>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d004      	beq.n	800dfb6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800dfac:	6938      	ldr	r0, [r7, #16]
 800dfae:	f7fd f8d2 	bl	800b156 <tcp_seg_free>
    return NULL;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	e037      	b.n	800e026 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dfb6:	693b      	ldr	r3, [r7, #16]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	685a      	ldr	r2, [r3, #4]
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	8ada      	ldrh	r2, [r3, #22]
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	68dc      	ldr	r4, [r3, #12]
 800dfc8:	4610      	mov	r0, r2
 800dfca:	f7fa fa99 	bl	8008500 <lwip_htons>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	8b1a      	ldrh	r2, [r3, #24]
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	68dc      	ldr	r4, [r3, #12]
 800dfda:	4610      	mov	r0, r2
 800dfdc:	f7fa fa90 	bl	8008500 <lwip_htons>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	68dc      	ldr	r4, [r3, #12]
 800dfe8:	6838      	ldr	r0, [r7, #0]
 800dfea:	f7fa fa9e 	bl	800852a <lwip_htonl>
 800dfee:	4603      	mov	r3, r0
 800dff0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800dff2:	7dfb      	ldrb	r3, [r7, #23]
 800dff4:	089b      	lsrs	r3, r3, #2
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	3305      	adds	r3, #5
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	031b      	lsls	r3, r3, #12
 800e000:	b29a      	uxth	r2, r3
 800e002:	79fb      	ldrb	r3, [r7, #7]
 800e004:	b29b      	uxth	r3, r3
 800e006:	4313      	orrs	r3, r2
 800e008:	b29a      	uxth	r2, r3
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	68dc      	ldr	r4, [r3, #12]
 800e00e:	4610      	mov	r0, r2
 800e010:	f7fa fa76 	bl	8008500 <lwip_htons>
 800e014:	4603      	mov	r3, r0
 800e016:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	2200      	movs	r2, #0
 800e01e:	749a      	strb	r2, [r3, #18]
 800e020:	2200      	movs	r2, #0
 800e022:	74da      	strb	r2, [r3, #19]
  return seg;
 800e024:	693b      	ldr	r3, [r7, #16]
}
 800e026:	4618      	mov	r0, r3
 800e028:	371c      	adds	r7, #28
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd90      	pop	{r4, r7, pc}
 800e02e:	bf00      	nop
 800e030:	08014d50 	.word	0x08014d50
 800e034:	08014d84 	.word	0x08014d84
 800e038:	08014da4 	.word	0x08014da4
 800e03c:	08014dcc 	.word	0x08014dcc
 800e040:	08014df0 	.word	0x08014df0

0800e044 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e044:	b590      	push	{r4, r7, lr}
 800e046:	b08b      	sub	sp, #44	; 0x2c
 800e048:	af02      	add	r7, sp, #8
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	460b      	mov	r3, r1
 800e04e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e050:	2300      	movs	r3, #0
 800e052:	61fb      	str	r3, [r7, #28]
 800e054:	2300      	movs	r3, #0
 800e056:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e058:	2300      	movs	r3, #0
 800e05a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d106      	bne.n	800e070 <tcp_split_unsent_seg+0x2c>
 800e062:	4b95      	ldr	r3, [pc, #596]	; (800e2b8 <tcp_split_unsent_seg+0x274>)
 800e064:	f240 324b 	movw	r2, #843	; 0x34b
 800e068:	4994      	ldr	r1, [pc, #592]	; (800e2bc <tcp_split_unsent_seg+0x278>)
 800e06a:	4895      	ldr	r0, [pc, #596]	; (800e2c0 <tcp_split_unsent_seg+0x27c>)
 800e06c:	f004 feb6 	bl	8012ddc <iprintf>

  useg = pcb->unsent;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e074:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d102      	bne.n	800e082 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e07c:	f04f 33ff 	mov.w	r3, #4294967295
 800e080:	e116      	b.n	800e2b0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e082:	887b      	ldrh	r3, [r7, #2]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d109      	bne.n	800e09c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e088:	4b8b      	ldr	r3, [pc, #556]	; (800e2b8 <tcp_split_unsent_seg+0x274>)
 800e08a:	f240 3253 	movw	r2, #851	; 0x353
 800e08e:	498d      	ldr	r1, [pc, #564]	; (800e2c4 <tcp_split_unsent_seg+0x280>)
 800e090:	488b      	ldr	r0, [pc, #556]	; (800e2c0 <tcp_split_unsent_seg+0x27c>)
 800e092:	f004 fea3 	bl	8012ddc <iprintf>
    return ERR_VAL;
 800e096:	f06f 0305 	mvn.w	r3, #5
 800e09a:	e109      	b.n	800e2b0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	891b      	ldrh	r3, [r3, #8]
 800e0a0:	887a      	ldrh	r2, [r7, #2]
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d301      	bcc.n	800e0aa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	e102      	b.n	800e2b0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0ae:	887a      	ldrh	r2, [r7, #2]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d906      	bls.n	800e0c2 <tcp_split_unsent_seg+0x7e>
 800e0b4:	4b80      	ldr	r3, [pc, #512]	; (800e2b8 <tcp_split_unsent_seg+0x274>)
 800e0b6:	f240 325b 	movw	r2, #859	; 0x35b
 800e0ba:	4983      	ldr	r1, [pc, #524]	; (800e2c8 <tcp_split_unsent_seg+0x284>)
 800e0bc:	4880      	ldr	r0, [pc, #512]	; (800e2c0 <tcp_split_unsent_seg+0x27c>)
 800e0be:	f004 fe8d 	bl	8012ddc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	891b      	ldrh	r3, [r3, #8]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d106      	bne.n	800e0d8 <tcp_split_unsent_seg+0x94>
 800e0ca:	4b7b      	ldr	r3, [pc, #492]	; (800e2b8 <tcp_split_unsent_seg+0x274>)
 800e0cc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e0d0:	497e      	ldr	r1, [pc, #504]	; (800e2cc <tcp_split_unsent_seg+0x288>)
 800e0d2:	487b      	ldr	r0, [pc, #492]	; (800e2c0 <tcp_split_unsent_seg+0x27c>)
 800e0d4:	f004 fe82 	bl	8012ddc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	7a9b      	ldrb	r3, [r3, #10]
 800e0dc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e0de:	7bfb      	ldrb	r3, [r7, #15]
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	f003 0304 	and.w	r3, r3, #4
 800e0e8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	891a      	ldrh	r2, [r3, #8]
 800e0ee:	887b      	ldrh	r3, [r7, #2]
 800e0f0:	1ad3      	subs	r3, r2, r3
 800e0f2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e0f4:	7bbb      	ldrb	r3, [r7, #14]
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	89bb      	ldrh	r3, [r7, #12]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e102:	4619      	mov	r1, r3
 800e104:	2036      	movs	r0, #54	; 0x36
 800e106:	f7fb fac3 	bl	8009690 <pbuf_alloc>
 800e10a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f000 80b7 	beq.w	800e282 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	891a      	ldrh	r2, [r3, #8]
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	891b      	ldrh	r3, [r3, #8]
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	b29a      	uxth	r2, r3
 800e122:	887b      	ldrh	r3, [r7, #2]
 800e124:	4413      	add	r3, r2
 800e126:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	6858      	ldr	r0, [r3, #4]
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	685a      	ldr	r2, [r3, #4]
 800e130:	7bbb      	ldrb	r3, [r7, #14]
 800e132:	18d1      	adds	r1, r2, r3
 800e134:	897b      	ldrh	r3, [r7, #10]
 800e136:	89ba      	ldrh	r2, [r7, #12]
 800e138:	f7fb ff84 	bl	800a044 <pbuf_copy_partial>
 800e13c:	4603      	mov	r3, r0
 800e13e:	461a      	mov	r2, r3
 800e140:	89bb      	ldrh	r3, [r7, #12]
 800e142:	4293      	cmp	r3, r2
 800e144:	f040 809f 	bne.w	800e286 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	899b      	ldrh	r3, [r3, #12]
 800e14e:	b29b      	uxth	r3, r3
 800e150:	4618      	mov	r0, r3
 800e152:	f7fa f9d5 	bl	8008500 <lwip_htons>
 800e156:	4603      	mov	r3, r0
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e15e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e160:	2300      	movs	r3, #0
 800e162:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e164:	7efb      	ldrb	r3, [r7, #27]
 800e166:	f003 0308 	and.w	r3, r3, #8
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d007      	beq.n	800e17e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e16e:	7efb      	ldrb	r3, [r7, #27]
 800e170:	f023 0308 	bic.w	r3, r3, #8
 800e174:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e176:	7ebb      	ldrb	r3, [r7, #26]
 800e178:	f043 0308 	orr.w	r3, r3, #8
 800e17c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e17e:	7efb      	ldrb	r3, [r7, #27]
 800e180:	f003 0301 	and.w	r3, r3, #1
 800e184:	2b00      	cmp	r3, #0
 800e186:	d007      	beq.n	800e198 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e188:	7efb      	ldrb	r3, [r7, #27]
 800e18a:	f023 0301 	bic.w	r3, r3, #1
 800e18e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e190:	7ebb      	ldrb	r3, [r7, #26]
 800e192:	f043 0301 	orr.w	r3, r3, #1
 800e196:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fa f9c3 	bl	800852a <lwip_htonl>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	887b      	ldrh	r3, [r7, #2]
 800e1a8:	18d1      	adds	r1, r2, r3
 800e1aa:	7eba      	ldrb	r2, [r7, #26]
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	6939      	ldr	r1, [r7, #16]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7ff fea7 	bl	800df08 <tcp_create_segment>
 800e1ba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d063      	beq.n	800e28a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fb fdd4 	bl	8009d74 <pbuf_clen>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e1d6:	1a9b      	subs	r3, r3, r2
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	6858      	ldr	r0, [r3, #4]
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	891a      	ldrh	r2, [r3, #8]
 800e1ea:	89bb      	ldrh	r3, [r7, #12]
 800e1ec:	1ad3      	subs	r3, r2, r3
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	f7fb fbab 	bl	800994c <pbuf_realloc>
  useg->len -= remainder;
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	891a      	ldrh	r2, [r3, #8]
 800e1fa:	89bb      	ldrh	r3, [r7, #12]
 800e1fc:	1ad3      	subs	r3, r2, r3
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	899b      	ldrh	r3, [r3, #12]
 800e20a:	b29c      	uxth	r4, r3
 800e20c:	7efb      	ldrb	r3, [r7, #27]
 800e20e:	b29b      	uxth	r3, r3
 800e210:	4618      	mov	r0, r3
 800e212:	f7fa f975 	bl	8008500 <lwip_htons>
 800e216:	4603      	mov	r3, r0
 800e218:	461a      	mov	r2, r3
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	4322      	orrs	r2, r4
 800e220:	b292      	uxth	r2, r2
 800e222:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fb fda3 	bl	8009d74 <pbuf_clen>
 800e22e:	4603      	mov	r3, r0
 800e230:	461a      	mov	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e238:	4413      	add	r3, r2
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	4618      	mov	r0, r3
 800e248:	f7fb fd94 	bl	8009d74 <pbuf_clen>
 800e24c:	4603      	mov	r3, r0
 800e24e:	461a      	mov	r2, r3
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e256:	4413      	add	r3, r2
 800e258:	b29a      	uxth	r2, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	69fa      	ldr	r2, [r7, #28]
 800e26c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d103      	bne.n	800e27e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e27e:	2300      	movs	r3, #0
 800e280:	e016      	b.n	800e2b0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e282:	bf00      	nop
 800e284:	e002      	b.n	800e28c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e286:	bf00      	nop
 800e288:	e000      	b.n	800e28c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e28a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d006      	beq.n	800e2a0 <tcp_split_unsent_seg+0x25c>
 800e292:	4b09      	ldr	r3, [pc, #36]	; (800e2b8 <tcp_split_unsent_seg+0x274>)
 800e294:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800e298:	490d      	ldr	r1, [pc, #52]	; (800e2d0 <tcp_split_unsent_seg+0x28c>)
 800e29a:	4809      	ldr	r0, [pc, #36]	; (800e2c0 <tcp_split_unsent_seg+0x27c>)
 800e29c:	f004 fd9e 	bl	8012ddc <iprintf>
  if (p != NULL) {
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d002      	beq.n	800e2ac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e2a6:	6938      	ldr	r0, [r7, #16]
 800e2a8:	f7fb fcd6 	bl	8009c58 <pbuf_free>
  }

  return ERR_MEM;
 800e2ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	3724      	adds	r7, #36	; 0x24
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	bd90      	pop	{r4, r7, pc}
 800e2b8:	08014d50 	.word	0x08014d50
 800e2bc:	080150e4 	.word	0x080150e4
 800e2c0:	08014da4 	.word	0x08014da4
 800e2c4:	08015108 	.word	0x08015108
 800e2c8:	0801512c 	.word	0x0801512c
 800e2cc:	0801513c 	.word	0x0801513c
 800e2d0:	0801514c 	.word	0x0801514c

0800e2d4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e2d4:	b590      	push	{r4, r7, lr}
 800e2d6:	b085      	sub	sp, #20
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d106      	bne.n	800e2f0 <tcp_send_fin+0x1c>
 800e2e2:	4b21      	ldr	r3, [pc, #132]	; (800e368 <tcp_send_fin+0x94>)
 800e2e4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e2e8:	4920      	ldr	r1, [pc, #128]	; (800e36c <tcp_send_fin+0x98>)
 800e2ea:	4821      	ldr	r0, [pc, #132]	; (800e370 <tcp_send_fin+0x9c>)
 800e2ec:	f004 fd76 	bl	8012ddc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d02e      	beq.n	800e356 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2fc:	60fb      	str	r3, [r7, #12]
 800e2fe:	e002      	b.n	800e306 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d1f8      	bne.n	800e300 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	68db      	ldr	r3, [r3, #12]
 800e312:	899b      	ldrh	r3, [r3, #12]
 800e314:	b29b      	uxth	r3, r3
 800e316:	4618      	mov	r0, r3
 800e318:	f7fa f8f2 	bl	8008500 <lwip_htons>
 800e31c:	4603      	mov	r3, r0
 800e31e:	b2db      	uxtb	r3, r3
 800e320:	f003 0307 	and.w	r3, r3, #7
 800e324:	2b00      	cmp	r3, #0
 800e326:	d116      	bne.n	800e356 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	899b      	ldrh	r3, [r3, #12]
 800e32e:	b29c      	uxth	r4, r3
 800e330:	2001      	movs	r0, #1
 800e332:	f7fa f8e5 	bl	8008500 <lwip_htons>
 800e336:	4603      	mov	r3, r0
 800e338:	461a      	mov	r2, r3
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	4322      	orrs	r2, r4
 800e340:	b292      	uxth	r2, r2
 800e342:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	8b5b      	ldrh	r3, [r3, #26]
 800e348:	f043 0320 	orr.w	r3, r3, #32
 800e34c:	b29a      	uxth	r2, r3
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e352:	2300      	movs	r3, #0
 800e354:	e004      	b.n	800e360 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e356:	2101      	movs	r1, #1
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 f80b 	bl	800e374 <tcp_enqueue_flags>
 800e35e:	4603      	mov	r3, r0
}
 800e360:	4618      	mov	r0, r3
 800e362:	3714      	adds	r7, #20
 800e364:	46bd      	mov	sp, r7
 800e366:	bd90      	pop	{r4, r7, pc}
 800e368:	08014d50 	.word	0x08014d50
 800e36c:	08015158 	.word	0x08015158
 800e370:	08014da4 	.word	0x08014da4

0800e374 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b08a      	sub	sp, #40	; 0x28
 800e378:	af02      	add	r7, sp, #8
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	460b      	mov	r3, r1
 800e37e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e380:	2300      	movs	r3, #0
 800e382:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e384:	2300      	movs	r3, #0
 800e386:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e388:	78fb      	ldrb	r3, [r7, #3]
 800e38a:	f003 0303 	and.w	r3, r3, #3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d106      	bne.n	800e3a0 <tcp_enqueue_flags+0x2c>
 800e392:	4b67      	ldr	r3, [pc, #412]	; (800e530 <tcp_enqueue_flags+0x1bc>)
 800e394:	f240 4211 	movw	r2, #1041	; 0x411
 800e398:	4966      	ldr	r1, [pc, #408]	; (800e534 <tcp_enqueue_flags+0x1c0>)
 800e39a:	4867      	ldr	r0, [pc, #412]	; (800e538 <tcp_enqueue_flags+0x1c4>)
 800e39c:	f004 fd1e 	bl	8012ddc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d106      	bne.n	800e3b4 <tcp_enqueue_flags+0x40>
 800e3a6:	4b62      	ldr	r3, [pc, #392]	; (800e530 <tcp_enqueue_flags+0x1bc>)
 800e3a8:	f240 4213 	movw	r2, #1043	; 0x413
 800e3ac:	4963      	ldr	r1, [pc, #396]	; (800e53c <tcp_enqueue_flags+0x1c8>)
 800e3ae:	4862      	ldr	r0, [pc, #392]	; (800e538 <tcp_enqueue_flags+0x1c4>)
 800e3b0:	f004 fd14 	bl	8012ddc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e3b4:	78fb      	ldrb	r3, [r7, #3]
 800e3b6:	f003 0302 	and.w	r3, r3, #2
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d001      	beq.n	800e3c2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e3c2:	7ffb      	ldrb	r3, [r7, #31]
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	f003 0304 	and.w	r3, r3, #4
 800e3cc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e3ce:	7dfb      	ldrb	r3, [r7, #23]
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	2036      	movs	r0, #54	; 0x36
 800e3da:	f7fb f959 	bl	8009690 <pbuf_alloc>
 800e3de:	6138      	str	r0, [r7, #16]
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d109      	bne.n	800e3fa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	8b5b      	ldrh	r3, [r3, #26]
 800e3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f8:	e095      	b.n	800e526 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	895a      	ldrh	r2, [r3, #10]
 800e3fe:	7dfb      	ldrb	r3, [r7, #23]
 800e400:	b29b      	uxth	r3, r3
 800e402:	429a      	cmp	r2, r3
 800e404:	d206      	bcs.n	800e414 <tcp_enqueue_flags+0xa0>
 800e406:	4b4a      	ldr	r3, [pc, #296]	; (800e530 <tcp_enqueue_flags+0x1bc>)
 800e408:	f240 4239 	movw	r2, #1081	; 0x439
 800e40c:	494c      	ldr	r1, [pc, #304]	; (800e540 <tcp_enqueue_flags+0x1cc>)
 800e40e:	484a      	ldr	r0, [pc, #296]	; (800e538 <tcp_enqueue_flags+0x1c4>)
 800e410:	f004 fce4 	bl	8012ddc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e418:	78fa      	ldrb	r2, [r7, #3]
 800e41a:	7ffb      	ldrb	r3, [r7, #31]
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	460b      	mov	r3, r1
 800e420:	6939      	ldr	r1, [r7, #16]
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7ff fd70 	bl	800df08 <tcp_create_segment>
 800e428:	60f8      	str	r0, [r7, #12]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d109      	bne.n	800e444 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	8b5b      	ldrh	r3, [r3, #26]
 800e434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e438:	b29a      	uxth	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e43e:	f04f 33ff 	mov.w	r3, #4294967295
 800e442:	e070      	b.n	800e526 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	f003 0303 	and.w	r3, r3, #3
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d006      	beq.n	800e45e <tcp_enqueue_flags+0xea>
 800e450:	4b37      	ldr	r3, [pc, #220]	; (800e530 <tcp_enqueue_flags+0x1bc>)
 800e452:	f240 4242 	movw	r2, #1090	; 0x442
 800e456:	493b      	ldr	r1, [pc, #236]	; (800e544 <tcp_enqueue_flags+0x1d0>)
 800e458:	4837      	ldr	r0, [pc, #220]	; (800e538 <tcp_enqueue_flags+0x1c4>)
 800e45a:	f004 fcbf 	bl	8012ddc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	891b      	ldrh	r3, [r3, #8]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d006      	beq.n	800e474 <tcp_enqueue_flags+0x100>
 800e466:	4b32      	ldr	r3, [pc, #200]	; (800e530 <tcp_enqueue_flags+0x1bc>)
 800e468:	f240 4243 	movw	r2, #1091	; 0x443
 800e46c:	4936      	ldr	r1, [pc, #216]	; (800e548 <tcp_enqueue_flags+0x1d4>)
 800e46e:	4832      	ldr	r0, [pc, #200]	; (800e538 <tcp_enqueue_flags+0x1c4>)
 800e470:	f004 fcb4 	bl	8012ddc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d103      	bne.n	800e484 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	68fa      	ldr	r2, [r7, #12]
 800e480:	66da      	str	r2, [r3, #108]	; 0x6c
 800e482:	e00d      	b.n	800e4a0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e488:	61bb      	str	r3, [r7, #24]
 800e48a:	e002      	b.n	800e492 <tcp_enqueue_flags+0x11e>
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	61bb      	str	r3, [r7, #24]
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1f8      	bne.n	800e48c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e49a:	69bb      	ldr	r3, [r7, #24]
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e4a8:	78fb      	ldrb	r3, [r7, #3]
 800e4aa:	f003 0302 	and.w	r3, r3, #2
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d104      	bne.n	800e4bc <tcp_enqueue_flags+0x148>
 800e4b2:	78fb      	ldrb	r3, [r7, #3]
 800e4b4:	f003 0301 	and.w	r3, r3, #1
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d004      	beq.n	800e4c6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4c0:	1c5a      	adds	r2, r3, #1
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e4c6:	78fb      	ldrb	r3, [r7, #3]
 800e4c8:	f003 0301 	and.w	r3, r3, #1
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d006      	beq.n	800e4de <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	8b5b      	ldrh	r3, [r3, #26]
 800e4d4:	f043 0320 	orr.w	r3, r3, #32
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fb fc46 	bl	8009d74 <pbuf_clen>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e4f2:	4413      	add	r3, r2
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00e      	beq.n	800e524 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d10a      	bne.n	800e524 <tcp_enqueue_flags+0x1b0>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e512:	2b00      	cmp	r3, #0
 800e514:	d106      	bne.n	800e524 <tcp_enqueue_flags+0x1b0>
 800e516:	4b06      	ldr	r3, [pc, #24]	; (800e530 <tcp_enqueue_flags+0x1bc>)
 800e518:	f240 4265 	movw	r2, #1125	; 0x465
 800e51c:	490b      	ldr	r1, [pc, #44]	; (800e54c <tcp_enqueue_flags+0x1d8>)
 800e51e:	4806      	ldr	r0, [pc, #24]	; (800e538 <tcp_enqueue_flags+0x1c4>)
 800e520:	f004 fc5c 	bl	8012ddc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3720      	adds	r7, #32
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	08014d50 	.word	0x08014d50
 800e534:	08015174 	.word	0x08015174
 800e538:	08014da4 	.word	0x08014da4
 800e53c:	080151cc 	.word	0x080151cc
 800e540:	080151ec 	.word	0x080151ec
 800e544:	08015228 	.word	0x08015228
 800e548:	08015240 	.word	0x08015240
 800e54c:	0801526c 	.word	0x0801526c

0800e550 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e550:	b5b0      	push	{r4, r5, r7, lr}
 800e552:	b08a      	sub	sp, #40	; 0x28
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d106      	bne.n	800e56c <tcp_output+0x1c>
 800e55e:	4b9e      	ldr	r3, [pc, #632]	; (800e7d8 <tcp_output+0x288>)
 800e560:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e564:	499d      	ldr	r1, [pc, #628]	; (800e7dc <tcp_output+0x28c>)
 800e566:	489e      	ldr	r0, [pc, #632]	; (800e7e0 <tcp_output+0x290>)
 800e568:	f004 fc38 	bl	8012ddc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	7d1b      	ldrb	r3, [r3, #20]
 800e570:	2b01      	cmp	r3, #1
 800e572:	d106      	bne.n	800e582 <tcp_output+0x32>
 800e574:	4b98      	ldr	r3, [pc, #608]	; (800e7d8 <tcp_output+0x288>)
 800e576:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e57a:	499a      	ldr	r1, [pc, #616]	; (800e7e4 <tcp_output+0x294>)
 800e57c:	4898      	ldr	r0, [pc, #608]	; (800e7e0 <tcp_output+0x290>)
 800e57e:	f004 fc2d 	bl	8012ddc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e582:	4b99      	ldr	r3, [pc, #612]	; (800e7e8 <tcp_output+0x298>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d101      	bne.n	800e590 <tcp_output+0x40>
    return ERR_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	e1ce      	b.n	800e92e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e59c:	4293      	cmp	r3, r2
 800e59e:	bf28      	it	cs
 800e5a0:	4613      	movcs	r3, r2
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800e5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10b      	bne.n	800e5ca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	8b5b      	ldrh	r3, [r3, #26]
 800e5b6:	f003 0302 	and.w	r3, r3, #2
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	f000 81aa 	beq.w	800e914 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fdcb 	bl	800f15c <tcp_send_empty_ack>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	e1b1      	b.n	800e92e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e5ca:	6879      	ldr	r1, [r7, #4]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7ff fc7c 	bl	800ded0 <tcp_route>
 800e5d8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d102      	bne.n	800e5e6 <tcp_output+0x96>
    return ERR_RTE;
 800e5e0:	f06f 0303 	mvn.w	r3, #3
 800e5e4:	e1a3      	b.n	800e92e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d003      	beq.n	800e5f4 <tcp_output+0xa4>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d111      	bne.n	800e618 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d002      	beq.n	800e600 <tcp_output+0xb0>
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	3304      	adds	r3, #4
 800e5fe:	e000      	b.n	800e602 <tcp_output+0xb2>
 800e600:	2300      	movs	r3, #0
 800e602:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d102      	bne.n	800e610 <tcp_output+0xc0>
      return ERR_RTE;
 800e60a:	f06f 0303 	mvn.w	r3, #3
 800e60e:	e18e      	b.n	800e92e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	4618      	mov	r0, r3
 800e620:	f7f9 ff83 	bl	800852a <lwip_htonl>
 800e624:	4602      	mov	r2, r0
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e62a:	1ad3      	subs	r3, r2, r3
 800e62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e62e:	8912      	ldrh	r2, [r2, #8]
 800e630:	4413      	add	r3, r2
 800e632:	69ba      	ldr	r2, [r7, #24]
 800e634:	429a      	cmp	r2, r3
 800e636:	d227      	bcs.n	800e688 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e63e:	461a      	mov	r2, r3
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	4293      	cmp	r3, r2
 800e644:	d114      	bne.n	800e670 <tcp_output+0x120>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d110      	bne.n	800e670 <tcp_output+0x120>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e654:	2b00      	cmp	r3, #0
 800e656:	d10b      	bne.n	800e670 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2201      	movs	r2, #1
 800e664:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2200      	movs	r2, #0
 800e66c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	8b5b      	ldrh	r3, [r3, #26]
 800e674:	f003 0302 	and.w	r3, r3, #2
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f000 814d 	beq.w	800e918 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 fd6c 	bl	800f15c <tcp_send_empty_ack>
 800e684:	4603      	mov	r3, r0
 800e686:	e152      	b.n	800e92e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e694:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e696:	6a3b      	ldr	r3, [r7, #32]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f000 811c 	beq.w	800e8d6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e69e:	e002      	b.n	800e6a6 <tcp_output+0x156>
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	623b      	str	r3, [r7, #32]
 800e6a6:	6a3b      	ldr	r3, [r7, #32]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1f8      	bne.n	800e6a0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e6ae:	e112      	b.n	800e8d6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b2:	68db      	ldr	r3, [r3, #12]
 800e6b4:	899b      	ldrh	r3, [r3, #12]
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7f9 ff21 	bl	8008500 <lwip_htons>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	f003 0304 	and.w	r3, r3, #4
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d006      	beq.n	800e6d8 <tcp_output+0x188>
 800e6ca:	4b43      	ldr	r3, [pc, #268]	; (800e7d8 <tcp_output+0x288>)
 800e6cc:	f240 5236 	movw	r2, #1334	; 0x536
 800e6d0:	4946      	ldr	r1, [pc, #280]	; (800e7ec <tcp_output+0x29c>)
 800e6d2:	4843      	ldr	r0, [pc, #268]	; (800e7e0 <tcp_output+0x290>)
 800e6d4:	f004 fb82 	bl	8012ddc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d01f      	beq.n	800e720 <tcp_output+0x1d0>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	8b5b      	ldrh	r3, [r3, #26]
 800e6e4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d119      	bne.n	800e720 <tcp_output+0x1d0>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d00b      	beq.n	800e70c <tcp_output+0x1bc>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d110      	bne.n	800e720 <tcp_output+0x1d0>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e702:	891a      	ldrh	r2, [r3, #8]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e708:	429a      	cmp	r2, r3
 800e70a:	d209      	bcs.n	800e720 <tcp_output+0x1d0>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e712:	2b00      	cmp	r3, #0
 800e714:	d004      	beq.n	800e720 <tcp_output+0x1d0>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e71c:	2b08      	cmp	r3, #8
 800e71e:	d901      	bls.n	800e724 <tcp_output+0x1d4>
 800e720:	2301      	movs	r3, #1
 800e722:	e000      	b.n	800e726 <tcp_output+0x1d6>
 800e724:	2300      	movs	r3, #0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d106      	bne.n	800e738 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	8b5b      	ldrh	r3, [r3, #26]
 800e72e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e732:	2b00      	cmp	r3, #0
 800e734:	f000 80e4 	beq.w	800e900 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	7d1b      	ldrb	r3, [r3, #20]
 800e73c:	2b02      	cmp	r3, #2
 800e73e:	d00d      	beq.n	800e75c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	899b      	ldrh	r3, [r3, #12]
 800e746:	b29c      	uxth	r4, r3
 800e748:	2010      	movs	r0, #16
 800e74a:	f7f9 fed9 	bl	8008500 <lwip_htons>
 800e74e:	4603      	mov	r3, r0
 800e750:	461a      	mov	r2, r3
 800e752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	4322      	orrs	r2, r4
 800e758:	b292      	uxth	r2, r2
 800e75a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e75c:	697a      	ldr	r2, [r7, #20]
 800e75e:	6879      	ldr	r1, [r7, #4]
 800e760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e762:	f000 f909 	bl	800e978 <tcp_output_segment>
 800e766:	4603      	mov	r3, r0
 800e768:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d009      	beq.n	800e786 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	8b5b      	ldrh	r3, [r3, #26]
 800e776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	835a      	strh	r2, [r3, #26]
      return err;
 800e780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e784:	e0d3      	b.n	800e92e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7d1b      	ldrb	r3, [r3, #20]
 800e792:	2b02      	cmp	r3, #2
 800e794:	d006      	beq.n	800e7a4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	8b5b      	ldrh	r3, [r3, #26]
 800e79a:	f023 0303 	bic.w	r3, r3, #3
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7f9 febd 	bl	800852a <lwip_htonl>
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b4:	891b      	ldrh	r3, [r3, #8]
 800e7b6:	461d      	mov	r5, r3
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	899b      	ldrh	r3, [r3, #12]
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7f9 fe9d 	bl	8008500 <lwip_htons>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	f003 0303 	and.w	r3, r3, #3
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d00e      	beq.n	800e7f0 <tcp_output+0x2a0>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e00d      	b.n	800e7f2 <tcp_output+0x2a2>
 800e7d6:	bf00      	nop
 800e7d8:	08014d50 	.word	0x08014d50
 800e7dc:	08015294 	.word	0x08015294
 800e7e0:	08014da4 	.word	0x08014da4
 800e7e4:	080152ac 	.word	0x080152ac
 800e7e8:	20011c0c 	.word	0x20011c0c
 800e7ec:	080152d4 	.word	0x080152d4
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	442b      	add	r3, r5
 800e7f4:	4423      	add	r3, r4
 800e7f6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	2b00      	cmp	r3, #0
 800e802:	da02      	bge.n	800e80a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	68ba      	ldr	r2, [r7, #8]
 800e808:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80c:	891b      	ldrh	r3, [r3, #8]
 800e80e:	461c      	mov	r4, r3
 800e810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	899b      	ldrh	r3, [r3, #12]
 800e816:	b29b      	uxth	r3, r3
 800e818:	4618      	mov	r0, r3
 800e81a:	f7f9 fe71 	bl	8008500 <lwip_htons>
 800e81e:	4603      	mov	r3, r0
 800e820:	b2db      	uxtb	r3, r3
 800e822:	f003 0303 	and.w	r3, r3, #3
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <tcp_output+0x2de>
 800e82a:	2301      	movs	r3, #1
 800e82c:	e000      	b.n	800e830 <tcp_output+0x2e0>
 800e82e:	2300      	movs	r3, #0
 800e830:	4423      	add	r3, r4
 800e832:	2b00      	cmp	r3, #0
 800e834:	d049      	beq.n	800e8ca <tcp_output+0x37a>
      seg->next = NULL;
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	2200      	movs	r2, #0
 800e83a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e840:	2b00      	cmp	r3, #0
 800e842:	d105      	bne.n	800e850 <tcp_output+0x300>
        pcb->unacked = seg;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e848:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	623b      	str	r3, [r7, #32]
 800e84e:	e03f      	b.n	800e8d0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	4618      	mov	r0, r3
 800e858:	f7f9 fe67 	bl	800852a <lwip_htonl>
 800e85c:	4604      	mov	r4, r0
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	4618      	mov	r0, r3
 800e866:	f7f9 fe60 	bl	800852a <lwip_htonl>
 800e86a:	4603      	mov	r3, r0
 800e86c:	1ae3      	subs	r3, r4, r3
 800e86e:	2b00      	cmp	r3, #0
 800e870:	da24      	bge.n	800e8bc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	3370      	adds	r3, #112	; 0x70
 800e876:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e878:	e002      	b.n	800e880 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e880:	69fb      	ldr	r3, [r7, #28]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d011      	beq.n	800e8ac <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	4618      	mov	r0, r3
 800e892:	f7f9 fe4a 	bl	800852a <lwip_htonl>
 800e896:	4604      	mov	r4, r0
 800e898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7f9 fe43 	bl	800852a <lwip_htonl>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	dbe6      	blt.n	800e87a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8b8:	601a      	str	r2, [r3, #0]
 800e8ba:	e009      	b.n	800e8d0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e8bc:	6a3b      	ldr	r3, [r7, #32]
 800e8be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8c0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	623b      	str	r3, [r7, #32]
 800e8c8:	e002      	b.n	800e8d0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e8ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8cc:	f7fc fc43 	bl	800b156 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d012      	beq.n	800e902 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7f9 fe21 	bl	800852a <lwip_htonl>
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8f2:	8912      	ldrh	r2, [r2, #8]
 800e8f4:	4413      	add	r3, r2
  while (seg != NULL &&
 800e8f6:	69ba      	ldr	r2, [r7, #24]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	f4bf aed9 	bcs.w	800e6b0 <tcp_output+0x160>
 800e8fe:	e000      	b.n	800e902 <tcp_output+0x3b2>
      break;
 800e900:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e906:	2b00      	cmp	r3, #0
 800e908:	d108      	bne.n	800e91c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	2200      	movs	r2, #0
 800e90e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e912:	e004      	b.n	800e91e <tcp_output+0x3ce>
    goto output_done;
 800e914:	bf00      	nop
 800e916:	e002      	b.n	800e91e <tcp_output+0x3ce>
    goto output_done;
 800e918:	bf00      	nop
 800e91a:	e000      	b.n	800e91e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e91c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	8b5b      	ldrh	r3, [r3, #26]
 800e922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e926:	b29a      	uxth	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e92c:	2300      	movs	r3, #0
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3728      	adds	r7, #40	; 0x28
 800e932:	46bd      	mov	sp, r7
 800e934:	bdb0      	pop	{r4, r5, r7, pc}
 800e936:	bf00      	nop

0800e938 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d106      	bne.n	800e954 <tcp_output_segment_busy+0x1c>
 800e946:	4b09      	ldr	r3, [pc, #36]	; (800e96c <tcp_output_segment_busy+0x34>)
 800e948:	f240 529a 	movw	r2, #1434	; 0x59a
 800e94c:	4908      	ldr	r1, [pc, #32]	; (800e970 <tcp_output_segment_busy+0x38>)
 800e94e:	4809      	ldr	r0, [pc, #36]	; (800e974 <tcp_output_segment_busy+0x3c>)
 800e950:	f004 fa44 	bl	8012ddc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	7b9b      	ldrb	r3, [r3, #14]
 800e95a:	2b01      	cmp	r3, #1
 800e95c:	d001      	beq.n	800e962 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e95e:	2301      	movs	r3, #1
 800e960:	e000      	b.n	800e964 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e962:	2300      	movs	r3, #0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	08014d50 	.word	0x08014d50
 800e970:	080152ec 	.word	0x080152ec
 800e974:	08014da4 	.word	0x08014da4

0800e978 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e978:	b5b0      	push	{r4, r5, r7, lr}
 800e97a:	b08c      	sub	sp, #48	; 0x30
 800e97c:	af04      	add	r7, sp, #16
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d106      	bne.n	800e998 <tcp_output_segment+0x20>
 800e98a:	4b63      	ldr	r3, [pc, #396]	; (800eb18 <tcp_output_segment+0x1a0>)
 800e98c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e990:	4962      	ldr	r1, [pc, #392]	; (800eb1c <tcp_output_segment+0x1a4>)
 800e992:	4863      	ldr	r0, [pc, #396]	; (800eb20 <tcp_output_segment+0x1a8>)
 800e994:	f004 fa22 	bl	8012ddc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d106      	bne.n	800e9ac <tcp_output_segment+0x34>
 800e99e:	4b5e      	ldr	r3, [pc, #376]	; (800eb18 <tcp_output_segment+0x1a0>)
 800e9a0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e9a4:	495f      	ldr	r1, [pc, #380]	; (800eb24 <tcp_output_segment+0x1ac>)
 800e9a6:	485e      	ldr	r0, [pc, #376]	; (800eb20 <tcp_output_segment+0x1a8>)
 800e9a8:	f004 fa18 	bl	8012ddc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d106      	bne.n	800e9c0 <tcp_output_segment+0x48>
 800e9b2:	4b59      	ldr	r3, [pc, #356]	; (800eb18 <tcp_output_segment+0x1a0>)
 800e9b4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e9b8:	495b      	ldr	r1, [pc, #364]	; (800eb28 <tcp_output_segment+0x1b0>)
 800e9ba:	4859      	ldr	r0, [pc, #356]	; (800eb20 <tcp_output_segment+0x1a8>)
 800e9bc:	f004 fa0e 	bl	8012ddc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e9c0:	68f8      	ldr	r0, [r7, #12]
 800e9c2:	f7ff ffb9 	bl	800e938 <tcp_output_segment_busy>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d001      	beq.n	800e9d0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	e09f      	b.n	800eb10 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	68dc      	ldr	r4, [r3, #12]
 800e9d8:	4610      	mov	r0, r2
 800e9da:	f7f9 fda6 	bl	800852a <lwip_htonl>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	68dc      	ldr	r4, [r3, #12]
 800e9ea:	4610      	mov	r0, r2
 800e9ec:	f7f9 fd88 	bl	8008500 <lwip_htons>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f8:	68ba      	ldr	r2, [r7, #8]
 800e9fa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e9fc:	441a      	add	r2, r3
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	3314      	adds	r3, #20
 800ea08:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	7a9b      	ldrb	r3, [r3, #10]
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d015      	beq.n	800ea42 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	3304      	adds	r3, #4
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	6879      	ldr	r1, [r7, #4]
 800ea1e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ea22:	f7fc fe8f 	bl	800b744 <tcp_eff_send_mss_netif>
 800ea26:	4603      	mov	r3, r0
 800ea28:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ea2a:	8b7b      	ldrh	r3, [r7, #26]
 800ea2c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7f9 fd7a 	bl	800852a <lwip_htonl>
 800ea36:	4602      	mov	r2, r0
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	3304      	adds	r3, #4
 800ea40:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	da02      	bge.n	800ea52 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10c      	bne.n	800ea74 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ea5a:	4b34      	ldr	r3, [pc, #208]	; (800eb2c <tcp_output_segment+0x1b4>)
 800ea5c:	681a      	ldr	r2, [r3, #0]
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	68db      	ldr	r3, [r3, #12]
 800ea66:	685b      	ldr	r3, [r3, #4]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7f9 fd5e 	bl	800852a <lwip_htonl>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	68da      	ldr	r2, [r3, #12]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	1ad3      	subs	r3, r2, r3
 800ea80:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	8959      	ldrh	r1, [r3, #10]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	8b3a      	ldrh	r2, [r7, #24]
 800ea8e:	1a8a      	subs	r2, r1, r2
 800ea90:	b292      	uxth	r2, r2
 800ea92:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	8919      	ldrh	r1, [r3, #8]
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	8b3a      	ldrh	r2, [r7, #24]
 800eaa0:	1a8a      	subs	r2, r1, r2
 800eaa2:	b292      	uxth	r2, r2
 800eaa4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	68d2      	ldr	r2, [r2, #12]
 800eaae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	68db      	ldr	r3, [r3, #12]
 800eab4:	2200      	movs	r2, #0
 800eab6:	741a      	strb	r2, [r3, #16]
 800eab8:	2200      	movs	r2, #0
 800eaba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	f103 0214 	add.w	r2, r3, #20
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	7a9b      	ldrb	r3, [r3, #10]
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	f003 0304 	and.w	r3, r3, #4
 800eace:	4413      	add	r3, r2
 800ead0:	69fa      	ldr	r2, [r7, #28]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d006      	beq.n	800eae4 <tcp_output_segment+0x16c>
 800ead6:	4b10      	ldr	r3, [pc, #64]	; (800eb18 <tcp_output_segment+0x1a0>)
 800ead8:	f240 621c 	movw	r2, #1564	; 0x61c
 800eadc:	4914      	ldr	r1, [pc, #80]	; (800eb30 <tcp_output_segment+0x1b8>)
 800eade:	4810      	ldr	r0, [pc, #64]	; (800eb20 <tcp_output_segment+0x1a8>)
 800eae0:	f004 f97c 	bl	8012ddc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6858      	ldr	r0, [r3, #4]
 800eae8:	68b9      	ldr	r1, [r7, #8]
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	1d1c      	adds	r4, r3, #4
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	7add      	ldrb	r5, [r3, #11]
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	7a9b      	ldrb	r3, [r3, #10]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	9202      	str	r2, [sp, #8]
 800eafa:	2206      	movs	r2, #6
 800eafc:	9201      	str	r2, [sp, #4]
 800eafe:	9300      	str	r3, [sp, #0]
 800eb00:	462b      	mov	r3, r5
 800eb02:	4622      	mov	r2, r4
 800eb04:	f002 fa66 	bl	8010fd4 <ip4_output_if>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800eb0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3720      	adds	r7, #32
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bdb0      	pop	{r4, r5, r7, pc}
 800eb18:	08014d50 	.word	0x08014d50
 800eb1c:	08015314 	.word	0x08015314
 800eb20:	08014da4 	.word	0x08014da4
 800eb24:	08015334 	.word	0x08015334
 800eb28:	08015354 	.word	0x08015354
 800eb2c:	20011bfc 	.word	0x20011bfc
 800eb30:	08015378 	.word	0x08015378

0800eb34 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800eb34:	b5b0      	push	{r4, r5, r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d106      	bne.n	800eb50 <tcp_rexmit_rto_prepare+0x1c>
 800eb42:	4b31      	ldr	r3, [pc, #196]	; (800ec08 <tcp_rexmit_rto_prepare+0xd4>)
 800eb44:	f240 6263 	movw	r2, #1635	; 0x663
 800eb48:	4930      	ldr	r1, [pc, #192]	; (800ec0c <tcp_rexmit_rto_prepare+0xd8>)
 800eb4a:	4831      	ldr	r0, [pc, #196]	; (800ec10 <tcp_rexmit_rto_prepare+0xdc>)
 800eb4c:	f004 f946 	bl	8012ddc <iprintf>

  if (pcb->unacked == NULL) {
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d102      	bne.n	800eb5e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800eb58:	f06f 0305 	mvn.w	r3, #5
 800eb5c:	e050      	b.n	800ec00 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb62:	60fb      	str	r3, [r7, #12]
 800eb64:	e00b      	b.n	800eb7e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800eb66:	68f8      	ldr	r0, [r7, #12]
 800eb68:	f7ff fee6 	bl	800e938 <tcp_output_segment_busy>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d002      	beq.n	800eb78 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800eb72:	f06f 0305 	mvn.w	r3, #5
 800eb76:	e043      	b.n	800ec00 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	60fb      	str	r3, [r7, #12]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1ef      	bne.n	800eb66 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f7ff fed6 	bl	800e938 <tcp_output_segment_busy>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800eb92:	f06f 0305 	mvn.w	r3, #5
 800eb96:	e033      	b.n	800ec00 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	8b5b      	ldrh	r3, [r3, #26]
 800ebb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ebb6:	b29a      	uxth	r2, r3
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	68db      	ldr	r3, [r3, #12]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7f9 fcb1 	bl	800852a <lwip_htonl>
 800ebc8:	4604      	mov	r4, r0
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	891b      	ldrh	r3, [r3, #8]
 800ebce:	461d      	mov	r5, r3
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	899b      	ldrh	r3, [r3, #12]
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f7f9 fc91 	bl	8008500 <lwip_htons>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	f003 0303 	and.w	r3, r3, #3
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d001      	beq.n	800ebee <tcp_rexmit_rto_prepare+0xba>
 800ebea:	2301      	movs	r3, #1
 800ebec:	e000      	b.n	800ebf0 <tcp_rexmit_rto_prepare+0xbc>
 800ebee:	2300      	movs	r3, #0
 800ebf0:	442b      	add	r3, r5
 800ebf2:	18e2      	adds	r2, r4, r3
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ebfe:	2300      	movs	r3, #0
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bdb0      	pop	{r4, r5, r7, pc}
 800ec08:	08014d50 	.word	0x08014d50
 800ec0c:	0801538c 	.word	0x0801538c
 800ec10:	08014da4 	.word	0x08014da4

0800ec14 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d106      	bne.n	800ec30 <tcp_rexmit_rto_commit+0x1c>
 800ec22:	4b0d      	ldr	r3, [pc, #52]	; (800ec58 <tcp_rexmit_rto_commit+0x44>)
 800ec24:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ec28:	490c      	ldr	r1, [pc, #48]	; (800ec5c <tcp_rexmit_rto_commit+0x48>)
 800ec2a:	480d      	ldr	r0, [pc, #52]	; (800ec60 <tcp_rexmit_rto_commit+0x4c>)
 800ec2c:	f004 f8d6 	bl	8012ddc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec36:	2bff      	cmp	r3, #255	; 0xff
 800ec38:	d007      	beq.n	800ec4a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec40:	3301      	adds	r3, #1
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	f7ff fc80 	bl	800e550 <tcp_output>
}
 800ec50:	bf00      	nop
 800ec52:	3708      	adds	r7, #8
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	08014d50 	.word	0x08014d50
 800ec5c:	080153b0 	.word	0x080153b0
 800ec60:	08014da4 	.word	0x08014da4

0800ec64 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d106      	bne.n	800ec80 <tcp_rexmit_rto+0x1c>
 800ec72:	4b0a      	ldr	r3, [pc, #40]	; (800ec9c <tcp_rexmit_rto+0x38>)
 800ec74:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ec78:	4909      	ldr	r1, [pc, #36]	; (800eca0 <tcp_rexmit_rto+0x3c>)
 800ec7a:	480a      	ldr	r0, [pc, #40]	; (800eca4 <tcp_rexmit_rto+0x40>)
 800ec7c:	f004 f8ae 	bl	8012ddc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff ff57 	bl	800eb34 <tcp_rexmit_rto_prepare>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d102      	bne.n	800ec92 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f7ff ffc1 	bl	800ec14 <tcp_rexmit_rto_commit>
  }
}
 800ec92:	bf00      	nop
 800ec94:	3708      	adds	r7, #8
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	08014d50 	.word	0x08014d50
 800eca0:	080153d4 	.word	0x080153d4
 800eca4:	08014da4 	.word	0x08014da4

0800eca8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800eca8:	b590      	push	{r4, r7, lr}
 800ecaa:	b085      	sub	sp, #20
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d106      	bne.n	800ecc4 <tcp_rexmit+0x1c>
 800ecb6:	4b2f      	ldr	r3, [pc, #188]	; (800ed74 <tcp_rexmit+0xcc>)
 800ecb8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ecbc:	492e      	ldr	r1, [pc, #184]	; (800ed78 <tcp_rexmit+0xd0>)
 800ecbe:	482f      	ldr	r0, [pc, #188]	; (800ed7c <tcp_rexmit+0xd4>)
 800ecc0:	f004 f88c 	bl	8012ddc <iprintf>

  if (pcb->unacked == NULL) {
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d102      	bne.n	800ecd2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800eccc:	f06f 0305 	mvn.w	r3, #5
 800ecd0:	e04c      	b.n	800ed6c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecd6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ecd8:	68b8      	ldr	r0, [r7, #8]
 800ecda:	f7ff fe2d 	bl	800e938 <tcp_output_segment_busy>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d002      	beq.n	800ecea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ece4:	f06f 0305 	mvn.w	r3, #5
 800ece8:	e040      	b.n	800ed6c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	336c      	adds	r3, #108	; 0x6c
 800ecf6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ecf8:	e002      	b.n	800ed00 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d011      	beq.n	800ed2c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7f9 fc0a 	bl	800852a <lwip_htonl>
 800ed16:	4604      	mov	r4, r0
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	685b      	ldr	r3, [r3, #4]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7f9 fc03 	bl	800852a <lwip_htonl>
 800ed24:	4603      	mov	r3, r0
 800ed26:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	dbe6      	blt.n	800ecfa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	68ba      	ldr	r2, [r7, #8]
 800ed38:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d103      	bne.n	800ed4a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed50:	2bff      	cmp	r3, #255	; 0xff
 800ed52:	d007      	beq.n	800ed64 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	b2da      	uxtb	r2, r3
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2200      	movs	r2, #0
 800ed68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3714      	adds	r7, #20
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd90      	pop	{r4, r7, pc}
 800ed74:	08014d50 	.word	0x08014d50
 800ed78:	080153f0 	.word	0x080153f0
 800ed7c:	08014da4 	.word	0x08014da4

0800ed80 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d106      	bne.n	800ed9c <tcp_rexmit_fast+0x1c>
 800ed8e:	4b2a      	ldr	r3, [pc, #168]	; (800ee38 <tcp_rexmit_fast+0xb8>)
 800ed90:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800ed94:	4929      	ldr	r1, [pc, #164]	; (800ee3c <tcp_rexmit_fast+0xbc>)
 800ed96:	482a      	ldr	r0, [pc, #168]	; (800ee40 <tcp_rexmit_fast+0xc0>)
 800ed98:	f004 f820 	bl	8012ddc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d044      	beq.n	800ee2e <tcp_rexmit_fast+0xae>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	8b5b      	ldrh	r3, [r3, #26]
 800eda8:	f003 0304 	and.w	r3, r3, #4
 800edac:	2b00      	cmp	r3, #0
 800edae:	d13e      	bne.n	800ee2e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f7ff ff79 	bl	800eca8 <tcp_rexmit>
 800edb6:	4603      	mov	r3, r0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d138      	bne.n	800ee2e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800edc8:	4293      	cmp	r3, r2
 800edca:	bf28      	it	cs
 800edcc:	4613      	movcs	r3, r2
 800edce:	b29b      	uxth	r3, r3
 800edd0:	0fda      	lsrs	r2, r3, #31
 800edd2:	4413      	add	r3, r2
 800edd4:	105b      	asrs	r3, r3, #1
 800edd6:	b29a      	uxth	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ede4:	461a      	mov	r2, r3
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edea:	005b      	lsls	r3, r3, #1
 800edec:	429a      	cmp	r2, r3
 800edee:	d206      	bcs.n	800edfe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edf4:	005b      	lsls	r3, r3, #1
 800edf6:	b29a      	uxth	r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee08:	4619      	mov	r1, r3
 800ee0a:	0049      	lsls	r1, r1, #1
 800ee0c:	440b      	add	r3, r1
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	4413      	add	r3, r2
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	8b5b      	ldrh	r3, [r3, #26]
 800ee1e:	f043 0304 	orr.w	r3, r3, #4
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800ee2e:	bf00      	nop
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	08014d50 	.word	0x08014d50
 800ee3c:	08015408 	.word	0x08015408
 800ee40:	08014da4 	.word	0x08014da4

0800ee44 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b086      	sub	sp, #24
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	607b      	str	r3, [r7, #4]
 800ee4e:	460b      	mov	r3, r1
 800ee50:	817b      	strh	r3, [r7, #10]
 800ee52:	4613      	mov	r3, r2
 800ee54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ee56:	897a      	ldrh	r2, [r7, #10]
 800ee58:	893b      	ldrh	r3, [r7, #8]
 800ee5a:	4413      	add	r3, r2
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	3314      	adds	r3, #20
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee66:	4619      	mov	r1, r3
 800ee68:	2022      	movs	r0, #34	; 0x22
 800ee6a:	f7fa fc11 	bl	8009690 <pbuf_alloc>
 800ee6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d04d      	beq.n	800ef12 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ee76:	897b      	ldrh	r3, [r7, #10]
 800ee78:	3313      	adds	r3, #19
 800ee7a:	697a      	ldr	r2, [r7, #20]
 800ee7c:	8952      	ldrh	r2, [r2, #10]
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	db06      	blt.n	800ee90 <tcp_output_alloc_header_common+0x4c>
 800ee82:	4b26      	ldr	r3, [pc, #152]	; (800ef1c <tcp_output_alloc_header_common+0xd8>)
 800ee84:	f240 7223 	movw	r2, #1827	; 0x723
 800ee88:	4925      	ldr	r1, [pc, #148]	; (800ef20 <tcp_output_alloc_header_common+0xdc>)
 800ee8a:	4826      	ldr	r0, [pc, #152]	; (800ef24 <tcp_output_alloc_header_common+0xe0>)
 800ee8c:	f003 ffa6 	bl	8012ddc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	685b      	ldr	r3, [r3, #4]
 800ee94:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800ee96:	8c3b      	ldrh	r3, [r7, #32]
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7f9 fb31 	bl	8008500 <lwip_htons>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	461a      	mov	r2, r3
 800eea2:	693b      	ldr	r3, [r7, #16]
 800eea4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800eea6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7f9 fb29 	bl	8008500 <lwip_htons>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800eebc:	68f8      	ldr	r0, [r7, #12]
 800eebe:	f7f9 fb34 	bl	800852a <lwip_htonl>
 800eec2:	4602      	mov	r2, r0
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800eec8:	897b      	ldrh	r3, [r7, #10]
 800eeca:	089b      	lsrs	r3, r3, #2
 800eecc:	b29b      	uxth	r3, r3
 800eece:	3305      	adds	r3, #5
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	031b      	lsls	r3, r3, #12
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	4313      	orrs	r3, r2
 800eede:	b29b      	uxth	r3, r3
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7f9 fb0d 	bl	8008500 <lwip_htons>
 800eee6:	4603      	mov	r3, r0
 800eee8:	461a      	mov	r2, r3
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800eeee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7f9 fb05 	bl	8008500 <lwip_htons>
 800eef6:	4603      	mov	r3, r0
 800eef8:	461a      	mov	r2, r3
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	2200      	movs	r2, #0
 800ef02:	741a      	strb	r2, [r3, #16]
 800ef04:	2200      	movs	r2, #0
 800ef06:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	749a      	strb	r2, [r3, #18]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ef12:	697b      	ldr	r3, [r7, #20]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	08014d50 	.word	0x08014d50
 800ef20:	08015428 	.word	0x08015428
 800ef24:	08014da4 	.word	0x08014da4

0800ef28 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ef28:	b5b0      	push	{r4, r5, r7, lr}
 800ef2a:	b08a      	sub	sp, #40	; 0x28
 800ef2c:	af04      	add	r7, sp, #16
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	607b      	str	r3, [r7, #4]
 800ef32:	460b      	mov	r3, r1
 800ef34:	817b      	strh	r3, [r7, #10]
 800ef36:	4613      	mov	r3, r2
 800ef38:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d106      	bne.n	800ef4e <tcp_output_alloc_header+0x26>
 800ef40:	4b15      	ldr	r3, [pc, #84]	; (800ef98 <tcp_output_alloc_header+0x70>)
 800ef42:	f240 7242 	movw	r2, #1858	; 0x742
 800ef46:	4915      	ldr	r1, [pc, #84]	; (800ef9c <tcp_output_alloc_header+0x74>)
 800ef48:	4815      	ldr	r0, [pc, #84]	; (800efa0 <tcp_output_alloc_header+0x78>)
 800ef4a:	f003 ff47 	bl	8012ddc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	8adb      	ldrh	r3, [r3, #22]
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	8b12      	ldrh	r2, [r2, #24]
 800ef5a:	68f9      	ldr	r1, [r7, #12]
 800ef5c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800ef5e:	893d      	ldrh	r5, [r7, #8]
 800ef60:	897c      	ldrh	r4, [r7, #10]
 800ef62:	9103      	str	r1, [sp, #12]
 800ef64:	2110      	movs	r1, #16
 800ef66:	9102      	str	r1, [sp, #8]
 800ef68:	9201      	str	r2, [sp, #4]
 800ef6a:	9300      	str	r3, [sp, #0]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	462a      	mov	r2, r5
 800ef70:	4621      	mov	r1, r4
 800ef72:	f7ff ff67 	bl	800ee44 <tcp_output_alloc_header_common>
 800ef76:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ef78:	697b      	ldr	r3, [r7, #20]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d006      	beq.n	800ef8c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ef86:	441a      	add	r2, r3
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800ef8c:	697b      	ldr	r3, [r7, #20]
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3718      	adds	r7, #24
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bdb0      	pop	{r4, r5, r7, pc}
 800ef96:	bf00      	nop
 800ef98:	08014d50 	.word	0x08014d50
 800ef9c:	08015458 	.word	0x08015458
 800efa0:	08014da4 	.word	0x08014da4

0800efa4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b088      	sub	sp, #32
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	4611      	mov	r1, r2
 800efb0:	461a      	mov	r2, r3
 800efb2:	460b      	mov	r3, r1
 800efb4:	71fb      	strb	r3, [r7, #7]
 800efb6:	4613      	mov	r3, r2
 800efb8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800efba:	2300      	movs	r3, #0
 800efbc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d106      	bne.n	800efd2 <tcp_output_fill_options+0x2e>
 800efc4:	4b13      	ldr	r3, [pc, #76]	; (800f014 <tcp_output_fill_options+0x70>)
 800efc6:	f240 7256 	movw	r2, #1878	; 0x756
 800efca:	4913      	ldr	r1, [pc, #76]	; (800f018 <tcp_output_fill_options+0x74>)
 800efcc:	4813      	ldr	r0, [pc, #76]	; (800f01c <tcp_output_fill_options+0x78>)
 800efce:	f003 ff05 	bl	8012ddc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800efd8:	69bb      	ldr	r3, [r7, #24]
 800efda:	3314      	adds	r3, #20
 800efdc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	f103 0214 	add.w	r2, r3, #20
 800efe4:	8bfb      	ldrh	r3, [r7, #30]
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	4619      	mov	r1, r3
 800efea:	79fb      	ldrb	r3, [r7, #7]
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	f003 0304 	and.w	r3, r3, #4
 800eff2:	440b      	add	r3, r1
 800eff4:	4413      	add	r3, r2
 800eff6:	697a      	ldr	r2, [r7, #20]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d006      	beq.n	800f00a <tcp_output_fill_options+0x66>
 800effc:	4b05      	ldr	r3, [pc, #20]	; (800f014 <tcp_output_fill_options+0x70>)
 800effe:	f240 7275 	movw	r2, #1909	; 0x775
 800f002:	4907      	ldr	r1, [pc, #28]	; (800f020 <tcp_output_fill_options+0x7c>)
 800f004:	4805      	ldr	r0, [pc, #20]	; (800f01c <tcp_output_fill_options+0x78>)
 800f006:	f003 fee9 	bl	8012ddc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f00a:	bf00      	nop
 800f00c:	3720      	adds	r7, #32
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
 800f012:	bf00      	nop
 800f014:	08014d50 	.word	0x08014d50
 800f018:	08015480 	.word	0x08015480
 800f01c:	08014da4 	.word	0x08014da4
 800f020:	08015378 	.word	0x08015378

0800f024 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b08a      	sub	sp, #40	; 0x28
 800f028:	af04      	add	r7, sp, #16
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	607a      	str	r2, [r7, #4]
 800f030:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d106      	bne.n	800f046 <tcp_output_control_segment+0x22>
 800f038:	4b1c      	ldr	r3, [pc, #112]	; (800f0ac <tcp_output_control_segment+0x88>)
 800f03a:	f240 7287 	movw	r2, #1927	; 0x787
 800f03e:	491c      	ldr	r1, [pc, #112]	; (800f0b0 <tcp_output_control_segment+0x8c>)
 800f040:	481c      	ldr	r0, [pc, #112]	; (800f0b4 <tcp_output_control_segment+0x90>)
 800f042:	f003 fecb 	bl	8012ddc <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	6879      	ldr	r1, [r7, #4]
 800f04a:	68f8      	ldr	r0, [r7, #12]
 800f04c:	f7fe ff40 	bl	800ded0 <tcp_route>
 800f050:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d102      	bne.n	800f05e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f058:	23fc      	movs	r3, #252	; 0xfc
 800f05a:	75fb      	strb	r3, [r7, #23]
 800f05c:	e01c      	b.n	800f098 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d006      	beq.n	800f072 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	7adb      	ldrb	r3, [r3, #11]
 800f068:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	7a9b      	ldrb	r3, [r3, #10]
 800f06e:	757b      	strb	r3, [r7, #21]
 800f070:	e003      	b.n	800f07a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f072:	23ff      	movs	r3, #255	; 0xff
 800f074:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f076:	2300      	movs	r3, #0
 800f078:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f07a:	7dba      	ldrb	r2, [r7, #22]
 800f07c:	693b      	ldr	r3, [r7, #16]
 800f07e:	9302      	str	r3, [sp, #8]
 800f080:	2306      	movs	r3, #6
 800f082:	9301      	str	r3, [sp, #4]
 800f084:	7d7b      	ldrb	r3, [r7, #21]
 800f086:	9300      	str	r3, [sp, #0]
 800f088:	4613      	mov	r3, r2
 800f08a:	683a      	ldr	r2, [r7, #0]
 800f08c:	6879      	ldr	r1, [r7, #4]
 800f08e:	68b8      	ldr	r0, [r7, #8]
 800f090:	f001 ffa0 	bl	8010fd4 <ip4_output_if>
 800f094:	4603      	mov	r3, r0
 800f096:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f098:	68b8      	ldr	r0, [r7, #8]
 800f09a:	f7fa fddd 	bl	8009c58 <pbuf_free>
  return err;
 800f09e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3718      	adds	r7, #24
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	08014d50 	.word	0x08014d50
 800f0b0:	080154a8 	.word	0x080154a8
 800f0b4:	08014da4 	.word	0x08014da4

0800f0b8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f0b8:	b590      	push	{r4, r7, lr}
 800f0ba:	b08b      	sub	sp, #44	; 0x2c
 800f0bc:	af04      	add	r7, sp, #16
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
 800f0c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d106      	bne.n	800f0da <tcp_rst+0x22>
 800f0cc:	4b1f      	ldr	r3, [pc, #124]	; (800f14c <tcp_rst+0x94>)
 800f0ce:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800f0d2:	491f      	ldr	r1, [pc, #124]	; (800f150 <tcp_rst+0x98>)
 800f0d4:	481f      	ldr	r0, [pc, #124]	; (800f154 <tcp_rst+0x9c>)
 800f0d6:	f003 fe81 	bl	8012ddc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d106      	bne.n	800f0ee <tcp_rst+0x36>
 800f0e0:	4b1a      	ldr	r3, [pc, #104]	; (800f14c <tcp_rst+0x94>)
 800f0e2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800f0e6:	491c      	ldr	r1, [pc, #112]	; (800f158 <tcp_rst+0xa0>)
 800f0e8:	481a      	ldr	r0, [pc, #104]	; (800f154 <tcp_rst+0x9c>)
 800f0ea:	f003 fe77 	bl	8012ddc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f0f2:	f246 0308 	movw	r3, #24584	; 0x6008
 800f0f6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f0f8:	7dfb      	ldrb	r3, [r7, #23]
 800f0fa:	b29c      	uxth	r4, r3
 800f0fc:	68b8      	ldr	r0, [r7, #8]
 800f0fe:	f7f9 fa14 	bl	800852a <lwip_htonl>
 800f102:	4602      	mov	r2, r0
 800f104:	8abb      	ldrh	r3, [r7, #20]
 800f106:	9303      	str	r3, [sp, #12]
 800f108:	2314      	movs	r3, #20
 800f10a:	9302      	str	r3, [sp, #8]
 800f10c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f10e:	9301      	str	r3, [sp, #4]
 800f110:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f112:	9300      	str	r3, [sp, #0]
 800f114:	4613      	mov	r3, r2
 800f116:	2200      	movs	r2, #0
 800f118:	4621      	mov	r1, r4
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f7ff fe92 	bl	800ee44 <tcp_output_alloc_header_common>
 800f120:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00c      	beq.n	800f142 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f128:	7dfb      	ldrb	r3, [r7, #23]
 800f12a:	2200      	movs	r2, #0
 800f12c:	6939      	ldr	r1, [r7, #16]
 800f12e:	68f8      	ldr	r0, [r7, #12]
 800f130:	f7ff ff38 	bl	800efa4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f136:	683a      	ldr	r2, [r7, #0]
 800f138:	6939      	ldr	r1, [r7, #16]
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f7ff ff72 	bl	800f024 <tcp_output_control_segment>
 800f140:	e000      	b.n	800f144 <tcp_rst+0x8c>
    return;
 800f142:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f144:	371c      	adds	r7, #28
 800f146:	46bd      	mov	sp, r7
 800f148:	bd90      	pop	{r4, r7, pc}
 800f14a:	bf00      	nop
 800f14c:	08014d50 	.word	0x08014d50
 800f150:	080154d4 	.word	0x080154d4
 800f154:	08014da4 	.word	0x08014da4
 800f158:	080154f0 	.word	0x080154f0

0800f15c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f15c:	b590      	push	{r4, r7, lr}
 800f15e:	b087      	sub	sp, #28
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f164:	2300      	movs	r3, #0
 800f166:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f168:	2300      	movs	r3, #0
 800f16a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d106      	bne.n	800f180 <tcp_send_empty_ack+0x24>
 800f172:	4b28      	ldr	r3, [pc, #160]	; (800f214 <tcp_send_empty_ack+0xb8>)
 800f174:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800f178:	4927      	ldr	r1, [pc, #156]	; (800f218 <tcp_send_empty_ack+0xbc>)
 800f17a:	4828      	ldr	r0, [pc, #160]	; (800f21c <tcp_send_empty_ack+0xc0>)
 800f17c:	f003 fe2e 	bl	8012ddc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f180:	7dfb      	ldrb	r3, [r7, #23]
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	b2db      	uxtb	r3, r3
 800f186:	f003 0304 	and.w	r3, r3, #4
 800f18a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f18c:	7d7b      	ldrb	r3, [r7, #21]
 800f18e:	b29c      	uxth	r4, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f194:	4618      	mov	r0, r3
 800f196:	f7f9 f9c8 	bl	800852a <lwip_htonl>
 800f19a:	4603      	mov	r3, r0
 800f19c:	2200      	movs	r2, #0
 800f19e:	4621      	mov	r1, r4
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f7ff fec1 	bl	800ef28 <tcp_output_alloc_header>
 800f1a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d109      	bne.n	800f1c2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	8b5b      	ldrh	r3, [r3, #26]
 800f1b2:	f043 0303 	orr.w	r3, r3, #3
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f1bc:	f06f 0301 	mvn.w	r3, #1
 800f1c0:	e023      	b.n	800f20a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f1c2:	7dbb      	ldrb	r3, [r7, #22]
 800f1c4:	7dfa      	ldrb	r2, [r7, #23]
 800f1c6:	6939      	ldr	r1, [r7, #16]
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f7ff feeb 	bl	800efa4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	3304      	adds	r3, #4
 800f1d4:	6939      	ldr	r1, [r7, #16]
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7ff ff24 	bl	800f024 <tcp_output_control_segment>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f1e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d007      	beq.n	800f1f8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	8b5b      	ldrh	r3, [r3, #26]
 800f1ec:	f043 0303 	orr.w	r3, r3, #3
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	835a      	strh	r2, [r3, #26]
 800f1f6:	e006      	b.n	800f206 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	8b5b      	ldrh	r3, [r3, #26]
 800f1fc:	f023 0303 	bic.w	r3, r3, #3
 800f200:	b29a      	uxth	r2, r3
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f206:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	371c      	adds	r7, #28
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd90      	pop	{r4, r7, pc}
 800f212:	bf00      	nop
 800f214:	08014d50 	.word	0x08014d50
 800f218:	0801550c 	.word	0x0801550c
 800f21c:	08014da4 	.word	0x08014da4

0800f220 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f220:	b590      	push	{r4, r7, lr}
 800f222:	b087      	sub	sp, #28
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f228:	2300      	movs	r3, #0
 800f22a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d106      	bne.n	800f240 <tcp_keepalive+0x20>
 800f232:	4b18      	ldr	r3, [pc, #96]	; (800f294 <tcp_keepalive+0x74>)
 800f234:	f640 0224 	movw	r2, #2084	; 0x824
 800f238:	4917      	ldr	r1, [pc, #92]	; (800f298 <tcp_keepalive+0x78>)
 800f23a:	4818      	ldr	r0, [pc, #96]	; (800f29c <tcp_keepalive+0x7c>)
 800f23c:	f003 fdce 	bl	8012ddc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f240:	7dfb      	ldrb	r3, [r7, #23]
 800f242:	b29c      	uxth	r4, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f248:	3b01      	subs	r3, #1
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7f9 f96d 	bl	800852a <lwip_htonl>
 800f250:	4603      	mov	r3, r0
 800f252:	2200      	movs	r2, #0
 800f254:	4621      	mov	r1, r4
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7ff fe66 	bl	800ef28 <tcp_output_alloc_header>
 800f25c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d102      	bne.n	800f26a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f264:	f04f 33ff 	mov.w	r3, #4294967295
 800f268:	e010      	b.n	800f28c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f26a:	7dfb      	ldrb	r3, [r7, #23]
 800f26c:	2200      	movs	r2, #0
 800f26e:	6939      	ldr	r1, [r7, #16]
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7ff fe97 	bl	800efa4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f276:	687a      	ldr	r2, [r7, #4]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	3304      	adds	r3, #4
 800f27c:	6939      	ldr	r1, [r7, #16]
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7ff fed0 	bl	800f024 <tcp_output_control_segment>
 800f284:	4603      	mov	r3, r0
 800f286:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f288:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	371c      	adds	r7, #28
 800f290:	46bd      	mov	sp, r7
 800f292:	bd90      	pop	{r4, r7, pc}
 800f294:	08014d50 	.word	0x08014d50
 800f298:	0801552c 	.word	0x0801552c
 800f29c:	08014da4 	.word	0x08014da4

0800f2a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f2a0:	b590      	push	{r4, r7, lr}
 800f2a2:	b08b      	sub	sp, #44	; 0x2c
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d106      	bne.n	800f2c2 <tcp_zero_window_probe+0x22>
 800f2b4:	4b4c      	ldr	r3, [pc, #304]	; (800f3e8 <tcp_zero_window_probe+0x148>)
 800f2b6:	f640 024f 	movw	r2, #2127	; 0x84f
 800f2ba:	494c      	ldr	r1, [pc, #304]	; (800f3ec <tcp_zero_window_probe+0x14c>)
 800f2bc:	484c      	ldr	r0, [pc, #304]	; (800f3f0 <tcp_zero_window_probe+0x150>)
 800f2be:	f003 fd8d 	bl	8012ddc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2c6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f2c8:	6a3b      	ldr	r3, [r7, #32]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d101      	bne.n	800f2d2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	e086      	b.n	800f3e0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f2d8:	2bff      	cmp	r3, #255	; 0xff
 800f2da:	d007      	beq.n	800f2ec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	b2da      	uxtb	r2, r3
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f2ec:	6a3b      	ldr	r3, [r7, #32]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	899b      	ldrh	r3, [r3, #12]
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7f9 f903 	bl	8008500 <lwip_htons>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	f003 0301 	and.w	r3, r3, #1
 800f302:	2b00      	cmp	r3, #0
 800f304:	d005      	beq.n	800f312 <tcp_zero_window_probe+0x72>
 800f306:	6a3b      	ldr	r3, [r7, #32]
 800f308:	891b      	ldrh	r3, [r3, #8]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d101      	bne.n	800f312 <tcp_zero_window_probe+0x72>
 800f30e:	2301      	movs	r3, #1
 800f310:	e000      	b.n	800f314 <tcp_zero_window_probe+0x74>
 800f312:	2300      	movs	r3, #0
 800f314:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f316:	7ffb      	ldrb	r3, [r7, #31]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	bf0c      	ite	eq
 800f31c:	2301      	moveq	r3, #1
 800f31e:	2300      	movne	r3, #0
 800f320:	b2db      	uxtb	r3, r3
 800f322:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f328:	b299      	uxth	r1, r3
 800f32a:	6a3b      	ldr	r3, [r7, #32]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	8bba      	ldrh	r2, [r7, #28]
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f7ff fdf8 	bl	800ef28 <tcp_output_alloc_header>
 800f338:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d102      	bne.n	800f346 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f340:	f04f 33ff 	mov.w	r3, #4294967295
 800f344:	e04c      	b.n	800f3e0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f34c:	7ffb      	ldrb	r3, [r7, #31]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d011      	beq.n	800f376 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	899b      	ldrh	r3, [r3, #12]
 800f356:	b29b      	uxth	r3, r3
 800f358:	b21b      	sxth	r3, r3
 800f35a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f35e:	b21c      	sxth	r4, r3
 800f360:	2011      	movs	r0, #17
 800f362:	f7f9 f8cd 	bl	8008500 <lwip_htons>
 800f366:	4603      	mov	r3, r0
 800f368:	b21b      	sxth	r3, r3
 800f36a:	4323      	orrs	r3, r4
 800f36c:	b21b      	sxth	r3, r3
 800f36e:	b29a      	uxth	r2, r3
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	819a      	strh	r2, [r3, #12]
 800f374:	e010      	b.n	800f398 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f376:	69bb      	ldr	r3, [r7, #24]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	3314      	adds	r3, #20
 800f37c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f37e:	6a3b      	ldr	r3, [r7, #32]
 800f380:	6858      	ldr	r0, [r3, #4]
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	685b      	ldr	r3, [r3, #4]
 800f386:	891a      	ldrh	r2, [r3, #8]
 800f388:	6a3b      	ldr	r3, [r7, #32]
 800f38a:	891b      	ldrh	r3, [r3, #8]
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	b29b      	uxth	r3, r3
 800f390:	2201      	movs	r2, #1
 800f392:	6939      	ldr	r1, [r7, #16]
 800f394:	f7fa fe56 	bl	800a044 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f398:	6a3b      	ldr	r3, [r7, #32]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7f9 f8c3 	bl	800852a <lwip_htonl>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	1ad3      	subs	r3, r2, r3
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	da02      	bge.n	800f3bc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	68fa      	ldr	r2, [r7, #12]
 800f3ba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	69b9      	ldr	r1, [r7, #24]
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f7ff fded 	bl	800efa4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	3304      	adds	r3, #4
 800f3d0:	69b9      	ldr	r1, [r7, #24]
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f7ff fe26 	bl	800f024 <tcp_output_control_segment>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f3dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	372c      	adds	r7, #44	; 0x2c
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd90      	pop	{r4, r7, pc}
 800f3e8:	08014d50 	.word	0x08014d50
 800f3ec:	08015548 	.word	0x08015548
 800f3f0:	08014da4 	.word	0x08014da4

0800f3f4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f3fc:	f7fa ff10 	bl	800a220 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f400:	4b0a      	ldr	r3, [pc, #40]	; (800f42c <tcpip_tcp_timer+0x38>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d103      	bne.n	800f410 <tcpip_tcp_timer+0x1c>
 800f408:	4b09      	ldr	r3, [pc, #36]	; (800f430 <tcpip_tcp_timer+0x3c>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d005      	beq.n	800f41c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f410:	2200      	movs	r2, #0
 800f412:	4908      	ldr	r1, [pc, #32]	; (800f434 <tcpip_tcp_timer+0x40>)
 800f414:	20fa      	movs	r0, #250	; 0xfa
 800f416:	f000 f8f3 	bl	800f600 <sys_timeout>
 800f41a:	e003      	b.n	800f424 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f41c:	4b06      	ldr	r3, [pc, #24]	; (800f438 <tcpip_tcp_timer+0x44>)
 800f41e:	2200      	movs	r2, #0
 800f420:	601a      	str	r2, [r3, #0]
  }
}
 800f422:	bf00      	nop
 800f424:	bf00      	nop
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	20011bf8 	.word	0x20011bf8
 800f430:	20011c08 	.word	0x20011c08
 800f434:	0800f3f5 	.word	0x0800f3f5
 800f438:	2000b148 	.word	0x2000b148

0800f43c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f440:	4b0a      	ldr	r3, [pc, #40]	; (800f46c <tcp_timer_needed+0x30>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d10f      	bne.n	800f468 <tcp_timer_needed+0x2c>
 800f448:	4b09      	ldr	r3, [pc, #36]	; (800f470 <tcp_timer_needed+0x34>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d103      	bne.n	800f458 <tcp_timer_needed+0x1c>
 800f450:	4b08      	ldr	r3, [pc, #32]	; (800f474 <tcp_timer_needed+0x38>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d007      	beq.n	800f468 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f458:	4b04      	ldr	r3, [pc, #16]	; (800f46c <tcp_timer_needed+0x30>)
 800f45a:	2201      	movs	r2, #1
 800f45c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f45e:	2200      	movs	r2, #0
 800f460:	4905      	ldr	r1, [pc, #20]	; (800f478 <tcp_timer_needed+0x3c>)
 800f462:	20fa      	movs	r0, #250	; 0xfa
 800f464:	f000 f8cc 	bl	800f600 <sys_timeout>
  }
}
 800f468:	bf00      	nop
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	2000b148 	.word	0x2000b148
 800f470:	20011bf8 	.word	0x20011bf8
 800f474:	20011c08 	.word	0x20011c08
 800f478:	0800f3f5 	.word	0x0800f3f5

0800f47c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b086      	sub	sp, #24
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f488:	200a      	movs	r0, #10
 800f48a:	f7f9 fcef 	bl	8008e6c <memp_malloc>
 800f48e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d109      	bne.n	800f4aa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f496:	693b      	ldr	r3, [r7, #16]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d151      	bne.n	800f540 <sys_timeout_abs+0xc4>
 800f49c:	4b2a      	ldr	r3, [pc, #168]	; (800f548 <sys_timeout_abs+0xcc>)
 800f49e:	22be      	movs	r2, #190	; 0xbe
 800f4a0:	492a      	ldr	r1, [pc, #168]	; (800f54c <sys_timeout_abs+0xd0>)
 800f4a2:	482b      	ldr	r0, [pc, #172]	; (800f550 <sys_timeout_abs+0xd4>)
 800f4a4:	f003 fc9a 	bl	8012ddc <iprintf>
    return;
 800f4a8:	e04a      	b.n	800f540 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	68fa      	ldr	r2, [r7, #12]
 800f4c0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f4c2:	4b24      	ldr	r3, [pc, #144]	; (800f554 <sys_timeout_abs+0xd8>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d103      	bne.n	800f4d2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f4ca:	4a22      	ldr	r2, [pc, #136]	; (800f554 <sys_timeout_abs+0xd8>)
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	6013      	str	r3, [r2, #0]
    return;
 800f4d0:	e037      	b.n	800f542 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f4d2:	693b      	ldr	r3, [r7, #16]
 800f4d4:	685a      	ldr	r2, [r3, #4]
 800f4d6:	4b1f      	ldr	r3, [pc, #124]	; (800f554 <sys_timeout_abs+0xd8>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	685b      	ldr	r3, [r3, #4]
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	0fdb      	lsrs	r3, r3, #31
 800f4e0:	f003 0301 	and.w	r3, r3, #1
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d007      	beq.n	800f4fa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f4ea:	4b1a      	ldr	r3, [pc, #104]	; (800f554 <sys_timeout_abs+0xd8>)
 800f4ec:	681a      	ldr	r2, [r3, #0]
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f4f2:	4a18      	ldr	r2, [pc, #96]	; (800f554 <sys_timeout_abs+0xd8>)
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	6013      	str	r3, [r2, #0]
 800f4f8:	e023      	b.n	800f542 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f4fa:	4b16      	ldr	r3, [pc, #88]	; (800f554 <sys_timeout_abs+0xd8>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	617b      	str	r3, [r7, #20]
 800f500:	e01a      	b.n	800f538 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d00b      	beq.n	800f522 <sys_timeout_abs+0xa6>
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	685a      	ldr	r2, [r3, #4]
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	1ad3      	subs	r3, r2, r3
 800f516:	0fdb      	lsrs	r3, r3, #31
 800f518:	f003 0301 	and.w	r3, r3, #1
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d007      	beq.n	800f532 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f522:	697b      	ldr	r3, [r7, #20]
 800f524:	681a      	ldr	r2, [r3, #0]
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	693a      	ldr	r2, [r7, #16]
 800f52e:	601a      	str	r2, [r3, #0]
        break;
 800f530:	e007      	b.n	800f542 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	617b      	str	r3, [r7, #20]
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d1e1      	bne.n	800f502 <sys_timeout_abs+0x86>
 800f53e:	e000      	b.n	800f542 <sys_timeout_abs+0xc6>
    return;
 800f540:	bf00      	nop
      }
    }
  }
}
 800f542:	3718      	adds	r7, #24
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}
 800f548:	0801556c 	.word	0x0801556c
 800f54c:	080155a0 	.word	0x080155a0
 800f550:	080155e0 	.word	0x080155e0
 800f554:	2000b140 	.word	0x2000b140

0800f558 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b086      	sub	sp, #24
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	4798      	blx	r3

  now = sys_now();
 800f56a:	f7f4 ff33 	bl	80043d4 <sys_now>
 800f56e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	4b0f      	ldr	r3, [pc, #60]	; (800f5b4 <lwip_cyclic_timer+0x5c>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4413      	add	r3, r2
 800f57a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	0fdb      	lsrs	r3, r3, #31
 800f584:	f003 0301 	and.w	r3, r3, #1
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d009      	beq.n	800f5a2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	4413      	add	r3, r2
 800f596:	687a      	ldr	r2, [r7, #4]
 800f598:	4907      	ldr	r1, [pc, #28]	; (800f5b8 <lwip_cyclic_timer+0x60>)
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff ff6e 	bl	800f47c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f5a0:	e004      	b.n	800f5ac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	4904      	ldr	r1, [pc, #16]	; (800f5b8 <lwip_cyclic_timer+0x60>)
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f7ff ff68 	bl	800f47c <sys_timeout_abs>
}
 800f5ac:	bf00      	nop
 800f5ae:	3718      	adds	r7, #24
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}
 800f5b4:	2000b144 	.word	0x2000b144
 800f5b8:	0800f559 	.word	0x0800f559

0800f5bc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	607b      	str	r3, [r7, #4]
 800f5c6:	e00e      	b.n	800f5e6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f5c8:	4a0b      	ldr	r2, [pc, #44]	; (800f5f8 <sys_timeouts_init+0x3c>)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	00db      	lsls	r3, r3, #3
 800f5d4:	4a08      	ldr	r2, [pc, #32]	; (800f5f8 <sys_timeouts_init+0x3c>)
 800f5d6:	4413      	add	r3, r2
 800f5d8:	461a      	mov	r2, r3
 800f5da:	4908      	ldr	r1, [pc, #32]	; (800f5fc <sys_timeouts_init+0x40>)
 800f5dc:	f000 f810 	bl	800f600 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	607b      	str	r3, [r7, #4]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2b02      	cmp	r3, #2
 800f5ea:	d9ed      	bls.n	800f5c8 <sys_timeouts_init+0xc>
  }
}
 800f5ec:	bf00      	nop
 800f5ee:	bf00      	nop
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	080161b0 	.word	0x080161b0
 800f5fc:	0800f559 	.word	0x0800f559

0800f600 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f612:	d306      	bcc.n	800f622 <sys_timeout+0x22>
 800f614:	4b0a      	ldr	r3, [pc, #40]	; (800f640 <sys_timeout+0x40>)
 800f616:	f240 1229 	movw	r2, #297	; 0x129
 800f61a:	490a      	ldr	r1, [pc, #40]	; (800f644 <sys_timeout+0x44>)
 800f61c:	480a      	ldr	r0, [pc, #40]	; (800f648 <sys_timeout+0x48>)
 800f61e:	f003 fbdd 	bl	8012ddc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f622:	f7f4 fed7 	bl	80043d4 <sys_now>
 800f626:	4602      	mov	r2, r0
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	4413      	add	r3, r2
 800f62c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	68b9      	ldr	r1, [r7, #8]
 800f632:	6978      	ldr	r0, [r7, #20]
 800f634:	f7ff ff22 	bl	800f47c <sys_timeout_abs>
#endif
}
 800f638:	bf00      	nop
 800f63a:	3718      	adds	r7, #24
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	0801556c 	.word	0x0801556c
 800f644:	08015608 	.word	0x08015608
 800f648:	080155e0 	.word	0x080155e0

0800f64c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b084      	sub	sp, #16
 800f650:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f652:	f7f4 febf 	bl	80043d4 <sys_now>
 800f656:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f658:	4b17      	ldr	r3, [pc, #92]	; (800f6b8 <sys_check_timeouts+0x6c>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d022      	beq.n	800f6aa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	1ad3      	subs	r3, r2, r3
 800f66c:	0fdb      	lsrs	r3, r3, #31
 800f66e:	f003 0301 	and.w	r3, r3, #1
 800f672:	b2db      	uxtb	r3, r3
 800f674:	2b00      	cmp	r3, #0
 800f676:	d11a      	bne.n	800f6ae <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	4a0e      	ldr	r2, [pc, #56]	; (800f6b8 <sys_check_timeouts+0x6c>)
 800f67e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	689b      	ldr	r3, [r3, #8]
 800f684:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	4a0a      	ldr	r2, [pc, #40]	; (800f6bc <sys_check_timeouts+0x70>)
 800f692:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f694:	68b9      	ldr	r1, [r7, #8]
 800f696:	200a      	movs	r0, #10
 800f698:	f7f9 fc3a 	bl	8008f10 <memp_free>
    if (handler != NULL) {
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d0da      	beq.n	800f658 <sys_check_timeouts+0xc>
      handler(arg);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6838      	ldr	r0, [r7, #0]
 800f6a6:	4798      	blx	r3
  do {
 800f6a8:	e7d6      	b.n	800f658 <sys_check_timeouts+0xc>
      return;
 800f6aa:	bf00      	nop
 800f6ac:	e000      	b.n	800f6b0 <sys_check_timeouts+0x64>
      return;
 800f6ae:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	2000b140 	.word	0x2000b140
 800f6bc:	2000b144 	.word	0x2000b144

0800f6c0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f6c6:	4b16      	ldr	r3, [pc, #88]	; (800f720 <sys_timeouts_sleeptime+0x60>)
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d102      	bne.n	800f6d4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f6d2:	e020      	b.n	800f716 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f6d4:	f7f4 fe7e 	bl	80043d4 <sys_now>
 800f6d8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f6da:	4b11      	ldr	r3, [pc, #68]	; (800f720 <sys_timeouts_sleeptime+0x60>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	685a      	ldr	r2, [r3, #4]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	1ad3      	subs	r3, r2, r3
 800f6e4:	0fdb      	lsrs	r3, r3, #31
 800f6e6:	f003 0301 	and.w	r3, r3, #1
 800f6ea:	b2db      	uxtb	r3, r3
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d001      	beq.n	800f6f4 <sys_timeouts_sleeptime+0x34>
    return 0;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	e010      	b.n	800f716 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f6f4:	4b0a      	ldr	r3, [pc, #40]	; (800f720 <sys_timeouts_sleeptime+0x60>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	685a      	ldr	r2, [r3, #4]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	1ad3      	subs	r3, r2, r3
 800f6fe:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	da06      	bge.n	800f714 <sys_timeouts_sleeptime+0x54>
 800f706:	4b07      	ldr	r3, [pc, #28]	; (800f724 <sys_timeouts_sleeptime+0x64>)
 800f708:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f70c:	4906      	ldr	r1, [pc, #24]	; (800f728 <sys_timeouts_sleeptime+0x68>)
 800f70e:	4807      	ldr	r0, [pc, #28]	; (800f72c <sys_timeouts_sleeptime+0x6c>)
 800f710:	f003 fb64 	bl	8012ddc <iprintf>
    return ret;
 800f714:	683b      	ldr	r3, [r7, #0]
  }
}
 800f716:	4618      	mov	r0, r3
 800f718:	3708      	adds	r7, #8
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	2000b140 	.word	0x2000b140
 800f724:	0801556c 	.word	0x0801556c
 800f728:	08015640 	.word	0x08015640
 800f72c:	080155e0 	.word	0x080155e0

0800f730 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f734:	f003 fb6a 	bl	8012e0c <rand>
 800f738:	4603      	mov	r3, r0
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f740:	b29b      	uxth	r3, r3
 800f742:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f746:	b29a      	uxth	r2, r3
 800f748:	4b01      	ldr	r3, [pc, #4]	; (800f750 <udp_init+0x20>)
 800f74a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f74c:	bf00      	nop
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	20000018 	.word	0x20000018

0800f754 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	4613      	mov	r3, r2
 800f760:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d105      	bne.n	800f774 <udp_input_local_match+0x20>
 800f768:	4b27      	ldr	r3, [pc, #156]	; (800f808 <udp_input_local_match+0xb4>)
 800f76a:	2287      	movs	r2, #135	; 0x87
 800f76c:	4927      	ldr	r1, [pc, #156]	; (800f80c <udp_input_local_match+0xb8>)
 800f76e:	4828      	ldr	r0, [pc, #160]	; (800f810 <udp_input_local_match+0xbc>)
 800f770:	f003 fb34 	bl	8012ddc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d105      	bne.n	800f786 <udp_input_local_match+0x32>
 800f77a:	4b23      	ldr	r3, [pc, #140]	; (800f808 <udp_input_local_match+0xb4>)
 800f77c:	2288      	movs	r2, #136	; 0x88
 800f77e:	4925      	ldr	r1, [pc, #148]	; (800f814 <udp_input_local_match+0xc0>)
 800f780:	4823      	ldr	r0, [pc, #140]	; (800f810 <udp_input_local_match+0xbc>)
 800f782:	f003 fb2b 	bl	8012ddc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	7a1b      	ldrb	r3, [r3, #8]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d00b      	beq.n	800f7a6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	7a1a      	ldrb	r2, [r3, #8]
 800f792:	4b21      	ldr	r3, [pc, #132]	; (800f818 <udp_input_local_match+0xc4>)
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f79a:	3301      	adds	r3, #1
 800f79c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d001      	beq.n	800f7a6 <udp_input_local_match+0x52>
    return 0;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	e02b      	b.n	800f7fe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f7a6:	79fb      	ldrb	r3, [r7, #7]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d018      	beq.n	800f7de <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d013      	beq.n	800f7da <udp_input_local_match+0x86>
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00f      	beq.n	800f7da <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f7ba:	4b17      	ldr	r3, [pc, #92]	; (800f818 <udp_input_local_match+0xc4>)
 800f7bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c2:	d00a      	beq.n	800f7da <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	4b13      	ldr	r3, [pc, #76]	; (800f818 <udp_input_local_match+0xc4>)
 800f7ca:	695b      	ldr	r3, [r3, #20]
 800f7cc:	405a      	eors	r2, r3
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	3308      	adds	r3, #8
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d110      	bne.n	800f7fc <udp_input_local_match+0xa8>
          return 1;
 800f7da:	2301      	movs	r3, #1
 800f7dc:	e00f      	b.n	800f7fe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d009      	beq.n	800f7f8 <udp_input_local_match+0xa4>
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d005      	beq.n	800f7f8 <udp_input_local_match+0xa4>
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	4b09      	ldr	r3, [pc, #36]	; (800f818 <udp_input_local_match+0xc4>)
 800f7f2:	695b      	ldr	r3, [r3, #20]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d101      	bne.n	800f7fc <udp_input_local_match+0xa8>
        return 1;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e000      	b.n	800f7fe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f7fc:	2300      	movs	r3, #0
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	08015654 	.word	0x08015654
 800f80c:	08015684 	.word	0x08015684
 800f810:	080156a8 	.word	0x080156a8
 800f814:	080156d0 	.word	0x080156d0
 800f818:	2000e4e4 	.word	0x2000e4e4

0800f81c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f81c:	b590      	push	{r4, r7, lr}
 800f81e:	b08d      	sub	sp, #52	; 0x34
 800f820:	af02      	add	r7, sp, #8
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f826:	2300      	movs	r3, #0
 800f828:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d105      	bne.n	800f83c <udp_input+0x20>
 800f830:	4b7c      	ldr	r3, [pc, #496]	; (800fa24 <udp_input+0x208>)
 800f832:	22cf      	movs	r2, #207	; 0xcf
 800f834:	497c      	ldr	r1, [pc, #496]	; (800fa28 <udp_input+0x20c>)
 800f836:	487d      	ldr	r0, [pc, #500]	; (800fa2c <udp_input+0x210>)
 800f838:	f003 fad0 	bl	8012ddc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d105      	bne.n	800f84e <udp_input+0x32>
 800f842:	4b78      	ldr	r3, [pc, #480]	; (800fa24 <udp_input+0x208>)
 800f844:	22d0      	movs	r2, #208	; 0xd0
 800f846:	497a      	ldr	r1, [pc, #488]	; (800fa30 <udp_input+0x214>)
 800f848:	4878      	ldr	r0, [pc, #480]	; (800fa2c <udp_input+0x210>)
 800f84a:	f003 fac7 	bl	8012ddc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	895b      	ldrh	r3, [r3, #10]
 800f852:	2b07      	cmp	r3, #7
 800f854:	d803      	bhi.n	800f85e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7fa f9fe 	bl	8009c58 <pbuf_free>
    goto end;
 800f85c:	e0de      	b.n	800fa1c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f864:	4b73      	ldr	r3, [pc, #460]	; (800fa34 <udp_input+0x218>)
 800f866:	695b      	ldr	r3, [r3, #20]
 800f868:	4a72      	ldr	r2, [pc, #456]	; (800fa34 <udp_input+0x218>)
 800f86a:	6812      	ldr	r2, [r2, #0]
 800f86c:	4611      	mov	r1, r2
 800f86e:	4618      	mov	r0, r3
 800f870:	f001 fc88 	bl	8011184 <ip4_addr_isbroadcast_u32>
 800f874:	4603      	mov	r3, r0
 800f876:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	881b      	ldrh	r3, [r3, #0]
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	4618      	mov	r0, r3
 800f880:	f7f8 fe3e 	bl	8008500 <lwip_htons>
 800f884:	4603      	mov	r3, r0
 800f886:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	885b      	ldrh	r3, [r3, #2]
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	4618      	mov	r0, r3
 800f890:	f7f8 fe36 	bl	8008500 <lwip_htons>
 800f894:	4603      	mov	r3, r0
 800f896:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f898:	2300      	movs	r3, #0
 800f89a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f89c:	2300      	movs	r3, #0
 800f89e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8a4:	4b64      	ldr	r3, [pc, #400]	; (800fa38 <udp_input+0x21c>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800f8aa:	e054      	b.n	800f956 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ae:	8a5b      	ldrh	r3, [r3, #18]
 800f8b0:	89fa      	ldrh	r2, [r7, #14]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d14a      	bne.n	800f94c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f8b6:	7cfb      	ldrb	r3, [r7, #19]
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	6839      	ldr	r1, [r7, #0]
 800f8bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8be:	f7ff ff49 	bl	800f754 <udp_input_local_match>
 800f8c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d041      	beq.n	800f94c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ca:	7c1b      	ldrb	r3, [r3, #16]
 800f8cc:	f003 0304 	and.w	r3, r3, #4
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d11d      	bne.n	800f910 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d102      	bne.n	800f8e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8dc:	61fb      	str	r3, [r7, #28]
 800f8de:	e017      	b.n	800f910 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f8e0:	7cfb      	ldrb	r3, [r7, #19]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d014      	beq.n	800f910 <udp_input+0xf4>
 800f8e6:	4b53      	ldr	r3, [pc, #332]	; (800fa34 <udp_input+0x218>)
 800f8e8:	695b      	ldr	r3, [r3, #20]
 800f8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ee:	d10f      	bne.n	800f910 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f8f0:	69fb      	ldr	r3, [r7, #28]
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	3304      	adds	r3, #4
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d008      	beq.n	800f910 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	3304      	adds	r3, #4
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	429a      	cmp	r2, r3
 800f90a:	d101      	bne.n	800f910 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f912:	8a9b      	ldrh	r3, [r3, #20]
 800f914:	8a3a      	ldrh	r2, [r7, #16]
 800f916:	429a      	cmp	r2, r3
 800f918:	d118      	bne.n	800f94c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d005      	beq.n	800f92e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f924:	685a      	ldr	r2, [r3, #4]
 800f926:	4b43      	ldr	r3, [pc, #268]	; (800fa34 <udp_input+0x218>)
 800f928:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d10e      	bne.n	800f94c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d014      	beq.n	800f95e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f936:	68da      	ldr	r2, [r3, #12]
 800f938:	6a3b      	ldr	r3, [r7, #32]
 800f93a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f93c:	4b3e      	ldr	r3, [pc, #248]	; (800fa38 <udp_input+0x21c>)
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f942:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f944:	4a3c      	ldr	r2, [pc, #240]	; (800fa38 <udp_input+0x21c>)
 800f946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f948:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f94a:	e008      	b.n	800f95e <udp_input+0x142>
      }
    }

    prev = pcb;
 800f94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f94e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	627b      	str	r3, [r7, #36]	; 0x24
 800f956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d1a7      	bne.n	800f8ac <udp_input+0x90>
 800f95c:	e000      	b.n	800f960 <udp_input+0x144>
        break;
 800f95e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f962:	2b00      	cmp	r3, #0
 800f964:	d101      	bne.n	800f96a <udp_input+0x14e>
    pcb = uncon_pcb;
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d002      	beq.n	800f976 <udp_input+0x15a>
    for_us = 1;
 800f970:	2301      	movs	r3, #1
 800f972:	76fb      	strb	r3, [r7, #27]
 800f974:	e00a      	b.n	800f98c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	3304      	adds	r3, #4
 800f97a:	681a      	ldr	r2, [r3, #0]
 800f97c:	4b2d      	ldr	r3, [pc, #180]	; (800fa34 <udp_input+0x218>)
 800f97e:	695b      	ldr	r3, [r3, #20]
 800f980:	429a      	cmp	r2, r3
 800f982:	bf0c      	ite	eq
 800f984:	2301      	moveq	r3, #1
 800f986:	2300      	movne	r3, #0
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f98c:	7efb      	ldrb	r3, [r7, #27]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d041      	beq.n	800fa16 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f992:	2108      	movs	r1, #8
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7fa f8d9 	bl	8009b4c <pbuf_remove_header>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00a      	beq.n	800f9b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f9a0:	4b20      	ldr	r3, [pc, #128]	; (800fa24 <udp_input+0x208>)
 800f9a2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f9a6:	4925      	ldr	r1, [pc, #148]	; (800fa3c <udp_input+0x220>)
 800f9a8:	4820      	ldr	r0, [pc, #128]	; (800fa2c <udp_input+0x210>)
 800f9aa:	f003 fa17 	bl	8012ddc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7fa f952 	bl	8009c58 <pbuf_free>
      goto end;
 800f9b4:	e032      	b.n	800fa1c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d012      	beq.n	800f9e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9be:	699b      	ldr	r3, [r3, #24]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d00a      	beq.n	800f9da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c6:	699c      	ldr	r4, [r3, #24]
 800f9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ca:	69d8      	ldr	r0, [r3, #28]
 800f9cc:	8a3b      	ldrh	r3, [r7, #16]
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	4b1b      	ldr	r3, [pc, #108]	; (800fa40 <udp_input+0x224>)
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f9d8:	e021      	b.n	800fa1e <udp_input+0x202>
        pbuf_free(p);
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f7fa f93c 	bl	8009c58 <pbuf_free>
        goto end;
 800f9e0:	e01c      	b.n	800fa1c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f9e2:	7cfb      	ldrb	r3, [r7, #19]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d112      	bne.n	800fa0e <udp_input+0x1f2>
 800f9e8:	4b12      	ldr	r3, [pc, #72]	; (800fa34 <udp_input+0x218>)
 800f9ea:	695b      	ldr	r3, [r3, #20]
 800f9ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9f0:	2be0      	cmp	r3, #224	; 0xe0
 800f9f2:	d00c      	beq.n	800fa0e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f9f4:	4b0f      	ldr	r3, [pc, #60]	; (800fa34 <udp_input+0x218>)
 800f9f6:	899b      	ldrh	r3, [r3, #12]
 800f9f8:	3308      	adds	r3, #8
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	b21b      	sxth	r3, r3
 800f9fe:	4619      	mov	r1, r3
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f7fa f916 	bl	8009c32 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fa06:	2103      	movs	r1, #3
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f001 f89b 	bl	8010b44 <icmp_dest_unreach>
      pbuf_free(p);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f7fa f922 	bl	8009c58 <pbuf_free>
  return;
 800fa14:	e003      	b.n	800fa1e <udp_input+0x202>
    pbuf_free(p);
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f7fa f91e 	bl	8009c58 <pbuf_free>
  return;
 800fa1c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fa1e:	372c      	adds	r7, #44	; 0x2c
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd90      	pop	{r4, r7, pc}
 800fa24:	08015654 	.word	0x08015654
 800fa28:	080156f8 	.word	0x080156f8
 800fa2c:	080156a8 	.word	0x080156a8
 800fa30:	08015710 	.word	0x08015710
 800fa34:	2000e4e4 	.word	0x2000e4e4
 800fa38:	20011c10 	.word	0x20011c10
 800fa3c:	0801572c 	.word	0x0801572c
 800fa40:	2000e4f4 	.word	0x2000e4f4

0800fa44 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b085      	sub	sp, #20
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d01e      	beq.n	800fa92 <udp_netif_ip_addr_changed+0x4e>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d01a      	beq.n	800fa92 <udp_netif_ip_addr_changed+0x4e>
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d017      	beq.n	800fa92 <udp_netif_ip_addr_changed+0x4e>
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d013      	beq.n	800fa92 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fa6a:	4b0d      	ldr	r3, [pc, #52]	; (800faa0 <udp_netif_ip_addr_changed+0x5c>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	60fb      	str	r3, [r7, #12]
 800fa70:	e00c      	b.n	800fa8c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d103      	bne.n	800fa86 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	68db      	ldr	r3, [r3, #12]
 800fa8a:	60fb      	str	r3, [r7, #12]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d1ef      	bne.n	800fa72 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fa92:	bf00      	nop
 800fa94:	3714      	adds	r7, #20
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop
 800faa0:	20011c10 	.word	0x20011c10

0800faa4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800faac:	4915      	ldr	r1, [pc, #84]	; (800fb04 <etharp_free_entry+0x60>)
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	4613      	mov	r3, r2
 800fab2:	005b      	lsls	r3, r3, #1
 800fab4:	4413      	add	r3, r2
 800fab6:	00db      	lsls	r3, r3, #3
 800fab8:	440b      	add	r3, r1
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d013      	beq.n	800fae8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800fac0:	4910      	ldr	r1, [pc, #64]	; (800fb04 <etharp_free_entry+0x60>)
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	4613      	mov	r3, r2
 800fac6:	005b      	lsls	r3, r3, #1
 800fac8:	4413      	add	r3, r2
 800faca:	00db      	lsls	r3, r3, #3
 800facc:	440b      	add	r3, r1
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7fa f8c1 	bl	8009c58 <pbuf_free>
    arp_table[i].q = NULL;
 800fad6:	490b      	ldr	r1, [pc, #44]	; (800fb04 <etharp_free_entry+0x60>)
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	4613      	mov	r3, r2
 800fadc:	005b      	lsls	r3, r3, #1
 800fade:	4413      	add	r3, r2
 800fae0:	00db      	lsls	r3, r3, #3
 800fae2:	440b      	add	r3, r1
 800fae4:	2200      	movs	r2, #0
 800fae6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800fae8:	4906      	ldr	r1, [pc, #24]	; (800fb04 <etharp_free_entry+0x60>)
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	4613      	mov	r3, r2
 800faee:	005b      	lsls	r3, r3, #1
 800faf0:	4413      	add	r3, r2
 800faf2:	00db      	lsls	r3, r3, #3
 800faf4:	440b      	add	r3, r1
 800faf6:	3314      	adds	r3, #20
 800faf8:	2200      	movs	r2, #0
 800fafa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800fafc:	bf00      	nop
 800fafe:	3708      	adds	r7, #8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	2000b14c 	.word	0x2000b14c

0800fb08 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fb0e:	2300      	movs	r3, #0
 800fb10:	607b      	str	r3, [r7, #4]
 800fb12:	e096      	b.n	800fc42 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800fb14:	494f      	ldr	r1, [pc, #316]	; (800fc54 <etharp_tmr+0x14c>)
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	4613      	mov	r3, r2
 800fb1a:	005b      	lsls	r3, r3, #1
 800fb1c:	4413      	add	r3, r2
 800fb1e:	00db      	lsls	r3, r3, #3
 800fb20:	440b      	add	r3, r1
 800fb22:	3314      	adds	r3, #20
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800fb28:	78fb      	ldrb	r3, [r7, #3]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	f000 8086 	beq.w	800fc3c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800fb30:	4948      	ldr	r1, [pc, #288]	; (800fc54 <etharp_tmr+0x14c>)
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	4613      	mov	r3, r2
 800fb36:	005b      	lsls	r3, r3, #1
 800fb38:	4413      	add	r3, r2
 800fb3a:	00db      	lsls	r3, r3, #3
 800fb3c:	440b      	add	r3, r1
 800fb3e:	3312      	adds	r3, #18
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	3301      	adds	r3, #1
 800fb44:	b298      	uxth	r0, r3
 800fb46:	4943      	ldr	r1, [pc, #268]	; (800fc54 <etharp_tmr+0x14c>)
 800fb48:	687a      	ldr	r2, [r7, #4]
 800fb4a:	4613      	mov	r3, r2
 800fb4c:	005b      	lsls	r3, r3, #1
 800fb4e:	4413      	add	r3, r2
 800fb50:	00db      	lsls	r3, r3, #3
 800fb52:	440b      	add	r3, r1
 800fb54:	3312      	adds	r3, #18
 800fb56:	4602      	mov	r2, r0
 800fb58:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fb5a:	493e      	ldr	r1, [pc, #248]	; (800fc54 <etharp_tmr+0x14c>)
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	4613      	mov	r3, r2
 800fb60:	005b      	lsls	r3, r3, #1
 800fb62:	4413      	add	r3, r2
 800fb64:	00db      	lsls	r3, r3, #3
 800fb66:	440b      	add	r3, r1
 800fb68:	3312      	adds	r3, #18
 800fb6a:	881b      	ldrh	r3, [r3, #0]
 800fb6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fb70:	d215      	bcs.n	800fb9e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fb72:	4938      	ldr	r1, [pc, #224]	; (800fc54 <etharp_tmr+0x14c>)
 800fb74:	687a      	ldr	r2, [r7, #4]
 800fb76:	4613      	mov	r3, r2
 800fb78:	005b      	lsls	r3, r3, #1
 800fb7a:	4413      	add	r3, r2
 800fb7c:	00db      	lsls	r3, r3, #3
 800fb7e:	440b      	add	r3, r1
 800fb80:	3314      	adds	r3, #20
 800fb82:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800fb84:	2b01      	cmp	r3, #1
 800fb86:	d10e      	bne.n	800fba6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800fb88:	4932      	ldr	r1, [pc, #200]	; (800fc54 <etharp_tmr+0x14c>)
 800fb8a:	687a      	ldr	r2, [r7, #4]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	005b      	lsls	r3, r3, #1
 800fb90:	4413      	add	r3, r2
 800fb92:	00db      	lsls	r3, r3, #3
 800fb94:	440b      	add	r3, r1
 800fb96:	3312      	adds	r3, #18
 800fb98:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fb9a:	2b04      	cmp	r3, #4
 800fb9c:	d903      	bls.n	800fba6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f7ff ff80 	bl	800faa4 <etharp_free_entry>
 800fba4:	e04a      	b.n	800fc3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800fba6:	492b      	ldr	r1, [pc, #172]	; (800fc54 <etharp_tmr+0x14c>)
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	4613      	mov	r3, r2
 800fbac:	005b      	lsls	r3, r3, #1
 800fbae:	4413      	add	r3, r2
 800fbb0:	00db      	lsls	r3, r3, #3
 800fbb2:	440b      	add	r3, r1
 800fbb4:	3314      	adds	r3, #20
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	2b03      	cmp	r3, #3
 800fbba:	d10a      	bne.n	800fbd2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800fbbc:	4925      	ldr	r1, [pc, #148]	; (800fc54 <etharp_tmr+0x14c>)
 800fbbe:	687a      	ldr	r2, [r7, #4]
 800fbc0:	4613      	mov	r3, r2
 800fbc2:	005b      	lsls	r3, r3, #1
 800fbc4:	4413      	add	r3, r2
 800fbc6:	00db      	lsls	r3, r3, #3
 800fbc8:	440b      	add	r3, r1
 800fbca:	3314      	adds	r3, #20
 800fbcc:	2204      	movs	r2, #4
 800fbce:	701a      	strb	r2, [r3, #0]
 800fbd0:	e034      	b.n	800fc3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800fbd2:	4920      	ldr	r1, [pc, #128]	; (800fc54 <etharp_tmr+0x14c>)
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	005b      	lsls	r3, r3, #1
 800fbda:	4413      	add	r3, r2
 800fbdc:	00db      	lsls	r3, r3, #3
 800fbde:	440b      	add	r3, r1
 800fbe0:	3314      	adds	r3, #20
 800fbe2:	781b      	ldrb	r3, [r3, #0]
 800fbe4:	2b04      	cmp	r3, #4
 800fbe6:	d10a      	bne.n	800fbfe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800fbe8:	491a      	ldr	r1, [pc, #104]	; (800fc54 <etharp_tmr+0x14c>)
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	4613      	mov	r3, r2
 800fbee:	005b      	lsls	r3, r3, #1
 800fbf0:	4413      	add	r3, r2
 800fbf2:	00db      	lsls	r3, r3, #3
 800fbf4:	440b      	add	r3, r1
 800fbf6:	3314      	adds	r3, #20
 800fbf8:	2202      	movs	r2, #2
 800fbfa:	701a      	strb	r2, [r3, #0]
 800fbfc:	e01e      	b.n	800fc3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fbfe:	4915      	ldr	r1, [pc, #84]	; (800fc54 <etharp_tmr+0x14c>)
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	4613      	mov	r3, r2
 800fc04:	005b      	lsls	r3, r3, #1
 800fc06:	4413      	add	r3, r2
 800fc08:	00db      	lsls	r3, r3, #3
 800fc0a:	440b      	add	r3, r1
 800fc0c:	3314      	adds	r3, #20
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d113      	bne.n	800fc3c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800fc14:	490f      	ldr	r1, [pc, #60]	; (800fc54 <etharp_tmr+0x14c>)
 800fc16:	687a      	ldr	r2, [r7, #4]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	005b      	lsls	r3, r3, #1
 800fc1c:	4413      	add	r3, r2
 800fc1e:	00db      	lsls	r3, r3, #3
 800fc20:	440b      	add	r3, r1
 800fc22:	3308      	adds	r3, #8
 800fc24:	6818      	ldr	r0, [r3, #0]
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	4613      	mov	r3, r2
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	4413      	add	r3, r2
 800fc2e:	00db      	lsls	r3, r3, #3
 800fc30:	4a08      	ldr	r2, [pc, #32]	; (800fc54 <etharp_tmr+0x14c>)
 800fc32:	4413      	add	r3, r2
 800fc34:	3304      	adds	r3, #4
 800fc36:	4619      	mov	r1, r3
 800fc38:	f000 fe6e 	bl	8010918 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	607b      	str	r3, [r7, #4]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2b09      	cmp	r3, #9
 800fc46:	f77f af65 	ble.w	800fb14 <etharp_tmr+0xc>
      }
    }
  }
}
 800fc4a:	bf00      	nop
 800fc4c:	bf00      	nop
 800fc4e:	3708      	adds	r7, #8
 800fc50:	46bd      	mov	sp, r7
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	2000b14c 	.word	0x2000b14c

0800fc58 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b08a      	sub	sp, #40	; 0x28
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	460b      	mov	r3, r1
 800fc62:	607a      	str	r2, [r7, #4]
 800fc64:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800fc66:	230a      	movs	r3, #10
 800fc68:	84fb      	strh	r3, [r7, #38]	; 0x26
 800fc6a:	230a      	movs	r3, #10
 800fc6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800fc6e:	230a      	movs	r3, #10
 800fc70:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800fc72:	2300      	movs	r3, #0
 800fc74:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800fc76:	230a      	movs	r3, #10
 800fc78:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	83bb      	strh	r3, [r7, #28]
 800fc7e:	2300      	movs	r3, #0
 800fc80:	837b      	strh	r3, [r7, #26]
 800fc82:	2300      	movs	r3, #0
 800fc84:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fc86:	2300      	movs	r3, #0
 800fc88:	843b      	strh	r3, [r7, #32]
 800fc8a:	e0ae      	b.n	800fdea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800fc8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fc90:	49a6      	ldr	r1, [pc, #664]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fc92:	4613      	mov	r3, r2
 800fc94:	005b      	lsls	r3, r3, #1
 800fc96:	4413      	add	r3, r2
 800fc98:	00db      	lsls	r3, r3, #3
 800fc9a:	440b      	add	r3, r1
 800fc9c:	3314      	adds	r3, #20
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800fca2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fca6:	2b0a      	cmp	r3, #10
 800fca8:	d105      	bne.n	800fcb6 <etharp_find_entry+0x5e>
 800fcaa:	7dfb      	ldrb	r3, [r7, #23]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d102      	bne.n	800fcb6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800fcb0:	8c3b      	ldrh	r3, [r7, #32]
 800fcb2:	847b      	strh	r3, [r7, #34]	; 0x22
 800fcb4:	e095      	b.n	800fde2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800fcb6:	7dfb      	ldrb	r3, [r7, #23]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	f000 8092 	beq.w	800fde2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d009      	beq.n	800fcd8 <etharp_find_entry+0x80>
 800fcc4:	7dfb      	ldrb	r3, [r7, #23]
 800fcc6:	2b01      	cmp	r3, #1
 800fcc8:	d806      	bhi.n	800fcd8 <etharp_find_entry+0x80>
 800fcca:	4b99      	ldr	r3, [pc, #612]	; (800ff30 <etharp_find_entry+0x2d8>)
 800fccc:	f240 1223 	movw	r2, #291	; 0x123
 800fcd0:	4998      	ldr	r1, [pc, #608]	; (800ff34 <etharp_find_entry+0x2dc>)
 800fcd2:	4899      	ldr	r0, [pc, #612]	; (800ff38 <etharp_find_entry+0x2e0>)
 800fcd4:	f003 f882 	bl	8012ddc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d020      	beq.n	800fd20 <etharp_find_entry+0xc8>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6819      	ldr	r1, [r3, #0]
 800fce2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fce6:	4891      	ldr	r0, [pc, #580]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fce8:	4613      	mov	r3, r2
 800fcea:	005b      	lsls	r3, r3, #1
 800fcec:	4413      	add	r3, r2
 800fcee:	00db      	lsls	r3, r3, #3
 800fcf0:	4403      	add	r3, r0
 800fcf2:	3304      	adds	r3, #4
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4299      	cmp	r1, r3
 800fcf8:	d112      	bne.n	800fd20 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d00c      	beq.n	800fd1a <etharp_find_entry+0xc2>
 800fd00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd04:	4989      	ldr	r1, [pc, #548]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fd06:	4613      	mov	r3, r2
 800fd08:	005b      	lsls	r3, r3, #1
 800fd0a:	4413      	add	r3, r2
 800fd0c:	00db      	lsls	r3, r3, #3
 800fd0e:	440b      	add	r3, r1
 800fd10:	3308      	adds	r3, #8
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	687a      	ldr	r2, [r7, #4]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d102      	bne.n	800fd20 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800fd1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fd1e:	e100      	b.n	800ff22 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800fd20:	7dfb      	ldrb	r3, [r7, #23]
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d140      	bne.n	800fda8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800fd26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd2a:	4980      	ldr	r1, [pc, #512]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fd2c:	4613      	mov	r3, r2
 800fd2e:	005b      	lsls	r3, r3, #1
 800fd30:	4413      	add	r3, r2
 800fd32:	00db      	lsls	r3, r3, #3
 800fd34:	440b      	add	r3, r1
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d01a      	beq.n	800fd72 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800fd3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd40:	497a      	ldr	r1, [pc, #488]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fd42:	4613      	mov	r3, r2
 800fd44:	005b      	lsls	r3, r3, #1
 800fd46:	4413      	add	r3, r2
 800fd48:	00db      	lsls	r3, r3, #3
 800fd4a:	440b      	add	r3, r1
 800fd4c:	3312      	adds	r3, #18
 800fd4e:	881b      	ldrh	r3, [r3, #0]
 800fd50:	8bba      	ldrh	r2, [r7, #28]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d845      	bhi.n	800fde2 <etharp_find_entry+0x18a>
            old_queue = i;
 800fd56:	8c3b      	ldrh	r3, [r7, #32]
 800fd58:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800fd5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd5e:	4973      	ldr	r1, [pc, #460]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fd60:	4613      	mov	r3, r2
 800fd62:	005b      	lsls	r3, r3, #1
 800fd64:	4413      	add	r3, r2
 800fd66:	00db      	lsls	r3, r3, #3
 800fd68:	440b      	add	r3, r1
 800fd6a:	3312      	adds	r3, #18
 800fd6c:	881b      	ldrh	r3, [r3, #0]
 800fd6e:	83bb      	strh	r3, [r7, #28]
 800fd70:	e037      	b.n	800fde2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800fd72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd76:	496d      	ldr	r1, [pc, #436]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fd78:	4613      	mov	r3, r2
 800fd7a:	005b      	lsls	r3, r3, #1
 800fd7c:	4413      	add	r3, r2
 800fd7e:	00db      	lsls	r3, r3, #3
 800fd80:	440b      	add	r3, r1
 800fd82:	3312      	adds	r3, #18
 800fd84:	881b      	ldrh	r3, [r3, #0]
 800fd86:	8b7a      	ldrh	r2, [r7, #26]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d82a      	bhi.n	800fde2 <etharp_find_entry+0x18a>
            old_pending = i;
 800fd8c:	8c3b      	ldrh	r3, [r7, #32]
 800fd8e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800fd90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fd94:	4965      	ldr	r1, [pc, #404]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fd96:	4613      	mov	r3, r2
 800fd98:	005b      	lsls	r3, r3, #1
 800fd9a:	4413      	add	r3, r2
 800fd9c:	00db      	lsls	r3, r3, #3
 800fd9e:	440b      	add	r3, r1
 800fda0:	3312      	adds	r3, #18
 800fda2:	881b      	ldrh	r3, [r3, #0]
 800fda4:	837b      	strh	r3, [r7, #26]
 800fda6:	e01c      	b.n	800fde2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800fda8:	7dfb      	ldrb	r3, [r7, #23]
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	d919      	bls.n	800fde2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800fdae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fdb2:	495e      	ldr	r1, [pc, #376]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fdb4:	4613      	mov	r3, r2
 800fdb6:	005b      	lsls	r3, r3, #1
 800fdb8:	4413      	add	r3, r2
 800fdba:	00db      	lsls	r3, r3, #3
 800fdbc:	440b      	add	r3, r1
 800fdbe:	3312      	adds	r3, #18
 800fdc0:	881b      	ldrh	r3, [r3, #0]
 800fdc2:	8b3a      	ldrh	r2, [r7, #24]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d80c      	bhi.n	800fde2 <etharp_find_entry+0x18a>
            old_stable = i;
 800fdc8:	8c3b      	ldrh	r3, [r7, #32]
 800fdca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800fdcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fdd0:	4956      	ldr	r1, [pc, #344]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	005b      	lsls	r3, r3, #1
 800fdd6:	4413      	add	r3, r2
 800fdd8:	00db      	lsls	r3, r3, #3
 800fdda:	440b      	add	r3, r1
 800fddc:	3312      	adds	r3, #18
 800fdde:	881b      	ldrh	r3, [r3, #0]
 800fde0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800fde2:	8c3b      	ldrh	r3, [r7, #32]
 800fde4:	3301      	adds	r3, #1
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	843b      	strh	r3, [r7, #32]
 800fdea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fdee:	2b09      	cmp	r3, #9
 800fdf0:	f77f af4c 	ble.w	800fc8c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800fdf4:	7afb      	ldrb	r3, [r7, #11]
 800fdf6:	f003 0302 	and.w	r3, r3, #2
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d108      	bne.n	800fe10 <etharp_find_entry+0x1b8>
 800fdfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fe02:	2b0a      	cmp	r3, #10
 800fe04:	d107      	bne.n	800fe16 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800fe06:	7afb      	ldrb	r3, [r7, #11]
 800fe08:	f003 0301 	and.w	r3, r3, #1
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d102      	bne.n	800fe16 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800fe10:	f04f 33ff 	mov.w	r3, #4294967295
 800fe14:	e085      	b.n	800ff22 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800fe16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fe1a:	2b09      	cmp	r3, #9
 800fe1c:	dc02      	bgt.n	800fe24 <etharp_find_entry+0x1cc>
    i = empty;
 800fe1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe20:	843b      	strh	r3, [r7, #32]
 800fe22:	e039      	b.n	800fe98 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800fe24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fe28:	2b09      	cmp	r3, #9
 800fe2a:	dc14      	bgt.n	800fe56 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800fe2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe2e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800fe30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fe34:	493d      	ldr	r1, [pc, #244]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fe36:	4613      	mov	r3, r2
 800fe38:	005b      	lsls	r3, r3, #1
 800fe3a:	4413      	add	r3, r2
 800fe3c:	00db      	lsls	r3, r3, #3
 800fe3e:	440b      	add	r3, r1
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d018      	beq.n	800fe78 <etharp_find_entry+0x220>
 800fe46:	4b3a      	ldr	r3, [pc, #232]	; (800ff30 <etharp_find_entry+0x2d8>)
 800fe48:	f240 126d 	movw	r2, #365	; 0x16d
 800fe4c:	493b      	ldr	r1, [pc, #236]	; (800ff3c <etharp_find_entry+0x2e4>)
 800fe4e:	483a      	ldr	r0, [pc, #232]	; (800ff38 <etharp_find_entry+0x2e0>)
 800fe50:	f002 ffc4 	bl	8012ddc <iprintf>
 800fe54:	e010      	b.n	800fe78 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800fe56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800fe5a:	2b09      	cmp	r3, #9
 800fe5c:	dc02      	bgt.n	800fe64 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800fe5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fe60:	843b      	strh	r3, [r7, #32]
 800fe62:	e009      	b.n	800fe78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800fe64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800fe68:	2b09      	cmp	r3, #9
 800fe6a:	dc02      	bgt.n	800fe72 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800fe6c:	8bfb      	ldrh	r3, [r7, #30]
 800fe6e:	843b      	strh	r3, [r7, #32]
 800fe70:	e002      	b.n	800fe78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800fe72:	f04f 33ff 	mov.w	r3, #4294967295
 800fe76:	e054      	b.n	800ff22 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fe78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fe7c:	2b09      	cmp	r3, #9
 800fe7e:	dd06      	ble.n	800fe8e <etharp_find_entry+0x236>
 800fe80:	4b2b      	ldr	r3, [pc, #172]	; (800ff30 <etharp_find_entry+0x2d8>)
 800fe82:	f240 127f 	movw	r2, #383	; 0x17f
 800fe86:	492e      	ldr	r1, [pc, #184]	; (800ff40 <etharp_find_entry+0x2e8>)
 800fe88:	482b      	ldr	r0, [pc, #172]	; (800ff38 <etharp_find_entry+0x2e0>)
 800fe8a:	f002 ffa7 	bl	8012ddc <iprintf>
    etharp_free_entry(i);
 800fe8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7ff fe06 	bl	800faa4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800fe98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800fe9c:	2b09      	cmp	r3, #9
 800fe9e:	dd06      	ble.n	800feae <etharp_find_entry+0x256>
 800fea0:	4b23      	ldr	r3, [pc, #140]	; (800ff30 <etharp_find_entry+0x2d8>)
 800fea2:	f240 1283 	movw	r2, #387	; 0x183
 800fea6:	4926      	ldr	r1, [pc, #152]	; (800ff40 <etharp_find_entry+0x2e8>)
 800fea8:	4823      	ldr	r0, [pc, #140]	; (800ff38 <etharp_find_entry+0x2e0>)
 800feaa:	f002 ff97 	bl	8012ddc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800feae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800feb2:	491e      	ldr	r1, [pc, #120]	; (800ff2c <etharp_find_entry+0x2d4>)
 800feb4:	4613      	mov	r3, r2
 800feb6:	005b      	lsls	r3, r3, #1
 800feb8:	4413      	add	r3, r2
 800feba:	00db      	lsls	r3, r3, #3
 800febc:	440b      	add	r3, r1
 800febe:	3314      	adds	r3, #20
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d006      	beq.n	800fed4 <etharp_find_entry+0x27c>
 800fec6:	4b1a      	ldr	r3, [pc, #104]	; (800ff30 <etharp_find_entry+0x2d8>)
 800fec8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800fecc:	491d      	ldr	r1, [pc, #116]	; (800ff44 <etharp_find_entry+0x2ec>)
 800fece:	481a      	ldr	r0, [pc, #104]	; (800ff38 <etharp_find_entry+0x2e0>)
 800fed0:	f002 ff84 	bl	8012ddc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d00b      	beq.n	800fef2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800feda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	6819      	ldr	r1, [r3, #0]
 800fee2:	4812      	ldr	r0, [pc, #72]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fee4:	4613      	mov	r3, r2
 800fee6:	005b      	lsls	r3, r3, #1
 800fee8:	4413      	add	r3, r2
 800feea:	00db      	lsls	r3, r3, #3
 800feec:	4403      	add	r3, r0
 800feee:	3304      	adds	r3, #4
 800fef0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800fef2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800fef6:	490d      	ldr	r1, [pc, #52]	; (800ff2c <etharp_find_entry+0x2d4>)
 800fef8:	4613      	mov	r3, r2
 800fefa:	005b      	lsls	r3, r3, #1
 800fefc:	4413      	add	r3, r2
 800fefe:	00db      	lsls	r3, r3, #3
 800ff00:	440b      	add	r3, r1
 800ff02:	3312      	adds	r3, #18
 800ff04:	2200      	movs	r2, #0
 800ff06:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ff08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ff0c:	4907      	ldr	r1, [pc, #28]	; (800ff2c <etharp_find_entry+0x2d4>)
 800ff0e:	4613      	mov	r3, r2
 800ff10:	005b      	lsls	r3, r3, #1
 800ff12:	4413      	add	r3, r2
 800ff14:	00db      	lsls	r3, r3, #3
 800ff16:	440b      	add	r3, r1
 800ff18:	3308      	adds	r3, #8
 800ff1a:	687a      	ldr	r2, [r7, #4]
 800ff1c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ff1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ff22:	4618      	mov	r0, r3
 800ff24:	3728      	adds	r7, #40	; 0x28
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	2000b14c 	.word	0x2000b14c
 800ff30:	080159b8 	.word	0x080159b8
 800ff34:	080159f0 	.word	0x080159f0
 800ff38:	08015a30 	.word	0x08015a30
 800ff3c:	08015a58 	.word	0x08015a58
 800ff40:	08015a70 	.word	0x08015a70
 800ff44:	08015a84 	.word	0x08015a84

0800ff48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b088      	sub	sp, #32
 800ff4c:	af02      	add	r7, sp, #8
 800ff4e:	60f8      	str	r0, [r7, #12]
 800ff50:	60b9      	str	r1, [r7, #8]
 800ff52:	607a      	str	r2, [r7, #4]
 800ff54:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ff5c:	2b06      	cmp	r3, #6
 800ff5e:	d006      	beq.n	800ff6e <etharp_update_arp_entry+0x26>
 800ff60:	4b48      	ldr	r3, [pc, #288]	; (8010084 <etharp_update_arp_entry+0x13c>)
 800ff62:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ff66:	4948      	ldr	r1, [pc, #288]	; (8010088 <etharp_update_arp_entry+0x140>)
 800ff68:	4848      	ldr	r0, [pc, #288]	; (801008c <etharp_update_arp_entry+0x144>)
 800ff6a:	f002 ff37 	bl	8012ddc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d012      	beq.n	800ff9a <etharp_update_arp_entry+0x52>
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d00e      	beq.n	800ff9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	68f9      	ldr	r1, [r7, #12]
 800ff82:	4618      	mov	r0, r3
 800ff84:	f001 f8fe 	bl	8011184 <ip4_addr_isbroadcast_u32>
 800ff88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d105      	bne.n	800ff9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ff96:	2be0      	cmp	r3, #224	; 0xe0
 800ff98:	d102      	bne.n	800ffa0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ff9a:	f06f 030f 	mvn.w	r3, #15
 800ff9e:	e06c      	b.n	801007a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ffa0:	78fb      	ldrb	r3, [r7, #3]
 800ffa2:	68fa      	ldr	r2, [r7, #12]
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	68b8      	ldr	r0, [r7, #8]
 800ffa8:	f7ff fe56 	bl	800fc58 <etharp_find_entry>
 800ffac:	4603      	mov	r3, r0
 800ffae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ffb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	da02      	bge.n	800ffbe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ffb8:	8afb      	ldrh	r3, [r7, #22]
 800ffba:	b25b      	sxtb	r3, r3
 800ffbc:	e05d      	b.n	801007a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ffbe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ffc2:	4933      	ldr	r1, [pc, #204]	; (8010090 <etharp_update_arp_entry+0x148>)
 800ffc4:	4613      	mov	r3, r2
 800ffc6:	005b      	lsls	r3, r3, #1
 800ffc8:	4413      	add	r3, r2
 800ffca:	00db      	lsls	r3, r3, #3
 800ffcc:	440b      	add	r3, r1
 800ffce:	3314      	adds	r3, #20
 800ffd0:	2202      	movs	r2, #2
 800ffd2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ffd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ffd8:	492d      	ldr	r1, [pc, #180]	; (8010090 <etharp_update_arp_entry+0x148>)
 800ffda:	4613      	mov	r3, r2
 800ffdc:	005b      	lsls	r3, r3, #1
 800ffde:	4413      	add	r3, r2
 800ffe0:	00db      	lsls	r3, r3, #3
 800ffe2:	440b      	add	r3, r1
 800ffe4:	3308      	adds	r3, #8
 800ffe6:	68fa      	ldr	r2, [r7, #12]
 800ffe8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ffea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ffee:	4613      	mov	r3, r2
 800fff0:	005b      	lsls	r3, r3, #1
 800fff2:	4413      	add	r3, r2
 800fff4:	00db      	lsls	r3, r3, #3
 800fff6:	3308      	adds	r3, #8
 800fff8:	4a25      	ldr	r2, [pc, #148]	; (8010090 <etharp_update_arp_entry+0x148>)
 800fffa:	4413      	add	r3, r2
 800fffc:	3304      	adds	r3, #4
 800fffe:	2206      	movs	r2, #6
 8010000:	6879      	ldr	r1, [r7, #4]
 8010002:	4618      	mov	r0, r3
 8010004:	f002 fb3c 	bl	8012680 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010008:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801000c:	4920      	ldr	r1, [pc, #128]	; (8010090 <etharp_update_arp_entry+0x148>)
 801000e:	4613      	mov	r3, r2
 8010010:	005b      	lsls	r3, r3, #1
 8010012:	4413      	add	r3, r2
 8010014:	00db      	lsls	r3, r3, #3
 8010016:	440b      	add	r3, r1
 8010018:	3312      	adds	r3, #18
 801001a:	2200      	movs	r2, #0
 801001c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801001e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010022:	491b      	ldr	r1, [pc, #108]	; (8010090 <etharp_update_arp_entry+0x148>)
 8010024:	4613      	mov	r3, r2
 8010026:	005b      	lsls	r3, r3, #1
 8010028:	4413      	add	r3, r2
 801002a:	00db      	lsls	r3, r3, #3
 801002c:	440b      	add	r3, r1
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d021      	beq.n	8010078 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010034:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010038:	4915      	ldr	r1, [pc, #84]	; (8010090 <etharp_update_arp_entry+0x148>)
 801003a:	4613      	mov	r3, r2
 801003c:	005b      	lsls	r3, r3, #1
 801003e:	4413      	add	r3, r2
 8010040:	00db      	lsls	r3, r3, #3
 8010042:	440b      	add	r3, r1
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010048:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801004c:	4910      	ldr	r1, [pc, #64]	; (8010090 <etharp_update_arp_entry+0x148>)
 801004e:	4613      	mov	r3, r2
 8010050:	005b      	lsls	r3, r3, #1
 8010052:	4413      	add	r3, r2
 8010054:	00db      	lsls	r3, r3, #3
 8010056:	440b      	add	r3, r1
 8010058:	2200      	movs	r2, #0
 801005a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6939      	ldr	r1, [r7, #16]
 801006c:	68f8      	ldr	r0, [r7, #12]
 801006e:	f001 ff91 	bl	8011f94 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010072:	6938      	ldr	r0, [r7, #16]
 8010074:	f7f9 fdf0 	bl	8009c58 <pbuf_free>
  }
  return ERR_OK;
 8010078:	2300      	movs	r3, #0
}
 801007a:	4618      	mov	r0, r3
 801007c:	3718      	adds	r7, #24
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	080159b8 	.word	0x080159b8
 8010088:	08015ab0 	.word	0x08015ab0
 801008c:	08015a30 	.word	0x08015a30
 8010090:	2000b14c 	.word	0x2000b14c

08010094 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801009c:	2300      	movs	r3, #0
 801009e:	60fb      	str	r3, [r7, #12]
 80100a0:	e01e      	b.n	80100e0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80100a2:	4913      	ldr	r1, [pc, #76]	; (80100f0 <etharp_cleanup_netif+0x5c>)
 80100a4:	68fa      	ldr	r2, [r7, #12]
 80100a6:	4613      	mov	r3, r2
 80100a8:	005b      	lsls	r3, r3, #1
 80100aa:	4413      	add	r3, r2
 80100ac:	00db      	lsls	r3, r3, #3
 80100ae:	440b      	add	r3, r1
 80100b0:	3314      	adds	r3, #20
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80100b6:	7afb      	ldrb	r3, [r7, #11]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00e      	beq.n	80100da <etharp_cleanup_netif+0x46>
 80100bc:	490c      	ldr	r1, [pc, #48]	; (80100f0 <etharp_cleanup_netif+0x5c>)
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	4613      	mov	r3, r2
 80100c2:	005b      	lsls	r3, r3, #1
 80100c4:	4413      	add	r3, r2
 80100c6:	00db      	lsls	r3, r3, #3
 80100c8:	440b      	add	r3, r1
 80100ca:	3308      	adds	r3, #8
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	687a      	ldr	r2, [r7, #4]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d102      	bne.n	80100da <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80100d4:	68f8      	ldr	r0, [r7, #12]
 80100d6:	f7ff fce5 	bl	800faa4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	3301      	adds	r3, #1
 80100de:	60fb      	str	r3, [r7, #12]
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2b09      	cmp	r3, #9
 80100e4:	dddd      	ble.n	80100a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80100e6:	bf00      	nop
 80100e8:	bf00      	nop
 80100ea:	3710      	adds	r7, #16
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	2000b14c 	.word	0x2000b14c

080100f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80100f4:	b5b0      	push	{r4, r5, r7, lr}
 80100f6:	b08a      	sub	sp, #40	; 0x28
 80100f8:	af04      	add	r7, sp, #16
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d107      	bne.n	8010114 <etharp_input+0x20>
 8010104:	4b3d      	ldr	r3, [pc, #244]	; (80101fc <etharp_input+0x108>)
 8010106:	f240 228a 	movw	r2, #650	; 0x28a
 801010a:	493d      	ldr	r1, [pc, #244]	; (8010200 <etharp_input+0x10c>)
 801010c:	483d      	ldr	r0, [pc, #244]	; (8010204 <etharp_input+0x110>)
 801010e:	f002 fe65 	bl	8012ddc <iprintf>
 8010112:	e06f      	b.n	80101f4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	881b      	ldrh	r3, [r3, #0]
 801011e:	b29b      	uxth	r3, r3
 8010120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010124:	d10c      	bne.n	8010140 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801012a:	2b06      	cmp	r3, #6
 801012c:	d108      	bne.n	8010140 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010132:	2b04      	cmp	r3, #4
 8010134:	d104      	bne.n	8010140 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	885b      	ldrh	r3, [r3, #2]
 801013a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801013c:	2b08      	cmp	r3, #8
 801013e:	d003      	beq.n	8010148 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f7f9 fd89 	bl	8009c58 <pbuf_free>
    return;
 8010146:	e055      	b.n	80101f4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	330e      	adds	r3, #14
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	3318      	adds	r3, #24
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	3304      	adds	r3, #4
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d102      	bne.n	8010168 <etharp_input+0x74>
    for_us = 0;
 8010162:	2300      	movs	r3, #0
 8010164:	75fb      	strb	r3, [r7, #23]
 8010166:	e009      	b.n	801017c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	3304      	adds	r3, #4
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	429a      	cmp	r2, r3
 8010172:	bf0c      	ite	eq
 8010174:	2301      	moveq	r3, #1
 8010176:	2300      	movne	r3, #0
 8010178:	b2db      	uxtb	r3, r3
 801017a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	f103 0208 	add.w	r2, r3, #8
 8010182:	7dfb      	ldrb	r3, [r7, #23]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <etharp_input+0x98>
 8010188:	2301      	movs	r3, #1
 801018a:	e000      	b.n	801018e <etharp_input+0x9a>
 801018c:	2302      	movs	r3, #2
 801018e:	f107 010c 	add.w	r1, r7, #12
 8010192:	6838      	ldr	r0, [r7, #0]
 8010194:	f7ff fed8 	bl	800ff48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010198:	693b      	ldr	r3, [r7, #16]
 801019a:	88db      	ldrh	r3, [r3, #6]
 801019c:	b29b      	uxth	r3, r3
 801019e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101a2:	d003      	beq.n	80101ac <etharp_input+0xb8>
 80101a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101a8:	d01e      	beq.n	80101e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80101aa:	e020      	b.n	80101ee <etharp_input+0xfa>
      if (for_us) {
 80101ac:	7dfb      	ldrb	r3, [r7, #23]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d01c      	beq.n	80101ec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80101c8:	693a      	ldr	r2, [r7, #16]
 80101ca:	3208      	adds	r2, #8
        etharp_raw(netif,
 80101cc:	2102      	movs	r1, #2
 80101ce:	9103      	str	r1, [sp, #12]
 80101d0:	f107 010c 	add.w	r1, r7, #12
 80101d4:	9102      	str	r1, [sp, #8]
 80101d6:	9201      	str	r2, [sp, #4]
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	462b      	mov	r3, r5
 80101dc:	4622      	mov	r2, r4
 80101de:	4601      	mov	r1, r0
 80101e0:	6838      	ldr	r0, [r7, #0]
 80101e2:	f000 faeb 	bl	80107bc <etharp_raw>
      break;
 80101e6:	e001      	b.n	80101ec <etharp_input+0xf8>
      break;
 80101e8:	bf00      	nop
 80101ea:	e000      	b.n	80101ee <etharp_input+0xfa>
      break;
 80101ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7f9 fd32 	bl	8009c58 <pbuf_free>
}
 80101f4:	3718      	adds	r7, #24
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bdb0      	pop	{r4, r5, r7, pc}
 80101fa:	bf00      	nop
 80101fc:	080159b8 	.word	0x080159b8
 8010200:	08015b08 	.word	0x08015b08
 8010204:	08015a30 	.word	0x08015a30

08010208 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b086      	sub	sp, #24
 801020c:	af02      	add	r7, sp, #8
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	4613      	mov	r3, r2
 8010214:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010216:	79fa      	ldrb	r2, [r7, #7]
 8010218:	4944      	ldr	r1, [pc, #272]	; (801032c <etharp_output_to_arp_index+0x124>)
 801021a:	4613      	mov	r3, r2
 801021c:	005b      	lsls	r3, r3, #1
 801021e:	4413      	add	r3, r2
 8010220:	00db      	lsls	r3, r3, #3
 8010222:	440b      	add	r3, r1
 8010224:	3314      	adds	r3, #20
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	2b01      	cmp	r3, #1
 801022a:	d806      	bhi.n	801023a <etharp_output_to_arp_index+0x32>
 801022c:	4b40      	ldr	r3, [pc, #256]	; (8010330 <etharp_output_to_arp_index+0x128>)
 801022e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010232:	4940      	ldr	r1, [pc, #256]	; (8010334 <etharp_output_to_arp_index+0x12c>)
 8010234:	4840      	ldr	r0, [pc, #256]	; (8010338 <etharp_output_to_arp_index+0x130>)
 8010236:	f002 fdd1 	bl	8012ddc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801023a:	79fa      	ldrb	r2, [r7, #7]
 801023c:	493b      	ldr	r1, [pc, #236]	; (801032c <etharp_output_to_arp_index+0x124>)
 801023e:	4613      	mov	r3, r2
 8010240:	005b      	lsls	r3, r3, #1
 8010242:	4413      	add	r3, r2
 8010244:	00db      	lsls	r3, r3, #3
 8010246:	440b      	add	r3, r1
 8010248:	3314      	adds	r3, #20
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	2b02      	cmp	r3, #2
 801024e:	d153      	bne.n	80102f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010250:	79fa      	ldrb	r2, [r7, #7]
 8010252:	4936      	ldr	r1, [pc, #216]	; (801032c <etharp_output_to_arp_index+0x124>)
 8010254:	4613      	mov	r3, r2
 8010256:	005b      	lsls	r3, r3, #1
 8010258:	4413      	add	r3, r2
 801025a:	00db      	lsls	r3, r3, #3
 801025c:	440b      	add	r3, r1
 801025e:	3312      	adds	r3, #18
 8010260:	881b      	ldrh	r3, [r3, #0]
 8010262:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010266:	d919      	bls.n	801029c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010268:	79fa      	ldrb	r2, [r7, #7]
 801026a:	4613      	mov	r3, r2
 801026c:	005b      	lsls	r3, r3, #1
 801026e:	4413      	add	r3, r2
 8010270:	00db      	lsls	r3, r3, #3
 8010272:	4a2e      	ldr	r2, [pc, #184]	; (801032c <etharp_output_to_arp_index+0x124>)
 8010274:	4413      	add	r3, r2
 8010276:	3304      	adds	r3, #4
 8010278:	4619      	mov	r1, r3
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	f000 fb4c 	bl	8010918 <etharp_request>
 8010280:	4603      	mov	r3, r0
 8010282:	2b00      	cmp	r3, #0
 8010284:	d138      	bne.n	80102f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010286:	79fa      	ldrb	r2, [r7, #7]
 8010288:	4928      	ldr	r1, [pc, #160]	; (801032c <etharp_output_to_arp_index+0x124>)
 801028a:	4613      	mov	r3, r2
 801028c:	005b      	lsls	r3, r3, #1
 801028e:	4413      	add	r3, r2
 8010290:	00db      	lsls	r3, r3, #3
 8010292:	440b      	add	r3, r1
 8010294:	3314      	adds	r3, #20
 8010296:	2203      	movs	r2, #3
 8010298:	701a      	strb	r2, [r3, #0]
 801029a:	e02d      	b.n	80102f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801029c:	79fa      	ldrb	r2, [r7, #7]
 801029e:	4923      	ldr	r1, [pc, #140]	; (801032c <etharp_output_to_arp_index+0x124>)
 80102a0:	4613      	mov	r3, r2
 80102a2:	005b      	lsls	r3, r3, #1
 80102a4:	4413      	add	r3, r2
 80102a6:	00db      	lsls	r3, r3, #3
 80102a8:	440b      	add	r3, r1
 80102aa:	3312      	adds	r3, #18
 80102ac:	881b      	ldrh	r3, [r3, #0]
 80102ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80102b2:	d321      	bcc.n	80102f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80102b4:	79fa      	ldrb	r2, [r7, #7]
 80102b6:	4613      	mov	r3, r2
 80102b8:	005b      	lsls	r3, r3, #1
 80102ba:	4413      	add	r3, r2
 80102bc:	00db      	lsls	r3, r3, #3
 80102be:	4a1b      	ldr	r2, [pc, #108]	; (801032c <etharp_output_to_arp_index+0x124>)
 80102c0:	4413      	add	r3, r2
 80102c2:	1d19      	adds	r1, r3, #4
 80102c4:	79fa      	ldrb	r2, [r7, #7]
 80102c6:	4613      	mov	r3, r2
 80102c8:	005b      	lsls	r3, r3, #1
 80102ca:	4413      	add	r3, r2
 80102cc:	00db      	lsls	r3, r3, #3
 80102ce:	3308      	adds	r3, #8
 80102d0:	4a16      	ldr	r2, [pc, #88]	; (801032c <etharp_output_to_arp_index+0x124>)
 80102d2:	4413      	add	r3, r2
 80102d4:	3304      	adds	r3, #4
 80102d6:	461a      	mov	r2, r3
 80102d8:	68f8      	ldr	r0, [r7, #12]
 80102da:	f000 fafb 	bl	80108d4 <etharp_request_dst>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d109      	bne.n	80102f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80102e4:	79fa      	ldrb	r2, [r7, #7]
 80102e6:	4911      	ldr	r1, [pc, #68]	; (801032c <etharp_output_to_arp_index+0x124>)
 80102e8:	4613      	mov	r3, r2
 80102ea:	005b      	lsls	r3, r3, #1
 80102ec:	4413      	add	r3, r2
 80102ee:	00db      	lsls	r3, r3, #3
 80102f0:	440b      	add	r3, r1
 80102f2:	3314      	adds	r3, #20
 80102f4:	2203      	movs	r2, #3
 80102f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80102fe:	79fa      	ldrb	r2, [r7, #7]
 8010300:	4613      	mov	r3, r2
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	4413      	add	r3, r2
 8010306:	00db      	lsls	r3, r3, #3
 8010308:	3308      	adds	r3, #8
 801030a:	4a08      	ldr	r2, [pc, #32]	; (801032c <etharp_output_to_arp_index+0x124>)
 801030c:	4413      	add	r3, r2
 801030e:	3304      	adds	r3, #4
 8010310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010314:	9200      	str	r2, [sp, #0]
 8010316:	460a      	mov	r2, r1
 8010318:	68b9      	ldr	r1, [r7, #8]
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	f001 fe3a 	bl	8011f94 <ethernet_output>
 8010320:	4603      	mov	r3, r0
}
 8010322:	4618      	mov	r0, r3
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	2000b14c 	.word	0x2000b14c
 8010330:	080159b8 	.word	0x080159b8
 8010334:	08015b28 	.word	0x08015b28
 8010338:	08015a30 	.word	0x08015a30

0801033c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b08a      	sub	sp, #40	; 0x28
 8010340:	af02      	add	r7, sp, #8
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d106      	bne.n	8010360 <etharp_output+0x24>
 8010352:	4b73      	ldr	r3, [pc, #460]	; (8010520 <etharp_output+0x1e4>)
 8010354:	f240 321e 	movw	r2, #798	; 0x31e
 8010358:	4972      	ldr	r1, [pc, #456]	; (8010524 <etharp_output+0x1e8>)
 801035a:	4873      	ldr	r0, [pc, #460]	; (8010528 <etharp_output+0x1ec>)
 801035c:	f002 fd3e 	bl	8012ddc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d106      	bne.n	8010374 <etharp_output+0x38>
 8010366:	4b6e      	ldr	r3, [pc, #440]	; (8010520 <etharp_output+0x1e4>)
 8010368:	f240 321f 	movw	r2, #799	; 0x31f
 801036c:	496f      	ldr	r1, [pc, #444]	; (801052c <etharp_output+0x1f0>)
 801036e:	486e      	ldr	r0, [pc, #440]	; (8010528 <etharp_output+0x1ec>)
 8010370:	f002 fd34 	bl	8012ddc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d106      	bne.n	8010388 <etharp_output+0x4c>
 801037a:	4b69      	ldr	r3, [pc, #420]	; (8010520 <etharp_output+0x1e4>)
 801037c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010380:	496b      	ldr	r1, [pc, #428]	; (8010530 <etharp_output+0x1f4>)
 8010382:	4869      	ldr	r0, [pc, #420]	; (8010528 <etharp_output+0x1ec>)
 8010384:	f002 fd2a 	bl	8012ddc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	68f9      	ldr	r1, [r7, #12]
 801038e:	4618      	mov	r0, r3
 8010390:	f000 fef8 	bl	8011184 <ip4_addr_isbroadcast_u32>
 8010394:	4603      	mov	r3, r0
 8010396:	2b00      	cmp	r3, #0
 8010398:	d002      	beq.n	80103a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801039a:	4b66      	ldr	r3, [pc, #408]	; (8010534 <etharp_output+0x1f8>)
 801039c:	61fb      	str	r3, [r7, #28]
 801039e:	e0af      	b.n	8010500 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103a8:	2be0      	cmp	r3, #224	; 0xe0
 80103aa:	d118      	bne.n	80103de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80103ac:	2301      	movs	r3, #1
 80103ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80103b0:	2300      	movs	r3, #0
 80103b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80103b4:	235e      	movs	r3, #94	; 0x5e
 80103b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	3301      	adds	r3, #1
 80103bc:	781b      	ldrb	r3, [r3, #0]
 80103be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103c2:	b2db      	uxtb	r3, r3
 80103c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	3302      	adds	r3, #2
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	3303      	adds	r3, #3
 80103d2:	781b      	ldrb	r3, [r3, #0]
 80103d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80103d6:	f107 0310 	add.w	r3, r7, #16
 80103da:	61fb      	str	r3, [r7, #28]
 80103dc:	e090      	b.n	8010500 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681a      	ldr	r2, [r3, #0]
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	3304      	adds	r3, #4
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	405a      	eors	r2, r3
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	3308      	adds	r3, #8
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4013      	ands	r3, r2
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d012      	beq.n	801041c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80103fc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010400:	4293      	cmp	r3, r2
 8010402:	d00b      	beq.n	801041c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	330c      	adds	r3, #12
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d003      	beq.n	8010416 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	330c      	adds	r3, #12
 8010412:	61bb      	str	r3, [r7, #24]
 8010414:	e002      	b.n	801041c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010416:	f06f 0303 	mvn.w	r3, #3
 801041a:	e07d      	b.n	8010518 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801041c:	4b46      	ldr	r3, [pc, #280]	; (8010538 <etharp_output+0x1fc>)
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	4619      	mov	r1, r3
 8010422:	4a46      	ldr	r2, [pc, #280]	; (801053c <etharp_output+0x200>)
 8010424:	460b      	mov	r3, r1
 8010426:	005b      	lsls	r3, r3, #1
 8010428:	440b      	add	r3, r1
 801042a:	00db      	lsls	r3, r3, #3
 801042c:	4413      	add	r3, r2
 801042e:	3314      	adds	r3, #20
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	2b01      	cmp	r3, #1
 8010434:	d925      	bls.n	8010482 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010436:	4b40      	ldr	r3, [pc, #256]	; (8010538 <etharp_output+0x1fc>)
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	4619      	mov	r1, r3
 801043c:	4a3f      	ldr	r2, [pc, #252]	; (801053c <etharp_output+0x200>)
 801043e:	460b      	mov	r3, r1
 8010440:	005b      	lsls	r3, r3, #1
 8010442:	440b      	add	r3, r1
 8010444:	00db      	lsls	r3, r3, #3
 8010446:	4413      	add	r3, r2
 8010448:	3308      	adds	r3, #8
 801044a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801044c:	68fa      	ldr	r2, [r7, #12]
 801044e:	429a      	cmp	r2, r3
 8010450:	d117      	bne.n	8010482 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	4b38      	ldr	r3, [pc, #224]	; (8010538 <etharp_output+0x1fc>)
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	4618      	mov	r0, r3
 801045c:	4937      	ldr	r1, [pc, #220]	; (801053c <etharp_output+0x200>)
 801045e:	4603      	mov	r3, r0
 8010460:	005b      	lsls	r3, r3, #1
 8010462:	4403      	add	r3, r0
 8010464:	00db      	lsls	r3, r3, #3
 8010466:	440b      	add	r3, r1
 8010468:	3304      	adds	r3, #4
 801046a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801046c:	429a      	cmp	r2, r3
 801046e:	d108      	bne.n	8010482 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010470:	4b31      	ldr	r3, [pc, #196]	; (8010538 <etharp_output+0x1fc>)
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	461a      	mov	r2, r3
 8010476:	68b9      	ldr	r1, [r7, #8]
 8010478:	68f8      	ldr	r0, [r7, #12]
 801047a:	f7ff fec5 	bl	8010208 <etharp_output_to_arp_index>
 801047e:	4603      	mov	r3, r0
 8010480:	e04a      	b.n	8010518 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010482:	2300      	movs	r3, #0
 8010484:	75fb      	strb	r3, [r7, #23]
 8010486:	e031      	b.n	80104ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010488:	7dfa      	ldrb	r2, [r7, #23]
 801048a:	492c      	ldr	r1, [pc, #176]	; (801053c <etharp_output+0x200>)
 801048c:	4613      	mov	r3, r2
 801048e:	005b      	lsls	r3, r3, #1
 8010490:	4413      	add	r3, r2
 8010492:	00db      	lsls	r3, r3, #3
 8010494:	440b      	add	r3, r1
 8010496:	3314      	adds	r3, #20
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	2b01      	cmp	r3, #1
 801049c:	d923      	bls.n	80104e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801049e:	7dfa      	ldrb	r2, [r7, #23]
 80104a0:	4926      	ldr	r1, [pc, #152]	; (801053c <etharp_output+0x200>)
 80104a2:	4613      	mov	r3, r2
 80104a4:	005b      	lsls	r3, r3, #1
 80104a6:	4413      	add	r3, r2
 80104a8:	00db      	lsls	r3, r3, #3
 80104aa:	440b      	add	r3, r1
 80104ac:	3308      	adds	r3, #8
 80104ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80104b0:	68fa      	ldr	r2, [r7, #12]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d117      	bne.n	80104e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	6819      	ldr	r1, [r3, #0]
 80104ba:	7dfa      	ldrb	r2, [r7, #23]
 80104bc:	481f      	ldr	r0, [pc, #124]	; (801053c <etharp_output+0x200>)
 80104be:	4613      	mov	r3, r2
 80104c0:	005b      	lsls	r3, r3, #1
 80104c2:	4413      	add	r3, r2
 80104c4:	00db      	lsls	r3, r3, #3
 80104c6:	4403      	add	r3, r0
 80104c8:	3304      	adds	r3, #4
 80104ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80104cc:	4299      	cmp	r1, r3
 80104ce:	d10a      	bne.n	80104e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80104d0:	4a19      	ldr	r2, [pc, #100]	; (8010538 <etharp_output+0x1fc>)
 80104d2:	7dfb      	ldrb	r3, [r7, #23]
 80104d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80104d6:	7dfb      	ldrb	r3, [r7, #23]
 80104d8:	461a      	mov	r2, r3
 80104da:	68b9      	ldr	r1, [r7, #8]
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	f7ff fe93 	bl	8010208 <etharp_output_to_arp_index>
 80104e2:	4603      	mov	r3, r0
 80104e4:	e018      	b.n	8010518 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80104e6:	7dfb      	ldrb	r3, [r7, #23]
 80104e8:	3301      	adds	r3, #1
 80104ea:	75fb      	strb	r3, [r7, #23]
 80104ec:	7dfb      	ldrb	r3, [r7, #23]
 80104ee:	2b09      	cmp	r3, #9
 80104f0:	d9ca      	bls.n	8010488 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80104f2:	68ba      	ldr	r2, [r7, #8]
 80104f4:	69b9      	ldr	r1, [r7, #24]
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f000 f822 	bl	8010540 <etharp_query>
 80104fc:	4603      	mov	r3, r0
 80104fe:	e00b      	b.n	8010518 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801050a:	9300      	str	r3, [sp, #0]
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	68b9      	ldr	r1, [r7, #8]
 8010510:	68f8      	ldr	r0, [r7, #12]
 8010512:	f001 fd3f 	bl	8011f94 <ethernet_output>
 8010516:	4603      	mov	r3, r0
}
 8010518:	4618      	mov	r0, r3
 801051a:	3720      	adds	r7, #32
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}
 8010520:	080159b8 	.word	0x080159b8
 8010524:	08015b08 	.word	0x08015b08
 8010528:	08015a30 	.word	0x08015a30
 801052c:	08015b58 	.word	0x08015b58
 8010530:	08015af8 	.word	0x08015af8
 8010534:	080161cc 	.word	0x080161cc
 8010538:	2000b23c 	.word	0x2000b23c
 801053c:	2000b14c 	.word	0x2000b14c

08010540 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b08c      	sub	sp, #48	; 0x30
 8010544:	af02      	add	r7, sp, #8
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	3326      	adds	r3, #38	; 0x26
 8010550:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010552:	23ff      	movs	r3, #255	; 0xff
 8010554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010558:	2300      	movs	r3, #0
 801055a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	68f9      	ldr	r1, [r7, #12]
 8010562:	4618      	mov	r0, r3
 8010564:	f000 fe0e 	bl	8011184 <ip4_addr_isbroadcast_u32>
 8010568:	4603      	mov	r3, r0
 801056a:	2b00      	cmp	r3, #0
 801056c:	d10c      	bne.n	8010588 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010576:	2be0      	cmp	r3, #224	; 0xe0
 8010578:	d006      	beq.n	8010588 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d003      	beq.n	8010588 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d102      	bne.n	801058e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010588:	f06f 030f 	mvn.w	r3, #15
 801058c:	e101      	b.n	8010792 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801058e:	68fa      	ldr	r2, [r7, #12]
 8010590:	2101      	movs	r1, #1
 8010592:	68b8      	ldr	r0, [r7, #8]
 8010594:	f7ff fb60 	bl	800fc58 <etharp_find_entry>
 8010598:	4603      	mov	r3, r0
 801059a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801059c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	da02      	bge.n	80105aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80105a4:	8a7b      	ldrh	r3, [r7, #18]
 80105a6:	b25b      	sxtb	r3, r3
 80105a8:	e0f3      	b.n	8010792 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80105aa:	8a7b      	ldrh	r3, [r7, #18]
 80105ac:	2b7e      	cmp	r3, #126	; 0x7e
 80105ae:	d906      	bls.n	80105be <etharp_query+0x7e>
 80105b0:	4b7a      	ldr	r3, [pc, #488]	; (801079c <etharp_query+0x25c>)
 80105b2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80105b6:	497a      	ldr	r1, [pc, #488]	; (80107a0 <etharp_query+0x260>)
 80105b8:	487a      	ldr	r0, [pc, #488]	; (80107a4 <etharp_query+0x264>)
 80105ba:	f002 fc0f 	bl	8012ddc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80105be:	8a7b      	ldrh	r3, [r7, #18]
 80105c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80105c2:	7c7a      	ldrb	r2, [r7, #17]
 80105c4:	4978      	ldr	r1, [pc, #480]	; (80107a8 <etharp_query+0x268>)
 80105c6:	4613      	mov	r3, r2
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	4413      	add	r3, r2
 80105cc:	00db      	lsls	r3, r3, #3
 80105ce:	440b      	add	r3, r1
 80105d0:	3314      	adds	r3, #20
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d115      	bne.n	8010604 <etharp_query+0xc4>
    is_new_entry = 1;
 80105d8:	2301      	movs	r3, #1
 80105da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80105dc:	7c7a      	ldrb	r2, [r7, #17]
 80105de:	4972      	ldr	r1, [pc, #456]	; (80107a8 <etharp_query+0x268>)
 80105e0:	4613      	mov	r3, r2
 80105e2:	005b      	lsls	r3, r3, #1
 80105e4:	4413      	add	r3, r2
 80105e6:	00db      	lsls	r3, r3, #3
 80105e8:	440b      	add	r3, r1
 80105ea:	3314      	adds	r3, #20
 80105ec:	2201      	movs	r2, #1
 80105ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80105f0:	7c7a      	ldrb	r2, [r7, #17]
 80105f2:	496d      	ldr	r1, [pc, #436]	; (80107a8 <etharp_query+0x268>)
 80105f4:	4613      	mov	r3, r2
 80105f6:	005b      	lsls	r3, r3, #1
 80105f8:	4413      	add	r3, r2
 80105fa:	00db      	lsls	r3, r3, #3
 80105fc:	440b      	add	r3, r1
 80105fe:	3308      	adds	r3, #8
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010604:	7c7a      	ldrb	r2, [r7, #17]
 8010606:	4968      	ldr	r1, [pc, #416]	; (80107a8 <etharp_query+0x268>)
 8010608:	4613      	mov	r3, r2
 801060a:	005b      	lsls	r3, r3, #1
 801060c:	4413      	add	r3, r2
 801060e:	00db      	lsls	r3, r3, #3
 8010610:	440b      	add	r3, r1
 8010612:	3314      	adds	r3, #20
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	2b01      	cmp	r3, #1
 8010618:	d011      	beq.n	801063e <etharp_query+0xfe>
 801061a:	7c7a      	ldrb	r2, [r7, #17]
 801061c:	4962      	ldr	r1, [pc, #392]	; (80107a8 <etharp_query+0x268>)
 801061e:	4613      	mov	r3, r2
 8010620:	005b      	lsls	r3, r3, #1
 8010622:	4413      	add	r3, r2
 8010624:	00db      	lsls	r3, r3, #3
 8010626:	440b      	add	r3, r1
 8010628:	3314      	adds	r3, #20
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d806      	bhi.n	801063e <etharp_query+0xfe>
 8010630:	4b5a      	ldr	r3, [pc, #360]	; (801079c <etharp_query+0x25c>)
 8010632:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010636:	495d      	ldr	r1, [pc, #372]	; (80107ac <etharp_query+0x26c>)
 8010638:	485a      	ldr	r0, [pc, #360]	; (80107a4 <etharp_query+0x264>)
 801063a:	f002 fbcf 	bl	8012ddc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801063e:	6a3b      	ldr	r3, [r7, #32]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d102      	bne.n	801064a <etharp_query+0x10a>
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d10c      	bne.n	8010664 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801064a:	68b9      	ldr	r1, [r7, #8]
 801064c:	68f8      	ldr	r0, [r7, #12]
 801064e:	f000 f963 	bl	8010918 <etharp_request>
 8010652:	4603      	mov	r3, r0
 8010654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d102      	bne.n	8010664 <etharp_query+0x124>
      return result;
 801065e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010662:	e096      	b.n	8010792 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d106      	bne.n	8010678 <etharp_query+0x138>
 801066a:	4b4c      	ldr	r3, [pc, #304]	; (801079c <etharp_query+0x25c>)
 801066c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010670:	494f      	ldr	r1, [pc, #316]	; (80107b0 <etharp_query+0x270>)
 8010672:	484c      	ldr	r0, [pc, #304]	; (80107a4 <etharp_query+0x264>)
 8010674:	f002 fbb2 	bl	8012ddc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010678:	7c7a      	ldrb	r2, [r7, #17]
 801067a:	494b      	ldr	r1, [pc, #300]	; (80107a8 <etharp_query+0x268>)
 801067c:	4613      	mov	r3, r2
 801067e:	005b      	lsls	r3, r3, #1
 8010680:	4413      	add	r3, r2
 8010682:	00db      	lsls	r3, r3, #3
 8010684:	440b      	add	r3, r1
 8010686:	3314      	adds	r3, #20
 8010688:	781b      	ldrb	r3, [r3, #0]
 801068a:	2b01      	cmp	r3, #1
 801068c:	d917      	bls.n	80106be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801068e:	4a49      	ldr	r2, [pc, #292]	; (80107b4 <etharp_query+0x274>)
 8010690:	7c7b      	ldrb	r3, [r7, #17]
 8010692:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010694:	7c7a      	ldrb	r2, [r7, #17]
 8010696:	4613      	mov	r3, r2
 8010698:	005b      	lsls	r3, r3, #1
 801069a:	4413      	add	r3, r2
 801069c:	00db      	lsls	r3, r3, #3
 801069e:	3308      	adds	r3, #8
 80106a0:	4a41      	ldr	r2, [pc, #260]	; (80107a8 <etharp_query+0x268>)
 80106a2:	4413      	add	r3, r2
 80106a4:	3304      	adds	r3, #4
 80106a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80106aa:	9200      	str	r2, [sp, #0]
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	6879      	ldr	r1, [r7, #4]
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f001 fc6f 	bl	8011f94 <ethernet_output>
 80106b6:	4603      	mov	r3, r0
 80106b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80106bc:	e067      	b.n	801078e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80106be:	7c7a      	ldrb	r2, [r7, #17]
 80106c0:	4939      	ldr	r1, [pc, #228]	; (80107a8 <etharp_query+0x268>)
 80106c2:	4613      	mov	r3, r2
 80106c4:	005b      	lsls	r3, r3, #1
 80106c6:	4413      	add	r3, r2
 80106c8:	00db      	lsls	r3, r3, #3
 80106ca:	440b      	add	r3, r1
 80106cc:	3314      	adds	r3, #20
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d15c      	bne.n	801078e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80106d4:	2300      	movs	r3, #0
 80106d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80106dc:	e01c      	b.n	8010718 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80106de:	69fb      	ldr	r3, [r7, #28]
 80106e0:	895a      	ldrh	r2, [r3, #10]
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	891b      	ldrh	r3, [r3, #8]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d10a      	bne.n	8010700 <etharp_query+0x1c0>
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d006      	beq.n	8010700 <etharp_query+0x1c0>
 80106f2:	4b2a      	ldr	r3, [pc, #168]	; (801079c <etharp_query+0x25c>)
 80106f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80106f8:	492f      	ldr	r1, [pc, #188]	; (80107b8 <etharp_query+0x278>)
 80106fa:	482a      	ldr	r0, [pc, #168]	; (80107a4 <etharp_query+0x264>)
 80106fc:	f002 fb6e 	bl	8012ddc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	7b1b      	ldrb	r3, [r3, #12]
 8010704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <etharp_query+0x1d2>
        copy_needed = 1;
 801070c:	2301      	movs	r3, #1
 801070e:	61bb      	str	r3, [r7, #24]
        break;
 8010710:	e005      	b.n	801071e <etharp_query+0x1de>
      }
      p = p->next;
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d1df      	bne.n	80106de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d007      	beq.n	8010734 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	f44f 7120 	mov.w	r1, #640	; 0x280
 801072a:	200e      	movs	r0, #14
 801072c:	f7f9 fcfc 	bl	800a128 <pbuf_clone>
 8010730:	61f8      	str	r0, [r7, #28]
 8010732:	e004      	b.n	801073e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010738:	69f8      	ldr	r0, [r7, #28]
 801073a:	f7f9 fb33 	bl	8009da4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801073e:	69fb      	ldr	r3, [r7, #28]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d021      	beq.n	8010788 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010744:	7c7a      	ldrb	r2, [r7, #17]
 8010746:	4918      	ldr	r1, [pc, #96]	; (80107a8 <etharp_query+0x268>)
 8010748:	4613      	mov	r3, r2
 801074a:	005b      	lsls	r3, r3, #1
 801074c:	4413      	add	r3, r2
 801074e:	00db      	lsls	r3, r3, #3
 8010750:	440b      	add	r3, r1
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d00a      	beq.n	801076e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010758:	7c7a      	ldrb	r2, [r7, #17]
 801075a:	4913      	ldr	r1, [pc, #76]	; (80107a8 <etharp_query+0x268>)
 801075c:	4613      	mov	r3, r2
 801075e:	005b      	lsls	r3, r3, #1
 8010760:	4413      	add	r3, r2
 8010762:	00db      	lsls	r3, r3, #3
 8010764:	440b      	add	r3, r1
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	4618      	mov	r0, r3
 801076a:	f7f9 fa75 	bl	8009c58 <pbuf_free>
      }
      arp_table[i].q = p;
 801076e:	7c7a      	ldrb	r2, [r7, #17]
 8010770:	490d      	ldr	r1, [pc, #52]	; (80107a8 <etharp_query+0x268>)
 8010772:	4613      	mov	r3, r2
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	4413      	add	r3, r2
 8010778:	00db      	lsls	r3, r3, #3
 801077a:	440b      	add	r3, r1
 801077c:	69fa      	ldr	r2, [r7, #28]
 801077e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010780:	2300      	movs	r3, #0
 8010782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010786:	e002      	b.n	801078e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010788:	23ff      	movs	r3, #255	; 0xff
 801078a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801078e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010792:	4618      	mov	r0, r3
 8010794:	3728      	adds	r7, #40	; 0x28
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	080159b8 	.word	0x080159b8
 80107a0:	08015b64 	.word	0x08015b64
 80107a4:	08015a30 	.word	0x08015a30
 80107a8:	2000b14c 	.word	0x2000b14c
 80107ac:	08015b74 	.word	0x08015b74
 80107b0:	08015b58 	.word	0x08015b58
 80107b4:	2000b23c 	.word	0x2000b23c
 80107b8:	08015b9c 	.word	0x08015b9c

080107bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b08a      	sub	sp, #40	; 0x28
 80107c0:	af02      	add	r7, sp, #8
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	60b9      	str	r1, [r7, #8]
 80107c6:	607a      	str	r2, [r7, #4]
 80107c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80107ca:	2300      	movs	r3, #0
 80107cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d106      	bne.n	80107e2 <etharp_raw+0x26>
 80107d4:	4b3a      	ldr	r3, [pc, #232]	; (80108c0 <etharp_raw+0x104>)
 80107d6:	f240 4257 	movw	r2, #1111	; 0x457
 80107da:	493a      	ldr	r1, [pc, #232]	; (80108c4 <etharp_raw+0x108>)
 80107dc:	483a      	ldr	r0, [pc, #232]	; (80108c8 <etharp_raw+0x10c>)
 80107de:	f002 fafd 	bl	8012ddc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80107e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107e6:	211c      	movs	r1, #28
 80107e8:	200e      	movs	r0, #14
 80107ea:	f7f8 ff51 	bl	8009690 <pbuf_alloc>
 80107ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80107f0:	69bb      	ldr	r3, [r7, #24]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d102      	bne.n	80107fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80107f6:	f04f 33ff 	mov.w	r3, #4294967295
 80107fa:	e05d      	b.n	80108b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80107fc:	69bb      	ldr	r3, [r7, #24]
 80107fe:	895b      	ldrh	r3, [r3, #10]
 8010800:	2b1b      	cmp	r3, #27
 8010802:	d806      	bhi.n	8010812 <etharp_raw+0x56>
 8010804:	4b2e      	ldr	r3, [pc, #184]	; (80108c0 <etharp_raw+0x104>)
 8010806:	f240 4262 	movw	r2, #1122	; 0x462
 801080a:	4930      	ldr	r1, [pc, #192]	; (80108cc <etharp_raw+0x110>)
 801080c:	482e      	ldr	r0, [pc, #184]	; (80108c8 <etharp_raw+0x10c>)
 801080e:	f002 fae5 	bl	8012ddc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010812:	69bb      	ldr	r3, [r7, #24]
 8010814:	685b      	ldr	r3, [r3, #4]
 8010816:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010818:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801081a:	4618      	mov	r0, r3
 801081c:	f7f7 fe70 	bl	8008500 <lwip_htons>
 8010820:	4603      	mov	r3, r0
 8010822:	461a      	mov	r2, r3
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801082e:	2b06      	cmp	r3, #6
 8010830:	d006      	beq.n	8010840 <etharp_raw+0x84>
 8010832:	4b23      	ldr	r3, [pc, #140]	; (80108c0 <etharp_raw+0x104>)
 8010834:	f240 4269 	movw	r2, #1129	; 0x469
 8010838:	4925      	ldr	r1, [pc, #148]	; (80108d0 <etharp_raw+0x114>)
 801083a:	4823      	ldr	r0, [pc, #140]	; (80108c8 <etharp_raw+0x10c>)
 801083c:	f002 face 	bl	8012ddc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	3308      	adds	r3, #8
 8010844:	2206      	movs	r2, #6
 8010846:	6839      	ldr	r1, [r7, #0]
 8010848:	4618      	mov	r0, r3
 801084a:	f001 ff19 	bl	8012680 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	3312      	adds	r3, #18
 8010852:	2206      	movs	r2, #6
 8010854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010856:	4618      	mov	r0, r3
 8010858:	f001 ff12 	bl	8012680 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	330e      	adds	r3, #14
 8010860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010862:	6812      	ldr	r2, [r2, #0]
 8010864:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	3318      	adds	r3, #24
 801086a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801086c:	6812      	ldr	r2, [r2, #0]
 801086e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	2200      	movs	r2, #0
 8010874:	701a      	strb	r2, [r3, #0]
 8010876:	2200      	movs	r2, #0
 8010878:	f042 0201 	orr.w	r2, r2, #1
 801087c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	2200      	movs	r2, #0
 8010882:	f042 0208 	orr.w	r2, r2, #8
 8010886:	709a      	strb	r2, [r3, #2]
 8010888:	2200      	movs	r2, #0
 801088a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	2206      	movs	r2, #6
 8010890:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010892:	697b      	ldr	r3, [r7, #20]
 8010894:	2204      	movs	r2, #4
 8010896:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010898:	f640 0306 	movw	r3, #2054	; 0x806
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	68ba      	ldr	r2, [r7, #8]
 80108a2:	69b9      	ldr	r1, [r7, #24]
 80108a4:	68f8      	ldr	r0, [r7, #12]
 80108a6:	f001 fb75 	bl	8011f94 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80108aa:	69b8      	ldr	r0, [r7, #24]
 80108ac:	f7f9 f9d4 	bl	8009c58 <pbuf_free>
  p = NULL;
 80108b0:	2300      	movs	r3, #0
 80108b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80108b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3720      	adds	r7, #32
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	080159b8 	.word	0x080159b8
 80108c4:	08015b08 	.word	0x08015b08
 80108c8:	08015a30 	.word	0x08015a30
 80108cc:	08015bb8 	.word	0x08015bb8
 80108d0:	08015bec 	.word	0x08015bec

080108d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b088      	sub	sp, #32
 80108d8:	af04      	add	r7, sp, #16
 80108da:	60f8      	str	r0, [r7, #12]
 80108dc:	60b9      	str	r1, [r7, #8]
 80108de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80108f0:	2201      	movs	r2, #1
 80108f2:	9203      	str	r2, [sp, #12]
 80108f4:	68ba      	ldr	r2, [r7, #8]
 80108f6:	9202      	str	r2, [sp, #8]
 80108f8:	4a06      	ldr	r2, [pc, #24]	; (8010914 <etharp_request_dst+0x40>)
 80108fa:	9201      	str	r2, [sp, #4]
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	4603      	mov	r3, r0
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	68f8      	ldr	r0, [r7, #12]
 8010904:	f7ff ff5a 	bl	80107bc <etharp_raw>
 8010908:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801090a:	4618      	mov	r0, r3
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	080161d4 	.word	0x080161d4

08010918 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010922:	4a05      	ldr	r2, [pc, #20]	; (8010938 <etharp_request+0x20>)
 8010924:	6839      	ldr	r1, [r7, #0]
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f7ff ffd4 	bl	80108d4 <etharp_request_dst>
 801092c:	4603      	mov	r3, r0
}
 801092e:	4618      	mov	r0, r3
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	080161cc 	.word	0x080161cc

0801093c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b08e      	sub	sp, #56	; 0x38
 8010940:	af04      	add	r7, sp, #16
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010946:	4b79      	ldr	r3, [pc, #484]	; (8010b2c <icmp_input+0x1f0>)
 8010948:	689b      	ldr	r3, [r3, #8]
 801094a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	f003 030f 	and.w	r3, r3, #15
 8010954:	b2db      	uxtb	r3, r3
 8010956:	009b      	lsls	r3, r3, #2
 8010958:	b2db      	uxtb	r3, r3
 801095a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801095c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801095e:	2b13      	cmp	r3, #19
 8010960:	f240 80cd 	bls.w	8010afe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	895b      	ldrh	r3, [r3, #10]
 8010968:	2b03      	cmp	r3, #3
 801096a:	f240 80ca 	bls.w	8010b02 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010978:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801097c:	2b00      	cmp	r3, #0
 801097e:	f000 80b7 	beq.w	8010af0 <icmp_input+0x1b4>
 8010982:	2b08      	cmp	r3, #8
 8010984:	f040 80b7 	bne.w	8010af6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010988:	4b69      	ldr	r3, [pc, #420]	; (8010b30 <icmp_input+0x1f4>)
 801098a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801098c:	4b67      	ldr	r3, [pc, #412]	; (8010b2c <icmp_input+0x1f0>)
 801098e:	695b      	ldr	r3, [r3, #20]
 8010990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010994:	2be0      	cmp	r3, #224	; 0xe0
 8010996:	f000 80bb 	beq.w	8010b10 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801099a:	4b64      	ldr	r3, [pc, #400]	; (8010b2c <icmp_input+0x1f0>)
 801099c:	695b      	ldr	r3, [r3, #20]
 801099e:	4a63      	ldr	r2, [pc, #396]	; (8010b2c <icmp_input+0x1f0>)
 80109a0:	6812      	ldr	r2, [r2, #0]
 80109a2:	4611      	mov	r1, r2
 80109a4:	4618      	mov	r0, r3
 80109a6:	f000 fbed 	bl	8011184 <ip4_addr_isbroadcast_u32>
 80109aa:	4603      	mov	r3, r0
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	f040 80b1 	bne.w	8010b14 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	891b      	ldrh	r3, [r3, #8]
 80109b6:	2b07      	cmp	r3, #7
 80109b8:	f240 80a5 	bls.w	8010b06 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80109bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109be:	330e      	adds	r3, #14
 80109c0:	4619      	mov	r1, r3
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f7f9 f8b2 	bl	8009b2c <pbuf_add_header>
 80109c8:	4603      	mov	r3, r0
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d04b      	beq.n	8010a66 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	891a      	ldrh	r2, [r3, #8]
 80109d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80109d4:	4413      	add	r3, r2
 80109d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	891b      	ldrh	r3, [r3, #8]
 80109dc:	8b7a      	ldrh	r2, [r7, #26]
 80109de:	429a      	cmp	r2, r3
 80109e0:	f0c0 809a 	bcc.w	8010b18 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80109e4:	8b7b      	ldrh	r3, [r7, #26]
 80109e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109ea:	4619      	mov	r1, r3
 80109ec:	200e      	movs	r0, #14
 80109ee:	f7f8 fe4f 	bl	8009690 <pbuf_alloc>
 80109f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	f000 8090 	beq.w	8010b1c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	895b      	ldrh	r3, [r3, #10]
 8010a00:	461a      	mov	r2, r3
 8010a02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a04:	3308      	adds	r3, #8
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d203      	bcs.n	8010a12 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010a0a:	6978      	ldr	r0, [r7, #20]
 8010a0c:	f7f9 f924 	bl	8009c58 <pbuf_free>
          goto icmperr;
 8010a10:	e085      	b.n	8010b1e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	685b      	ldr	r3, [r3, #4]
 8010a16:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f001 fe30 	bl	8012680 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010a20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a22:	4619      	mov	r1, r3
 8010a24:	6978      	ldr	r0, [r7, #20]
 8010a26:	f7f9 f891 	bl	8009b4c <pbuf_remove_header>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d009      	beq.n	8010a44 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010a30:	4b40      	ldr	r3, [pc, #256]	; (8010b34 <icmp_input+0x1f8>)
 8010a32:	22b6      	movs	r2, #182	; 0xb6
 8010a34:	4940      	ldr	r1, [pc, #256]	; (8010b38 <icmp_input+0x1fc>)
 8010a36:	4841      	ldr	r0, [pc, #260]	; (8010b3c <icmp_input+0x200>)
 8010a38:	f002 f9d0 	bl	8012ddc <iprintf>
          pbuf_free(r);
 8010a3c:	6978      	ldr	r0, [r7, #20]
 8010a3e:	f7f9 f90b 	bl	8009c58 <pbuf_free>
          goto icmperr;
 8010a42:	e06c      	b.n	8010b1e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010a44:	6879      	ldr	r1, [r7, #4]
 8010a46:	6978      	ldr	r0, [r7, #20]
 8010a48:	f7f9 fa2a 	bl	8009ea0 <pbuf_copy>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d003      	beq.n	8010a5a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010a52:	6978      	ldr	r0, [r7, #20]
 8010a54:	f7f9 f900 	bl	8009c58 <pbuf_free>
          goto icmperr;
 8010a58:	e061      	b.n	8010b1e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7f9 f8fc 	bl	8009c58 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	607b      	str	r3, [r7, #4]
 8010a64:	e00f      	b.n	8010a86 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010a66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a68:	330e      	adds	r3, #14
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f7f9 f86d 	bl	8009b4c <pbuf_remove_header>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d006      	beq.n	8010a86 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010a78:	4b2e      	ldr	r3, [pc, #184]	; (8010b34 <icmp_input+0x1f8>)
 8010a7a:	22c7      	movs	r2, #199	; 0xc7
 8010a7c:	4930      	ldr	r1, [pc, #192]	; (8010b40 <icmp_input+0x204>)
 8010a7e:	482f      	ldr	r0, [pc, #188]	; (8010b3c <icmp_input+0x200>)
 8010a80:	f002 f9ac 	bl	8012ddc <iprintf>
          goto icmperr;
 8010a84:	e04b      	b.n	8010b1e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010a8e:	4619      	mov	r1, r3
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7f9 f84b 	bl	8009b2c <pbuf_add_header>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d12b      	bne.n	8010af4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010aaa:	4b20      	ldr	r3, [pc, #128]	; (8010b2c <icmp_input+0x1f0>)
 8010aac:	691a      	ldr	r2, [r3, #16]
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	2200      	movs	r2, #0
 8010abc:	709a      	strb	r2, [r3, #2]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	22ff      	movs	r2, #255	; 0xff
 8010ac6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	2200      	movs	r2, #0
 8010acc:	729a      	strb	r2, [r3, #10]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	9302      	str	r3, [sp, #8]
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	9301      	str	r3, [sp, #4]
 8010ada:	2300      	movs	r3, #0
 8010adc:	9300      	str	r3, [sp, #0]
 8010ade:	23ff      	movs	r3, #255	; 0xff
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	69f9      	ldr	r1, [r7, #28]
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 fa75 	bl	8010fd4 <ip4_output_if>
 8010aea:	4603      	mov	r3, r0
 8010aec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010aee:	e001      	b.n	8010af4 <icmp_input+0x1b8>
      break;
 8010af0:	bf00      	nop
 8010af2:	e000      	b.n	8010af6 <icmp_input+0x1ba>
      break;
 8010af4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f7f9 f8ae 	bl	8009c58 <pbuf_free>
  return;
 8010afc:	e013      	b.n	8010b26 <icmp_input+0x1ea>
    goto lenerr;
 8010afe:	bf00      	nop
 8010b00:	e002      	b.n	8010b08 <icmp_input+0x1cc>
    goto lenerr;
 8010b02:	bf00      	nop
 8010b04:	e000      	b.n	8010b08 <icmp_input+0x1cc>
        goto lenerr;
 8010b06:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7f9 f8a5 	bl	8009c58 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010b0e:	e00a      	b.n	8010b26 <icmp_input+0x1ea>
        goto icmperr;
 8010b10:	bf00      	nop
 8010b12:	e004      	b.n	8010b1e <icmp_input+0x1e2>
        goto icmperr;
 8010b14:	bf00      	nop
 8010b16:	e002      	b.n	8010b1e <icmp_input+0x1e2>
          goto icmperr;
 8010b18:	bf00      	nop
 8010b1a:	e000      	b.n	8010b1e <icmp_input+0x1e2>
          goto icmperr;
 8010b1c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f7f9 f89a 	bl	8009c58 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010b24:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010b26:	3728      	adds	r7, #40	; 0x28
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}
 8010b2c:	2000e4e4 	.word	0x2000e4e4
 8010b30:	2000e4f8 	.word	0x2000e4f8
 8010b34:	08015c30 	.word	0x08015c30
 8010b38:	08015c68 	.word	0x08015c68
 8010b3c:	08015ca0 	.word	0x08015ca0
 8010b40:	08015cc8 	.word	0x08015cc8

08010b44 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010b50:	78fb      	ldrb	r3, [r7, #3]
 8010b52:	461a      	mov	r2, r3
 8010b54:	2103      	movs	r1, #3
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f000 f814 	bl	8010b84 <icmp_send_response>
}
 8010b5c:	bf00      	nop
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	460b      	mov	r3, r1
 8010b6e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010b70:	78fb      	ldrb	r3, [r7, #3]
 8010b72:	461a      	mov	r2, r3
 8010b74:	210b      	movs	r1, #11
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 f804 	bl	8010b84 <icmp_send_response>
}
 8010b7c:	bf00      	nop
 8010b7e:	3708      	adds	r7, #8
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}

08010b84 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b08c      	sub	sp, #48	; 0x30
 8010b88:	af04      	add	r7, sp, #16
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	70fb      	strb	r3, [r7, #3]
 8010b90:	4613      	mov	r3, r2
 8010b92:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010b94:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b98:	2124      	movs	r1, #36	; 0x24
 8010b9a:	2022      	movs	r0, #34	; 0x22
 8010b9c:	f7f8 fd78 	bl	8009690 <pbuf_alloc>
 8010ba0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d04c      	beq.n	8010c42 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010ba8:	69fb      	ldr	r3, [r7, #28]
 8010baa:	895b      	ldrh	r3, [r3, #10]
 8010bac:	2b23      	cmp	r3, #35	; 0x23
 8010bae:	d806      	bhi.n	8010bbe <icmp_send_response+0x3a>
 8010bb0:	4b26      	ldr	r3, [pc, #152]	; (8010c4c <icmp_send_response+0xc8>)
 8010bb2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8010bb6:	4926      	ldr	r1, [pc, #152]	; (8010c50 <icmp_send_response+0xcc>)
 8010bb8:	4826      	ldr	r0, [pc, #152]	; (8010c54 <icmp_send_response+0xd0>)
 8010bba:	f002 f90f 	bl	8012ddc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	685b      	ldr	r3, [r3, #4]
 8010bc2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010bca:	697b      	ldr	r3, [r7, #20]
 8010bcc:	78fa      	ldrb	r2, [r7, #3]
 8010bce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	78ba      	ldrb	r2, [r7, #2]
 8010bd4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	2200      	movs	r2, #0
 8010bda:	711a      	strb	r2, [r3, #4]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	2200      	movs	r2, #0
 8010be4:	719a      	strb	r2, [r3, #6]
 8010be6:	2200      	movs	r2, #0
 8010be8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010bea:	69fb      	ldr	r3, [r7, #28]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	f103 0008 	add.w	r0, r3, #8
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	221c      	movs	r2, #28
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	f001 fd41 	bl	8012680 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010c04:	f107 030c 	add.w	r3, r7, #12
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f000 f825 	bl	8010c58 <ip4_route>
 8010c0e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010c10:	693b      	ldr	r3, [r7, #16]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d011      	beq.n	8010c3a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	709a      	strb	r2, [r3, #2]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010c20:	f107 020c 	add.w	r2, r7, #12
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	9302      	str	r3, [sp, #8]
 8010c28:	2301      	movs	r3, #1
 8010c2a:	9301      	str	r3, [sp, #4]
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	9300      	str	r3, [sp, #0]
 8010c30:	23ff      	movs	r3, #255	; 0xff
 8010c32:	2100      	movs	r1, #0
 8010c34:	69f8      	ldr	r0, [r7, #28]
 8010c36:	f000 f9cd 	bl	8010fd4 <ip4_output_if>
  }
  pbuf_free(q);
 8010c3a:	69f8      	ldr	r0, [r7, #28]
 8010c3c:	f7f9 f80c 	bl	8009c58 <pbuf_free>
 8010c40:	e000      	b.n	8010c44 <icmp_send_response+0xc0>
    return;
 8010c42:	bf00      	nop
}
 8010c44:	3720      	adds	r7, #32
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	08015c30 	.word	0x08015c30
 8010c50:	08015cfc 	.word	0x08015cfc
 8010c54:	08015ca0 	.word	0x08015ca0

08010c58 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b085      	sub	sp, #20
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010c60:	4b33      	ldr	r3, [pc, #204]	; (8010d30 <ip4_route+0xd8>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	60fb      	str	r3, [r7, #12]
 8010c66:	e036      	b.n	8010cd6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c6e:	f003 0301 	and.w	r3, r3, #1
 8010c72:	b2db      	uxtb	r3, r3
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d02b      	beq.n	8010cd0 <ip4_route+0x78>
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c7e:	089b      	lsrs	r3, r3, #2
 8010c80:	f003 0301 	and.w	r3, r3, #1
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d022      	beq.n	8010cd0 <ip4_route+0x78>
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	3304      	adds	r3, #4
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d01d      	beq.n	8010cd0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	681a      	ldr	r2, [r3, #0]
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	3304      	adds	r3, #4
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	405a      	eors	r2, r3
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	3308      	adds	r3, #8
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	4013      	ands	r3, r2
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d101      	bne.n	8010cb0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	e038      	b.n	8010d22 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cb6:	f003 0302 	and.w	r3, r3, #2
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d108      	bne.n	8010cd0 <ip4_route+0x78>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681a      	ldr	r2, [r3, #0]
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	330c      	adds	r3, #12
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d101      	bne.n	8010cd0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	e028      	b.n	8010d22 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	60fb      	str	r3, [r7, #12]
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d1c5      	bne.n	8010c68 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010cdc:	4b15      	ldr	r3, [pc, #84]	; (8010d34 <ip4_route+0xdc>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d01a      	beq.n	8010d1a <ip4_route+0xc2>
 8010ce4:	4b13      	ldr	r3, [pc, #76]	; (8010d34 <ip4_route+0xdc>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cec:	f003 0301 	and.w	r3, r3, #1
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d012      	beq.n	8010d1a <ip4_route+0xc2>
 8010cf4:	4b0f      	ldr	r3, [pc, #60]	; (8010d34 <ip4_route+0xdc>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cfc:	f003 0304 	and.w	r3, r3, #4
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00a      	beq.n	8010d1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010d04:	4b0b      	ldr	r3, [pc, #44]	; (8010d34 <ip4_route+0xdc>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	3304      	adds	r3, #4
 8010d0a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d004      	beq.n	8010d1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	2b7f      	cmp	r3, #127	; 0x7f
 8010d18:	d101      	bne.n	8010d1e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	e001      	b.n	8010d22 <ip4_route+0xca>
  }

  return netif_default;
 8010d1e:	4b05      	ldr	r3, [pc, #20]	; (8010d34 <ip4_route+0xdc>)
 8010d20:	681b      	ldr	r3, [r3, #0]
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3714      	adds	r7, #20
 8010d26:	46bd      	mov	sp, r7
 8010d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop
 8010d30:	20011be8 	.word	0x20011be8
 8010d34:	20011bec 	.word	0x20011bec

08010d38 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d46:	f003 0301 	and.w	r3, r3, #1
 8010d4a:	b2db      	uxtb	r3, r3
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d016      	beq.n	8010d7e <ip4_input_accept+0x46>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	3304      	adds	r3, #4
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d011      	beq.n	8010d7e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010d5a:	4b0b      	ldr	r3, [pc, #44]	; (8010d88 <ip4_input_accept+0x50>)
 8010d5c:	695a      	ldr	r2, [r3, #20]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	3304      	adds	r3, #4
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d008      	beq.n	8010d7a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010d68:	4b07      	ldr	r3, [pc, #28]	; (8010d88 <ip4_input_accept+0x50>)
 8010d6a:	695b      	ldr	r3, [r3, #20]
 8010d6c:	6879      	ldr	r1, [r7, #4]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 fa08 	bl	8011184 <ip4_addr_isbroadcast_u32>
 8010d74:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d001      	beq.n	8010d7e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	e000      	b.n	8010d80 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010d7e:	2300      	movs	r3, #0
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	2000e4e4 	.word	0x2000e4e4

08010d8c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	781b      	ldrb	r3, [r3, #0]
 8010da0:	091b      	lsrs	r3, r3, #4
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	2b04      	cmp	r3, #4
 8010da6:	d004      	beq.n	8010db2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f7f8 ff55 	bl	8009c58 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010dae:	2300      	movs	r3, #0
 8010db0:	e107      	b.n	8010fc2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	f003 030f 	and.w	r3, r3, #15
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	009b      	lsls	r3, r3, #2
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	885b      	ldrh	r3, [r3, #2]
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7f7 fb99 	bl	8008500 <lwip_htons>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	891b      	ldrh	r3, [r3, #8]
 8010dd6:	89ba      	ldrh	r2, [r7, #12]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d204      	bcs.n	8010de6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010ddc:	89bb      	ldrh	r3, [r7, #12]
 8010dde:	4619      	mov	r1, r3
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f7f8 fdb3 	bl	800994c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	895b      	ldrh	r3, [r3, #10]
 8010dea:	89fa      	ldrh	r2, [r7, #14]
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d807      	bhi.n	8010e00 <ip4_input+0x74>
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	891b      	ldrh	r3, [r3, #8]
 8010df4:	89ba      	ldrh	r2, [r7, #12]
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d802      	bhi.n	8010e00 <ip4_input+0x74>
 8010dfa:	89fb      	ldrh	r3, [r7, #14]
 8010dfc:	2b13      	cmp	r3, #19
 8010dfe:	d804      	bhi.n	8010e0a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f7f8 ff29 	bl	8009c58 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010e06:	2300      	movs	r3, #0
 8010e08:	e0db      	b.n	8010fc2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	691b      	ldr	r3, [r3, #16]
 8010e0e:	4a6f      	ldr	r2, [pc, #444]	; (8010fcc <ip4_input+0x240>)
 8010e10:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	4a6d      	ldr	r2, [pc, #436]	; (8010fcc <ip4_input+0x240>)
 8010e18:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010e1a:	4b6c      	ldr	r3, [pc, #432]	; (8010fcc <ip4_input+0x240>)
 8010e1c:	695b      	ldr	r3, [r3, #20]
 8010e1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e22:	2be0      	cmp	r3, #224	; 0xe0
 8010e24:	d112      	bne.n	8010e4c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e2c:	f003 0301 	and.w	r3, r3, #1
 8010e30:	b2db      	uxtb	r3, r3
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d007      	beq.n	8010e46 <ip4_input+0xba>
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	3304      	adds	r3, #4
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <ip4_input+0xba>
      netif = inp;
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	613b      	str	r3, [r7, #16]
 8010e44:	e02a      	b.n	8010e9c <ip4_input+0x110>
    } else {
      netif = NULL;
 8010e46:	2300      	movs	r3, #0
 8010e48:	613b      	str	r3, [r7, #16]
 8010e4a:	e027      	b.n	8010e9c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010e4c:	6838      	ldr	r0, [r7, #0]
 8010e4e:	f7ff ff73 	bl	8010d38 <ip4_input_accept>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d002      	beq.n	8010e5e <ip4_input+0xd2>
      netif = inp;
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	613b      	str	r3, [r7, #16]
 8010e5c:	e01e      	b.n	8010e9c <ip4_input+0x110>
    } else {
      netif = NULL;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010e62:	4b5a      	ldr	r3, [pc, #360]	; (8010fcc <ip4_input+0x240>)
 8010e64:	695b      	ldr	r3, [r3, #20]
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	2b7f      	cmp	r3, #127	; 0x7f
 8010e6a:	d017      	beq.n	8010e9c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010e6c:	4b58      	ldr	r3, [pc, #352]	; (8010fd0 <ip4_input+0x244>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	613b      	str	r3, [r7, #16]
 8010e72:	e00e      	b.n	8010e92 <ip4_input+0x106>
          if (netif == inp) {
 8010e74:	693a      	ldr	r2, [r7, #16]
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d006      	beq.n	8010e8a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010e7c:	6938      	ldr	r0, [r7, #16]
 8010e7e:	f7ff ff5b 	bl	8010d38 <ip4_input_accept>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d108      	bne.n	8010e9a <ip4_input+0x10e>
 8010e88:	e000      	b.n	8010e8c <ip4_input+0x100>
            continue;
 8010e8a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	613b      	str	r3, [r7, #16]
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d1ed      	bne.n	8010e74 <ip4_input+0xe8>
 8010e98:	e000      	b.n	8010e9c <ip4_input+0x110>
            break;
 8010e9a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010e9c:	4b4b      	ldr	r3, [pc, #300]	; (8010fcc <ip4_input+0x240>)
 8010e9e:	691b      	ldr	r3, [r3, #16]
 8010ea0:	6839      	ldr	r1, [r7, #0]
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f000 f96e 	bl	8011184 <ip4_addr_isbroadcast_u32>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d105      	bne.n	8010eba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8010eae:	4b47      	ldr	r3, [pc, #284]	; (8010fcc <ip4_input+0x240>)
 8010eb0:	691b      	ldr	r3, [r3, #16]
 8010eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010eb6:	2be0      	cmp	r3, #224	; 0xe0
 8010eb8:	d104      	bne.n	8010ec4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8010eba:	6878      	ldr	r0, [r7, #4]
 8010ebc:	f7f8 fecc 	bl	8009c58 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	e07e      	b.n	8010fc2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d104      	bne.n	8010ed4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f7f8 fec4 	bl	8009c58 <pbuf_free>
    return ERR_OK;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	e076      	b.n	8010fc2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	88db      	ldrh	r3, [r3, #6]
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	461a      	mov	r2, r3
 8010edc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010ee0:	4013      	ands	r3, r2
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d00b      	beq.n	8010efe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f000 fc92 	bl	8011810 <ip4_reass>
 8010eec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d101      	bne.n	8010ef8 <ip4_input+0x16c>
      return ERR_OK;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	e064      	b.n	8010fc2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8010efe:	4a33      	ldr	r2, [pc, #204]	; (8010fcc <ip4_input+0x240>)
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010f04:	4a31      	ldr	r2, [pc, #196]	; (8010fcc <ip4_input+0x240>)
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8010f0a:	4a30      	ldr	r2, [pc, #192]	; (8010fcc <ip4_input+0x240>)
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	f003 030f 	and.w	r3, r3, #15
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	009b      	lsls	r3, r3, #2
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	4b2a      	ldr	r3, [pc, #168]	; (8010fcc <ip4_input+0x240>)
 8010f22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010f24:	89fb      	ldrh	r3, [r7, #14]
 8010f26:	4619      	mov	r1, r3
 8010f28:	6878      	ldr	r0, [r7, #4]
 8010f2a:	f7f8 fe0f 	bl	8009b4c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	7a5b      	ldrb	r3, [r3, #9]
 8010f32:	2b11      	cmp	r3, #17
 8010f34:	d006      	beq.n	8010f44 <ip4_input+0x1b8>
 8010f36:	2b11      	cmp	r3, #17
 8010f38:	dc13      	bgt.n	8010f62 <ip4_input+0x1d6>
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d00c      	beq.n	8010f58 <ip4_input+0x1cc>
 8010f3e:	2b06      	cmp	r3, #6
 8010f40:	d005      	beq.n	8010f4e <ip4_input+0x1c2>
 8010f42:	e00e      	b.n	8010f62 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010f44:	6839      	ldr	r1, [r7, #0]
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7fe fc68 	bl	800f81c <udp_input>
        break;
 8010f4c:	e026      	b.n	8010f9c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8010f4e:	6839      	ldr	r1, [r7, #0]
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f7fa fcb5 	bl	800b8c0 <tcp_input>
        break;
 8010f56:	e021      	b.n	8010f9c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010f58:	6839      	ldr	r1, [r7, #0]
 8010f5a:	6878      	ldr	r0, [r7, #4]
 8010f5c:	f7ff fcee 	bl	801093c <icmp_input>
        break;
 8010f60:	e01c      	b.n	8010f9c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010f62:	4b1a      	ldr	r3, [pc, #104]	; (8010fcc <ip4_input+0x240>)
 8010f64:	695b      	ldr	r3, [r3, #20]
 8010f66:	6939      	ldr	r1, [r7, #16]
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f000 f90b 	bl	8011184 <ip4_addr_isbroadcast_u32>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d10f      	bne.n	8010f94 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f74:	4b15      	ldr	r3, [pc, #84]	; (8010fcc <ip4_input+0x240>)
 8010f76:	695b      	ldr	r3, [r3, #20]
 8010f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010f7c:	2be0      	cmp	r3, #224	; 0xe0
 8010f7e:	d009      	beq.n	8010f94 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010f80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010f84:	4619      	mov	r1, r3
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f7f8 fe53 	bl	8009c32 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8010f8c:	2102      	movs	r1, #2
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7ff fdd8 	bl	8010b44 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7f8 fe5f 	bl	8009c58 <pbuf_free>
        break;
 8010f9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8010f9c:	4b0b      	ldr	r3, [pc, #44]	; (8010fcc <ip4_input+0x240>)
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010fa2:	4b0a      	ldr	r3, [pc, #40]	; (8010fcc <ip4_input+0x240>)
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010fa8:	4b08      	ldr	r3, [pc, #32]	; (8010fcc <ip4_input+0x240>)
 8010faa:	2200      	movs	r2, #0
 8010fac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8010fae:	4b07      	ldr	r3, [pc, #28]	; (8010fcc <ip4_input+0x240>)
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010fb4:	4b05      	ldr	r3, [pc, #20]	; (8010fcc <ip4_input+0x240>)
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8010fba:	4b04      	ldr	r3, [pc, #16]	; (8010fcc <ip4_input+0x240>)
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010fc0:	2300      	movs	r3, #0
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3718      	adds	r7, #24
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	2000e4e4 	.word	0x2000e4e4
 8010fd0:	20011be8 	.word	0x20011be8

08010fd4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b08a      	sub	sp, #40	; 0x28
 8010fd8:	af04      	add	r7, sp, #16
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	60b9      	str	r1, [r7, #8]
 8010fde:	607a      	str	r2, [r7, #4]
 8010fe0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d009      	beq.n	8011000 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d003      	beq.n	8010ffa <ip4_output_if+0x26>
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d102      	bne.n	8011000 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8010ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ffc:	3304      	adds	r3, #4
 8010ffe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011000:	78fa      	ldrb	r2, [r7, #3]
 8011002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011004:	9302      	str	r3, [sp, #8]
 8011006:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801100a:	9301      	str	r3, [sp, #4]
 801100c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011010:	9300      	str	r3, [sp, #0]
 8011012:	4613      	mov	r3, r2
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	6979      	ldr	r1, [r7, #20]
 8011018:	68f8      	ldr	r0, [r7, #12]
 801101a:	f000 f805 	bl	8011028 <ip4_output_if_src>
 801101e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011020:	4618      	mov	r0, r3
 8011022:	3718      	adds	r7, #24
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b088      	sub	sp, #32
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
 8011034:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	7b9b      	ldrb	r3, [r3, #14]
 801103a:	2b01      	cmp	r3, #1
 801103c:	d006      	beq.n	801104c <ip4_output_if_src+0x24>
 801103e:	4b4b      	ldr	r3, [pc, #300]	; (801116c <ip4_output_if_src+0x144>)
 8011040:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011044:	494a      	ldr	r1, [pc, #296]	; (8011170 <ip4_output_if_src+0x148>)
 8011046:	484b      	ldr	r0, [pc, #300]	; (8011174 <ip4_output_if_src+0x14c>)
 8011048:	f001 fec8 	bl	8012ddc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d060      	beq.n	8011114 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011052:	2314      	movs	r3, #20
 8011054:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011056:	2114      	movs	r1, #20
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f7f8 fd67 	bl	8009b2c <pbuf_add_header>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011064:	f06f 0301 	mvn.w	r3, #1
 8011068:	e07c      	b.n	8011164 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	895b      	ldrh	r3, [r3, #10]
 8011074:	2b13      	cmp	r3, #19
 8011076:	d806      	bhi.n	8011086 <ip4_output_if_src+0x5e>
 8011078:	4b3c      	ldr	r3, [pc, #240]	; (801116c <ip4_output_if_src+0x144>)
 801107a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801107e:	493e      	ldr	r1, [pc, #248]	; (8011178 <ip4_output_if_src+0x150>)
 8011080:	483c      	ldr	r0, [pc, #240]	; (8011174 <ip4_output_if_src+0x14c>)
 8011082:	f001 feab 	bl	8012ddc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	78fa      	ldrb	r2, [r7, #3]
 801108a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011092:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681a      	ldr	r2, [r3, #0]
 8011098:	69fb      	ldr	r3, [r7, #28]
 801109a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801109c:	8b7b      	ldrh	r3, [r7, #26]
 801109e:	089b      	lsrs	r3, r3, #2
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110a8:	b2da      	uxtb	r2, r3
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80110ae:	69fb      	ldr	r3, [r7, #28]
 80110b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80110b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	891b      	ldrh	r3, [r3, #8]
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7f7 fa20 	bl	8008500 <lwip_htons>
 80110c0:	4603      	mov	r3, r0
 80110c2:	461a      	mov	r2, r3
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	2200      	movs	r2, #0
 80110cc:	719a      	strb	r2, [r3, #6]
 80110ce:	2200      	movs	r2, #0
 80110d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80110d2:	4b2a      	ldr	r3, [pc, #168]	; (801117c <ip4_output_if_src+0x154>)
 80110d4:	881b      	ldrh	r3, [r3, #0]
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7f7 fa12 	bl	8008500 <lwip_htons>
 80110dc:	4603      	mov	r3, r0
 80110de:	461a      	mov	r2, r3
 80110e0:	69fb      	ldr	r3, [r7, #28]
 80110e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80110e4:	4b25      	ldr	r3, [pc, #148]	; (801117c <ip4_output_if_src+0x154>)
 80110e6:	881b      	ldrh	r3, [r3, #0]
 80110e8:	3301      	adds	r3, #1
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	4b23      	ldr	r3, [pc, #140]	; (801117c <ip4_output_if_src+0x154>)
 80110ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d104      	bne.n	8011100 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80110f6:	4b22      	ldr	r3, [pc, #136]	; (8011180 <ip4_output_if_src+0x158>)
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	60da      	str	r2, [r3, #12]
 80110fe:	e003      	b.n	8011108 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011108:	69fb      	ldr	r3, [r7, #28]
 801110a:	2200      	movs	r2, #0
 801110c:	729a      	strb	r2, [r3, #10]
 801110e:	2200      	movs	r2, #0
 8011110:	72da      	strb	r2, [r3, #11]
 8011112:	e00f      	b.n	8011134 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	895b      	ldrh	r3, [r3, #10]
 8011118:	2b13      	cmp	r3, #19
 801111a:	d802      	bhi.n	8011122 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801111c:	f06f 0301 	mvn.w	r3, #1
 8011120:	e020      	b.n	8011164 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011128:	69fb      	ldr	r3, [r7, #28]
 801112a:	691b      	ldr	r3, [r3, #16]
 801112c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801112e:	f107 0314 	add.w	r3, r7, #20
 8011132:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011136:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011138:	2b00      	cmp	r3, #0
 801113a:	d00c      	beq.n	8011156 <ip4_output_if_src+0x12e>
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	891a      	ldrh	r2, [r3, #8]
 8011140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011142:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011144:	429a      	cmp	r2, r3
 8011146:	d906      	bls.n	8011156 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801114c:	68f8      	ldr	r0, [r7, #12]
 801114e:	f000 fd4d 	bl	8011bec <ip4_frag>
 8011152:	4603      	mov	r3, r0
 8011154:	e006      	b.n	8011164 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011158:	695b      	ldr	r3, [r3, #20]
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	68f9      	ldr	r1, [r7, #12]
 801115e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011160:	4798      	blx	r3
 8011162:	4603      	mov	r3, r0
}
 8011164:	4618      	mov	r0, r3
 8011166:	3720      	adds	r7, #32
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	08015d28 	.word	0x08015d28
 8011170:	08015d5c 	.word	0x08015d5c
 8011174:	08015d68 	.word	0x08015d68
 8011178:	08015d90 	.word	0x08015d90
 801117c:	2000b23e 	.word	0x2000b23e
 8011180:	080161c8 	.word	0x080161c8

08011184 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011184:	b480      	push	{r7}
 8011186:	b085      	sub	sp, #20
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011198:	d002      	beq.n	80111a0 <ip4_addr_isbroadcast_u32+0x1c>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d101      	bne.n	80111a4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80111a0:	2301      	movs	r3, #1
 80111a2:	e02a      	b.n	80111fa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80111aa:	f003 0302 	and.w	r3, r3, #2
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d101      	bne.n	80111b6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80111b2:	2300      	movs	r3, #0
 80111b4:	e021      	b.n	80111fa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	3304      	adds	r3, #4
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	687a      	ldr	r2, [r7, #4]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d101      	bne.n	80111c6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	e019      	b.n	80111fa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80111c6:	68fa      	ldr	r2, [r7, #12]
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	3304      	adds	r3, #4
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	405a      	eors	r2, r3
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	3308      	adds	r3, #8
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	4013      	ands	r3, r2
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d10d      	bne.n	80111f8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	3308      	adds	r3, #8
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	43da      	mvns	r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	3308      	adds	r3, #8
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d101      	bne.n	80111f8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80111f4:	2301      	movs	r3, #1
 80111f6:	e000      	b.n	80111fa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80111f8:	2300      	movs	r3, #0
  }
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
	...

08011208 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801120e:	2300      	movs	r3, #0
 8011210:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011212:	4b12      	ldr	r3, [pc, #72]	; (801125c <ip_reass_tmr+0x54>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011218:	e018      	b.n	801124c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	7fdb      	ldrb	r3, [r3, #31]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d00b      	beq.n	801123a <ip_reass_tmr+0x32>
      r->timer--;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	7fdb      	ldrb	r3, [r3, #31]
 8011226:	3b01      	subs	r3, #1
 8011228:	b2da      	uxtb	r2, r3
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	60fb      	str	r3, [r7, #12]
 8011238:	e008      	b.n	801124c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011244:	68b9      	ldr	r1, [r7, #8]
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	f000 f80a 	bl	8011260 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d1e3      	bne.n	801121a <ip_reass_tmr+0x12>
    }
  }
}
 8011252:	bf00      	nop
 8011254:	bf00      	nop
 8011256:	3710      	adds	r7, #16
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	2000b240 	.word	0x2000b240

08011260 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b088      	sub	sp, #32
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801126a:	2300      	movs	r3, #0
 801126c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801126e:	683a      	ldr	r2, [r7, #0]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	429a      	cmp	r2, r3
 8011274:	d105      	bne.n	8011282 <ip_reass_free_complete_datagram+0x22>
 8011276:	4b45      	ldr	r3, [pc, #276]	; (801138c <ip_reass_free_complete_datagram+0x12c>)
 8011278:	22ab      	movs	r2, #171	; 0xab
 801127a:	4945      	ldr	r1, [pc, #276]	; (8011390 <ip_reass_free_complete_datagram+0x130>)
 801127c:	4845      	ldr	r0, [pc, #276]	; (8011394 <ip_reass_free_complete_datagram+0x134>)
 801127e:	f001 fdad 	bl	8012ddc <iprintf>
  if (prev != NULL) {
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d00a      	beq.n	801129e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	429a      	cmp	r2, r3
 8011290:	d005      	beq.n	801129e <ip_reass_free_complete_datagram+0x3e>
 8011292:	4b3e      	ldr	r3, [pc, #248]	; (801138c <ip_reass_free_complete_datagram+0x12c>)
 8011294:	22ad      	movs	r2, #173	; 0xad
 8011296:	4940      	ldr	r1, [pc, #256]	; (8011398 <ip_reass_free_complete_datagram+0x138>)
 8011298:	483e      	ldr	r0, [pc, #248]	; (8011394 <ip_reass_free_complete_datagram+0x134>)
 801129a:	f001 fd9f 	bl	8012ddc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	685b      	ldr	r3, [r3, #4]
 80112a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	889b      	ldrh	r3, [r3, #4]
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d12a      	bne.n	8011306 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80112be:	69bb      	ldr	r3, [r7, #24]
 80112c0:	6858      	ldr	r0, [r3, #4]
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	3308      	adds	r3, #8
 80112c6:	2214      	movs	r2, #20
 80112c8:	4619      	mov	r1, r3
 80112ca:	f001 f9d9 	bl	8012680 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80112ce:	2101      	movs	r1, #1
 80112d0:	69b8      	ldr	r0, [r7, #24]
 80112d2:	f7ff fc47 	bl	8010b64 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80112d6:	69b8      	ldr	r0, [r7, #24]
 80112d8:	f7f8 fd4c 	bl	8009d74 <pbuf_clen>
 80112dc:	4603      	mov	r3, r0
 80112de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80112e0:	8bfa      	ldrh	r2, [r7, #30]
 80112e2:	8a7b      	ldrh	r3, [r7, #18]
 80112e4:	4413      	add	r3, r2
 80112e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112ea:	db05      	blt.n	80112f8 <ip_reass_free_complete_datagram+0x98>
 80112ec:	4b27      	ldr	r3, [pc, #156]	; (801138c <ip_reass_free_complete_datagram+0x12c>)
 80112ee:	22bc      	movs	r2, #188	; 0xbc
 80112f0:	492a      	ldr	r1, [pc, #168]	; (801139c <ip_reass_free_complete_datagram+0x13c>)
 80112f2:	4828      	ldr	r0, [pc, #160]	; (8011394 <ip_reass_free_complete_datagram+0x134>)
 80112f4:	f001 fd72 	bl	8012ddc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80112f8:	8bfa      	ldrh	r2, [r7, #30]
 80112fa:	8a7b      	ldrh	r3, [r7, #18]
 80112fc:	4413      	add	r3, r2
 80112fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011300:	69b8      	ldr	r0, [r7, #24]
 8011302:	f7f8 fca9 	bl	8009c58 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801130c:	e01f      	b.n	801134e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801130e:	69bb      	ldr	r3, [r7, #24]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801131e:	68f8      	ldr	r0, [r7, #12]
 8011320:	f7f8 fd28 	bl	8009d74 <pbuf_clen>
 8011324:	4603      	mov	r3, r0
 8011326:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011328:	8bfa      	ldrh	r2, [r7, #30]
 801132a:	8a7b      	ldrh	r3, [r7, #18]
 801132c:	4413      	add	r3, r2
 801132e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011332:	db05      	blt.n	8011340 <ip_reass_free_complete_datagram+0xe0>
 8011334:	4b15      	ldr	r3, [pc, #84]	; (801138c <ip_reass_free_complete_datagram+0x12c>)
 8011336:	22cc      	movs	r2, #204	; 0xcc
 8011338:	4918      	ldr	r1, [pc, #96]	; (801139c <ip_reass_free_complete_datagram+0x13c>)
 801133a:	4816      	ldr	r0, [pc, #88]	; (8011394 <ip_reass_free_complete_datagram+0x134>)
 801133c:	f001 fd4e 	bl	8012ddc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011340:	8bfa      	ldrh	r2, [r7, #30]
 8011342:	8a7b      	ldrh	r3, [r7, #18]
 8011344:	4413      	add	r3, r2
 8011346:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	f7f8 fc85 	bl	8009c58 <pbuf_free>
  while (p != NULL) {
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d1dc      	bne.n	801130e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011354:	6839      	ldr	r1, [r7, #0]
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f000 f8c2 	bl	80114e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801135c:	4b10      	ldr	r3, [pc, #64]	; (80113a0 <ip_reass_free_complete_datagram+0x140>)
 801135e:	881b      	ldrh	r3, [r3, #0]
 8011360:	8bfa      	ldrh	r2, [r7, #30]
 8011362:	429a      	cmp	r2, r3
 8011364:	d905      	bls.n	8011372 <ip_reass_free_complete_datagram+0x112>
 8011366:	4b09      	ldr	r3, [pc, #36]	; (801138c <ip_reass_free_complete_datagram+0x12c>)
 8011368:	22d2      	movs	r2, #210	; 0xd2
 801136a:	490e      	ldr	r1, [pc, #56]	; (80113a4 <ip_reass_free_complete_datagram+0x144>)
 801136c:	4809      	ldr	r0, [pc, #36]	; (8011394 <ip_reass_free_complete_datagram+0x134>)
 801136e:	f001 fd35 	bl	8012ddc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011372:	4b0b      	ldr	r3, [pc, #44]	; (80113a0 <ip_reass_free_complete_datagram+0x140>)
 8011374:	881a      	ldrh	r2, [r3, #0]
 8011376:	8bfb      	ldrh	r3, [r7, #30]
 8011378:	1ad3      	subs	r3, r2, r3
 801137a:	b29a      	uxth	r2, r3
 801137c:	4b08      	ldr	r3, [pc, #32]	; (80113a0 <ip_reass_free_complete_datagram+0x140>)
 801137e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011380:	8bfb      	ldrh	r3, [r7, #30]
}
 8011382:	4618      	mov	r0, r3
 8011384:	3720      	adds	r7, #32
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	08015dc0 	.word	0x08015dc0
 8011390:	08015dfc 	.word	0x08015dfc
 8011394:	08015e08 	.word	0x08015e08
 8011398:	08015e30 	.word	0x08015e30
 801139c:	08015e44 	.word	0x08015e44
 80113a0:	2000b244 	.word	0x2000b244
 80113a4:	08015e64 	.word	0x08015e64

080113a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b08a      	sub	sp, #40	; 0x28
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80113b2:	2300      	movs	r3, #0
 80113b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80113b6:	2300      	movs	r3, #0
 80113b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80113ba:	2300      	movs	r3, #0
 80113bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80113be:	2300      	movs	r3, #0
 80113c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80113c2:	2300      	movs	r3, #0
 80113c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80113c6:	4b28      	ldr	r3, [pc, #160]	; (8011468 <ip_reass_remove_oldest_datagram+0xc0>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80113cc:	e030      	b.n	8011430 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80113ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d0:	695a      	ldr	r2, [r3, #20]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	68db      	ldr	r3, [r3, #12]
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d10c      	bne.n	80113f4 <ip_reass_remove_oldest_datagram+0x4c>
 80113da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113dc:	699a      	ldr	r2, [r3, #24]
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	691b      	ldr	r3, [r3, #16]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d106      	bne.n	80113f4 <ip_reass_remove_oldest_datagram+0x4c>
 80113e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e8:	899a      	ldrh	r2, [r3, #12]
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	889b      	ldrh	r3, [r3, #4]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d014      	beq.n	801141e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	3301      	adds	r3, #1
 80113f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80113fa:	6a3b      	ldr	r3, [r7, #32]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d104      	bne.n	801140a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011402:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	61bb      	str	r3, [r7, #24]
 8011408:	e009      	b.n	801141e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140c:	7fda      	ldrb	r2, [r3, #31]
 801140e:	6a3b      	ldr	r3, [r7, #32]
 8011410:	7fdb      	ldrb	r3, [r3, #31]
 8011412:	429a      	cmp	r2, r3
 8011414:	d803      	bhi.n	801141e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011418:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d001      	beq.n	801142a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011428:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8011430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011432:	2b00      	cmp	r3, #0
 8011434:	d1cb      	bne.n	80113ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011436:	6a3b      	ldr	r3, [r7, #32]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d008      	beq.n	801144e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801143c:	69b9      	ldr	r1, [r7, #24]
 801143e:	6a38      	ldr	r0, [r7, #32]
 8011440:	f7ff ff0e 	bl	8011260 <ip_reass_free_complete_datagram>
 8011444:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011446:	697a      	ldr	r2, [r7, #20]
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	4413      	add	r3, r2
 801144c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801144e:	697a      	ldr	r2, [r7, #20]
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	429a      	cmp	r2, r3
 8011454:	da02      	bge.n	801145c <ip_reass_remove_oldest_datagram+0xb4>
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	2b01      	cmp	r3, #1
 801145a:	dcac      	bgt.n	80113b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801145c:	697b      	ldr	r3, [r7, #20]
}
 801145e:	4618      	mov	r0, r3
 8011460:	3728      	adds	r7, #40	; 0x28
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
 8011466:	bf00      	nop
 8011468:	2000b240 	.word	0x2000b240

0801146c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b084      	sub	sp, #16
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011476:	2004      	movs	r0, #4
 8011478:	f7f7 fcf8 	bl	8008e6c <memp_malloc>
 801147c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d110      	bne.n	80114a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011484:	6839      	ldr	r1, [r7, #0]
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f7ff ff8e 	bl	80113a8 <ip_reass_remove_oldest_datagram>
 801148c:	4602      	mov	r2, r0
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	4293      	cmp	r3, r2
 8011492:	dc03      	bgt.n	801149c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011494:	2004      	movs	r0, #4
 8011496:	f7f7 fce9 	bl	8008e6c <memp_malloc>
 801149a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d101      	bne.n	80114a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80114a2:	2300      	movs	r3, #0
 80114a4:	e016      	b.n	80114d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80114a6:	2220      	movs	r2, #32
 80114a8:	2100      	movs	r1, #0
 80114aa:	68f8      	ldr	r0, [r7, #12]
 80114ac:	f001 f8f6 	bl	801269c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	220f      	movs	r2, #15
 80114b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80114b6:	4b09      	ldr	r3, [pc, #36]	; (80114dc <ip_reass_enqueue_new_datagram+0x70>)
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80114be:	4a07      	ldr	r2, [pc, #28]	; (80114dc <ip_reass_enqueue_new_datagram+0x70>)
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	3308      	adds	r3, #8
 80114c8:	2214      	movs	r2, #20
 80114ca:	6879      	ldr	r1, [r7, #4]
 80114cc:	4618      	mov	r0, r3
 80114ce:	f001 f8d7 	bl	8012680 <memcpy>
  return ipr;
 80114d2:	68fb      	ldr	r3, [r7, #12]
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	2000b240 	.word	0x2000b240

080114e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80114ea:	4b10      	ldr	r3, [pc, #64]	; (801152c <ip_reass_dequeue_datagram+0x4c>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d104      	bne.n	80114fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4a0c      	ldr	r2, [pc, #48]	; (801152c <ip_reass_dequeue_datagram+0x4c>)
 80114fa:	6013      	str	r3, [r2, #0]
 80114fc:	e00d      	b.n	801151a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d106      	bne.n	8011512 <ip_reass_dequeue_datagram+0x32>
 8011504:	4b0a      	ldr	r3, [pc, #40]	; (8011530 <ip_reass_dequeue_datagram+0x50>)
 8011506:	f240 1245 	movw	r2, #325	; 0x145
 801150a:	490a      	ldr	r1, [pc, #40]	; (8011534 <ip_reass_dequeue_datagram+0x54>)
 801150c:	480a      	ldr	r0, [pc, #40]	; (8011538 <ip_reass_dequeue_datagram+0x58>)
 801150e:	f001 fc65 	bl	8012ddc <iprintf>
    prev->next = ipr->next;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801151a:	6879      	ldr	r1, [r7, #4]
 801151c:	2004      	movs	r0, #4
 801151e:	f7f7 fcf7 	bl	8008f10 <memp_free>
}
 8011522:	bf00      	nop
 8011524:	3708      	adds	r7, #8
 8011526:	46bd      	mov	sp, r7
 8011528:	bd80      	pop	{r7, pc}
 801152a:	bf00      	nop
 801152c:	2000b240 	.word	0x2000b240
 8011530:	08015dc0 	.word	0x08015dc0
 8011534:	08015e88 	.word	0x08015e88
 8011538:	08015e08 	.word	0x08015e08

0801153c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b08c      	sub	sp, #48	; 0x30
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011548:	2300      	movs	r3, #0
 801154a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801154c:	2301      	movs	r3, #1
 801154e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	885b      	ldrh	r3, [r3, #2]
 801155a:	b29b      	uxth	r3, r3
 801155c:	4618      	mov	r0, r3
 801155e:	f7f6 ffcf 	bl	8008500 <lwip_htons>
 8011562:	4603      	mov	r3, r0
 8011564:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011566:	69fb      	ldr	r3, [r7, #28]
 8011568:	781b      	ldrb	r3, [r3, #0]
 801156a:	f003 030f 	and.w	r3, r3, #15
 801156e:	b2db      	uxtb	r3, r3
 8011570:	009b      	lsls	r3, r3, #2
 8011572:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011574:	7e7b      	ldrb	r3, [r7, #25]
 8011576:	b29b      	uxth	r3, r3
 8011578:	8b7a      	ldrh	r2, [r7, #26]
 801157a:	429a      	cmp	r2, r3
 801157c:	d202      	bcs.n	8011584 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801157e:	f04f 33ff 	mov.w	r3, #4294967295
 8011582:	e135      	b.n	80117f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011584:	7e7b      	ldrb	r3, [r7, #25]
 8011586:	b29b      	uxth	r3, r3
 8011588:	8b7a      	ldrh	r2, [r7, #26]
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	88db      	ldrh	r3, [r3, #6]
 8011592:	b29b      	uxth	r3, r3
 8011594:	4618      	mov	r0, r3
 8011596:	f7f6 ffb3 	bl	8008500 <lwip_htons>
 801159a:	4603      	mov	r3, r0
 801159c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	00db      	lsls	r3, r3, #3
 80115a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80115ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ae:	2200      	movs	r2, #0
 80115b0:	701a      	strb	r2, [r3, #0]
 80115b2:	2200      	movs	r2, #0
 80115b4:	705a      	strb	r2, [r3, #1]
 80115b6:	2200      	movs	r2, #0
 80115b8:	709a      	strb	r2, [r3, #2]
 80115ba:	2200      	movs	r2, #0
 80115bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80115be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c0:	8afa      	ldrh	r2, [r7, #22]
 80115c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80115c4:	8afa      	ldrh	r2, [r7, #22]
 80115c6:	8b7b      	ldrh	r3, [r7, #26]
 80115c8:	4413      	add	r3, r2
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80115d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d2:	88db      	ldrh	r3, [r3, #6]
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	8afa      	ldrh	r2, [r7, #22]
 80115d8:	429a      	cmp	r2, r3
 80115da:	d902      	bls.n	80115e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80115dc:	f04f 33ff 	mov.w	r3, #4294967295
 80115e0:	e106      	b.n	80117f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	685b      	ldr	r3, [r3, #4]
 80115e6:	627b      	str	r3, [r7, #36]	; 0x24
 80115e8:	e068      	b.n	80116bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80115ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80115f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f2:	889b      	ldrh	r3, [r3, #4]
 80115f4:	b29a      	uxth	r2, r3
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	889b      	ldrh	r3, [r3, #4]
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d235      	bcs.n	801166c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011604:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011608:	2b00      	cmp	r3, #0
 801160a:	d020      	beq.n	801164e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801160c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160e:	889b      	ldrh	r3, [r3, #4]
 8011610:	b29a      	uxth	r2, r3
 8011612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011614:	88db      	ldrh	r3, [r3, #6]
 8011616:	b29b      	uxth	r3, r3
 8011618:	429a      	cmp	r2, r3
 801161a:	d307      	bcc.n	801162c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801161e:	88db      	ldrh	r3, [r3, #6]
 8011620:	b29a      	uxth	r2, r3
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	889b      	ldrh	r3, [r3, #4]
 8011626:	b29b      	uxth	r3, r3
 8011628:	429a      	cmp	r2, r3
 801162a:	d902      	bls.n	8011632 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801162c:	f04f 33ff 	mov.w	r3, #4294967295
 8011630:	e0de      	b.n	80117f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011634:	68ba      	ldr	r2, [r7, #8]
 8011636:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163a:	88db      	ldrh	r3, [r3, #6]
 801163c:	b29a      	uxth	r2, r3
 801163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011640:	889b      	ldrh	r3, [r3, #4]
 8011642:	b29b      	uxth	r3, r3
 8011644:	429a      	cmp	r2, r3
 8011646:	d03d      	beq.n	80116c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011648:	2300      	movs	r3, #0
 801164a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801164c:	e03a      	b.n	80116c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011650:	88db      	ldrh	r3, [r3, #6]
 8011652:	b29a      	uxth	r2, r3
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	889b      	ldrh	r3, [r3, #4]
 8011658:	b29b      	uxth	r3, r3
 801165a:	429a      	cmp	r2, r3
 801165c:	d902      	bls.n	8011664 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801165e:	f04f 33ff 	mov.w	r3, #4294967295
 8011662:	e0c5      	b.n	80117f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	68ba      	ldr	r2, [r7, #8]
 8011668:	605a      	str	r2, [r3, #4]
      break;
 801166a:	e02b      	b.n	80116c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166e:	889b      	ldrh	r3, [r3, #4]
 8011670:	b29a      	uxth	r2, r3
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	889b      	ldrh	r3, [r3, #4]
 8011676:	b29b      	uxth	r3, r3
 8011678:	429a      	cmp	r2, r3
 801167a:	d102      	bne.n	8011682 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801167c:	f04f 33ff 	mov.w	r3, #4294967295
 8011680:	e0b6      	b.n	80117f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011684:	889b      	ldrh	r3, [r3, #4]
 8011686:	b29a      	uxth	r2, r3
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	88db      	ldrh	r3, [r3, #6]
 801168c:	b29b      	uxth	r3, r3
 801168e:	429a      	cmp	r2, r3
 8011690:	d202      	bcs.n	8011698 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011692:	f04f 33ff 	mov.w	r3, #4294967295
 8011696:	e0ab      	b.n	80117f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169a:	2b00      	cmp	r3, #0
 801169c:	d009      	beq.n	80116b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a0:	88db      	ldrh	r3, [r3, #6]
 80116a2:	b29a      	uxth	r2, r3
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	889b      	ldrh	r3, [r3, #4]
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d001      	beq.n	80116b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80116ae:	2300      	movs	r3, #0
 80116b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80116bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d193      	bne.n	80115ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80116c2:	e000      	b.n	80116c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80116c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80116c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d12d      	bne.n	8011728 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80116cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d01c      	beq.n	801170c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80116d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116d4:	88db      	ldrh	r3, [r3, #6]
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116da:	889b      	ldrh	r3, [r3, #4]
 80116dc:	b29b      	uxth	r3, r3
 80116de:	429a      	cmp	r2, r3
 80116e0:	d906      	bls.n	80116f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80116e2:	4b45      	ldr	r3, [pc, #276]	; (80117f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80116e4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80116e8:	4944      	ldr	r1, [pc, #272]	; (80117fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80116ea:	4845      	ldr	r0, [pc, #276]	; (8011800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80116ec:	f001 fb76 	bl	8012ddc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80116f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f2:	68ba      	ldr	r2, [r7, #8]
 80116f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80116f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f8:	88db      	ldrh	r3, [r3, #6]
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fe:	889b      	ldrh	r3, [r3, #4]
 8011700:	b29b      	uxth	r3, r3
 8011702:	429a      	cmp	r2, r3
 8011704:	d010      	beq.n	8011728 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011706:	2300      	movs	r3, #0
 8011708:	623b      	str	r3, [r7, #32]
 801170a:	e00d      	b.n	8011728 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d006      	beq.n	8011722 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011714:	4b38      	ldr	r3, [pc, #224]	; (80117f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011716:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801171a:	493a      	ldr	r1, [pc, #232]	; (8011804 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801171c:	4838      	ldr	r0, [pc, #224]	; (8011800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801171e:	f001 fb5d 	bl	8012ddc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	68ba      	ldr	r2, [r7, #8]
 8011726:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d105      	bne.n	801173a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	7f9b      	ldrb	r3, [r3, #30]
 8011732:	f003 0301 	and.w	r3, r3, #1
 8011736:	2b00      	cmp	r3, #0
 8011738:	d059      	beq.n	80117ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801173a:	6a3b      	ldr	r3, [r7, #32]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d04f      	beq.n	80117e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d006      	beq.n	8011756 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	685b      	ldr	r3, [r3, #4]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	889b      	ldrh	r3, [r3, #4]
 8011750:	b29b      	uxth	r3, r3
 8011752:	2b00      	cmp	r3, #0
 8011754:	d002      	beq.n	801175c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011756:	2300      	movs	r3, #0
 8011758:	623b      	str	r3, [r7, #32]
 801175a:	e041      	b.n	80117e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801175c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011766:	e012      	b.n	801178e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176a:	685b      	ldr	r3, [r3, #4]
 801176c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011770:	88db      	ldrh	r3, [r3, #6]
 8011772:	b29a      	uxth	r2, r3
 8011774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011776:	889b      	ldrh	r3, [r3, #4]
 8011778:	b29b      	uxth	r3, r3
 801177a:	429a      	cmp	r2, r3
 801177c:	d002      	beq.n	8011784 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801177e:	2300      	movs	r3, #0
 8011780:	623b      	str	r3, [r7, #32]
            break;
 8011782:	e007      	b.n	8011794 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011786:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011790:	2b00      	cmp	r3, #0
 8011792:	d1e9      	bne.n	8011768 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011794:	6a3b      	ldr	r3, [r7, #32]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d022      	beq.n	80117e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d106      	bne.n	80117b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80117a2:	4b15      	ldr	r3, [pc, #84]	; (80117f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80117a4:	f240 12df 	movw	r2, #479	; 0x1df
 80117a8:	4917      	ldr	r1, [pc, #92]	; (8011808 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80117aa:	4815      	ldr	r0, [pc, #84]	; (8011800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80117ac:	f001 fb16 	bl	8012ddc <iprintf>
          LWIP_ASSERT("sanity check",
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	685b      	ldr	r3, [r3, #4]
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d106      	bne.n	80117ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80117bc:	4b0e      	ldr	r3, [pc, #56]	; (80117f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80117be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80117c2:	4911      	ldr	r1, [pc, #68]	; (8011808 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80117c4:	480e      	ldr	r0, [pc, #56]	; (8011800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80117c6:	f001 fb09 	bl	8012ddc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80117ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d006      	beq.n	80117e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80117d2:	4b09      	ldr	r3, [pc, #36]	; (80117f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80117d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80117d8:	490c      	ldr	r1, [pc, #48]	; (801180c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80117da:	4809      	ldr	r0, [pc, #36]	; (8011800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80117dc:	f001 fafe 	bl	8012ddc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80117e0:	6a3b      	ldr	r3, [r7, #32]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	bf14      	ite	ne
 80117e6:	2301      	movne	r3, #1
 80117e8:	2300      	moveq	r3, #0
 80117ea:	b2db      	uxtb	r3, r3
 80117ec:	e000      	b.n	80117f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80117ee:	2300      	movs	r3, #0
}
 80117f0:	4618      	mov	r0, r3
 80117f2:	3730      	adds	r7, #48	; 0x30
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}
 80117f8:	08015dc0 	.word	0x08015dc0
 80117fc:	08015ea4 	.word	0x08015ea4
 8011800:	08015e08 	.word	0x08015e08
 8011804:	08015ec4 	.word	0x08015ec4
 8011808:	08015efc 	.word	0x08015efc
 801180c:	08015f0c 	.word	0x08015f0c

08011810 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b08e      	sub	sp, #56	; 0x38
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	685b      	ldr	r3, [r3, #4]
 801181c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011820:	781b      	ldrb	r3, [r3, #0]
 8011822:	f003 030f 	and.w	r3, r3, #15
 8011826:	b2db      	uxtb	r3, r3
 8011828:	009b      	lsls	r3, r3, #2
 801182a:	b2db      	uxtb	r3, r3
 801182c:	2b14      	cmp	r3, #20
 801182e:	f040 8167 	bne.w	8011b00 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011834:	88db      	ldrh	r3, [r3, #6]
 8011836:	b29b      	uxth	r3, r3
 8011838:	4618      	mov	r0, r3
 801183a:	f7f6 fe61 	bl	8008500 <lwip_htons>
 801183e:	4603      	mov	r3, r0
 8011840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011844:	b29b      	uxth	r3, r3
 8011846:	00db      	lsls	r3, r3, #3
 8011848:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801184c:	885b      	ldrh	r3, [r3, #2]
 801184e:	b29b      	uxth	r3, r3
 8011850:	4618      	mov	r0, r3
 8011852:	f7f6 fe55 	bl	8008500 <lwip_htons>
 8011856:	4603      	mov	r3, r0
 8011858:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	f003 030f 	and.w	r3, r3, #15
 8011862:	b2db      	uxtb	r3, r3
 8011864:	009b      	lsls	r3, r3, #2
 8011866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801186a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801186e:	b29b      	uxth	r3, r3
 8011870:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011872:	429a      	cmp	r2, r3
 8011874:	f0c0 8146 	bcc.w	8011b04 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801187c:	b29b      	uxth	r3, r3
 801187e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011880:	1ad3      	subs	r3, r2, r3
 8011882:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011884:	6878      	ldr	r0, [r7, #4]
 8011886:	f7f8 fa75 	bl	8009d74 <pbuf_clen>
 801188a:	4603      	mov	r3, r0
 801188c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801188e:	4b9f      	ldr	r3, [pc, #636]	; (8011b0c <ip4_reass+0x2fc>)
 8011890:	881b      	ldrh	r3, [r3, #0]
 8011892:	461a      	mov	r2, r3
 8011894:	8c3b      	ldrh	r3, [r7, #32]
 8011896:	4413      	add	r3, r2
 8011898:	2b0a      	cmp	r3, #10
 801189a:	dd10      	ble.n	80118be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801189c:	8c3b      	ldrh	r3, [r7, #32]
 801189e:	4619      	mov	r1, r3
 80118a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118a2:	f7ff fd81 	bl	80113a8 <ip_reass_remove_oldest_datagram>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	f000 812d 	beq.w	8011b08 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80118ae:	4b97      	ldr	r3, [pc, #604]	; (8011b0c <ip4_reass+0x2fc>)
 80118b0:	881b      	ldrh	r3, [r3, #0]
 80118b2:	461a      	mov	r2, r3
 80118b4:	8c3b      	ldrh	r3, [r7, #32]
 80118b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80118b8:	2b0a      	cmp	r3, #10
 80118ba:	f300 8125 	bgt.w	8011b08 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80118be:	4b94      	ldr	r3, [pc, #592]	; (8011b10 <ip4_reass+0x300>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	633b      	str	r3, [r7, #48]	; 0x30
 80118c4:	e015      	b.n	80118f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80118c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c8:	695a      	ldr	r2, [r3, #20]
 80118ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118cc:	68db      	ldr	r3, [r3, #12]
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d10c      	bne.n	80118ec <ip4_reass+0xdc>
 80118d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d4:	699a      	ldr	r2, [r3, #24]
 80118d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d8:	691b      	ldr	r3, [r3, #16]
 80118da:	429a      	cmp	r2, r3
 80118dc:	d106      	bne.n	80118ec <ip4_reass+0xdc>
 80118de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e0:	899a      	ldrh	r2, [r3, #12]
 80118e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e4:	889b      	ldrh	r3, [r3, #4]
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d006      	beq.n	80118fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80118ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	633b      	str	r3, [r7, #48]	; 0x30
 80118f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d1e6      	bne.n	80118c6 <ip4_reass+0xb6>
 80118f8:	e000      	b.n	80118fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80118fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80118fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d109      	bne.n	8011916 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011902:	8c3b      	ldrh	r3, [r7, #32]
 8011904:	4619      	mov	r1, r3
 8011906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011908:	f7ff fdb0 	bl	801146c <ip_reass_enqueue_new_datagram>
 801190c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011910:	2b00      	cmp	r3, #0
 8011912:	d11c      	bne.n	801194e <ip4_reass+0x13e>
      goto nullreturn;
 8011914:	e109      	b.n	8011b2a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011918:	88db      	ldrh	r3, [r3, #6]
 801191a:	b29b      	uxth	r3, r3
 801191c:	4618      	mov	r0, r3
 801191e:	f7f6 fdef 	bl	8008500 <lwip_htons>
 8011922:	4603      	mov	r3, r0
 8011924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011928:	2b00      	cmp	r3, #0
 801192a:	d110      	bne.n	801194e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801192c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801192e:	89db      	ldrh	r3, [r3, #14]
 8011930:	4618      	mov	r0, r3
 8011932:	f7f6 fde5 	bl	8008500 <lwip_htons>
 8011936:	4603      	mov	r3, r0
 8011938:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801193c:	2b00      	cmp	r3, #0
 801193e:	d006      	beq.n	801194e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011942:	3308      	adds	r3, #8
 8011944:	2214      	movs	r2, #20
 8011946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011948:	4618      	mov	r0, r3
 801194a:	f000 fe99 	bl	8012680 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011950:	88db      	ldrh	r3, [r3, #6]
 8011952:	b29b      	uxth	r3, r3
 8011954:	f003 0320 	and.w	r3, r3, #32
 8011958:	2b00      	cmp	r3, #0
 801195a:	bf0c      	ite	eq
 801195c:	2301      	moveq	r3, #1
 801195e:	2300      	movne	r3, #0
 8011960:	b2db      	uxtb	r3, r3
 8011962:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011964:	69fb      	ldr	r3, [r7, #28]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d00e      	beq.n	8011988 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801196a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801196c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801196e:	4413      	add	r3, r2
 8011970:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011972:	8b7a      	ldrh	r2, [r7, #26]
 8011974:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011976:	429a      	cmp	r2, r3
 8011978:	f0c0 80a0 	bcc.w	8011abc <ip4_reass+0x2ac>
 801197c:	8b7b      	ldrh	r3, [r7, #26]
 801197e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011982:	4293      	cmp	r3, r2
 8011984:	f200 809a 	bhi.w	8011abc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011988:	69fa      	ldr	r2, [r7, #28]
 801198a:	6879      	ldr	r1, [r7, #4]
 801198c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801198e:	f7ff fdd5 	bl	801153c <ip_reass_chain_frag_into_datagram_and_validate>
 8011992:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801199a:	f000 8091 	beq.w	8011ac0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801199e:	4b5b      	ldr	r3, [pc, #364]	; (8011b0c <ip4_reass+0x2fc>)
 80119a0:	881a      	ldrh	r2, [r3, #0]
 80119a2:	8c3b      	ldrh	r3, [r7, #32]
 80119a4:	4413      	add	r3, r2
 80119a6:	b29a      	uxth	r2, r3
 80119a8:	4b58      	ldr	r3, [pc, #352]	; (8011b0c <ip4_reass+0x2fc>)
 80119aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d00d      	beq.n	80119ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80119b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80119b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119b6:	4413      	add	r3, r2
 80119b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80119ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119bc:	8a7a      	ldrh	r2, [r7, #18]
 80119be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80119c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c2:	7f9b      	ldrb	r3, [r3, #30]
 80119c4:	f043 0301 	orr.w	r3, r3, #1
 80119c8:	b2da      	uxtb	r2, r3
 80119ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	d171      	bne.n	8011ab8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80119d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d6:	8b9b      	ldrh	r3, [r3, #28]
 80119d8:	3314      	adds	r3, #20
 80119da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80119dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80119e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80119ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f0:	3308      	adds	r3, #8
 80119f2:	2214      	movs	r2, #20
 80119f4:	4619      	mov	r1, r3
 80119f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119f8:	f000 fe42 	bl	8012680 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80119fc:	8a3b      	ldrh	r3, [r7, #16]
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7f6 fd7e 	bl	8008500 <lwip_htons>
 8011a04:	4603      	mov	r3, r0
 8011a06:	461a      	mov	r2, r3
 8011a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a0e:	2200      	movs	r2, #0
 8011a10:	719a      	strb	r2, [r3, #6]
 8011a12:	2200      	movs	r2, #0
 8011a14:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a18:	2200      	movs	r2, #0
 8011a1a:	729a      	strb	r2, [r3, #10]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011a26:	e00d      	b.n	8011a44 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a2a:	685b      	ldr	r3, [r3, #4]
 8011a2c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011a2e:	2114      	movs	r1, #20
 8011a30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011a32:	f7f8 f88b 	bl	8009b4c <pbuf_remove_header>
      pbuf_cat(p, r);
 8011a36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7f8 f9db 	bl	8009df4 <pbuf_cat>
      r = iprh->next_pbuf;
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d1ee      	bne.n	8011a28 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011a4a:	4b31      	ldr	r3, [pc, #196]	; (8011b10 <ip4_reass+0x300>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d102      	bne.n	8011a5a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011a54:	2300      	movs	r3, #0
 8011a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a58:	e010      	b.n	8011a7c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011a5a:	4b2d      	ldr	r3, [pc, #180]	; (8011b10 <ip4_reass+0x300>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a60:	e007      	b.n	8011a72 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d006      	beq.n	8011a7a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1f4      	bne.n	8011a62 <ip4_reass+0x252>
 8011a78:	e000      	b.n	8011a7c <ip4_reass+0x26c>
          break;
 8011a7a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011a7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a80:	f7ff fd2e 	bl	80114e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f7f8 f975 	bl	8009d74 <pbuf_clen>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011a8e:	4b1f      	ldr	r3, [pc, #124]	; (8011b0c <ip4_reass+0x2fc>)
 8011a90:	881b      	ldrh	r3, [r3, #0]
 8011a92:	8c3a      	ldrh	r2, [r7, #32]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d906      	bls.n	8011aa6 <ip4_reass+0x296>
 8011a98:	4b1e      	ldr	r3, [pc, #120]	; (8011b14 <ip4_reass+0x304>)
 8011a9a:	f240 229b 	movw	r2, #667	; 0x29b
 8011a9e:	491e      	ldr	r1, [pc, #120]	; (8011b18 <ip4_reass+0x308>)
 8011aa0:	481e      	ldr	r0, [pc, #120]	; (8011b1c <ip4_reass+0x30c>)
 8011aa2:	f001 f99b 	bl	8012ddc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011aa6:	4b19      	ldr	r3, [pc, #100]	; (8011b0c <ip4_reass+0x2fc>)
 8011aa8:	881a      	ldrh	r2, [r3, #0]
 8011aaa:	8c3b      	ldrh	r3, [r7, #32]
 8011aac:	1ad3      	subs	r3, r2, r3
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	4b16      	ldr	r3, [pc, #88]	; (8011b0c <ip4_reass+0x2fc>)
 8011ab2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	e03c      	b.n	8011b32 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	e03a      	b.n	8011b32 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8011abc:	bf00      	nop
 8011abe:	e000      	b.n	8011ac2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8011ac0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d106      	bne.n	8011ad6 <ip4_reass+0x2c6>
 8011ac8:	4b12      	ldr	r3, [pc, #72]	; (8011b14 <ip4_reass+0x304>)
 8011aca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011ace:	4914      	ldr	r1, [pc, #80]	; (8011b20 <ip4_reass+0x310>)
 8011ad0:	4812      	ldr	r0, [pc, #72]	; (8011b1c <ip4_reass+0x30c>)
 8011ad2:	f001 f983 	bl	8012ddc <iprintf>
  if (ipr->p == NULL) {
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d124      	bne.n	8011b28 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011ade:	4b0c      	ldr	r3, [pc, #48]	; (8011b10 <ip4_reass+0x300>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d006      	beq.n	8011af6 <ip4_reass+0x2e6>
 8011ae8:	4b0a      	ldr	r3, [pc, #40]	; (8011b14 <ip4_reass+0x304>)
 8011aea:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011aee:	490d      	ldr	r1, [pc, #52]	; (8011b24 <ip4_reass+0x314>)
 8011af0:	480a      	ldr	r0, [pc, #40]	; (8011b1c <ip4_reass+0x30c>)
 8011af2:	f001 f973 	bl	8012ddc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011af6:	2100      	movs	r1, #0
 8011af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011afa:	f7ff fcf1 	bl	80114e0 <ip_reass_dequeue_datagram>
 8011afe:	e014      	b.n	8011b2a <ip4_reass+0x31a>
    goto nullreturn;
 8011b00:	bf00      	nop
 8011b02:	e012      	b.n	8011b2a <ip4_reass+0x31a>
    goto nullreturn;
 8011b04:	bf00      	nop
 8011b06:	e010      	b.n	8011b2a <ip4_reass+0x31a>
      goto nullreturn;
 8011b08:	bf00      	nop
 8011b0a:	e00e      	b.n	8011b2a <ip4_reass+0x31a>
 8011b0c:	2000b244 	.word	0x2000b244
 8011b10:	2000b240 	.word	0x2000b240
 8011b14:	08015dc0 	.word	0x08015dc0
 8011b18:	08015f30 	.word	0x08015f30
 8011b1c:	08015e08 	.word	0x08015e08
 8011b20:	08015f4c 	.word	0x08015f4c
 8011b24:	08015f58 	.word	0x08015f58
  }

nullreturn:
 8011b28:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7f8 f894 	bl	8009c58 <pbuf_free>
  return NULL;
 8011b30:	2300      	movs	r3, #0
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3738      	adds	r7, #56	; 0x38
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop

08011b3c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011b40:	2005      	movs	r0, #5
 8011b42:	f7f7 f993 	bl	8008e6c <memp_malloc>
 8011b46:	4603      	mov	r3, r0
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d106      	bne.n	8011b68 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011b5a:	4b07      	ldr	r3, [pc, #28]	; (8011b78 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011b5c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8011b60:	4906      	ldr	r1, [pc, #24]	; (8011b7c <ip_frag_free_pbuf_custom_ref+0x30>)
 8011b62:	4807      	ldr	r0, [pc, #28]	; (8011b80 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011b64:	f001 f93a 	bl	8012ddc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011b68:	6879      	ldr	r1, [r7, #4]
 8011b6a:	2005      	movs	r0, #5
 8011b6c:	f7f7 f9d0 	bl	8008f10 <memp_free>
}
 8011b70:	bf00      	nop
 8011b72:	3708      	adds	r7, #8
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}
 8011b78:	08015dc0 	.word	0x08015dc0
 8011b7c:	08015f78 	.word	0x08015f78
 8011b80:	08015e08 	.word	0x08015e08

08011b84 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b084      	sub	sp, #16
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d106      	bne.n	8011ba4 <ipfrag_free_pbuf_custom+0x20>
 8011b96:	4b11      	ldr	r3, [pc, #68]	; (8011bdc <ipfrag_free_pbuf_custom+0x58>)
 8011b98:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011b9c:	4910      	ldr	r1, [pc, #64]	; (8011be0 <ipfrag_free_pbuf_custom+0x5c>)
 8011b9e:	4811      	ldr	r0, [pc, #68]	; (8011be4 <ipfrag_free_pbuf_custom+0x60>)
 8011ba0:	f001 f91c 	bl	8012ddc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011ba4:	68fa      	ldr	r2, [r7, #12]
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d006      	beq.n	8011bba <ipfrag_free_pbuf_custom+0x36>
 8011bac:	4b0b      	ldr	r3, [pc, #44]	; (8011bdc <ipfrag_free_pbuf_custom+0x58>)
 8011bae:	f240 22cf 	movw	r2, #719	; 0x2cf
 8011bb2:	490d      	ldr	r1, [pc, #52]	; (8011be8 <ipfrag_free_pbuf_custom+0x64>)
 8011bb4:	480b      	ldr	r0, [pc, #44]	; (8011be4 <ipfrag_free_pbuf_custom+0x60>)
 8011bb6:	f001 f911 	bl	8012ddc <iprintf>
  if (pcr->original != NULL) {
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	695b      	ldr	r3, [r3, #20]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d004      	beq.n	8011bcc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	695b      	ldr	r3, [r3, #20]
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7f8 f846 	bl	8009c58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f7ff ffbd 	bl	8011b4c <ip_frag_free_pbuf_custom_ref>
}
 8011bd2:	bf00      	nop
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	08015dc0 	.word	0x08015dc0
 8011be0:	08015f84 	.word	0x08015f84
 8011be4:	08015e08 	.word	0x08015e08
 8011be8:	08015f90 	.word	0x08015f90

08011bec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b094      	sub	sp, #80	; 0x50
 8011bf0:	af02      	add	r7, sp, #8
 8011bf2:	60f8      	str	r0, [r7, #12]
 8011bf4:	60b9      	str	r1, [r7, #8]
 8011bf6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011c02:	3b14      	subs	r3, #20
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	da00      	bge.n	8011c0a <ip4_frag+0x1e>
 8011c08:	3307      	adds	r3, #7
 8011c0a:	10db      	asrs	r3, r3, #3
 8011c0c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011c0e:	2314      	movs	r3, #20
 8011c10:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	685b      	ldr	r3, [r3, #4]
 8011c16:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	f003 030f 	and.w	r3, r3, #15
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	009b      	lsls	r3, r3, #2
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	2b14      	cmp	r3, #20
 8011c2c:	d002      	beq.n	8011c34 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011c2e:	f06f 0305 	mvn.w	r3, #5
 8011c32:	e110      	b.n	8011e56 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	895b      	ldrh	r3, [r3, #10]
 8011c38:	2b13      	cmp	r3, #19
 8011c3a:	d809      	bhi.n	8011c50 <ip4_frag+0x64>
 8011c3c:	4b88      	ldr	r3, [pc, #544]	; (8011e60 <ip4_frag+0x274>)
 8011c3e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8011c42:	4988      	ldr	r1, [pc, #544]	; (8011e64 <ip4_frag+0x278>)
 8011c44:	4888      	ldr	r0, [pc, #544]	; (8011e68 <ip4_frag+0x27c>)
 8011c46:	f001 f8c9 	bl	8012ddc <iprintf>
 8011c4a:	f06f 0305 	mvn.w	r3, #5
 8011c4e:	e102      	b.n	8011e56 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c52:	88db      	ldrh	r3, [r3, #6]
 8011c54:	b29b      	uxth	r3, r3
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7f6 fc52 	bl	8008500 <lwip_htons>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8011c60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011c66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011c6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011c70:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	891b      	ldrh	r3, [r3, #8]
 8011c76:	3b14      	subs	r3, #20
 8011c78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8011c7c:	e0e1      	b.n	8011e42 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011c7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011c80:	00db      	lsls	r3, r3, #3
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011c88:	4293      	cmp	r3, r2
 8011c8a:	bf28      	it	cs
 8011c8c:	4613      	movcs	r3, r2
 8011c8e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011c90:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c94:	2114      	movs	r1, #20
 8011c96:	200e      	movs	r0, #14
 8011c98:	f7f7 fcfa 	bl	8009690 <pbuf_alloc>
 8011c9c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8011c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	f000 80d5 	beq.w	8011e50 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca8:	895b      	ldrh	r3, [r3, #10]
 8011caa:	2b13      	cmp	r3, #19
 8011cac:	d806      	bhi.n	8011cbc <ip4_frag+0xd0>
 8011cae:	4b6c      	ldr	r3, [pc, #432]	; (8011e60 <ip4_frag+0x274>)
 8011cb0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011cb4:	496d      	ldr	r1, [pc, #436]	; (8011e6c <ip4_frag+0x280>)
 8011cb6:	486c      	ldr	r0, [pc, #432]	; (8011e68 <ip4_frag+0x27c>)
 8011cb8:	f001 f890 	bl	8012ddc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	2214      	movs	r2, #20
 8011cc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f000 fcdb 	bl	8012680 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8011cd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011cd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011cd6:	e064      	b.n	8011da2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	895a      	ldrh	r2, [r3, #10]
 8011cdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011cde:	1ad3      	subs	r3, r2, r3
 8011ce0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	895b      	ldrh	r3, [r3, #10]
 8011ce6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d906      	bls.n	8011cfa <ip4_frag+0x10e>
 8011cec:	4b5c      	ldr	r3, [pc, #368]	; (8011e60 <ip4_frag+0x274>)
 8011cee:	f240 322d 	movw	r2, #813	; 0x32d
 8011cf2:	495f      	ldr	r1, [pc, #380]	; (8011e70 <ip4_frag+0x284>)
 8011cf4:	485c      	ldr	r0, [pc, #368]	; (8011e68 <ip4_frag+0x27c>)
 8011cf6:	f001 f871 	bl	8012ddc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011cfa:	8bfa      	ldrh	r2, [r7, #30]
 8011cfc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011d00:	4293      	cmp	r3, r2
 8011d02:	bf28      	it	cs
 8011d04:	4613      	movcs	r3, r2
 8011d06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011d0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d105      	bne.n	8011d1e <ip4_frag+0x132>
        poff = 0;
 8011d12:	2300      	movs	r3, #0
 8011d14:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	60fb      	str	r3, [r7, #12]
        continue;
 8011d1c:	e041      	b.n	8011da2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011d1e:	f7ff ff0d 	bl	8011b3c <ip_frag_alloc_pbuf_custom_ref>
 8011d22:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d103      	bne.n	8011d32 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d2c:	f7f7 ff94 	bl	8009c58 <pbuf_free>
        goto memerr;
 8011d30:	e08f      	b.n	8011e52 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011d32:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011d38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d3a:	4413      	add	r3, r2
 8011d3c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8011d40:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8011d44:	9201      	str	r2, [sp, #4]
 8011d46:	9300      	str	r3, [sp, #0]
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2241      	movs	r2, #65	; 0x41
 8011d4c:	2000      	movs	r0, #0
 8011d4e:	f7f7 fdc9 	bl	80098e4 <pbuf_alloced_custom>
 8011d52:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d106      	bne.n	8011d68 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011d5a:	69b8      	ldr	r0, [r7, #24]
 8011d5c:	f7ff fef6 	bl	8011b4c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d62:	f7f7 ff79 	bl	8009c58 <pbuf_free>
        goto memerr;
 8011d66:	e074      	b.n	8011e52 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8011d68:	68f8      	ldr	r0, [r7, #12]
 8011d6a:	f7f8 f81b 	bl	8009da4 <pbuf_ref>
      pcr->original = p;
 8011d6e:	69bb      	ldr	r3, [r7, #24]
 8011d70:	68fa      	ldr	r2, [r7, #12]
 8011d72:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011d74:	69bb      	ldr	r3, [r7, #24]
 8011d76:	4a3f      	ldr	r2, [pc, #252]	; (8011e74 <ip4_frag+0x288>)
 8011d78:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011d7a:	6979      	ldr	r1, [r7, #20]
 8011d7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d7e:	f7f8 f839 	bl	8009df4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011d82:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011d86:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011d8a:	1ad3      	subs	r3, r2, r3
 8011d8c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8011d90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d004      	beq.n	8011da2 <ip4_frag+0x1b6>
        poff = 0;
 8011d98:	2300      	movs	r3, #0
 8011d9a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011da2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d196      	bne.n	8011cd8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011daa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011dac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011db0:	4413      	add	r3, r2
 8011db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011db8:	f1a3 0213 	sub.w	r2, r3, #19
 8011dbc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	bfcc      	ite	gt
 8011dc4:	2301      	movgt	r3, #1
 8011dc6:	2300      	movle	r3, #0
 8011dc8:	b2db      	uxtb	r3, r3
 8011dca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011dcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011dd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011dd6:	6a3b      	ldr	r3, [r7, #32]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d002      	beq.n	8011de2 <ip4_frag+0x1f6>
 8011ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d003      	beq.n	8011dea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8011de2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011de4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011de8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011dea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011dec:	4618      	mov	r0, r3
 8011dee:	f7f6 fb87 	bl	8008500 <lwip_htons>
 8011df2:	4603      	mov	r3, r0
 8011df4:	461a      	mov	r2, r3
 8011df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011df8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011dfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011dfc:	3314      	adds	r3, #20
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	4618      	mov	r0, r3
 8011e02:	f7f6 fb7d 	bl	8008500 <lwip_htons>
 8011e06:	4603      	mov	r3, r0
 8011e08:	461a      	mov	r2, r3
 8011e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8011e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e10:	2200      	movs	r2, #0
 8011e12:	729a      	strb	r2, [r3, #10]
 8011e14:	2200      	movs	r2, #0
 8011e16:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	695b      	ldr	r3, [r3, #20]
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e20:	68b8      	ldr	r0, [r7, #8]
 8011e22:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8011e24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e26:	f7f7 ff17 	bl	8009c58 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8011e2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011e2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011e30:	1ad3      	subs	r3, r2, r3
 8011e32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8011e36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011e3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e3c:	4413      	add	r3, r2
 8011e3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8011e42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	f47f af19 	bne.w	8011c7e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	e002      	b.n	8011e56 <ip4_frag+0x26a>
      goto memerr;
 8011e50:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8011e52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3748      	adds	r7, #72	; 0x48
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	08015dc0 	.word	0x08015dc0
 8011e64:	08015f9c 	.word	0x08015f9c
 8011e68:	08015e08 	.word	0x08015e08
 8011e6c:	08015fb8 	.word	0x08015fb8
 8011e70:	08015fd8 	.word	0x08015fd8
 8011e74:	08011b85 	.word	0x08011b85

08011e78 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b086      	sub	sp, #24
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8011e82:	230e      	movs	r3, #14
 8011e84:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	895b      	ldrh	r3, [r3, #10]
 8011e8a:	2b0e      	cmp	r3, #14
 8011e8c:	d96e      	bls.n	8011f6c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	7bdb      	ldrb	r3, [r3, #15]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d106      	bne.n	8011ea4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011e9c:	3301      	adds	r3, #1
 8011e9e:	b2da      	uxtb	r2, r3
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	7b1a      	ldrb	r2, [r3, #12]
 8011eae:	7b5b      	ldrb	r3, [r3, #13]
 8011eb0:	021b      	lsls	r3, r3, #8
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011eb6:	693b      	ldr	r3, [r7, #16]
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	f003 0301 	and.w	r3, r3, #1
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d023      	beq.n	8011f0a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	781b      	ldrb	r3, [r3, #0]
 8011ec6:	2b01      	cmp	r3, #1
 8011ec8:	d10f      	bne.n	8011eea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011eca:	693b      	ldr	r3, [r7, #16]
 8011ecc:	785b      	ldrb	r3, [r3, #1]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d11b      	bne.n	8011f0a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8011ed2:	693b      	ldr	r3, [r7, #16]
 8011ed4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011ed6:	2b5e      	cmp	r3, #94	; 0x5e
 8011ed8:	d117      	bne.n	8011f0a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	7b5b      	ldrb	r3, [r3, #13]
 8011ede:	f043 0310 	orr.w	r3, r3, #16
 8011ee2:	b2da      	uxtb	r2, r3
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	735a      	strb	r2, [r3, #13]
 8011ee8:	e00f      	b.n	8011f0a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	2206      	movs	r2, #6
 8011eee:	4928      	ldr	r1, [pc, #160]	; (8011f90 <ethernet_input+0x118>)
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f000 fbb7 	bl	8012664 <memcmp>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d106      	bne.n	8011f0a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	7b5b      	ldrb	r3, [r3, #13]
 8011f00:	f043 0308 	orr.w	r3, r3, #8
 8011f04:	b2da      	uxtb	r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011f0a:	89fb      	ldrh	r3, [r7, #14]
 8011f0c:	2b08      	cmp	r3, #8
 8011f0e:	d003      	beq.n	8011f18 <ethernet_input+0xa0>
 8011f10:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011f14:	d014      	beq.n	8011f40 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011f16:	e032      	b.n	8011f7e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f1e:	f003 0308 	and.w	r3, r3, #8
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d024      	beq.n	8011f70 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011f26:	8afb      	ldrh	r3, [r7, #22]
 8011f28:	4619      	mov	r1, r3
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f7f7 fe0e 	bl	8009b4c <pbuf_remove_header>
 8011f30:	4603      	mov	r3, r0
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d11e      	bne.n	8011f74 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011f36:	6839      	ldr	r1, [r7, #0]
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7fe ff27 	bl	8010d8c <ip4_input>
      break;
 8011f3e:	e013      	b.n	8011f68 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f46:	f003 0308 	and.w	r3, r3, #8
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d014      	beq.n	8011f78 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8011f4e:	8afb      	ldrh	r3, [r7, #22]
 8011f50:	4619      	mov	r1, r3
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f7f7 fdfa 	bl	8009b4c <pbuf_remove_header>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d10e      	bne.n	8011f7c <ethernet_input+0x104>
        etharp_input(p, netif);
 8011f5e:	6839      	ldr	r1, [r7, #0]
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7fe f8c7 	bl	80100f4 <etharp_input>
      break;
 8011f66:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011f68:	2300      	movs	r3, #0
 8011f6a:	e00c      	b.n	8011f86 <ethernet_input+0x10e>
    goto free_and_return;
 8011f6c:	bf00      	nop
 8011f6e:	e006      	b.n	8011f7e <ethernet_input+0x106>
        goto free_and_return;
 8011f70:	bf00      	nop
 8011f72:	e004      	b.n	8011f7e <ethernet_input+0x106>
        goto free_and_return;
 8011f74:	bf00      	nop
 8011f76:	e002      	b.n	8011f7e <ethernet_input+0x106>
        goto free_and_return;
 8011f78:	bf00      	nop
 8011f7a:	e000      	b.n	8011f7e <ethernet_input+0x106>
        goto free_and_return;
 8011f7c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f7f7 fe6a 	bl	8009c58 <pbuf_free>
  return ERR_OK;
 8011f84:	2300      	movs	r3, #0
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3718      	adds	r7, #24
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}
 8011f8e:	bf00      	nop
 8011f90:	080161cc 	.word	0x080161cc

08011f94 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b086      	sub	sp, #24
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	60f8      	str	r0, [r7, #12]
 8011f9c:	60b9      	str	r1, [r7, #8]
 8011f9e:	607a      	str	r2, [r7, #4]
 8011fa0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8011fa2:	8c3b      	ldrh	r3, [r7, #32]
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7f6 faab 	bl	8008500 <lwip_htons>
 8011faa:	4603      	mov	r3, r0
 8011fac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8011fae:	210e      	movs	r1, #14
 8011fb0:	68b8      	ldr	r0, [r7, #8]
 8011fb2:	f7f7 fdbb 	bl	8009b2c <pbuf_add_header>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d125      	bne.n	8012008 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	8afa      	ldrh	r2, [r7, #22]
 8011fc6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011fc8:	693b      	ldr	r3, [r7, #16]
 8011fca:	2206      	movs	r2, #6
 8011fcc:	6839      	ldr	r1, [r7, #0]
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f000 fb56 	bl	8012680 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	3306      	adds	r3, #6
 8011fd8:	2206      	movs	r2, #6
 8011fda:	6879      	ldr	r1, [r7, #4]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f000 fb4f 	bl	8012680 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011fe8:	2b06      	cmp	r3, #6
 8011fea:	d006      	beq.n	8011ffa <ethernet_output+0x66>
 8011fec:	4b0a      	ldr	r3, [pc, #40]	; (8012018 <ethernet_output+0x84>)
 8011fee:	f44f 7299 	mov.w	r2, #306	; 0x132
 8011ff2:	490a      	ldr	r1, [pc, #40]	; (801201c <ethernet_output+0x88>)
 8011ff4:	480a      	ldr	r0, [pc, #40]	; (8012020 <ethernet_output+0x8c>)
 8011ff6:	f000 fef1 	bl	8012ddc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	699b      	ldr	r3, [r3, #24]
 8011ffe:	68b9      	ldr	r1, [r7, #8]
 8012000:	68f8      	ldr	r0, [r7, #12]
 8012002:	4798      	blx	r3
 8012004:	4603      	mov	r3, r0
 8012006:	e002      	b.n	801200e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012008:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801200a:	f06f 0301 	mvn.w	r3, #1
}
 801200e:	4618      	mov	r0, r3
 8012010:	3718      	adds	r7, #24
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}
 8012016:	bf00      	nop
 8012018:	08015fe8 	.word	0x08015fe8
 801201c:	08016020 	.word	0x08016020
 8012020:	08016054 	.word	0x08016054

08012024 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	2200      	movs	r2, #0
 8012032:	2104      	movs	r1, #4
 8012034:	4618      	mov	r0, r3
 8012036:	f7f2 fe15 	bl	8004c64 <osMessageQueueNew>
 801203a:	4602      	mov	r2, r0
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d102      	bne.n	801204e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8012048:	f04f 33ff 	mov.w	r3, #4294967295
 801204c:	e000      	b.n	8012050 <sys_mbox_new+0x2c>

  return ERR_OK;
 801204e:	2300      	movs	r3, #0
}
 8012050:	4618      	mov	r0, r3
 8012052:	3708      	adds	r7, #8
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b084      	sub	sp, #16
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	6818      	ldr	r0, [r3, #0]
 8012066:	4639      	mov	r1, r7
 8012068:	2300      	movs	r3, #0
 801206a:	2200      	movs	r2, #0
 801206c:	f7f2 fe6e 	bl	8004d4c <osMessageQueuePut>
 8012070:	4603      	mov	r3, r0
 8012072:	2b00      	cmp	r3, #0
 8012074:	d102      	bne.n	801207c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8012076:	2300      	movs	r3, #0
 8012078:	73fb      	strb	r3, [r7, #15]
 801207a:	e001      	b.n	8012080 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801207c:	23ff      	movs	r3, #255	; 0xff
 801207e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012080:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012084:	4618      	mov	r0, r3
 8012086:	3710      	adds	r7, #16
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b086      	sub	sp, #24
 8012090:	af00      	add	r7, sp, #0
 8012092:	60f8      	str	r0, [r7, #12]
 8012094:	60b9      	str	r1, [r7, #8]
 8012096:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8012098:	f7f2 faf4 	bl	8004684 <osKernelGetTickCount>
 801209c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d013      	beq.n	80120cc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	6818      	ldr	r0, [r3, #0]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2200      	movs	r2, #0
 80120ac:	68b9      	ldr	r1, [r7, #8]
 80120ae:	f7f2 fead 	bl	8004e0c <osMessageQueueGet>
 80120b2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d105      	bne.n	80120c6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80120ba:	f7f2 fae3 	bl	8004684 <osKernelGetTickCount>
 80120be:	4602      	mov	r2, r0
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	1ad3      	subs	r3, r2, r3
 80120c4:	e00f      	b.n	80120e6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80120c6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ca:	e00c      	b.n	80120e6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	6818      	ldr	r0, [r3, #0]
 80120d0:	f04f 33ff 	mov.w	r3, #4294967295
 80120d4:	2200      	movs	r2, #0
 80120d6:	68b9      	ldr	r1, [r7, #8]
 80120d8:	f7f2 fe98 	bl	8004e0c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80120dc:	f7f2 fad2 	bl	8004684 <osKernelGetTickCount>
 80120e0:	4602      	mov	r2, r0
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3718      	adds	r7, #24
 80120ea:	46bd      	mov	sp, r7
 80120ec:	bd80      	pop	{r7, pc}

080120ee <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80120ee:	b480      	push	{r7}
 80120f0:	b083      	sub	sp, #12
 80120f2:	af00      	add	r7, sp, #0
 80120f4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d101      	bne.n	8012102 <sys_mbox_valid+0x14>
    return 0;
 80120fe:	2300      	movs	r3, #0
 8012100:	e000      	b.n	8012104 <sys_mbox_valid+0x16>
  else
    return 1;
 8012102:	2301      	movs	r3, #1
}
 8012104:	4618      	mov	r0, r3
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr

08012110 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8012114:	2000      	movs	r0, #0
 8012116:	f7f2 fb78 	bl	800480a <osMutexNew>
 801211a:	4603      	mov	r3, r0
 801211c:	4a01      	ldr	r2, [pc, #4]	; (8012124 <sys_init+0x14>)
 801211e:	6013      	str	r3, [r2, #0]
#endif
}
 8012120:	bf00      	nop
 8012122:	bd80      	pop	{r7, pc}
 8012124:	20011c18 	.word	0x20011c18

08012128 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8012130:	2000      	movs	r0, #0
 8012132:	f7f2 fb6a 	bl	800480a <osMutexNew>
 8012136:	4602      	mov	r2, r0
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d102      	bne.n	801214a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012144:	f04f 33ff 	mov.w	r3, #4294967295
 8012148:	e000      	b.n	801214c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801214a:	2300      	movs	r3, #0
}
 801214c:	4618      	mov	r0, r3
 801214e:	3708      	adds	r7, #8
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f04f 31ff 	mov.w	r1, #4294967295
 8012164:	4618      	mov	r0, r3
 8012166:	f7f2 fbd6 	bl	8004916 <osMutexAcquire>
#endif
}
 801216a:	bf00      	nop
 801216c:	3708      	adds	r7, #8
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}

08012172 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012172:	b580      	push	{r7, lr}
 8012174:	b082      	sub	sp, #8
 8012176:	af00      	add	r7, sp, #0
 8012178:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	4618      	mov	r0, r3
 8012180:	f7f2 fc14 	bl	80049ac <osMutexRelease>
}
 8012184:	bf00      	nop
 8012186:	3708      	adds	r7, #8
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b08e      	sub	sp, #56	; 0x38
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
 8012198:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801219a:	f107 0314 	add.w	r3, r7, #20
 801219e:	2224      	movs	r2, #36	; 0x24
 80121a0:	2100      	movs	r1, #0
 80121a2:	4618      	mov	r0, r3
 80121a4:	f000 fa7a 	bl	801269c <memset>
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	617b      	str	r3, [r7, #20]
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80121b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80121b4:	f107 0314 	add.w	r3, r7, #20
 80121b8:	461a      	mov	r2, r3
 80121ba:	6879      	ldr	r1, [r7, #4]
 80121bc:	68b8      	ldr	r0, [r7, #8]
 80121be:	f7f2 fa76 	bl	80046ae <osThreadNew>
 80121c2:	4603      	mov	r3, r0
#endif
}
 80121c4:	4618      	mov	r0, r3
 80121c6:	3738      	adds	r7, #56	; 0x38
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80121d0:	4b04      	ldr	r3, [pc, #16]	; (80121e4 <sys_arch_protect+0x18>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	f04f 31ff 	mov.w	r1, #4294967295
 80121d8:	4618      	mov	r0, r3
 80121da:	f7f2 fb9c 	bl	8004916 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80121de:	2301      	movs	r3, #1
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	20011c18 	.word	0x20011c18

080121e8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80121f0:	4b04      	ldr	r3, [pc, #16]	; (8012204 <sys_arch_unprotect+0x1c>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7f2 fbd9 	bl	80049ac <osMutexRelease>
}
 80121fa:	bf00      	nop
 80121fc:	3708      	adds	r7, #8
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	20011c18 	.word	0x20011c18

08012208 <__io_putchar>:

/********************** Exported Function Definitions *************************/

QueueHandle_t shell_queue_send;

uint8_t __io_putchar(uint8_t ch){
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	4603      	mov	r3, r0
 8012210:	71fb      	strb	r3, [r7, #7]
	xQueueSend(shell_queue_send,&ch,(TickType_t)100);
 8012212:	4b06      	ldr	r3, [pc, #24]	; (801222c <__io_putchar+0x24>)
 8012214:	6818      	ldr	r0, [r3, #0]
 8012216:	1df9      	adds	r1, r7, #7
 8012218:	2300      	movs	r3, #0
 801221a:	2264      	movs	r2, #100	; 0x64
 801221c:	f7f3 f99a 	bl	8005554 <xQueueGenericSend>
	return ch;
 8012220:	79fb      	ldrb	r3, [r7, #7]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3708      	adds	r7, #8
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}
 801222a:	bf00      	nop
 801222c:	20011c1c 	.word	0x20011c1c

08012230 <fifo_get>:
        return 0;
    }
}

uint8_t fifo_get(fifo_t* p_fifo, void * item)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
    if (!fifo_is_empty(p_fifo)) {
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f000 f815 	bl	801226a <fifo_is_empty>
 8012240:	4603      	mov	r3, r0
 8012242:	2b00      	cmp	r3, #0
 8012244:	d10c      	bne.n	8012260 <fifo_get+0x30>
        fifo_copy_from(p_fifo, item);
 8012246:	6839      	ldr	r1, [r7, #0]
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f000 f81f 	bl	801228c <fifo_copy_from>
        p_fifo->storedbytes -= p_fifo->itemsize;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	691a      	ldr	r2, [r3, #16]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	685b      	ldr	r3, [r3, #4]
 8012256:	1ad2      	subs	r2, r2, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	611a      	str	r2, [r3, #16]
        return 1;
 801225c:	2301      	movs	r3, #1
 801225e:	e000      	b.n	8012262 <fifo_get+0x32>
    } else {
        return 0;
 8012260:	2300      	movs	r3, #0
    }
}
 8012262:	4618      	mov	r0, r3
 8012264:	3708      	adds	r7, #8
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}

0801226a <fifo_is_empty>:
    else
        return 0;
}

uint8_t fifo_is_empty(fifo_t* p_fifo)
{
 801226a:	b480      	push	{r7}
 801226c:	b083      	sub	sp, #12
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes == 0)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	691b      	ldr	r3, [r3, #16]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d101      	bne.n	801227e <fifo_is_empty+0x14>
        return 1;
 801227a:	2301      	movs	r3, #1
 801227c:	e000      	b.n	8012280 <fifo_is_empty+0x16>
    else
        return 0;
 801227e:	2300      	movs	r3, #0
}
 8012280:	4618      	mov	r0, r3
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228a:	4770      	bx	lr

0801228c <fifo_copy_from>:
    return 0;
}

/********************* Internal Function Definitions *************************/
static void fifo_copy_from(fifo_t* p_fifo, void * item)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
    memcpy(item, (uint8_t*)p_fifo->itemspace + p_fifo->readoffset, p_fifo->itemsize);
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	8992      	ldrh	r2, [r2, #12]
 801229e:	1899      	adds	r1, r3, r2
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	685b      	ldr	r3, [r3, #4]
 80122a4:	461a      	mov	r2, r3
 80122a6:	6838      	ldr	r0, [r7, #0]
 80122a8:	f000 f9ea 	bl	8012680 <memcpy>
    p_fifo->readoffset += p_fifo->itemsize;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	899a      	ldrh	r2, [r3, #12]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	b29b      	uxth	r3, r3
 80122b6:	4413      	add	r3, r2
 80122b8:	b29a      	uxth	r2, r3
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	819a      	strh	r2, [r3, #12]
    if (p_fifo->readoffset >= p_fifo->allocatedbytes) {
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	899b      	ldrh	r3, [r3, #12]
 80122c2:	461a      	mov	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	689b      	ldr	r3, [r3, #8]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d302      	bcc.n	80122d2 <fifo_copy_from+0x46>
        p_fifo->readoffset = 0;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2200      	movs	r2, #0
 80122d0:	819a      	strh	r2, [r3, #12]
    }
}
 80122d2:	bf00      	nop
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
	...

080122dc <serial_get_char>:

  return 0;
}


int serial_get_char(uint8_t *c) {
 80122dc:	b580      	push	{r7, lr}
 80122de:	b084      	sub	sp, #16
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
  uint8_t item = 0;
 80122e4:	2300      	movs	r3, #0
 80122e6:	73fb      	strb	r3, [r7, #15]

  if (fifo_is_empty(&shell_fifo) == 1) {
 80122e8:	480d      	ldr	r0, [pc, #52]	; (8012320 <serial_get_char+0x44>)
 80122ea:	f7ff ffbe 	bl	801226a <fifo_is_empty>
 80122ee:	4603      	mov	r3, r0
 80122f0:	2b01      	cmp	r3, #1
 80122f2:	d101      	bne.n	80122f8 <serial_get_char+0x1c>
    return 0;
 80122f4:	2300      	movs	r3, #0
 80122f6:	e00e      	b.n	8012316 <serial_get_char+0x3a>
  }

  if(fifo_get(&shell_fifo, &item) == 1) {
 80122f8:	f107 030f 	add.w	r3, r7, #15
 80122fc:	4619      	mov	r1, r3
 80122fe:	4808      	ldr	r0, [pc, #32]	; (8012320 <serial_get_char+0x44>)
 8012300:	f7ff ff96 	bl	8012230 <fifo_get>
 8012304:	4603      	mov	r3, r0
 8012306:	2b01      	cmp	r3, #1
 8012308:	d104      	bne.n	8012314 <serial_get_char+0x38>
    *c = item;
 801230a:	7bfa      	ldrb	r2, [r7, #15]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	701a      	strb	r2, [r3, #0]
    return 1;
 8012310:	2301      	movs	r3, #1
 8012312:	e000      	b.n	8012316 <serial_get_char+0x3a>
  }

  return 0;
 8012314:	2300      	movs	r3, #0
}
 8012316:	4618      	mov	r0, r3
 8012318:	3710      	adds	r7, #16
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}
 801231e:	bf00      	nop
 8012320:	20011cf0 	.word	0x20011cf0

08012324 <__io_getchar>:
#endif
	return ch;
}

uint8_t __io_getchar(void)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b082      	sub	sp, #8
 8012328:	af00      	add	r7, sp, #0
	uint8_t ch;
  int ret = serial_get_char((uint8_t*)&ch);
 801232a:	1cfb      	adds	r3, r7, #3
 801232c:	4618      	mov	r0, r3
 801232e:	f7ff ffd5 	bl	80122dc <serial_get_char>
 8012332:	6078      	str	r0, [r7, #4]

  return (ret == 1) ? ch : 0;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2b01      	cmp	r3, #1
 8012338:	d101      	bne.n	801233e <__io_getchar+0x1a>
 801233a:	78fb      	ldrb	r3, [r7, #3]
 801233c:	e000      	b.n	8012340 <__io_getchar+0x1c>
 801233e:	2300      	movs	r3, #0
}
 8012340:	4618      	mov	r0, r3
 8012342:	3708      	adds	r7, #8
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <_read>:
    return ch;
}
#elif defined(__GNUC__)

int _read(int file, char *ptr, int len)
{
 8012348:	b590      	push	{r4, r7, lr}
 801234a:	b087      	sub	sp, #28
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8012354:	2300      	movs	r3, #0
 8012356:	617b      	str	r3, [r7, #20]
 8012358:	e009      	b.n	801236e <_read+0x26>
    *ptr++ = __io_getchar();
 801235a:	68bc      	ldr	r4, [r7, #8]
 801235c:	1c63      	adds	r3, r4, #1
 801235e:	60bb      	str	r3, [r7, #8]
 8012360:	f7ff ffe0 	bl	8012324 <__io_getchar>
 8012364:	4603      	mov	r3, r0
 8012366:	7023      	strb	r3, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	3301      	adds	r3, #1
 801236c:	617b      	str	r3, [r7, #20]
 801236e:	697a      	ldr	r2, [r7, #20]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	429a      	cmp	r2, r3
 8012374:	dbf1      	blt.n	801235a <_read+0x12>
  }

  return len;
 8012376:	687b      	ldr	r3, [r7, #4]
}
 8012378:	4618      	mov	r0, r3
 801237a:	371c      	adds	r7, #28
 801237c:	46bd      	mov	sp, r7
 801237e:	bd90      	pop	{r4, r7, pc}

08012380 <_write>:

int _write(int file, char *ptr, int len)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b086      	sub	sp, #24
 8012384:	af00      	add	r7, sp, #0
 8012386:	60f8      	str	r0, [r7, #12]
 8012388:	60b9      	str	r1, [r7, #8]
 801238a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801238c:	2300      	movs	r3, #0
 801238e:	617b      	str	r3, [r7, #20]
 8012390:	e009      	b.n	80123a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	1c5a      	adds	r2, r3, #1
 8012396:	60ba      	str	r2, [r7, #8]
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	4618      	mov	r0, r3
 801239c:	f7ff ff34 	bl	8012208 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	3301      	adds	r3, #1
 80123a4:	617b      	str	r3, [r7, #20]
 80123a6:	697a      	ldr	r2, [r7, #20]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	dbf1      	blt.n	8012392 <_write+0x12>
	}
  return len;
 80123ae:	687b      	ldr	r3, [r7, #4]
}
 80123b0:	4618      	mov	r0, r3
 80123b2:	3718      	adds	r7, #24
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <__assert_func>:
 80123b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123ba:	4614      	mov	r4, r2
 80123bc:	461a      	mov	r2, r3
 80123be:	4b09      	ldr	r3, [pc, #36]	; (80123e4 <__assert_func+0x2c>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	4605      	mov	r5, r0
 80123c4:	68d8      	ldr	r0, [r3, #12]
 80123c6:	b14c      	cbz	r4, 80123dc <__assert_func+0x24>
 80123c8:	4b07      	ldr	r3, [pc, #28]	; (80123e8 <__assert_func+0x30>)
 80123ca:	9100      	str	r1, [sp, #0]
 80123cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80123d0:	4906      	ldr	r1, [pc, #24]	; (80123ec <__assert_func+0x34>)
 80123d2:	462b      	mov	r3, r5
 80123d4:	f000 f8e4 	bl	80125a0 <fiprintf>
 80123d8:	f000 fee8 	bl	80131ac <abort>
 80123dc:	4b04      	ldr	r3, [pc, #16]	; (80123f0 <__assert_func+0x38>)
 80123de:	461c      	mov	r4, r3
 80123e0:	e7f3      	b.n	80123ca <__assert_func+0x12>
 80123e2:	bf00      	nop
 80123e4:	2000001c 	.word	0x2000001c
 80123e8:	080161da 	.word	0x080161da
 80123ec:	080161e7 	.word	0x080161e7
 80123f0:	08016215 	.word	0x08016215

080123f4 <std>:
 80123f4:	2300      	movs	r3, #0
 80123f6:	b510      	push	{r4, lr}
 80123f8:	4604      	mov	r4, r0
 80123fa:	e9c0 3300 	strd	r3, r3, [r0]
 80123fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012402:	6083      	str	r3, [r0, #8]
 8012404:	8181      	strh	r1, [r0, #12]
 8012406:	6643      	str	r3, [r0, #100]	; 0x64
 8012408:	81c2      	strh	r2, [r0, #14]
 801240a:	6183      	str	r3, [r0, #24]
 801240c:	4619      	mov	r1, r3
 801240e:	2208      	movs	r2, #8
 8012410:	305c      	adds	r0, #92	; 0x5c
 8012412:	f000 f943 	bl	801269c <memset>
 8012416:	4b05      	ldr	r3, [pc, #20]	; (801242c <std+0x38>)
 8012418:	6263      	str	r3, [r4, #36]	; 0x24
 801241a:	4b05      	ldr	r3, [pc, #20]	; (8012430 <std+0x3c>)
 801241c:	62a3      	str	r3, [r4, #40]	; 0x28
 801241e:	4b05      	ldr	r3, [pc, #20]	; (8012434 <std+0x40>)
 8012420:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012422:	4b05      	ldr	r3, [pc, #20]	; (8012438 <std+0x44>)
 8012424:	6224      	str	r4, [r4, #32]
 8012426:	6323      	str	r3, [r4, #48]	; 0x30
 8012428:	bd10      	pop	{r4, pc}
 801242a:	bf00      	nop
 801242c:	08012f81 	.word	0x08012f81
 8012430:	08012fa3 	.word	0x08012fa3
 8012434:	08012fdb 	.word	0x08012fdb
 8012438:	08012fff 	.word	0x08012fff

0801243c <_cleanup_r>:
 801243c:	4901      	ldr	r1, [pc, #4]	; (8012444 <_cleanup_r+0x8>)
 801243e:	f000 b8c1 	b.w	80125c4 <_fwalk_reent>
 8012442:	bf00      	nop
 8012444:	080132e9 	.word	0x080132e9

08012448 <__sfmoreglue>:
 8012448:	b570      	push	{r4, r5, r6, lr}
 801244a:	1e4a      	subs	r2, r1, #1
 801244c:	2568      	movs	r5, #104	; 0x68
 801244e:	4355      	muls	r5, r2
 8012450:	460e      	mov	r6, r1
 8012452:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012456:	f000 f979 	bl	801274c <_malloc_r>
 801245a:	4604      	mov	r4, r0
 801245c:	b140      	cbz	r0, 8012470 <__sfmoreglue+0x28>
 801245e:	2100      	movs	r1, #0
 8012460:	e9c0 1600 	strd	r1, r6, [r0]
 8012464:	300c      	adds	r0, #12
 8012466:	60a0      	str	r0, [r4, #8]
 8012468:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801246c:	f000 f916 	bl	801269c <memset>
 8012470:	4620      	mov	r0, r4
 8012472:	bd70      	pop	{r4, r5, r6, pc}

08012474 <__sfp_lock_acquire>:
 8012474:	4801      	ldr	r0, [pc, #4]	; (801247c <__sfp_lock_acquire+0x8>)
 8012476:	f000 b8ea 	b.w	801264e <__retarget_lock_acquire_recursive>
 801247a:	bf00      	nop
 801247c:	20011d0c 	.word	0x20011d0c

08012480 <__sfp_lock_release>:
 8012480:	4801      	ldr	r0, [pc, #4]	; (8012488 <__sfp_lock_release+0x8>)
 8012482:	f000 b8e5 	b.w	8012650 <__retarget_lock_release_recursive>
 8012486:	bf00      	nop
 8012488:	20011d0c 	.word	0x20011d0c

0801248c <__sinit_lock_acquire>:
 801248c:	4801      	ldr	r0, [pc, #4]	; (8012494 <__sinit_lock_acquire+0x8>)
 801248e:	f000 b8de 	b.w	801264e <__retarget_lock_acquire_recursive>
 8012492:	bf00      	nop
 8012494:	20011d07 	.word	0x20011d07

08012498 <__sinit_lock_release>:
 8012498:	4801      	ldr	r0, [pc, #4]	; (80124a0 <__sinit_lock_release+0x8>)
 801249a:	f000 b8d9 	b.w	8012650 <__retarget_lock_release_recursive>
 801249e:	bf00      	nop
 80124a0:	20011d07 	.word	0x20011d07

080124a4 <__sinit>:
 80124a4:	b510      	push	{r4, lr}
 80124a6:	4604      	mov	r4, r0
 80124a8:	f7ff fff0 	bl	801248c <__sinit_lock_acquire>
 80124ac:	69a3      	ldr	r3, [r4, #24]
 80124ae:	b11b      	cbz	r3, 80124b8 <__sinit+0x14>
 80124b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124b4:	f7ff bff0 	b.w	8012498 <__sinit_lock_release>
 80124b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80124bc:	6523      	str	r3, [r4, #80]	; 0x50
 80124be:	4b13      	ldr	r3, [pc, #76]	; (801250c <__sinit+0x68>)
 80124c0:	4a13      	ldr	r2, [pc, #76]	; (8012510 <__sinit+0x6c>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80124c6:	42a3      	cmp	r3, r4
 80124c8:	bf04      	itt	eq
 80124ca:	2301      	moveq	r3, #1
 80124cc:	61a3      	streq	r3, [r4, #24]
 80124ce:	4620      	mov	r0, r4
 80124d0:	f000 f820 	bl	8012514 <__sfp>
 80124d4:	6060      	str	r0, [r4, #4]
 80124d6:	4620      	mov	r0, r4
 80124d8:	f000 f81c 	bl	8012514 <__sfp>
 80124dc:	60a0      	str	r0, [r4, #8]
 80124de:	4620      	mov	r0, r4
 80124e0:	f000 f818 	bl	8012514 <__sfp>
 80124e4:	2200      	movs	r2, #0
 80124e6:	60e0      	str	r0, [r4, #12]
 80124e8:	2104      	movs	r1, #4
 80124ea:	6860      	ldr	r0, [r4, #4]
 80124ec:	f7ff ff82 	bl	80123f4 <std>
 80124f0:	68a0      	ldr	r0, [r4, #8]
 80124f2:	2201      	movs	r2, #1
 80124f4:	2109      	movs	r1, #9
 80124f6:	f7ff ff7d 	bl	80123f4 <std>
 80124fa:	68e0      	ldr	r0, [r4, #12]
 80124fc:	2202      	movs	r2, #2
 80124fe:	2112      	movs	r1, #18
 8012500:	f7ff ff78 	bl	80123f4 <std>
 8012504:	2301      	movs	r3, #1
 8012506:	61a3      	str	r3, [r4, #24]
 8012508:	e7d2      	b.n	80124b0 <__sinit+0xc>
 801250a:	bf00      	nop
 801250c:	08016278 	.word	0x08016278
 8012510:	0801243d 	.word	0x0801243d

08012514 <__sfp>:
 8012514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012516:	4607      	mov	r7, r0
 8012518:	f7ff ffac 	bl	8012474 <__sfp_lock_acquire>
 801251c:	4b1e      	ldr	r3, [pc, #120]	; (8012598 <__sfp+0x84>)
 801251e:	681e      	ldr	r6, [r3, #0]
 8012520:	69b3      	ldr	r3, [r6, #24]
 8012522:	b913      	cbnz	r3, 801252a <__sfp+0x16>
 8012524:	4630      	mov	r0, r6
 8012526:	f7ff ffbd 	bl	80124a4 <__sinit>
 801252a:	3648      	adds	r6, #72	; 0x48
 801252c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012530:	3b01      	subs	r3, #1
 8012532:	d503      	bpl.n	801253c <__sfp+0x28>
 8012534:	6833      	ldr	r3, [r6, #0]
 8012536:	b30b      	cbz	r3, 801257c <__sfp+0x68>
 8012538:	6836      	ldr	r6, [r6, #0]
 801253a:	e7f7      	b.n	801252c <__sfp+0x18>
 801253c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012540:	b9d5      	cbnz	r5, 8012578 <__sfp+0x64>
 8012542:	4b16      	ldr	r3, [pc, #88]	; (801259c <__sfp+0x88>)
 8012544:	60e3      	str	r3, [r4, #12]
 8012546:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801254a:	6665      	str	r5, [r4, #100]	; 0x64
 801254c:	f000 f87e 	bl	801264c <__retarget_lock_init_recursive>
 8012550:	f7ff ff96 	bl	8012480 <__sfp_lock_release>
 8012554:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012558:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801255c:	6025      	str	r5, [r4, #0]
 801255e:	61a5      	str	r5, [r4, #24]
 8012560:	2208      	movs	r2, #8
 8012562:	4629      	mov	r1, r5
 8012564:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012568:	f000 f898 	bl	801269c <memset>
 801256c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012570:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012574:	4620      	mov	r0, r4
 8012576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012578:	3468      	adds	r4, #104	; 0x68
 801257a:	e7d9      	b.n	8012530 <__sfp+0x1c>
 801257c:	2104      	movs	r1, #4
 801257e:	4638      	mov	r0, r7
 8012580:	f7ff ff62 	bl	8012448 <__sfmoreglue>
 8012584:	4604      	mov	r4, r0
 8012586:	6030      	str	r0, [r6, #0]
 8012588:	2800      	cmp	r0, #0
 801258a:	d1d5      	bne.n	8012538 <__sfp+0x24>
 801258c:	f7ff ff78 	bl	8012480 <__sfp_lock_release>
 8012590:	230c      	movs	r3, #12
 8012592:	603b      	str	r3, [r7, #0]
 8012594:	e7ee      	b.n	8012574 <__sfp+0x60>
 8012596:	bf00      	nop
 8012598:	08016278 	.word	0x08016278
 801259c:	ffff0001 	.word	0xffff0001

080125a0 <fiprintf>:
 80125a0:	b40e      	push	{r1, r2, r3}
 80125a2:	b503      	push	{r0, r1, lr}
 80125a4:	4601      	mov	r1, r0
 80125a6:	ab03      	add	r3, sp, #12
 80125a8:	4805      	ldr	r0, [pc, #20]	; (80125c0 <fiprintf+0x20>)
 80125aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80125ae:	6800      	ldr	r0, [r0, #0]
 80125b0:	9301      	str	r3, [sp, #4]
 80125b2:	f000 f94f 	bl	8012854 <_vfiprintf_r>
 80125b6:	b002      	add	sp, #8
 80125b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80125bc:	b003      	add	sp, #12
 80125be:	4770      	bx	lr
 80125c0:	2000001c 	.word	0x2000001c

080125c4 <_fwalk_reent>:
 80125c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125c8:	4606      	mov	r6, r0
 80125ca:	4688      	mov	r8, r1
 80125cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80125d0:	2700      	movs	r7, #0
 80125d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80125d6:	f1b9 0901 	subs.w	r9, r9, #1
 80125da:	d505      	bpl.n	80125e8 <_fwalk_reent+0x24>
 80125dc:	6824      	ldr	r4, [r4, #0]
 80125de:	2c00      	cmp	r4, #0
 80125e0:	d1f7      	bne.n	80125d2 <_fwalk_reent+0xe>
 80125e2:	4638      	mov	r0, r7
 80125e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125e8:	89ab      	ldrh	r3, [r5, #12]
 80125ea:	2b01      	cmp	r3, #1
 80125ec:	d907      	bls.n	80125fe <_fwalk_reent+0x3a>
 80125ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80125f2:	3301      	adds	r3, #1
 80125f4:	d003      	beq.n	80125fe <_fwalk_reent+0x3a>
 80125f6:	4629      	mov	r1, r5
 80125f8:	4630      	mov	r0, r6
 80125fa:	47c0      	blx	r8
 80125fc:	4307      	orrs	r7, r0
 80125fe:	3568      	adds	r5, #104	; 0x68
 8012600:	e7e9      	b.n	80125d6 <_fwalk_reent+0x12>
	...

08012604 <__libc_init_array>:
 8012604:	b570      	push	{r4, r5, r6, lr}
 8012606:	4d0d      	ldr	r5, [pc, #52]	; (801263c <__libc_init_array+0x38>)
 8012608:	4c0d      	ldr	r4, [pc, #52]	; (8012640 <__libc_init_array+0x3c>)
 801260a:	1b64      	subs	r4, r4, r5
 801260c:	10a4      	asrs	r4, r4, #2
 801260e:	2600      	movs	r6, #0
 8012610:	42a6      	cmp	r6, r4
 8012612:	d109      	bne.n	8012628 <__libc_init_array+0x24>
 8012614:	4d0b      	ldr	r5, [pc, #44]	; (8012644 <__libc_init_array+0x40>)
 8012616:	4c0c      	ldr	r4, [pc, #48]	; (8012648 <__libc_init_array+0x44>)
 8012618:	f000 ff9c 	bl	8013554 <_init>
 801261c:	1b64      	subs	r4, r4, r5
 801261e:	10a4      	asrs	r4, r4, #2
 8012620:	2600      	movs	r6, #0
 8012622:	42a6      	cmp	r6, r4
 8012624:	d105      	bne.n	8012632 <__libc_init_array+0x2e>
 8012626:	bd70      	pop	{r4, r5, r6, pc}
 8012628:	f855 3b04 	ldr.w	r3, [r5], #4
 801262c:	4798      	blx	r3
 801262e:	3601      	adds	r6, #1
 8012630:	e7ee      	b.n	8012610 <__libc_init_array+0xc>
 8012632:	f855 3b04 	ldr.w	r3, [r5], #4
 8012636:	4798      	blx	r3
 8012638:	3601      	adds	r6, #1
 801263a:	e7f2      	b.n	8012622 <__libc_init_array+0x1e>
 801263c:	08016330 	.word	0x08016330
 8012640:	08016330 	.word	0x08016330
 8012644:	08016330 	.word	0x08016330
 8012648:	08016334 	.word	0x08016334

0801264c <__retarget_lock_init_recursive>:
 801264c:	4770      	bx	lr

0801264e <__retarget_lock_acquire_recursive>:
 801264e:	4770      	bx	lr

08012650 <__retarget_lock_release_recursive>:
 8012650:	4770      	bx	lr
	...

08012654 <malloc>:
 8012654:	4b02      	ldr	r3, [pc, #8]	; (8012660 <malloc+0xc>)
 8012656:	4601      	mov	r1, r0
 8012658:	6818      	ldr	r0, [r3, #0]
 801265a:	f000 b877 	b.w	801274c <_malloc_r>
 801265e:	bf00      	nop
 8012660:	2000001c 	.word	0x2000001c

08012664 <memcmp>:
 8012664:	b530      	push	{r4, r5, lr}
 8012666:	3901      	subs	r1, #1
 8012668:	2400      	movs	r4, #0
 801266a:	42a2      	cmp	r2, r4
 801266c:	d101      	bne.n	8012672 <memcmp+0xe>
 801266e:	2000      	movs	r0, #0
 8012670:	e005      	b.n	801267e <memcmp+0x1a>
 8012672:	5d03      	ldrb	r3, [r0, r4]
 8012674:	3401      	adds	r4, #1
 8012676:	5d0d      	ldrb	r5, [r1, r4]
 8012678:	42ab      	cmp	r3, r5
 801267a:	d0f6      	beq.n	801266a <memcmp+0x6>
 801267c:	1b58      	subs	r0, r3, r5
 801267e:	bd30      	pop	{r4, r5, pc}

08012680 <memcpy>:
 8012680:	440a      	add	r2, r1
 8012682:	4291      	cmp	r1, r2
 8012684:	f100 33ff 	add.w	r3, r0, #4294967295
 8012688:	d100      	bne.n	801268c <memcpy+0xc>
 801268a:	4770      	bx	lr
 801268c:	b510      	push	{r4, lr}
 801268e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012696:	4291      	cmp	r1, r2
 8012698:	d1f9      	bne.n	801268e <memcpy+0xe>
 801269a:	bd10      	pop	{r4, pc}

0801269c <memset>:
 801269c:	4402      	add	r2, r0
 801269e:	4603      	mov	r3, r0
 80126a0:	4293      	cmp	r3, r2
 80126a2:	d100      	bne.n	80126a6 <memset+0xa>
 80126a4:	4770      	bx	lr
 80126a6:	f803 1b01 	strb.w	r1, [r3], #1
 80126aa:	e7f9      	b.n	80126a0 <memset+0x4>

080126ac <_free_r>:
 80126ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126ae:	2900      	cmp	r1, #0
 80126b0:	d048      	beq.n	8012744 <_free_r+0x98>
 80126b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126b6:	9001      	str	r0, [sp, #4]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	f1a1 0404 	sub.w	r4, r1, #4
 80126be:	bfb8      	it	lt
 80126c0:	18e4      	addlt	r4, r4, r3
 80126c2:	f000 fec3 	bl	801344c <__malloc_lock>
 80126c6:	4a20      	ldr	r2, [pc, #128]	; (8012748 <_free_r+0x9c>)
 80126c8:	9801      	ldr	r0, [sp, #4]
 80126ca:	6813      	ldr	r3, [r2, #0]
 80126cc:	4615      	mov	r5, r2
 80126ce:	b933      	cbnz	r3, 80126de <_free_r+0x32>
 80126d0:	6063      	str	r3, [r4, #4]
 80126d2:	6014      	str	r4, [r2, #0]
 80126d4:	b003      	add	sp, #12
 80126d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126da:	f000 bebd 	b.w	8013458 <__malloc_unlock>
 80126de:	42a3      	cmp	r3, r4
 80126e0:	d90b      	bls.n	80126fa <_free_r+0x4e>
 80126e2:	6821      	ldr	r1, [r4, #0]
 80126e4:	1862      	adds	r2, r4, r1
 80126e6:	4293      	cmp	r3, r2
 80126e8:	bf04      	itt	eq
 80126ea:	681a      	ldreq	r2, [r3, #0]
 80126ec:	685b      	ldreq	r3, [r3, #4]
 80126ee:	6063      	str	r3, [r4, #4]
 80126f0:	bf04      	itt	eq
 80126f2:	1852      	addeq	r2, r2, r1
 80126f4:	6022      	streq	r2, [r4, #0]
 80126f6:	602c      	str	r4, [r5, #0]
 80126f8:	e7ec      	b.n	80126d4 <_free_r+0x28>
 80126fa:	461a      	mov	r2, r3
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	b10b      	cbz	r3, 8012704 <_free_r+0x58>
 8012700:	42a3      	cmp	r3, r4
 8012702:	d9fa      	bls.n	80126fa <_free_r+0x4e>
 8012704:	6811      	ldr	r1, [r2, #0]
 8012706:	1855      	adds	r5, r2, r1
 8012708:	42a5      	cmp	r5, r4
 801270a:	d10b      	bne.n	8012724 <_free_r+0x78>
 801270c:	6824      	ldr	r4, [r4, #0]
 801270e:	4421      	add	r1, r4
 8012710:	1854      	adds	r4, r2, r1
 8012712:	42a3      	cmp	r3, r4
 8012714:	6011      	str	r1, [r2, #0]
 8012716:	d1dd      	bne.n	80126d4 <_free_r+0x28>
 8012718:	681c      	ldr	r4, [r3, #0]
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	6053      	str	r3, [r2, #4]
 801271e:	4421      	add	r1, r4
 8012720:	6011      	str	r1, [r2, #0]
 8012722:	e7d7      	b.n	80126d4 <_free_r+0x28>
 8012724:	d902      	bls.n	801272c <_free_r+0x80>
 8012726:	230c      	movs	r3, #12
 8012728:	6003      	str	r3, [r0, #0]
 801272a:	e7d3      	b.n	80126d4 <_free_r+0x28>
 801272c:	6825      	ldr	r5, [r4, #0]
 801272e:	1961      	adds	r1, r4, r5
 8012730:	428b      	cmp	r3, r1
 8012732:	bf04      	itt	eq
 8012734:	6819      	ldreq	r1, [r3, #0]
 8012736:	685b      	ldreq	r3, [r3, #4]
 8012738:	6063      	str	r3, [r4, #4]
 801273a:	bf04      	itt	eq
 801273c:	1949      	addeq	r1, r1, r5
 801273e:	6021      	streq	r1, [r4, #0]
 8012740:	6054      	str	r4, [r2, #4]
 8012742:	e7c7      	b.n	80126d4 <_free_r+0x28>
 8012744:	b003      	add	sp, #12
 8012746:	bd30      	pop	{r4, r5, pc}
 8012748:	2000b248 	.word	0x2000b248

0801274c <_malloc_r>:
 801274c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801274e:	1ccd      	adds	r5, r1, #3
 8012750:	f025 0503 	bic.w	r5, r5, #3
 8012754:	3508      	adds	r5, #8
 8012756:	2d0c      	cmp	r5, #12
 8012758:	bf38      	it	cc
 801275a:	250c      	movcc	r5, #12
 801275c:	2d00      	cmp	r5, #0
 801275e:	4606      	mov	r6, r0
 8012760:	db01      	blt.n	8012766 <_malloc_r+0x1a>
 8012762:	42a9      	cmp	r1, r5
 8012764:	d903      	bls.n	801276e <_malloc_r+0x22>
 8012766:	230c      	movs	r3, #12
 8012768:	6033      	str	r3, [r6, #0]
 801276a:	2000      	movs	r0, #0
 801276c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801276e:	f000 fe6d 	bl	801344c <__malloc_lock>
 8012772:	4921      	ldr	r1, [pc, #132]	; (80127f8 <_malloc_r+0xac>)
 8012774:	680a      	ldr	r2, [r1, #0]
 8012776:	4614      	mov	r4, r2
 8012778:	b99c      	cbnz	r4, 80127a2 <_malloc_r+0x56>
 801277a:	4f20      	ldr	r7, [pc, #128]	; (80127fc <_malloc_r+0xb0>)
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	b923      	cbnz	r3, 801278a <_malloc_r+0x3e>
 8012780:	4621      	mov	r1, r4
 8012782:	4630      	mov	r0, r6
 8012784:	f000 fbec 	bl	8012f60 <_sbrk_r>
 8012788:	6038      	str	r0, [r7, #0]
 801278a:	4629      	mov	r1, r5
 801278c:	4630      	mov	r0, r6
 801278e:	f000 fbe7 	bl	8012f60 <_sbrk_r>
 8012792:	1c43      	adds	r3, r0, #1
 8012794:	d123      	bne.n	80127de <_malloc_r+0x92>
 8012796:	230c      	movs	r3, #12
 8012798:	6033      	str	r3, [r6, #0]
 801279a:	4630      	mov	r0, r6
 801279c:	f000 fe5c 	bl	8013458 <__malloc_unlock>
 80127a0:	e7e3      	b.n	801276a <_malloc_r+0x1e>
 80127a2:	6823      	ldr	r3, [r4, #0]
 80127a4:	1b5b      	subs	r3, r3, r5
 80127a6:	d417      	bmi.n	80127d8 <_malloc_r+0x8c>
 80127a8:	2b0b      	cmp	r3, #11
 80127aa:	d903      	bls.n	80127b4 <_malloc_r+0x68>
 80127ac:	6023      	str	r3, [r4, #0]
 80127ae:	441c      	add	r4, r3
 80127b0:	6025      	str	r5, [r4, #0]
 80127b2:	e004      	b.n	80127be <_malloc_r+0x72>
 80127b4:	6863      	ldr	r3, [r4, #4]
 80127b6:	42a2      	cmp	r2, r4
 80127b8:	bf0c      	ite	eq
 80127ba:	600b      	streq	r3, [r1, #0]
 80127bc:	6053      	strne	r3, [r2, #4]
 80127be:	4630      	mov	r0, r6
 80127c0:	f000 fe4a 	bl	8013458 <__malloc_unlock>
 80127c4:	f104 000b 	add.w	r0, r4, #11
 80127c8:	1d23      	adds	r3, r4, #4
 80127ca:	f020 0007 	bic.w	r0, r0, #7
 80127ce:	1ac2      	subs	r2, r0, r3
 80127d0:	d0cc      	beq.n	801276c <_malloc_r+0x20>
 80127d2:	1a1b      	subs	r3, r3, r0
 80127d4:	50a3      	str	r3, [r4, r2]
 80127d6:	e7c9      	b.n	801276c <_malloc_r+0x20>
 80127d8:	4622      	mov	r2, r4
 80127da:	6864      	ldr	r4, [r4, #4]
 80127dc:	e7cc      	b.n	8012778 <_malloc_r+0x2c>
 80127de:	1cc4      	adds	r4, r0, #3
 80127e0:	f024 0403 	bic.w	r4, r4, #3
 80127e4:	42a0      	cmp	r0, r4
 80127e6:	d0e3      	beq.n	80127b0 <_malloc_r+0x64>
 80127e8:	1a21      	subs	r1, r4, r0
 80127ea:	4630      	mov	r0, r6
 80127ec:	f000 fbb8 	bl	8012f60 <_sbrk_r>
 80127f0:	3001      	adds	r0, #1
 80127f2:	d1dd      	bne.n	80127b0 <_malloc_r+0x64>
 80127f4:	e7cf      	b.n	8012796 <_malloc_r+0x4a>
 80127f6:	bf00      	nop
 80127f8:	2000b248 	.word	0x2000b248
 80127fc:	2000b24c 	.word	0x2000b24c

08012800 <__sfputc_r>:
 8012800:	6893      	ldr	r3, [r2, #8]
 8012802:	3b01      	subs	r3, #1
 8012804:	2b00      	cmp	r3, #0
 8012806:	b410      	push	{r4}
 8012808:	6093      	str	r3, [r2, #8]
 801280a:	da08      	bge.n	801281e <__sfputc_r+0x1e>
 801280c:	6994      	ldr	r4, [r2, #24]
 801280e:	42a3      	cmp	r3, r4
 8012810:	db01      	blt.n	8012816 <__sfputc_r+0x16>
 8012812:	290a      	cmp	r1, #10
 8012814:	d103      	bne.n	801281e <__sfputc_r+0x1e>
 8012816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801281a:	f000 bbf5 	b.w	8013008 <__swbuf_r>
 801281e:	6813      	ldr	r3, [r2, #0]
 8012820:	1c58      	adds	r0, r3, #1
 8012822:	6010      	str	r0, [r2, #0]
 8012824:	7019      	strb	r1, [r3, #0]
 8012826:	4608      	mov	r0, r1
 8012828:	f85d 4b04 	ldr.w	r4, [sp], #4
 801282c:	4770      	bx	lr

0801282e <__sfputs_r>:
 801282e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012830:	4606      	mov	r6, r0
 8012832:	460f      	mov	r7, r1
 8012834:	4614      	mov	r4, r2
 8012836:	18d5      	adds	r5, r2, r3
 8012838:	42ac      	cmp	r4, r5
 801283a:	d101      	bne.n	8012840 <__sfputs_r+0x12>
 801283c:	2000      	movs	r0, #0
 801283e:	e007      	b.n	8012850 <__sfputs_r+0x22>
 8012840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012844:	463a      	mov	r2, r7
 8012846:	4630      	mov	r0, r6
 8012848:	f7ff ffda 	bl	8012800 <__sfputc_r>
 801284c:	1c43      	adds	r3, r0, #1
 801284e:	d1f3      	bne.n	8012838 <__sfputs_r+0xa>
 8012850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012854 <_vfiprintf_r>:
 8012854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012858:	460d      	mov	r5, r1
 801285a:	b09d      	sub	sp, #116	; 0x74
 801285c:	4614      	mov	r4, r2
 801285e:	4698      	mov	r8, r3
 8012860:	4606      	mov	r6, r0
 8012862:	b118      	cbz	r0, 801286c <_vfiprintf_r+0x18>
 8012864:	6983      	ldr	r3, [r0, #24]
 8012866:	b90b      	cbnz	r3, 801286c <_vfiprintf_r+0x18>
 8012868:	f7ff fe1c 	bl	80124a4 <__sinit>
 801286c:	4b89      	ldr	r3, [pc, #548]	; (8012a94 <_vfiprintf_r+0x240>)
 801286e:	429d      	cmp	r5, r3
 8012870:	d11b      	bne.n	80128aa <_vfiprintf_r+0x56>
 8012872:	6875      	ldr	r5, [r6, #4]
 8012874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012876:	07d9      	lsls	r1, r3, #31
 8012878:	d405      	bmi.n	8012886 <_vfiprintf_r+0x32>
 801287a:	89ab      	ldrh	r3, [r5, #12]
 801287c:	059a      	lsls	r2, r3, #22
 801287e:	d402      	bmi.n	8012886 <_vfiprintf_r+0x32>
 8012880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012882:	f7ff fee4 	bl	801264e <__retarget_lock_acquire_recursive>
 8012886:	89ab      	ldrh	r3, [r5, #12]
 8012888:	071b      	lsls	r3, r3, #28
 801288a:	d501      	bpl.n	8012890 <_vfiprintf_r+0x3c>
 801288c:	692b      	ldr	r3, [r5, #16]
 801288e:	b9eb      	cbnz	r3, 80128cc <_vfiprintf_r+0x78>
 8012890:	4629      	mov	r1, r5
 8012892:	4630      	mov	r0, r6
 8012894:	f000 fc1c 	bl	80130d0 <__swsetup_r>
 8012898:	b1c0      	cbz	r0, 80128cc <_vfiprintf_r+0x78>
 801289a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801289c:	07dc      	lsls	r4, r3, #31
 801289e:	d50e      	bpl.n	80128be <_vfiprintf_r+0x6a>
 80128a0:	f04f 30ff 	mov.w	r0, #4294967295
 80128a4:	b01d      	add	sp, #116	; 0x74
 80128a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128aa:	4b7b      	ldr	r3, [pc, #492]	; (8012a98 <_vfiprintf_r+0x244>)
 80128ac:	429d      	cmp	r5, r3
 80128ae:	d101      	bne.n	80128b4 <_vfiprintf_r+0x60>
 80128b0:	68b5      	ldr	r5, [r6, #8]
 80128b2:	e7df      	b.n	8012874 <_vfiprintf_r+0x20>
 80128b4:	4b79      	ldr	r3, [pc, #484]	; (8012a9c <_vfiprintf_r+0x248>)
 80128b6:	429d      	cmp	r5, r3
 80128b8:	bf08      	it	eq
 80128ba:	68f5      	ldreq	r5, [r6, #12]
 80128bc:	e7da      	b.n	8012874 <_vfiprintf_r+0x20>
 80128be:	89ab      	ldrh	r3, [r5, #12]
 80128c0:	0598      	lsls	r0, r3, #22
 80128c2:	d4ed      	bmi.n	80128a0 <_vfiprintf_r+0x4c>
 80128c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80128c6:	f7ff fec3 	bl	8012650 <__retarget_lock_release_recursive>
 80128ca:	e7e9      	b.n	80128a0 <_vfiprintf_r+0x4c>
 80128cc:	2300      	movs	r3, #0
 80128ce:	9309      	str	r3, [sp, #36]	; 0x24
 80128d0:	2320      	movs	r3, #32
 80128d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80128d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80128da:	2330      	movs	r3, #48	; 0x30
 80128dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012aa0 <_vfiprintf_r+0x24c>
 80128e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80128e4:	f04f 0901 	mov.w	r9, #1
 80128e8:	4623      	mov	r3, r4
 80128ea:	469a      	mov	sl, r3
 80128ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128f0:	b10a      	cbz	r2, 80128f6 <_vfiprintf_r+0xa2>
 80128f2:	2a25      	cmp	r2, #37	; 0x25
 80128f4:	d1f9      	bne.n	80128ea <_vfiprintf_r+0x96>
 80128f6:	ebba 0b04 	subs.w	fp, sl, r4
 80128fa:	d00b      	beq.n	8012914 <_vfiprintf_r+0xc0>
 80128fc:	465b      	mov	r3, fp
 80128fe:	4622      	mov	r2, r4
 8012900:	4629      	mov	r1, r5
 8012902:	4630      	mov	r0, r6
 8012904:	f7ff ff93 	bl	801282e <__sfputs_r>
 8012908:	3001      	adds	r0, #1
 801290a:	f000 80aa 	beq.w	8012a62 <_vfiprintf_r+0x20e>
 801290e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012910:	445a      	add	r2, fp
 8012912:	9209      	str	r2, [sp, #36]	; 0x24
 8012914:	f89a 3000 	ldrb.w	r3, [sl]
 8012918:	2b00      	cmp	r3, #0
 801291a:	f000 80a2 	beq.w	8012a62 <_vfiprintf_r+0x20e>
 801291e:	2300      	movs	r3, #0
 8012920:	f04f 32ff 	mov.w	r2, #4294967295
 8012924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012928:	f10a 0a01 	add.w	sl, sl, #1
 801292c:	9304      	str	r3, [sp, #16]
 801292e:	9307      	str	r3, [sp, #28]
 8012930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012934:	931a      	str	r3, [sp, #104]	; 0x68
 8012936:	4654      	mov	r4, sl
 8012938:	2205      	movs	r2, #5
 801293a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801293e:	4858      	ldr	r0, [pc, #352]	; (8012aa0 <_vfiprintf_r+0x24c>)
 8012940:	f7ed fc46 	bl	80001d0 <memchr>
 8012944:	9a04      	ldr	r2, [sp, #16]
 8012946:	b9d8      	cbnz	r0, 8012980 <_vfiprintf_r+0x12c>
 8012948:	06d1      	lsls	r1, r2, #27
 801294a:	bf44      	itt	mi
 801294c:	2320      	movmi	r3, #32
 801294e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012952:	0713      	lsls	r3, r2, #28
 8012954:	bf44      	itt	mi
 8012956:	232b      	movmi	r3, #43	; 0x2b
 8012958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801295c:	f89a 3000 	ldrb.w	r3, [sl]
 8012960:	2b2a      	cmp	r3, #42	; 0x2a
 8012962:	d015      	beq.n	8012990 <_vfiprintf_r+0x13c>
 8012964:	9a07      	ldr	r2, [sp, #28]
 8012966:	4654      	mov	r4, sl
 8012968:	2000      	movs	r0, #0
 801296a:	f04f 0c0a 	mov.w	ip, #10
 801296e:	4621      	mov	r1, r4
 8012970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012974:	3b30      	subs	r3, #48	; 0x30
 8012976:	2b09      	cmp	r3, #9
 8012978:	d94e      	bls.n	8012a18 <_vfiprintf_r+0x1c4>
 801297a:	b1b0      	cbz	r0, 80129aa <_vfiprintf_r+0x156>
 801297c:	9207      	str	r2, [sp, #28]
 801297e:	e014      	b.n	80129aa <_vfiprintf_r+0x156>
 8012980:	eba0 0308 	sub.w	r3, r0, r8
 8012984:	fa09 f303 	lsl.w	r3, r9, r3
 8012988:	4313      	orrs	r3, r2
 801298a:	9304      	str	r3, [sp, #16]
 801298c:	46a2      	mov	sl, r4
 801298e:	e7d2      	b.n	8012936 <_vfiprintf_r+0xe2>
 8012990:	9b03      	ldr	r3, [sp, #12]
 8012992:	1d19      	adds	r1, r3, #4
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	9103      	str	r1, [sp, #12]
 8012998:	2b00      	cmp	r3, #0
 801299a:	bfbb      	ittet	lt
 801299c:	425b      	neglt	r3, r3
 801299e:	f042 0202 	orrlt.w	r2, r2, #2
 80129a2:	9307      	strge	r3, [sp, #28]
 80129a4:	9307      	strlt	r3, [sp, #28]
 80129a6:	bfb8      	it	lt
 80129a8:	9204      	strlt	r2, [sp, #16]
 80129aa:	7823      	ldrb	r3, [r4, #0]
 80129ac:	2b2e      	cmp	r3, #46	; 0x2e
 80129ae:	d10c      	bne.n	80129ca <_vfiprintf_r+0x176>
 80129b0:	7863      	ldrb	r3, [r4, #1]
 80129b2:	2b2a      	cmp	r3, #42	; 0x2a
 80129b4:	d135      	bne.n	8012a22 <_vfiprintf_r+0x1ce>
 80129b6:	9b03      	ldr	r3, [sp, #12]
 80129b8:	1d1a      	adds	r2, r3, #4
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	9203      	str	r2, [sp, #12]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	bfb8      	it	lt
 80129c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80129c6:	3402      	adds	r4, #2
 80129c8:	9305      	str	r3, [sp, #20]
 80129ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012ab0 <_vfiprintf_r+0x25c>
 80129ce:	7821      	ldrb	r1, [r4, #0]
 80129d0:	2203      	movs	r2, #3
 80129d2:	4650      	mov	r0, sl
 80129d4:	f7ed fbfc 	bl	80001d0 <memchr>
 80129d8:	b140      	cbz	r0, 80129ec <_vfiprintf_r+0x198>
 80129da:	2340      	movs	r3, #64	; 0x40
 80129dc:	eba0 000a 	sub.w	r0, r0, sl
 80129e0:	fa03 f000 	lsl.w	r0, r3, r0
 80129e4:	9b04      	ldr	r3, [sp, #16]
 80129e6:	4303      	orrs	r3, r0
 80129e8:	3401      	adds	r4, #1
 80129ea:	9304      	str	r3, [sp, #16]
 80129ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129f0:	482c      	ldr	r0, [pc, #176]	; (8012aa4 <_vfiprintf_r+0x250>)
 80129f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80129f6:	2206      	movs	r2, #6
 80129f8:	f7ed fbea 	bl	80001d0 <memchr>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	d03f      	beq.n	8012a80 <_vfiprintf_r+0x22c>
 8012a00:	4b29      	ldr	r3, [pc, #164]	; (8012aa8 <_vfiprintf_r+0x254>)
 8012a02:	bb1b      	cbnz	r3, 8012a4c <_vfiprintf_r+0x1f8>
 8012a04:	9b03      	ldr	r3, [sp, #12]
 8012a06:	3307      	adds	r3, #7
 8012a08:	f023 0307 	bic.w	r3, r3, #7
 8012a0c:	3308      	adds	r3, #8
 8012a0e:	9303      	str	r3, [sp, #12]
 8012a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a12:	443b      	add	r3, r7
 8012a14:	9309      	str	r3, [sp, #36]	; 0x24
 8012a16:	e767      	b.n	80128e8 <_vfiprintf_r+0x94>
 8012a18:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a1c:	460c      	mov	r4, r1
 8012a1e:	2001      	movs	r0, #1
 8012a20:	e7a5      	b.n	801296e <_vfiprintf_r+0x11a>
 8012a22:	2300      	movs	r3, #0
 8012a24:	3401      	adds	r4, #1
 8012a26:	9305      	str	r3, [sp, #20]
 8012a28:	4619      	mov	r1, r3
 8012a2a:	f04f 0c0a 	mov.w	ip, #10
 8012a2e:	4620      	mov	r0, r4
 8012a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a34:	3a30      	subs	r2, #48	; 0x30
 8012a36:	2a09      	cmp	r2, #9
 8012a38:	d903      	bls.n	8012a42 <_vfiprintf_r+0x1ee>
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d0c5      	beq.n	80129ca <_vfiprintf_r+0x176>
 8012a3e:	9105      	str	r1, [sp, #20]
 8012a40:	e7c3      	b.n	80129ca <_vfiprintf_r+0x176>
 8012a42:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a46:	4604      	mov	r4, r0
 8012a48:	2301      	movs	r3, #1
 8012a4a:	e7f0      	b.n	8012a2e <_vfiprintf_r+0x1da>
 8012a4c:	ab03      	add	r3, sp, #12
 8012a4e:	9300      	str	r3, [sp, #0]
 8012a50:	462a      	mov	r2, r5
 8012a52:	4b16      	ldr	r3, [pc, #88]	; (8012aac <_vfiprintf_r+0x258>)
 8012a54:	a904      	add	r1, sp, #16
 8012a56:	4630      	mov	r0, r6
 8012a58:	f3af 8000 	nop.w
 8012a5c:	4607      	mov	r7, r0
 8012a5e:	1c78      	adds	r0, r7, #1
 8012a60:	d1d6      	bne.n	8012a10 <_vfiprintf_r+0x1bc>
 8012a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012a64:	07d9      	lsls	r1, r3, #31
 8012a66:	d405      	bmi.n	8012a74 <_vfiprintf_r+0x220>
 8012a68:	89ab      	ldrh	r3, [r5, #12]
 8012a6a:	059a      	lsls	r2, r3, #22
 8012a6c:	d402      	bmi.n	8012a74 <_vfiprintf_r+0x220>
 8012a6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012a70:	f7ff fdee 	bl	8012650 <__retarget_lock_release_recursive>
 8012a74:	89ab      	ldrh	r3, [r5, #12]
 8012a76:	065b      	lsls	r3, r3, #25
 8012a78:	f53f af12 	bmi.w	80128a0 <_vfiprintf_r+0x4c>
 8012a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012a7e:	e711      	b.n	80128a4 <_vfiprintf_r+0x50>
 8012a80:	ab03      	add	r3, sp, #12
 8012a82:	9300      	str	r3, [sp, #0]
 8012a84:	462a      	mov	r2, r5
 8012a86:	4b09      	ldr	r3, [pc, #36]	; (8012aac <_vfiprintf_r+0x258>)
 8012a88:	a904      	add	r1, sp, #16
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	f000 f880 	bl	8012b90 <_printf_i>
 8012a90:	e7e4      	b.n	8012a5c <_vfiprintf_r+0x208>
 8012a92:	bf00      	nop
 8012a94:	08016238 	.word	0x08016238
 8012a98:	08016258 	.word	0x08016258
 8012a9c:	08016218 	.word	0x08016218
 8012aa0:	0801627c 	.word	0x0801627c
 8012aa4:	08016286 	.word	0x08016286
 8012aa8:	00000000 	.word	0x00000000
 8012aac:	0801282f 	.word	0x0801282f
 8012ab0:	08016282 	.word	0x08016282

08012ab4 <_printf_common>:
 8012ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ab8:	4616      	mov	r6, r2
 8012aba:	4699      	mov	r9, r3
 8012abc:	688a      	ldr	r2, [r1, #8]
 8012abe:	690b      	ldr	r3, [r1, #16]
 8012ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ac4:	4293      	cmp	r3, r2
 8012ac6:	bfb8      	it	lt
 8012ac8:	4613      	movlt	r3, r2
 8012aca:	6033      	str	r3, [r6, #0]
 8012acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ad0:	4607      	mov	r7, r0
 8012ad2:	460c      	mov	r4, r1
 8012ad4:	b10a      	cbz	r2, 8012ada <_printf_common+0x26>
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	6033      	str	r3, [r6, #0]
 8012ada:	6823      	ldr	r3, [r4, #0]
 8012adc:	0699      	lsls	r1, r3, #26
 8012ade:	bf42      	ittt	mi
 8012ae0:	6833      	ldrmi	r3, [r6, #0]
 8012ae2:	3302      	addmi	r3, #2
 8012ae4:	6033      	strmi	r3, [r6, #0]
 8012ae6:	6825      	ldr	r5, [r4, #0]
 8012ae8:	f015 0506 	ands.w	r5, r5, #6
 8012aec:	d106      	bne.n	8012afc <_printf_common+0x48>
 8012aee:	f104 0a19 	add.w	sl, r4, #25
 8012af2:	68e3      	ldr	r3, [r4, #12]
 8012af4:	6832      	ldr	r2, [r6, #0]
 8012af6:	1a9b      	subs	r3, r3, r2
 8012af8:	42ab      	cmp	r3, r5
 8012afa:	dc26      	bgt.n	8012b4a <_printf_common+0x96>
 8012afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012b00:	1e13      	subs	r3, r2, #0
 8012b02:	6822      	ldr	r2, [r4, #0]
 8012b04:	bf18      	it	ne
 8012b06:	2301      	movne	r3, #1
 8012b08:	0692      	lsls	r2, r2, #26
 8012b0a:	d42b      	bmi.n	8012b64 <_printf_common+0xb0>
 8012b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b10:	4649      	mov	r1, r9
 8012b12:	4638      	mov	r0, r7
 8012b14:	47c0      	blx	r8
 8012b16:	3001      	adds	r0, #1
 8012b18:	d01e      	beq.n	8012b58 <_printf_common+0xa4>
 8012b1a:	6823      	ldr	r3, [r4, #0]
 8012b1c:	68e5      	ldr	r5, [r4, #12]
 8012b1e:	6832      	ldr	r2, [r6, #0]
 8012b20:	f003 0306 	and.w	r3, r3, #6
 8012b24:	2b04      	cmp	r3, #4
 8012b26:	bf08      	it	eq
 8012b28:	1aad      	subeq	r5, r5, r2
 8012b2a:	68a3      	ldr	r3, [r4, #8]
 8012b2c:	6922      	ldr	r2, [r4, #16]
 8012b2e:	bf0c      	ite	eq
 8012b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012b34:	2500      	movne	r5, #0
 8012b36:	4293      	cmp	r3, r2
 8012b38:	bfc4      	itt	gt
 8012b3a:	1a9b      	subgt	r3, r3, r2
 8012b3c:	18ed      	addgt	r5, r5, r3
 8012b3e:	2600      	movs	r6, #0
 8012b40:	341a      	adds	r4, #26
 8012b42:	42b5      	cmp	r5, r6
 8012b44:	d11a      	bne.n	8012b7c <_printf_common+0xc8>
 8012b46:	2000      	movs	r0, #0
 8012b48:	e008      	b.n	8012b5c <_printf_common+0xa8>
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	4652      	mov	r2, sl
 8012b4e:	4649      	mov	r1, r9
 8012b50:	4638      	mov	r0, r7
 8012b52:	47c0      	blx	r8
 8012b54:	3001      	adds	r0, #1
 8012b56:	d103      	bne.n	8012b60 <_printf_common+0xac>
 8012b58:	f04f 30ff 	mov.w	r0, #4294967295
 8012b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b60:	3501      	adds	r5, #1
 8012b62:	e7c6      	b.n	8012af2 <_printf_common+0x3e>
 8012b64:	18e1      	adds	r1, r4, r3
 8012b66:	1c5a      	adds	r2, r3, #1
 8012b68:	2030      	movs	r0, #48	; 0x30
 8012b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012b6e:	4422      	add	r2, r4
 8012b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012b78:	3302      	adds	r3, #2
 8012b7a:	e7c7      	b.n	8012b0c <_printf_common+0x58>
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	4622      	mov	r2, r4
 8012b80:	4649      	mov	r1, r9
 8012b82:	4638      	mov	r0, r7
 8012b84:	47c0      	blx	r8
 8012b86:	3001      	adds	r0, #1
 8012b88:	d0e6      	beq.n	8012b58 <_printf_common+0xa4>
 8012b8a:	3601      	adds	r6, #1
 8012b8c:	e7d9      	b.n	8012b42 <_printf_common+0x8e>
	...

08012b90 <_printf_i>:
 8012b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b94:	460c      	mov	r4, r1
 8012b96:	4691      	mov	r9, r2
 8012b98:	7e27      	ldrb	r7, [r4, #24]
 8012b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b9c:	2f78      	cmp	r7, #120	; 0x78
 8012b9e:	4680      	mov	r8, r0
 8012ba0:	469a      	mov	sl, r3
 8012ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012ba6:	d807      	bhi.n	8012bb8 <_printf_i+0x28>
 8012ba8:	2f62      	cmp	r7, #98	; 0x62
 8012baa:	d80a      	bhi.n	8012bc2 <_printf_i+0x32>
 8012bac:	2f00      	cmp	r7, #0
 8012bae:	f000 80d8 	beq.w	8012d62 <_printf_i+0x1d2>
 8012bb2:	2f58      	cmp	r7, #88	; 0x58
 8012bb4:	f000 80a3 	beq.w	8012cfe <_printf_i+0x16e>
 8012bb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012bc0:	e03a      	b.n	8012c38 <_printf_i+0xa8>
 8012bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012bc6:	2b15      	cmp	r3, #21
 8012bc8:	d8f6      	bhi.n	8012bb8 <_printf_i+0x28>
 8012bca:	a001      	add	r0, pc, #4	; (adr r0, 8012bd0 <_printf_i+0x40>)
 8012bcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012bd0:	08012c29 	.word	0x08012c29
 8012bd4:	08012c3d 	.word	0x08012c3d
 8012bd8:	08012bb9 	.word	0x08012bb9
 8012bdc:	08012bb9 	.word	0x08012bb9
 8012be0:	08012bb9 	.word	0x08012bb9
 8012be4:	08012bb9 	.word	0x08012bb9
 8012be8:	08012c3d 	.word	0x08012c3d
 8012bec:	08012bb9 	.word	0x08012bb9
 8012bf0:	08012bb9 	.word	0x08012bb9
 8012bf4:	08012bb9 	.word	0x08012bb9
 8012bf8:	08012bb9 	.word	0x08012bb9
 8012bfc:	08012d49 	.word	0x08012d49
 8012c00:	08012c6d 	.word	0x08012c6d
 8012c04:	08012d2b 	.word	0x08012d2b
 8012c08:	08012bb9 	.word	0x08012bb9
 8012c0c:	08012bb9 	.word	0x08012bb9
 8012c10:	08012d6b 	.word	0x08012d6b
 8012c14:	08012bb9 	.word	0x08012bb9
 8012c18:	08012c6d 	.word	0x08012c6d
 8012c1c:	08012bb9 	.word	0x08012bb9
 8012c20:	08012bb9 	.word	0x08012bb9
 8012c24:	08012d33 	.word	0x08012d33
 8012c28:	680b      	ldr	r3, [r1, #0]
 8012c2a:	1d1a      	adds	r2, r3, #4
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	600a      	str	r2, [r1, #0]
 8012c30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c38:	2301      	movs	r3, #1
 8012c3a:	e0a3      	b.n	8012d84 <_printf_i+0x1f4>
 8012c3c:	6825      	ldr	r5, [r4, #0]
 8012c3e:	6808      	ldr	r0, [r1, #0]
 8012c40:	062e      	lsls	r6, r5, #24
 8012c42:	f100 0304 	add.w	r3, r0, #4
 8012c46:	d50a      	bpl.n	8012c5e <_printf_i+0xce>
 8012c48:	6805      	ldr	r5, [r0, #0]
 8012c4a:	600b      	str	r3, [r1, #0]
 8012c4c:	2d00      	cmp	r5, #0
 8012c4e:	da03      	bge.n	8012c58 <_printf_i+0xc8>
 8012c50:	232d      	movs	r3, #45	; 0x2d
 8012c52:	426d      	negs	r5, r5
 8012c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c58:	485e      	ldr	r0, [pc, #376]	; (8012dd4 <_printf_i+0x244>)
 8012c5a:	230a      	movs	r3, #10
 8012c5c:	e019      	b.n	8012c92 <_printf_i+0x102>
 8012c5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012c62:	6805      	ldr	r5, [r0, #0]
 8012c64:	600b      	str	r3, [r1, #0]
 8012c66:	bf18      	it	ne
 8012c68:	b22d      	sxthne	r5, r5
 8012c6a:	e7ef      	b.n	8012c4c <_printf_i+0xbc>
 8012c6c:	680b      	ldr	r3, [r1, #0]
 8012c6e:	6825      	ldr	r5, [r4, #0]
 8012c70:	1d18      	adds	r0, r3, #4
 8012c72:	6008      	str	r0, [r1, #0]
 8012c74:	0628      	lsls	r0, r5, #24
 8012c76:	d501      	bpl.n	8012c7c <_printf_i+0xec>
 8012c78:	681d      	ldr	r5, [r3, #0]
 8012c7a:	e002      	b.n	8012c82 <_printf_i+0xf2>
 8012c7c:	0669      	lsls	r1, r5, #25
 8012c7e:	d5fb      	bpl.n	8012c78 <_printf_i+0xe8>
 8012c80:	881d      	ldrh	r5, [r3, #0]
 8012c82:	4854      	ldr	r0, [pc, #336]	; (8012dd4 <_printf_i+0x244>)
 8012c84:	2f6f      	cmp	r7, #111	; 0x6f
 8012c86:	bf0c      	ite	eq
 8012c88:	2308      	moveq	r3, #8
 8012c8a:	230a      	movne	r3, #10
 8012c8c:	2100      	movs	r1, #0
 8012c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012c92:	6866      	ldr	r6, [r4, #4]
 8012c94:	60a6      	str	r6, [r4, #8]
 8012c96:	2e00      	cmp	r6, #0
 8012c98:	bfa2      	ittt	ge
 8012c9a:	6821      	ldrge	r1, [r4, #0]
 8012c9c:	f021 0104 	bicge.w	r1, r1, #4
 8012ca0:	6021      	strge	r1, [r4, #0]
 8012ca2:	b90d      	cbnz	r5, 8012ca8 <_printf_i+0x118>
 8012ca4:	2e00      	cmp	r6, #0
 8012ca6:	d04d      	beq.n	8012d44 <_printf_i+0x1b4>
 8012ca8:	4616      	mov	r6, r2
 8012caa:	fbb5 f1f3 	udiv	r1, r5, r3
 8012cae:	fb03 5711 	mls	r7, r3, r1, r5
 8012cb2:	5dc7      	ldrb	r7, [r0, r7]
 8012cb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012cb8:	462f      	mov	r7, r5
 8012cba:	42bb      	cmp	r3, r7
 8012cbc:	460d      	mov	r5, r1
 8012cbe:	d9f4      	bls.n	8012caa <_printf_i+0x11a>
 8012cc0:	2b08      	cmp	r3, #8
 8012cc2:	d10b      	bne.n	8012cdc <_printf_i+0x14c>
 8012cc4:	6823      	ldr	r3, [r4, #0]
 8012cc6:	07df      	lsls	r7, r3, #31
 8012cc8:	d508      	bpl.n	8012cdc <_printf_i+0x14c>
 8012cca:	6923      	ldr	r3, [r4, #16]
 8012ccc:	6861      	ldr	r1, [r4, #4]
 8012cce:	4299      	cmp	r1, r3
 8012cd0:	bfde      	ittt	le
 8012cd2:	2330      	movle	r3, #48	; 0x30
 8012cd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012cd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012cdc:	1b92      	subs	r2, r2, r6
 8012cde:	6122      	str	r2, [r4, #16]
 8012ce0:	f8cd a000 	str.w	sl, [sp]
 8012ce4:	464b      	mov	r3, r9
 8012ce6:	aa03      	add	r2, sp, #12
 8012ce8:	4621      	mov	r1, r4
 8012cea:	4640      	mov	r0, r8
 8012cec:	f7ff fee2 	bl	8012ab4 <_printf_common>
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	d14c      	bne.n	8012d8e <_printf_i+0x1fe>
 8012cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf8:	b004      	add	sp, #16
 8012cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cfe:	4835      	ldr	r0, [pc, #212]	; (8012dd4 <_printf_i+0x244>)
 8012d00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012d04:	6823      	ldr	r3, [r4, #0]
 8012d06:	680e      	ldr	r6, [r1, #0]
 8012d08:	061f      	lsls	r7, r3, #24
 8012d0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8012d0e:	600e      	str	r6, [r1, #0]
 8012d10:	d514      	bpl.n	8012d3c <_printf_i+0x1ac>
 8012d12:	07d9      	lsls	r1, r3, #31
 8012d14:	bf44      	itt	mi
 8012d16:	f043 0320 	orrmi.w	r3, r3, #32
 8012d1a:	6023      	strmi	r3, [r4, #0]
 8012d1c:	b91d      	cbnz	r5, 8012d26 <_printf_i+0x196>
 8012d1e:	6823      	ldr	r3, [r4, #0]
 8012d20:	f023 0320 	bic.w	r3, r3, #32
 8012d24:	6023      	str	r3, [r4, #0]
 8012d26:	2310      	movs	r3, #16
 8012d28:	e7b0      	b.n	8012c8c <_printf_i+0xfc>
 8012d2a:	6823      	ldr	r3, [r4, #0]
 8012d2c:	f043 0320 	orr.w	r3, r3, #32
 8012d30:	6023      	str	r3, [r4, #0]
 8012d32:	2378      	movs	r3, #120	; 0x78
 8012d34:	4828      	ldr	r0, [pc, #160]	; (8012dd8 <_printf_i+0x248>)
 8012d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012d3a:	e7e3      	b.n	8012d04 <_printf_i+0x174>
 8012d3c:	065e      	lsls	r6, r3, #25
 8012d3e:	bf48      	it	mi
 8012d40:	b2ad      	uxthmi	r5, r5
 8012d42:	e7e6      	b.n	8012d12 <_printf_i+0x182>
 8012d44:	4616      	mov	r6, r2
 8012d46:	e7bb      	b.n	8012cc0 <_printf_i+0x130>
 8012d48:	680b      	ldr	r3, [r1, #0]
 8012d4a:	6826      	ldr	r6, [r4, #0]
 8012d4c:	6960      	ldr	r0, [r4, #20]
 8012d4e:	1d1d      	adds	r5, r3, #4
 8012d50:	600d      	str	r5, [r1, #0]
 8012d52:	0635      	lsls	r5, r6, #24
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	d501      	bpl.n	8012d5c <_printf_i+0x1cc>
 8012d58:	6018      	str	r0, [r3, #0]
 8012d5a:	e002      	b.n	8012d62 <_printf_i+0x1d2>
 8012d5c:	0671      	lsls	r1, r6, #25
 8012d5e:	d5fb      	bpl.n	8012d58 <_printf_i+0x1c8>
 8012d60:	8018      	strh	r0, [r3, #0]
 8012d62:	2300      	movs	r3, #0
 8012d64:	6123      	str	r3, [r4, #16]
 8012d66:	4616      	mov	r6, r2
 8012d68:	e7ba      	b.n	8012ce0 <_printf_i+0x150>
 8012d6a:	680b      	ldr	r3, [r1, #0]
 8012d6c:	1d1a      	adds	r2, r3, #4
 8012d6e:	600a      	str	r2, [r1, #0]
 8012d70:	681e      	ldr	r6, [r3, #0]
 8012d72:	6862      	ldr	r2, [r4, #4]
 8012d74:	2100      	movs	r1, #0
 8012d76:	4630      	mov	r0, r6
 8012d78:	f7ed fa2a 	bl	80001d0 <memchr>
 8012d7c:	b108      	cbz	r0, 8012d82 <_printf_i+0x1f2>
 8012d7e:	1b80      	subs	r0, r0, r6
 8012d80:	6060      	str	r0, [r4, #4]
 8012d82:	6863      	ldr	r3, [r4, #4]
 8012d84:	6123      	str	r3, [r4, #16]
 8012d86:	2300      	movs	r3, #0
 8012d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d8c:	e7a8      	b.n	8012ce0 <_printf_i+0x150>
 8012d8e:	6923      	ldr	r3, [r4, #16]
 8012d90:	4632      	mov	r2, r6
 8012d92:	4649      	mov	r1, r9
 8012d94:	4640      	mov	r0, r8
 8012d96:	47d0      	blx	sl
 8012d98:	3001      	adds	r0, #1
 8012d9a:	d0ab      	beq.n	8012cf4 <_printf_i+0x164>
 8012d9c:	6823      	ldr	r3, [r4, #0]
 8012d9e:	079b      	lsls	r3, r3, #30
 8012da0:	d413      	bmi.n	8012dca <_printf_i+0x23a>
 8012da2:	68e0      	ldr	r0, [r4, #12]
 8012da4:	9b03      	ldr	r3, [sp, #12]
 8012da6:	4298      	cmp	r0, r3
 8012da8:	bfb8      	it	lt
 8012daa:	4618      	movlt	r0, r3
 8012dac:	e7a4      	b.n	8012cf8 <_printf_i+0x168>
 8012dae:	2301      	movs	r3, #1
 8012db0:	4632      	mov	r2, r6
 8012db2:	4649      	mov	r1, r9
 8012db4:	4640      	mov	r0, r8
 8012db6:	47d0      	blx	sl
 8012db8:	3001      	adds	r0, #1
 8012dba:	d09b      	beq.n	8012cf4 <_printf_i+0x164>
 8012dbc:	3501      	adds	r5, #1
 8012dbe:	68e3      	ldr	r3, [r4, #12]
 8012dc0:	9903      	ldr	r1, [sp, #12]
 8012dc2:	1a5b      	subs	r3, r3, r1
 8012dc4:	42ab      	cmp	r3, r5
 8012dc6:	dcf2      	bgt.n	8012dae <_printf_i+0x21e>
 8012dc8:	e7eb      	b.n	8012da2 <_printf_i+0x212>
 8012dca:	2500      	movs	r5, #0
 8012dcc:	f104 0619 	add.w	r6, r4, #25
 8012dd0:	e7f5      	b.n	8012dbe <_printf_i+0x22e>
 8012dd2:	bf00      	nop
 8012dd4:	0801628d 	.word	0x0801628d
 8012dd8:	0801629e 	.word	0x0801629e

08012ddc <iprintf>:
 8012ddc:	b40f      	push	{r0, r1, r2, r3}
 8012dde:	4b0a      	ldr	r3, [pc, #40]	; (8012e08 <iprintf+0x2c>)
 8012de0:	b513      	push	{r0, r1, r4, lr}
 8012de2:	681c      	ldr	r4, [r3, #0]
 8012de4:	b124      	cbz	r4, 8012df0 <iprintf+0x14>
 8012de6:	69a3      	ldr	r3, [r4, #24]
 8012de8:	b913      	cbnz	r3, 8012df0 <iprintf+0x14>
 8012dea:	4620      	mov	r0, r4
 8012dec:	f7ff fb5a 	bl	80124a4 <__sinit>
 8012df0:	ab05      	add	r3, sp, #20
 8012df2:	9a04      	ldr	r2, [sp, #16]
 8012df4:	68a1      	ldr	r1, [r4, #8]
 8012df6:	9301      	str	r3, [sp, #4]
 8012df8:	4620      	mov	r0, r4
 8012dfa:	f7ff fd2b 	bl	8012854 <_vfiprintf_r>
 8012dfe:	b002      	add	sp, #8
 8012e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e04:	b004      	add	sp, #16
 8012e06:	4770      	bx	lr
 8012e08:	2000001c 	.word	0x2000001c

08012e0c <rand>:
 8012e0c:	4b17      	ldr	r3, [pc, #92]	; (8012e6c <rand+0x60>)
 8012e0e:	b510      	push	{r4, lr}
 8012e10:	681c      	ldr	r4, [r3, #0]
 8012e12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012e14:	b9b3      	cbnz	r3, 8012e44 <rand+0x38>
 8012e16:	2018      	movs	r0, #24
 8012e18:	f7ff fc1c 	bl	8012654 <malloc>
 8012e1c:	63a0      	str	r0, [r4, #56]	; 0x38
 8012e1e:	b928      	cbnz	r0, 8012e2c <rand+0x20>
 8012e20:	4602      	mov	r2, r0
 8012e22:	4b13      	ldr	r3, [pc, #76]	; (8012e70 <rand+0x64>)
 8012e24:	4813      	ldr	r0, [pc, #76]	; (8012e74 <rand+0x68>)
 8012e26:	214e      	movs	r1, #78	; 0x4e
 8012e28:	f7ff fac6 	bl	80123b8 <__assert_func>
 8012e2c:	4a12      	ldr	r2, [pc, #72]	; (8012e78 <rand+0x6c>)
 8012e2e:	4b13      	ldr	r3, [pc, #76]	; (8012e7c <rand+0x70>)
 8012e30:	e9c0 2300 	strd	r2, r3, [r0]
 8012e34:	4b12      	ldr	r3, [pc, #72]	; (8012e80 <rand+0x74>)
 8012e36:	6083      	str	r3, [r0, #8]
 8012e38:	230b      	movs	r3, #11
 8012e3a:	8183      	strh	r3, [r0, #12]
 8012e3c:	2201      	movs	r2, #1
 8012e3e:	2300      	movs	r3, #0
 8012e40:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8012e44:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012e46:	480f      	ldr	r0, [pc, #60]	; (8012e84 <rand+0x78>)
 8012e48:	690a      	ldr	r2, [r1, #16]
 8012e4a:	694b      	ldr	r3, [r1, #20]
 8012e4c:	4c0e      	ldr	r4, [pc, #56]	; (8012e88 <rand+0x7c>)
 8012e4e:	4350      	muls	r0, r2
 8012e50:	fb04 0003 	mla	r0, r4, r3, r0
 8012e54:	fba2 3404 	umull	r3, r4, r2, r4
 8012e58:	1c5a      	adds	r2, r3, #1
 8012e5a:	4404      	add	r4, r0
 8012e5c:	f144 0000 	adc.w	r0, r4, #0
 8012e60:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8012e64:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012e68:	bd10      	pop	{r4, pc}
 8012e6a:	bf00      	nop
 8012e6c:	2000001c 	.word	0x2000001c
 8012e70:	080162af 	.word	0x080162af
 8012e74:	080162c6 	.word	0x080162c6
 8012e78:	abcd330e 	.word	0xabcd330e
 8012e7c:	e66d1234 	.word	0xe66d1234
 8012e80:	0005deec 	.word	0x0005deec
 8012e84:	5851f42d 	.word	0x5851f42d
 8012e88:	4c957f2d 	.word	0x4c957f2d

08012e8c <cleanup_glue>:
 8012e8c:	b538      	push	{r3, r4, r5, lr}
 8012e8e:	460c      	mov	r4, r1
 8012e90:	6809      	ldr	r1, [r1, #0]
 8012e92:	4605      	mov	r5, r0
 8012e94:	b109      	cbz	r1, 8012e9a <cleanup_glue+0xe>
 8012e96:	f7ff fff9 	bl	8012e8c <cleanup_glue>
 8012e9a:	4621      	mov	r1, r4
 8012e9c:	4628      	mov	r0, r5
 8012e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ea2:	f7ff bc03 	b.w	80126ac <_free_r>
	...

08012ea8 <_reclaim_reent>:
 8012ea8:	4b2c      	ldr	r3, [pc, #176]	; (8012f5c <_reclaim_reent+0xb4>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	4283      	cmp	r3, r0
 8012eae:	b570      	push	{r4, r5, r6, lr}
 8012eb0:	4604      	mov	r4, r0
 8012eb2:	d051      	beq.n	8012f58 <_reclaim_reent+0xb0>
 8012eb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012eb6:	b143      	cbz	r3, 8012eca <_reclaim_reent+0x22>
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d14a      	bne.n	8012f54 <_reclaim_reent+0xac>
 8012ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ec0:	6819      	ldr	r1, [r3, #0]
 8012ec2:	b111      	cbz	r1, 8012eca <_reclaim_reent+0x22>
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f7ff fbf1 	bl	80126ac <_free_r>
 8012eca:	6961      	ldr	r1, [r4, #20]
 8012ecc:	b111      	cbz	r1, 8012ed4 <_reclaim_reent+0x2c>
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f7ff fbec 	bl	80126ac <_free_r>
 8012ed4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012ed6:	b111      	cbz	r1, 8012ede <_reclaim_reent+0x36>
 8012ed8:	4620      	mov	r0, r4
 8012eda:	f7ff fbe7 	bl	80126ac <_free_r>
 8012ede:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012ee0:	b111      	cbz	r1, 8012ee8 <_reclaim_reent+0x40>
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	f7ff fbe2 	bl	80126ac <_free_r>
 8012ee8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012eea:	b111      	cbz	r1, 8012ef2 <_reclaim_reent+0x4a>
 8012eec:	4620      	mov	r0, r4
 8012eee:	f7ff fbdd 	bl	80126ac <_free_r>
 8012ef2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012ef4:	b111      	cbz	r1, 8012efc <_reclaim_reent+0x54>
 8012ef6:	4620      	mov	r0, r4
 8012ef8:	f7ff fbd8 	bl	80126ac <_free_r>
 8012efc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012efe:	b111      	cbz	r1, 8012f06 <_reclaim_reent+0x5e>
 8012f00:	4620      	mov	r0, r4
 8012f02:	f7ff fbd3 	bl	80126ac <_free_r>
 8012f06:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012f08:	b111      	cbz	r1, 8012f10 <_reclaim_reent+0x68>
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	f7ff fbce 	bl	80126ac <_free_r>
 8012f10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f12:	b111      	cbz	r1, 8012f1a <_reclaim_reent+0x72>
 8012f14:	4620      	mov	r0, r4
 8012f16:	f7ff fbc9 	bl	80126ac <_free_r>
 8012f1a:	69a3      	ldr	r3, [r4, #24]
 8012f1c:	b1e3      	cbz	r3, 8012f58 <_reclaim_reent+0xb0>
 8012f1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012f20:	4620      	mov	r0, r4
 8012f22:	4798      	blx	r3
 8012f24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8012f26:	b1b9      	cbz	r1, 8012f58 <_reclaim_reent+0xb0>
 8012f28:	4620      	mov	r0, r4
 8012f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f2e:	f7ff bfad 	b.w	8012e8c <cleanup_glue>
 8012f32:	5949      	ldr	r1, [r1, r5]
 8012f34:	b941      	cbnz	r1, 8012f48 <_reclaim_reent+0xa0>
 8012f36:	3504      	adds	r5, #4
 8012f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f3a:	2d80      	cmp	r5, #128	; 0x80
 8012f3c:	68d9      	ldr	r1, [r3, #12]
 8012f3e:	d1f8      	bne.n	8012f32 <_reclaim_reent+0x8a>
 8012f40:	4620      	mov	r0, r4
 8012f42:	f7ff fbb3 	bl	80126ac <_free_r>
 8012f46:	e7ba      	b.n	8012ebe <_reclaim_reent+0x16>
 8012f48:	680e      	ldr	r6, [r1, #0]
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f7ff fbae 	bl	80126ac <_free_r>
 8012f50:	4631      	mov	r1, r6
 8012f52:	e7ef      	b.n	8012f34 <_reclaim_reent+0x8c>
 8012f54:	2500      	movs	r5, #0
 8012f56:	e7ef      	b.n	8012f38 <_reclaim_reent+0x90>
 8012f58:	bd70      	pop	{r4, r5, r6, pc}
 8012f5a:	bf00      	nop
 8012f5c:	2000001c 	.word	0x2000001c

08012f60 <_sbrk_r>:
 8012f60:	b538      	push	{r3, r4, r5, lr}
 8012f62:	4d06      	ldr	r5, [pc, #24]	; (8012f7c <_sbrk_r+0x1c>)
 8012f64:	2300      	movs	r3, #0
 8012f66:	4604      	mov	r4, r0
 8012f68:	4608      	mov	r0, r1
 8012f6a:	602b      	str	r3, [r5, #0]
 8012f6c:	f7ed feda 	bl	8000d24 <_sbrk>
 8012f70:	1c43      	adds	r3, r0, #1
 8012f72:	d102      	bne.n	8012f7a <_sbrk_r+0x1a>
 8012f74:	682b      	ldr	r3, [r5, #0]
 8012f76:	b103      	cbz	r3, 8012f7a <_sbrk_r+0x1a>
 8012f78:	6023      	str	r3, [r4, #0]
 8012f7a:	bd38      	pop	{r3, r4, r5, pc}
 8012f7c:	20011c14 	.word	0x20011c14

08012f80 <__sread>:
 8012f80:	b510      	push	{r4, lr}
 8012f82:	460c      	mov	r4, r1
 8012f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f88:	f000 fa6c 	bl	8013464 <_read_r>
 8012f8c:	2800      	cmp	r0, #0
 8012f8e:	bfab      	itete	ge
 8012f90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f92:	89a3      	ldrhlt	r3, [r4, #12]
 8012f94:	181b      	addge	r3, r3, r0
 8012f96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f9a:	bfac      	ite	ge
 8012f9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f9e:	81a3      	strhlt	r3, [r4, #12]
 8012fa0:	bd10      	pop	{r4, pc}

08012fa2 <__swrite>:
 8012fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fa6:	461f      	mov	r7, r3
 8012fa8:	898b      	ldrh	r3, [r1, #12]
 8012faa:	05db      	lsls	r3, r3, #23
 8012fac:	4605      	mov	r5, r0
 8012fae:	460c      	mov	r4, r1
 8012fb0:	4616      	mov	r6, r2
 8012fb2:	d505      	bpl.n	8012fc0 <__swrite+0x1e>
 8012fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fb8:	2302      	movs	r3, #2
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f000 f9d0 	bl	8013360 <_lseek_r>
 8012fc0:	89a3      	ldrh	r3, [r4, #12]
 8012fc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012fca:	81a3      	strh	r3, [r4, #12]
 8012fcc:	4632      	mov	r2, r6
 8012fce:	463b      	mov	r3, r7
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fd6:	f000 b869 	b.w	80130ac <_write_r>

08012fda <__sseek>:
 8012fda:	b510      	push	{r4, lr}
 8012fdc:	460c      	mov	r4, r1
 8012fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fe2:	f000 f9bd 	bl	8013360 <_lseek_r>
 8012fe6:	1c43      	adds	r3, r0, #1
 8012fe8:	89a3      	ldrh	r3, [r4, #12]
 8012fea:	bf15      	itete	ne
 8012fec:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012ff2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ff6:	81a3      	strheq	r3, [r4, #12]
 8012ff8:	bf18      	it	ne
 8012ffa:	81a3      	strhne	r3, [r4, #12]
 8012ffc:	bd10      	pop	{r4, pc}

08012ffe <__sclose>:
 8012ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013002:	f000 b8db 	b.w	80131bc <_close_r>
	...

08013008 <__swbuf_r>:
 8013008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801300a:	460e      	mov	r6, r1
 801300c:	4614      	mov	r4, r2
 801300e:	4605      	mov	r5, r0
 8013010:	b118      	cbz	r0, 801301a <__swbuf_r+0x12>
 8013012:	6983      	ldr	r3, [r0, #24]
 8013014:	b90b      	cbnz	r3, 801301a <__swbuf_r+0x12>
 8013016:	f7ff fa45 	bl	80124a4 <__sinit>
 801301a:	4b21      	ldr	r3, [pc, #132]	; (80130a0 <__swbuf_r+0x98>)
 801301c:	429c      	cmp	r4, r3
 801301e:	d12b      	bne.n	8013078 <__swbuf_r+0x70>
 8013020:	686c      	ldr	r4, [r5, #4]
 8013022:	69a3      	ldr	r3, [r4, #24]
 8013024:	60a3      	str	r3, [r4, #8]
 8013026:	89a3      	ldrh	r3, [r4, #12]
 8013028:	071a      	lsls	r2, r3, #28
 801302a:	d52f      	bpl.n	801308c <__swbuf_r+0x84>
 801302c:	6923      	ldr	r3, [r4, #16]
 801302e:	b36b      	cbz	r3, 801308c <__swbuf_r+0x84>
 8013030:	6923      	ldr	r3, [r4, #16]
 8013032:	6820      	ldr	r0, [r4, #0]
 8013034:	1ac0      	subs	r0, r0, r3
 8013036:	6963      	ldr	r3, [r4, #20]
 8013038:	b2f6      	uxtb	r6, r6
 801303a:	4283      	cmp	r3, r0
 801303c:	4637      	mov	r7, r6
 801303e:	dc04      	bgt.n	801304a <__swbuf_r+0x42>
 8013040:	4621      	mov	r1, r4
 8013042:	4628      	mov	r0, r5
 8013044:	f000 f950 	bl	80132e8 <_fflush_r>
 8013048:	bb30      	cbnz	r0, 8013098 <__swbuf_r+0x90>
 801304a:	68a3      	ldr	r3, [r4, #8]
 801304c:	3b01      	subs	r3, #1
 801304e:	60a3      	str	r3, [r4, #8]
 8013050:	6823      	ldr	r3, [r4, #0]
 8013052:	1c5a      	adds	r2, r3, #1
 8013054:	6022      	str	r2, [r4, #0]
 8013056:	701e      	strb	r6, [r3, #0]
 8013058:	6963      	ldr	r3, [r4, #20]
 801305a:	3001      	adds	r0, #1
 801305c:	4283      	cmp	r3, r0
 801305e:	d004      	beq.n	801306a <__swbuf_r+0x62>
 8013060:	89a3      	ldrh	r3, [r4, #12]
 8013062:	07db      	lsls	r3, r3, #31
 8013064:	d506      	bpl.n	8013074 <__swbuf_r+0x6c>
 8013066:	2e0a      	cmp	r6, #10
 8013068:	d104      	bne.n	8013074 <__swbuf_r+0x6c>
 801306a:	4621      	mov	r1, r4
 801306c:	4628      	mov	r0, r5
 801306e:	f000 f93b 	bl	80132e8 <_fflush_r>
 8013072:	b988      	cbnz	r0, 8013098 <__swbuf_r+0x90>
 8013074:	4638      	mov	r0, r7
 8013076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013078:	4b0a      	ldr	r3, [pc, #40]	; (80130a4 <__swbuf_r+0x9c>)
 801307a:	429c      	cmp	r4, r3
 801307c:	d101      	bne.n	8013082 <__swbuf_r+0x7a>
 801307e:	68ac      	ldr	r4, [r5, #8]
 8013080:	e7cf      	b.n	8013022 <__swbuf_r+0x1a>
 8013082:	4b09      	ldr	r3, [pc, #36]	; (80130a8 <__swbuf_r+0xa0>)
 8013084:	429c      	cmp	r4, r3
 8013086:	bf08      	it	eq
 8013088:	68ec      	ldreq	r4, [r5, #12]
 801308a:	e7ca      	b.n	8013022 <__swbuf_r+0x1a>
 801308c:	4621      	mov	r1, r4
 801308e:	4628      	mov	r0, r5
 8013090:	f000 f81e 	bl	80130d0 <__swsetup_r>
 8013094:	2800      	cmp	r0, #0
 8013096:	d0cb      	beq.n	8013030 <__swbuf_r+0x28>
 8013098:	f04f 37ff 	mov.w	r7, #4294967295
 801309c:	e7ea      	b.n	8013074 <__swbuf_r+0x6c>
 801309e:	bf00      	nop
 80130a0:	08016238 	.word	0x08016238
 80130a4:	08016258 	.word	0x08016258
 80130a8:	08016218 	.word	0x08016218

080130ac <_write_r>:
 80130ac:	b538      	push	{r3, r4, r5, lr}
 80130ae:	4d07      	ldr	r5, [pc, #28]	; (80130cc <_write_r+0x20>)
 80130b0:	4604      	mov	r4, r0
 80130b2:	4608      	mov	r0, r1
 80130b4:	4611      	mov	r1, r2
 80130b6:	2200      	movs	r2, #0
 80130b8:	602a      	str	r2, [r5, #0]
 80130ba:	461a      	mov	r2, r3
 80130bc:	f7ff f960 	bl	8012380 <_write>
 80130c0:	1c43      	adds	r3, r0, #1
 80130c2:	d102      	bne.n	80130ca <_write_r+0x1e>
 80130c4:	682b      	ldr	r3, [r5, #0]
 80130c6:	b103      	cbz	r3, 80130ca <_write_r+0x1e>
 80130c8:	6023      	str	r3, [r4, #0]
 80130ca:	bd38      	pop	{r3, r4, r5, pc}
 80130cc:	20011c14 	.word	0x20011c14

080130d0 <__swsetup_r>:
 80130d0:	4b32      	ldr	r3, [pc, #200]	; (801319c <__swsetup_r+0xcc>)
 80130d2:	b570      	push	{r4, r5, r6, lr}
 80130d4:	681d      	ldr	r5, [r3, #0]
 80130d6:	4606      	mov	r6, r0
 80130d8:	460c      	mov	r4, r1
 80130da:	b125      	cbz	r5, 80130e6 <__swsetup_r+0x16>
 80130dc:	69ab      	ldr	r3, [r5, #24]
 80130de:	b913      	cbnz	r3, 80130e6 <__swsetup_r+0x16>
 80130e0:	4628      	mov	r0, r5
 80130e2:	f7ff f9df 	bl	80124a4 <__sinit>
 80130e6:	4b2e      	ldr	r3, [pc, #184]	; (80131a0 <__swsetup_r+0xd0>)
 80130e8:	429c      	cmp	r4, r3
 80130ea:	d10f      	bne.n	801310c <__swsetup_r+0x3c>
 80130ec:	686c      	ldr	r4, [r5, #4]
 80130ee:	89a3      	ldrh	r3, [r4, #12]
 80130f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80130f4:	0719      	lsls	r1, r3, #28
 80130f6:	d42c      	bmi.n	8013152 <__swsetup_r+0x82>
 80130f8:	06dd      	lsls	r5, r3, #27
 80130fa:	d411      	bmi.n	8013120 <__swsetup_r+0x50>
 80130fc:	2309      	movs	r3, #9
 80130fe:	6033      	str	r3, [r6, #0]
 8013100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013104:	81a3      	strh	r3, [r4, #12]
 8013106:	f04f 30ff 	mov.w	r0, #4294967295
 801310a:	e03e      	b.n	801318a <__swsetup_r+0xba>
 801310c:	4b25      	ldr	r3, [pc, #148]	; (80131a4 <__swsetup_r+0xd4>)
 801310e:	429c      	cmp	r4, r3
 8013110:	d101      	bne.n	8013116 <__swsetup_r+0x46>
 8013112:	68ac      	ldr	r4, [r5, #8]
 8013114:	e7eb      	b.n	80130ee <__swsetup_r+0x1e>
 8013116:	4b24      	ldr	r3, [pc, #144]	; (80131a8 <__swsetup_r+0xd8>)
 8013118:	429c      	cmp	r4, r3
 801311a:	bf08      	it	eq
 801311c:	68ec      	ldreq	r4, [r5, #12]
 801311e:	e7e6      	b.n	80130ee <__swsetup_r+0x1e>
 8013120:	0758      	lsls	r0, r3, #29
 8013122:	d512      	bpl.n	801314a <__swsetup_r+0x7a>
 8013124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013126:	b141      	cbz	r1, 801313a <__swsetup_r+0x6a>
 8013128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801312c:	4299      	cmp	r1, r3
 801312e:	d002      	beq.n	8013136 <__swsetup_r+0x66>
 8013130:	4630      	mov	r0, r6
 8013132:	f7ff fabb 	bl	80126ac <_free_r>
 8013136:	2300      	movs	r3, #0
 8013138:	6363      	str	r3, [r4, #52]	; 0x34
 801313a:	89a3      	ldrh	r3, [r4, #12]
 801313c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013140:	81a3      	strh	r3, [r4, #12]
 8013142:	2300      	movs	r3, #0
 8013144:	6063      	str	r3, [r4, #4]
 8013146:	6923      	ldr	r3, [r4, #16]
 8013148:	6023      	str	r3, [r4, #0]
 801314a:	89a3      	ldrh	r3, [r4, #12]
 801314c:	f043 0308 	orr.w	r3, r3, #8
 8013150:	81a3      	strh	r3, [r4, #12]
 8013152:	6923      	ldr	r3, [r4, #16]
 8013154:	b94b      	cbnz	r3, 801316a <__swsetup_r+0x9a>
 8013156:	89a3      	ldrh	r3, [r4, #12]
 8013158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801315c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013160:	d003      	beq.n	801316a <__swsetup_r+0x9a>
 8013162:	4621      	mov	r1, r4
 8013164:	4630      	mov	r0, r6
 8013166:	f000 f931 	bl	80133cc <__smakebuf_r>
 801316a:	89a0      	ldrh	r0, [r4, #12]
 801316c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013170:	f010 0301 	ands.w	r3, r0, #1
 8013174:	d00a      	beq.n	801318c <__swsetup_r+0xbc>
 8013176:	2300      	movs	r3, #0
 8013178:	60a3      	str	r3, [r4, #8]
 801317a:	6963      	ldr	r3, [r4, #20]
 801317c:	425b      	negs	r3, r3
 801317e:	61a3      	str	r3, [r4, #24]
 8013180:	6923      	ldr	r3, [r4, #16]
 8013182:	b943      	cbnz	r3, 8013196 <__swsetup_r+0xc6>
 8013184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013188:	d1ba      	bne.n	8013100 <__swsetup_r+0x30>
 801318a:	bd70      	pop	{r4, r5, r6, pc}
 801318c:	0781      	lsls	r1, r0, #30
 801318e:	bf58      	it	pl
 8013190:	6963      	ldrpl	r3, [r4, #20]
 8013192:	60a3      	str	r3, [r4, #8]
 8013194:	e7f4      	b.n	8013180 <__swsetup_r+0xb0>
 8013196:	2000      	movs	r0, #0
 8013198:	e7f7      	b.n	801318a <__swsetup_r+0xba>
 801319a:	bf00      	nop
 801319c:	2000001c 	.word	0x2000001c
 80131a0:	08016238 	.word	0x08016238
 80131a4:	08016258 	.word	0x08016258
 80131a8:	08016218 	.word	0x08016218

080131ac <abort>:
 80131ac:	b508      	push	{r3, lr}
 80131ae:	2006      	movs	r0, #6
 80131b0:	f000 f992 	bl	80134d8 <raise>
 80131b4:	2001      	movs	r0, #1
 80131b6:	f7ed fd77 	bl	8000ca8 <_exit>
	...

080131bc <_close_r>:
 80131bc:	b538      	push	{r3, r4, r5, lr}
 80131be:	4d06      	ldr	r5, [pc, #24]	; (80131d8 <_close_r+0x1c>)
 80131c0:	2300      	movs	r3, #0
 80131c2:	4604      	mov	r4, r0
 80131c4:	4608      	mov	r0, r1
 80131c6:	602b      	str	r3, [r5, #0]
 80131c8:	f7ed fd78 	bl	8000cbc <_close>
 80131cc:	1c43      	adds	r3, r0, #1
 80131ce:	d102      	bne.n	80131d6 <_close_r+0x1a>
 80131d0:	682b      	ldr	r3, [r5, #0]
 80131d2:	b103      	cbz	r3, 80131d6 <_close_r+0x1a>
 80131d4:	6023      	str	r3, [r4, #0]
 80131d6:	bd38      	pop	{r3, r4, r5, pc}
 80131d8:	20011c14 	.word	0x20011c14

080131dc <__sflush_r>:
 80131dc:	898a      	ldrh	r2, [r1, #12]
 80131de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e2:	4605      	mov	r5, r0
 80131e4:	0710      	lsls	r0, r2, #28
 80131e6:	460c      	mov	r4, r1
 80131e8:	d458      	bmi.n	801329c <__sflush_r+0xc0>
 80131ea:	684b      	ldr	r3, [r1, #4]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	dc05      	bgt.n	80131fc <__sflush_r+0x20>
 80131f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	dc02      	bgt.n	80131fc <__sflush_r+0x20>
 80131f6:	2000      	movs	r0, #0
 80131f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131fe:	2e00      	cmp	r6, #0
 8013200:	d0f9      	beq.n	80131f6 <__sflush_r+0x1a>
 8013202:	2300      	movs	r3, #0
 8013204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013208:	682f      	ldr	r7, [r5, #0]
 801320a:	602b      	str	r3, [r5, #0]
 801320c:	d032      	beq.n	8013274 <__sflush_r+0x98>
 801320e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013210:	89a3      	ldrh	r3, [r4, #12]
 8013212:	075a      	lsls	r2, r3, #29
 8013214:	d505      	bpl.n	8013222 <__sflush_r+0x46>
 8013216:	6863      	ldr	r3, [r4, #4]
 8013218:	1ac0      	subs	r0, r0, r3
 801321a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801321c:	b10b      	cbz	r3, 8013222 <__sflush_r+0x46>
 801321e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013220:	1ac0      	subs	r0, r0, r3
 8013222:	2300      	movs	r3, #0
 8013224:	4602      	mov	r2, r0
 8013226:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013228:	6a21      	ldr	r1, [r4, #32]
 801322a:	4628      	mov	r0, r5
 801322c:	47b0      	blx	r6
 801322e:	1c43      	adds	r3, r0, #1
 8013230:	89a3      	ldrh	r3, [r4, #12]
 8013232:	d106      	bne.n	8013242 <__sflush_r+0x66>
 8013234:	6829      	ldr	r1, [r5, #0]
 8013236:	291d      	cmp	r1, #29
 8013238:	d82c      	bhi.n	8013294 <__sflush_r+0xb8>
 801323a:	4a2a      	ldr	r2, [pc, #168]	; (80132e4 <__sflush_r+0x108>)
 801323c:	40ca      	lsrs	r2, r1
 801323e:	07d6      	lsls	r6, r2, #31
 8013240:	d528      	bpl.n	8013294 <__sflush_r+0xb8>
 8013242:	2200      	movs	r2, #0
 8013244:	6062      	str	r2, [r4, #4]
 8013246:	04d9      	lsls	r1, r3, #19
 8013248:	6922      	ldr	r2, [r4, #16]
 801324a:	6022      	str	r2, [r4, #0]
 801324c:	d504      	bpl.n	8013258 <__sflush_r+0x7c>
 801324e:	1c42      	adds	r2, r0, #1
 8013250:	d101      	bne.n	8013256 <__sflush_r+0x7a>
 8013252:	682b      	ldr	r3, [r5, #0]
 8013254:	b903      	cbnz	r3, 8013258 <__sflush_r+0x7c>
 8013256:	6560      	str	r0, [r4, #84]	; 0x54
 8013258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801325a:	602f      	str	r7, [r5, #0]
 801325c:	2900      	cmp	r1, #0
 801325e:	d0ca      	beq.n	80131f6 <__sflush_r+0x1a>
 8013260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013264:	4299      	cmp	r1, r3
 8013266:	d002      	beq.n	801326e <__sflush_r+0x92>
 8013268:	4628      	mov	r0, r5
 801326a:	f7ff fa1f 	bl	80126ac <_free_r>
 801326e:	2000      	movs	r0, #0
 8013270:	6360      	str	r0, [r4, #52]	; 0x34
 8013272:	e7c1      	b.n	80131f8 <__sflush_r+0x1c>
 8013274:	6a21      	ldr	r1, [r4, #32]
 8013276:	2301      	movs	r3, #1
 8013278:	4628      	mov	r0, r5
 801327a:	47b0      	blx	r6
 801327c:	1c41      	adds	r1, r0, #1
 801327e:	d1c7      	bne.n	8013210 <__sflush_r+0x34>
 8013280:	682b      	ldr	r3, [r5, #0]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d0c4      	beq.n	8013210 <__sflush_r+0x34>
 8013286:	2b1d      	cmp	r3, #29
 8013288:	d001      	beq.n	801328e <__sflush_r+0xb2>
 801328a:	2b16      	cmp	r3, #22
 801328c:	d101      	bne.n	8013292 <__sflush_r+0xb6>
 801328e:	602f      	str	r7, [r5, #0]
 8013290:	e7b1      	b.n	80131f6 <__sflush_r+0x1a>
 8013292:	89a3      	ldrh	r3, [r4, #12]
 8013294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013298:	81a3      	strh	r3, [r4, #12]
 801329a:	e7ad      	b.n	80131f8 <__sflush_r+0x1c>
 801329c:	690f      	ldr	r7, [r1, #16]
 801329e:	2f00      	cmp	r7, #0
 80132a0:	d0a9      	beq.n	80131f6 <__sflush_r+0x1a>
 80132a2:	0793      	lsls	r3, r2, #30
 80132a4:	680e      	ldr	r6, [r1, #0]
 80132a6:	bf08      	it	eq
 80132a8:	694b      	ldreq	r3, [r1, #20]
 80132aa:	600f      	str	r7, [r1, #0]
 80132ac:	bf18      	it	ne
 80132ae:	2300      	movne	r3, #0
 80132b0:	eba6 0807 	sub.w	r8, r6, r7
 80132b4:	608b      	str	r3, [r1, #8]
 80132b6:	f1b8 0f00 	cmp.w	r8, #0
 80132ba:	dd9c      	ble.n	80131f6 <__sflush_r+0x1a>
 80132bc:	6a21      	ldr	r1, [r4, #32]
 80132be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80132c0:	4643      	mov	r3, r8
 80132c2:	463a      	mov	r2, r7
 80132c4:	4628      	mov	r0, r5
 80132c6:	47b0      	blx	r6
 80132c8:	2800      	cmp	r0, #0
 80132ca:	dc06      	bgt.n	80132da <__sflush_r+0xfe>
 80132cc:	89a3      	ldrh	r3, [r4, #12]
 80132ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132d2:	81a3      	strh	r3, [r4, #12]
 80132d4:	f04f 30ff 	mov.w	r0, #4294967295
 80132d8:	e78e      	b.n	80131f8 <__sflush_r+0x1c>
 80132da:	4407      	add	r7, r0
 80132dc:	eba8 0800 	sub.w	r8, r8, r0
 80132e0:	e7e9      	b.n	80132b6 <__sflush_r+0xda>
 80132e2:	bf00      	nop
 80132e4:	20400001 	.word	0x20400001

080132e8 <_fflush_r>:
 80132e8:	b538      	push	{r3, r4, r5, lr}
 80132ea:	690b      	ldr	r3, [r1, #16]
 80132ec:	4605      	mov	r5, r0
 80132ee:	460c      	mov	r4, r1
 80132f0:	b913      	cbnz	r3, 80132f8 <_fflush_r+0x10>
 80132f2:	2500      	movs	r5, #0
 80132f4:	4628      	mov	r0, r5
 80132f6:	bd38      	pop	{r3, r4, r5, pc}
 80132f8:	b118      	cbz	r0, 8013302 <_fflush_r+0x1a>
 80132fa:	6983      	ldr	r3, [r0, #24]
 80132fc:	b90b      	cbnz	r3, 8013302 <_fflush_r+0x1a>
 80132fe:	f7ff f8d1 	bl	80124a4 <__sinit>
 8013302:	4b14      	ldr	r3, [pc, #80]	; (8013354 <_fflush_r+0x6c>)
 8013304:	429c      	cmp	r4, r3
 8013306:	d11b      	bne.n	8013340 <_fflush_r+0x58>
 8013308:	686c      	ldr	r4, [r5, #4]
 801330a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d0ef      	beq.n	80132f2 <_fflush_r+0xa>
 8013312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013314:	07d0      	lsls	r0, r2, #31
 8013316:	d404      	bmi.n	8013322 <_fflush_r+0x3a>
 8013318:	0599      	lsls	r1, r3, #22
 801331a:	d402      	bmi.n	8013322 <_fflush_r+0x3a>
 801331c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801331e:	f7ff f996 	bl	801264e <__retarget_lock_acquire_recursive>
 8013322:	4628      	mov	r0, r5
 8013324:	4621      	mov	r1, r4
 8013326:	f7ff ff59 	bl	80131dc <__sflush_r>
 801332a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801332c:	07da      	lsls	r2, r3, #31
 801332e:	4605      	mov	r5, r0
 8013330:	d4e0      	bmi.n	80132f4 <_fflush_r+0xc>
 8013332:	89a3      	ldrh	r3, [r4, #12]
 8013334:	059b      	lsls	r3, r3, #22
 8013336:	d4dd      	bmi.n	80132f4 <_fflush_r+0xc>
 8013338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801333a:	f7ff f989 	bl	8012650 <__retarget_lock_release_recursive>
 801333e:	e7d9      	b.n	80132f4 <_fflush_r+0xc>
 8013340:	4b05      	ldr	r3, [pc, #20]	; (8013358 <_fflush_r+0x70>)
 8013342:	429c      	cmp	r4, r3
 8013344:	d101      	bne.n	801334a <_fflush_r+0x62>
 8013346:	68ac      	ldr	r4, [r5, #8]
 8013348:	e7df      	b.n	801330a <_fflush_r+0x22>
 801334a:	4b04      	ldr	r3, [pc, #16]	; (801335c <_fflush_r+0x74>)
 801334c:	429c      	cmp	r4, r3
 801334e:	bf08      	it	eq
 8013350:	68ec      	ldreq	r4, [r5, #12]
 8013352:	e7da      	b.n	801330a <_fflush_r+0x22>
 8013354:	08016238 	.word	0x08016238
 8013358:	08016258 	.word	0x08016258
 801335c:	08016218 	.word	0x08016218

08013360 <_lseek_r>:
 8013360:	b538      	push	{r3, r4, r5, lr}
 8013362:	4d07      	ldr	r5, [pc, #28]	; (8013380 <_lseek_r+0x20>)
 8013364:	4604      	mov	r4, r0
 8013366:	4608      	mov	r0, r1
 8013368:	4611      	mov	r1, r2
 801336a:	2200      	movs	r2, #0
 801336c:	602a      	str	r2, [r5, #0]
 801336e:	461a      	mov	r2, r3
 8013370:	f7ed fccb 	bl	8000d0a <_lseek>
 8013374:	1c43      	adds	r3, r0, #1
 8013376:	d102      	bne.n	801337e <_lseek_r+0x1e>
 8013378:	682b      	ldr	r3, [r5, #0]
 801337a:	b103      	cbz	r3, 801337e <_lseek_r+0x1e>
 801337c:	6023      	str	r3, [r4, #0]
 801337e:	bd38      	pop	{r3, r4, r5, pc}
 8013380:	20011c14 	.word	0x20011c14

08013384 <__swhatbuf_r>:
 8013384:	b570      	push	{r4, r5, r6, lr}
 8013386:	460e      	mov	r6, r1
 8013388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801338c:	2900      	cmp	r1, #0
 801338e:	b096      	sub	sp, #88	; 0x58
 8013390:	4614      	mov	r4, r2
 8013392:	461d      	mov	r5, r3
 8013394:	da07      	bge.n	80133a6 <__swhatbuf_r+0x22>
 8013396:	2300      	movs	r3, #0
 8013398:	602b      	str	r3, [r5, #0]
 801339a:	89b3      	ldrh	r3, [r6, #12]
 801339c:	061a      	lsls	r2, r3, #24
 801339e:	d410      	bmi.n	80133c2 <__swhatbuf_r+0x3e>
 80133a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133a4:	e00e      	b.n	80133c4 <__swhatbuf_r+0x40>
 80133a6:	466a      	mov	r2, sp
 80133a8:	f000 f8b2 	bl	8013510 <_fstat_r>
 80133ac:	2800      	cmp	r0, #0
 80133ae:	dbf2      	blt.n	8013396 <__swhatbuf_r+0x12>
 80133b0:	9a01      	ldr	r2, [sp, #4]
 80133b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80133b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80133ba:	425a      	negs	r2, r3
 80133bc:	415a      	adcs	r2, r3
 80133be:	602a      	str	r2, [r5, #0]
 80133c0:	e7ee      	b.n	80133a0 <__swhatbuf_r+0x1c>
 80133c2:	2340      	movs	r3, #64	; 0x40
 80133c4:	2000      	movs	r0, #0
 80133c6:	6023      	str	r3, [r4, #0]
 80133c8:	b016      	add	sp, #88	; 0x58
 80133ca:	bd70      	pop	{r4, r5, r6, pc}

080133cc <__smakebuf_r>:
 80133cc:	898b      	ldrh	r3, [r1, #12]
 80133ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80133d0:	079d      	lsls	r5, r3, #30
 80133d2:	4606      	mov	r6, r0
 80133d4:	460c      	mov	r4, r1
 80133d6:	d507      	bpl.n	80133e8 <__smakebuf_r+0x1c>
 80133d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80133dc:	6023      	str	r3, [r4, #0]
 80133de:	6123      	str	r3, [r4, #16]
 80133e0:	2301      	movs	r3, #1
 80133e2:	6163      	str	r3, [r4, #20]
 80133e4:	b002      	add	sp, #8
 80133e6:	bd70      	pop	{r4, r5, r6, pc}
 80133e8:	ab01      	add	r3, sp, #4
 80133ea:	466a      	mov	r2, sp
 80133ec:	f7ff ffca 	bl	8013384 <__swhatbuf_r>
 80133f0:	9900      	ldr	r1, [sp, #0]
 80133f2:	4605      	mov	r5, r0
 80133f4:	4630      	mov	r0, r6
 80133f6:	f7ff f9a9 	bl	801274c <_malloc_r>
 80133fa:	b948      	cbnz	r0, 8013410 <__smakebuf_r+0x44>
 80133fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013400:	059a      	lsls	r2, r3, #22
 8013402:	d4ef      	bmi.n	80133e4 <__smakebuf_r+0x18>
 8013404:	f023 0303 	bic.w	r3, r3, #3
 8013408:	f043 0302 	orr.w	r3, r3, #2
 801340c:	81a3      	strh	r3, [r4, #12]
 801340e:	e7e3      	b.n	80133d8 <__smakebuf_r+0xc>
 8013410:	4b0d      	ldr	r3, [pc, #52]	; (8013448 <__smakebuf_r+0x7c>)
 8013412:	62b3      	str	r3, [r6, #40]	; 0x28
 8013414:	89a3      	ldrh	r3, [r4, #12]
 8013416:	6020      	str	r0, [r4, #0]
 8013418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801341c:	81a3      	strh	r3, [r4, #12]
 801341e:	9b00      	ldr	r3, [sp, #0]
 8013420:	6163      	str	r3, [r4, #20]
 8013422:	9b01      	ldr	r3, [sp, #4]
 8013424:	6120      	str	r0, [r4, #16]
 8013426:	b15b      	cbz	r3, 8013440 <__smakebuf_r+0x74>
 8013428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801342c:	4630      	mov	r0, r6
 801342e:	f000 f881 	bl	8013534 <_isatty_r>
 8013432:	b128      	cbz	r0, 8013440 <__smakebuf_r+0x74>
 8013434:	89a3      	ldrh	r3, [r4, #12]
 8013436:	f023 0303 	bic.w	r3, r3, #3
 801343a:	f043 0301 	orr.w	r3, r3, #1
 801343e:	81a3      	strh	r3, [r4, #12]
 8013440:	89a0      	ldrh	r0, [r4, #12]
 8013442:	4305      	orrs	r5, r0
 8013444:	81a5      	strh	r5, [r4, #12]
 8013446:	e7cd      	b.n	80133e4 <__smakebuf_r+0x18>
 8013448:	0801243d 	.word	0x0801243d

0801344c <__malloc_lock>:
 801344c:	4801      	ldr	r0, [pc, #4]	; (8013454 <__malloc_lock+0x8>)
 801344e:	f7ff b8fe 	b.w	801264e <__retarget_lock_acquire_recursive>
 8013452:	bf00      	nop
 8013454:	20011d08 	.word	0x20011d08

08013458 <__malloc_unlock>:
 8013458:	4801      	ldr	r0, [pc, #4]	; (8013460 <__malloc_unlock+0x8>)
 801345a:	f7ff b8f9 	b.w	8012650 <__retarget_lock_release_recursive>
 801345e:	bf00      	nop
 8013460:	20011d08 	.word	0x20011d08

08013464 <_read_r>:
 8013464:	b538      	push	{r3, r4, r5, lr}
 8013466:	4d07      	ldr	r5, [pc, #28]	; (8013484 <_read_r+0x20>)
 8013468:	4604      	mov	r4, r0
 801346a:	4608      	mov	r0, r1
 801346c:	4611      	mov	r1, r2
 801346e:	2200      	movs	r2, #0
 8013470:	602a      	str	r2, [r5, #0]
 8013472:	461a      	mov	r2, r3
 8013474:	f7fe ff68 	bl	8012348 <_read>
 8013478:	1c43      	adds	r3, r0, #1
 801347a:	d102      	bne.n	8013482 <_read_r+0x1e>
 801347c:	682b      	ldr	r3, [r5, #0]
 801347e:	b103      	cbz	r3, 8013482 <_read_r+0x1e>
 8013480:	6023      	str	r3, [r4, #0]
 8013482:	bd38      	pop	{r3, r4, r5, pc}
 8013484:	20011c14 	.word	0x20011c14

08013488 <_raise_r>:
 8013488:	291f      	cmp	r1, #31
 801348a:	b538      	push	{r3, r4, r5, lr}
 801348c:	4604      	mov	r4, r0
 801348e:	460d      	mov	r5, r1
 8013490:	d904      	bls.n	801349c <_raise_r+0x14>
 8013492:	2316      	movs	r3, #22
 8013494:	6003      	str	r3, [r0, #0]
 8013496:	f04f 30ff 	mov.w	r0, #4294967295
 801349a:	bd38      	pop	{r3, r4, r5, pc}
 801349c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801349e:	b112      	cbz	r2, 80134a6 <_raise_r+0x1e>
 80134a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80134a4:	b94b      	cbnz	r3, 80134ba <_raise_r+0x32>
 80134a6:	4620      	mov	r0, r4
 80134a8:	f000 f830 	bl	801350c <_getpid_r>
 80134ac:	462a      	mov	r2, r5
 80134ae:	4601      	mov	r1, r0
 80134b0:	4620      	mov	r0, r4
 80134b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134b6:	f000 b817 	b.w	80134e8 <_kill_r>
 80134ba:	2b01      	cmp	r3, #1
 80134bc:	d00a      	beq.n	80134d4 <_raise_r+0x4c>
 80134be:	1c59      	adds	r1, r3, #1
 80134c0:	d103      	bne.n	80134ca <_raise_r+0x42>
 80134c2:	2316      	movs	r3, #22
 80134c4:	6003      	str	r3, [r0, #0]
 80134c6:	2001      	movs	r0, #1
 80134c8:	e7e7      	b.n	801349a <_raise_r+0x12>
 80134ca:	2400      	movs	r4, #0
 80134cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80134d0:	4628      	mov	r0, r5
 80134d2:	4798      	blx	r3
 80134d4:	2000      	movs	r0, #0
 80134d6:	e7e0      	b.n	801349a <_raise_r+0x12>

080134d8 <raise>:
 80134d8:	4b02      	ldr	r3, [pc, #8]	; (80134e4 <raise+0xc>)
 80134da:	4601      	mov	r1, r0
 80134dc:	6818      	ldr	r0, [r3, #0]
 80134de:	f7ff bfd3 	b.w	8013488 <_raise_r>
 80134e2:	bf00      	nop
 80134e4:	2000001c 	.word	0x2000001c

080134e8 <_kill_r>:
 80134e8:	b538      	push	{r3, r4, r5, lr}
 80134ea:	4d07      	ldr	r5, [pc, #28]	; (8013508 <_kill_r+0x20>)
 80134ec:	2300      	movs	r3, #0
 80134ee:	4604      	mov	r4, r0
 80134f0:	4608      	mov	r0, r1
 80134f2:	4611      	mov	r1, r2
 80134f4:	602b      	str	r3, [r5, #0]
 80134f6:	f7ed fbc5 	bl	8000c84 <_kill>
 80134fa:	1c43      	adds	r3, r0, #1
 80134fc:	d102      	bne.n	8013504 <_kill_r+0x1c>
 80134fe:	682b      	ldr	r3, [r5, #0]
 8013500:	b103      	cbz	r3, 8013504 <_kill_r+0x1c>
 8013502:	6023      	str	r3, [r4, #0]
 8013504:	bd38      	pop	{r3, r4, r5, pc}
 8013506:	bf00      	nop
 8013508:	20011c14 	.word	0x20011c14

0801350c <_getpid_r>:
 801350c:	f7ed bbb2 	b.w	8000c74 <_getpid>

08013510 <_fstat_r>:
 8013510:	b538      	push	{r3, r4, r5, lr}
 8013512:	4d07      	ldr	r5, [pc, #28]	; (8013530 <_fstat_r+0x20>)
 8013514:	2300      	movs	r3, #0
 8013516:	4604      	mov	r4, r0
 8013518:	4608      	mov	r0, r1
 801351a:	4611      	mov	r1, r2
 801351c:	602b      	str	r3, [r5, #0]
 801351e:	f7ed fbd9 	bl	8000cd4 <_fstat>
 8013522:	1c43      	adds	r3, r0, #1
 8013524:	d102      	bne.n	801352c <_fstat_r+0x1c>
 8013526:	682b      	ldr	r3, [r5, #0]
 8013528:	b103      	cbz	r3, 801352c <_fstat_r+0x1c>
 801352a:	6023      	str	r3, [r4, #0]
 801352c:	bd38      	pop	{r3, r4, r5, pc}
 801352e:	bf00      	nop
 8013530:	20011c14 	.word	0x20011c14

08013534 <_isatty_r>:
 8013534:	b538      	push	{r3, r4, r5, lr}
 8013536:	4d06      	ldr	r5, [pc, #24]	; (8013550 <_isatty_r+0x1c>)
 8013538:	2300      	movs	r3, #0
 801353a:	4604      	mov	r4, r0
 801353c:	4608      	mov	r0, r1
 801353e:	602b      	str	r3, [r5, #0]
 8013540:	f7ed fbd8 	bl	8000cf4 <_isatty>
 8013544:	1c43      	adds	r3, r0, #1
 8013546:	d102      	bne.n	801354e <_isatty_r+0x1a>
 8013548:	682b      	ldr	r3, [r5, #0]
 801354a:	b103      	cbz	r3, 801354e <_isatty_r+0x1a>
 801354c:	6023      	str	r3, [r4, #0]
 801354e:	bd38      	pop	{r3, r4, r5, pc}
 8013550:	20011c14 	.word	0x20011c14

08013554 <_init>:
 8013554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013556:	bf00      	nop
 8013558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801355a:	bc08      	pop	{r3}
 801355c:	469e      	mov	lr, r3
 801355e:	4770      	bx	lr

08013560 <_fini>:
 8013560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013562:	bf00      	nop
 8013564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013566:	bc08      	pop	{r3}
 8013568:	469e      	mov	lr, r3
 801356a:	4770      	bx	lr
