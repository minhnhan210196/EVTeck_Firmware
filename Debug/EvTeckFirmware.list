
EvTeckFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b7f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f40  0801b988  0801b988  0002b988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f8c8  0801f8c8  0003014c  2**0
                  CONTENTS
  4 .ARM          00000008  0801f8c8  0801f8c8  0002f8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f8d0  0801f8d0  0003014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f8d0  0801f8d0  0002f8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f8d4  0801f8d4  0002f8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0801f8d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003014c  2**0
                  CONTENTS
 10 .bss          00018598  2000014c  2000014c  0003014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200186e4  200186e4  0003014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00058e2b  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a388  00000000  00000000  00088fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002938  00000000  00000000  00093330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002778  00000000  00000000  00095c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000364fe  00000000  00000000  000983e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042596  00000000  00000000  000ce8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f41e3  00000000  00000000  00110e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00205057  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b310  00000000  00000000  002050ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b970 	.word	0x0801b970

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0801b970 	.word	0x0801b970

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	sprintf(buff_debug,"Task %s over flow hook\r\n",pcTaskName);
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	4903      	ldr	r1, [pc, #12]	; (8000594 <vApplicationStackOverflowHook+0x1c>)
 8000586:	4804      	ldr	r0, [pc, #16]	; (8000598 <vApplicationStackOverflowHook+0x20>)
 8000588:	f01a fcaa 	bl	801aee0 <siprintf>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	0801b988 	.word	0x0801b988
 8000598:	200119b0 	.word	0x200119b0

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fd78 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f824 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f986 	bl	80008b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ac:	f000 f95c 	bl	8000868 <MX_DMA_Init>
  MX_SPI1_Init();
 80005b0:	f000 f888 	bl	80006c4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005b4:	f000 f8bc 	bl	8000730 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005b8:	f000 f90a 	bl	80007d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <main+0x44>)
 80005be:	f003 fce7 	bl	8003f90 <HAL_TIM_Base_Start>
  board_init();
 80005c2:	f018 fd2f 	bl	8019024 <board_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c6:	f004 ff2f 	bl	8005428 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ca:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <main+0x48>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <main+0x4c>)
 80005d0:	f004 ff89 	bl	80054e6 <osThreadNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <main+0x50>)
 80005d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005da:	f004 ff49 	bl	8005470 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	e7fe      	b.n	80005de <main+0x42>
 80005e0:	20011ab4 	.word	0x20011ab4
 80005e4:	0801f4a0 	.word	0x0801f4a0
 80005e8:	08000aa1 	.word	0x08000aa1
 80005ec:	20011ab0 	.word	0x20011ab0

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f019 fffc 	bl	801a5fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000664:	23a8      	movs	r3, #168	; 0xa8
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066c:	2304      	movs	r3, #4
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fcb3 	bl	8002fe0 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 fa36 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2105      	movs	r1, #5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 ff14 	bl	80034d0 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 fa1f 	bl	8000af0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_SPI1_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_SPI1_Init+0x64>)
 8000710:	220a      	movs	r2, #10
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_SPI1_Init+0x64>)
 8000716:	f003 f8f5 	bl	8003904 <HAL_SPI_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 f9e6 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20011afc 	.word	0x20011afc
 800072c:	40013000 	.word	0x40013000

08000730 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_TIM1_Init+0x98>)
 800074e:	4a1f      	ldr	r2, [pc, #124]	; (80007cc <MX_TIM1_Init+0x9c>)
 8000750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_TIM1_Init+0x98>)
 8000754:	22a7      	movs	r2, #167	; 0xa7
 8000756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_TIM1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_TIM1_Init+0x98>)
 8000760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_TIM1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_TIM1_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_TIM1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <MX_TIM1_Init+0x98>)
 800077a:	f003 fbb9 	bl	8003ef0 <HAL_TIM_Base_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000784:	f000 f9b4 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_TIM1_Init+0x98>)
 8000796:	f003 fddb 	bl	8004350 <HAL_TIM_ConfigClockSource>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007a0:	f000 f9a6 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_TIM1_Init+0x98>)
 80007b2:	f003 fff7 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007bc:	f000 f998 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20011ab4 	.word	0x20011ab4
 80007cc:	40010000 	.word	0x40010000

080007d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_TIM2_Init+0x94>)
 80007ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_TIM2_Init+0x94>)
 80007f6:	22a7      	movs	r2, #167	; 0xa7
 80007f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_TIM2_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_TIM2_Init+0x94>)
 8000802:	f04f 32ff 	mov.w	r2, #4294967295
 8000806:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_TIM2_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_TIM2_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000814:	4813      	ldr	r0, [pc, #76]	; (8000864 <MX_TIM2_Init+0x94>)
 8000816:	f003 fb6b 	bl	8003ef0 <HAL_TIM_Base_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000820:	f000 f966 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	4619      	mov	r1, r3
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_TIM2_Init+0x94>)
 8000832:	f003 fd8d 	bl	8004350 <HAL_TIM_ConfigClockSource>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800083c:	f000 f958 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_TIM2_Init+0x94>)
 800084e:	f003 ffa9 	bl	80047a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000858:	f000 f94a 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20011b54 	.word	0x20011b54

08000868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_DMA_Init+0x4c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <MX_DMA_Init+0x4c>)
 8000878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_DMA_Init+0x4c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2105      	movs	r1, #5
 800088e:	2038      	movs	r0, #56	; 0x38
 8000890:	f000 fd1e 	bl	80012d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000894:	2038      	movs	r0, #56	; 0x38
 8000896:	f000 fd37 	bl	8001308 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2105      	movs	r1, #5
 800089e:	203b      	movs	r0, #59	; 0x3b
 80008a0:	f000 fd16 	bl	80012d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008a4:	203b      	movs	r0, #59	; 0x3b
 80008a6:	f000 fd2f 	bl	8001308 <HAL_NVIC_EnableIRQ>

}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
 80008d2:	4b6e      	ldr	r3, [pc, #440]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a6d      	ldr	r2, [pc, #436]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b6b      	ldr	r3, [pc, #428]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	623b      	str	r3, [r7, #32]
 80008e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	4b67      	ldr	r3, [pc, #412]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a66      	ldr	r2, [pc, #408]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b64      	ldr	r3, [pc, #400]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000902:	61fb      	str	r3, [r7, #28]
 8000904:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b60      	ldr	r3, [pc, #384]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000910:	f043 0304 	orr.w	r3, r3, #4
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0304 	and.w	r3, r3, #4
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b59      	ldr	r3, [pc, #356]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a58      	ldr	r2, [pc, #352]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b56      	ldr	r3, [pc, #344]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b52      	ldr	r3, [pc, #328]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a51      	ldr	r2, [pc, #324]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000948:	f043 0320 	orr.w	r3, r3, #32
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b4f      	ldr	r3, [pc, #316]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0320 	and.w	r3, r3, #32
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a4a      	ldr	r2, [pc, #296]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a43      	ldr	r2, [pc, #268]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b3d      	ldr	r3, [pc, #244]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a3c      	ldr	r2, [pc, #240]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b3a      	ldr	r3, [pc, #232]	; (8000a8c <MX_GPIO_Init+0x1d4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VAL_Pin|MOTOR_Pin|MUX_B3_Pin|MUX_A4_Pin
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 7163 	mov.w	r1, #908	; 0x38c
 80009b4:	4836      	ldr	r0, [pc, #216]	; (8000a90 <MX_GPIO_Init+0x1d8>)
 80009b6:	f002 faf9 	bl	8002fac <HAL_GPIO_WritePin>
                          |MUX_B4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MUX_A1_Pin|MUX_B1_Pin|MUX_A2_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80009c0:	4834      	ldr	r0, [pc, #208]	; (8000a94 <MX_GPIO_Init+0x1dc>)
 80009c2:	f002 faf3 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MUX_B2_Pin|MUX_A3_Pin|ADC_CNV2_Pin|ADC_RS2_Pin
 80009c6:	2200      	movs	r2, #0
 80009c8:	2137      	movs	r1, #55	; 0x37
 80009ca:	4833      	ldr	r0, [pc, #204]	; (8000a98 <MX_GPIO_Init+0x1e0>)
 80009cc:	f002 faee 	bl	8002fac <HAL_GPIO_WritePin>
                          |ADC_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADC_CNV1_Pin|ADC_RS1_Pin|ADC_CS1_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 80009d6:	4831      	ldr	r0, [pc, #196]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 80009d8:	f002 fae8 	bl	8002fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VAL_Pin MOTOR_Pin MUX_B3_Pin MUX_A4_Pin
                           MUX_B4_Pin */
  GPIO_InitStruct.Pin = VAL_Pin|MOTOR_Pin|MUX_B3_Pin|MUX_A4_Pin
 80009dc:	f44f 7363 	mov.w	r3, #908	; 0x38c
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |MUX_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4826      	ldr	r0, [pc, #152]	; (8000a90 <MX_GPIO_Init+0x1d8>)
 80009f6:	f002 f925 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_A1_Pin MUX_B1_Pin MUX_A2_Pin */
  GPIO_InitStruct.Pin = MUX_A1_Pin|MUX_B1_Pin|MUX_A2_Pin;
 80009fa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4820      	ldr	r0, [pc, #128]	; (8000a94 <MX_GPIO_Init+0x1dc>)
 8000a14:	f002 f916 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_B2_Pin MUX_A3_Pin ADC_CNV2_Pin ADC_RS2_Pin
                           ADC_CS2_Pin */
  GPIO_InitStruct.Pin = MUX_B2_Pin|MUX_A3_Pin|ADC_CNV2_Pin|ADC_RS2_Pin
 8000a18:	2337      	movs	r3, #55	; 0x37
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
                          |ADC_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481a      	ldr	r0, [pc, #104]	; (8000a98 <MX_GPIO_Init+0x1e0>)
 8000a30:	f002 f908 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC_CNV1_Pin ADC_RS1_Pin ADC_CS1_Pin */
  GPIO_InitStruct.Pin = ADC_CNV1_Pin|ADC_RS1_Pin|ADC_CS1_Pin;
 8000a34:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000a4e:	f002 f8f9 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_BUSY1_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY1_Pin;
 8000a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY1_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_GPIO_Init+0x1e4>)
 8000a68:	f002 f8ec 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_BUSY2_Pin */
  GPIO_InitStruct.Pin = ADC_BUSY2_Pin;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADC_BUSY2_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_GPIO_Init+0x1e0>)
 8000a80:	f002 f8e0 	bl	8002c44 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3738      	adds	r7, #56	; 0x38
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40021400 	.word	0x40021400
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	40020c00 	.word	0x40020c00

08000aa0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000aa8:	f003 ff0c 	bl	80048c4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  app_init();
 8000aac:	f017 fea8 	bl	8018800 <app_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f004 fdab 	bl	800560c <osDelay>
 8000ab6:	e7fb      	b.n	8000ab0 <StartDefaultTask+0x10>

08000ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aca:	f000 fb05 	bl	80010d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == htim2.Instance){
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d102      	bne.n	8000ae0 <HAL_TIM_PeriodElapsedCallback+0x28>
	  app_read_sensor_task((void*)htim);
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f018 f819 	bl	8018b12 <app_read_sensor_task>
  }
  /* USER CODE END Callback 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40001000 	.word	0x40001000
 8000aec:	20011b54 	.word	0x20011b54

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_MspInit+0x54>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_MspInit+0x54>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x54>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <HAL_MspInit+0x54>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_MspInit+0x54>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_MspInit+0x54>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	210f      	movs	r1, #15
 8000b3e:	f06f 0001 	mvn.w	r0, #1
 8000b42:	f000 fbc5 	bl	80012d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a48      	ldr	r2, [pc, #288]	; (8000c94 <HAL_SPI_MspInit+0x140>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	f040 808a 	bne.w	8000c8c <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	4b46      	ldr	r3, [pc, #280]	; (8000c98 <HAL_SPI_MspInit+0x144>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b80:	4a45      	ldr	r2, [pc, #276]	; (8000c98 <HAL_SPI_MspInit+0x144>)
 8000b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b86:	6453      	str	r3, [r2, #68]	; 0x44
 8000b88:	4b43      	ldr	r3, [pc, #268]	; (8000c98 <HAL_SPI_MspInit+0x144>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <HAL_SPI_MspInit+0x144>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a3e      	ldr	r2, [pc, #248]	; (8000c98 <HAL_SPI_MspInit+0x144>)
 8000b9e:	f043 0302 	orr.w	r3, r3, #2
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <HAL_SPI_MspInit+0x144>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bb0:	2338      	movs	r3, #56	; 0x38
 8000bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bc0:	2305      	movs	r3, #5
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4834      	ldr	r0, [pc, #208]	; (8000c9c <HAL_SPI_MspInit+0x148>)
 8000bcc:	f002 f83a 	bl	8002c44 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000bd2:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <HAL_SPI_MspInit+0x150>)
 8000bd4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000bd8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bde:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be4:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bf0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000c06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c0a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0c:	4b24      	ldr	r3, [pc, #144]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c12:	4823      	ldr	r0, [pc, #140]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000c14:	f000 fb86 	bl	8001324 <HAL_DMA_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000c1e:	f7ff ff67 	bl	8000af0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000c26:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c28:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <HAL_SPI_MspInit+0x14c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c30:	4a1e      	ldr	r2, [pc, #120]	; (8000cac <HAL_SPI_MspInit+0x158>)
 8000c32:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c36:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c3a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c3e:	2240      	movs	r2, #64	; 0x40
 8000c40:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c48:	4b17      	ldr	r3, [pc, #92]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c4e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c56:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c68:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000c70:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c72:	f000 fb57 	bl	8001324 <HAL_DMA_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8000c7c:	f7ff ff38 	bl	8000af0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c84:	649a      	str	r2, [r3, #72]	; 0x48
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_SPI_MspInit+0x154>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40013000 	.word	0x40013000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020400 	.word	0x40020400
 8000ca0:	20011b9c 	.word	0x20011b9c
 8000ca4:	40026410 	.word	0x40026410
 8000ca8:	20011bfc 	.word	0x20011bfc
 8000cac:	40026458 	.word	0x40026458

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <HAL_TIM_Base_MspInit+0xb0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12e      	bne.n	8000d20 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_TIM_Base_MspInit+0xb4>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a26      	ldr	r2, [pc, #152]	; (8000d64 <HAL_TIM_Base_MspInit+0xb4>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <HAL_TIM_Base_MspInit+0xb4>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	2018      	movs	r0, #24
 8000ce4:	f000 faf4 	bl	80012d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ce8:	2018      	movs	r0, #24
 8000cea:	f000 fb0d 	bl	8001308 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	2019      	movs	r0, #25
 8000cf4:	f000 faec 	bl	80012d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cf8:	2019      	movs	r0, #25
 8000cfa:	f000 fb05 	bl	8001308 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	201a      	movs	r0, #26
 8000d04:	f000 fae4 	bl	80012d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d08:	201a      	movs	r0, #26
 8000d0a:	f000 fafd 	bl	8001308 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	201b      	movs	r0, #27
 8000d14:	f000 fadc 	bl	80012d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d18:	201b      	movs	r0, #27
 8000d1a:	f000 faf5 	bl	8001308 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d1e:	e01a      	b.n	8000d56 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d28:	d115      	bne.n	8000d56 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_TIM_Base_MspInit+0xb4>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <HAL_TIM_Base_MspInit+0xb4>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_TIM_Base_MspInit+0xb4>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2105      	movs	r1, #5
 8000d4a:	201c      	movs	r0, #28
 8000d4c:	f000 fac0 	bl	80012d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d50:	201c      	movs	r0, #28
 8000d52:	f000 fad9 	bl	8001308 <HAL_NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40010000 	.word	0x40010000
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08c      	sub	sp, #48	; 0x30
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	2036      	movs	r0, #54	; 0x36
 8000d7e:	f000 faa7 	bl	80012d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d82:	2036      	movs	r0, #54	; 0x36
 8000d84:	f000 fac0 	bl	8001308 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <HAL_InitTick+0xa4>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <HAL_InitTick+0xa4>)
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <HAL_InitTick+0xa4>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000da4:	f107 0210 	add.w	r2, r7, #16
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fd76 	bl	80038a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000db4:	f002 fd60 	bl	8003878 <HAL_RCC_GetPCLK1Freq>
 8000db8:	4603      	mov	r3, r0
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc0:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <HAL_InitTick+0xa8>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	0c9b      	lsrs	r3, r3, #18
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_InitTick+0xac>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <HAL_InitTick+0xb0>)
 8000dd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_InitTick+0xac>)
 8000dd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <HAL_InitTick+0xac>)
 8000ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_InitTick+0xac>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_InitTick+0xac>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dec:	4809      	ldr	r0, [pc, #36]	; (8000e14 <HAL_InitTick+0xac>)
 8000dee:	f003 f87f 	bl	8003ef0 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d104      	bne.n	8000e02 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000df8:	4806      	ldr	r0, [pc, #24]	; (8000e14 <HAL_InitTick+0xac>)
 8000dfa:	f003 f931 	bl	8004060 <HAL_TIM_Base_Start_IT>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3730      	adds	r7, #48	; 0x30
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	431bde83 	.word	0x431bde83
 8000e14:	20011c5c 	.word	0x20011c5c
 8000e18:	40001000 	.word	0x40001000

08000e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <NMI_Handler+0x4>

08000e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e26:	e7fe      	b.n	8000e26 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <MemManage_Handler+0x4>

08000e2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e4e:	f003 f977 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20011ab4 	.word	0x20011ab4

08000e5c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e60:	4802      	ldr	r0, [pc, #8]	; (8000e6c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e62:	f003 f96d 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20011ab4 	.word	0x20011ab4

08000e70 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e76:	f003 f963 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20011ab4 	.word	0x20011ab4

08000e84 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <TIM1_CC_IRQHandler+0x10>)
 8000e8a:	f003 f959 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20011ab4 	.word	0x20011ab4

08000e98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <TIM2_IRQHandler+0x10>)
 8000e9e:	f003 f94f 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20011b54 	.word	0x20011b54

08000eac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM6_DAC_IRQHandler+0x10>)
 8000eb2:	f003 f945 	bl	8004140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20011c5c 	.word	0x20011c5c

08000ec0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <DMA2_Stream0_IRQHandler+0x10>)
 8000ec6:	f000 fadb 	bl	8001480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20011b9c 	.word	0x20011b9c

08000ed4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <DMA2_Stream3_IRQHandler+0x10>)
 8000eda:	f000 fad1 	bl	8001480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20011bfc 	.word	0x20011bfc

08000ee8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <ETH_IRQHandler+0x10>)
 8000eee:	f001 f8e7 	bl	80020c0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200135f0 	.word	0x200135f0

08000efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	return 1;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_kill>:

int _kill(int pid, int sig)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <_kill+0x20>)
 8000f18:	2216      	movs	r2, #22
 8000f1a:	601a      	str	r2, [r3, #0]
	return -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	2001857c 	.word	0x2001857c

08000f30 <_exit>:

void _exit (int status)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ffe5 	bl	8000f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f42:	e7fe      	b.n	8000f42 <_exit+0x12>

08000f44 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	return -1;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f6c:	605a      	str	r2, [r3, #4]
	return 0;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <_isatty>:

int _isatty(int file)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	return 1;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b085      	sub	sp, #20
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
	return 0;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	; (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d205      	bcs.n	8000fe8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <_sbrk+0x6c>)
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a06      	ldr	r2, [pc, #24]	; (8001010 <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	371c      	adds	r7, #28
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	20020000 	.word	0x20020000
 800100c:	00000400 	.word	0x00000400
 8001010:	20000168 	.word	0x20000168
 8001014:	200186e8 	.word	0x200186e8
 8001018:	2001857c 	.word	0x2001857c

0800101c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <SystemInit+0x20>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <SystemInit+0x20>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001078 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopFillZerobss+0x26>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800106a:	f7ff ffd7 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f019 fa57 	bl	801a520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fa93 	bl	800059c <main>
  bx  lr    
 8001076:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001084:	0801f8d8 	.word	0x0801f8d8
  ldr r2, =_sbss
 8001088:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 800108c:	200186e4 	.word	0x200186e4

08001090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <HAL_Init+0x40>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_Init+0x40>)
 80010aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_Init+0x40>)
 80010b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 f8fc 	bl	80012ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff fe50 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fd18 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023c00 	.word	0x40023c00

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20011ca4 	.word	0x20011ca4

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20011ca4 	.word	0x20011ca4

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff4c 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e2:	f7ff ff61 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 80012e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	68b9      	ldr	r1, [r7, #8]
 80012ec:	6978      	ldr	r0, [r7, #20]
 80012ee:	f7ff ffb1 	bl	8001254 <NVIC_EncodePriority>
 80012f2:	4602      	mov	r2, r0
 80012f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff80 	bl	8001200 <__NVIC_SetPriority>
}
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff54 	bl	80011c4 <__NVIC_EnableIRQ>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001330:	f7ff fee6 	bl	8001100 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e099      	b.n	8001474 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2202      	movs	r2, #2
 8001344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001360:	e00f      	b.n	8001382 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001362:	f7ff fecd 	bl	8001100 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b05      	cmp	r3, #5
 800136e:	d908      	bls.n	8001382 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2220      	movs	r2, #32
 8001374:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e078      	b.n	8001474 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e8      	bne.n	8001362 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_DMA_Init+0x158>)
 800139c:	4013      	ands	r3, r2
 800139e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d107      	bne.n	80013ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	4313      	orrs	r3, r2
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f023 0307 	bic.w	r3, r3, #7
 8001402:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	4313      	orrs	r3, r2
 800140c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001412:	2b04      	cmp	r3, #4
 8001414:	d117      	bne.n	8001446 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00e      	beq.n	8001446 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f9e9 	bl	8001800 <DMA_CheckFifoParam>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001442:	2301      	movs	r3, #1
 8001444:	e016      	b.n	8001474 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f9a0 	bl	8001794 <DMA_CalcBaseAndBitshift>
 8001454:	4603      	mov	r3, r0
 8001456:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145c:	223f      	movs	r2, #63	; 0x3f
 800145e:	409a      	lsls	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	f010803f 	.word	0xf010803f

08001480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800148c:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <HAL_DMA_IRQHandler+0x258>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a92      	ldr	r2, [pc, #584]	; (80016dc <HAL_DMA_IRQHandler+0x25c>)
 8001492:	fba2 2303 	umull	r2, r3, r2, r3
 8001496:	0a9b      	lsrs	r3, r3, #10
 8001498:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	2208      	movs	r2, #8
 80014ac:	409a      	lsls	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d01a      	beq.n	80014ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0204 	bic.w	r2, r2, #4
 80014d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d8:	2208      	movs	r2, #8
 80014da:	409a      	lsls	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e4:	f043 0201 	orr.w	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	2201      	movs	r2, #1
 80014f2:	409a      	lsls	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d012      	beq.n	8001522 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00b      	beq.n	8001522 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	2201      	movs	r2, #1
 8001510:	409a      	lsls	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151a:	f043 0202 	orr.w	r2, r3, #2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2204      	movs	r2, #4
 8001528:	409a      	lsls	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d012      	beq.n	8001558 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00b      	beq.n	8001558 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	2204      	movs	r2, #4
 8001546:	409a      	lsls	r2, r3
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	f043 0204 	orr.w	r2, r3, #4
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	2210      	movs	r2, #16
 800155e:	409a      	lsls	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4013      	ands	r3, r2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d043      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d03c      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157a:	2210      	movs	r2, #16
 800157c:	409a      	lsls	r2, r3
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d018      	beq.n	80015c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d108      	bne.n	80015b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d024      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4798      	blx	r3
 80015ae:	e01f      	b.n	80015f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01b      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
 80015c0:	e016      	b.n	80015f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0208 	bic.w	r2, r2, #8
 80015de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	2220      	movs	r2, #32
 80015f6:	409a      	lsls	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 808e 	beq.w	800171e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8086 	beq.w	800171e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	2220      	movs	r2, #32
 8001618:	409a      	lsls	r2, r3
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b05      	cmp	r3, #5
 8001628:	d136      	bne.n	8001698 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0216 	bic.w	r2, r2, #22
 8001638:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001648:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	2b00      	cmp	r3, #0
 8001650:	d103      	bne.n	800165a <HAL_DMA_IRQHandler+0x1da>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f022 0208 	bic.w	r2, r2, #8
 8001668:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	223f      	movs	r2, #63	; 0x3f
 8001670:	409a      	lsls	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168a:	2b00      	cmp	r3, #0
 800168c:	d07d      	beq.n	800178a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	4798      	blx	r3
        }
        return;
 8001696:	e078      	b.n	800178a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01c      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d108      	bne.n	80016c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d030      	beq.n	800171e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
 80016c4:	e02b      	b.n	800171e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d027      	beq.n	800171e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
 80016d6:	e022      	b.n	800171e <HAL_DMA_IRQHandler+0x29e>
 80016d8:	20000000 	.word	0x20000000
 80016dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10f      	bne.n	800170e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f022 0210 	bic.w	r2, r2, #16
 80016fc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	2b00      	cmp	r3, #0
 8001724:	d032      	beq.n	800178c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d022      	beq.n	8001778 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2205      	movs	r2, #5
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0201 	bic.w	r2, r2, #1
 8001748:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3301      	adds	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	429a      	cmp	r2, r3
 8001754:	d307      	bcc.n	8001766 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f2      	bne.n	800174a <HAL_DMA_IRQHandler+0x2ca>
 8001764:	e000      	b.n	8001768 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001766:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	4798      	blx	r3
 8001788:	e000      	b.n	800178c <HAL_DMA_IRQHandler+0x30c>
        return;
 800178a:	bf00      	nop
    }
  }
}
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop

08001794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3b10      	subs	r3, #16
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <DMA_CalcBaseAndBitshift+0x64>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	091b      	lsrs	r3, r3, #4
 80017ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017ae:	4a13      	ldr	r2, [pc, #76]	; (80017fc <DMA_CalcBaseAndBitshift+0x68>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d909      	bls.n	80017d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	1d1a      	adds	r2, r3, #4
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	659a      	str	r2, [r3, #88]	; 0x58
 80017d4:	e007      	b.n	80017e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	aaaaaaab 	.word	0xaaaaaaab
 80017fc:	0801f4dc 	.word	0x0801f4dc

08001800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d11f      	bne.n	800185a <DMA_CheckFifoParam+0x5a>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b03      	cmp	r3, #3
 800181e:	d856      	bhi.n	80018ce <DMA_CheckFifoParam+0xce>
 8001820:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <DMA_CheckFifoParam+0x28>)
 8001822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001826:	bf00      	nop
 8001828:	08001839 	.word	0x08001839
 800182c:	0800184b 	.word	0x0800184b
 8001830:	08001839 	.word	0x08001839
 8001834:	080018cf 	.word	0x080018cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d046      	beq.n	80018d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001848:	e043      	b.n	80018d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001852:	d140      	bne.n	80018d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001858:	e03d      	b.n	80018d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001862:	d121      	bne.n	80018a8 <DMA_CheckFifoParam+0xa8>
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d837      	bhi.n	80018da <DMA_CheckFifoParam+0xda>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <DMA_CheckFifoParam+0x70>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001881 	.word	0x08001881
 8001874:	08001887 	.word	0x08001887
 8001878:	08001881 	.word	0x08001881
 800187c:	08001899 	.word	0x08001899
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
      break;
 8001884:	e030      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d025      	beq.n	80018de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001896:	e022      	b.n	80018de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018a0:	d11f      	bne.n	80018e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018a6:	e01c      	b.n	80018e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d903      	bls.n	80018b6 <DMA_CheckFifoParam+0xb6>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d003      	beq.n	80018bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018b4:	e018      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
      break;
 80018ba:	e015      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00e      	beq.n	80018e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	73fb      	strb	r3, [r7, #15]
      break;
 80018cc:	e00b      	b.n	80018e6 <DMA_CheckFifoParam+0xe6>
      break;
 80018ce:	bf00      	nop
 80018d0:	e00a      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d2:	bf00      	nop
 80018d4:	e008      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018d6:	bf00      	nop
 80018d8:	e006      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018da:	bf00      	nop
 80018dc:	e004      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018de:	bf00      	nop
 80018e0:	e002      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018e2:	bf00      	nop
 80018e4:	e000      	b.n	80018e8 <DMA_CheckFifoParam+0xe8>
      break;
 80018e6:	bf00      	nop
    }
  } 
  
  return status; 
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop

080018f8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001908:	4baa      	ldr	r3, [pc, #680]	; (8001bb4 <HAL_ETH_Init+0x2bc>)
 800190a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e183      	b.n	8001c26 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d106      	bne.n	8001938 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f003 f928 	bl	8004b88 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	4b9e      	ldr	r3, [pc, #632]	; (8001bb8 <HAL_ETH_Init+0x2c0>)
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	4a9d      	ldr	r2, [pc, #628]	; (8001bb8 <HAL_ETH_Init+0x2c0>)
 8001942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001946:	6453      	str	r3, [r2, #68]	; 0x44
 8001948:	4b9b      	ldr	r3, [pc, #620]	; (8001bb8 <HAL_ETH_Init+0x2c0>)
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001954:	4b99      	ldr	r3, [pc, #612]	; (8001bbc <HAL_ETH_Init+0x2c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a98      	ldr	r2, [pc, #608]	; (8001bbc <HAL_ETH_Init+0x2c4>)
 800195a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800195e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001960:	4b96      	ldr	r3, [pc, #600]	; (8001bbc <HAL_ETH_Init+0x2c4>)
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4994      	ldr	r1, [pc, #592]	; (8001bbc <HAL_ETH_Init+0x2c4>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001984:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001986:	f7ff fbbb 	bl	8001100 <HAL_GetTick>
 800198a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800198c:	e011      	b.n	80019b2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800198e:	f7ff fbb7 	bl	8001100 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800199c:	d909      	bls.n	80019b2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e139      	b.n	8001c26 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e4      	bne.n	800198e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f023 031c 	bic.w	r3, r3, #28
 80019d2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80019d4:	f001 ff44 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 80019d8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	4a78      	ldr	r2, [pc, #480]	; (8001bc0 <HAL_ETH_Init+0x2c8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d908      	bls.n	80019f4 <HAL_ETH_Init+0xfc>
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4a77      	ldr	r2, [pc, #476]	; (8001bc4 <HAL_ETH_Init+0x2cc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d804      	bhi.n	80019f4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e027      	b.n	8001a44 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	4a73      	ldr	r2, [pc, #460]	; (8001bc4 <HAL_ETH_Init+0x2cc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d908      	bls.n	8001a0e <HAL_ETH_Init+0x116>
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	4a6d      	ldr	r2, [pc, #436]	; (8001bb4 <HAL_ETH_Init+0x2bc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d204      	bcs.n	8001a0e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f043 030c 	orr.w	r3, r3, #12
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	e01a      	b.n	8001a44 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4a68      	ldr	r2, [pc, #416]	; (8001bb4 <HAL_ETH_Init+0x2bc>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d303      	bcc.n	8001a1e <HAL_ETH_Init+0x126>
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4a6b      	ldr	r2, [pc, #428]	; (8001bc8 <HAL_ETH_Init+0x2d0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d911      	bls.n	8001a42 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	4a69      	ldr	r2, [pc, #420]	; (8001bc8 <HAL_ETH_Init+0x2d0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d908      	bls.n	8001a38 <HAL_ETH_Init+0x140>
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4a68      	ldr	r2, [pc, #416]	; (8001bcc <HAL_ETH_Init+0x2d4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d804      	bhi.n	8001a38 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e005      	b.n	8001a44 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	e000      	b.n	8001a44 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001a42:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001a4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a50:	2100      	movs	r1, #0
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fc17 	bl	8002286 <HAL_ETH_WritePHYRegister>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00b      	beq.n	8001a76 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001a62:	6939      	ldr	r1, [r7, #16]
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fdcd 	bl	8002604 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0d7      	b.n	8001c26 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001a76:	20ff      	movs	r0, #255	; 0xff
 8001a78:	f7ff fb4e 	bl	8001118 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a5 	beq.w	8001bd0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a86:	f7ff fb3b 	bl	8001100 <HAL_GetTick>
 8001a8a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	461a      	mov	r2, r3
 8001a92:	2101      	movs	r1, #1
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fb8e 	bl	80021b6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a9a:	f7ff fb31 	bl	8001100 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d90f      	bls.n	8001acc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001ab0:	6939      	ldr	r1, [r7, #16]
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fda6 	bl	8002604 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0ac      	b.n	8001c26 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d0da      	beq.n	8001a8c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001ad6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ada:	2100      	movs	r1, #0
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fbd2 	bl	8002286 <HAL_ETH_WritePHYRegister>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00b      	beq.n	8001b00 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001aec:	6939      	ldr	r1, [r7, #16]
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fd88 	bl	8002604 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001afc:	2301      	movs	r3, #1
 8001afe:	e092      	b.n	8001c26 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b00:	f7ff fafe 	bl	8001100 <HAL_GetTick>
 8001b04:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b06:	f107 030c 	add.w	r3, r7, #12
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 fb51 	bl	80021b6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001b14:	f7ff faf4 	bl	8001100 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d90f      	bls.n	8001b46 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b2a:	6939      	ldr	r1, [r7, #16]
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 fd69 	bl	8002604 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e06f      	b.n	8001c26 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0da      	beq.n	8001b06 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001b50:	f107 030c 	add.w	r3, r7, #12
 8001b54:	461a      	mov	r2, r3
 8001b56:	2110      	movs	r1, #16
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fb2c 	bl	80021b6 <HAL_ETH_ReadPHYRegister>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00b      	beq.n	8001b7c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b68:	6939      	ldr	r1, [r7, #16]
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fd4a 	bl	8002604 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e054      	b.n	8001c26 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	e002      	b.n	8001b96 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	e035      	b.n	8001c14 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	e030      	b.n	8001c14 <HAL_ETH_Init+0x31c>
 8001bb2:	bf00      	nop
 8001bb4:	03938700 	.word	0x03938700
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	01312cff 	.word	0x01312cff
 8001bc4:	02160ebf 	.word	0x02160ebf
 8001bc8:	05f5e0ff 	.word	0x05f5e0ff
 8001bcc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fb4c 	bl	8002286 <HAL_ETH_WritePHYRegister>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00b      	beq.n	8001c0c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001bf8:	6939      	ldr	r1, [r7, #16]
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fd02 	bl	8002604 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e00c      	b.n	8001c26 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001c0c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001c10:	f7ff fa82 	bl	8001118 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001c14:	6939      	ldr	r1, [r7, #16]
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 fcf4 	bl	8002604 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3720      	adds	r7, #32
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop

08001c30 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_ETH_DMATxDescListInit+0x20>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e052      	b.n	8001cf6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e030      	b.n	8001cce <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	015b      	lsls	r3, r3, #5
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4413      	add	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c7c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c84:	fb02 f303 	mul.w	r3, r2, r3
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d208      	bcs.n	8001cc2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	015b      	lsls	r3, r3, #5
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	4413      	add	r3, r2
 8001cba:	461a      	mov	r2, r3
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	e002      	b.n	8001cc8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d3ca      	bcc.n	8001c6c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce0:	3310      	adds	r3, #16
 8001ce2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b087      	sub	sp, #28
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_ETH_DMARxDescListInit+0x20>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e056      	b.n	8001dd0 <HAL_ETH_DMARxDescListInit+0xce>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	e034      	b.n	8001da8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	015b      	lsls	r3, r3, #5
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4413      	add	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d4e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001d56:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	461a      	mov	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d105      	bne.n	8001d80 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d208      	bcs.n	8001d9c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	015b      	lsls	r3, r3, #5
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	4413      	add	r3, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	e002      	b.n	8001da2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3301      	adds	r3, #1
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d3c6      	bcc.n	8001d3e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dba:	330c      	adds	r3, #12
 8001dbc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	371c      	adds	r7, #28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_ETH_TransmitFrame+0x24>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e0cd      	b.n	8001f9c <HAL_ETH_TransmitFrame+0x1c0>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0b8      	b.n	8001f9c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da09      	bge.n	8001e48 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2212      	movs	r2, #18
 8001e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0a9      	b.n	8001f9c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d915      	bls.n	8001e7e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0a9b      	lsrs	r3, r3, #10
 8001e5c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4b51      	ldr	r3, [pc, #324]	; (8001fa8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001e62:	fba3 1302 	umull	r1, r3, r3, r2
 8001e66:	0a9b      	lsrs	r3, r3, #10
 8001e68:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e001      	b.n	8001e82 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d11c      	bne.n	8001ec2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001e96:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001ea2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eb2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ec0:	e04b      	b.n	8001f5a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	e044      	b.n	8001f52 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ed6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d107      	bne.n	8001eee <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eec:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ef6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d116      	bne.n	8001f30 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001f10:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	4a25      	ldr	r2, [pc, #148]	; (8001fac <HAL_ETH_TransmitFrame+0x1d0>)
 8001f16:	fb02 f203 	mul.w	r2, r2, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001f22:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f2e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f3e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	461a      	mov	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d3b6      	bcc.n	8001ec8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f62:	3314      	adds	r3, #20
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f76:	3314      	adds	r3, #20
 8001f78:	2204      	movs	r2, #4
 8001f7a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f84:	3304      	adds	r3, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	ac02b00b 	.word	0xac02b00b
 8001fac:	fffffa0c 	.word	0xfffffa0c

08001fb0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e074      	b.n	80020b4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001fda:	e05a      	b.n	8002092 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff0:	d10d      	bne.n	800200e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	461a      	mov	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
 800200c:	e041      	b.n	8002092 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	461a      	mov	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28
 8002032:	e02e      	b.n	8002092 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204a:	2b01      	cmp	r3, #1
 800204c:	d103      	bne.n	8002056 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0c1b      	lsrs	r3, r3, #16
 800205e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002062:	1f1a      	subs	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	461a      	mov	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e010      	b.n	80020b4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db02      	blt.n	80020a2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d99c      	bls.n	8001fdc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d0:	3314      	adds	r3, #20
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d8:	2b40      	cmp	r3, #64	; 0x40
 80020da:	d112      	bne.n	8002102 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f002 fe01 	bl	8004ce4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ea:	3314      	adds	r3, #20
 80020ec:	2240      	movs	r2, #64	; 0x40
 80020ee:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002100:	e01b      	b.n	800213a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210a:	3314      	adds	r3, #20
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d111      	bne.n	800213a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f839 	bl	800218e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002124:	3314      	adds	r3, #20
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002142:	3314      	adds	r3, #20
 8002144:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002148:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002152:	3314      	adds	r3, #20
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800215a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800215e:	d112      	bne.n	8002186 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f81e 	bl	80021a2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800216e:	3314      	adds	r3, #20
 8002170:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002174:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	460b      	mov	r3, r1
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b82      	cmp	r3, #130	; 0x82
 80021d6:	d101      	bne.n	80021dc <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
 80021da:	e050      	b.n	800227e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2282      	movs	r2, #130	; 0x82
 80021e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 031c 	and.w	r3, r3, #28
 80021f2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8a1b      	ldrh	r3, [r3, #16]
 80021f8:	02db      	lsls	r3, r3, #11
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002202:	897b      	ldrh	r3, [r7, #10]
 8002204:	019b      	lsls	r3, r3, #6
 8002206:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f023 0302 	bic.w	r3, r3, #2
 8002216:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002228:	f7fe ff6a 	bl	8001100 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800222e:	e015      	b.n	800225c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002230:	f7fe ff66 	bl	8001100 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223e:	d309      	bcc.n	8002254 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e014      	b.n	800227e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1e4      	bne.n	8002230 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	b29b      	uxth	r3, r3
 800226e:	461a      	mov	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	460b      	mov	r3, r1
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b42      	cmp	r3, #66	; 0x42
 80022a6:	d101      	bne.n	80022ac <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
 80022aa:	e04e      	b.n	800234a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2242      	movs	r2, #66	; 0x42
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 031c 	and.w	r3, r3, #28
 80022c2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8a1b      	ldrh	r3, [r3, #16]
 80022c8:	02db      	lsls	r3, r3, #11
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80022d2:	897b      	ldrh	r3, [r7, #10]
 80022d4:	019b      	lsls	r3, r3, #6
 80022d6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4313      	orrs	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f043 0302 	orr.w	r3, r3, #2
 80022e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002302:	f7fe fefd 	bl	8001100 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002308:	e015      	b.n	8002336 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800230a:	f7fe fef9 	bl	8001100 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002318:	d309      	bcc.n	800232e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e00d      	b.n	800234a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1e4      	bne.n	800230a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_ETH_Start+0x16>
 8002364:	2302      	movs	r3, #2
 8002366:	e01f      	b.n	80023a8 <HAL_ETH_Start+0x56>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fb45 	bl	8002a08 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fb7c 	bl	8002a7c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fc13 	bl	8002bb0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fbb0 	bl	8002af0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fbdd 	bl	8002b50 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ETH_Stop+0x16>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e01f      	b.n	8002406 <HAL_ETH_Stop+0x56>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fba2 	bl	8002b20 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fbcf 	bl	8002b80 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fb67 	bl	8002ab6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fbe1 	bl	8002bb0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fb27 	bl	8002a42 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_ETH_ConfigMAC+0x1c>
 8002428:	2302      	movs	r3, #2
 800242a:	e0e4      	b.n	80025f6 <HAL_ETH_ConfigMAC+0x1e6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80b1 	beq.w	80025a6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <HAL_ETH_ConfigMAC+0x1f0>)
 8002450:	4013      	ands	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800245c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002462:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002468:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800246e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002474:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800247a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002480:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002486:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800248c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002492:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002498:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800249e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b6:	2001      	movs	r0, #1
 80024b8:	f7fe fe2e 	bl	8001118 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024cc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80024d2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80024d8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80024de:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80024e4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80024ea:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80024f6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80024f8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002502:	2001      	movs	r0, #1
 8002504:	f7fe fe08 	bl	8001118 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002518:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002522:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002532:	4013      	ands	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002540:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002546:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800254c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002552:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002558:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002570:	2001      	movs	r0, #1
 8002572:	f7fe fdd1 	bl	8001118 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002596:	2001      	movs	r0, #1
 8002598:	f7fe fdbe 	bl	8001118 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	61da      	str	r2, [r3, #28]
 80025a4:	e01e      	b.n	80025e4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80025b4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7fe fd9e 	bl	8001118 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	ff20810f 	.word	0xff20810f

08002604 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0b0      	sub	sp, #192	; 0xc0
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002620:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002628:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002632:	2300      	movs	r3, #0
 8002634:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800264a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800264e:	663b      	str	r3, [r7, #96]	; 0x60
 8002650:	e001      	b.n	8002656 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800265a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002660:	2300      	movs	r3, #0
 8002662:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002670:	2340      	movs	r3, #64	; 0x40
 8002672:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80026c2:	2300      	movs	r3, #0
 80026c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80026d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026dc:	4bac      	ldr	r3, [pc, #688]	; (8002990 <ETH_MACDMAConfig+0x38c>)
 80026de:	4013      	ands	r3, r2
 80026e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80026e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80026e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80026e8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80026ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80026ec:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80026ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80026f0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80026f6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80026f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80026fa:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80026fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80026fe:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002704:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002708:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800270a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800270c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800270e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002710:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002714:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002718:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800271a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800272c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002738:	2001      	movs	r0, #1
 800273a:	f7fe fced 	bl	8001118 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002746:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002748:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800274a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800274c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800274e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002750:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002752:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002756:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800275c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800275e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002762:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002768:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800276c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002774:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002776:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002782:	2001      	movs	r0, #1
 8002784:	f7fe fcc8 	bl	8001118 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002790:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800279a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80027a4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027b4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027b8:	4013      	ands	r3, r2
 80027ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80027be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027c2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80027c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80027c8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80027ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80027ce:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80027d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80027d4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80027d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80027da:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80027dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80027e0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80027e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027f4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002800:	2001      	movs	r0, #1
 8002802:	f7fe fc89 	bl	8001118 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800280e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002810:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002814:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800282a:	2001      	movs	r0, #1
 800282c:	f7fe fc74 	bl	8001118 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002838:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800283e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002842:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002848:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800284c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800284e:	2300      	movs	r3, #0
 8002850:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800285e:	2304      	movs	r3, #4
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800286c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800286e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002878:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800287e:	2300      	movs	r3, #0
 8002880:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002882:	2300      	movs	r3, #0
 8002884:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288e:	3318      	adds	r3, #24
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002896:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800289a:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <ETH_MACDMAConfig+0x390>)
 800289c:	4013      	ands	r3, r2
 800289e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028a2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80028a4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028a6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80028a8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80028aa:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80028ac:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80028ae:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80028b0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80028b2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80028b4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80028b6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80028b8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80028ba:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80028be:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80028c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80028c2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80028c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d6:	3318      	adds	r3, #24
 80028d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028dc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e6:	3318      	adds	r3, #24
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028ee:	2001      	movs	r0, #1
 80028f0:	f7fe fc12 	bl	8001118 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028fc:	3318      	adds	r3, #24
 80028fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002902:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002908:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800290a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800290c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002910:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002914:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002918:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800291a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800291c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800291e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800293c:	2001      	movs	r0, #1
 800293e:	f7fe fbeb 	bl	8001118 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800294e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10f      	bne.n	8002978 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002960:	331c      	adds	r3, #28
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800296c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002974:	331c      	adds	r3, #28
 8002976:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	461a      	mov	r2, r3
 800297e:	2100      	movs	r1, #0
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f809 	bl	8002998 <ETH_MACAddressConfig>
}
 8002986:	bf00      	nop
 8002988:	37c0      	adds	r7, #192	; 0xc0
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	ff20810f 	.word	0xff20810f
 8002994:	f8de3f23 	.word	0xf8de3f23

08002998 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3305      	adds	r3, #5
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	021b      	lsls	r3, r3, #8
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	3204      	adds	r2, #4
 80029b0:	7812      	ldrb	r2, [r2, #0]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <ETH_MACAddressConfig+0x68>)
 80029ba:	4413      	add	r3, r2
 80029bc:	461a      	mov	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3303      	adds	r3, #3
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	061a      	lsls	r2, r3, #24
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3302      	adds	r3, #2
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3301      	adds	r3, #1
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	4313      	orrs	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <ETH_MACAddressConfig+0x6c>)
 80029ea:	4413      	add	r3, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	6013      	str	r3, [r2, #0]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40028040 	.word	0x40028040
 8002a04:	40028044 	.word	0x40028044

08002a08 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0208 	orr.w	r2, r2, #8
 8002a22:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	f000 f8e9 	bl	8002c04 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0208 	bic.w	r2, r2, #8
 8002a5c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f000 f8cc 	bl	8002c04 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0204 	orr.w	r2, r2, #4
 8002a96:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	f000 f8af 	bl	8002c04 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0204 	bic.w	r2, r2, #4
 8002ad0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f000 f892 	bl	8002c04 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	601a      	str	r2, [r3, #0]
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b00:	3318      	adds	r3, #24
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b10:	3318      	adds	r3, #24
 8002b12:	601a      	str	r2, [r3, #0]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b30:	3318      	adds	r3, #24
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b40:	3318      	adds	r3, #24
 8002b42:	601a      	str	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b60:	3318      	adds	r3, #24
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0202 	orr.w	r2, r2, #2
 8002b6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b70:	3318      	adds	r3, #24
 8002b72:	601a      	str	r2, [r3, #0]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b90:	3318      	adds	r3, #24
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 0202 	bic.w	r2, r2, #2
 8002b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba0:	3318      	adds	r3, #24
 8002ba2:	601a      	str	r2, [r3, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bc4:	3318      	adds	r3, #24
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bd4:	3318      	adds	r3, #24
 8002bd6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be0:	3318      	adds	r3, #24
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002be6:	2001      	movs	r0, #1
 8002be8:	f000 f80c 	bl	8002c04 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf6:	3318      	adds	r3, #24
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <ETH_Delay+0x38>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <ETH_Delay+0x3c>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0a5b      	lsrs	r3, r3, #9
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002c20:	bf00      	nop
  } 
  while (Delay --);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1e5a      	subs	r2, r3, #1
 8002c26:	60fa      	str	r2, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f9      	bne.n	8002c20 <ETH_Delay+0x1c>
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	10624dd3 	.word	0x10624dd3

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	; 0x24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61fb      	str	r3, [r7, #28]
 8002c5e:	e16b      	b.n	8002f38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c60:	2201      	movs	r2, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	f040 815a 	bne.w	8002f32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d005      	beq.n	8002c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d130      	bne.n	8002cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ccc:	2201      	movs	r2, #1
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 0201 	and.w	r2, r3, #1
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d017      	beq.n	8002d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d123      	bne.n	8002d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	08da      	lsrs	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3208      	adds	r2, #8
 8002d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	220f      	movs	r2, #15
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3208      	adds	r2, #8
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	2203      	movs	r2, #3
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0203 	and.w	r2, r3, #3
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80b4 	beq.w	8002f32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <HAL_GPIO_Init+0x30c>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4a5f      	ldr	r2, [pc, #380]	; (8002f50 <HAL_GPIO_Init+0x30c>)
 8002dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dda:	4b5d      	ldr	r3, [pc, #372]	; (8002f50 <HAL_GPIO_Init+0x30c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de6:	4a5b      	ldr	r2, [pc, #364]	; (8002f54 <HAL_GPIO_Init+0x310>)
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a52      	ldr	r2, [pc, #328]	; (8002f58 <HAL_GPIO_Init+0x314>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d02b      	beq.n	8002e6a <HAL_GPIO_Init+0x226>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a51      	ldr	r2, [pc, #324]	; (8002f5c <HAL_GPIO_Init+0x318>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d025      	beq.n	8002e66 <HAL_GPIO_Init+0x222>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a50      	ldr	r2, [pc, #320]	; (8002f60 <HAL_GPIO_Init+0x31c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01f      	beq.n	8002e62 <HAL_GPIO_Init+0x21e>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_GPIO_Init+0x320>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d019      	beq.n	8002e5e <HAL_GPIO_Init+0x21a>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a4e      	ldr	r2, [pc, #312]	; (8002f68 <HAL_GPIO_Init+0x324>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d013      	beq.n	8002e5a <HAL_GPIO_Init+0x216>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4d      	ldr	r2, [pc, #308]	; (8002f6c <HAL_GPIO_Init+0x328>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00d      	beq.n	8002e56 <HAL_GPIO_Init+0x212>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4c      	ldr	r2, [pc, #304]	; (8002f70 <HAL_GPIO_Init+0x32c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <HAL_GPIO_Init+0x20e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_GPIO_Init+0x330>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d101      	bne.n	8002e4e <HAL_GPIO_Init+0x20a>
 8002e4a:	2307      	movs	r3, #7
 8002e4c:	e00e      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	e00c      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e00a      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e56:	2305      	movs	r3, #5
 8002e58:	e008      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	e006      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e004      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e002      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_GPIO_Init+0x228>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f002 0203 	and.w	r2, r2, #3
 8002e72:	0092      	lsls	r2, r2, #2
 8002e74:	4093      	lsls	r3, r2
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e7c:	4935      	ldr	r1, [pc, #212]	; (8002f54 <HAL_GPIO_Init+0x310>)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e8a:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eae:	4a32      	ldr	r2, [pc, #200]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eb4:	4b30      	ldr	r3, [pc, #192]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed8:	4a27      	ldr	r2, [pc, #156]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f2c:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	f67f ae90 	bls.w	8002c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40013800 	.word	0x40013800
 8002f58:	40020000 	.word	0x40020000
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40020800 	.word	0x40020800
 8002f64:	40020c00 	.word	0x40020c00
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40021400 	.word	0x40021400
 8002f70:	40021800 	.word	0x40021800
 8002f74:	40021c00 	.word	0x40021c00
 8002f78:	40013c00 	.word	0x40013c00

08002f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	887b      	ldrh	r3, [r7, #2]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
 8002f98:	e001      	b.n	8002f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	807b      	strh	r3, [r7, #2]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fbc:	787b      	ldrb	r3, [r7, #1]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fc2:	887a      	ldrh	r2, [r7, #2]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fc8:	e003      	b.n	8002fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fca:	887b      	ldrh	r3, [r7, #2]
 8002fcc:	041a      	lsls	r2, r3, #16
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	619a      	str	r2, [r3, #24]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e264      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d075      	beq.n	80030ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffe:	4ba3      	ldr	r3, [pc, #652]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b04      	cmp	r3, #4
 8003008:	d00c      	beq.n	8003024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4ba0      	ldr	r3, [pc, #640]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003012:	2b08      	cmp	r3, #8
 8003014:	d112      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b9d      	ldr	r3, [pc, #628]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003022:	d10b      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	4b99      	ldr	r3, [pc, #612]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05b      	beq.n	80030e8 <HAL_RCC_OscConfig+0x108>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d157      	bne.n	80030e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e23f      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x74>
 8003046:	4b91      	ldr	r3, [pc, #580]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a90      	ldr	r2, [pc, #576]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e01d      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x98>
 800305e:	4b8b      	ldr	r3, [pc, #556]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a8a      	ldr	r2, [pc, #552]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a87      	ldr	r2, [pc, #540]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003078:	4b84      	ldr	r3, [pc, #528]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a83      	ldr	r2, [pc, #524]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800307e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a80      	ldr	r2, [pc, #512]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe f832 	bl	8001100 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe f82e 	bl	8001100 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e204      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0xc0>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe f81e 	bl	8001100 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe f81a 	bl	8001100 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1f0      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	4b6c      	ldr	r3, [pc, #432]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0xe8>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d063      	beq.n	80031be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f6:	4b65      	ldr	r3, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b62      	ldr	r3, [pc, #392]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310a:	2b08      	cmp	r3, #8
 800310c:	d11c      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b5f      	ldr	r3, [pc, #380]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	4b5c      	ldr	r3, [pc, #368]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d001      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e1c4      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003132:	4b56      	ldr	r3, [pc, #344]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4952      	ldr	r1, [pc, #328]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	e03a      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003150:	4b4f      	ldr	r3, [pc, #316]	; (8003290 <HAL_RCC_OscConfig+0x2b0>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fd ffd3 	bl	8001100 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315e:	f7fd ffcf 	bl	8001100 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1a5      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4940      	ldr	r1, [pc, #256]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
 8003190:	e015      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <HAL_RCC_OscConfig+0x2b0>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fd ffb2 	bl	8001100 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a0:	f7fd ffae 	bl	8001100 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e184      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d030      	beq.n	800322c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d016      	beq.n	8003200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d2:	4b30      	ldr	r3, [pc, #192]	; (8003294 <HAL_RCC_OscConfig+0x2b4>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fd ff92 	bl	8001100 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e0:	f7fd ff8e 	bl	8001100 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e164      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	4b26      	ldr	r3, [pc, #152]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x200>
 80031fe:	e015      	b.n	800322c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x2b4>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7fd ff7b 	bl	8001100 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320e:	f7fd ff77 	bl	8001100 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e14d      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f0      	bne.n	800320e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a0 	beq.w	800337a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	4a0e      	ldr	r2, [pc, #56]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003258:	6413      	str	r3, [r2, #64]	; 0x40
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RCC_OscConfig+0x2ac>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_OscConfig+0x2b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d121      	bne.n	80032ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <HAL_RCC_OscConfig+0x2b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <HAL_RCC_OscConfig+0x2b8>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7fd ff3d 	bl	8001100 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e011      	b.n	80032ae <HAL_RCC_OscConfig+0x2ce>
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	42470000 	.word	0x42470000
 8003294:	42470e80 	.word	0x42470e80
 8003298:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fd ff30 	bl	8001100 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e106      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ae:	4b85      	ldr	r3, [pc, #532]	; (80034c4 <HAL_RCC_OscConfig+0x4e4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
 80032c2:	4b81      	ldr	r3, [pc, #516]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a80      	ldr	r2, [pc, #512]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
 80032ce:	e01c      	b.n	800330a <HAL_RCC_OscConfig+0x32a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x312>
 80032d8:	4b7b      	ldr	r3, [pc, #492]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a7a      	ldr	r2, [pc, #488]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
 80032e4:	4b78      	ldr	r3, [pc, #480]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a77      	ldr	r2, [pc, #476]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	e00b      	b.n	800330a <HAL_RCC_OscConfig+0x32a>
 80032f2:	4b75      	ldr	r3, [pc, #468]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a74      	ldr	r2, [pc, #464]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
 80032fe:	4b72      	ldr	r3, [pc, #456]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003302:	4a71      	ldr	r2, [pc, #452]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d015      	beq.n	800333e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fd fef5 	bl	8001100 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fd fef1 	bl	8001100 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0c5      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	4b65      	ldr	r3, [pc, #404]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ee      	beq.n	800331a <HAL_RCC_OscConfig+0x33a>
 800333c:	e014      	b.n	8003368 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7fd fedf 	bl	8001100 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fd fedb 	bl	8001100 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e0af      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335c:	4b5a      	ldr	r3, [pc, #360]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336e:	4b56      	ldr	r3, [pc, #344]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 809b 	beq.w	80034ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d05c      	beq.n	800344a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d141      	bne.n	800341c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b4c      	ldr	r3, [pc, #304]	; (80034cc <HAL_RCC_OscConfig+0x4ec>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fd feaf 	bl	8001100 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fd feab 	bl	8001100 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e081      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b8:	4b43      	ldr	r3, [pc, #268]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69da      	ldr	r2, [r3, #28]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	019b      	lsls	r3, r3, #6
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
 80033e0:	431a      	orrs	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	061b      	lsls	r3, r3, #24
 80033e8:	4937      	ldr	r1, [pc, #220]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ee:	4b37      	ldr	r3, [pc, #220]	; (80034cc <HAL_RCC_OscConfig+0x4ec>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fd fe84 	bl	8001100 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fd fe80 	bl	8001100 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e056      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b2e      	ldr	r3, [pc, #184]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x41c>
 800341a:	e04e      	b.n	80034ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341c:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <HAL_RCC_OscConfig+0x4ec>)
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003422:	f7fd fe6d 	bl	8001100 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342a:	f7fd fe69 	bl	8001100 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e03f      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343c:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <HAL_RCC_OscConfig+0x44a>
 8003448:	e037      	b.n	80034ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e032      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003456:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <HAL_RCC_OscConfig+0x4e8>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d028      	beq.n	80034b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346e:	429a      	cmp	r2, r3
 8003470:	d121      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d11a      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003486:	4013      	ands	r3, r2
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800348c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800348e:	4293      	cmp	r3, r2
 8003490:	d111      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	3b01      	subs	r3, #1
 80034a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40007000 	.word	0x40007000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	42470060 	.word	0x42470060

080034d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0cc      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b68      	ldr	r3, [pc, #416]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d90c      	bls.n	800350c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b65      	ldr	r3, [pc, #404]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b63      	ldr	r3, [pc, #396]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0b8      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003524:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800352e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800353c:	4b53      	ldr	r3, [pc, #332]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a52      	ldr	r2, [pc, #328]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b50      	ldr	r3, [pc, #320]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	494d      	ldr	r1, [pc, #308]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d044      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d119      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e07f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d003      	beq.n	800358e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358a:	2b03      	cmp	r3, #3
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b3f      	ldr	r3, [pc, #252]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e067      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b37      	ldr	r3, [pc, #220]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4934      	ldr	r1, [pc, #208]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7fd fd9e 	bl	8001100 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fd fd9a 	bl	8001100 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e04f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d20c      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b22      	ldr	r3, [pc, #136]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e032      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4916      	ldr	r1, [pc, #88]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490e      	ldr	r1, [pc, #56]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003656:	f000 f821 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	490a      	ldr	r1, [pc, #40]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fb76 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023c00 	.word	0x40023c00
 800368c:	40023800 	.word	0x40023800
 8003690:	0801f4c4 	.word	0x0801f4c4
 8003694:	20000000 	.word	0x20000000
 8003698:	20000004 	.word	0x20000004

0800369c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	2300      	movs	r3, #0
 80036ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b4:	4b67      	ldr	r3, [pc, #412]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d00d      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x40>
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	f200 80bd 	bhi.w	8003840 <HAL_RCC_GetSysClockFreq+0x1a4>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ce:	e0b7      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d0:	4b61      	ldr	r3, [pc, #388]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80036d2:	60bb      	str	r3, [r7, #8]
       break;
 80036d4:	e0b7      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036d6:	4b61      	ldr	r3, [pc, #388]	; (800385c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80036d8:	60bb      	str	r3, [r7, #8]
      break;
 80036da:	e0b4      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036dc:	4b5d      	ldr	r3, [pc, #372]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e6:	4b5b      	ldr	r3, [pc, #364]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d04d      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b58      	ldr	r3, [pc, #352]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	461a      	mov	r2, r3
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003702:	f04f 0100 	mov.w	r1, #0
 8003706:	ea02 0800 	and.w	r8, r2, r0
 800370a:	ea03 0901 	and.w	r9, r3, r1
 800370e:	4640      	mov	r0, r8
 8003710:	4649      	mov	r1, r9
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	014b      	lsls	r3, r1, #5
 800371c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003720:	0142      	lsls	r2, r0, #5
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	ebb0 0008 	subs.w	r0, r0, r8
 800372a:	eb61 0109 	sbc.w	r1, r1, r9
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	018b      	lsls	r3, r1, #6
 8003738:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800373c:	0182      	lsls	r2, r0, #6
 800373e:	1a12      	subs	r2, r2, r0
 8003740:	eb63 0301 	sbc.w	r3, r3, r1
 8003744:	f04f 0000 	mov.w	r0, #0
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	00d9      	lsls	r1, r3, #3
 800374e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003752:	00d0      	lsls	r0, r2, #3
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	eb12 0208 	adds.w	r2, r2, r8
 800375c:	eb43 0309 	adc.w	r3, r3, r9
 8003760:	f04f 0000 	mov.w	r0, #0
 8003764:	f04f 0100 	mov.w	r1, #0
 8003768:	0259      	lsls	r1, r3, #9
 800376a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800376e:	0250      	lsls	r0, r2, #9
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	461a      	mov	r2, r3
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	f7fc fd7e 	bl	8000280 <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4613      	mov	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e04a      	b.n	8003824 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800378e:	4b31      	ldr	r3, [pc, #196]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	099b      	lsrs	r3, r3, #6
 8003794:	461a      	mov	r2, r3
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	ea02 0400 	and.w	r4, r2, r0
 80037a6:	ea03 0501 	and.w	r5, r3, r1
 80037aa:	4620      	mov	r0, r4
 80037ac:	4629      	mov	r1, r5
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	014b      	lsls	r3, r1, #5
 80037b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037bc:	0142      	lsls	r2, r0, #5
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	1b00      	subs	r0, r0, r4
 80037c4:	eb61 0105 	sbc.w	r1, r1, r5
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	018b      	lsls	r3, r1, #6
 80037d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037d6:	0182      	lsls	r2, r0, #6
 80037d8:	1a12      	subs	r2, r2, r0
 80037da:	eb63 0301 	sbc.w	r3, r3, r1
 80037de:	f04f 0000 	mov.w	r0, #0
 80037e2:	f04f 0100 	mov.w	r1, #0
 80037e6:	00d9      	lsls	r1, r3, #3
 80037e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ec:	00d0      	lsls	r0, r2, #3
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	1912      	adds	r2, r2, r4
 80037f4:	eb45 0303 	adc.w	r3, r5, r3
 80037f8:	f04f 0000 	mov.w	r0, #0
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	0299      	lsls	r1, r3, #10
 8003802:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003806:	0290      	lsls	r0, r2, #10
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4610      	mov	r0, r2
 800380e:	4619      	mov	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	461a      	mov	r2, r3
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	f7fc fd32 	bl	8000280 <__aeabi_uldivmod>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4613      	mov	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	0c1b      	lsrs	r3, r3, #16
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	3301      	adds	r3, #1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	60bb      	str	r3, [r7, #8]
      break;
 800383e:	e002      	b.n	8003846 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003842:	60bb      	str	r3, [r7, #8]
      break;
 8003844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003846:	68bb      	ldr	r3, [r7, #8]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	00f42400 	.word	0x00f42400
 800385c:	007a1200 	.word	0x007a1200

08003860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003864:	4b03      	ldr	r3, [pc, #12]	; (8003874 <HAL_RCC_GetHCLKFreq+0x14>)
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20000000 	.word	0x20000000

08003878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800387c:	f7ff fff0 	bl	8003860 <HAL_RCC_GetHCLKFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	0a9b      	lsrs	r3, r3, #10
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4903      	ldr	r1, [pc, #12]	; (800389c <HAL_RCC_GetPCLK1Freq+0x24>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003894:	4618      	mov	r0, r3
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	0801f4d4 	.word	0x0801f4d4

080038a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	220f      	movs	r2, #15
 80038ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_GetClockConfig+0x5c>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <HAL_RCC_GetClockConfig+0x5c>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038c8:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <HAL_RCC_GetClockConfig+0x5c>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038d4:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_RCC_GetClockConfig+0x5c>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	08db      	lsrs	r3, r3, #3
 80038da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038e2:	4b07      	ldr	r3, [pc, #28]	; (8003900 <HAL_RCC_GetClockConfig+0x60>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0207 	and.w	r2, r3, #7
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	601a      	str	r2, [r3, #0]
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40023800 	.word	0x40023800
 8003900:	40023c00 	.word	0x40023c00

08003904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07b      	b.n	8003a0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d108      	bne.n	8003930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003926:	d009      	beq.n	800393c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
 800392e:	e005      	b.n	800393c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd f8fc 	bl	8000b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003972:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	ea42 0103 	orr.w	r1, r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f003 0104 	and.w	r1, r3, #4
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0210 	and.w	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b08c      	sub	sp, #48	; 0x30
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a24:	2301      	movs	r3, #1
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x26>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e18a      	b.n	8003d52 <HAL_SPI_TransmitReceive+0x33c>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a44:	f7fd fb5c 	bl	8001100 <HAL_GetTick>
 8003a48:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d00f      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x70>
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a6c:	d107      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x68>
 8003a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d003      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a84:	e15b      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_SPI_TransmitReceive+0x82>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_TransmitReceive+0x82>
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a9e:	e14e      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d003      	beq.n	8003ab4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2205      	movs	r2, #5
 8003ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	887a      	ldrh	r2, [r7, #2]
 8003aca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	887a      	ldrh	r2, [r7, #2]
 8003ad6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d007      	beq.n	8003b08 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b10:	d178      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x10a>
 8003b1a:	8b7b      	ldrh	r3, [r7, #26]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d166      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	1c9a      	adds	r2, r3, #2
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b44:	e053      	b.n	8003bee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d11b      	bne.n	8003b8c <HAL_SPI_TransmitReceive+0x176>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x176>
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d113      	bne.n	8003b8c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	1c9a      	adds	r2, r3, #2
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d119      	bne.n	8003bce <HAL_SPI_TransmitReceive+0x1b8>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d014      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	1c9a      	adds	r2, r3, #2
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bce:	f7fd fa97 	bl	8001100 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d807      	bhi.n	8003bee <HAL_SPI_TransmitReceive+0x1d8>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d003      	beq.n	8003bee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bec:	e0a7      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1a6      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x130>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1a1      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x130>
 8003c02:	e07c      	b.n	8003cfe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_SPI_TransmitReceive+0x1fc>
 8003c0c:	8b7b      	ldrh	r3, [r7, #26]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d16b      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c38:	e057      	b.n	8003cea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d11c      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x26c>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d017      	beq.n	8003c82 <HAL_SPI_TransmitReceive+0x26c>
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d114      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d119      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x2ae>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d014      	beq.n	8003cc4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cc4:	f7fd fa1c 	bl	8001100 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d803      	bhi.n	8003cdc <HAL_SPI_TransmitReceive+0x2c6>
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d102      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x2cc>
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ce8:	e029      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1a2      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x224>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d19d      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f8b2 	bl	8003e6c <SPI_EndRxTxTransaction>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d006      	beq.n	8003d1c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d1a:	e010      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	e000      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3730      	adds	r7, #48	; 0x30
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d6c:	f7fd f9c8 	bl	8001100 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d7c:	f7fd f9c0 	bl	8001100 <HAL_GetTick>
 8003d80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d82:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	015b      	lsls	r3, r3, #5
 8003d88:	0d1b      	lsrs	r3, r3, #20
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d92:	e054      	b.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d050      	beq.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d9c:	f7fd f9b0 	bl	8001100 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d902      	bls.n	8003db2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d13d      	bne.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dca:	d111      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd4:	d004      	beq.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d107      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df8:	d10f      	bne.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e017      	b.n	8003e5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d19b      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000000 	.word	0x20000000

08003e6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <SPI_EndRxTxTransaction+0x7c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	; (8003eec <SPI_EndRxTxTransaction+0x80>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	0d5b      	lsrs	r3, r3, #21
 8003e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e88:	fb02 f303 	mul.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e96:	d112      	bne.n	8003ebe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f7ff ff5a 	bl	8003d5c <SPI_WaitFlagStateUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e00f      	b.n	8003ede <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b80      	cmp	r3, #128	; 0x80
 8003ed6:	d0f2      	beq.n	8003ebe <SPI_EndRxTxTransaction+0x52>
 8003ed8:	e000      	b.n	8003edc <SPI_EndRxTxTransaction+0x70>
        break;
 8003eda:	bf00      	nop
  }

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	165e9f81 	.word	0x165e9f81

08003ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e041      	b.n	8003f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7fc feca 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f000 fafe 	bl	8004530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e046      	b.n	8004036 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a23      	ldr	r2, [pc, #140]	; (8004044 <HAL_TIM_Base_Start+0xb4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d022      	beq.n	8004000 <HAL_TIM_Base_Start+0x70>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d01d      	beq.n	8004000 <HAL_TIM_Base_Start+0x70>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <HAL_TIM_Base_Start+0xb8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d018      	beq.n	8004000 <HAL_TIM_Base_Start+0x70>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	; (800404c <HAL_TIM_Base_Start+0xbc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d013      	beq.n	8004000 <HAL_TIM_Base_Start+0x70>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <HAL_TIM_Base_Start+0xc0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00e      	beq.n	8004000 <HAL_TIM_Base_Start+0x70>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <HAL_TIM_Base_Start+0xc4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d009      	beq.n	8004000 <HAL_TIM_Base_Start+0x70>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_TIM_Base_Start+0xc8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d004      	beq.n	8004000 <HAL_TIM_Base_Start+0x70>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a18      	ldr	r2, [pc, #96]	; (800405c <HAL_TIM_Base_Start+0xcc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d111      	bne.n	8004024 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b06      	cmp	r3, #6
 8004010:	d010      	beq.n	8004034 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0201 	orr.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004022:	e007      	b.n	8004034 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40010000 	.word	0x40010000
 8004048:	40000400 	.word	0x40000400
 800404c:	40000800 	.word	0x40000800
 8004050:	40000c00 	.word	0x40000c00
 8004054:	40010400 	.word	0x40010400
 8004058:	40014000 	.word	0x40014000
 800405c:	40001800 	.word	0x40001800

08004060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d001      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e04e      	b.n	8004116 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a23      	ldr	r2, [pc, #140]	; (8004124 <HAL_TIM_Base_Start_IT+0xc4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d022      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x80>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a2:	d01d      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x80>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <HAL_TIM_Base_Start_IT+0xc8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d018      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x80>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1e      	ldr	r2, [pc, #120]	; (800412c <HAL_TIM_Base_Start_IT+0xcc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d013      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x80>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <HAL_TIM_Base_Start_IT+0xd0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00e      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x80>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <HAL_TIM_Base_Start_IT+0xd4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d009      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x80>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a19      	ldr	r2, [pc, #100]	; (8004138 <HAL_TIM_Base_Start_IT+0xd8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d004      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x80>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a18      	ldr	r2, [pc, #96]	; (800413c <HAL_TIM_Base_Start_IT+0xdc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d111      	bne.n	8004104 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d010      	beq.n	8004114 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 0201 	orr.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004102:	e007      	b.n	8004114 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40000c00 	.word	0x40000c00
 8004134:	40010400 	.word	0x40010400
 8004138:	40014000 	.word	0x40014000
 800413c:	40001800 	.word	0x40001800

08004140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b02      	cmp	r3, #2
 8004154:	d122      	bne.n	800419c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d11b      	bne.n	800419c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0202 	mvn.w	r2, #2
 800416c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f9b5 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004188:	e005      	b.n	8004196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f9a7 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f9b8 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d122      	bne.n	80041f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b04      	cmp	r3, #4
 80041b6:	d11b      	bne.n	80041f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0204 	mvn.w	r2, #4
 80041c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f98b 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f97d 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f98e 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b08      	cmp	r3, #8
 80041fc:	d122      	bne.n	8004244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b08      	cmp	r3, #8
 800420a:	d11b      	bne.n	8004244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0208 	mvn.w	r2, #8
 8004214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2204      	movs	r2, #4
 800421a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f961 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004230:	e005      	b.n	800423e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f953 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f964 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b10      	cmp	r3, #16
 8004250:	d122      	bne.n	8004298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b10      	cmp	r3, #16
 800425e:	d11b      	bne.n	8004298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0210 	mvn.w	r2, #16
 8004268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2208      	movs	r2, #8
 800426e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f937 	bl	80044f2 <HAL_TIM_IC_CaptureCallback>
 8004284:	e005      	b.n	8004292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f929 	bl	80044de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f93a 	bl	8004506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d10e      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d107      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0201 	mvn.w	r2, #1
 80042bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc fbfa 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ce:	2b80      	cmp	r3, #128	; 0x80
 80042d0:	d10e      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042dc:	2b80      	cmp	r3, #128	; 0x80
 80042de:	d107      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fae0 	bl	80048b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	d10e      	bne.n	800431c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	d107      	bne.n	800431c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f8ff 	bl	800451a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b20      	cmp	r3, #32
 8004328:	d10e      	bne.n	8004348 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0320 	and.w	r3, r3, #32
 8004334:	2b20      	cmp	r3, #32
 8004336:	d107      	bne.n	8004348 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f06f 0220 	mvn.w	r2, #32
 8004340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 faaa 	bl	800489c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIM_ConfigClockSource+0x1c>
 8004368:	2302      	movs	r3, #2
 800436a:	e0b4      	b.n	80044d6 <HAL_TIM_ConfigClockSource+0x186>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800438a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004392:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a4:	d03e      	beq.n	8004424 <HAL_TIM_ConfigClockSource+0xd4>
 80043a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043aa:	f200 8087 	bhi.w	80044bc <HAL_TIM_ConfigClockSource+0x16c>
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	f000 8086 	beq.w	80044c2 <HAL_TIM_ConfigClockSource+0x172>
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ba:	d87f      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x16c>
 80043bc:	2b70      	cmp	r3, #112	; 0x70
 80043be:	d01a      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0xa6>
 80043c0:	2b70      	cmp	r3, #112	; 0x70
 80043c2:	d87b      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x16c>
 80043c4:	2b60      	cmp	r3, #96	; 0x60
 80043c6:	d050      	beq.n	800446a <HAL_TIM_ConfigClockSource+0x11a>
 80043c8:	2b60      	cmp	r3, #96	; 0x60
 80043ca:	d877      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x16c>
 80043cc:	2b50      	cmp	r3, #80	; 0x50
 80043ce:	d03c      	beq.n	800444a <HAL_TIM_ConfigClockSource+0xfa>
 80043d0:	2b50      	cmp	r3, #80	; 0x50
 80043d2:	d873      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x16c>
 80043d4:	2b40      	cmp	r3, #64	; 0x40
 80043d6:	d058      	beq.n	800448a <HAL_TIM_ConfigClockSource+0x13a>
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d86f      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x16c>
 80043dc:	2b30      	cmp	r3, #48	; 0x30
 80043de:	d064      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15a>
 80043e0:	2b30      	cmp	r3, #48	; 0x30
 80043e2:	d86b      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x16c>
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d060      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15a>
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d867      	bhi.n	80044bc <HAL_TIM_ConfigClockSource+0x16c>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d05c      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15a>
 80043f0:	2b10      	cmp	r3, #16
 80043f2:	d05a      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0x15a>
 80043f4:	e062      	b.n	80044bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6899      	ldr	r1, [r3, #8]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f000 f9ad 	bl	8004764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004418:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	609a      	str	r2, [r3, #8]
      break;
 8004422:	e04f      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	6899      	ldr	r1, [r3, #8]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f000 f996 	bl	8004764 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004446:	609a      	str	r2, [r3, #8]
      break;
 8004448:	e03c      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	461a      	mov	r2, r3
 8004458:	f000 f90a 	bl	8004670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2150      	movs	r1, #80	; 0x50
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f963 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 8004468:	e02c      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	6859      	ldr	r1, [r3, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	461a      	mov	r2, r3
 8004478:	f000 f929 	bl	80046ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2160      	movs	r1, #96	; 0x60
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f953 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 8004488:	e01c      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6859      	ldr	r1, [r3, #4]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	461a      	mov	r2, r3
 8004498:	f000 f8ea 	bl	8004670 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2140      	movs	r1, #64	; 0x40
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f943 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 80044a8:	e00c      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4619      	mov	r1, r3
 80044b4:	4610      	mov	r0, r2
 80044b6:	f000 f93a 	bl	800472e <TIM_ITRx_SetConfig>
      break;
 80044ba:	e003      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
      break;
 80044c0:	e000      	b.n	80044c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
	...

08004530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a40      	ldr	r2, [pc, #256]	; (8004644 <TIM_Base_SetConfig+0x114>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d013      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800454e:	d00f      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3d      	ldr	r2, [pc, #244]	; (8004648 <TIM_Base_SetConfig+0x118>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00b      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a3c      	ldr	r2, [pc, #240]	; (800464c <TIM_Base_SetConfig+0x11c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a3b      	ldr	r2, [pc, #236]	; (8004650 <TIM_Base_SetConfig+0x120>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <TIM_Base_SetConfig+0x40>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a3a      	ldr	r2, [pc, #232]	; (8004654 <TIM_Base_SetConfig+0x124>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d108      	bne.n	8004582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a2f      	ldr	r2, [pc, #188]	; (8004644 <TIM_Base_SetConfig+0x114>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d02b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004590:	d027      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2c      	ldr	r2, [pc, #176]	; (8004648 <TIM_Base_SetConfig+0x118>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d023      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2b      	ldr	r2, [pc, #172]	; (800464c <TIM_Base_SetConfig+0x11c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01f      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <TIM_Base_SetConfig+0x120>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d01b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a29      	ldr	r2, [pc, #164]	; (8004654 <TIM_Base_SetConfig+0x124>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d017      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a28      	ldr	r2, [pc, #160]	; (8004658 <TIM_Base_SetConfig+0x128>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d013      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a27      	ldr	r2, [pc, #156]	; (800465c <TIM_Base_SetConfig+0x12c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00f      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a26      	ldr	r2, [pc, #152]	; (8004660 <TIM_Base_SetConfig+0x130>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00b      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a25      	ldr	r2, [pc, #148]	; (8004664 <TIM_Base_SetConfig+0x134>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a24      	ldr	r2, [pc, #144]	; (8004668 <TIM_Base_SetConfig+0x138>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d003      	beq.n	80045e2 <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a23      	ldr	r2, [pc, #140]	; (800466c <TIM_Base_SetConfig+0x13c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0a      	ldr	r2, [pc, #40]	; (8004644 <TIM_Base_SetConfig+0x114>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d003      	beq.n	8004628 <TIM_Base_SetConfig+0xf8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a0c      	ldr	r2, [pc, #48]	; (8004654 <TIM_Base_SetConfig+0x124>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	615a      	str	r2, [r3, #20]
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00
 8004654:	40010400 	.word	0x40010400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	40001800 	.word	0x40001800
 8004668:	40001c00 	.word	0x40001c00
 800466c:	40002000 	.word	0x40002000

08004670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0201 	bic.w	r2, r3, #1
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800469a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 030a 	bic.w	r3, r3, #10
 80046ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	621a      	str	r2, [r3, #32]
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b087      	sub	sp, #28
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0210 	bic.w	r2, r3, #16
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	031b      	lsls	r3, r3, #12
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800470a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	f043 0307 	orr.w	r3, r3, #7
 8004750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800477e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	021a      	lsls	r2, r3, #8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	431a      	orrs	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e05a      	b.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a21      	ldr	r2, [pc, #132]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d01d      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1a      	ldr	r2, [pc, #104]	; (800488c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a17      	ldr	r2, [pc, #92]	; (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a15      	ldr	r2, [pc, #84]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d10c      	bne.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4313      	orrs	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40010400 	.word	0x40010400
 8004894:	40014000 	.word	0x40014000
 8004898:	40001800 	.word	0x40001800

0800489c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80048ca:	4ba0      	ldr	r3, [pc, #640]	; (8004b4c <MX_LWIP_Init+0x288>)
 80048cc:	22c0      	movs	r2, #192	; 0xc0
 80048ce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80048d0:	4b9e      	ldr	r3, [pc, #632]	; (8004b4c <MX_LWIP_Init+0x288>)
 80048d2:	22a8      	movs	r2, #168	; 0xa8
 80048d4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80048d6:	4b9d      	ldr	r3, [pc, #628]	; (8004b4c <MX_LWIP_Init+0x288>)
 80048d8:	2201      	movs	r2, #1
 80048da:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 80048dc:	4b9b      	ldr	r3, [pc, #620]	; (8004b4c <MX_LWIP_Init+0x288>)
 80048de:	2202      	movs	r2, #2
 80048e0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80048e2:	4b9b      	ldr	r3, [pc, #620]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80048e4:	22ff      	movs	r2, #255	; 0xff
 80048e6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80048e8:	4b99      	ldr	r3, [pc, #612]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80048ea:	22ff      	movs	r2, #255	; 0xff
 80048ec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80048ee:	4b98      	ldr	r3, [pc, #608]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80048f0:	22ff      	movs	r2, #255	; 0xff
 80048f2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80048f4:	4b96      	ldr	r3, [pc, #600]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80048fa:	4b96      	ldr	r3, [pc, #600]	; (8004b54 <MX_LWIP_Init+0x290>)
 80048fc:	22c0      	movs	r2, #192	; 0xc0
 80048fe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004900:	4b94      	ldr	r3, [pc, #592]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004902:	22a8      	movs	r2, #168	; 0xa8
 8004904:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004906:	4b93      	ldr	r3, [pc, #588]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004908:	2201      	movs	r2, #1
 800490a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800490c:	4b91      	ldr	r3, [pc, #580]	; (8004b54 <MX_LWIP_Init+0x290>)
 800490e:	2201      	movs	r2, #1
 8004910:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004912:	2100      	movs	r1, #0
 8004914:	2000      	movs	r0, #0
 8004916:	f008 fc49 	bl	800d1ac <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800491a:	4b8c      	ldr	r3, [pc, #560]	; (8004b4c <MX_LWIP_Init+0x288>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	061a      	lsls	r2, r3, #24
 8004920:	4b8a      	ldr	r3, [pc, #552]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	431a      	orrs	r2, r3
 8004928:	4b88      	ldr	r3, [pc, #544]	; (8004b4c <MX_LWIP_Init+0x288>)
 800492a:	789b      	ldrb	r3, [r3, #2]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	4313      	orrs	r3, r2
 8004930:	4a86      	ldr	r2, [pc, #536]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004932:	78d2      	ldrb	r2, [r2, #3]
 8004934:	4313      	orrs	r3, r2
 8004936:	061a      	lsls	r2, r3, #24
 8004938:	4b84      	ldr	r3, [pc, #528]	; (8004b4c <MX_LWIP_Init+0x288>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	0619      	lsls	r1, r3, #24
 800493e:	4b83      	ldr	r3, [pc, #524]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	4319      	orrs	r1, r3
 8004946:	4b81      	ldr	r3, [pc, #516]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004948:	789b      	ldrb	r3, [r3, #2]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	430b      	orrs	r3, r1
 800494e:	497f      	ldr	r1, [pc, #508]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004950:	78c9      	ldrb	r1, [r1, #3]
 8004952:	430b      	orrs	r3, r1
 8004954:	021b      	lsls	r3, r3, #8
 8004956:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800495a:	431a      	orrs	r2, r3
 800495c:	4b7b      	ldr	r3, [pc, #492]	; (8004b4c <MX_LWIP_Init+0x288>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	0619      	lsls	r1, r3, #24
 8004962:	4b7a      	ldr	r3, [pc, #488]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	4319      	orrs	r1, r3
 800496a:	4b78      	ldr	r3, [pc, #480]	; (8004b4c <MX_LWIP_Init+0x288>)
 800496c:	789b      	ldrb	r3, [r3, #2]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	430b      	orrs	r3, r1
 8004972:	4976      	ldr	r1, [pc, #472]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004974:	78c9      	ldrb	r1, [r1, #3]
 8004976:	430b      	orrs	r3, r1
 8004978:	0a1b      	lsrs	r3, r3, #8
 800497a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800497e:	431a      	orrs	r2, r3
 8004980:	4b72      	ldr	r3, [pc, #456]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	0619      	lsls	r1, r3, #24
 8004986:	4b71      	ldr	r3, [pc, #452]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	4319      	orrs	r1, r3
 800498e:	4b6f      	ldr	r3, [pc, #444]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004990:	789b      	ldrb	r3, [r3, #2]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	430b      	orrs	r3, r1
 8004996:	496d      	ldr	r1, [pc, #436]	; (8004b4c <MX_LWIP_Init+0x288>)
 8004998:	78c9      	ldrb	r1, [r1, #3]
 800499a:	430b      	orrs	r3, r1
 800499c:	0e1b      	lsrs	r3, r3, #24
 800499e:	4313      	orrs	r3, r2
 80049a0:	4a6d      	ldr	r2, [pc, #436]	; (8004b58 <MX_LWIP_Init+0x294>)
 80049a2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80049a4:	4b6a      	ldr	r3, [pc, #424]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	061a      	lsls	r2, r3, #24
 80049aa:	4b69      	ldr	r3, [pc, #420]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	041b      	lsls	r3, r3, #16
 80049b0:	431a      	orrs	r2, r3
 80049b2:	4b67      	ldr	r3, [pc, #412]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049b4:	789b      	ldrb	r3, [r3, #2]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	4313      	orrs	r3, r2
 80049ba:	4a65      	ldr	r2, [pc, #404]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049bc:	78d2      	ldrb	r2, [r2, #3]
 80049be:	4313      	orrs	r3, r2
 80049c0:	061a      	lsls	r2, r3, #24
 80049c2:	4b63      	ldr	r3, [pc, #396]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	0619      	lsls	r1, r3, #24
 80049c8:	4b61      	ldr	r3, [pc, #388]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	4319      	orrs	r1, r3
 80049d0:	4b5f      	ldr	r3, [pc, #380]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049d2:	789b      	ldrb	r3, [r3, #2]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	430b      	orrs	r3, r1
 80049d8:	495d      	ldr	r1, [pc, #372]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049da:	78c9      	ldrb	r1, [r1, #3]
 80049dc:	430b      	orrs	r3, r1
 80049de:	021b      	lsls	r3, r3, #8
 80049e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049e4:	431a      	orrs	r2, r3
 80049e6:	4b5a      	ldr	r3, [pc, #360]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	0619      	lsls	r1, r3, #24
 80049ec:	4b58      	ldr	r3, [pc, #352]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	4319      	orrs	r1, r3
 80049f4:	4b56      	ldr	r3, [pc, #344]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049f6:	789b      	ldrb	r3, [r3, #2]
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	430b      	orrs	r3, r1
 80049fc:	4954      	ldr	r1, [pc, #336]	; (8004b50 <MX_LWIP_Init+0x28c>)
 80049fe:	78c9      	ldrb	r1, [r1, #3]
 8004a00:	430b      	orrs	r3, r1
 8004a02:	0a1b      	lsrs	r3, r3, #8
 8004a04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	4b51      	ldr	r3, [pc, #324]	; (8004b50 <MX_LWIP_Init+0x28c>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	0619      	lsls	r1, r3, #24
 8004a10:	4b4f      	ldr	r3, [pc, #316]	; (8004b50 <MX_LWIP_Init+0x28c>)
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	4319      	orrs	r1, r3
 8004a18:	4b4d      	ldr	r3, [pc, #308]	; (8004b50 <MX_LWIP_Init+0x28c>)
 8004a1a:	789b      	ldrb	r3, [r3, #2]
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	494b      	ldr	r1, [pc, #300]	; (8004b50 <MX_LWIP_Init+0x28c>)
 8004a22:	78c9      	ldrb	r1, [r1, #3]
 8004a24:	430b      	orrs	r3, r1
 8004a26:	0e1b      	lsrs	r3, r3, #24
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	4a4c      	ldr	r2, [pc, #304]	; (8004b5c <MX_LWIP_Init+0x298>)
 8004a2c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004a2e:	4b49      	ldr	r3, [pc, #292]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	061a      	lsls	r2, r3, #24
 8004a34:	4b47      	ldr	r3, [pc, #284]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	041b      	lsls	r3, r3, #16
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	4b45      	ldr	r3, [pc, #276]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a3e:	789b      	ldrb	r3, [r3, #2]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	4313      	orrs	r3, r2
 8004a44:	4a43      	ldr	r2, [pc, #268]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a46:	78d2      	ldrb	r2, [r2, #3]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	061a      	lsls	r2, r3, #24
 8004a4c:	4b41      	ldr	r3, [pc, #260]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	0619      	lsls	r1, r3, #24
 8004a52:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	041b      	lsls	r3, r3, #16
 8004a58:	4319      	orrs	r1, r3
 8004a5a:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a5c:	789b      	ldrb	r3, [r3, #2]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	430b      	orrs	r3, r1
 8004a62:	493c      	ldr	r1, [pc, #240]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a64:	78c9      	ldrb	r1, [r1, #3]
 8004a66:	430b      	orrs	r3, r1
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	4b38      	ldr	r3, [pc, #224]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	0619      	lsls	r1, r3, #24
 8004a76:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a78:	785b      	ldrb	r3, [r3, #1]
 8004a7a:	041b      	lsls	r3, r3, #16
 8004a7c:	4319      	orrs	r1, r3
 8004a7e:	4b35      	ldr	r3, [pc, #212]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a80:	789b      	ldrb	r3, [r3, #2]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	430b      	orrs	r3, r1
 8004a86:	4933      	ldr	r1, [pc, #204]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a88:	78c9      	ldrb	r1, [r1, #3]
 8004a8a:	430b      	orrs	r3, r1
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a92:	431a      	orrs	r2, r3
 8004a94:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	0619      	lsls	r1, r3, #24
 8004a9a:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	041b      	lsls	r3, r3, #16
 8004aa0:	4319      	orrs	r1, r3
 8004aa2:	4b2c      	ldr	r3, [pc, #176]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004aa4:	789b      	ldrb	r3, [r3, #2]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	492a      	ldr	r1, [pc, #168]	; (8004b54 <MX_LWIP_Init+0x290>)
 8004aac:	78c9      	ldrb	r1, [r1, #3]
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	0e1b      	lsrs	r3, r3, #24
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <MX_LWIP_Init+0x29c>)
 8004ab6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004ab8:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <MX_LWIP_Init+0x2a0>)
 8004aba:	9302      	str	r3, [sp, #8]
 8004abc:	4b2a      	ldr	r3, [pc, #168]	; (8004b68 <MX_LWIP_Init+0x2a4>)
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4b26      	ldr	r3, [pc, #152]	; (8004b60 <MX_LWIP_Init+0x29c>)
 8004ac6:	4a25      	ldr	r2, [pc, #148]	; (8004b5c <MX_LWIP_Init+0x298>)
 8004ac8:	4923      	ldr	r1, [pc, #140]	; (8004b58 <MX_LWIP_Init+0x294>)
 8004aca:	4828      	ldr	r0, [pc, #160]	; (8004b6c <MX_LWIP_Init+0x2a8>)
 8004acc:	f009 f8f2 	bl	800dcb4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004ad0:	4826      	ldr	r0, [pc, #152]	; (8004b6c <MX_LWIP_Init+0x2a8>)
 8004ad2:	f009 faa1 	bl	800e018 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004ad6:	4b25      	ldr	r3, [pc, #148]	; (8004b6c <MX_LWIP_Init+0x2a8>)
 8004ad8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004ae8:	4820      	ldr	r0, [pc, #128]	; (8004b6c <MX_LWIP_Init+0x2a8>)
 8004aea:	f009 faa5 	bl	800e038 <netif_set_up>
 8004aee:	e002      	b.n	8004af6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004af0:	481e      	ldr	r0, [pc, #120]	; (8004b6c <MX_LWIP_Init+0x2a8>)
 8004af2:	f009 fb0d 	bl	800e110 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004af6:	491e      	ldr	r1, [pc, #120]	; (8004b70 <MX_LWIP_Init+0x2ac>)
 8004af8:	481c      	ldr	r0, [pc, #112]	; (8004b6c <MX_LWIP_Init+0x2a8>)
 8004afa:	f009 fb9f 	bl	800e23c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8004afe:	2200      	movs	r2, #0
 8004b00:	2101      	movs	r1, #1
 8004b02:	2001      	movs	r0, #1
 8004b04:	f000 feab 	bl	800585e <osSemaphoreNew>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <MX_LWIP_Init+0x2b0>)
 8004b0c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004b0e:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <MX_LWIP_Init+0x2b4>)
 8004b10:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <MX_LWIP_Init+0x2a8>)
 8004b12:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004b14:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <MX_LWIP_Init+0x2b0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <MX_LWIP_Init+0x2b4>)
 8004b1a:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004b1c:	2224      	movs	r2, #36	; 0x24
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4816      	ldr	r0, [pc, #88]	; (8004b7c <MX_LWIP_Init+0x2b8>)
 8004b22:	f015 fd6b 	bl	801a5fc <memset>
  attributes.name = "LinkThr";
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <MX_LWIP_Init+0x2b8>)
 8004b28:	4a15      	ldr	r2, [pc, #84]	; (8004b80 <MX_LWIP_Init+0x2bc>)
 8004b2a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004b2c:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <MX_LWIP_Init+0x2b8>)
 8004b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b32:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004b34:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <MX_LWIP_Init+0x2b8>)
 8004b36:	2210      	movs	r2, #16
 8004b38:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8004b3a:	4a10      	ldr	r2, [pc, #64]	; (8004b7c <MX_LWIP_Init+0x2b8>)
 8004b3c:	490e      	ldr	r1, [pc, #56]	; (8004b78 <MX_LWIP_Init+0x2b4>)
 8004b3e:	4811      	ldr	r0, [pc, #68]	; (8004b84 <MX_LWIP_Init+0x2c0>)
 8004b40:	f000 fcd1 	bl	80054e6 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20011d14 	.word	0x20011d14
 8004b50:	20011d10 	.word	0x20011d10
 8004b54:	20011cb0 	.word	0x20011cb0
 8004b58:	20011d0c 	.word	0x20011d0c
 8004b5c:	20011d18 	.word	0x20011d18
 8004b60:	20011d1c 	.word	0x20011d1c
 8004b64:	0800d0bd 	.word	0x0800d0bd
 8004b68:	080051b1 	.word	0x080051b1
 8004b6c:	20011cd8 	.word	0x20011cd8
 8004b70:	08005295 	.word	0x08005295
 8004b74:	2000016c 	.word	0x2000016c
 8004b78:	20011ca8 	.word	0x20011ca8
 8004b7c:	20011cb4 	.word	0x20011cb4
 8004b80:	0801b9b0 	.word	0x0801b9b0
 8004b84:	0800521d 	.word	0x0800521d

08004b88 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08e      	sub	sp, #56	; 0x38
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	609a      	str	r2, [r3, #8]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a4a      	ldr	r2, [pc, #296]	; (8004cd0 <HAL_ETH_MspInit+0x148>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	f040 808d 	bne.w	8004cc6 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004bac:	2300      	movs	r3, #0
 8004bae:	623b      	str	r3, [r7, #32]
 8004bb0:	4b48      	ldr	r3, [pc, #288]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	4a47      	ldr	r2, [pc, #284]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bba:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbc:	4b45      	ldr	r3, [pc, #276]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	623b      	str	r3, [r7, #32]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61fb      	str	r3, [r7, #28]
 8004bcc:	4b41      	ldr	r3, [pc, #260]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	4a40      	ldr	r2, [pc, #256]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004bd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd8:	4b3e      	ldr	r3, [pc, #248]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	2300      	movs	r3, #0
 8004be6:	61bb      	str	r3, [r7, #24]
 8004be8:	4b3a      	ldr	r3, [pc, #232]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	4a39      	ldr	r2, [pc, #228]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004bee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf4:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	4a32      	ldr	r2, [pc, #200]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004c0a:	f043 0304 	orr.w	r3, r3, #4
 8004c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c10:	4b30      	ldr	r3, [pc, #192]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	4b2c      	ldr	r3, [pc, #176]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	4a2b      	ldr	r2, [pc, #172]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c2c:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004c42:	f043 0302 	orr.w	r3, r3, #2
 8004c46:	6313      	str	r3, [r2, #48]	; 0x30
 8004c48:	4b22      	ldr	r3, [pc, #136]	; (8004cd4 <HAL_ETH_MspInit+0x14c>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004c54:	2332      	movs	r3, #50	; 0x32
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c60:	2303      	movs	r3, #3
 8004c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c64:	230b      	movs	r3, #11
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	481a      	ldr	r0, [pc, #104]	; (8004cd8 <HAL_ETH_MspInit+0x150>)
 8004c70:	f7fd ffe8 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004c74:	2386      	movs	r3, #134	; 0x86
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c80:	2303      	movs	r3, #3
 8004c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004c84:	230b      	movs	r3, #11
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4813      	ldr	r0, [pc, #76]	; (8004cdc <HAL_ETH_MspInit+0x154>)
 8004c90:	f7fd ffd8 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004c94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ca6:	230b      	movs	r3, #11
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cae:	4619      	mov	r1, r3
 8004cb0:	480b      	ldr	r0, [pc, #44]	; (8004ce0 <HAL_ETH_MspInit+0x158>)
 8004cb2:	f7fd ffc7 	bl	8002c44 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2105      	movs	r1, #5
 8004cba:	203d      	movs	r0, #61	; 0x3d
 8004cbc:	f7fc fb08 	bl	80012d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004cc0:	203d      	movs	r0, #61	; 0x3d
 8004cc2:	f7fc fb21 	bl	8001308 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004cc6:	bf00      	nop
 8004cc8:	3738      	adds	r7, #56	; 0x38
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40028000 	.word	0x40028000
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40020800 	.word	0x40020800
 8004cdc:	40020000 	.word	0x40020000
 8004ce0:	40020400 	.word	0x40020400

08004ce4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004cec:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <HAL_ETH_RxCpltCallback+0x1c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fe8f 	bl	8005a14 <osSemaphoreRelease>
}
 8004cf6:	bf00      	nop
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000170 	.word	0x20000170

08004d04 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b090      	sub	sp, #64	; 0x40
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004d10:	4b5d      	ldr	r3, [pc, #372]	; (8004e88 <low_level_init+0x184>)
 8004d12:	4a5e      	ldr	r2, [pc, #376]	; (8004e8c <low_level_init+0x188>)
 8004d14:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004d16:	4b5c      	ldr	r3, [pc, #368]	; (8004e88 <low_level_init+0x184>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004d1c:	4b5a      	ldr	r3, [pc, #360]	; (8004e88 <low_level_init+0x184>)
 8004d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d22:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004d24:	4b58      	ldr	r3, [pc, #352]	; (8004e88 <low_level_init+0x184>)
 8004d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d2a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004d2c:	4b56      	ldr	r3, [pc, #344]	; (8004e88 <low_level_init+0x184>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004d32:	2300      	movs	r3, #0
 8004d34:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8004d36:	2380      	movs	r3, #128	; 0x80
 8004d38:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004d3a:	23e1      	movs	r3, #225	; 0xe1
 8004d3c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8004d42:	2300      	movs	r3, #0
 8004d44:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004d46:	2300      	movs	r3, #0
 8004d48:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004d4a:	4a4f      	ldr	r2, [pc, #316]	; (8004e88 <low_level_init+0x184>)
 8004d4c:	f107 030c 	add.w	r3, r7, #12
 8004d50:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004d52:	4b4d      	ldr	r3, [pc, #308]	; (8004e88 <low_level_init+0x184>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004d58:	4b4b      	ldr	r3, [pc, #300]	; (8004e88 <low_level_init+0x184>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004d5e:	4b4a      	ldr	r3, [pc, #296]	; (8004e88 <low_level_init+0x184>)
 8004d60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d64:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004d66:	4848      	ldr	r0, [pc, #288]	; (8004e88 <low_level_init+0x184>)
 8004d68:	f7fc fdc6 	bl	80018f8 <HAL_ETH_Init>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004d72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d108      	bne.n	8004d8c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d80:	f043 0304 	orr.w	r3, r3, #4
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	4a40      	ldr	r2, [pc, #256]	; (8004e90 <low_level_init+0x18c>)
 8004d90:	4940      	ldr	r1, [pc, #256]	; (8004e94 <low_level_init+0x190>)
 8004d92:	483d      	ldr	r0, [pc, #244]	; (8004e88 <low_level_init+0x184>)
 8004d94:	f7fc ff4c 	bl	8001c30 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004d98:	2304      	movs	r3, #4
 8004d9a:	4a3f      	ldr	r2, [pc, #252]	; (8004e98 <low_level_init+0x194>)
 8004d9c:	493f      	ldr	r1, [pc, #252]	; (8004e9c <low_level_init+0x198>)
 8004d9e:	483a      	ldr	r0, [pc, #232]	; (8004e88 <low_level_init+0x184>)
 8004da0:	f7fc ffaf 	bl	8001d02 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2206      	movs	r2, #6
 8004da8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004dac:	4b36      	ldr	r3, [pc, #216]	; (8004e88 <low_level_init+0x184>)
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004db8:	4b33      	ldr	r3, [pc, #204]	; (8004e88 <low_level_init+0x184>)
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	785a      	ldrb	r2, [r3, #1]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004dc4:	4b30      	ldr	r3, [pc, #192]	; (8004e88 <low_level_init+0x184>)
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	789a      	ldrb	r2, [r3, #2]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004dd0:	4b2d      	ldr	r3, [pc, #180]	; (8004e88 <low_level_init+0x184>)
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	78da      	ldrb	r2, [r3, #3]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004ddc:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <low_level_init+0x184>)
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	791a      	ldrb	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004de8:	4b27      	ldr	r3, [pc, #156]	; (8004e88 <low_level_init+0x184>)
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	795a      	ldrb	r2, [r3, #5]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004dfa:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e02:	f043 030a 	orr.w	r3, r3, #10
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2101      	movs	r1, #1
 8004e12:	2001      	movs	r0, #1
 8004e14:	f000 fd23 	bl	800585e <osSemaphoreNew>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4a21      	ldr	r2, [pc, #132]	; (8004ea0 <low_level_init+0x19c>)
 8004e1c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004e1e:	f107 0314 	add.w	r3, r7, #20
 8004e22:	2224      	movs	r2, #36	; 0x24
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f015 fbe8 	bl	801a5fc <memset>
  attributes.name = "EthIf";
 8004e2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ea4 <low_level_init+0x1a0>)
 8004e2e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004e30:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8004e36:	2330      	movs	r3, #48	; 0x30
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004e3a:	f107 0314 	add.w	r3, r7, #20
 8004e3e:	461a      	mov	r2, r3
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4819      	ldr	r0, [pc, #100]	; (8004ea8 <low_level_init+0x1a4>)
 8004e44:	f000 fb4f 	bl	80054e6 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004e48:	480f      	ldr	r0, [pc, #60]	; (8004e88 <low_level_init+0x184>)
 8004e4a:	f7fd fa82 	bl	8002352 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004e4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e52:	461a      	mov	r2, r3
 8004e54:	211d      	movs	r1, #29
 8004e56:	480c      	ldr	r0, [pc, #48]	; (8004e88 <low_level_init+0x184>)
 8004e58:	f7fd f9ad 	bl	80021b6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	f043 030b 	orr.w	r3, r3, #11
 8004e62:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	461a      	mov	r2, r3
 8004e68:	211d      	movs	r1, #29
 8004e6a:	4807      	ldr	r0, [pc, #28]	; (8004e88 <low_level_init+0x184>)
 8004e6c:	f7fd fa0b 	bl	8002286 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004e70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e74:	461a      	mov	r2, r3
 8004e76:	211d      	movs	r1, #29
 8004e78:	4803      	ldr	r0, [pc, #12]	; (8004e88 <low_level_init+0x184>)
 8004e7a:	f7fd f99c 	bl	80021b6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004e7e:	bf00      	nop
 8004e80:	3740      	adds	r7, #64	; 0x40
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	200135f0 	.word	0x200135f0
 8004e8c:	40028000 	.word	0x40028000
 8004e90:	20013638 	.word	0x20013638
 8004e94:	20011d20 	.word	0x20011d20
 8004e98:	20011da0 	.word	0x20011da0
 8004e9c:	20013570 	.word	0x20013570
 8004ea0:	20000170 	.word	0x20000170
 8004ea4:	0801b9b8 	.word	0x0801b9b8
 8004ea8:	08005151 	.word	0x08005151

08004eac <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08a      	sub	sp, #40	; 0x28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004eb6:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <low_level_output+0x138>)
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004ece:	4b45      	ldr	r3, [pc, #276]	; (8004fe4 <low_level_output+0x138>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	e05a      	b.n	8004f94 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	da03      	bge.n	8004eee <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004ee6:	23f8      	movs	r3, #248	; 0xf8
 8004ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004eec:	e05c      	b.n	8004fa8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	895b      	ldrh	r3, [r3, #10]
 8004ef2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004ef8:	e02f      	b.n	8004f5a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	18d0      	adds	r0, r2, r3
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	18d1      	adds	r1, r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004f0e:	3304      	adds	r3, #4
 8004f10:	461a      	mov	r2, r3
 8004f12:	f015 fb4b 	bl	801a5ac <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	da03      	bge.n	8004f2c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004f24:	23f8      	movs	r3, #248	; 0xf8
 8004f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004f2a:	e03d      	b.n	8004fa8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f3c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f48:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f54:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d8c8      	bhi.n	8004efa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	18d0      	adds	r0, r2, r3
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4413      	add	r3, r2
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f015 fb17 	bl	801a5ac <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	623b      	str	r3, [r7, #32]
 8004f94:	6a3b      	ldr	r3, [r7, #32]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1a1      	bne.n	8004ede <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004f9a:	6979      	ldr	r1, [r7, #20]
 8004f9c:	4811      	ldr	r0, [pc, #68]	; (8004fe4 <low_level_output+0x138>)
 8004f9e:	f7fc ff1d 	bl	8001ddc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004fa8:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <low_level_output+0x138>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb0:	3314      	adds	r3, #20
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00d      	beq.n	8004fd8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004fbc:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <low_level_output+0x138>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc4:	3314      	adds	r3, #20
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <low_level_output+0x138>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004fd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3728      	adds	r7, #40	; 0x28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	200135f0 	.word	0x200135f0

08004fe8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005000:	2300      	movs	r3, #0
 8005002:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800500c:	484f      	ldr	r0, [pc, #316]	; (800514c <low_level_input+0x164>)
 800500e:	f7fc ffcf 	bl	8001fb0 <HAL_ETH_GetReceivedFrame_IT>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <low_level_input+0x34>

    return NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	e092      	b.n	8005142 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800501c:	4b4b      	ldr	r3, [pc, #300]	; (800514c <low_level_input+0x164>)
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005022:	4b4a      	ldr	r3, [pc, #296]	; (800514c <low_level_input+0x164>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005028:	89fb      	ldrh	r3, [r7, #14]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800502e:	89fb      	ldrh	r3, [r7, #14]
 8005030:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005034:	4619      	mov	r1, r3
 8005036:	2000      	movs	r0, #0
 8005038:	f009 fa02 	bl	800e440 <pbuf_alloc>
 800503c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	2b00      	cmp	r3, #0
 8005042:	d04b      	beq.n	80050dc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005044:	4b41      	ldr	r3, [pc, #260]	; (800514c <low_level_input+0x164>)
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	62bb      	str	r3, [r7, #40]	; 0x28
 8005052:	e040      	b.n	80050d6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	895b      	ldrh	r3, [r3, #10]
 8005058:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800505e:	e021      	b.n	80050a4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	18d0      	adds	r0, r2, r3
 8005068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	18d1      	adds	r1, r2, r3
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005074:	3304      	adds	r3, #4
 8005076:	461a      	mov	r2, r3
 8005078:	f015 fa98 	bl	801a5ac <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005088:	69fa      	ldr	r2, [r7, #28]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4413      	add	r3, r2
 800508e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005092:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800509e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	4413      	add	r3, r2
 80050aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d8d6      	bhi.n	8005060 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	18d0      	adds	r0, r2, r3
 80050ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4619      	mov	r1, r3
 80050c4:	f015 fa72 	bl	801a5ac <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80050c8:	69fa      	ldr	r2, [r7, #28]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	4413      	add	r3, r2
 80050ce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80050d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1bb      	bne.n	8005054 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80050dc:	4b1b      	ldr	r3, [pc, #108]	; (800514c <low_level_input+0x164>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e00b      	b.n	8005100 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	3301      	adds	r3, #1
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	4b12      	ldr	r3, [pc, #72]	; (800514c <low_level_input+0x164>)
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	429a      	cmp	r2, r3
 8005108:	d3ee      	bcc.n	80050e8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <low_level_input+0x164>)
 800510c:	2200      	movs	r2, #0
 800510e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005110:	4b0e      	ldr	r3, [pc, #56]	; (800514c <low_level_input+0x164>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005118:	3314      	adds	r3, #20
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00d      	beq.n	8005140 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005124:	4b09      	ldr	r3, [pc, #36]	; (800514c <low_level_input+0x164>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800512c:	3314      	adds	r3, #20
 800512e:	2280      	movs	r2, #128	; 0x80
 8005130:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <low_level_input+0x164>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800513a:	3308      	adds	r3, #8
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005142:	4618      	mov	r0, r3
 8005144:	3730      	adds	r7, #48	; 0x30
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200135f0 	.word	0x200135f0

08005150 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <ethernetif_input+0x58>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f04f 31ff 	mov.w	r1, #4294967295
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fc03 	bl	8005970 <osSemaphoreAcquire>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f5      	bne.n	800515c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005170:	480e      	ldr	r0, [pc, #56]	; (80051ac <ethernetif_input+0x5c>)
 8005172:	f013 fadd 	bl	8018730 <sys_mutex_lock>
        p = low_level_input( netif );
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff ff36 	bl	8004fe8 <low_level_input>
 800517c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	68b8      	ldr	r0, [r7, #8]
 800518c:	4798      	blx	r3
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005194:	68b8      	ldr	r0, [r7, #8]
 8005196:	f009 fc69 	bl	800ea6c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800519a:	4804      	ldr	r0, [pc, #16]	; (80051ac <ethernetif_input+0x5c>)
 800519c:	f013 fad7 	bl	801874e <sys_mutex_unlock>
      } while(p!=NULL);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e4      	bne.n	8005170 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80051a6:	e7d9      	b.n	800515c <ethernetif_input+0xc>
 80051a8:	20000170 	.word	0x20000170
 80051ac:	20014e48 	.word	0x20014e48

080051b0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <ethernetif_init+0x1c>
 80051be:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <ethernetif_init+0x48>)
 80051c0:	f44f 720c 	mov.w	r2, #560	; 0x230
 80051c4:	490d      	ldr	r1, [pc, #52]	; (80051fc <ethernetif_init+0x4c>)
 80051c6:	480e      	ldr	r0, [pc, #56]	; (8005200 <ethernetif_init+0x50>)
 80051c8:	f015 fdb8 	bl	801ad3c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2273      	movs	r2, #115	; 0x73
 80051d0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2274      	movs	r2, #116	; 0x74
 80051d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <ethernetif_init+0x54>)
 80051e0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a08      	ldr	r2, [pc, #32]	; (8005208 <ethernetif_init+0x58>)
 80051e6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fd8b 	bl	8004d04 <low_level_init>

  return ERR_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	0801b9c0 	.word	0x0801b9c0
 80051fc:	0801b9dc 	.word	0x0801b9dc
 8005200:	0801b9ec 	.word	0x0801b9ec
 8005204:	0801668d 	.word	0x0801668d
 8005208:	08004ead 	.word	0x08004ead

0800520c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005210:	f7fb ff76 	bl	8001100 <HAL_GetTick>
 8005214:	4603      	mov	r3, r0
}
 8005216:	4618      	mov	r0, r3
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005224:	2300      	movs	r3, #0
 8005226:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800522c:	f107 0308 	add.w	r3, r7, #8
 8005230:	461a      	mov	r2, r3
 8005232:	2101      	movs	r1, #1
 8005234:	4816      	ldr	r0, [pc, #88]	; (8005290 <ethernetif_set_link+0x74>)
 8005236:	f7fc ffbe 	bl	80021b6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b00      	cmp	r3, #0
 8005250:	d108      	bne.n	8005264 <ethernetif_set_link+0x48>
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f008 ff89 	bl	800e174 <netif_set_link_up>
 8005262:	e011      	b.n	8005288 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800526c:	089b      	lsrs	r3, r3, #2
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <ethernetif_set_link+0x6c>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f008 ffaa 	bl	800e1dc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005288:	20c8      	movs	r0, #200	; 0xc8
 800528a:	f000 f9bf 	bl	800560c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800528e:	e7cd      	b.n	800522c <ethernetif_set_link+0x10>
 8005290:	200135f0 	.word	0x200135f0

08005294 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052aa:	089b      	lsrs	r3, r3, #2
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d05d      	beq.n	8005372 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80052b6:	4b34      	ldr	r3, [pc, #208]	; (8005388 <ethernetif_update_config+0xf4>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d03f      	beq.n	800533e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80052be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80052c2:	2100      	movs	r1, #0
 80052c4:	4830      	ldr	r0, [pc, #192]	; (8005388 <ethernetif_update_config+0xf4>)
 80052c6:	f7fc ffde 	bl	8002286 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80052ca:	f7fb ff19 	bl	8001100 <HAL_GetTick>
 80052ce:	4603      	mov	r3, r0
 80052d0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80052d2:	f107 0308 	add.w	r3, r7, #8
 80052d6:	461a      	mov	r2, r3
 80052d8:	2101      	movs	r1, #1
 80052da:	482b      	ldr	r0, [pc, #172]	; (8005388 <ethernetif_update_config+0xf4>)
 80052dc:	f7fc ff6b 	bl	80021b6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80052e0:	f7fb ff0e 	bl	8001100 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ee:	d828      	bhi.n	8005342 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0eb      	beq.n	80052d2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80052fa:	f107 0308 	add.w	r3, r7, #8
 80052fe:	461a      	mov	r2, r3
 8005300:	2110      	movs	r1, #16
 8005302:	4821      	ldr	r0, [pc, #132]	; (8005388 <ethernetif_update_config+0xf4>)
 8005304:	f7fc ff57 	bl	80021b6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005312:	4b1d      	ldr	r3, [pc, #116]	; (8005388 <ethernetif_update_config+0xf4>)
 8005314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005318:	60da      	str	r2, [r3, #12]
 800531a:	e002      	b.n	8005322 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <ethernetif_update_config+0xf4>)
 800531e:	2200      	movs	r2, #0
 8005320:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800532c:	4b16      	ldr	r3, [pc, #88]	; (8005388 <ethernetif_update_config+0xf4>)
 800532e:	2200      	movs	r2, #0
 8005330:	609a      	str	r2, [r3, #8]
 8005332:	e016      	b.n	8005362 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005334:	4b14      	ldr	r3, [pc, #80]	; (8005388 <ethernetif_update_config+0xf4>)
 8005336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800533a:	609a      	str	r2, [r3, #8]
 800533c:	e011      	b.n	8005362 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800533e:	bf00      	nop
 8005340:	e000      	b.n	8005344 <ethernetif_update_config+0xb0>
          goto error;
 8005342:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005344:	4b10      	ldr	r3, [pc, #64]	; (8005388 <ethernetif_update_config+0xf4>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800534c:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <ethernetif_update_config+0xf4>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	085b      	lsrs	r3, r3, #1
 8005352:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005354:	4313      	orrs	r3, r2
 8005356:	b29b      	uxth	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	2100      	movs	r1, #0
 800535c:	480a      	ldr	r0, [pc, #40]	; (8005388 <ethernetif_update_config+0xf4>)
 800535e:	f7fc ff92 	bl	8002286 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005362:	2100      	movs	r1, #0
 8005364:	4808      	ldr	r0, [pc, #32]	; (8005388 <ethernetif_update_config+0xf4>)
 8005366:	f7fd f853 	bl	8002410 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800536a:	4807      	ldr	r0, [pc, #28]	; (8005388 <ethernetif_update_config+0xf4>)
 800536c:	f7fc fff1 	bl	8002352 <HAL_ETH_Start>
 8005370:	e002      	b.n	8005378 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005372:	4805      	ldr	r0, [pc, #20]	; (8005388 <ethernetif_update_config+0xf4>)
 8005374:	f7fd f81c 	bl	80023b0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f807 	bl	800538c <ethernetif_notify_conn_changed>
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200135f0 	.word	0x200135f0

0800538c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <__NVIC_SetPriority>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	6039      	str	r1, [r7, #0]
 80053aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db0a      	blt.n	80053ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	490c      	ldr	r1, [pc, #48]	; (80053ec <__NVIC_SetPriority+0x4c>)
 80053ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053be:	0112      	lsls	r2, r2, #4
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	440b      	add	r3, r1
 80053c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80053c8:	e00a      	b.n	80053e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	4908      	ldr	r1, [pc, #32]	; (80053f0 <__NVIC_SetPriority+0x50>)
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	3b04      	subs	r3, #4
 80053d8:	0112      	lsls	r2, r2, #4
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	440b      	add	r3, r1
 80053de:	761a      	strb	r2, [r3, #24]
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	e000e100 	.word	0xe000e100
 80053f0:	e000ed00 	.word	0xe000ed00

080053f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <SysTick_Handler+0x1c>)
 80053fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80053fc:	f002 fdbc 	bl	8007f78 <xTaskGetSchedulerState>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d001      	beq.n	800540a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005406:	f003 fc9f 	bl	8008d48 <xPortSysTickHandler>
  }
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	e000e010 	.word	0xe000e010

08005414 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005418:	2100      	movs	r1, #0
 800541a:	f06f 0004 	mvn.w	r0, #4
 800541e:	f7ff ffbf 	bl	80053a0 <__NVIC_SetPriority>
#endif
}
 8005422:	bf00      	nop
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800542e:	f3ef 8305 	mrs	r3, IPSR
 8005432:	603b      	str	r3, [r7, #0]
  return(result);
 8005434:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800543a:	f06f 0305 	mvn.w	r3, #5
 800543e:	607b      	str	r3, [r7, #4]
 8005440:	e00c      	b.n	800545c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005442:	4b0a      	ldr	r3, [pc, #40]	; (800546c <osKernelInitialize+0x44>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d105      	bne.n	8005456 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800544a:	4b08      	ldr	r3, [pc, #32]	; (800546c <osKernelInitialize+0x44>)
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005450:	2300      	movs	r3, #0
 8005452:	607b      	str	r3, [r7, #4]
 8005454:	e002      	b.n	800545c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005456:	f04f 33ff 	mov.w	r3, #4294967295
 800545a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800545c:	687b      	ldr	r3, [r7, #4]
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000174 	.word	0x20000174

08005470 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005476:	f3ef 8305 	mrs	r3, IPSR
 800547a:	603b      	str	r3, [r7, #0]
  return(result);
 800547c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005482:	f06f 0305 	mvn.w	r3, #5
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	e010      	b.n	80054ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800548a:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <osKernelStart+0x48>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d109      	bne.n	80054a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005492:	f7ff ffbf 	bl	8005414 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <osKernelStart+0x48>)
 8005498:	2202      	movs	r2, #2
 800549a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800549c:	f002 f8de 	bl	800765c <vTaskStartScheduler>
      stat = osOK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	e002      	b.n	80054ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80054a6:	f04f 33ff 	mov.w	r3, #4294967295
 80054aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054ac:	687b      	ldr	r3, [r7, #4]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000174 	.word	0x20000174

080054bc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054c2:	f3ef 8305 	mrs	r3, IPSR
 80054c6:	603b      	str	r3, [r7, #0]
  return(result);
 80054c8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80054ce:	f002 f9f1 	bl	80078b4 <xTaskGetTickCountFromISR>
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	e002      	b.n	80054dc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80054d6:	f002 f9dd 	bl	8007894 <xTaskGetTickCount>
 80054da:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80054dc:	687b      	ldr	r3, [r7, #4]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b08e      	sub	sp, #56	; 0x38
 80054ea:	af04      	add	r7, sp, #16
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f6:	f3ef 8305 	mrs	r3, IPSR
 80054fa:	617b      	str	r3, [r7, #20]
  return(result);
 80054fc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d17f      	bne.n	8005602 <osThreadNew+0x11c>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d07c      	beq.n	8005602 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800550c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800550e:	2318      	movs	r3, #24
 8005510:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d045      	beq.n	80055ae <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <osThreadNew+0x4a>
        name = attr->name;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d008      	beq.n	8005556 <osThreadNew+0x70>
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	2b38      	cmp	r3, #56	; 0x38
 8005548:	d805      	bhi.n	8005556 <osThreadNew+0x70>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <osThreadNew+0x74>
        return (NULL);
 8005556:	2300      	movs	r3, #0
 8005558:	e054      	b.n	8005604 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	089b      	lsrs	r3, r3, #2
 8005568:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00e      	beq.n	8005590 <osThreadNew+0xaa>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	2bbb      	cmp	r3, #187	; 0xbb
 8005578:	d90a      	bls.n	8005590 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800557e:	2b00      	cmp	r3, #0
 8005580:	d006      	beq.n	8005590 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <osThreadNew+0xaa>
        mem = 1;
 800558a:	2301      	movs	r3, #1
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	e010      	b.n	80055b2 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10c      	bne.n	80055b2 <osThreadNew+0xcc>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d108      	bne.n	80055b2 <osThreadNew+0xcc>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d104      	bne.n	80055b2 <osThreadNew+0xcc>
          mem = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	e001      	b.n	80055b2 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d110      	bne.n	80055da <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055c0:	9202      	str	r2, [sp, #8]
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	6a3a      	ldr	r2, [r7, #32]
 80055cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f001 fde6 	bl	80071a0 <xTaskCreateStatic>
 80055d4:	4603      	mov	r3, r0
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	e013      	b.n	8005602 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d110      	bne.n	8005602 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	f107 0310 	add.w	r3, r7, #16
 80055e8:	9301      	str	r3, [sp, #4]
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f001 fe31 	bl	800725a <xTaskCreate>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d001      	beq.n	8005602 <osThreadNew+0x11c>
            hTask = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005602:	693b      	ldr	r3, [r7, #16]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3728      	adds	r7, #40	; 0x28
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005614:	f3ef 8305 	mrs	r3, IPSR
 8005618:	60bb      	str	r3, [r7, #8]
  return(result);
 800561a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <osDelay+0x1c>
    stat = osErrorISR;
 8005620:	f06f 0305 	mvn.w	r3, #5
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e007      	b.n	8005638 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005628:	2300      	movs	r3, #0
 800562a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 ffde 	bl	80075f4 <vTaskDelay>
    }
  }

  return (stat);
 8005638:	68fb      	ldr	r3, [r7, #12]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005642:	b580      	push	{r7, lr}
 8005644:	b088      	sub	sp, #32
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564e:	f3ef 8305 	mrs	r3, IPSR
 8005652:	60bb      	str	r3, [r7, #8]
  return(result);
 8005654:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005656:	2b00      	cmp	r3, #0
 8005658:	d174      	bne.n	8005744 <osMutexNew+0x102>
    if (attr != NULL) {
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	e001      	b.n	800566c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <osMutexNew+0x3a>
      rmtx = 1U;
 8005676:	2301      	movs	r3, #1
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	e001      	b.n	8005680 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f003 0308 	and.w	r3, r3, #8
 8005686:	2b00      	cmp	r3, #0
 8005688:	d15c      	bne.n	8005744 <osMutexNew+0x102>
      mem = -1;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d015      	beq.n	80056c2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d006      	beq.n	80056ac <osMutexNew+0x6a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b4f      	cmp	r3, #79	; 0x4f
 80056a4:	d902      	bls.n	80056ac <osMutexNew+0x6a>
          mem = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	e00c      	b.n	80056c6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d108      	bne.n	80056c6 <osMutexNew+0x84>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <osMutexNew+0x84>
            mem = 0;
 80056bc:	2300      	movs	r3, #0
 80056be:	613b      	str	r3, [r7, #16]
 80056c0:	e001      	b.n	80056c6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d112      	bne.n	80056f2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d007      	beq.n	80056e2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	4619      	mov	r1, r3
 80056d8:	2004      	movs	r0, #4
 80056da:	f000 fdd0 	bl	800627e <xQueueCreateMutexStatic>
 80056de:	61f8      	str	r0, [r7, #28]
 80056e0:	e016      	b.n	8005710 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	4619      	mov	r1, r3
 80056e8:	2001      	movs	r0, #1
 80056ea:	f000 fdc8 	bl	800627e <xQueueCreateMutexStatic>
 80056ee:	61f8      	str	r0, [r7, #28]
 80056f0:	e00e      	b.n	8005710 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d004      	beq.n	8005708 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80056fe:	2004      	movs	r0, #4
 8005700:	f000 fda5 	bl	800624e <xQueueCreateMutex>
 8005704:	61f8      	str	r0, [r7, #28]
 8005706:	e003      	b.n	8005710 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005708:	2001      	movs	r0, #1
 800570a:	f000 fda0 	bl	800624e <xQueueCreateMutex>
 800570e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00c      	beq.n	8005730 <osMutexNew+0xee>
        if (attr != NULL) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <osMutexNew+0xe2>
          name = attr->name;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e001      	b.n	8005728 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005728:	68f9      	ldr	r1, [r7, #12]
 800572a:	69f8      	ldr	r0, [r7, #28]
 800572c:	f001 fcb0 	bl	8007090 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d006      	beq.n	8005744 <osMutexNew+0x102>
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f043 0301 	orr.w	r3, r3, #1
 8005742:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005744:	69fb      	ldr	r3, [r7, #28]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800574e:	b580      	push	{r7, lr}
 8005750:	b086      	sub	sp, #24
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f023 0301 	bic.w	r3, r3, #1
 800575e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800576c:	f3ef 8305 	mrs	r3, IPSR
 8005770:	60bb      	str	r3, [r7, #8]
  return(result);
 8005772:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005774:	2b00      	cmp	r3, #0
 8005776:	d003      	beq.n	8005780 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005778:	f06f 0305 	mvn.w	r3, #5
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e02c      	b.n	80057da <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005786:	f06f 0303 	mvn.w	r3, #3
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e025      	b.n	80057da <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d011      	beq.n	80057b8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	6938      	ldr	r0, [r7, #16]
 8005798:	f000 fdc0 	bl	800631c <xQueueTakeMutexRecursive>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d01b      	beq.n	80057da <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80057a8:	f06f 0301 	mvn.w	r3, #1
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	e014      	b.n	80057da <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057b0:	f06f 0302 	mvn.w	r3, #2
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	e010      	b.n	80057da <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6938      	ldr	r0, [r7, #16]
 80057bc:	f001 f954 	bl	8006a68 <xQueueSemaphoreTake>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d009      	beq.n	80057da <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80057cc:	f06f 0301 	mvn.w	r3, #1
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e002      	b.n	80057da <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80057d4:	f06f 0302 	mvn.w	r3, #2
 80057d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80057da:	697b      	ldr	r3, [r7, #20]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005800:	f3ef 8305 	mrs	r3, IPSR
 8005804:	60bb      	str	r3, [r7, #8]
  return(result);
 8005806:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <osMutexRelease+0x30>
    stat = osErrorISR;
 800580c:	f06f 0305 	mvn.w	r3, #5
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	e01f      	b.n	8005854 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800581a:	f06f 0303 	mvn.w	r3, #3
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e018      	b.n	8005854 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005828:	6938      	ldr	r0, [r7, #16]
 800582a:	f000 fd43 	bl	80062b4 <xQueueGiveMutexRecursive>
 800582e:	4603      	mov	r3, r0
 8005830:	2b01      	cmp	r3, #1
 8005832:	d00f      	beq.n	8005854 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005834:	f06f 0302 	mvn.w	r3, #2
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	e00b      	b.n	8005854 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800583c:	2300      	movs	r3, #0
 800583e:	2200      	movs	r2, #0
 8005840:	2100      	movs	r1, #0
 8005842:	6938      	ldr	r0, [r7, #16]
 8005844:	f000 fe0a 	bl	800645c <xQueueGenericSend>
 8005848:	4603      	mov	r3, r0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d002      	beq.n	8005854 <osMutexRelease+0x70>
        stat = osErrorResource;
 800584e:	f06f 0302 	mvn.w	r3, #2
 8005852:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005854:	697b      	ldr	r3, [r7, #20]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800585e:	b580      	push	{r7, lr}
 8005860:	b08a      	sub	sp, #40	; 0x28
 8005862:	af02      	add	r7, sp, #8
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800586e:	f3ef 8305 	mrs	r3, IPSR
 8005872:	613b      	str	r3, [r7, #16]
  return(result);
 8005874:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005876:	2b00      	cmp	r3, #0
 8005878:	d175      	bne.n	8005966 <osSemaphoreNew+0x108>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d072      	beq.n	8005966 <osSemaphoreNew+0x108>
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	429a      	cmp	r2, r3
 8005886:	d86e      	bhi.n	8005966 <osSemaphoreNew+0x108>
    mem = -1;
 8005888:	f04f 33ff 	mov.w	r3, #4294967295
 800588c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d015      	beq.n	80058c0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d006      	beq.n	80058aa <osSemaphoreNew+0x4c>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b4f      	cmp	r3, #79	; 0x4f
 80058a2:	d902      	bls.n	80058aa <osSemaphoreNew+0x4c>
        mem = 1;
 80058a4:	2301      	movs	r3, #1
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	e00c      	b.n	80058c4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d108      	bne.n	80058c4 <osSemaphoreNew+0x66>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d104      	bne.n	80058c4 <osSemaphoreNew+0x66>
          mem = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	e001      	b.n	80058c4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ca:	d04c      	beq.n	8005966 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d128      	bne.n	8005924 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d10a      	bne.n	80058ee <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2203      	movs	r2, #3
 80058de:	9200      	str	r2, [sp, #0]
 80058e0:	2200      	movs	r2, #0
 80058e2:	2100      	movs	r1, #0
 80058e4:	2001      	movs	r0, #1
 80058e6:	f000 fbc3 	bl	8006070 <xQueueGenericCreateStatic>
 80058ea:	61f8      	str	r0, [r7, #28]
 80058ec:	e005      	b.n	80058fa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80058ee:	2203      	movs	r2, #3
 80058f0:	2100      	movs	r1, #0
 80058f2:	2001      	movs	r0, #1
 80058f4:	f000 fc34 	bl	8006160 <xQueueGenericCreate>
 80058f8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d022      	beq.n	8005946 <osSemaphoreNew+0xe8>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01f      	beq.n	8005946 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005906:	2300      	movs	r3, #0
 8005908:	2200      	movs	r2, #0
 800590a:	2100      	movs	r1, #0
 800590c:	69f8      	ldr	r0, [r7, #28]
 800590e:	f000 fda5 	bl	800645c <xQueueGenericSend>
 8005912:	4603      	mov	r3, r0
 8005914:	2b01      	cmp	r3, #1
 8005916:	d016      	beq.n	8005946 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005918:	69f8      	ldr	r0, [r7, #28]
 800591a:	f001 fa6d 	bl	8006df8 <vQueueDelete>
            hSemaphore = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
 8005922:	e010      	b.n	8005946 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d108      	bne.n	800593c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	461a      	mov	r2, r3
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fd28 	bl	8006388 <xQueueCreateCountingSemaphoreStatic>
 8005938:	61f8      	str	r0, [r7, #28]
 800593a:	e004      	b.n	8005946 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fd59 	bl	80063f6 <xQueueCreateCountingSemaphore>
 8005944:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00c      	beq.n	8005966 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <osSemaphoreNew+0xfc>
          name = attr->name;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	e001      	b.n	800595e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800595e:	6979      	ldr	r1, [r7, #20]
 8005960:	69f8      	ldr	r0, [r7, #28]
 8005962:	f001 fb95 	bl	8007090 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005966:	69fb      	ldr	r3, [r7, #28]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3720      	adds	r7, #32
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800597e:	2300      	movs	r3, #0
 8005980:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d103      	bne.n	8005990 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005988:	f06f 0303 	mvn.w	r3, #3
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	e039      	b.n	8005a04 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005990:	f3ef 8305 	mrs	r3, IPSR
 8005994:	60fb      	str	r3, [r7, #12]
  return(result);
 8005996:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005998:	2b00      	cmp	r3, #0
 800599a:	d022      	beq.n	80059e2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80059a2:	f06f 0303 	mvn.w	r3, #3
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e02c      	b.n	8005a04 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80059ae:	f107 0308 	add.w	r3, r7, #8
 80059b2:	461a      	mov	r2, r3
 80059b4:	2100      	movs	r1, #0
 80059b6:	6938      	ldr	r0, [r7, #16]
 80059b8:	f001 f962 	bl	8006c80 <xQueueReceiveFromISR>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d003      	beq.n	80059ca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80059c2:	f06f 0302 	mvn.w	r3, #2
 80059c6:	617b      	str	r3, [r7, #20]
 80059c8:	e01c      	b.n	8005a04 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d019      	beq.n	8005a04 <osSemaphoreAcquire+0x94>
 80059d0:	4b0f      	ldr	r3, [pc, #60]	; (8005a10 <osSemaphoreAcquire+0xa0>)
 80059d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	e010      	b.n	8005a04 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6938      	ldr	r0, [r7, #16]
 80059e6:	f001 f83f 	bl	8006a68 <xQueueSemaphoreTake>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d009      	beq.n	8005a04 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80059f6:	f06f 0301 	mvn.w	r3, #1
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	e002      	b.n	8005a04 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80059fe:	f06f 0302 	mvn.w	r3, #2
 8005a02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a04:	697b      	ldr	r3, [r7, #20]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d103      	bne.n	8005a32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005a2a:	f06f 0303 	mvn.w	r3, #3
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	e02c      	b.n	8005a8c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a32:	f3ef 8305 	mrs	r3, IPSR
 8005a36:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01a      	beq.n	8005a74 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005a42:	f107 0308 	add.w	r3, r7, #8
 8005a46:	4619      	mov	r1, r3
 8005a48:	6938      	ldr	r0, [r7, #16]
 8005a4a:	f000 fea0 	bl	800678e <xQueueGiveFromISR>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d003      	beq.n	8005a5c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005a54:	f06f 0302 	mvn.w	r3, #2
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	e017      	b.n	8005a8c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d014      	beq.n	8005a8c <osSemaphoreRelease+0x78>
 8005a62:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <osSemaphoreRelease+0x84>)
 8005a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	e00b      	b.n	8005a8c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a74:	2300      	movs	r3, #0
 8005a76:	2200      	movs	r2, #0
 8005a78:	2100      	movs	r1, #0
 8005a7a:	6938      	ldr	r0, [r7, #16]
 8005a7c:	f000 fcee 	bl	800645c <xQueueGenericSend>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d002      	beq.n	8005a8c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005a86:	f06f 0302 	mvn.w	r3, #2
 8005a8a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005a8c:	697b      	ldr	r3, [r7, #20]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3718      	adds	r7, #24
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005aa8:	f3ef 8305 	mrs	r3, IPSR
 8005aac:	60fb      	str	r3, [r7, #12]
  return(result);
 8005aae:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005ab4:	f06f 0305 	mvn.w	r3, #5
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e00e      	b.n	8005ada <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005ac2:	f06f 0303 	mvn.w	r3, #3
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	e007      	b.n	8005ada <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005aca:	6938      	ldr	r0, [r7, #16]
 8005acc:	f001 fb0a 	bl	80070e4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005ad4:	6938      	ldr	r0, [r7, #16]
 8005ad6:	f001 f98f 	bl	8006df8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005ada:	697b      	ldr	r3, [r7, #20]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005af4:	f3ef 8305 	mrs	r3, IPSR
 8005af8:	613b      	str	r3, [r7, #16]
  return(result);
 8005afa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d15f      	bne.n	8005bc0 <osMessageQueueNew+0xdc>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d05c      	beq.n	8005bc0 <osMessageQueueNew+0xdc>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d059      	beq.n	8005bc0 <osMessageQueueNew+0xdc>
    mem = -1;
 8005b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b10:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d029      	beq.n	8005b6c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d012      	beq.n	8005b46 <osMessageQueueNew+0x62>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b4f      	cmp	r3, #79	; 0x4f
 8005b26:	d90e      	bls.n	8005b46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	695a      	ldr	r2, [r3, #20]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	fb01 f303 	mul.w	r3, r1, r3
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d302      	bcc.n	8005b46 <osMessageQueueNew+0x62>
        mem = 1;
 8005b40:	2301      	movs	r3, #1
 8005b42:	61bb      	str	r3, [r7, #24]
 8005b44:	e014      	b.n	8005b70 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d110      	bne.n	8005b70 <osMessageQueueNew+0x8c>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10c      	bne.n	8005b70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d108      	bne.n	8005b70 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d104      	bne.n	8005b70 <osMessageQueueNew+0x8c>
          mem = 0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61bb      	str	r3, [r7, #24]
 8005b6a:	e001      	b.n	8005b70 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d10b      	bne.n	8005b8e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2100      	movs	r1, #0
 8005b80:	9100      	str	r1, [sp, #0]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fa73 	bl	8006070 <xQueueGenericCreateStatic>
 8005b8a:	61f8      	str	r0, [r7, #28]
 8005b8c:	e008      	b.n	8005ba0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d105      	bne.n	8005ba0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005b94:	2200      	movs	r2, #0
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 fae1 	bl	8006160 <xQueueGenericCreate>
 8005b9e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00c      	beq.n	8005bc0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	e001      	b.n	8005bb8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005bb8:	6979      	ldr	r1, [r7, #20]
 8005bba:	69f8      	ldr	r0, [r7, #28]
 8005bbc:	f001 fa68 	bl	8007090 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005bc0:	69fb      	ldr	r3, [r7, #28]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3720      	adds	r7, #32
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be4:	f3ef 8305 	mrs	r3, IPSR
 8005be8:	617b      	str	r3, [r7, #20]
  return(result);
 8005bea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d028      	beq.n	8005c42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <osMessageQueuePut+0x36>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <osMessageQueuePut+0x36>
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005c02:	f06f 0303 	mvn.w	r3, #3
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	e038      	b.n	8005c7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005c0e:	f107 0210 	add.w	r2, r7, #16
 8005c12:	2300      	movs	r3, #0
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	69b8      	ldr	r0, [r7, #24]
 8005c18:	f000 fd1e 	bl	8006658 <xQueueGenericSendFromISR>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d003      	beq.n	8005c2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005c22:	f06f 0302 	mvn.w	r3, #2
 8005c26:	61fb      	str	r3, [r7, #28]
 8005c28:	e028      	b.n	8005c7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d025      	beq.n	8005c7c <osMessageQueuePut+0xb0>
 8005c30:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <osMessageQueuePut+0xbc>)
 8005c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	e01c      	b.n	8005c7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <osMessageQueuePut+0x82>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005c4e:	f06f 0303 	mvn.w	r3, #3
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e012      	b.n	8005c7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005c56:	2300      	movs	r3, #0
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	69b8      	ldr	r0, [r7, #24]
 8005c5e:	f000 fbfd 	bl	800645c <xQueueGenericSend>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d009      	beq.n	8005c7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005c6e:	f06f 0301 	mvn.w	r3, #1
 8005c72:	61fb      	str	r3, [r7, #28]
 8005c74:	e002      	b.n	8005c7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005c76:	f06f 0302 	mvn.w	r3, #2
 8005c7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005c7c:	69fb      	ldr	r3, [r7, #28]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3720      	adds	r7, #32
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	e000ed04 	.word	0xe000ed04

08005c8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ca2:	f3ef 8305 	mrs	r3, IPSR
 8005ca6:	617b      	str	r3, [r7, #20]
  return(result);
 8005ca8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d028      	beq.n	8005d00 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <osMessageQueueGet+0x34>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <osMessageQueueGet+0x34>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005cc0:	f06f 0303 	mvn.w	r3, #3
 8005cc4:	61fb      	str	r3, [r7, #28]
 8005cc6:	e037      	b.n	8005d38 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005ccc:	f107 0310 	add.w	r3, r7, #16
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68b9      	ldr	r1, [r7, #8]
 8005cd4:	69b8      	ldr	r0, [r7, #24]
 8005cd6:	f000 ffd3 	bl	8006c80 <xQueueReceiveFromISR>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d003      	beq.n	8005ce8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005ce0:	f06f 0302 	mvn.w	r3, #2
 8005ce4:	61fb      	str	r3, [r7, #28]
 8005ce6:	e027      	b.n	8005d38 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d024      	beq.n	8005d38 <osMessageQueueGet+0xac>
 8005cee:	4b15      	ldr	r3, [pc, #84]	; (8005d44 <osMessageQueueGet+0xb8>)
 8005cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	e01b      	b.n	8005d38 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <osMessageQueueGet+0x80>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005d0c:	f06f 0303 	mvn.w	r3, #3
 8005d10:	61fb      	str	r3, [r7, #28]
 8005d12:	e011      	b.n	8005d38 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	69b8      	ldr	r0, [r7, #24]
 8005d1a:	f000 fdc5 	bl	80068a8 <xQueueReceive>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d009      	beq.n	8005d38 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005d2a:	f06f 0301 	mvn.w	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	e002      	b.n	8005d38 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005d32:	f06f 0302 	mvn.w	r3, #2
 8005d36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d38:	69fb      	ldr	r3, [r7, #28]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3720      	adds	r7, #32
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	e00e      	b.n	8005d7e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d60:	f3ef 8305 	mrs	r3, IPSR
 8005d64:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d66:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d004      	beq.n	8005d76 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005d6c:	6938      	ldr	r0, [r7, #16]
 8005d6e:	f001 f825 	bl	8006dbc <uxQueueMessagesWaitingFromISR>
 8005d72:	6178      	str	r0, [r7, #20]
 8005d74:	e003      	b.n	8005d7e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005d76:	6938      	ldr	r0, [r7, #16]
 8005d78:	f001 f802 	bl	8006d80 <uxQueueMessagesWaiting>
 8005d7c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005d7e:	697b      	ldr	r3, [r7, #20]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d94:	f3ef 8305 	mrs	r3, IPSR
 8005d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005da0:	f06f 0305 	mvn.w	r3, #5
 8005da4:	617b      	str	r3, [r7, #20]
 8005da6:	e00e      	b.n	8005dc6 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8005dae:	f06f 0303 	mvn.w	r3, #3
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	e007      	b.n	8005dc6 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005db6:	6938      	ldr	r0, [r7, #16]
 8005db8:	f001 f994 	bl	80070e4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005dc0:	6938      	ldr	r0, [r7, #16]
 8005dc2:	f001 f819 	bl	8006df8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005dc6:	697b      	ldr	r3, [r7, #20]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a07      	ldr	r2, [pc, #28]	; (8005dfc <vApplicationGetIdleTaskMemory+0x2c>)
 8005de0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4a06      	ldr	r2, [pc, #24]	; (8005e00 <vApplicationGetIdleTaskMemory+0x30>)
 8005de6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dee:	601a      	str	r2, [r3, #0]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	20000178 	.word	0x20000178
 8005e00:	20000234 	.word	0x20000234

08005e04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a07      	ldr	r2, [pc, #28]	; (8005e30 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4a06      	ldr	r2, [pc, #24]	; (8005e34 <vApplicationGetTimerTaskMemory+0x30>)
 8005e1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20000634 	.word	0x20000634
 8005e34:	200006f0 	.word	0x200006f0

08005e38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f103 0208 	add.w	r2, r3, #8
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f103 0208 	add.w	r2, r3, #8
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f103 0208 	add.w	r2, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e92:	b480      	push	{r7}
 8005e94:	b085      	sub	sp, #20
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	601a      	str	r2, [r3, #0]
}
 8005ece:	bf00      	nop
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d103      	bne.n	8005efa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	e00c      	b.n	8005f14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3308      	adds	r3, #8
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	e002      	b.n	8005f08 <vListInsert+0x2e>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d2f6      	bcs.n	8005f02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	601a      	str	r2, [r3, #0]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6892      	ldr	r2, [r2, #8]
 8005f62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6852      	ldr	r2, [r2, #4]
 8005f6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d103      	bne.n	8005f80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	1e5a      	subs	r2, r3, #1
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fca:	f002 fe2b 	bl	8008c24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd6:	68f9      	ldr	r1, [r7, #12]
 8005fd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fda:	fb01 f303 	mul.w	r3, r1, r3
 8005fde:	441a      	add	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	68f9      	ldr	r1, [r7, #12]
 8005ffe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	441a      	add	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	22ff      	movs	r2, #255	; 0xff
 800600e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	22ff      	movs	r2, #255	; 0xff
 8006016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d114      	bne.n	800604a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01a      	beq.n	800605e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3310      	adds	r3, #16
 800602c:	4618      	mov	r0, r3
 800602e:	f001 fdd1 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d012      	beq.n	800605e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <xQueueGenericReset+0xcc>)
 800603a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	e009      	b.n	800605e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3310      	adds	r3, #16
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff fef2 	bl	8005e38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3324      	adds	r3, #36	; 0x24
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff feed 	bl	8005e38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800605e:	f002 fe11 	bl	8008c84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006062:	2301      	movs	r3, #1
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	e000ed04 	.word	0xe000ed04

08006070 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08e      	sub	sp, #56	; 0x38
 8006074:	af02      	add	r7, sp, #8
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <xQueueGenericCreateStatic+0x52>
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <xQueueGenericCreateStatic+0x56>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <xQueueGenericCreateStatic+0x58>
 80060c6:	2300      	movs	r3, #0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	623b      	str	r3, [r7, #32]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d102      	bne.n	80060ee <xQueueGenericCreateStatic+0x7e>
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <xQueueGenericCreateStatic+0x82>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <xQueueGenericCreateStatic+0x84>
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	61fb      	str	r3, [r7, #28]
}
 800610a:	bf00      	nop
 800610c:	e7fe      	b.n	800610c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800610e:	2350      	movs	r3, #80	; 0x50
 8006110:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b50      	cmp	r3, #80	; 0x50
 8006116:	d00a      	beq.n	800612e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	61bb      	str	r3, [r7, #24]
}
 800612a:	bf00      	nop
 800612c:	e7fe      	b.n	800612c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800612e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006142:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	4613      	mov	r3, r2
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f83f 	bl	80061d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006158:	4618      	mov	r0, r3
 800615a:	3730      	adds	r7, #48	; 0x30
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10a      	bne.n	800618a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	613b      	str	r3, [r7, #16]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	3350      	adds	r3, #80	; 0x50
 8006198:	4618      	mov	r0, r3
 800619a:	f002 fe65 	bl	8008e68 <pvPortMalloc>
 800619e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d011      	beq.n	80061ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	3350      	adds	r3, #80	; 0x50
 80061ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061b8:	79fa      	ldrb	r2, [r7, #7]
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	4613      	mov	r3, r2
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f805 	bl	80061d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061ca:	69bb      	ldr	r3, [r7, #24]
	}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d103      	bne.n	80061f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e002      	b.n	80061f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006202:	2101      	movs	r1, #1
 8006204:	69b8      	ldr	r0, [r7, #24]
 8006206:	f7ff fecb 	bl	8005fa0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00e      	beq.n	8006246 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800623a:	2300      	movs	r3, #0
 800623c:	2200      	movs	r2, #0
 800623e:	2100      	movs	r1, #0
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f90b 	bl	800645c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	4603      	mov	r3, r0
 8006256:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	461a      	mov	r2, r3
 8006264:	6939      	ldr	r1, [r7, #16]
 8006266:	6978      	ldr	r0, [r7, #20]
 8006268:	f7ff ff7a 	bl	8006160 <xQueueGenericCreate>
 800626c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff ffd3 	bl	800621a <prvInitialiseMutex>

		return xNewQueue;
 8006274:	68fb      	ldr	r3, [r7, #12]
	}
 8006276:	4618      	mov	r0, r3
 8006278:	3718      	adds	r7, #24
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800627e:	b580      	push	{r7, lr}
 8006280:	b088      	sub	sp, #32
 8006282:	af02      	add	r7, sp, #8
 8006284:	4603      	mov	r3, r0
 8006286:	6039      	str	r1, [r7, #0]
 8006288:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800628a:	2301      	movs	r3, #1
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006292:	79fb      	ldrb	r3, [r7, #7]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2200      	movs	r2, #0
 800629a:	6939      	ldr	r1, [r7, #16]
 800629c:	6978      	ldr	r0, [r7, #20]
 800629e:	f7ff fee7 	bl	8006070 <xQueueGenericCreateStatic>
 80062a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f7ff ffb8 	bl	800621a <prvInitialiseMutex>

		return xNewQueue;
 80062aa:	68fb      	ldr	r3, [r7, #12]
	}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	689c      	ldr	r4, [r3, #8]
 80062e0:	f001 fe3a 	bl	8007f58 <xTaskGetCurrentTaskHandle>
 80062e4:	4603      	mov	r3, r0
 80062e6:	429c      	cmp	r4, r3
 80062e8:	d111      	bne.n	800630e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	1e5a      	subs	r2, r3, #1
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80062fc:	2300      	movs	r3, #0
 80062fe:	2200      	movs	r2, #0
 8006300:	2100      	movs	r1, #0
 8006302:	6938      	ldr	r0, [r7, #16]
 8006304:	f000 f8aa 	bl	800645c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006308:	2301      	movs	r3, #1
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e001      	b.n	8006312 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006312:	697b      	ldr	r3, [r7, #20]
	}
 8006314:	4618      	mov	r0, r3
 8006316:	371c      	adds	r7, #28
 8006318:	46bd      	mov	sp, r7
 800631a:	bd90      	pop	{r4, r7, pc}

0800631c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800631c:	b590      	push	{r4, r7, lr}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	60fb      	str	r3, [r7, #12]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	689c      	ldr	r4, [r3, #8]
 800634a:	f001 fe05 	bl	8007f58 <xTaskGetCurrentTaskHandle>
 800634e:	4603      	mov	r3, r0
 8006350:	429c      	cmp	r4, r3
 8006352:	d107      	bne.n	8006364 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800635e:	2301      	movs	r3, #1
 8006360:	617b      	str	r3, [r7, #20]
 8006362:	e00c      	b.n	800637e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006364:	6839      	ldr	r1, [r7, #0]
 8006366:	6938      	ldr	r0, [r7, #16]
 8006368:	f000 fb7e 	bl	8006a68 <xQueueSemaphoreTake>
 800636c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d004      	beq.n	800637e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800637e:	697b      	ldr	r3, [r7, #20]
	}
 8006380:	4618      	mov	r0, r3
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	bd90      	pop	{r4, r7, pc}

08006388 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08a      	sub	sp, #40	; 0x28
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10a      	bne.n	80063b0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	61bb      	str	r3, [r7, #24]
}
 80063ac:	bf00      	nop
 80063ae:	e7fe      	b.n	80063ae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d90a      	bls.n	80063ce <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	617b      	str	r3, [r7, #20]
}
 80063ca:	bf00      	nop
 80063cc:	e7fe      	b.n	80063cc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80063ce:	2302      	movs	r3, #2
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	2100      	movs	r1, #0
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f7ff fe49 	bl	8006070 <xQueueGenericCreateStatic>
 80063de:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80063ec:	69fb      	ldr	r3, [r7, #28]
	}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b086      	sub	sp, #24
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	613b      	str	r3, [r7, #16]
}
 8006418:	bf00      	nop
 800641a:	e7fe      	b.n	800641a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d90a      	bls.n	800643a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	60fb      	str	r3, [r7, #12]
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800643a:	2202      	movs	r2, #2
 800643c:	2100      	movs	r1, #0
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7ff fe8e 	bl	8006160 <xQueueGenericCreate>
 8006444:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006452:	697b      	ldr	r3, [r7, #20]
	}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08e      	sub	sp, #56	; 0x38
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800646a:	2300      	movs	r3, #0
 800646c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10a      	bne.n	800648e <xQueueGenericSend+0x32>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <xQueueGenericSend+0x40>
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d101      	bne.n	80064a0 <xQueueGenericSend+0x44>
 800649c:	2301      	movs	r3, #1
 800649e:	e000      	b.n	80064a2 <xQueueGenericSend+0x46>
 80064a0:	2300      	movs	r3, #0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10a      	bne.n	80064bc <xQueueGenericSend+0x60>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d103      	bne.n	80064ca <xQueueGenericSend+0x6e>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <xQueueGenericSend+0x72>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <xQueueGenericSend+0x74>
 80064ce:	2300      	movs	r3, #0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xQueueGenericSend+0x8e>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	623b      	str	r3, [r7, #32]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064ea:	f001 fd45 	bl	8007f78 <xTaskGetSchedulerState>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <xQueueGenericSend+0x9e>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <xQueueGenericSend+0xa2>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <xQueueGenericSend+0xa4>
 80064fe:	2300      	movs	r3, #0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <xQueueGenericSend+0xbe>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	61fb      	str	r3, [r7, #28]
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800651a:	f002 fb83 	bl	8008c24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006526:	429a      	cmp	r2, r3
 8006528:	d302      	bcc.n	8006530 <xQueueGenericSend+0xd4>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b02      	cmp	r3, #2
 800652e:	d129      	bne.n	8006584 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	68b9      	ldr	r1, [r7, #8]
 8006534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006536:	f000 fc9a 	bl	8006e6e <prvCopyDataToQueue>
 800653a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d010      	beq.n	8006566 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	3324      	adds	r3, #36	; 0x24
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fb43 	bl	8007bd4 <xTaskRemoveFromEventList>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d013      	beq.n	800657c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006554:	4b3f      	ldr	r3, [pc, #252]	; (8006654 <xQueueGenericSend+0x1f8>)
 8006556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655a:	601a      	str	r2, [r3, #0]
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	e00a      	b.n	800657c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800656c:	4b39      	ldr	r3, [pc, #228]	; (8006654 <xQueueGenericSend+0x1f8>)
 800656e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800657c:	f002 fb82 	bl	8008c84 <vPortExitCritical>
				return pdPASS;
 8006580:	2301      	movs	r3, #1
 8006582:	e063      	b.n	800664c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800658a:	f002 fb7b 	bl	8008c84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800658e:	2300      	movs	r3, #0
 8006590:	e05c      	b.n	800664c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	2b00      	cmp	r3, #0
 8006596:	d106      	bne.n	80065a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006598:	f107 0314 	add.w	r3, r7, #20
 800659c:	4618      	mov	r0, r3
 800659e:	f001 fb7d 	bl	8007c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065a2:	2301      	movs	r3, #1
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065a6:	f002 fb6d 	bl	8008c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065aa:	f001 f8c7 	bl	800773c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ae:	f002 fb39 	bl	8008c24 <vPortEnterCritical>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065b8:	b25b      	sxtb	r3, r3
 80065ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065be:	d103      	bne.n	80065c8 <xQueueGenericSend+0x16c>
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ce:	b25b      	sxtb	r3, r3
 80065d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d4:	d103      	bne.n	80065de <xQueueGenericSend+0x182>
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065de:	f002 fb51 	bl	8008c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065e2:	1d3a      	adds	r2, r7, #4
 80065e4:	f107 0314 	add.w	r3, r7, #20
 80065e8:	4611      	mov	r1, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f001 fb6c 	bl	8007cc8 <xTaskCheckForTimeOut>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d124      	bne.n	8006640 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065f8:	f000 fd31 	bl	800705e <prvIsQueueFull>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d018      	beq.n	8006634 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	3310      	adds	r3, #16
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4611      	mov	r1, r2
 800660a:	4618      	mov	r0, r3
 800660c:	f001 fa92 	bl	8007b34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006612:	f000 fcbc 	bl	8006f8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006616:	f001 f89f 	bl	8007758 <xTaskResumeAll>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	f47f af7c 	bne.w	800651a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006622:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <xQueueGenericSend+0x1f8>)
 8006624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	e772      	b.n	800651a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006636:	f000 fcaa 	bl	8006f8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800663a:	f001 f88d 	bl	8007758 <xTaskResumeAll>
 800663e:	e76c      	b.n	800651a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006642:	f000 fca4 	bl	8006f8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006646:	f001 f887 	bl	8007758 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800664a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800664c:	4618      	mov	r0, r3
 800664e:	3738      	adds	r7, #56	; 0x38
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b090      	sub	sp, #64	; 0x40
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d103      	bne.n	8006694 <xQueueGenericSendFromISR+0x3c>
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <xQueueGenericSendFromISR+0x40>
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <xQueueGenericSendFromISR+0x42>
 8006698:	2300      	movs	r3, #0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d103      	bne.n	80066c2 <xQueueGenericSendFromISR+0x6a>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <xQueueGenericSendFromISR+0x6e>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <xQueueGenericSendFromISR+0x70>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	623b      	str	r3, [r7, #32]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066e2:	f002 fb81 	bl	8008de8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066e6:	f3ef 8211 	mrs	r2, BASEPRI
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	61fa      	str	r2, [r7, #28]
 80066fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006700:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	429a      	cmp	r2, r3
 800670c:	d302      	bcc.n	8006714 <xQueueGenericSendFromISR+0xbc>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b02      	cmp	r3, #2
 8006712:	d12f      	bne.n	8006774 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800671a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800672a:	f000 fba0 	bl	8006e6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800672e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006736:	d112      	bne.n	800675e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	d016      	beq.n	800676e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006742:	3324      	adds	r3, #36	; 0x24
 8006744:	4618      	mov	r0, r3
 8006746:	f001 fa45 	bl	8007bd4 <xTaskRemoveFromEventList>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00e      	beq.n	800676e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	e007      	b.n	800676e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800675e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006762:	3301      	adds	r3, #1
 8006764:	b2db      	uxtb	r3, r3
 8006766:	b25a      	sxtb	r2, r3
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800676e:	2301      	movs	r3, #1
 8006770:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006772:	e001      	b.n	8006778 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006774:	2300      	movs	r3, #0
 8006776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006782:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006786:	4618      	mov	r0, r3
 8006788:	3740      	adds	r7, #64	; 0x40
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b08e      	sub	sp, #56	; 0x38
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	623b      	str	r3, [r7, #32]
}
 80067b4:	bf00      	nop
 80067b6:	e7fe      	b.n	80067b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80067b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00a      	beq.n	80067d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	61fb      	str	r3, [r7, #28]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <xQueueGiveFromISR+0x58>
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <xQueueGiveFromISR+0x5c>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <xQueueGiveFromISR+0x5e>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <xQueueGiveFromISR+0x78>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	61bb      	str	r3, [r7, #24]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006806:	f002 faef 	bl	8008de8 <vPortValidateInterruptPriority>
	__asm volatile
 800680a:	f3ef 8211 	mrs	r2, BASEPRI
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	617a      	str	r2, [r7, #20]
 8006820:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006822:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006832:	429a      	cmp	r2, r3
 8006834:	d22b      	bcs.n	800688e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800683c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006848:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d112      	bne.n	8006878 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	2b00      	cmp	r3, #0
 8006858:	d016      	beq.n	8006888 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	3324      	adds	r3, #36	; 0x24
 800685e:	4618      	mov	r0, r3
 8006860:	f001 f9b8 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00e      	beq.n	8006888 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2201      	movs	r2, #1
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e007      	b.n	8006888 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800687c:	3301      	adds	r3, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	b25a      	sxtb	r2, r3
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006888:	2301      	movs	r3, #1
 800688a:	637b      	str	r3, [r7, #52]	; 0x34
 800688c:	e001      	b.n	8006892 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800688e:	2300      	movs	r3, #0
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f383 8811 	msr	BASEPRI, r3
}
 800689c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800689e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3738      	adds	r7, #56	; 0x38
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	; 0x30
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <xQueueReceive+0x30>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	623b      	str	r3, [r7, #32]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d103      	bne.n	80068e6 <xQueueReceive+0x3e>
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <xQueueReceive+0x42>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <xQueueReceive+0x44>
 80068ea:	2300      	movs	r3, #0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <xQueueReceive+0x5e>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	61fb      	str	r3, [r7, #28]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006906:	f001 fb37 	bl	8007f78 <xTaskGetSchedulerState>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d102      	bne.n	8006916 <xQueueReceive+0x6e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <xQueueReceive+0x72>
 8006916:	2301      	movs	r3, #1
 8006918:	e000      	b.n	800691c <xQueueReceive+0x74>
 800691a:	2300      	movs	r3, #0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <xQueueReceive+0x8e>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	61bb      	str	r3, [r7, #24]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006936:	f002 f975 	bl	8008c24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800693a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	2b00      	cmp	r3, #0
 8006944:	d01f      	beq.n	8006986 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800694a:	f000 fafa 	bl	8006f42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	1e5a      	subs	r2, r3, #1
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00f      	beq.n	800697e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	3310      	adds	r3, #16
 8006962:	4618      	mov	r0, r3
 8006964:	f001 f936 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d007      	beq.n	800697e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800696e:	4b3d      	ldr	r3, [pc, #244]	; (8006a64 <xQueueReceive+0x1bc>)
 8006970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800697e:	f002 f981 	bl	8008c84 <vPortExitCritical>
				return pdPASS;
 8006982:	2301      	movs	r3, #1
 8006984:	e069      	b.n	8006a5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d103      	bne.n	8006994 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800698c:	f002 f97a 	bl	8008c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006990:	2300      	movs	r3, #0
 8006992:	e062      	b.n	8006a5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d106      	bne.n	80069a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800699a:	f107 0310 	add.w	r3, r7, #16
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 f97c 	bl	8007c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069a8:	f002 f96c 	bl	8008c84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069ac:	f000 fec6 	bl	800773c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069b0:	f002 f938 	bl	8008c24 <vPortEnterCritical>
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069ba:	b25b      	sxtb	r3, r3
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c0:	d103      	bne.n	80069ca <xQueueReceive+0x122>
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069d0:	b25b      	sxtb	r3, r3
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	d103      	bne.n	80069e0 <xQueueReceive+0x138>
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069e0:	f002 f950 	bl	8008c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069e4:	1d3a      	adds	r2, r7, #4
 80069e6:	f107 0310 	add.w	r3, r7, #16
 80069ea:	4611      	mov	r1, r2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 f96b 	bl	8007cc8 <xTaskCheckForTimeOut>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d123      	bne.n	8006a40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069fa:	f000 fb1a 	bl	8007032 <prvIsQueueEmpty>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d017      	beq.n	8006a34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a06:	3324      	adds	r3, #36	; 0x24
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 f891 	bl	8007b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a14:	f000 fabb 	bl	8006f8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a18:	f000 fe9e 	bl	8007758 <xTaskResumeAll>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d189      	bne.n	8006936 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006a22:	4b10      	ldr	r3, [pc, #64]	; (8006a64 <xQueueReceive+0x1bc>)
 8006a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	e780      	b.n	8006936 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a36:	f000 faaa 	bl	8006f8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a3a:	f000 fe8d 	bl	8007758 <xTaskResumeAll>
 8006a3e:	e77a      	b.n	8006936 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a42:	f000 faa4 	bl	8006f8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a46:	f000 fe87 	bl	8007758 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4c:	f000 faf1 	bl	8007032 <prvIsQueueEmpty>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f43f af6f 	beq.w	8006936 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3730      	adds	r7, #48	; 0x30
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	e000ed04 	.word	0xe000ed04

08006a68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08e      	sub	sp, #56	; 0x38
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	623b      	str	r3, [r7, #32]
}
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00a      	beq.n	8006ab8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	61fb      	str	r3, [r7, #28]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ab8:	f001 fa5e 	bl	8007f78 <xTaskGetSchedulerState>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d102      	bne.n	8006ac8 <xQueueSemaphoreTake+0x60>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <xQueueSemaphoreTake+0x64>
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e000      	b.n	8006ace <xQueueSemaphoreTake+0x66>
 8006acc:	2300      	movs	r3, #0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10a      	bne.n	8006ae8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	61bb      	str	r3, [r7, #24]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ae8:	f002 f89c 	bl	8008c24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d024      	beq.n	8006b42 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afa:	1e5a      	subs	r2, r3, #1
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b08:	f001 fbac 	bl	8008264 <pvTaskIncrementMutexHeldCount>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00f      	beq.n	8006b3a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	3310      	adds	r3, #16
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 f858 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b2a:	4b54      	ldr	r3, [pc, #336]	; (8006c7c <xQueueSemaphoreTake+0x214>)
 8006b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b3a:	f002 f8a3 	bl	8008c84 <vPortExitCritical>
				return pdPASS;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e097      	b.n	8006c72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d111      	bne.n	8006b6c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	617b      	str	r3, [r7, #20]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006b64:	f002 f88e 	bl	8008c84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e082      	b.n	8006c72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b72:	f107 030c 	add.w	r3, r7, #12
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 f890 	bl	8007c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b80:	f002 f880 	bl	8008c84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b84:	f000 fdda 	bl	800773c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b88:	f002 f84c 	bl	8008c24 <vPortEnterCritical>
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b92:	b25b      	sxtb	r3, r3
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d103      	bne.n	8006ba2 <xQueueSemaphoreTake+0x13a>
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d103      	bne.n	8006bb8 <xQueueSemaphoreTake+0x150>
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb8:	f002 f864 	bl	8008c84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	f107 030c 	add.w	r3, r7, #12
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 f87f 	bl	8007cc8 <xTaskCheckForTimeOut>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d132      	bne.n	8006c36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bd2:	f000 fa2e 	bl	8007032 <prvIsQueueEmpty>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d026      	beq.n	8006c2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006be4:	f002 f81e 	bl	8008c24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 f9e1 	bl	8007fb4 <xTaskPriorityInherit>
 8006bf2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006bf4:	f002 f846 	bl	8008c84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfa:	3324      	adds	r3, #36	; 0x24
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	4611      	mov	r1, r2
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 ff97 	bl	8007b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c08:	f000 f9c1 	bl	8006f8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c0c:	f000 fda4 	bl	8007758 <xTaskResumeAll>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f47f af68 	bne.w	8006ae8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006c18:	4b18      	ldr	r3, [pc, #96]	; (8006c7c <xQueueSemaphoreTake+0x214>)
 8006c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	e75e      	b.n	8006ae8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c2c:	f000 f9af 	bl	8006f8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c30:	f000 fd92 	bl	8007758 <xTaskResumeAll>
 8006c34:	e758      	b.n	8006ae8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c38:	f000 f9a9 	bl	8006f8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c3c:	f000 fd8c 	bl	8007758 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c42:	f000 f9f6 	bl	8007032 <prvIsQueueEmpty>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f43f af4d 	beq.w	8006ae8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00d      	beq.n	8006c70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006c54:	f001 ffe6 	bl	8008c24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c5a:	f000 f8f0 	bl	8006e3e <prvGetDisinheritPriorityAfterTimeout>
 8006c5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 fa7a 	bl	8008160 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c6c:	f002 f80a 	bl	8008c84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3738      	adds	r7, #56	; 0x38
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	e000ed04 	.word	0xe000ed04

08006c80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08e      	sub	sp, #56	; 0x38
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	623b      	str	r3, [r7, #32]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d103      	bne.n	8006cba <xQueueReceiveFromISR+0x3a>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <xQueueReceiveFromISR+0x3e>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e000      	b.n	8006cc0 <xQueueReceiveFromISR+0x40>
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	61fb      	str	r3, [r7, #28]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cda:	f002 f885 	bl	8008de8 <vPortValidateInterruptPriority>
	__asm volatile
 8006cde:	f3ef 8211 	mrs	r2, BASEPRI
 8006ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	61ba      	str	r2, [r7, #24]
 8006cf4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006cf6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d02f      	beq.n	8006d66 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d14:	f000 f915 	bl	8006f42 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	1e5a      	subs	r2, r3, #1
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006d20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d112      	bne.n	8006d50 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d016      	beq.n	8006d60 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	3310      	adds	r3, #16
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 ff4c 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00e      	beq.n	8006d60 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e007      	b.n	8006d60 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d54:	3301      	adds	r3, #1
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	b25a      	sxtb	r2, r3
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006d60:	2301      	movs	r3, #1
 8006d62:	637b      	str	r3, [r7, #52]	; 0x34
 8006d64:	e001      	b.n	8006d6a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f383 8811 	msr	BASEPRI, r3
}
 8006d74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3738      	adds	r7, #56	; 0x38
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10a      	bne.n	8006da4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60bb      	str	r3, [r7, #8]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006da4:	f001 ff3e 	bl	8008c24 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dac:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006dae:	f001 ff69 	bl	8008c84 <vPortExitCritical>

	return uxReturn;
 8006db2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10a      	bne.n	8006de4 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	60fb      	str	r3, [r7, #12]
}
 8006de0:	bf00      	nop
 8006de2:	e7fe      	b.n	8006de2 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006dea:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006dec:	4618      	mov	r0, r3
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <vQueueDelete+0x28>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	60bb      	str	r3, [r7, #8]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f95f 	bl	80070e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d102      	bne.n	8006e36 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f002 f8e5 	bl	8009000 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d006      	beq.n	8006e5c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e001      	b.n	8006e60 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e60:	68fb      	ldr	r3, [r7, #12]
	}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b086      	sub	sp, #24
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10d      	bne.n	8006ea8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d14d      	bne.n	8006f30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 f8f3 	bl	8008084 <xTaskPriorityDisinherit>
 8006e9e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	609a      	str	r2, [r3, #8]
 8006ea6:	e043      	b.n	8006f30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d119      	bne.n	8006ee2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6858      	ldr	r0, [r3, #4]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	f013 fb77 	bl	801a5ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	441a      	add	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d32b      	bcc.n	8006f30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	605a      	str	r2, [r3, #4]
 8006ee0:	e026      	b.n	8006f30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68d8      	ldr	r0, [r3, #12]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	461a      	mov	r2, r3
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	f013 fb5d 	bl	801a5ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	425b      	negs	r3, r3
 8006efc:	441a      	add	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d207      	bcs.n	8006f1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f16:	425b      	negs	r3, r3
 8006f18:	441a      	add	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d105      	bne.n	8006f30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f38:	697b      	ldr	r3, [r7, #20]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3718      	adds	r7, #24
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d018      	beq.n	8006f86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5c:	441a      	add	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d303      	bcc.n	8006f76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68d9      	ldr	r1, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	461a      	mov	r2, r3
 8006f80:	6838      	ldr	r0, [r7, #0]
 8006f82:	f013 fb13 	bl	801a5ac <memcpy>
	}
}
 8006f86:	bf00      	nop
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f96:	f001 fe45 	bl	8008c24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fa0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fa2:	e011      	b.n	8006fc8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d012      	beq.n	8006fd2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3324      	adds	r3, #36	; 0x24
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fe0f 	bl	8007bd4 <xTaskRemoveFromEventList>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fbc:	f000 fee6 	bl	8007d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	dce9      	bgt.n	8006fa4 <prvUnlockQueue+0x16>
 8006fd0:	e000      	b.n	8006fd4 <prvUnlockQueue+0x46>
					break;
 8006fd2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	22ff      	movs	r2, #255	; 0xff
 8006fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006fdc:	f001 fe52 	bl	8008c84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006fe0:	f001 fe20 	bl	8008c24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fec:	e011      	b.n	8007012 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d012      	beq.n	800701c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	3310      	adds	r3, #16
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fdea 	bl	8007bd4 <xTaskRemoveFromEventList>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007006:	f000 fec1 	bl	8007d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	3b01      	subs	r3, #1
 800700e:	b2db      	uxtb	r3, r3
 8007010:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007012:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007016:	2b00      	cmp	r3, #0
 8007018:	dce9      	bgt.n	8006fee <prvUnlockQueue+0x60>
 800701a:	e000      	b.n	800701e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800701c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	22ff      	movs	r2, #255	; 0xff
 8007022:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007026:	f001 fe2d 	bl	8008c84 <vPortExitCritical>
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800703a:	f001 fdf3 	bl	8008c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007046:	2301      	movs	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	e001      	b.n	8007050 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007050:	f001 fe18 	bl	8008c84 <vPortExitCritical>

	return xReturn;
 8007054:	68fb      	ldr	r3, [r7, #12]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007066:	f001 fddd 	bl	8008c24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	429a      	cmp	r2, r3
 8007074:	d102      	bne.n	800707c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007076:	2301      	movs	r3, #1
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	e001      	b.n	8007080 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007080:	f001 fe00 	bl	8008c84 <vPortExitCritical>

	return xReturn;
 8007084:	68fb      	ldr	r3, [r7, #12]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
	...

08007090 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
 800709e:	e014      	b.n	80070ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070a0:	4a0f      	ldr	r2, [pc, #60]	; (80070e0 <vQueueAddToRegistry+0x50>)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10b      	bne.n	80070c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070ac:	490c      	ldr	r1, [pc, #48]	; (80070e0 <vQueueAddToRegistry+0x50>)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070b6:	4a0a      	ldr	r2, [pc, #40]	; (80070e0 <vQueueAddToRegistry+0x50>)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	00db      	lsls	r3, r3, #3
 80070bc:	4413      	add	r3, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070c2:	e006      	b.n	80070d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b07      	cmp	r3, #7
 80070ce:	d9e7      	bls.n	80070a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070d0:	bf00      	nop
 80070d2:	bf00      	nop
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20014e08 	.word	0x20014e08

080070e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	e016      	b.n	8007120 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80070f2:	4a10      	ldr	r2, [pc, #64]	; (8007134 <vQueueUnregisterQueue+0x50>)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d10b      	bne.n	800711a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007102:	4a0c      	ldr	r2, [pc, #48]	; (8007134 <vQueueUnregisterQueue+0x50>)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2100      	movs	r1, #0
 8007108:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800710c:	4a09      	ldr	r2, [pc, #36]	; (8007134 <vQueueUnregisterQueue+0x50>)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	4413      	add	r3, r2
 8007114:	2200      	movs	r2, #0
 8007116:	605a      	str	r2, [r3, #4]
				break;
 8007118:	e006      	b.n	8007128 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3301      	adds	r3, #1
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2b07      	cmp	r3, #7
 8007124:	d9e5      	bls.n	80070f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007126:	bf00      	nop
 8007128:	bf00      	nop
 800712a:	3714      	adds	r7, #20
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	20014e08 	.word	0x20014e08

08007138 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007148:	f001 fd6c 	bl	8008c24 <vPortEnterCritical>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007152:	b25b      	sxtb	r3, r3
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007158:	d103      	bne.n	8007162 <vQueueWaitForMessageRestricted+0x2a>
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007168:	b25b      	sxtb	r3, r3
 800716a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716e:	d103      	bne.n	8007178 <vQueueWaitForMessageRestricted+0x40>
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007178:	f001 fd84 	bl	8008c84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	2b00      	cmp	r3, #0
 8007182:	d106      	bne.n	8007192 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	3324      	adds	r3, #36	; 0x24
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	4618      	mov	r0, r3
 800718e:	f000 fcf5 	bl	8007b7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007192:	6978      	ldr	r0, [r7, #20]
 8007194:	f7ff fefb 	bl	8006f8e <prvUnlockQueue>
	}
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08e      	sub	sp, #56	; 0x38
 80071a4:	af04      	add	r7, sp, #16
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	623b      	str	r3, [r7, #32]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	61fb      	str	r3, [r7, #28]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071e6:	23bc      	movs	r3, #188	; 0xbc
 80071e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	2bbc      	cmp	r3, #188	; 0xbc
 80071ee:	d00a      	beq.n	8007206 <xTaskCreateStatic+0x66>
	__asm volatile
 80071f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f4:	f383 8811 	msr	BASEPRI, r3
 80071f8:	f3bf 8f6f 	isb	sy
 80071fc:	f3bf 8f4f 	dsb	sy
 8007200:	61bb      	str	r3, [r7, #24]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007206:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01e      	beq.n	800724c <xTaskCreateStatic+0xac>
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01b      	beq.n	800724c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800721c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	2202      	movs	r2, #2
 8007222:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007226:	2300      	movs	r3, #0
 8007228:	9303      	str	r3, [sp, #12]
 800722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722c:	9302      	str	r3, [sp, #8]
 800722e:	f107 0314 	add.w	r3, r7, #20
 8007232:	9301      	str	r3, [sp, #4]
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f850 	bl	80072e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007246:	f000 f8f3 	bl	8007430 <prvAddNewTaskToReadyList>
 800724a:	e001      	b.n	8007250 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007250:	697b      	ldr	r3, [r7, #20]
	}
 8007252:	4618      	mov	r0, r3
 8007254:	3728      	adds	r7, #40	; 0x28
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800725a:	b580      	push	{r7, lr}
 800725c:	b08c      	sub	sp, #48	; 0x30
 800725e:	af04      	add	r7, sp, #16
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	4613      	mov	r3, r2
 8007268:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4618      	mov	r0, r3
 8007270:	f001 fdfa 	bl	8008e68 <pvPortMalloc>
 8007274:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00e      	beq.n	800729a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800727c:	20bc      	movs	r0, #188	; 0xbc
 800727e:	f001 fdf3 	bl	8008e68 <pvPortMalloc>
 8007282:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	631a      	str	r2, [r3, #48]	; 0x30
 8007290:	e005      	b.n	800729e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007292:	6978      	ldr	r0, [r7, #20]
 8007294:	f001 feb4 	bl	8009000 <vPortFree>
 8007298:	e001      	b.n	800729e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800729a:	2300      	movs	r3, #0
 800729c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d017      	beq.n	80072d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072ac:	88fa      	ldrh	r2, [r7, #6]
 80072ae:	2300      	movs	r3, #0
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	9302      	str	r3, [sp, #8]
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	9301      	str	r3, [sp, #4]
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68b9      	ldr	r1, [r7, #8]
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f80e 	bl	80072e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072c8:	69f8      	ldr	r0, [r7, #28]
 80072ca:	f000 f8b1 	bl	8007430 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072ce:	2301      	movs	r3, #1
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	e002      	b.n	80072da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072d4:	f04f 33ff 	mov.w	r3, #4294967295
 80072d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072da:	69bb      	ldr	r3, [r7, #24]
	}
 80072dc:	4618      	mov	r0, r3
 80072de:	3720      	adds	r7, #32
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
 80072f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	461a      	mov	r2, r3
 80072fc:	21a5      	movs	r1, #165	; 0xa5
 80072fe:	f013 f97d 	bl	801a5fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800730c:	3b01      	subs	r3, #1
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	f023 0307 	bic.w	r3, r3, #7
 800731a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00a      	beq.n	800733c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	617b      	str	r3, [r7, #20]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d01f      	beq.n	8007382 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007342:	2300      	movs	r3, #0
 8007344:	61fb      	str	r3, [r7, #28]
 8007346:	e012      	b.n	800736e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	7819      	ldrb	r1, [r3, #0]
 8007350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4413      	add	r3, r2
 8007356:	3334      	adds	r3, #52	; 0x34
 8007358:	460a      	mov	r2, r1
 800735a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d006      	beq.n	8007376 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	3301      	adds	r3, #1
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	2b0f      	cmp	r3, #15
 8007372:	d9e9      	bls.n	8007348 <prvInitialiseNewTask+0x64>
 8007374:	e000      	b.n	8007378 <prvInitialiseNewTask+0x94>
			{
				break;
 8007376:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007380:	e003      	b.n	800738a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	2b37      	cmp	r3, #55	; 0x37
 800738e:	d901      	bls.n	8007394 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007390:	2337      	movs	r3, #55	; 0x37
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007398:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800739e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	2200      	movs	r2, #0
 80073a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	3304      	adds	r3, #4
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fd64 	bl	8005e78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	3318      	adds	r3, #24
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fd5f 	bl	8005e78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	3354      	adds	r3, #84	; 0x54
 80073e4:	2260      	movs	r2, #96	; 0x60
 80073e6:	2100      	movs	r1, #0
 80073e8:	4618      	mov	r0, r3
 80073ea:	f013 f907 	bl	801a5fc <memset>
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <prvInitialiseNewTask+0x140>)
 80073f2:	659a      	str	r2, [r3, #88]	; 0x58
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	4a0c      	ldr	r2, [pc, #48]	; (8007428 <prvInitialiseNewTask+0x144>)
 80073f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	4a0b      	ldr	r2, [pc, #44]	; (800742c <prvInitialiseNewTask+0x148>)
 80073fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	68f9      	ldr	r1, [r7, #12]
 8007404:	69b8      	ldr	r0, [r7, #24]
 8007406:	f001 fae3 	bl	80089d0 <pxPortInitialiseStack>
 800740a:	4602      	mov	r2, r0
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800741c:	bf00      	nop
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	0801f7d8 	.word	0x0801f7d8
 8007428:	0801f7f8 	.word	0x0801f7f8
 800742c:	0801f7b8 	.word	0x0801f7b8

08007430 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007438:	f001 fbf4 	bl	8008c24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800743c:	4b2d      	ldr	r3, [pc, #180]	; (80074f4 <prvAddNewTaskToReadyList+0xc4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	4a2c      	ldr	r2, [pc, #176]	; (80074f4 <prvAddNewTaskToReadyList+0xc4>)
 8007444:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007446:	4b2c      	ldr	r3, [pc, #176]	; (80074f8 <prvAddNewTaskToReadyList+0xc8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d109      	bne.n	8007462 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800744e:	4a2a      	ldr	r2, [pc, #168]	; (80074f8 <prvAddNewTaskToReadyList+0xc8>)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007454:	4b27      	ldr	r3, [pc, #156]	; (80074f4 <prvAddNewTaskToReadyList+0xc4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d110      	bne.n	800747e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800745c:	f000 fcba 	bl	8007dd4 <prvInitialiseTaskLists>
 8007460:	e00d      	b.n	800747e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007462:	4b26      	ldr	r3, [pc, #152]	; (80074fc <prvAddNewTaskToReadyList+0xcc>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800746a:	4b23      	ldr	r3, [pc, #140]	; (80074f8 <prvAddNewTaskToReadyList+0xc8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	429a      	cmp	r2, r3
 8007476:	d802      	bhi.n	800747e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007478:	4a1f      	ldr	r2, [pc, #124]	; (80074f8 <prvAddNewTaskToReadyList+0xc8>)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800747e:	4b20      	ldr	r3, [pc, #128]	; (8007500 <prvAddNewTaskToReadyList+0xd0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3301      	adds	r3, #1
 8007484:	4a1e      	ldr	r2, [pc, #120]	; (8007500 <prvAddNewTaskToReadyList+0xd0>)
 8007486:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007488:	4b1d      	ldr	r3, [pc, #116]	; (8007500 <prvAddNewTaskToReadyList+0xd0>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007494:	4b1b      	ldr	r3, [pc, #108]	; (8007504 <prvAddNewTaskToReadyList+0xd4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	429a      	cmp	r2, r3
 800749a:	d903      	bls.n	80074a4 <prvAddNewTaskToReadyList+0x74>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	4a18      	ldr	r2, [pc, #96]	; (8007504 <prvAddNewTaskToReadyList+0xd4>)
 80074a2:	6013      	str	r3, [r2, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a8:	4613      	mov	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4a15      	ldr	r2, [pc, #84]	; (8007508 <prvAddNewTaskToReadyList+0xd8>)
 80074b2:	441a      	add	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3304      	adds	r3, #4
 80074b8:	4619      	mov	r1, r3
 80074ba:	4610      	mov	r0, r2
 80074bc:	f7fe fce9 	bl	8005e92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074c0:	f001 fbe0 	bl	8008c84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074c4:	4b0d      	ldr	r3, [pc, #52]	; (80074fc <prvAddNewTaskToReadyList+0xcc>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00e      	beq.n	80074ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <prvAddNewTaskToReadyList+0xc8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d207      	bcs.n	80074ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074da:	4b0c      	ldr	r3, [pc, #48]	; (800750c <prvAddNewTaskToReadyList+0xdc>)
 80074dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	200013c4 	.word	0x200013c4
 80074f8:	20000ef0 	.word	0x20000ef0
 80074fc:	200013d0 	.word	0x200013d0
 8007500:	200013e0 	.word	0x200013e0
 8007504:	200013cc 	.word	0x200013cc
 8007508:	20000ef4 	.word	0x20000ef4
 800750c:	e000ed04 	.word	0xe000ed04

08007510 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007518:	f001 fb84 	bl	8008c24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <vTaskDelete+0x18>
 8007522:	4b2c      	ldr	r3, [pc, #176]	; (80075d4 <vTaskDelete+0xc4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	e000      	b.n	800752a <vTaskDelete+0x1a>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3304      	adds	r3, #4
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fd0b 	bl	8005f4c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	2b00      	cmp	r3, #0
 800753c:	d004      	beq.n	8007548 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3318      	adds	r3, #24
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fd02 	bl	8005f4c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007548:	4b23      	ldr	r3, [pc, #140]	; (80075d8 <vTaskDelete+0xc8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	4a22      	ldr	r2, [pc, #136]	; (80075d8 <vTaskDelete+0xc8>)
 8007550:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007552:	4b20      	ldr	r3, [pc, #128]	; (80075d4 <vTaskDelete+0xc4>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	429a      	cmp	r2, r3
 800755a:	d10b      	bne.n	8007574 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3304      	adds	r3, #4
 8007560:	4619      	mov	r1, r3
 8007562:	481e      	ldr	r0, [pc, #120]	; (80075dc <vTaskDelete+0xcc>)
 8007564:	f7fe fc95 	bl	8005e92 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007568:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <vTaskDelete+0xd0>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3301      	adds	r3, #1
 800756e:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <vTaskDelete+0xd0>)
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	e009      	b.n	8007588 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007574:	4b1b      	ldr	r3, [pc, #108]	; (80075e4 <vTaskDelete+0xd4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3b01      	subs	r3, #1
 800757a:	4a1a      	ldr	r2, [pc, #104]	; (80075e4 <vTaskDelete+0xd4>)
 800757c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 fc96 	bl	8007eb0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007584:	f000 fcc8 	bl	8007f18 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007588:	f001 fb7c 	bl	8008c84 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800758c:	4b16      	ldr	r3, [pc, #88]	; (80075e8 <vTaskDelete+0xd8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d01b      	beq.n	80075cc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007594:	4b0f      	ldr	r3, [pc, #60]	; (80075d4 <vTaskDelete+0xc4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	429a      	cmp	r2, r3
 800759c:	d116      	bne.n	80075cc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800759e:	4b13      	ldr	r3, [pc, #76]	; (80075ec <vTaskDelete+0xdc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00a      	beq.n	80075bc <vTaskDelete+0xac>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	60bb      	str	r3, [r7, #8]
}
 80075b8:	bf00      	nop
 80075ba:	e7fe      	b.n	80075ba <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80075bc:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <vTaskDelete+0xe0>)
 80075be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075cc:	bf00      	nop
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000ef0 	.word	0x20000ef0
 80075d8:	200013e0 	.word	0x200013e0
 80075dc:	20001398 	.word	0x20001398
 80075e0:	200013ac 	.word	0x200013ac
 80075e4:	200013c4 	.word	0x200013c4
 80075e8:	200013d0 	.word	0x200013d0
 80075ec:	200013ec 	.word	0x200013ec
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d017      	beq.n	8007636 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007606:	4b13      	ldr	r3, [pc, #76]	; (8007654 <vTaskDelay+0x60>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <vTaskDelay+0x30>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	60bb      	str	r3, [r7, #8]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007624:	f000 f88a 	bl	800773c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007628:	2100      	movs	r1, #0
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fe2e 	bl	800828c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007630:	f000 f892 	bl	8007758 <xTaskResumeAll>
 8007634:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d107      	bne.n	800764c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <vTaskDelay+0x64>)
 800763e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	200013ec 	.word	0x200013ec
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08a      	sub	sp, #40	; 0x28
 8007660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007666:	2300      	movs	r3, #0
 8007668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800766a:	463a      	mov	r2, r7
 800766c:	1d39      	adds	r1, r7, #4
 800766e:	f107 0308 	add.w	r3, r7, #8
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe fbac 	bl	8005dd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	9202      	str	r2, [sp, #8]
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	2300      	movs	r3, #0
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	2300      	movs	r3, #0
 8007688:	460a      	mov	r2, r1
 800768a:	4924      	ldr	r1, [pc, #144]	; (800771c <vTaskStartScheduler+0xc0>)
 800768c:	4824      	ldr	r0, [pc, #144]	; (8007720 <vTaskStartScheduler+0xc4>)
 800768e:	f7ff fd87 	bl	80071a0 <xTaskCreateStatic>
 8007692:	4603      	mov	r3, r0
 8007694:	4a23      	ldr	r2, [pc, #140]	; (8007724 <vTaskStartScheduler+0xc8>)
 8007696:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007698:	4b22      	ldr	r3, [pc, #136]	; (8007724 <vTaskStartScheduler+0xc8>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076a0:	2301      	movs	r3, #1
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	e001      	b.n	80076aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d102      	bne.n	80076b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076b0:	f000 fe40 	bl	8008334 <xTimerCreateTimerTask>
 80076b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d11b      	bne.n	80076f4 <vTaskStartScheduler+0x98>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	613b      	str	r3, [r7, #16]
}
 80076ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076d0:	4b15      	ldr	r3, [pc, #84]	; (8007728 <vTaskStartScheduler+0xcc>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3354      	adds	r3, #84	; 0x54
 80076d6:	4a15      	ldr	r2, [pc, #84]	; (800772c <vTaskStartScheduler+0xd0>)
 80076d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076da:	4b15      	ldr	r3, [pc, #84]	; (8007730 <vTaskStartScheduler+0xd4>)
 80076dc:	f04f 32ff 	mov.w	r2, #4294967295
 80076e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076e2:	4b14      	ldr	r3, [pc, #80]	; (8007734 <vTaskStartScheduler+0xd8>)
 80076e4:	2201      	movs	r2, #1
 80076e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076e8:	4b13      	ldr	r3, [pc, #76]	; (8007738 <vTaskStartScheduler+0xdc>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076ee:	f001 f9f7 	bl	8008ae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076f2:	e00e      	b.n	8007712 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fa:	d10a      	bne.n	8007712 <vTaskStartScheduler+0xb6>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	60fb      	str	r3, [r7, #12]
}
 800770e:	bf00      	nop
 8007710:	e7fe      	b.n	8007710 <vTaskStartScheduler+0xb4>
}
 8007712:	bf00      	nop
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	0801ba14 	.word	0x0801ba14
 8007720:	08007da5 	.word	0x08007da5
 8007724:	200013e8 	.word	0x200013e8
 8007728:	20000ef0 	.word	0x20000ef0
 800772c:	200000e8 	.word	0x200000e8
 8007730:	200013e4 	.word	0x200013e4
 8007734:	200013d0 	.word	0x200013d0
 8007738:	200013c8 	.word	0x200013c8

0800773c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007740:	4b04      	ldr	r3, [pc, #16]	; (8007754 <vTaskSuspendAll+0x18>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3301      	adds	r3, #1
 8007746:	4a03      	ldr	r2, [pc, #12]	; (8007754 <vTaskSuspendAll+0x18>)
 8007748:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800774a:	bf00      	nop
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	200013ec 	.word	0x200013ec

08007758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007762:	2300      	movs	r3, #0
 8007764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007766:	4b42      	ldr	r3, [pc, #264]	; (8007870 <xTaskResumeAll+0x118>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <xTaskResumeAll+0x2c>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	603b      	str	r3, [r7, #0]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007784:	f001 fa4e 	bl	8008c24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007788:	4b39      	ldr	r3, [pc, #228]	; (8007870 <xTaskResumeAll+0x118>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3b01      	subs	r3, #1
 800778e:	4a38      	ldr	r2, [pc, #224]	; (8007870 <xTaskResumeAll+0x118>)
 8007790:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007792:	4b37      	ldr	r3, [pc, #220]	; (8007870 <xTaskResumeAll+0x118>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d162      	bne.n	8007860 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800779a:	4b36      	ldr	r3, [pc, #216]	; (8007874 <xTaskResumeAll+0x11c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d05e      	beq.n	8007860 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077a2:	e02f      	b.n	8007804 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077a4:	4b34      	ldr	r3, [pc, #208]	; (8007878 <xTaskResumeAll+0x120>)
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3318      	adds	r3, #24
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe fbcb 	bl	8005f4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3304      	adds	r3, #4
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fbc6 	bl	8005f4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c4:	4b2d      	ldr	r3, [pc, #180]	; (800787c <xTaskResumeAll+0x124>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d903      	bls.n	80077d4 <xTaskResumeAll+0x7c>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	4a2a      	ldr	r2, [pc, #168]	; (800787c <xTaskResumeAll+0x124>)
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d8:	4613      	mov	r3, r2
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4a27      	ldr	r2, [pc, #156]	; (8007880 <xTaskResumeAll+0x128>)
 80077e2:	441a      	add	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f7fe fb51 	bl	8005e92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077f4:	4b23      	ldr	r3, [pc, #140]	; (8007884 <xTaskResumeAll+0x12c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d302      	bcc.n	8007804 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80077fe:	4b22      	ldr	r3, [pc, #136]	; (8007888 <xTaskResumeAll+0x130>)
 8007800:	2201      	movs	r2, #1
 8007802:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007804:	4b1c      	ldr	r3, [pc, #112]	; (8007878 <xTaskResumeAll+0x120>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1cb      	bne.n	80077a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007812:	f000 fb81 	bl	8007f18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007816:	4b1d      	ldr	r3, [pc, #116]	; (800788c <xTaskResumeAll+0x134>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d010      	beq.n	8007844 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007822:	f000 f859 	bl	80078d8 <xTaskIncrementTick>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800782c:	4b16      	ldr	r3, [pc, #88]	; (8007888 <xTaskResumeAll+0x130>)
 800782e:	2201      	movs	r2, #1
 8007830:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3b01      	subs	r3, #1
 8007836:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1f1      	bne.n	8007822 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800783e:	4b13      	ldr	r3, [pc, #76]	; (800788c <xTaskResumeAll+0x134>)
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007844:	4b10      	ldr	r3, [pc, #64]	; (8007888 <xTaskResumeAll+0x130>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d009      	beq.n	8007860 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007850:	4b0f      	ldr	r3, [pc, #60]	; (8007890 <xTaskResumeAll+0x138>)
 8007852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007860:	f001 fa10 	bl	8008c84 <vPortExitCritical>

	return xAlreadyYielded;
 8007864:	68bb      	ldr	r3, [r7, #8]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	200013ec 	.word	0x200013ec
 8007874:	200013c4 	.word	0x200013c4
 8007878:	20001384 	.word	0x20001384
 800787c:	200013cc 	.word	0x200013cc
 8007880:	20000ef4 	.word	0x20000ef4
 8007884:	20000ef0 	.word	0x20000ef0
 8007888:	200013d8 	.word	0x200013d8
 800788c:	200013d4 	.word	0x200013d4
 8007890:	e000ed04 	.word	0xe000ed04

08007894 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800789a:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <xTaskGetTickCount+0x1c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078a0:	687b      	ldr	r3, [r7, #4]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	200013c8 	.word	0x200013c8

080078b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078ba:	f001 fa95 	bl	8008de8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80078be:	2300      	movs	r3, #0
 80078c0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80078c2:	4b04      	ldr	r3, [pc, #16]	; (80078d4 <xTaskGetTickCountFromISR+0x20>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078c8:	683b      	ldr	r3, [r7, #0]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	200013c8 	.word	0x200013c8

080078d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078de:	2300      	movs	r3, #0
 80078e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e2:	4b4f      	ldr	r3, [pc, #316]	; (8007a20 <xTaskIncrementTick+0x148>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 808f 	bne.w	8007a0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078ec:	4b4d      	ldr	r3, [pc, #308]	; (8007a24 <xTaskIncrementTick+0x14c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078f4:	4a4b      	ldr	r2, [pc, #300]	; (8007a24 <xTaskIncrementTick+0x14c>)
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d120      	bne.n	8007942 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007900:	4b49      	ldr	r3, [pc, #292]	; (8007a28 <xTaskIncrementTick+0x150>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <xTaskIncrementTick+0x48>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	603b      	str	r3, [r7, #0]
}
 800791c:	bf00      	nop
 800791e:	e7fe      	b.n	800791e <xTaskIncrementTick+0x46>
 8007920:	4b41      	ldr	r3, [pc, #260]	; (8007a28 <xTaskIncrementTick+0x150>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	60fb      	str	r3, [r7, #12]
 8007926:	4b41      	ldr	r3, [pc, #260]	; (8007a2c <xTaskIncrementTick+0x154>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a3f      	ldr	r2, [pc, #252]	; (8007a28 <xTaskIncrementTick+0x150>)
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	4a3f      	ldr	r2, [pc, #252]	; (8007a2c <xTaskIncrementTick+0x154>)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	4b3e      	ldr	r3, [pc, #248]	; (8007a30 <xTaskIncrementTick+0x158>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	4a3d      	ldr	r2, [pc, #244]	; (8007a30 <xTaskIncrementTick+0x158>)
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	f000 faeb 	bl	8007f18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007942:	4b3c      	ldr	r3, [pc, #240]	; (8007a34 <xTaskIncrementTick+0x15c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	429a      	cmp	r2, r3
 800794a:	d349      	bcc.n	80079e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800794c:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <xTaskIncrementTick+0x150>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007956:	4b37      	ldr	r3, [pc, #220]	; (8007a34 <xTaskIncrementTick+0x15c>)
 8007958:	f04f 32ff 	mov.w	r2, #4294967295
 800795c:	601a      	str	r2, [r3, #0]
					break;
 800795e:	e03f      	b.n	80079e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007960:	4b31      	ldr	r3, [pc, #196]	; (8007a28 <xTaskIncrementTick+0x150>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	429a      	cmp	r2, r3
 8007976:	d203      	bcs.n	8007980 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007978:	4a2e      	ldr	r2, [pc, #184]	; (8007a34 <xTaskIncrementTick+0x15c>)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800797e:	e02f      	b.n	80079e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	3304      	adds	r3, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f7fe fae1 	bl	8005f4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	3318      	adds	r3, #24
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fad8 	bl	8005f4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a0:	4b25      	ldr	r3, [pc, #148]	; (8007a38 <xTaskIncrementTick+0x160>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d903      	bls.n	80079b0 <xTaskIncrementTick+0xd8>
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	4a22      	ldr	r2, [pc, #136]	; (8007a38 <xTaskIncrementTick+0x160>)
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4a1f      	ldr	r2, [pc, #124]	; (8007a3c <xTaskIncrementTick+0x164>)
 80079be:	441a      	add	r2, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4619      	mov	r1, r3
 80079c6:	4610      	mov	r0, r2
 80079c8:	f7fe fa63 	bl	8005e92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d0:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <xTaskIncrementTick+0x168>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d3b8      	bcc.n	800794c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079da:	2301      	movs	r3, #1
 80079dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079de:	e7b5      	b.n	800794c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079e0:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <xTaskIncrementTick+0x168>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e6:	4915      	ldr	r1, [pc, #84]	; (8007a3c <xTaskIncrementTick+0x164>)
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	440b      	add	r3, r1
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d901      	bls.n	80079fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079fc:	4b11      	ldr	r3, [pc, #68]	; (8007a44 <xTaskIncrementTick+0x16c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d007      	beq.n	8007a14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	e004      	b.n	8007a14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a0a:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <xTaskIncrementTick+0x170>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	4a0d      	ldr	r2, [pc, #52]	; (8007a48 <xTaskIncrementTick+0x170>)
 8007a12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a14:	697b      	ldr	r3, [r7, #20]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	200013ec 	.word	0x200013ec
 8007a24:	200013c8 	.word	0x200013c8
 8007a28:	2000137c 	.word	0x2000137c
 8007a2c:	20001380 	.word	0x20001380
 8007a30:	200013dc 	.word	0x200013dc
 8007a34:	200013e4 	.word	0x200013e4
 8007a38:	200013cc 	.word	0x200013cc
 8007a3c:	20000ef4 	.word	0x20000ef4
 8007a40:	20000ef0 	.word	0x20000ef0
 8007a44:	200013d8 	.word	0x200013d8
 8007a48:	200013d4 	.word	0x200013d4

08007a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a52:	4b32      	ldr	r3, [pc, #200]	; (8007b1c <vTaskSwitchContext+0xd0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a5a:	4b31      	ldr	r3, [pc, #196]	; (8007b20 <vTaskSwitchContext+0xd4>)
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a60:	e057      	b.n	8007b12 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8007a62:	4b2f      	ldr	r3, [pc, #188]	; (8007b20 <vTaskSwitchContext+0xd4>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007a68:	4b2e      	ldr	r3, [pc, #184]	; (8007b24 <vTaskSwitchContext+0xd8>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	4b2d      	ldr	r3, [pc, #180]	; (8007b24 <vTaskSwitchContext+0xd8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d808      	bhi.n	8007a8a <vTaskSwitchContext+0x3e>
 8007a78:	4b2a      	ldr	r3, [pc, #168]	; (8007b24 <vTaskSwitchContext+0xd8>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b29      	ldr	r3, [pc, #164]	; (8007b24 <vTaskSwitchContext+0xd8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3334      	adds	r3, #52	; 0x34
 8007a82:	4619      	mov	r1, r3
 8007a84:	4610      	mov	r0, r2
 8007a86:	f7f8 fd77 	bl	8000578 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8a:	4b27      	ldr	r3, [pc, #156]	; (8007b28 <vTaskSwitchContext+0xdc>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e010      	b.n	8007ab4 <vTaskSwitchContext+0x68>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10a      	bne.n	8007aae <vTaskSwitchContext+0x62>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	607b      	str	r3, [r7, #4]
}
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <vTaskSwitchContext+0x60>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	491d      	ldr	r1, [pc, #116]	; (8007b2c <vTaskSwitchContext+0xe0>)
 8007ab6:	68fa      	ldr	r2, [r7, #12]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	440b      	add	r3, r1
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d0e4      	beq.n	8007a92 <vTaskSwitchContext+0x46>
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4a16      	ldr	r2, [pc, #88]	; (8007b2c <vTaskSwitchContext+0xe0>)
 8007ad4:	4413      	add	r3, r2
 8007ad6:	60bb      	str	r3, [r7, #8]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	605a      	str	r2, [r3, #4]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d104      	bne.n	8007af8 <vTaskSwitchContext+0xac>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	605a      	str	r2, [r3, #4]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <vTaskSwitchContext+0xd8>)
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	4a09      	ldr	r2, [pc, #36]	; (8007b28 <vTaskSwitchContext+0xdc>)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b08:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <vTaskSwitchContext+0xd8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	3354      	adds	r3, #84	; 0x54
 8007b0e:	4a08      	ldr	r2, [pc, #32]	; (8007b30 <vTaskSwitchContext+0xe4>)
 8007b10:	6013      	str	r3, [r2, #0]
}
 8007b12:	bf00      	nop
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200013ec 	.word	0x200013ec
 8007b20:	200013d8 	.word	0x200013d8
 8007b24:	20000ef0 	.word	0x20000ef0
 8007b28:	200013cc 	.word	0x200013cc
 8007b2c:	20000ef4 	.word	0x20000ef4
 8007b30:	200000e8 	.word	0x200000e8

08007b34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	60fb      	str	r3, [r7, #12]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b5a:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <vTaskPlaceOnEventList+0x44>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3318      	adds	r3, #24
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fe f9b9 	bl	8005eda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b68:	2101      	movs	r1, #1
 8007b6a:	6838      	ldr	r0, [r7, #0]
 8007b6c:	f000 fb8e 	bl	800828c <prvAddCurrentTaskToDelayedList>
}
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20000ef0 	.word	0x20000ef0

08007b7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	617b      	str	r3, [r7, #20]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	3318      	adds	r3, #24
 8007baa:	4619      	mov	r1, r3
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7fe f970 	bl	8005e92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	68b8      	ldr	r0, [r7, #8]
 8007bc2:	f000 fb63 	bl	800828c <prvAddCurrentTaskToDelayedList>
	}
 8007bc6:	bf00      	nop
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000ef0 	.word	0x20000ef0

08007bd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	60fb      	str	r3, [r7, #12]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	3318      	adds	r3, #24
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fe f9a1 	bl	8005f4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0a:	4b1e      	ldr	r3, [pc, #120]	; (8007c84 <xTaskRemoveFromEventList+0xb0>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d11d      	bne.n	8007c4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	3304      	adds	r3, #4
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe f998 	bl	8005f4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c20:	4b19      	ldr	r3, [pc, #100]	; (8007c88 <xTaskRemoveFromEventList+0xb4>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d903      	bls.n	8007c30 <xTaskRemoveFromEventList+0x5c>
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	4a16      	ldr	r2, [pc, #88]	; (8007c88 <xTaskRemoveFromEventList+0xb4>)
 8007c2e:	6013      	str	r3, [r2, #0]
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4a13      	ldr	r2, [pc, #76]	; (8007c8c <xTaskRemoveFromEventList+0xb8>)
 8007c3e:	441a      	add	r2, r3
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	3304      	adds	r3, #4
 8007c44:	4619      	mov	r1, r3
 8007c46:	4610      	mov	r0, r2
 8007c48:	f7fe f923 	bl	8005e92 <vListInsertEnd>
 8007c4c:	e005      	b.n	8007c5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	3318      	adds	r3, #24
 8007c52:	4619      	mov	r1, r3
 8007c54:	480e      	ldr	r0, [pc, #56]	; (8007c90 <xTaskRemoveFromEventList+0xbc>)
 8007c56:	f7fe f91c 	bl	8005e92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <xTaskRemoveFromEventList+0xc0>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d905      	bls.n	8007c74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <xTaskRemoveFromEventList+0xc4>)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e001      	b.n	8007c78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c74:	2300      	movs	r3, #0
 8007c76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c78:	697b      	ldr	r3, [r7, #20]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	200013ec 	.word	0x200013ec
 8007c88:	200013cc 	.word	0x200013cc
 8007c8c:	20000ef4 	.word	0x20000ef4
 8007c90:	20001384 	.word	0x20001384
 8007c94:	20000ef0 	.word	0x20000ef0
 8007c98:	200013d8 	.word	0x200013d8

08007c9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ca4:	4b06      	ldr	r3, [pc, #24]	; (8007cc0 <vTaskInternalSetTimeOutState+0x24>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <vTaskInternalSetTimeOutState+0x28>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	605a      	str	r2, [r3, #4]
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	200013dc 	.word	0x200013dc
 8007cc4:	200013c8 	.word	0x200013c8

08007cc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b088      	sub	sp, #32
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	613b      	str	r3, [r7, #16]
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	60fb      	str	r3, [r7, #12]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d0a:	f000 ff8b 	bl	8008c24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d0e:	4b1d      	ldr	r3, [pc, #116]	; (8007d84 <xTaskCheckForTimeOut+0xbc>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d26:	d102      	bne.n	8007d2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	61fb      	str	r3, [r7, #28]
 8007d2c:	e023      	b.n	8007d76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b15      	ldr	r3, [pc, #84]	; (8007d88 <xTaskCheckForTimeOut+0xc0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d007      	beq.n	8007d4a <xTaskCheckForTimeOut+0x82>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d302      	bcc.n	8007d4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d44:	2301      	movs	r3, #1
 8007d46:	61fb      	str	r3, [r7, #28]
 8007d48:	e015      	b.n	8007d76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d20b      	bcs.n	8007d6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	1ad2      	subs	r2, r2, r3
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff ff9b 	bl	8007c9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	e004      	b.n	8007d76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d72:	2301      	movs	r3, #1
 8007d74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d76:	f000 ff85 	bl	8008c84 <vPortExitCritical>

	return xReturn;
 8007d7a:	69fb      	ldr	r3, [r7, #28]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	200013c8 	.word	0x200013c8
 8007d88:	200013dc 	.word	0x200013dc

08007d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d90:	4b03      	ldr	r3, [pc, #12]	; (8007da0 <vTaskMissedYield+0x14>)
 8007d92:	2201      	movs	r2, #1
 8007d94:	601a      	str	r2, [r3, #0]
}
 8007d96:	bf00      	nop
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	200013d8 	.word	0x200013d8

08007da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dac:	f000 f852 	bl	8007e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007db0:	4b06      	ldr	r3, [pc, #24]	; (8007dcc <prvIdleTask+0x28>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d9f9      	bls.n	8007dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8007db8:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <prvIdleTask+0x2c>)
 8007dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007dc8:	e7f0      	b.n	8007dac <prvIdleTask+0x8>
 8007dca:	bf00      	nop
 8007dcc:	20000ef4 	.word	0x20000ef4
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dda:	2300      	movs	r3, #0
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	e00c      	b.n	8007dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4a12      	ldr	r2, [pc, #72]	; (8007e34 <prvInitialiseTaskLists+0x60>)
 8007dec:	4413      	add	r3, r2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe f822 	bl	8005e38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3301      	adds	r3, #1
 8007df8:	607b      	str	r3, [r7, #4]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b37      	cmp	r3, #55	; 0x37
 8007dfe:	d9ef      	bls.n	8007de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e00:	480d      	ldr	r0, [pc, #52]	; (8007e38 <prvInitialiseTaskLists+0x64>)
 8007e02:	f7fe f819 	bl	8005e38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e06:	480d      	ldr	r0, [pc, #52]	; (8007e3c <prvInitialiseTaskLists+0x68>)
 8007e08:	f7fe f816 	bl	8005e38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e0c:	480c      	ldr	r0, [pc, #48]	; (8007e40 <prvInitialiseTaskLists+0x6c>)
 8007e0e:	f7fe f813 	bl	8005e38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e12:	480c      	ldr	r0, [pc, #48]	; (8007e44 <prvInitialiseTaskLists+0x70>)
 8007e14:	f7fe f810 	bl	8005e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e18:	480b      	ldr	r0, [pc, #44]	; (8007e48 <prvInitialiseTaskLists+0x74>)
 8007e1a:	f7fe f80d 	bl	8005e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e1e:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <prvInitialiseTaskLists+0x78>)
 8007e20:	4a05      	ldr	r2, [pc, #20]	; (8007e38 <prvInitialiseTaskLists+0x64>)
 8007e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e24:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <prvInitialiseTaskLists+0x7c>)
 8007e26:	4a05      	ldr	r2, [pc, #20]	; (8007e3c <prvInitialiseTaskLists+0x68>)
 8007e28:	601a      	str	r2, [r3, #0]
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000ef4 	.word	0x20000ef4
 8007e38:	20001354 	.word	0x20001354
 8007e3c:	20001368 	.word	0x20001368
 8007e40:	20001384 	.word	0x20001384
 8007e44:	20001398 	.word	0x20001398
 8007e48:	200013b0 	.word	0x200013b0
 8007e4c:	2000137c 	.word	0x2000137c
 8007e50:	20001380 	.word	0x20001380

08007e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e5a:	e019      	b.n	8007e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e5c:	f000 fee2 	bl	8008c24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e60:	4b10      	ldr	r3, [pc, #64]	; (8007ea4 <prvCheckTasksWaitingTermination+0x50>)
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe f86d 	bl	8005f4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e72:	4b0d      	ldr	r3, [pc, #52]	; (8007ea8 <prvCheckTasksWaitingTermination+0x54>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	4a0b      	ldr	r2, [pc, #44]	; (8007ea8 <prvCheckTasksWaitingTermination+0x54>)
 8007e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e7c:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <prvCheckTasksWaitingTermination+0x58>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	4a0a      	ldr	r2, [pc, #40]	; (8007eac <prvCheckTasksWaitingTermination+0x58>)
 8007e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e86:	f000 fefd 	bl	8008c84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f810 	bl	8007eb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e90:	4b06      	ldr	r3, [pc, #24]	; (8007eac <prvCheckTasksWaitingTermination+0x58>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1e1      	bne.n	8007e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20001398 	.word	0x20001398
 8007ea8:	200013c4 	.word	0x200013c4
 8007eac:	200013ac 	.word	0x200013ac

08007eb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3354      	adds	r3, #84	; 0x54
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f012 ffa3 	bl	801ae08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d108      	bne.n	8007ede <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f001 f895 	bl	8009000 <vPortFree>
				vPortFree( pxTCB );
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f001 f892 	bl	8009000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007edc:	e018      	b.n	8007f10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d103      	bne.n	8007ef0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 f889 	bl	8009000 <vPortFree>
	}
 8007eee:	e00f      	b.n	8007f10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d00a      	beq.n	8007f10 <prvDeleteTCB+0x60>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	60fb      	str	r3, [r7, #12]
}
 8007f0c:	bf00      	nop
 8007f0e:	e7fe      	b.n	8007f0e <prvDeleteTCB+0x5e>
	}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f1e:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <prvResetNextTaskUnblockTime+0x38>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d104      	bne.n	8007f32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f28:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <prvResetNextTaskUnblockTime+0x3c>)
 8007f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f30:	e008      	b.n	8007f44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <prvResetNextTaskUnblockTime+0x38>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	4a04      	ldr	r2, [pc, #16]	; (8007f54 <prvResetNextTaskUnblockTime+0x3c>)
 8007f42:	6013      	str	r3, [r2, #0]
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	2000137c 	.word	0x2000137c
 8007f54:	200013e4 	.word	0x200013e4

08007f58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007f5e:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <xTaskGetCurrentTaskHandle+0x1c>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007f64:	687b      	ldr	r3, [r7, #4]
	}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000ef0 	.word	0x20000ef0

08007f78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <xTaskGetSchedulerState+0x34>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f86:	2301      	movs	r3, #1
 8007f88:	607b      	str	r3, [r7, #4]
 8007f8a:	e008      	b.n	8007f9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f8c:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <xTaskGetSchedulerState+0x38>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f94:	2302      	movs	r3, #2
 8007f96:	607b      	str	r3, [r7, #4]
 8007f98:	e001      	b.n	8007f9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f9e:	687b      	ldr	r3, [r7, #4]
	}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	200013d0 	.word	0x200013d0
 8007fb0:	200013ec 	.word	0x200013ec

08007fb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d051      	beq.n	800806e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fce:	4b2a      	ldr	r3, [pc, #168]	; (8008078 <xTaskPriorityInherit+0xc4>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d241      	bcs.n	800805c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	db06      	blt.n	8007fee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe0:	4b25      	ldr	r3, [pc, #148]	; (8008078 <xTaskPriorityInherit+0xc4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	6959      	ldr	r1, [r3, #20]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4a1f      	ldr	r2, [pc, #124]	; (800807c <xTaskPriorityInherit+0xc8>)
 8008000:	4413      	add	r3, r2
 8008002:	4299      	cmp	r1, r3
 8008004:	d122      	bne.n	800804c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	3304      	adds	r3, #4
 800800a:	4618      	mov	r0, r3
 800800c:	f7fd ff9e 	bl	8005f4c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008010:	4b19      	ldr	r3, [pc, #100]	; (8008078 <xTaskPriorityInherit+0xc4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801e:	4b18      	ldr	r3, [pc, #96]	; (8008080 <xTaskPriorityInherit+0xcc>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d903      	bls.n	800802e <xTaskPriorityInherit+0x7a>
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	4a15      	ldr	r2, [pc, #84]	; (8008080 <xTaskPriorityInherit+0xcc>)
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4a10      	ldr	r2, [pc, #64]	; (800807c <xTaskPriorityInherit+0xc8>)
 800803c:	441a      	add	r2, r3
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	3304      	adds	r3, #4
 8008042:	4619      	mov	r1, r3
 8008044:	4610      	mov	r0, r2
 8008046:	f7fd ff24 	bl	8005e92 <vListInsertEnd>
 800804a:	e004      	b.n	8008056 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <xTaskPriorityInherit+0xc4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008056:	2301      	movs	r3, #1
 8008058:	60fb      	str	r3, [r7, #12]
 800805a:	e008      	b.n	800806e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008060:	4b05      	ldr	r3, [pc, #20]	; (8008078 <xTaskPriorityInherit+0xc4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	429a      	cmp	r2, r3
 8008068:	d201      	bcs.n	800806e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800806a:	2301      	movs	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800806e:	68fb      	ldr	r3, [r7, #12]
	}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20000ef0 	.word	0x20000ef0
 800807c:	20000ef4 	.word	0x20000ef4
 8008080:	200013cc 	.word	0x200013cc

08008084 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d056      	beq.n	8008148 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800809a:	4b2e      	ldr	r3, [pc, #184]	; (8008154 <xTaskPriorityDisinherit+0xd0>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d00a      	beq.n	80080ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	60fb      	str	r3, [r7, #12]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	60bb      	str	r3, [r7, #8]
}
 80080d4:	bf00      	nop
 80080d6:	e7fe      	b.n	80080d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080dc:	1e5a      	subs	r2, r3, #1
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d02c      	beq.n	8008148 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d128      	bne.n	8008148 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fd ff26 	bl	8005f4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008118:	4b0f      	ldr	r3, [pc, #60]	; (8008158 <xTaskPriorityDisinherit+0xd4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d903      	bls.n	8008128 <xTaskPriorityDisinherit+0xa4>
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008124:	4a0c      	ldr	r2, [pc, #48]	; (8008158 <xTaskPriorityDisinherit+0xd4>)
 8008126:	6013      	str	r3, [r2, #0]
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4a09      	ldr	r2, [pc, #36]	; (800815c <xTaskPriorityDisinherit+0xd8>)
 8008136:	441a      	add	r2, r3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	3304      	adds	r3, #4
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f7fd fea7 	bl	8005e92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008144:	2301      	movs	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008148:	697b      	ldr	r3, [r7, #20]
	}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000ef0 	.word	0x20000ef0
 8008158:	200013cc 	.word	0x200013cc
 800815c:	20000ef4 	.word	0x20000ef4

08008160 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800816e:	2301      	movs	r3, #1
 8008170:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d06a      	beq.n	800824e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	60fb      	str	r3, [r7, #12]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	429a      	cmp	r2, r3
 800819e:	d902      	bls.n	80081a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	e002      	b.n	80081ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d04b      	beq.n	800824e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d146      	bne.n	800824e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80081c0:	4b25      	ldr	r3, [pc, #148]	; (8008258 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d10a      	bne.n	80081e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	60bb      	str	r3, [r7, #8]
}
 80081dc:	bf00      	nop
 80081de:	e7fe      	b.n	80081de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	db04      	blt.n	80081fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	6959      	ldr	r1, [r3, #20]
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4a13      	ldr	r2, [pc, #76]	; (800825c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800820e:	4413      	add	r3, r2
 8008210:	4299      	cmp	r1, r3
 8008212:	d11c      	bne.n	800824e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	3304      	adds	r3, #4
 8008218:	4618      	mov	r0, r3
 800821a:	f7fd fe97 	bl	8005f4c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d903      	bls.n	8008232 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822e:	4a0c      	ldr	r2, [pc, #48]	; (8008260 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008236:	4613      	mov	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4a07      	ldr	r2, [pc, #28]	; (800825c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008240:	441a      	add	r2, r3
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	3304      	adds	r3, #4
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f7fd fe22 	bl	8005e92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800824e:	bf00      	nop
 8008250:	3720      	adds	r7, #32
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000ef0 	.word	0x20000ef0
 800825c:	20000ef4 	.word	0x20000ef4
 8008260:	200013cc 	.word	0x200013cc

08008264 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008264:	b480      	push	{r7}
 8008266:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008268:	4b07      	ldr	r3, [pc, #28]	; (8008288 <pvTaskIncrementMutexHeldCount+0x24>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <pvTaskIncrementMutexHeldCount+0x24>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008276:	3201      	adds	r2, #1
 8008278:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800827a:	4b03      	ldr	r3, [pc, #12]	; (8008288 <pvTaskIncrementMutexHeldCount+0x24>)
 800827c:	681b      	ldr	r3, [r3, #0]
	}
 800827e:	4618      	mov	r0, r3
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	20000ef0 	.word	0x20000ef0

0800828c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008296:	4b21      	ldr	r3, [pc, #132]	; (800831c <prvAddCurrentTaskToDelayedList+0x90>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800829c:	4b20      	ldr	r3, [pc, #128]	; (8008320 <prvAddCurrentTaskToDelayedList+0x94>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4618      	mov	r0, r3
 80082a4:	f7fd fe52 	bl	8005f4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ae:	d10a      	bne.n	80082c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d007      	beq.n	80082c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082b6:	4b1a      	ldr	r3, [pc, #104]	; (8008320 <prvAddCurrentTaskToDelayedList+0x94>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3304      	adds	r3, #4
 80082bc:	4619      	mov	r1, r3
 80082be:	4819      	ldr	r0, [pc, #100]	; (8008324 <prvAddCurrentTaskToDelayedList+0x98>)
 80082c0:	f7fd fde7 	bl	8005e92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082c4:	e026      	b.n	8008314 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4413      	add	r3, r2
 80082cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082ce:	4b14      	ldr	r3, [pc, #80]	; (8008320 <prvAddCurrentTaskToDelayedList+0x94>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d209      	bcs.n	80082f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082de:	4b12      	ldr	r3, [pc, #72]	; (8008328 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <prvAddCurrentTaskToDelayedList+0x94>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3304      	adds	r3, #4
 80082e8:	4619      	mov	r1, r3
 80082ea:	4610      	mov	r0, r2
 80082ec:	f7fd fdf5 	bl	8005eda <vListInsert>
}
 80082f0:	e010      	b.n	8008314 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082f2:	4b0e      	ldr	r3, [pc, #56]	; (800832c <prvAddCurrentTaskToDelayedList+0xa0>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <prvAddCurrentTaskToDelayedList+0x94>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3304      	adds	r3, #4
 80082fc:	4619      	mov	r1, r3
 80082fe:	4610      	mov	r0, r2
 8008300:	f7fd fdeb 	bl	8005eda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008304:	4b0a      	ldr	r3, [pc, #40]	; (8008330 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	429a      	cmp	r2, r3
 800830c:	d202      	bcs.n	8008314 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800830e:	4a08      	ldr	r2, [pc, #32]	; (8008330 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	6013      	str	r3, [r2, #0]
}
 8008314:	bf00      	nop
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	200013c8 	.word	0x200013c8
 8008320:	20000ef0 	.word	0x20000ef0
 8008324:	200013b0 	.word	0x200013b0
 8008328:	20001380 	.word	0x20001380
 800832c:	2000137c 	.word	0x2000137c
 8008330:	200013e4 	.word	0x200013e4

08008334 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08a      	sub	sp, #40	; 0x28
 8008338:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800833e:	f000 fb07 	bl	8008950 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008342:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <xTimerCreateTimerTask+0x80>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d021      	beq.n	800838e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800834e:	2300      	movs	r3, #0
 8008350:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008352:	1d3a      	adds	r2, r7, #4
 8008354:	f107 0108 	add.w	r1, r7, #8
 8008358:	f107 030c 	add.w	r3, r7, #12
 800835c:	4618      	mov	r0, r3
 800835e:	f7fd fd51 	bl	8005e04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	9202      	str	r2, [sp, #8]
 800836a:	9301      	str	r3, [sp, #4]
 800836c:	2302      	movs	r3, #2
 800836e:	9300      	str	r3, [sp, #0]
 8008370:	2300      	movs	r3, #0
 8008372:	460a      	mov	r2, r1
 8008374:	4910      	ldr	r1, [pc, #64]	; (80083b8 <xTimerCreateTimerTask+0x84>)
 8008376:	4811      	ldr	r0, [pc, #68]	; (80083bc <xTimerCreateTimerTask+0x88>)
 8008378:	f7fe ff12 	bl	80071a0 <xTaskCreateStatic>
 800837c:	4603      	mov	r3, r0
 800837e:	4a10      	ldr	r2, [pc, #64]	; (80083c0 <xTimerCreateTimerTask+0x8c>)
 8008380:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008382:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <xTimerCreateTimerTask+0x8c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800838a:	2301      	movs	r3, #1
 800838c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	613b      	str	r3, [r7, #16]
}
 80083a6:	bf00      	nop
 80083a8:	e7fe      	b.n	80083a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083aa:	697b      	ldr	r3, [r7, #20]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	20001420 	.word	0x20001420
 80083b8:	0801ba1c 	.word	0x0801ba1c
 80083bc:	080084f9 	.word	0x080084f9
 80083c0:	20001424 	.word	0x20001424

080083c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08a      	sub	sp, #40	; 0x28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10a      	bne.n	80083f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80083dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	623b      	str	r3, [r7, #32]
}
 80083ee:	bf00      	nop
 80083f0:	e7fe      	b.n	80083f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083f2:	4b1a      	ldr	r3, [pc, #104]	; (800845c <xTimerGenericCommand+0x98>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d02a      	beq.n	8008450 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b05      	cmp	r3, #5
 800840a:	dc18      	bgt.n	800843e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800840c:	f7ff fdb4 	bl	8007f78 <xTaskGetSchedulerState>
 8008410:	4603      	mov	r3, r0
 8008412:	2b02      	cmp	r3, #2
 8008414:	d109      	bne.n	800842a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008416:	4b11      	ldr	r3, [pc, #68]	; (800845c <xTimerGenericCommand+0x98>)
 8008418:	6818      	ldr	r0, [r3, #0]
 800841a:	f107 0110 	add.w	r1, r7, #16
 800841e:	2300      	movs	r3, #0
 8008420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008422:	f7fe f81b 	bl	800645c <xQueueGenericSend>
 8008426:	6278      	str	r0, [r7, #36]	; 0x24
 8008428:	e012      	b.n	8008450 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800842a:	4b0c      	ldr	r3, [pc, #48]	; (800845c <xTimerGenericCommand+0x98>)
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f107 0110 	add.w	r1, r7, #16
 8008432:	2300      	movs	r3, #0
 8008434:	2200      	movs	r2, #0
 8008436:	f7fe f811 	bl	800645c <xQueueGenericSend>
 800843a:	6278      	str	r0, [r7, #36]	; 0x24
 800843c:	e008      	b.n	8008450 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <xTimerGenericCommand+0x98>)
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	f107 0110 	add.w	r1, r7, #16
 8008446:	2300      	movs	r3, #0
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	f7fe f905 	bl	8006658 <xQueueGenericSendFromISR>
 800844e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008452:	4618      	mov	r0, r3
 8008454:	3728      	adds	r7, #40	; 0x28
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20001420 	.word	0x20001420

08008460 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af02      	add	r7, sp, #8
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800846a:	4b22      	ldr	r3, [pc, #136]	; (80084f4 <prvProcessExpiredTimer+0x94>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	3304      	adds	r3, #4
 8008478:	4618      	mov	r0, r3
 800847a:	f7fd fd67 	bl	8005f4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008484:	f003 0304 	and.w	r3, r3, #4
 8008488:	2b00      	cmp	r3, #0
 800848a:	d022      	beq.n	80084d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	699a      	ldr	r2, [r3, #24]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	18d1      	adds	r1, r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	6978      	ldr	r0, [r7, #20]
 800849a:	f000 f8d1 	bl	8008640 <prvInsertTimerInActiveList>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01f      	beq.n	80084e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084a4:	2300      	movs	r3, #0
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	2300      	movs	r3, #0
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	2100      	movs	r1, #0
 80084ae:	6978      	ldr	r0, [r7, #20]
 80084b0:	f7ff ff88 	bl	80083c4 <xTimerGenericCommand>
 80084b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d113      	bne.n	80084e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	60fb      	str	r3, [r7, #12]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084d8:	f023 0301 	bic.w	r3, r3, #1
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	6978      	ldr	r0, [r7, #20]
 80084ea:	4798      	blx	r3
}
 80084ec:	bf00      	nop
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	20001418 	.word	0x20001418

080084f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008500:	f107 0308 	add.w	r3, r7, #8
 8008504:	4618      	mov	r0, r3
 8008506:	f000 f857 	bl	80085b8 <prvGetNextExpireTime>
 800850a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4619      	mov	r1, r3
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 f803 	bl	800851c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008516:	f000 f8d5 	bl	80086c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800851a:	e7f1      	b.n	8008500 <prvTimerTask+0x8>

0800851c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008526:	f7ff f909 	bl	800773c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800852a:	f107 0308 	add.w	r3, r7, #8
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f866 	bl	8008600 <prvSampleTimeNow>
 8008534:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d130      	bne.n	800859e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10a      	bne.n	8008558 <prvProcessTimerOrBlockTask+0x3c>
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	429a      	cmp	r2, r3
 8008548:	d806      	bhi.n	8008558 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800854a:	f7ff f905 	bl	8007758 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800854e:	68f9      	ldr	r1, [r7, #12]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f7ff ff85 	bl	8008460 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008556:	e024      	b.n	80085a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d008      	beq.n	8008570 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800855e:	4b13      	ldr	r3, [pc, #76]	; (80085ac <prvProcessTimerOrBlockTask+0x90>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <prvProcessTimerOrBlockTask+0x50>
 8008568:	2301      	movs	r3, #1
 800856a:	e000      	b.n	800856e <prvProcessTimerOrBlockTask+0x52>
 800856c:	2300      	movs	r3, #0
 800856e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008570:	4b0f      	ldr	r3, [pc, #60]	; (80085b0 <prvProcessTimerOrBlockTask+0x94>)
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	4619      	mov	r1, r3
 800857e:	f7fe fddb 	bl	8007138 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008582:	f7ff f8e9 	bl	8007758 <xTaskResumeAll>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10a      	bne.n	80085a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <prvProcessTimerOrBlockTask+0x98>)
 800858e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	f3bf 8f6f 	isb	sy
}
 800859c:	e001      	b.n	80085a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800859e:	f7ff f8db 	bl	8007758 <xTaskResumeAll>
}
 80085a2:	bf00      	nop
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	2000141c 	.word	0x2000141c
 80085b0:	20001420 	.word	0x20001420
 80085b4:	e000ed04 	.word	0xe000ed04

080085b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085c0:	4b0e      	ldr	r3, [pc, #56]	; (80085fc <prvGetNextExpireTime+0x44>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <prvGetNextExpireTime+0x16>
 80085ca:	2201      	movs	r2, #1
 80085cc:	e000      	b.n	80085d0 <prvGetNextExpireTime+0x18>
 80085ce:	2200      	movs	r2, #0
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d105      	bne.n	80085e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085dc:	4b07      	ldr	r3, [pc, #28]	; (80085fc <prvGetNextExpireTime+0x44>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	e001      	b.n	80085ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085ec:	68fb      	ldr	r3, [r7, #12]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	20001418 	.word	0x20001418

08008600 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008608:	f7ff f944 	bl	8007894 <xTaskGetTickCount>
 800860c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800860e:	4b0b      	ldr	r3, [pc, #44]	; (800863c <prvSampleTimeNow+0x3c>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	429a      	cmp	r2, r3
 8008616:	d205      	bcs.n	8008624 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008618:	f000 f936 	bl	8008888 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	601a      	str	r2, [r3, #0]
 8008622:	e002      	b.n	800862a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800862a:	4a04      	ldr	r2, [pc, #16]	; (800863c <prvSampleTimeNow+0x3c>)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008630:	68fb      	ldr	r3, [r7, #12]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20001428 	.word	0x20001428

08008640 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800864e:	2300      	movs	r3, #0
 8008650:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	429a      	cmp	r2, r3
 8008664:	d812      	bhi.n	800868c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	1ad2      	subs	r2, r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	429a      	cmp	r2, r3
 8008672:	d302      	bcc.n	800867a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008674:	2301      	movs	r3, #1
 8008676:	617b      	str	r3, [r7, #20]
 8008678:	e01b      	b.n	80086b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800867a:	4b10      	ldr	r3, [pc, #64]	; (80086bc <prvInsertTimerInActiveList+0x7c>)
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3304      	adds	r3, #4
 8008682:	4619      	mov	r1, r3
 8008684:	4610      	mov	r0, r2
 8008686:	f7fd fc28 	bl	8005eda <vListInsert>
 800868a:	e012      	b.n	80086b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d206      	bcs.n	80086a2 <prvInsertTimerInActiveList+0x62>
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d302      	bcc.n	80086a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800869c:	2301      	movs	r3, #1
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	e007      	b.n	80086b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086a2:	4b07      	ldr	r3, [pc, #28]	; (80086c0 <prvInsertTimerInActiveList+0x80>)
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3304      	adds	r3, #4
 80086aa:	4619      	mov	r1, r3
 80086ac:	4610      	mov	r0, r2
 80086ae:	f7fd fc14 	bl	8005eda <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086b2:	697b      	ldr	r3, [r7, #20]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	2000141c 	.word	0x2000141c
 80086c0:	20001418 	.word	0x20001418

080086c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b08e      	sub	sp, #56	; 0x38
 80086c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086ca:	e0ca      	b.n	8008862 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da18      	bge.n	8008704 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086d2:	1d3b      	adds	r3, r7, #4
 80086d4:	3304      	adds	r3, #4
 80086d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	61fb      	str	r3, [r7, #28]
}
 80086f0:	bf00      	nop
 80086f2:	e7fe      	b.n	80086f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086fa:	6850      	ldr	r0, [r2, #4]
 80086fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086fe:	6892      	ldr	r2, [r2, #8]
 8008700:	4611      	mov	r1, r2
 8008702:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f2c0 80aa 	blt.w	8008860 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	3304      	adds	r3, #4
 800871c:	4618      	mov	r0, r3
 800871e:	f7fd fc15 	bl	8005f4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008722:	463b      	mov	r3, r7
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff ff6b 	bl	8008600 <prvSampleTimeNow>
 800872a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b09      	cmp	r3, #9
 8008730:	f200 8097 	bhi.w	8008862 <prvProcessReceivedCommands+0x19e>
 8008734:	a201      	add	r2, pc, #4	; (adr r2, 800873c <prvProcessReceivedCommands+0x78>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	08008765 	.word	0x08008765
 8008740:	08008765 	.word	0x08008765
 8008744:	08008765 	.word	0x08008765
 8008748:	080087d9 	.word	0x080087d9
 800874c:	080087ed 	.word	0x080087ed
 8008750:	08008837 	.word	0x08008837
 8008754:	08008765 	.word	0x08008765
 8008758:	08008765 	.word	0x08008765
 800875c:	080087d9 	.word	0x080087d9
 8008760:	080087ed 	.word	0x080087ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800876a:	f043 0301 	orr.w	r3, r3, #1
 800876e:	b2da      	uxtb	r2, r3
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	18d1      	adds	r1, r2, r3
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008784:	f7ff ff5c 	bl	8008640 <prvInsertTimerInActiveList>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d069      	beq.n	8008862 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008794:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800879c:	f003 0304 	and.w	r3, r3, #4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d05e      	beq.n	8008862 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	441a      	add	r2, r3
 80087ac:	2300      	movs	r3, #0
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	2300      	movs	r3, #0
 80087b2:	2100      	movs	r1, #0
 80087b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b6:	f7ff fe05 	bl	80083c4 <xTimerGenericCommand>
 80087ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d14f      	bne.n	8008862 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	61bb      	str	r3, [r7, #24]
}
 80087d4:	bf00      	nop
 80087d6:	e7fe      	b.n	80087d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087de:	f023 0301 	bic.w	r3, r3, #1
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087ea:	e03a      	b.n	8008862 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f2:	f043 0301 	orr.w	r3, r3, #1
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008802:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10a      	bne.n	8008822 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008810:	f383 8811 	msr	BASEPRI, r3
 8008814:	f3bf 8f6f 	isb	sy
 8008818:	f3bf 8f4f 	dsb	sy
 800881c:	617b      	str	r3, [r7, #20]
}
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	699a      	ldr	r2, [r3, #24]
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	18d1      	adds	r1, r2, r3
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008830:	f7ff ff06 	bl	8008640 <prvInsertTimerInActiveList>
					break;
 8008834:	e015      	b.n	8008862 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d103      	bne.n	800884c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008846:	f000 fbdb 	bl	8009000 <vPortFree>
 800884a:	e00a      	b.n	8008862 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008852:	f023 0301 	bic.w	r3, r3, #1
 8008856:	b2da      	uxtb	r2, r3
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800885e:	e000      	b.n	8008862 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008860:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008862:	4b08      	ldr	r3, [pc, #32]	; (8008884 <prvProcessReceivedCommands+0x1c0>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	1d39      	adds	r1, r7, #4
 8008868:	2200      	movs	r2, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe f81c 	bl	80068a8 <xQueueReceive>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	f47f af2a 	bne.w	80086cc <prvProcessReceivedCommands+0x8>
	}
}
 8008878:	bf00      	nop
 800887a:	bf00      	nop
 800887c:	3730      	adds	r7, #48	; 0x30
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20001420 	.word	0x20001420

08008888 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800888e:	e048      	b.n	8008922 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008890:	4b2d      	ldr	r3, [pc, #180]	; (8008948 <prvSwitchTimerLists+0xc0>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800889a:	4b2b      	ldr	r3, [pc, #172]	; (8008948 <prvSwitchTimerLists+0xc0>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fd fb4f 	bl	8005f4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088bc:	f003 0304 	and.w	r3, r3, #4
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d02e      	beq.n	8008922 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	699b      	ldr	r3, [r3, #24]
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	4413      	add	r3, r2
 80088cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d90e      	bls.n	80088f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088e2:	4b19      	ldr	r3, [pc, #100]	; (8008948 <prvSwitchTimerLists+0xc0>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7fd faf4 	bl	8005eda <vListInsert>
 80088f2:	e016      	b.n	8008922 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088f4:	2300      	movs	r3, #0
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	2300      	movs	r3, #0
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	2100      	movs	r1, #0
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7ff fd60 	bl	80083c4 <xTimerGenericCommand>
 8008904:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	603b      	str	r3, [r7, #0]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008922:	4b09      	ldr	r3, [pc, #36]	; (8008948 <prvSwitchTimerLists+0xc0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1b1      	bne.n	8008890 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800892c:	4b06      	ldr	r3, [pc, #24]	; (8008948 <prvSwitchTimerLists+0xc0>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008932:	4b06      	ldr	r3, [pc, #24]	; (800894c <prvSwitchTimerLists+0xc4>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a04      	ldr	r2, [pc, #16]	; (8008948 <prvSwitchTimerLists+0xc0>)
 8008938:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800893a:	4a04      	ldr	r2, [pc, #16]	; (800894c <prvSwitchTimerLists+0xc4>)
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	6013      	str	r3, [r2, #0]
}
 8008940:	bf00      	nop
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	20001418 	.word	0x20001418
 800894c:	2000141c 	.word	0x2000141c

08008950 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008956:	f000 f965 	bl	8008c24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800895a:	4b15      	ldr	r3, [pc, #84]	; (80089b0 <prvCheckForValidListAndQueue+0x60>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d120      	bne.n	80089a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008962:	4814      	ldr	r0, [pc, #80]	; (80089b4 <prvCheckForValidListAndQueue+0x64>)
 8008964:	f7fd fa68 	bl	8005e38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008968:	4813      	ldr	r0, [pc, #76]	; (80089b8 <prvCheckForValidListAndQueue+0x68>)
 800896a:	f7fd fa65 	bl	8005e38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800896e:	4b13      	ldr	r3, [pc, #76]	; (80089bc <prvCheckForValidListAndQueue+0x6c>)
 8008970:	4a10      	ldr	r2, [pc, #64]	; (80089b4 <prvCheckForValidListAndQueue+0x64>)
 8008972:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008974:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <prvCheckForValidListAndQueue+0x70>)
 8008976:	4a10      	ldr	r2, [pc, #64]	; (80089b8 <prvCheckForValidListAndQueue+0x68>)
 8008978:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800897a:	2300      	movs	r3, #0
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <prvCheckForValidListAndQueue+0x74>)
 8008980:	4a11      	ldr	r2, [pc, #68]	; (80089c8 <prvCheckForValidListAndQueue+0x78>)
 8008982:	2110      	movs	r1, #16
 8008984:	200a      	movs	r0, #10
 8008986:	f7fd fb73 	bl	8006070 <xQueueGenericCreateStatic>
 800898a:	4603      	mov	r3, r0
 800898c:	4a08      	ldr	r2, [pc, #32]	; (80089b0 <prvCheckForValidListAndQueue+0x60>)
 800898e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008990:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <prvCheckForValidListAndQueue+0x60>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008998:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <prvCheckForValidListAndQueue+0x60>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	490b      	ldr	r1, [pc, #44]	; (80089cc <prvCheckForValidListAndQueue+0x7c>)
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fb76 	bl	8007090 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089a4:	f000 f96e 	bl	8008c84 <vPortExitCritical>
}
 80089a8:	bf00      	nop
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20001420 	.word	0x20001420
 80089b4:	200013f0 	.word	0x200013f0
 80089b8:	20001404 	.word	0x20001404
 80089bc:	20001418 	.word	0x20001418
 80089c0:	2000141c 	.word	0x2000141c
 80089c4:	200014cc 	.word	0x200014cc
 80089c8:	2000142c 	.word	0x2000142c
 80089cc:	0801ba24 	.word	0x0801ba24

080089d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3b04      	subs	r3, #4
 80089e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3b04      	subs	r3, #4
 80089ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f023 0201 	bic.w	r2, r3, #1
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3b04      	subs	r3, #4
 80089fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a00:	4a0c      	ldr	r2, [pc, #48]	; (8008a34 <pxPortInitialiseStack+0x64>)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3b14      	subs	r3, #20
 8008a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3b04      	subs	r3, #4
 8008a16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f06f 0202 	mvn.w	r2, #2
 8008a1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3b20      	subs	r3, #32
 8008a24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a26:	68fb      	ldr	r3, [r7, #12]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	08008a39 	.word	0x08008a39

08008a38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <prvTaskExitError+0x54>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4a:	d00a      	beq.n	8008a62 <prvTaskExitError+0x2a>
	__asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	60fb      	str	r3, [r7, #12]
}
 8008a5e:	bf00      	nop
 8008a60:	e7fe      	b.n	8008a60 <prvTaskExitError+0x28>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	60bb      	str	r3, [r7, #8]
}
 8008a74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a76:	bf00      	nop
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0fc      	beq.n	8008a78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a7e:	bf00      	nop
 8008a80:	bf00      	nop
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	2000000c 	.word	0x2000000c

08008a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a90:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <pxCurrentTCBConst2>)
 8008a92:	6819      	ldr	r1, [r3, #0]
 8008a94:	6808      	ldr	r0, [r1, #0]
 8008a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9a:	f380 8809 	msr	PSP, r0
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f04f 0000 	mov.w	r0, #0
 8008aa6:	f380 8811 	msr	BASEPRI, r0
 8008aaa:	4770      	bx	lr
 8008aac:	f3af 8000 	nop.w

08008ab0 <pxCurrentTCBConst2>:
 8008ab0:	20000ef0 	.word	0x20000ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop

08008ab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ab8:	4808      	ldr	r0, [pc, #32]	; (8008adc <prvPortStartFirstTask+0x24>)
 8008aba:	6800      	ldr	r0, [r0, #0]
 8008abc:	6800      	ldr	r0, [r0, #0]
 8008abe:	f380 8808 	msr	MSP, r0
 8008ac2:	f04f 0000 	mov.w	r0, #0
 8008ac6:	f380 8814 	msr	CONTROL, r0
 8008aca:	b662      	cpsie	i
 8008acc:	b661      	cpsie	f
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	df00      	svc	0
 8008ad8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ada:	bf00      	nop
 8008adc:	e000ed08 	.word	0xe000ed08

08008ae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ae6:	4b46      	ldr	r3, [pc, #280]	; (8008c00 <xPortStartScheduler+0x120>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a46      	ldr	r2, [pc, #280]	; (8008c04 <xPortStartScheduler+0x124>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d10a      	bne.n	8008b06 <xPortStartScheduler+0x26>
	__asm volatile
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	f383 8811 	msr	BASEPRI, r3
 8008af8:	f3bf 8f6f 	isb	sy
 8008afc:	f3bf 8f4f 	dsb	sy
 8008b00:	613b      	str	r3, [r7, #16]
}
 8008b02:	bf00      	nop
 8008b04:	e7fe      	b.n	8008b04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b06:	4b3e      	ldr	r3, [pc, #248]	; (8008c00 <xPortStartScheduler+0x120>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a3f      	ldr	r2, [pc, #252]	; (8008c08 <xPortStartScheduler+0x128>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d10a      	bne.n	8008b26 <xPortStartScheduler+0x46>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	60fb      	str	r3, [r7, #12]
}
 8008b22:	bf00      	nop
 8008b24:	e7fe      	b.n	8008b24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b26:	4b39      	ldr	r3, [pc, #228]	; (8008c0c <xPortStartScheduler+0x12c>)
 8008b28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	22ff      	movs	r2, #255	; 0xff
 8008b36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b40:	78fb      	ldrb	r3, [r7, #3]
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b48:	b2da      	uxtb	r2, r3
 8008b4a:	4b31      	ldr	r3, [pc, #196]	; (8008c10 <xPortStartScheduler+0x130>)
 8008b4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b4e:	4b31      	ldr	r3, [pc, #196]	; (8008c14 <xPortStartScheduler+0x134>)
 8008b50:	2207      	movs	r2, #7
 8008b52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b54:	e009      	b.n	8008b6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b56:	4b2f      	ldr	r3, [pc, #188]	; (8008c14 <xPortStartScheduler+0x134>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	4a2d      	ldr	r2, [pc, #180]	; (8008c14 <xPortStartScheduler+0x134>)
 8008b5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b60:	78fb      	ldrb	r3, [r7, #3]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b6a:	78fb      	ldrb	r3, [r7, #3]
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b72:	2b80      	cmp	r3, #128	; 0x80
 8008b74:	d0ef      	beq.n	8008b56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b76:	4b27      	ldr	r3, [pc, #156]	; (8008c14 <xPortStartScheduler+0x134>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f1c3 0307 	rsb	r3, r3, #7
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	d00a      	beq.n	8008b98 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	60bb      	str	r3, [r7, #8]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b98:	4b1e      	ldr	r3, [pc, #120]	; (8008c14 <xPortStartScheduler+0x134>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	021b      	lsls	r3, r3, #8
 8008b9e:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <xPortStartScheduler+0x134>)
 8008ba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ba2:	4b1c      	ldr	r3, [pc, #112]	; (8008c14 <xPortStartScheduler+0x134>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008baa:	4a1a      	ldr	r2, [pc, #104]	; (8008c14 <xPortStartScheduler+0x134>)
 8008bac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bb6:	4b18      	ldr	r3, [pc, #96]	; (8008c18 <xPortStartScheduler+0x138>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <xPortStartScheduler+0x138>)
 8008bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008bc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008bc2:	4b15      	ldr	r3, [pc, #84]	; (8008c18 <xPortStartScheduler+0x138>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a14      	ldr	r2, [pc, #80]	; (8008c18 <xPortStartScheduler+0x138>)
 8008bc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008bcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008bce:	f000 f8dd 	bl	8008d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008bd2:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <xPortStartScheduler+0x13c>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008bd8:	f000 f8fc 	bl	8008dd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008bdc:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <xPortStartScheduler+0x140>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a0f      	ldr	r2, [pc, #60]	; (8008c20 <xPortStartScheduler+0x140>)
 8008be2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008be6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008be8:	f7ff ff66 	bl	8008ab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bec:	f7fe ff2e 	bl	8007a4c <vTaskSwitchContext>
	prvTaskExitError();
 8008bf0:	f7ff ff22 	bl	8008a38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	e000ed00 	.word	0xe000ed00
 8008c04:	410fc271 	.word	0x410fc271
 8008c08:	410fc270 	.word	0x410fc270
 8008c0c:	e000e400 	.word	0xe000e400
 8008c10:	2000151c 	.word	0x2000151c
 8008c14:	20001520 	.word	0x20001520
 8008c18:	e000ed20 	.word	0xe000ed20
 8008c1c:	2000000c 	.word	0x2000000c
 8008c20:	e000ef34 	.word	0xe000ef34

08008c24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	607b      	str	r3, [r7, #4]
}
 8008c3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c3e:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <vPortEnterCritical+0x58>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3301      	adds	r3, #1
 8008c44:	4a0d      	ldr	r2, [pc, #52]	; (8008c7c <vPortEnterCritical+0x58>)
 8008c46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c48:	4b0c      	ldr	r3, [pc, #48]	; (8008c7c <vPortEnterCritical+0x58>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d10f      	bne.n	8008c70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <vPortEnterCritical+0x5c>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5e:	f383 8811 	msr	BASEPRI, r3
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	f3bf 8f4f 	dsb	sy
 8008c6a:	603b      	str	r3, [r7, #0]
}
 8008c6c:	bf00      	nop
 8008c6e:	e7fe      	b.n	8008c6e <vPortEnterCritical+0x4a>
	}
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	2000000c 	.word	0x2000000c
 8008c80:	e000ed04 	.word	0xe000ed04

08008c84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c8a:	4b12      	ldr	r3, [pc, #72]	; (8008cd4 <vPortExitCritical+0x50>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10a      	bne.n	8008ca8 <vPortExitCritical+0x24>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	607b      	str	r3, [r7, #4]
}
 8008ca4:	bf00      	nop
 8008ca6:	e7fe      	b.n	8008ca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ca8:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <vPortExitCritical+0x50>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	4a09      	ldr	r2, [pc, #36]	; (8008cd4 <vPortExitCritical+0x50>)
 8008cb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cb2:	4b08      	ldr	r3, [pc, #32]	; (8008cd4 <vPortExitCritical+0x50>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d105      	bne.n	8008cc6 <vPortExitCritical+0x42>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	f383 8811 	msr	BASEPRI, r3
}
 8008cc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	2000000c 	.word	0x2000000c
	...

08008ce0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ce0:	f3ef 8009 	mrs	r0, PSP
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	4b15      	ldr	r3, [pc, #84]	; (8008d40 <pxCurrentTCBConst>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	f01e 0f10 	tst.w	lr, #16
 8008cf0:	bf08      	it	eq
 8008cf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cfa:	6010      	str	r0, [r2, #0]
 8008cfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d04:	f380 8811 	msr	BASEPRI, r0
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f7fe fe9c 	bl	8007a4c <vTaskSwitchContext>
 8008d14:	f04f 0000 	mov.w	r0, #0
 8008d18:	f380 8811 	msr	BASEPRI, r0
 8008d1c:	bc09      	pop	{r0, r3}
 8008d1e:	6819      	ldr	r1, [r3, #0]
 8008d20:	6808      	ldr	r0, [r1, #0]
 8008d22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d26:	f01e 0f10 	tst.w	lr, #16
 8008d2a:	bf08      	it	eq
 8008d2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d30:	f380 8809 	msr	PSP, r0
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	f3af 8000 	nop.w

08008d40 <pxCurrentTCBConst>:
 8008d40:	20000ef0 	.word	0x20000ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop

08008d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	607b      	str	r3, [r7, #4]
}
 8008d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d62:	f7fe fdb9 	bl	80078d8 <xTaskIncrementTick>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d6c:	4b06      	ldr	r3, [pc, #24]	; (8008d88 <xPortSysTickHandler+0x40>)
 8008d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	2300      	movs	r3, #0
 8008d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f383 8811 	msr	BASEPRI, r3
}
 8008d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	e000ed04 	.word	0xe000ed04

08008d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d90:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <vPortSetupTimerInterrupt+0x34>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d96:	4b0b      	ldr	r3, [pc, #44]	; (8008dc4 <vPortSetupTimerInterrupt+0x38>)
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <vPortSetupTimerInterrupt+0x3c>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a0a      	ldr	r2, [pc, #40]	; (8008dcc <vPortSetupTimerInterrupt+0x40>)
 8008da2:	fba2 2303 	umull	r2, r3, r2, r3
 8008da6:	099b      	lsrs	r3, r3, #6
 8008da8:	4a09      	ldr	r2, [pc, #36]	; (8008dd0 <vPortSetupTimerInterrupt+0x44>)
 8008daa:	3b01      	subs	r3, #1
 8008dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dae:	4b04      	ldr	r3, [pc, #16]	; (8008dc0 <vPortSetupTimerInterrupt+0x34>)
 8008db0:	2207      	movs	r2, #7
 8008db2:	601a      	str	r2, [r3, #0]
}
 8008db4:	bf00      	nop
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	e000e010 	.word	0xe000e010
 8008dc4:	e000e018 	.word	0xe000e018
 8008dc8:	20000000 	.word	0x20000000
 8008dcc:	10624dd3 	.word	0x10624dd3
 8008dd0:	e000e014 	.word	0xe000e014

08008dd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008dd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008de4 <vPortEnableVFP+0x10>
 8008dd8:	6801      	ldr	r1, [r0, #0]
 8008dda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008dde:	6001      	str	r1, [r0, #0]
 8008de0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008de2:	bf00      	nop
 8008de4:	e000ed88 	.word	0xe000ed88

08008de8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008dee:	f3ef 8305 	mrs	r3, IPSR
 8008df2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b0f      	cmp	r3, #15
 8008df8:	d914      	bls.n	8008e24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008dfa:	4a17      	ldr	r2, [pc, #92]	; (8008e58 <vPortValidateInterruptPriority+0x70>)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e04:	4b15      	ldr	r3, [pc, #84]	; (8008e5c <vPortValidateInterruptPriority+0x74>)
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	7afa      	ldrb	r2, [r7, #11]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d20a      	bcs.n	8008e24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <vPortValidateInterruptPriority+0x78>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <vPortValidateInterruptPriority+0x7c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d90a      	bls.n	8008e4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	603b      	str	r3, [r7, #0]
}
 8008e46:	bf00      	nop
 8008e48:	e7fe      	b.n	8008e48 <vPortValidateInterruptPriority+0x60>
	}
 8008e4a:	bf00      	nop
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	e000e3f0 	.word	0xe000e3f0
 8008e5c:	2000151c 	.word	0x2000151c
 8008e60:	e000ed0c 	.word	0xe000ed0c
 8008e64:	20001520 	.word	0x20001520

08008e68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b08a      	sub	sp, #40	; 0x28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e74:	f7fe fc62 	bl	800773c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e78:	4b5b      	ldr	r3, [pc, #364]	; (8008fe8 <pvPortMalloc+0x180>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e80:	f000 f920 	bl	80090c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e84:	4b59      	ldr	r3, [pc, #356]	; (8008fec <pvPortMalloc+0x184>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f040 8093 	bne.w	8008fb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d01d      	beq.n	8008ed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e98:	2208      	movs	r2, #8
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d014      	beq.n	8008ed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f023 0307 	bic.w	r3, r3, #7
 8008eb0:	3308      	adds	r3, #8
 8008eb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00a      	beq.n	8008ed4 <pvPortMalloc+0x6c>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	617b      	str	r3, [r7, #20]
}
 8008ed0:	bf00      	nop
 8008ed2:	e7fe      	b.n	8008ed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d06e      	beq.n	8008fb8 <pvPortMalloc+0x150>
 8008eda:	4b45      	ldr	r3, [pc, #276]	; (8008ff0 <pvPortMalloc+0x188>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d869      	bhi.n	8008fb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ee4:	4b43      	ldr	r3, [pc, #268]	; (8008ff4 <pvPortMalloc+0x18c>)
 8008ee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ee8:	4b42      	ldr	r3, [pc, #264]	; (8008ff4 <pvPortMalloc+0x18c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eee:	e004      	b.n	8008efa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d903      	bls.n	8008f0c <pvPortMalloc+0xa4>
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1f1      	bne.n	8008ef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f0c:	4b36      	ldr	r3, [pc, #216]	; (8008fe8 <pvPortMalloc+0x180>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d050      	beq.n	8008fb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2208      	movs	r2, #8
 8008f1c:	4413      	add	r3, r2
 8008f1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	6a3b      	ldr	r3, [r7, #32]
 8008f26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	1ad2      	subs	r2, r2, r3
 8008f30:	2308      	movs	r3, #8
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d91f      	bls.n	8008f78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	f003 0307 	and.w	r3, r3, #7
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <pvPortMalloc+0xf8>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	613b      	str	r3, [r7, #16]
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	1ad2      	subs	r2, r2, r3
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f72:	69b8      	ldr	r0, [r7, #24]
 8008f74:	f000 f908 	bl	8009188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f78:	4b1d      	ldr	r3, [pc, #116]	; (8008ff0 <pvPortMalloc+0x188>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	4a1b      	ldr	r2, [pc, #108]	; (8008ff0 <pvPortMalloc+0x188>)
 8008f84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f86:	4b1a      	ldr	r3, [pc, #104]	; (8008ff0 <pvPortMalloc+0x188>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	4b1b      	ldr	r3, [pc, #108]	; (8008ff8 <pvPortMalloc+0x190>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d203      	bcs.n	8008f9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f92:	4b17      	ldr	r3, [pc, #92]	; (8008ff0 <pvPortMalloc+0x188>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a18      	ldr	r2, [pc, #96]	; (8008ff8 <pvPortMalloc+0x190>)
 8008f98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	685a      	ldr	r2, [r3, #4]
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <pvPortMalloc+0x184>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	2200      	movs	r2, #0
 8008fac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <pvPortMalloc+0x194>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	4a11      	ldr	r2, [pc, #68]	; (8008ffc <pvPortMalloc+0x194>)
 8008fb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fb8:	f7fe fbce 	bl	8007758 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	f003 0307 	and.w	r3, r3, #7
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00a      	beq.n	8008fdc <pvPortMalloc+0x174>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	60fb      	str	r3, [r7, #12]
}
 8008fd8:	bf00      	nop
 8008fda:	e7fe      	b.n	8008fda <pvPortMalloc+0x172>
	return pvReturn;
 8008fdc:	69fb      	ldr	r3, [r7, #28]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3728      	adds	r7, #40	; 0x28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	2001152c 	.word	0x2001152c
 8008fec:	20011540 	.word	0x20011540
 8008ff0:	20011530 	.word	0x20011530
 8008ff4:	20011524 	.word	0x20011524
 8008ff8:	20011534 	.word	0x20011534
 8008ffc:	20011538 	.word	0x20011538

08009000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d04d      	beq.n	80090ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009012:	2308      	movs	r3, #8
 8009014:	425b      	negs	r3, r3
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	4413      	add	r3, r2
 800901a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	4b24      	ldr	r3, [pc, #144]	; (80090b8 <vPortFree+0xb8>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4013      	ands	r3, r2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10a      	bne.n	8009044 <vPortFree+0x44>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	60fb      	str	r3, [r7, #12]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <vPortFree+0x62>
	__asm volatile
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	60bb      	str	r3, [r7, #8]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <vPortFree+0xb8>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4013      	ands	r3, r2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d01e      	beq.n	80090ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d11a      	bne.n	80090ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	4b0e      	ldr	r3, [pc, #56]	; (80090b8 <vPortFree+0xb8>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	43db      	mvns	r3, r3
 8009082:	401a      	ands	r2, r3
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009088:	f7fe fb58 	bl	800773c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <vPortFree+0xbc>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4413      	add	r3, r2
 8009096:	4a09      	ldr	r2, [pc, #36]	; (80090bc <vPortFree+0xbc>)
 8009098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800909a:	6938      	ldr	r0, [r7, #16]
 800909c:	f000 f874 	bl	8009188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090a0:	4b07      	ldr	r3, [pc, #28]	; (80090c0 <vPortFree+0xc0>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3301      	adds	r3, #1
 80090a6:	4a06      	ldr	r2, [pc, #24]	; (80090c0 <vPortFree+0xc0>)
 80090a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090aa:	f7fe fb55 	bl	8007758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090ae:	bf00      	nop
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20011540 	.word	0x20011540
 80090bc:	20011530 	.word	0x20011530
 80090c0:	2001153c 	.word	0x2001153c

080090c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090d0:	4b27      	ldr	r3, [pc, #156]	; (8009170 <prvHeapInit+0xac>)
 80090d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00c      	beq.n	80090f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	3307      	adds	r3, #7
 80090e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f023 0307 	bic.w	r3, r3, #7
 80090ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	4a1f      	ldr	r2, [pc, #124]	; (8009170 <prvHeapInit+0xac>)
 80090f4:	4413      	add	r3, r2
 80090f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80090fc:	4a1d      	ldr	r2, [pc, #116]	; (8009174 <prvHeapInit+0xb0>)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009102:	4b1c      	ldr	r3, [pc, #112]	; (8009174 <prvHeapInit+0xb0>)
 8009104:	2200      	movs	r2, #0
 8009106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	4413      	add	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009110:	2208      	movs	r2, #8
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	1a9b      	subs	r3, r3, r2
 8009116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f023 0307 	bic.w	r3, r3, #7
 800911e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	4a15      	ldr	r2, [pc, #84]	; (8009178 <prvHeapInit+0xb4>)
 8009124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009126:	4b14      	ldr	r3, [pc, #80]	; (8009178 <prvHeapInit+0xb4>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2200      	movs	r2, #0
 800912c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800912e:	4b12      	ldr	r3, [pc, #72]	; (8009178 <prvHeapInit+0xb4>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	1ad2      	subs	r2, r2, r3
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009144:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <prvHeapInit+0xb4>)
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	4a0a      	ldr	r2, [pc, #40]	; (800917c <prvHeapInit+0xb8>)
 8009152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	4a09      	ldr	r2, [pc, #36]	; (8009180 <prvHeapInit+0xbc>)
 800915a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800915c:	4b09      	ldr	r3, [pc, #36]	; (8009184 <prvHeapInit+0xc0>)
 800915e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009162:	601a      	str	r2, [r3, #0]
}
 8009164:	bf00      	nop
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	20001524 	.word	0x20001524
 8009174:	20011524 	.word	0x20011524
 8009178:	2001152c 	.word	0x2001152c
 800917c:	20011534 	.word	0x20011534
 8009180:	20011530 	.word	0x20011530
 8009184:	20011540 	.word	0x20011540

08009188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009190:	4b28      	ldr	r3, [pc, #160]	; (8009234 <prvInsertBlockIntoFreeList+0xac>)
 8009192:	60fb      	str	r3, [r7, #12]
 8009194:	e002      	b.n	800919c <prvInsertBlockIntoFreeList+0x14>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	60fb      	str	r3, [r7, #12]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d8f7      	bhi.n	8009196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	4413      	add	r3, r2
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d108      	bne.n	80091ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	441a      	add	r2, r3
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	441a      	add	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d118      	bne.n	8009210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	4b15      	ldr	r3, [pc, #84]	; (8009238 <prvInsertBlockIntoFreeList+0xb0>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d00d      	beq.n	8009206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	685a      	ldr	r2, [r3, #4]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	441a      	add	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	e008      	b.n	8009218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009206:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <prvInsertBlockIntoFreeList+0xb0>)
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	e003      	b.n	8009218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	429a      	cmp	r2, r3
 800921e:	d002      	beq.n	8009226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009226:	bf00      	nop
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	20011524 	.word	0x20011524
 8009238:	2001152c 	.word	0x2001152c

0800923c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	330c      	adds	r3, #12
 800924c:	461a      	mov	r2, r3
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f003 ff95 	bl	800d180 <tcpip_send_msg_wait_sem>
 8009256:	4603      	mov	r3, r0
 8009258:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800925a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d103      	bne.n	800926a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009268:	e001      	b.n	800926e <netconn_apimsg+0x32>
  }
  return err;
 800926a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08c      	sub	sp, #48	; 0x30
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	603a      	str	r2, [r7, #0]
 8009282:	71fb      	strb	r3, [r7, #7]
 8009284:	460b      	mov	r3, r1
 8009286:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	4618      	mov	r0, r3
 800928e:	f001 f9a3 	bl	800a5d8 <netconn_alloc>
 8009292:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d054      	beq.n	8009344 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800929a:	79bb      	ldrb	r3, [r7, #6]
 800929c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80092a2:	f107 0308 	add.w	r3, r7, #8
 80092a6:	4619      	mov	r1, r3
 80092a8:	4829      	ldr	r0, [pc, #164]	; (8009350 <netconn_new_with_proto_and_callback+0xd8>)
 80092aa:	f7ff ffc7 	bl	800923c <netconn_apimsg>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80092b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d043      	beq.n	8009344 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80092bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d005      	beq.n	80092d0 <netconn_new_with_proto_and_callback+0x58>
 80092c4:	4b23      	ldr	r3, [pc, #140]	; (8009354 <netconn_new_with_proto_and_callback+0xdc>)
 80092c6:	22a3      	movs	r2, #163	; 0xa3
 80092c8:	4923      	ldr	r1, [pc, #140]	; (8009358 <netconn_new_with_proto_and_callback+0xe0>)
 80092ca:	4824      	ldr	r0, [pc, #144]	; (800935c <netconn_new_with_proto_and_callback+0xe4>)
 80092cc:	f011 fd36 	bl	801ad3c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80092d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d2:	3310      	adds	r3, #16
 80092d4:	4618      	mov	r0, r3
 80092d6:	f00f f95d 	bl	8018594 <sys_mbox_valid>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d105      	bne.n	80092ec <netconn_new_with_proto_and_callback+0x74>
 80092e0:	4b1c      	ldr	r3, [pc, #112]	; (8009354 <netconn_new_with_proto_and_callback+0xdc>)
 80092e2:	22a4      	movs	r2, #164	; 0xa4
 80092e4:	491e      	ldr	r1, [pc, #120]	; (8009360 <netconn_new_with_proto_and_callback+0xe8>)
 80092e6:	481d      	ldr	r0, [pc, #116]	; (800935c <netconn_new_with_proto_and_callback+0xe4>)
 80092e8:	f011 fd28 	bl	801ad3c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	3314      	adds	r3, #20
 80092f0:	4618      	mov	r0, r3
 80092f2:	f00f f94f 	bl	8018594 <sys_mbox_valid>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d005      	beq.n	8009308 <netconn_new_with_proto_and_callback+0x90>
 80092fc:	4b15      	ldr	r3, [pc, #84]	; (8009354 <netconn_new_with_proto_and_callback+0xdc>)
 80092fe:	22a6      	movs	r2, #166	; 0xa6
 8009300:	4918      	ldr	r1, [pc, #96]	; (8009364 <netconn_new_with_proto_and_callback+0xec>)
 8009302:	4816      	ldr	r0, [pc, #88]	; (800935c <netconn_new_with_proto_and_callback+0xe4>)
 8009304:	f011 fd1a 	bl	801ad3c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	330c      	adds	r3, #12
 800930c:	4618      	mov	r0, r3
 800930e:	f00f f9cf 	bl	80186b0 <sys_sem_valid>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d105      	bne.n	8009324 <netconn_new_with_proto_and_callback+0xac>
 8009318:	4b0e      	ldr	r3, [pc, #56]	; (8009354 <netconn_new_with_proto_and_callback+0xdc>)
 800931a:	22a9      	movs	r2, #169	; 0xa9
 800931c:	4912      	ldr	r1, [pc, #72]	; (8009368 <netconn_new_with_proto_and_callback+0xf0>)
 800931e:	480f      	ldr	r0, [pc, #60]	; (800935c <netconn_new_with_proto_and_callback+0xe4>)
 8009320:	f011 fd0c 	bl	801ad3c <iprintf>
      sys_sem_free(&conn->op_completed);
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	330c      	adds	r3, #12
 8009328:	4618      	mov	r0, r3
 800932a:	f00f f9b4 	bl	8018696 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009330:	3310      	adds	r3, #16
 8009332:	4618      	mov	r0, r3
 8009334:	f00f f8ba 	bl	80184ac <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800933a:	2007      	movs	r0, #7
 800933c:	f004 fc88 	bl	800dc50 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009340:	2300      	movs	r3, #0
 8009342:	e000      	b.n	8009346 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009346:	4618      	mov	r0, r3
 8009348:	3730      	adds	r7, #48	; 0x30
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	0800a5ad 	.word	0x0800a5ad
 8009354:	0801ba2c 	.word	0x0801ba2c
 8009358:	0801ba60 	.word	0x0801ba60
 800935c:	0801ba84 	.word	0x0801ba84
 8009360:	0801baac 	.word	0x0801baac
 8009364:	0801bac4 	.word	0x0801bac4
 8009368:	0801bae8 	.word	0x0801bae8

0800936c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08c      	sub	sp, #48	; 0x30
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	e014      	b.n	80093a8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009382:	2329      	movs	r3, #41	; 0x29
 8009384:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009386:	f107 030c 	add.w	r3, r7, #12
 800938a:	4619      	mov	r1, r3
 800938c:	4808      	ldr	r0, [pc, #32]	; (80093b0 <netconn_prepare_delete+0x44>)
 800938e:	f7ff ff55 	bl	800923c <netconn_apimsg>
 8009392:	4603      	mov	r3, r0
 8009394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009398:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <netconn_prepare_delete+0x3a>
    return err;
 80093a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80093a4:	e000      	b.n	80093a8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3730      	adds	r7, #48	; 0x30
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	0800ab11 	.word	0x0800ab11

080093b4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <netconn_delete+0x12>
    return ERR_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	e00d      	b.n	80093e2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff ffd0 	bl	800936c <netconn_prepare_delete>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80093d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <netconn_delete+0x2a>
    netconn_free(conn);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 f96b 	bl	800a6b4 <netconn_free>
  }
  return err;
 80093de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08e      	sub	sp, #56	; 0x38
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d109      	bne.n	8009414 <netconn_getaddr+0x28>
 8009400:	4b1d      	ldr	r3, [pc, #116]	; (8009478 <netconn_getaddr+0x8c>)
 8009402:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009406:	491d      	ldr	r1, [pc, #116]	; (800947c <netconn_getaddr+0x90>)
 8009408:	481d      	ldr	r0, [pc, #116]	; (8009480 <netconn_getaddr+0x94>)
 800940a:	f011 fc97 	bl	801ad3c <iprintf>
 800940e:	f06f 030f 	mvn.w	r3, #15
 8009412:	e02d      	b.n	8009470 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d109      	bne.n	800942e <netconn_getaddr+0x42>
 800941a:	4b17      	ldr	r3, [pc, #92]	; (8009478 <netconn_getaddr+0x8c>)
 800941c:	f240 1213 	movw	r2, #275	; 0x113
 8009420:	4918      	ldr	r1, [pc, #96]	; (8009484 <netconn_getaddr+0x98>)
 8009422:	4817      	ldr	r0, [pc, #92]	; (8009480 <netconn_getaddr+0x94>)
 8009424:	f011 fc8a 	bl	801ad3c <iprintf>
 8009428:	f06f 030f 	mvn.w	r3, #15
 800942c:	e020      	b.n	8009470 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d109      	bne.n	8009448 <netconn_getaddr+0x5c>
 8009434:	4b10      	ldr	r3, [pc, #64]	; (8009478 <netconn_getaddr+0x8c>)
 8009436:	f44f 728a 	mov.w	r2, #276	; 0x114
 800943a:	4913      	ldr	r1, [pc, #76]	; (8009488 <netconn_getaddr+0x9c>)
 800943c:	4810      	ldr	r0, [pc, #64]	; (8009480 <netconn_getaddr+0x94>)
 800943e:	f011 fc7d 	bl	801ad3c <iprintf>
 8009442:	f06f 030f 	mvn.w	r3, #15
 8009446:	e013      	b.n	8009470 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800945a:	f107 0314 	add.w	r3, r7, #20
 800945e:	4619      	mov	r1, r3
 8009460:	480a      	ldr	r0, [pc, #40]	; (800948c <netconn_getaddr+0xa0>)
 8009462:	f7ff feeb 	bl	800923c <netconn_apimsg>
 8009466:	4603      	mov	r3, r0
 8009468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800946c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009470:	4618      	mov	r0, r3
 8009472:	3738      	adds	r7, #56	; 0x38
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	0801ba2c 	.word	0x0801ba2c
 800947c:	0801bb04 	.word	0x0801bb04
 8009480:	0801ba84 	.word	0x0801ba84
 8009484:	0801bb24 	.word	0x0801bb24
 8009488:	0801bb44 	.word	0x0801bb44
 800948c:	0800b431 	.word	0x0800b431

08009490 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08e      	sub	sp, #56	; 0x38
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	4613      	mov	r3, r2
 800949c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d109      	bne.n	80094b8 <netconn_bind+0x28>
 80094a4:	4b11      	ldr	r3, [pc, #68]	; (80094ec <netconn_bind+0x5c>)
 80094a6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80094aa:	4911      	ldr	r1, [pc, #68]	; (80094f0 <netconn_bind+0x60>)
 80094ac:	4811      	ldr	r0, [pc, #68]	; (80094f4 <netconn_bind+0x64>)
 80094ae:	f011 fc45 	bl	801ad3c <iprintf>
 80094b2:	f06f 030f 	mvn.w	r3, #15
 80094b6:	e015      	b.n	80094e4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80094be:	4b0e      	ldr	r3, [pc, #56]	; (80094f8 <netconn_bind+0x68>)
 80094c0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80094ca:	88fb      	ldrh	r3, [r7, #6]
 80094cc:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80094ce:	f107 0314 	add.w	r3, r7, #20
 80094d2:	4619      	mov	r1, r3
 80094d4:	4809      	ldr	r0, [pc, #36]	; (80094fc <netconn_bind+0x6c>)
 80094d6:	f7ff feb1 	bl	800923c <netconn_apimsg>
 80094da:	4603      	mov	r3, r0
 80094dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80094e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3738      	adds	r7, #56	; 0x38
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	0801ba2c 	.word	0x0801ba2c
 80094f0:	0801bb64 	.word	0x0801bb64
 80094f4:	0801ba84 	.word	0x0801ba84
 80094f8:	0801f63c 	.word	0x0801f63c
 80094fc:	0800acd9 	.word	0x0800acd9

08009500 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08c      	sub	sp, #48	; 0x30
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d109      	bne.n	8009526 <netconn_listen_with_backlog+0x26>
 8009512:	4b0d      	ldr	r3, [pc, #52]	; (8009548 <netconn_listen_with_backlog+0x48>)
 8009514:	f240 12bb 	movw	r2, #443	; 0x1bb
 8009518:	490c      	ldr	r1, [pc, #48]	; (800954c <netconn_listen_with_backlog+0x4c>)
 800951a:	480d      	ldr	r0, [pc, #52]	; (8009550 <netconn_listen_with_backlog+0x50>)
 800951c:	f011 fc0e 	bl	801ad3c <iprintf>
 8009520:	f06f 030f 	mvn.w	r3, #15
 8009524:	e00c      	b.n	8009540 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800952a:	f107 030c 	add.w	r3, r7, #12
 800952e:	4619      	mov	r1, r3
 8009530:	4808      	ldr	r0, [pc, #32]	; (8009554 <netconn_listen_with_backlog+0x54>)
 8009532:	f7ff fe83 	bl	800923c <netconn_apimsg>
 8009536:	4603      	mov	r3, r0
 8009538:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800953c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009540:	4618      	mov	r0, r3
 8009542:	3730      	adds	r7, #48	; 0x30
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	0801ba2c 	.word	0x0801ba2c
 800954c:	0801bbe4 	.word	0x0801bbe4
 8009550:	0801ba84 	.word	0x0801ba84
 8009554:	0800ad4d 	.word	0x0800ad4d

08009558 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d109      	bne.n	800957c <netconn_accept+0x24>
 8009568:	4b3d      	ldr	r3, [pc, #244]	; (8009660 <netconn_accept+0x108>)
 800956a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800956e:	493d      	ldr	r1, [pc, #244]	; (8009664 <netconn_accept+0x10c>)
 8009570:	483d      	ldr	r0, [pc, #244]	; (8009668 <netconn_accept+0x110>)
 8009572:	f011 fbe3 	bl	801ad3c <iprintf>
 8009576:	f06f 030f 	mvn.w	r3, #15
 800957a:	e06c      	b.n	8009656 <netconn_accept+0xfe>
  *new_conn = NULL;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d109      	bne.n	800959c <netconn_accept+0x44>
 8009588:	4b35      	ldr	r3, [pc, #212]	; (8009660 <netconn_accept+0x108>)
 800958a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800958e:	4937      	ldr	r1, [pc, #220]	; (800966c <netconn_accept+0x114>)
 8009590:	4835      	ldr	r0, [pc, #212]	; (8009668 <netconn_accept+0x110>)
 8009592:	f011 fbd3 	bl	801ad3c <iprintf>
 8009596:	f06f 030f 	mvn.w	r3, #15
 800959a:	e05c      	b.n	8009656 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fb99 	bl	8009cd4 <netconn_err>
 80095a2:	4603      	mov	r3, r0
 80095a4:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80095a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d002      	beq.n	80095b4 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80095ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80095b2:	e050      	b.n	8009656 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	3314      	adds	r3, #20
 80095b8:	4618      	mov	r0, r3
 80095ba:	f00e ffeb 	bl	8018594 <sys_mbox_valid>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d005      	beq.n	80095d0 <netconn_accept+0x78>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	7f1b      	ldrb	r3, [r3, #28]
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d002      	beq.n	80095d6 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80095d0:	f06f 030e 	mvn.w	r3, #14
 80095d4:	e03f      	b.n	8009656 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	7f1b      	ldrb	r3, [r3, #28]
 80095da:	f003 0302 	and.w	r3, r3, #2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00e      	beq.n	8009600 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3314      	adds	r3, #20
 80095e6:	f107 020c 	add.w	r2, r7, #12
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f00e ffba 	bl	8018566 <sys_arch_mbox_tryfetch>
 80095f2:	4603      	mov	r3, r0
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f8:	d10a      	bne.n	8009610 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80095fa:	f06f 0306 	mvn.w	r3, #6
 80095fe:	e02a      	b.n	8009656 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3314      	adds	r3, #20
 8009604:	f107 010c 	add.w	r1, r7, #12
 8009608:	2200      	movs	r2, #0
 800960a:	4618      	mov	r0, r3
 800960c:	f00e ff7a 	bl	8018504 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	2b00      	cmp	r3, #0
 8009616:	d005      	beq.n	8009624 <netconn_accept+0xcc>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961c:	2200      	movs	r2, #0
 800961e:	2101      	movs	r1, #1
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f107 0213 	add.w	r2, r7, #19
 800962a:	4611      	mov	r1, r2
 800962c:	4618      	mov	r0, r3
 800962e:	f000 fba3 	bl	8009d78 <lwip_netconn_is_err_msg>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800963c:	e00b      	b.n	8009656 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d102      	bne.n	800964a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009644:	f06f 030e 	mvn.w	r3, #14
 8009648:	e005      	b.n	8009656 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009654:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	0801ba2c 	.word	0x0801ba2c
 8009664:	0801bc04 	.word	0x0801bc04
 8009668:	0801ba84 	.word	0x0801ba84
 800966c:	0801bc24 	.word	0x0801bc24

08009670 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800967e:	2300      	movs	r3, #0
 8009680:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d109      	bne.n	800969c <netconn_recv_data+0x2c>
 8009688:	4b58      	ldr	r3, [pc, #352]	; (80097ec <netconn_recv_data+0x17c>)
 800968a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800968e:	4958      	ldr	r1, [pc, #352]	; (80097f0 <netconn_recv_data+0x180>)
 8009690:	4858      	ldr	r0, [pc, #352]	; (80097f4 <netconn_recv_data+0x184>)
 8009692:	f011 fb53 	bl	801ad3c <iprintf>
 8009696:	f06f 030f 	mvn.w	r3, #15
 800969a:	e0a2      	b.n	80097e2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	2200      	movs	r2, #0
 80096a0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d109      	bne.n	80096bc <netconn_recv_data+0x4c>
 80096a8:	4b50      	ldr	r3, [pc, #320]	; (80097ec <netconn_recv_data+0x17c>)
 80096aa:	f240 224a 	movw	r2, #586	; 0x24a
 80096ae:	4952      	ldr	r1, [pc, #328]	; (80097f8 <netconn_recv_data+0x188>)
 80096b0:	4850      	ldr	r0, [pc, #320]	; (80097f4 <netconn_recv_data+0x184>)
 80096b2:	f011 fb43 	bl	801ad3c <iprintf>
 80096b6:	f06f 030f 	mvn.w	r3, #15
 80096ba:	e092      	b.n	80097e2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3310      	adds	r3, #16
 80096c0:	4618      	mov	r0, r3
 80096c2:	f00e ff67 	bl	8018594 <sys_mbox_valid>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10e      	bne.n	80096ea <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 fb01 	bl	8009cd4 <netconn_err>
 80096d2:	4603      	mov	r3, r0
 80096d4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80096d6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80096de:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80096e2:	e07e      	b.n	80097e2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80096e4:	f06f 030a 	mvn.w	r3, #10
 80096e8:	e07b      	b.n	80097e2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	7f1b      	ldrb	r3, [r3, #28]
 80096ee:	f003 0302 	and.w	r3, r3, #2
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10f      	bne.n	8009716 <netconn_recv_data+0xa6>
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	7f1b      	ldrb	r3, [r3, #28]
 8009704:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009708:	2b00      	cmp	r3, #0
 800970a:	d104      	bne.n	8009716 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d023      	beq.n	800975e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	3310      	adds	r3, #16
 800971a:	f107 0218 	add.w	r2, r7, #24
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f00e ff20 	bl	8018566 <sys_arch_mbox_tryfetch>
 8009726:	4603      	mov	r3, r0
 8009728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972c:	d11f      	bne.n	800976e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f000 fad0 	bl	8009cd4 <netconn_err>
 8009734:	4603      	mov	r3, r0
 8009736:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009738:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009740:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009744:	e04d      	b.n	80097e2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	7f1b      	ldrb	r3, [r3, #28]
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009752:	f06f 030a 	mvn.w	r3, #10
 8009756:	e044      	b.n	80097e2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009758:	f06f 0306 	mvn.w	r3, #6
 800975c:	e041      	b.n	80097e2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3310      	adds	r3, #16
 8009762:	f107 0118 	add.w	r1, r7, #24
 8009766:	2200      	movs	r2, #0
 8009768:	4618      	mov	r0, r3
 800976a:	f00e fecb 	bl	8018504 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009776:	2b10      	cmp	r3, #16
 8009778:	d117      	bne.n	80097aa <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	f107 0217 	add.w	r2, r7, #23
 8009780:	4611      	mov	r1, r2
 8009782:	4618      	mov	r0, r3
 8009784:	f000 faf8 	bl	8009d78 <lwip_netconn_is_err_msg>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800978e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009792:	f113 0f0f 	cmn.w	r3, #15
 8009796:	d101      	bne.n	800979c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	e022      	b.n	80097e2 <netconn_recv_data+0x172>
      }
      return err;
 800979c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097a0:	e01f      	b.n	80097e2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	891b      	ldrh	r3, [r3, #8]
 80097a6:	83fb      	strh	r3, [r7, #30]
 80097a8:	e00d      	b.n	80097c6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d106      	bne.n	80097be <netconn_recv_data+0x14e>
 80097b0:	4b0e      	ldr	r3, [pc, #56]	; (80097ec <netconn_recv_data+0x17c>)
 80097b2:	f240 2291 	movw	r2, #657	; 0x291
 80097b6:	4911      	ldr	r1, [pc, #68]	; (80097fc <netconn_recv_data+0x18c>)
 80097b8:	480e      	ldr	r0, [pc, #56]	; (80097f4 <netconn_recv_data+0x184>)
 80097ba:	f011 fabf 	bl	801ad3c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80097be:	69bb      	ldr	r3, [r7, #24]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	891b      	ldrh	r3, [r3, #8]
 80097c4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <netconn_recv_data+0x16a>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d2:	8bfa      	ldrh	r2, [r7, #30]
 80097d4:	2101      	movs	r1, #1
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80097da:	69ba      	ldr	r2, [r7, #24]
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3720      	adds	r7, #32
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	0801ba2c 	.word	0x0801ba2c
 80097f0:	0801bc44 	.word	0x0801bc44
 80097f4:	0801ba84 	.word	0x0801ba84
 80097f8:	0801bc64 	.word	0x0801bc64
 80097fc:	0801bc80 	.word	0x0801bc80

08009800 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d005      	beq.n	800981e <netconn_tcp_recvd_msg+0x1e>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800981a:	2b10      	cmp	r3, #16
 800981c:	d009      	beq.n	8009832 <netconn_tcp_recvd_msg+0x32>
 800981e:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <netconn_tcp_recvd_msg+0x50>)
 8009820:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009824:	490b      	ldr	r1, [pc, #44]	; (8009854 <netconn_tcp_recvd_msg+0x54>)
 8009826:	480c      	ldr	r0, [pc, #48]	; (8009858 <netconn_tcp_recvd_msg+0x58>)
 8009828:	f011 fa88 	bl	801ad3c <iprintf>
 800982c:	f06f 030f 	mvn.w	r3, #15
 8009830:	e00a      	b.n	8009848 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	4806      	ldr	r0, [pc, #24]	; (800985c <netconn_tcp_recvd_msg+0x5c>)
 8009842:	f7ff fcfb 	bl	800923c <netconn_apimsg>
 8009846:	4603      	mov	r3, r0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	0801ba2c 	.word	0x0801ba2c
 8009854:	0801bc8c 	.word	0x0801bc8c
 8009858:	0801ba84 	.word	0x0801ba84
 800985c:	0800af17 	.word	0x0800af17

08009860 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08c      	sub	sp, #48	; 0x30
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d005      	beq.n	800987c <netconn_tcp_recvd+0x1c>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009878:	2b10      	cmp	r3, #16
 800987a:	d009      	beq.n	8009890 <netconn_tcp_recvd+0x30>
 800987c:	4b0c      	ldr	r3, [pc, #48]	; (80098b0 <netconn_tcp_recvd+0x50>)
 800987e:	f240 22b5 	movw	r2, #693	; 0x2b5
 8009882:	490c      	ldr	r1, [pc, #48]	; (80098b4 <netconn_tcp_recvd+0x54>)
 8009884:	480c      	ldr	r0, [pc, #48]	; (80098b8 <netconn_tcp_recvd+0x58>)
 8009886:	f011 fa59 	bl	801ad3c <iprintf>
 800988a:	f06f 030f 	mvn.w	r3, #15
 800988e:	e00b      	b.n	80098a8 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8009890:	f107 030c 	add.w	r3, r7, #12
 8009894:	461a      	mov	r2, r3
 8009896:	6839      	ldr	r1, [r7, #0]
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff ffb1 	bl	8009800 <netconn_tcp_recvd_msg>
 800989e:	4603      	mov	r3, r0
 80098a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 80098a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3730      	adds	r7, #48	; 0x30
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	0801ba2c 	.word	0x0801ba2c
 80098b4:	0801bc8c 	.word	0x0801bc8c
 80098b8:	0801ba84 	.word	0x0801ba84

080098bc <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b090      	sub	sp, #64	; 0x40
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	4613      	mov	r3, r2
 80098c8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3310      	adds	r3, #16
 80098ce:	4618      	mov	r0, r3
 80098d0:	f00e fe60 	bl	8018594 <sys_mbox_valid>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d102      	bne.n	80098e0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80098da:	f06f 030a 	mvn.w	r3, #10
 80098de:	e06d      	b.n	80099bc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	7f1b      	ldrb	r3, [r3, #28]
 80098e4:	b25b      	sxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	da07      	bge.n	80098fa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	7f1b      	ldrb	r3, [r3, #28]
 80098ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80098f8:	e039      	b.n	800996e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80098fa:	79fb      	ldrb	r3, [r7, #7]
 80098fc:	461a      	mov	r2, r3
 80098fe:	68b9      	ldr	r1, [r7, #8]
 8009900:	68f8      	ldr	r0, [r7, #12]
 8009902:	f7ff feb5 	bl	8009670 <netconn_recv_data>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800990c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009914:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009918:	e050      	b.n	80099bc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	f003 0308 	and.w	r3, r3, #8
 8009926:	2b00      	cmp	r3, #0
 8009928:	d10e      	bne.n	8009948 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <netconn_recv_data_tcp+0x7a>
 8009930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009932:	891b      	ldrh	r3, [r3, #8]
 8009934:	e000      	b.n	8009938 <netconn_recv_data_tcp+0x7c>
 8009936:	2301      	movs	r3, #1
 8009938:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800993a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800993c:	f107 0214 	add.w	r2, r7, #20
 8009940:	4619      	mov	r1, r3
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f7ff ff5c 	bl	8009800 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	2b00      	cmp	r3, #0
 800994c:	d134      	bne.n	80099b8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	f003 0310 	and.w	r3, r3, #16
 8009954:	2b00      	cmp	r3, #0
 8009956:	d009      	beq.n	800996c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	7f1b      	ldrb	r3, [r3, #28]
 800995c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009960:	b2da      	uxtb	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009966:	f06f 0306 	mvn.w	r3, #6
 800996a:	e027      	b.n	80099bc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800996c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	2b00      	cmp	r3, #0
 8009974:	d005      	beq.n	8009982 <netconn_recv_data_tcp+0xc6>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	2200      	movs	r2, #0
 800997c:	2101      	movs	r1, #1
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10f      	bne.n	80099aa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 f9a2 	bl	8009cd4 <netconn_err>
 8009990:	4603      	mov	r3, r0
 8009992:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009996:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <netconn_recv_data_tcp+0xe8>
          return err;
 800999e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80099a2:	e00b      	b.n	80099bc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80099a4:	f06f 030d 	mvn.w	r3, #13
 80099a8:	e008      	b.n	80099bc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80099aa:	2101      	movs	r1, #1
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 f961 	bl	8009c74 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80099b2:	f06f 030e 	mvn.w	r3, #14
 80099b6:	e001      	b.n	80099bc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80099b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3740      	adds	r7, #64	; 0x40
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d005      	beq.n	80099e4 <netconn_recv_tcp_pbuf_flags+0x20>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	d009      	beq.n	80099f8 <netconn_recv_tcp_pbuf_flags+0x34>
 80099e4:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <netconn_recv_tcp_pbuf_flags+0x4c>)
 80099e6:	f240 3225 	movw	r2, #805	; 0x325
 80099ea:	490a      	ldr	r1, [pc, #40]	; (8009a14 <netconn_recv_tcp_pbuf_flags+0x50>)
 80099ec:	480a      	ldr	r0, [pc, #40]	; (8009a18 <netconn_recv_tcp_pbuf_flags+0x54>)
 80099ee:	f011 f9a5 	bl	801ad3c <iprintf>
 80099f2:	f06f 030f 	mvn.w	r3, #15
 80099f6:	e006      	b.n	8009a06 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	461a      	mov	r2, r3
 80099fc:	68b9      	ldr	r1, [r7, #8]
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f7ff ff5c 	bl	80098bc <netconn_recv_data_tcp>
 8009a04:	4603      	mov	r3, r0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	0801ba2c 	.word	0x0801ba2c
 8009a14:	0801bc8c 	.word	0x0801bc8c
 8009a18:	0801ba84 	.word	0x0801ba84

08009a1c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	4613      	mov	r3, r2
 8009a28:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d005      	beq.n	8009a3c <netconn_recv_udp_raw_netbuf_flags+0x20>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a38:	2b10      	cmp	r3, #16
 8009a3a:	d109      	bne.n	8009a50 <netconn_recv_udp_raw_netbuf_flags+0x34>
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8009a3e:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8009a42:	490a      	ldr	r1, [pc, #40]	; (8009a6c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8009a44:	480a      	ldr	r0, [pc, #40]	; (8009a70 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8009a46:	f011 f979 	bl	801ad3c <iprintf>
 8009a4a:	f06f 030f 	mvn.w	r3, #15
 8009a4e:	e006      	b.n	8009a5e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	461a      	mov	r2, r3
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff fe0a 	bl	8009670 <netconn_recv_data>
 8009a5c:	4603      	mov	r3, r0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	0801ba2c 	.word	0x0801ba2c
 8009a6c:	0801bcb0 	.word	0x0801bcb0
 8009a70:	0801ba84 	.word	0x0801ba84

08009a74 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08c      	sub	sp, #48	; 0x30
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d109      	bne.n	8009a98 <netconn_send+0x24>
 8009a84:	4b0e      	ldr	r3, [pc, #56]	; (8009ac0 <netconn_send+0x4c>)
 8009a86:	f240 32b2 	movw	r2, #946	; 0x3b2
 8009a8a:	490e      	ldr	r1, [pc, #56]	; (8009ac4 <netconn_send+0x50>)
 8009a8c:	480e      	ldr	r0, [pc, #56]	; (8009ac8 <netconn_send+0x54>)
 8009a8e:	f011 f955 	bl	801ad3c <iprintf>
 8009a92:	f06f 030f 	mvn.w	r3, #15
 8009a96:	e00e      	b.n	8009ab6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009aa0:	f107 030c 	add.w	r3, r7, #12
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	4809      	ldr	r0, [pc, #36]	; (8009acc <netconn_send+0x58>)
 8009aa8:	f7ff fbc8 	bl	800923c <netconn_apimsg>
 8009aac:	4603      	mov	r3, r0
 8009aae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009ab2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3730      	adds	r7, #48	; 0x30
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	0801ba2c 	.word	0x0801ba2c
 8009ac4:	0801bce8 	.word	0x0801bce8
 8009ac8:	0801ba84 	.word	0x0801ba84
 8009acc:	0800ae7d 	.word	0x0800ae7d

08009ad0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009ae6:	78fa      	ldrb	r2, [r7, #3]
 8009ae8:	f107 0110 	add.w	r1, r7, #16
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	4613      	mov	r3, r2
 8009af2:	2201      	movs	r2, #1
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f000 f805 	bl	8009b04 <netconn_write_vectors_partly>
 8009afa:	4603      	mov	r3, r0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b092      	sub	sp, #72	; 0x48
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	4611      	mov	r1, r2
 8009b10:	461a      	mov	r2, r3
 8009b12:	460b      	mov	r3, r1
 8009b14:	80fb      	strh	r3, [r7, #6]
 8009b16:	4613      	mov	r3, r2
 8009b18:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d109      	bne.n	8009b34 <netconn_write_vectors_partly+0x30>
 8009b20:	4b4e      	ldr	r3, [pc, #312]	; (8009c5c <netconn_write_vectors_partly+0x158>)
 8009b22:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009b26:	494e      	ldr	r1, [pc, #312]	; (8009c60 <netconn_write_vectors_partly+0x15c>)
 8009b28:	484e      	ldr	r0, [pc, #312]	; (8009c64 <netconn_write_vectors_partly+0x160>)
 8009b2a:	f011 f907 	bl	801ad3c <iprintf>
 8009b2e:	f06f 030f 	mvn.w	r3, #15
 8009b32:	e08e      	b.n	8009c52 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b3c:	2b10      	cmp	r3, #16
 8009b3e:	d009      	beq.n	8009b54 <netconn_write_vectors_partly+0x50>
 8009b40:	4b46      	ldr	r3, [pc, #280]	; (8009c5c <netconn_write_vectors_partly+0x158>)
 8009b42:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009b46:	4948      	ldr	r1, [pc, #288]	; (8009c68 <netconn_write_vectors_partly+0x164>)
 8009b48:	4846      	ldr	r0, [pc, #280]	; (8009c64 <netconn_write_vectors_partly+0x160>)
 8009b4a:	f011 f8f7 	bl	801ad3c <iprintf>
 8009b4e:	f06f 0305 	mvn.w	r3, #5
 8009b52:	e07e      	b.n	8009c52 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	7f1b      	ldrb	r3, [r3, #28]
 8009b58:	f003 0302 	and.w	r3, r3, #2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d104      	bne.n	8009b6a <netconn_write_vectors_partly+0x66>
 8009b60:	797b      	ldrb	r3, [r7, #5]
 8009b62:	f003 0304 	and.w	r3, r3, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <netconn_write_vectors_partly+0x6a>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <netconn_write_vectors_partly+0x6c>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009b74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d005      	beq.n	8009b88 <netconn_write_vectors_partly+0x84>
 8009b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009b82:	f06f 0305 	mvn.w	r3, #5
 8009b86:	e064      	b.n	8009c52 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8009b90:	e015      	b.n	8009bbe <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b94:	00db      	lsls	r3, r3, #3
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	4413      	add	r3, r2
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b9e:	4413      	add	r3, r2
 8009ba0:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	4413      	add	r3, r2
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d202      	bcs.n	8009bb8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009bb2:	f06f 0305 	mvn.w	r3, #5
 8009bb6:	e04c      	b.n	8009c52 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bba:	3301      	adds	r3, #1
 8009bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8009bbe:	88fb      	ldrh	r3, [r7, #6]
 8009bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	dbe5      	blt.n	8009b92 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d101      	bne.n	8009bd0 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e040      	b.n	8009c52 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	da0a      	bge.n	8009bec <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d102      	bne.n	8009be2 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009bdc:	f06f 0305 	mvn.w	r3, #5
 8009be0:	e037      	b.n	8009c52 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009be2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009be6:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bea:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009bf4:	88fb      	ldrh	r3, [r7, #6]
 8009bf6:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009bfc:	797b      	ldrb	r3, [r7, #5]
 8009bfe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c04:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009c06:	2300      	movs	r3, #0
 8009c08:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009c0a:	f107 0314 	add.w	r3, r7, #20
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4816      	ldr	r0, [pc, #88]	; (8009c6c <netconn_write_vectors_partly+0x168>)
 8009c12:	f7ff fb13 	bl	800923c <netconn_apimsg>
 8009c16:	4603      	mov	r3, r0
 8009c18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009c1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d114      	bne.n	8009c4e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c2e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009c30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10a      	bne.n	8009c4e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d006      	beq.n	8009c4e <netconn_write_vectors_partly+0x14a>
 8009c40:	4b06      	ldr	r3, [pc, #24]	; (8009c5c <netconn_write_vectors_partly+0x158>)
 8009c42:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009c46:	490a      	ldr	r1, [pc, #40]	; (8009c70 <netconn_write_vectors_partly+0x16c>)
 8009c48:	4806      	ldr	r0, [pc, #24]	; (8009c64 <netconn_write_vectors_partly+0x160>)
 8009c4a:	f011 f877 	bl	801ad3c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009c4e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3748      	adds	r7, #72	; 0x48
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	0801ba2c 	.word	0x0801ba2c
 8009c60:	0801bd04 	.word	0x0801bd04
 8009c64:	0801ba84 	.word	0x0801ba84
 8009c68:	0801bd20 	.word	0x0801bd20
 8009c6c:	0800b319 	.word	0x0800b319
 8009c70:	0801bd44 	.word	0x0801bd44

08009c74 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08c      	sub	sp, #48	; 0x30
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d109      	bne.n	8009c9a <netconn_close_shutdown+0x26>
 8009c86:	4b0f      	ldr	r3, [pc, #60]	; (8009cc4 <netconn_close_shutdown+0x50>)
 8009c88:	f240 4247 	movw	r2, #1095	; 0x447
 8009c8c:	490e      	ldr	r1, [pc, #56]	; (8009cc8 <netconn_close_shutdown+0x54>)
 8009c8e:	480f      	ldr	r0, [pc, #60]	; (8009ccc <netconn_close_shutdown+0x58>)
 8009c90:	f011 f854 	bl	801ad3c <iprintf>
 8009c94:	f06f 030f 	mvn.w	r3, #15
 8009c98:	e010      	b.n	8009cbc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009c9e:	78fb      	ldrb	r3, [r7, #3]
 8009ca0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009ca2:	2329      	movs	r3, #41	; 0x29
 8009ca4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009ca6:	f107 030c 	add.w	r3, r7, #12
 8009caa:	4619      	mov	r1, r3
 8009cac:	4808      	ldr	r0, [pc, #32]	; (8009cd0 <netconn_close_shutdown+0x5c>)
 8009cae:	f7ff fac5 	bl	800923c <netconn_apimsg>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009cb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3730      	adds	r7, #48	; 0x30
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	0801ba2c 	.word	0x0801ba2c
 8009cc8:	0801bd68 	.word	0x0801bd68
 8009ccc:	0801ba84 	.word	0x0801ba84
 8009cd0:	0800b53d 	.word	0x0800b53d

08009cd4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <netconn_err+0x12>
    return ERR_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e00d      	b.n	8009d02 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009ce6:	f00e fd5f 	bl	80187a8 <sys_arch_protect>
 8009cea:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	7a1b      	ldrb	r3, [r3, #8]
 8009cf0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f00e fd63 	bl	80187c4 <sys_arch_unprotect>
  return err;
 8009cfe:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d1a:	f113 0f0d 	cmn.w	r3, #13
 8009d1e:	d009      	beq.n	8009d34 <lwip_netconn_err_to_msg+0x28>
 8009d20:	f113 0f0d 	cmn.w	r3, #13
 8009d24:	dc0c      	bgt.n	8009d40 <lwip_netconn_err_to_msg+0x34>
 8009d26:	f113 0f0f 	cmn.w	r3, #15
 8009d2a:	d007      	beq.n	8009d3c <lwip_netconn_err_to_msg+0x30>
 8009d2c:	f113 0f0e 	cmn.w	r3, #14
 8009d30:	d002      	beq.n	8009d38 <lwip_netconn_err_to_msg+0x2c>
 8009d32:	e005      	b.n	8009d40 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009d34:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <lwip_netconn_err_to_msg+0x54>)
 8009d36:	e00e      	b.n	8009d56 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009d38:	4b0a      	ldr	r3, [pc, #40]	; (8009d64 <lwip_netconn_err_to_msg+0x58>)
 8009d3a:	e00c      	b.n	8009d56 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009d3c:	4b0a      	ldr	r3, [pc, #40]	; (8009d68 <lwip_netconn_err_to_msg+0x5c>)
 8009d3e:	e00a      	b.n	8009d56 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <lwip_netconn_err_to_msg+0x48>
 8009d48:	4b08      	ldr	r3, [pc, #32]	; (8009d6c <lwip_netconn_err_to_msg+0x60>)
 8009d4a:	227d      	movs	r2, #125	; 0x7d
 8009d4c:	4908      	ldr	r1, [pc, #32]	; (8009d70 <lwip_netconn_err_to_msg+0x64>)
 8009d4e:	4809      	ldr	r0, [pc, #36]	; (8009d74 <lwip_netconn_err_to_msg+0x68>)
 8009d50:	f010 fff4 	bl	801ad3c <iprintf>
      return NULL;
 8009d54:	2300      	movs	r3, #0
  }
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3708      	adds	r7, #8
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	0801f4e4 	.word	0x0801f4e4
 8009d64:	0801f4e5 	.word	0x0801f4e5
 8009d68:	0801f4e6 	.word	0x0801f4e6
 8009d6c:	0801bd84 	.word	0x0801bd84
 8009d70:	0801bdb8 	.word	0x0801bdb8
 8009d74:	0801bdc8 	.word	0x0801bdc8

08009d78 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d105      	bne.n	8009d94 <lwip_netconn_is_err_msg+0x1c>
 8009d88:	4b12      	ldr	r3, [pc, #72]	; (8009dd4 <lwip_netconn_is_err_msg+0x5c>)
 8009d8a:	2285      	movs	r2, #133	; 0x85
 8009d8c:	4912      	ldr	r1, [pc, #72]	; (8009dd8 <lwip_netconn_is_err_msg+0x60>)
 8009d8e:	4813      	ldr	r0, [pc, #76]	; (8009ddc <lwip_netconn_is_err_msg+0x64>)
 8009d90:	f010 ffd4 	bl	801ad3c <iprintf>

  if (msg == &netconn_aborted) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a12      	ldr	r2, [pc, #72]	; (8009de0 <lwip_netconn_is_err_msg+0x68>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d104      	bne.n	8009da6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	22f3      	movs	r2, #243	; 0xf3
 8009da0:	701a      	strb	r2, [r3, #0]
    return 1;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e012      	b.n	8009dcc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a0e      	ldr	r2, [pc, #56]	; (8009de4 <lwip_netconn_is_err_msg+0x6c>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d104      	bne.n	8009db8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	22f2      	movs	r2, #242	; 0xf2
 8009db2:	701a      	strb	r2, [r3, #0]
    return 1;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e009      	b.n	8009dcc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a0b      	ldr	r2, [pc, #44]	; (8009de8 <lwip_netconn_is_err_msg+0x70>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d104      	bne.n	8009dca <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	22f1      	movs	r2, #241	; 0xf1
 8009dc4:	701a      	strb	r2, [r3, #0]
    return 1;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e000      	b.n	8009dcc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	0801bd84 	.word	0x0801bd84
 8009dd8:	0801bdf0 	.word	0x0801bdf0
 8009ddc:	0801bdc8 	.word	0x0801bdc8
 8009de0:	0801f4e4 	.word	0x0801f4e4
 8009de4:	0801f4e5 	.word	0x0801f4e5
 8009de8:	0801f4e6 	.word	0x0801f4e6

08009dec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b088      	sub	sp, #32
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
 8009df8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d105      	bne.n	8009e0c <recv_udp+0x20>
 8009e00:	4b34      	ldr	r3, [pc, #208]	; (8009ed4 <recv_udp+0xe8>)
 8009e02:	22e5      	movs	r2, #229	; 0xe5
 8009e04:	4934      	ldr	r1, [pc, #208]	; (8009ed8 <recv_udp+0xec>)
 8009e06:	4835      	ldr	r0, [pc, #212]	; (8009edc <recv_udp+0xf0>)
 8009e08:	f010 ff98 	bl	801ad3c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d105      	bne.n	8009e1e <recv_udp+0x32>
 8009e12:	4b30      	ldr	r3, [pc, #192]	; (8009ed4 <recv_udp+0xe8>)
 8009e14:	22e6      	movs	r2, #230	; 0xe6
 8009e16:	4932      	ldr	r1, [pc, #200]	; (8009ee0 <recv_udp+0xf4>)
 8009e18:	4830      	ldr	r0, [pc, #192]	; (8009edc <recv_udp+0xf0>)
 8009e1a:	f010 ff8f 	bl	801ad3c <iprintf>
  conn = (struct netconn *)arg;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d103      	bne.n	8009e30 <recv_udp+0x44>
    pbuf_free(p);
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f004 fe1f 	bl	800ea6c <pbuf_free>
    return;
 8009e2e:	e04d      	b.n	8009ecc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d005      	beq.n	8009e46 <recv_udp+0x5a>
 8009e3a:	4b26      	ldr	r3, [pc, #152]	; (8009ed4 <recv_udp+0xe8>)
 8009e3c:	22ee      	movs	r2, #238	; 0xee
 8009e3e:	4929      	ldr	r1, [pc, #164]	; (8009ee4 <recv_udp+0xf8>)
 8009e40:	4826      	ldr	r0, [pc, #152]	; (8009edc <recv_udp+0xf0>)
 8009e42:	f010 ff7b 	bl	801ad3c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	3310      	adds	r3, #16
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f00e fba2 	bl	8018594 <sys_mbox_valid>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d103      	bne.n	8009e5e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f004 fe08 	bl	800ea6c <pbuf_free>
    return;
 8009e5c:	e036      	b.n	8009ecc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009e5e:	2006      	movs	r0, #6
 8009e60:	f003 fea4 	bl	800dbac <memp_malloc>
 8009e64:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d103      	bne.n	8009e74 <recv_udp+0x88>
    pbuf_free(p);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f004 fdfd 	bl	800ea6c <pbuf_free>
    return;
 8009e72:	e02b      	b.n	8009ecc <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <recv_udp+0xa0>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	e000      	b.n	8009e8e <recv_udp+0xa2>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009e96:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	891b      	ldrh	r3, [r3, #8]
 8009e9c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	3310      	adds	r3, #16
 8009ea2:	69b9      	ldr	r1, [r7, #24]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f00e fb13 	bl	80184d0 <sys_mbox_trypost>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009eb0:	69b8      	ldr	r0, [r7, #24]
 8009eb2:	f001 fbed 	bl	800b690 <netbuf_delete>
    return;
 8009eb6:	e009      	b.n	8009ecc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d005      	beq.n	8009ecc <recv_udp+0xe0>
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec4:	8afa      	ldrh	r2, [r7, #22]
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	69f8      	ldr	r0, [r7, #28]
 8009eca:	4798      	blx	r3
  }
}
 8009ecc:	3720      	adds	r7, #32
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	0801bd84 	.word	0x0801bd84
 8009ed8:	0801bdfc 	.word	0x0801bdfc
 8009edc:	0801bdc8 	.word	0x0801bdc8
 8009ee0:	0801be20 	.word	0x0801be20
 8009ee4:	0801be40 	.word	0x0801be40

08009ee8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b088      	sub	sp, #32
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
 8009ef4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d106      	bne.n	8009f0a <recv_tcp+0x22>
 8009efc:	4b36      	ldr	r3, [pc, #216]	; (8009fd8 <recv_tcp+0xf0>)
 8009efe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f02:	4936      	ldr	r1, [pc, #216]	; (8009fdc <recv_tcp+0xf4>)
 8009f04:	4836      	ldr	r0, [pc, #216]	; (8009fe0 <recv_tcp+0xf8>)
 8009f06:	f010 ff19 	bl	801ad3c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d106      	bne.n	8009f1e <recv_tcp+0x36>
 8009f10:	4b31      	ldr	r3, [pc, #196]	; (8009fd8 <recv_tcp+0xf0>)
 8009f12:	f240 122d 	movw	r2, #301	; 0x12d
 8009f16:	4933      	ldr	r1, [pc, #204]	; (8009fe4 <recv_tcp+0xfc>)
 8009f18:	4831      	ldr	r0, [pc, #196]	; (8009fe0 <recv_tcp+0xf8>)
 8009f1a:	f010 ff0f 	bl	801ad3c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d006      	beq.n	8009f34 <recv_tcp+0x4c>
 8009f26:	4b2c      	ldr	r3, [pc, #176]	; (8009fd8 <recv_tcp+0xf0>)
 8009f28:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009f2c:	492e      	ldr	r1, [pc, #184]	; (8009fe8 <recv_tcp+0x100>)
 8009f2e:	482c      	ldr	r0, [pc, #176]	; (8009fe0 <recv_tcp+0xf8>)
 8009f30:	f010 ff04 	bl	801ad3c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d102      	bne.n	8009f44 <recv_tcp+0x5c>
    return ERR_VAL;
 8009f3e:	f06f 0305 	mvn.w	r3, #5
 8009f42:	e045      	b.n	8009fd0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d006      	beq.n	8009f5c <recv_tcp+0x74>
 8009f4e:	4b22      	ldr	r3, [pc, #136]	; (8009fd8 <recv_tcp+0xf0>)
 8009f50:	f240 1235 	movw	r2, #309	; 0x135
 8009f54:	4925      	ldr	r1, [pc, #148]	; (8009fec <recv_tcp+0x104>)
 8009f56:	4822      	ldr	r0, [pc, #136]	; (8009fe0 <recv_tcp+0xf8>)
 8009f58:	f010 fef0 	bl	801ad3c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	3310      	adds	r3, #16
 8009f60:	4618      	mov	r0, r3
 8009f62:	f00e fb17 	bl	8018594 <sys_mbox_valid>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10d      	bne.n	8009f88 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d008      	beq.n	8009f84 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	891b      	ldrh	r3, [r3, #8]
 8009f76:	4619      	mov	r1, r3
 8009f78:	68b8      	ldr	r0, [r7, #8]
 8009f7a:	f005 fd59 	bl	800fa30 <tcp_recved>
      pbuf_free(p);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f004 fd74 	bl	800ea6c <pbuf_free>
    }
    return ERR_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	e023      	b.n	8009fd0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <recv_tcp+0xb2>
    msg = p;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	891b      	ldrh	r3, [r3, #8]
 8009f96:	83fb      	strh	r3, [r7, #30]
 8009f98:	e003      	b.n	8009fa2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009f9a:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <recv_tcp+0x108>)
 8009f9c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	3310      	adds	r3, #16
 8009fa6:	69b9      	ldr	r1, [r7, #24]
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f00e fa91 	bl	80184d0 <sys_mbox_trypost>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb8:	e00a      	b.n	8009fd0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d005      	beq.n	8009fce <recv_tcp+0xe6>
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	8bfa      	ldrh	r2, [r7, #30]
 8009fc8:	2100      	movs	r1, #0
 8009fca:	6978      	ldr	r0, [r7, #20]
 8009fcc:	4798      	blx	r3
  }

  return ERR_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3720      	adds	r7, #32
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	0801bd84 	.word	0x0801bd84
 8009fdc:	0801be60 	.word	0x0801be60
 8009fe0:	0801bdc8 	.word	0x0801bdc8
 8009fe4:	0801be84 	.word	0x0801be84
 8009fe8:	0801bea4 	.word	0x0801bea4
 8009fec:	0801bebc 	.word	0x0801bebc
 8009ff0:	0801f4e6 	.word	0x0801f4e6

08009ff4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d106      	bne.n	800a016 <poll_tcp+0x22>
 800a008:	4b29      	ldr	r3, [pc, #164]	; (800a0b0 <poll_tcp+0xbc>)
 800a00a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a00e:	4929      	ldr	r1, [pc, #164]	; (800a0b4 <poll_tcp+0xc0>)
 800a010:	4829      	ldr	r0, [pc, #164]	; (800a0b8 <poll_tcp+0xc4>)
 800a012:	f010 fe93 	bl	801ad3c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	785b      	ldrb	r3, [r3, #1]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d104      	bne.n	800a028 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a01e:	2101      	movs	r1, #1
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 ffad 	bl	800af80 <lwip_netconn_do_writemore>
 800a026:	e016      	b.n	800a056 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	2b04      	cmp	r3, #4
 800a02e:	d112      	bne.n	800a056 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00a      	beq.n	800a04e <poll_tcp+0x5a>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	7a5b      	ldrb	r3, [r3, #9]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d005      	beq.n	800a04e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	7a5a      	ldrb	r2, [r3, #9]
 800a048:	3a01      	subs	r2, #1
 800a04a:	b2d2      	uxtb	r2, r2
 800a04c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a04e:	2101      	movs	r1, #1
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 fbf7 	bl	800a844 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	7f1b      	ldrb	r3, [r3, #28]
 800a05a:	f003 0310 	and.w	r3, r3, #16
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d021      	beq.n	800a0a6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d01d      	beq.n	800a0a6 <poll_tcp+0xb2>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a072:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a076:	d316      	bcc.n	800a0a6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a080:	2b04      	cmp	r3, #4
 800a082:	d810      	bhi.n	800a0a6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	7f1b      	ldrb	r3, [r3, #28]
 800a088:	f023 0310 	bic.w	r3, r3, #16
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	2b00      	cmp	r3, #0
 800a098:	d005      	beq.n	800a0a6 <poll_tcp+0xb2>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	2200      	movs	r2, #0
 800a0a0:	2102      	movs	r1, #2
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	0801bd84 	.word	0x0801bd84
 800a0b4:	0801bedc 	.word	0x0801bedc
 800a0b8:	0801bdc8 	.word	0x0801bdc8

0800a0bc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d106      	bne.n	800a0e2 <sent_tcp+0x26>
 800a0d4:	4b20      	ldr	r3, [pc, #128]	; (800a158 <sent_tcp+0x9c>)
 800a0d6:	f240 1293 	movw	r2, #403	; 0x193
 800a0da:	4920      	ldr	r1, [pc, #128]	; (800a15c <sent_tcp+0xa0>)
 800a0dc:	4820      	ldr	r0, [pc, #128]	; (800a160 <sent_tcp+0xa4>)
 800a0de:	f010 fe2d 	bl	801ad3c <iprintf>

  if (conn) {
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d032      	beq.n	800a14e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d104      	bne.n	800a0fa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	6978      	ldr	r0, [r7, #20]
 800a0f4:	f000 ff44 	bl	800af80 <lwip_netconn_do_writemore>
 800a0f8:	e007      	b.n	800a10a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	2b04      	cmp	r3, #4
 800a100:	d103      	bne.n	800a10a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a102:	2101      	movs	r1, #1
 800a104:	6978      	ldr	r0, [r7, #20]
 800a106:	f000 fb9d 	bl	800a844 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d01d      	beq.n	800a14e <sent_tcp+0x92>
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a11a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a11e:	d316      	bcc.n	800a14e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d810      	bhi.n	800a14e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	7f1b      	ldrb	r3, [r3, #28]
 800a130:	f023 0310 	bic.w	r3, r3, #16
 800a134:	b2da      	uxtb	r2, r3
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d005      	beq.n	800a14e <sent_tcp+0x92>
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	88fa      	ldrh	r2, [r7, #6]
 800a148:	2102      	movs	r1, #2
 800a14a:	6978      	ldr	r0, [r7, #20]
 800a14c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3718      	adds	r7, #24
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	0801bd84 	.word	0x0801bd84
 800a15c:	0801bedc 	.word	0x0801bedc
 800a160:	0801bdc8 	.word	0x0801bdc8

0800a164 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b088      	sub	sp, #32
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	460b      	mov	r3, r1
 800a16e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d106      	bne.n	800a188 <err_tcp+0x24>
 800a17a:	4b5f      	ldr	r3, [pc, #380]	; (800a2f8 <err_tcp+0x194>)
 800a17c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a180:	495e      	ldr	r1, [pc, #376]	; (800a2fc <err_tcp+0x198>)
 800a182:	485f      	ldr	r0, [pc, #380]	; (800a300 <err_tcp+0x19c>)
 800a184:	f010 fdda 	bl	801ad3c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a188:	f00e fb0e 	bl	80187a8 <sys_arch_protect>
 800a18c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	2200      	movs	r2, #0
 800a192:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	78fa      	ldrb	r2, [r7, #3]
 800a198:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	7f1b      	ldrb	r3, [r3, #28]
 800a19e:	f043 0301 	orr.w	r3, r3, #1
 800a1a2:	b2da      	uxtb	r2, r3
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a1b4:	69b8      	ldr	r0, [r7, #24]
 800a1b6:	f00e fb05 	bl	80187c4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d005      	beq.n	800a1ce <err_tcp+0x6a>
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2104      	movs	r1, #4
 800a1ca:	69f8      	ldr	r0, [r7, #28]
 800a1cc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d005      	beq.n	800a1e2 <err_tcp+0x7e>
 800a1d6:	69fb      	ldr	r3, [r7, #28]
 800a1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2100      	movs	r1, #0
 800a1de:	69f8      	ldr	r0, [r7, #28]
 800a1e0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d005      	beq.n	800a1f6 <err_tcp+0x92>
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2102      	movs	r1, #2
 800a1f2:	69f8      	ldr	r0, [r7, #28]
 800a1f4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a1f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7ff fd86 	bl	8009d0c <lwip_netconn_err_to_msg>
 800a200:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	3310      	adds	r3, #16
 800a206:	4618      	mov	r0, r3
 800a208:	f00e f9c4 	bl	8018594 <sys_mbox_valid>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d005      	beq.n	800a21e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	3310      	adds	r3, #16
 800a216:	6939      	ldr	r1, [r7, #16]
 800a218:	4618      	mov	r0, r3
 800a21a:	f00e f959 	bl	80184d0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	3314      	adds	r3, #20
 800a222:	4618      	mov	r0, r3
 800a224:	f00e f9b6 	bl	8018594 <sys_mbox_valid>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d005      	beq.n	800a23a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	3314      	adds	r3, #20
 800a232:	6939      	ldr	r1, [r7, #16]
 800a234:	4618      	mov	r0, r3
 800a236:	f00e f94b 	bl	80184d0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a23a:	7dfb      	ldrb	r3, [r7, #23]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d005      	beq.n	800a24c <err_tcp+0xe8>
 800a240:	7dfb      	ldrb	r3, [r7, #23]
 800a242:	2b04      	cmp	r3, #4
 800a244:	d002      	beq.n	800a24c <err_tcp+0xe8>
 800a246:	7dfb      	ldrb	r3, [r7, #23]
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d143      	bne.n	800a2d4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	7f1b      	ldrb	r3, [r3, #28]
 800a250:	f003 0304 	and.w	r3, r3, #4
 800a254:	2b00      	cmp	r3, #0
 800a256:	bf14      	ite	ne
 800a258:	2301      	movne	r3, #1
 800a25a:	2300      	moveq	r3, #0
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	7f1b      	ldrb	r3, [r3, #28]
 800a264:	f023 0304 	bic.w	r3, r3, #4
 800a268:	b2da      	uxtb	r2, r3
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d13b      	bne.n	800a2ec <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d106      	bne.n	800a28a <err_tcp+0x126>
 800a27c:	4b1e      	ldr	r3, [pc, #120]	; (800a2f8 <err_tcp+0x194>)
 800a27e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a282:	4920      	ldr	r1, [pc, #128]	; (800a304 <err_tcp+0x1a0>)
 800a284:	481e      	ldr	r0, [pc, #120]	; (800a300 <err_tcp+0x19c>)
 800a286:	f010 fd59 	bl	801ad3c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
 800a28c:	2b04      	cmp	r3, #4
 800a28e:	d104      	bne.n	800a29a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	6a1b      	ldr	r3, [r3, #32]
 800a294:	2200      	movs	r2, #0
 800a296:	711a      	strb	r2, [r3, #4]
 800a298:	e003      	b.n	800a2a2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	78fa      	ldrb	r2, [r7, #3]
 800a2a0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a2ac:	68b8      	ldr	r0, [r7, #8]
 800a2ae:	f00e f9ff 	bl	80186b0 <sys_sem_valid>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d106      	bne.n	800a2c6 <err_tcp+0x162>
 800a2b8:	4b0f      	ldr	r3, [pc, #60]	; (800a2f8 <err_tcp+0x194>)
 800a2ba:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a2be:	4912      	ldr	r1, [pc, #72]	; (800a308 <err_tcp+0x1a4>)
 800a2c0:	480f      	ldr	r0, [pc, #60]	; (800a300 <err_tcp+0x19c>)
 800a2c2:	f010 fd3b 	bl	801ad3c <iprintf>
      conn->current_msg = NULL;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a2cc:	68b8      	ldr	r0, [r7, #8]
 800a2ce:	f00e f9d5 	bl	801867c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a2d2:	e00b      	b.n	800a2ec <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	6a1b      	ldr	r3, [r3, #32]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d008      	beq.n	800a2ee <err_tcp+0x18a>
 800a2dc:	4b06      	ldr	r3, [pc, #24]	; (800a2f8 <err_tcp+0x194>)
 800a2de:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a2e2:	490a      	ldr	r1, [pc, #40]	; (800a30c <err_tcp+0x1a8>)
 800a2e4:	4806      	ldr	r0, [pc, #24]	; (800a300 <err_tcp+0x19c>)
 800a2e6:	f010 fd29 	bl	801ad3c <iprintf>
  }
}
 800a2ea:	e000      	b.n	800a2ee <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a2ec:	bf00      	nop
}
 800a2ee:	bf00      	nop
 800a2f0:	3720      	adds	r7, #32
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	0801bd84 	.word	0x0801bd84
 800a2fc:	0801bedc 	.word	0x0801bedc
 800a300:	0801bdc8 	.word	0x0801bdc8
 800a304:	0801beec 	.word	0x0801beec
 800a308:	0801bf08 	.word	0x0801bf08
 800a30c:	0801bf24 	.word	0x0801bf24

0800a310 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a31e:	6879      	ldr	r1, [r7, #4]
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f006 fa4b 	bl	80107bc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a326:	490a      	ldr	r1, [pc, #40]	; (800a350 <setup_tcp+0x40>)
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f006 fa59 	bl	80107e0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a32e:	4909      	ldr	r1, [pc, #36]	; (800a354 <setup_tcp+0x44>)
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f006 fa77 	bl	8010824 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a336:	2202      	movs	r2, #2
 800a338:	4907      	ldr	r1, [pc, #28]	; (800a358 <setup_tcp+0x48>)
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f006 face 	bl	80108dc <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a340:	4906      	ldr	r1, [pc, #24]	; (800a35c <setup_tcp+0x4c>)
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	f006 fa90 	bl	8010868 <tcp_err>
}
 800a348:	bf00      	nop
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	08009ee9 	.word	0x08009ee9
 800a354:	0800a0bd 	.word	0x0800a0bd
 800a358:	08009ff5 	.word	0x08009ff5
 800a35c:	0800a165 	.word	0x0800a165

0800a360 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a360:	b590      	push	{r4, r7, lr}
 800a362:	b089      	sub	sp, #36	; 0x24
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	4613      	mov	r3, r2
 800a36c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d102      	bne.n	800a37e <accept_function+0x1e>
    return ERR_VAL;
 800a378:	f06f 0305 	mvn.w	r3, #5
 800a37c:	e0a1      	b.n	800a4c2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	3314      	adds	r3, #20
 800a382:	4618      	mov	r0, r3
 800a384:	f00e f906 	bl	8018594 <sys_mbox_valid>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d102      	bne.n	800a394 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a38e:	f06f 0305 	mvn.w	r3, #5
 800a392:	e096      	b.n	800a4c2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d11b      	bne.n	800a3d2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	f103 0414 	add.w	r4, r3, #20
 800a3a0:	f06f 000c 	mvn.w	r0, #12
 800a3a4:	f7ff fcb2 	bl	8009d0c <lwip_netconn_err_to_msg>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f00e f88f 	bl	80184d0 <sys_mbox_trypost>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d109      	bne.n	800a3cc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d005      	beq.n	800a3cc <accept_function+0x6c>
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	69f8      	ldr	r0, [r7, #28]
 800a3ca:	4798      	blx	r3
    }
    return ERR_VAL;
 800a3cc:	f06f 0305 	mvn.w	r3, #5
 800a3d0:	e077      	b.n	800a4c2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a3d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d006      	beq.n	800a3e8 <accept_function+0x88>
 800a3da:	4b3c      	ldr	r3, [pc, #240]	; (800a4cc <accept_function+0x16c>)
 800a3dc:	f240 222a 	movw	r2, #554	; 0x22a
 800a3e0:	493b      	ldr	r1, [pc, #236]	; (800a4d0 <accept_function+0x170>)
 800a3e2:	483c      	ldr	r0, [pc, #240]	; (800a4d4 <accept_function+0x174>)
 800a3e4:	f010 fcaa 	bl	801ad3c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	781a      	ldrb	r2, [r3, #0]
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	f000 f8f0 	bl	800a5d8 <netconn_alloc>
 800a3f8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d11b      	bne.n	800a438 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	f103 0414 	add.w	r4, r3, #20
 800a406:	f06f 000c 	mvn.w	r0, #12
 800a40a:	f7ff fc7f 	bl	8009d0c <lwip_netconn_err_to_msg>
 800a40e:	4603      	mov	r3, r0
 800a410:	4619      	mov	r1, r3
 800a412:	4620      	mov	r0, r4
 800a414:	f00e f85c 	bl	80184d0 <sys_mbox_trypost>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d109      	bne.n	800a432 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	2b00      	cmp	r3, #0
 800a424:	d005      	beq.n	800a432 <accept_function+0xd2>
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42a:	2200      	movs	r2, #0
 800a42c:	2100      	movs	r1, #0
 800a42e:	69f8      	ldr	r0, [r7, #28]
 800a430:	4798      	blx	r3
    }
    return ERR_MEM;
 800a432:	f04f 33ff 	mov.w	r3, #4294967295
 800a436:	e044      	b.n	800a4c2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a43e:	69b8      	ldr	r0, [r7, #24]
 800a440:	f7ff ff66 	bl	800a310 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	3314      	adds	r3, #20
 800a448:	69b9      	ldr	r1, [r7, #24]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f00e f840 	bl	80184d0 <sys_mbox_trypost>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d02a      	beq.n	800a4ac <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a45c:	2100      	movs	r1, #0
 800a45e:	6978      	ldr	r0, [r7, #20]
 800a460:	f006 f9ac 	bl	80107bc <tcp_arg>
    tcp_recv(pcb, NULL);
 800a464:	2100      	movs	r1, #0
 800a466:	6978      	ldr	r0, [r7, #20]
 800a468:	f006 f9ba 	bl	80107e0 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a46c:	2100      	movs	r1, #0
 800a46e:	6978      	ldr	r0, [r7, #20]
 800a470:	f006 f9d8 	bl	8010824 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a474:	2200      	movs	r2, #0
 800a476:	2100      	movs	r1, #0
 800a478:	6978      	ldr	r0, [r7, #20]
 800a47a:	f006 fa2f 	bl	80108dc <tcp_poll>
    tcp_err(pcb, NULL);
 800a47e:	2100      	movs	r1, #0
 800a480:	6978      	ldr	r0, [r7, #20]
 800a482:	f006 f9f1 	bl	8010868 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	2200      	movs	r2, #0
 800a48a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	3310      	adds	r3, #16
 800a490:	4618      	mov	r0, r3
 800a492:	f00e f80b 	bl	80184ac <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	3310      	adds	r3, #16
 800a49a:	4618      	mov	r0, r3
 800a49c:	f00e f88b 	bl	80185b6 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a4a0:	69b8      	ldr	r0, [r7, #24]
 800a4a2:	f000 f907 	bl	800a6b4 <netconn_free>
    return ERR_MEM;
 800a4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4aa:	e00a      	b.n	800a4c2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d005      	beq.n	800a4c0 <accept_function+0x160>
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	69f8      	ldr	r0, [r7, #28]
 800a4be:	4798      	blx	r3
  }

  return ERR_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3724      	adds	r7, #36	; 0x24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd90      	pop	{r4, r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	0801bd84 	.word	0x0801bd84
 800a4d0:	0801bf40 	.word	0x0801bf40
 800a4d4:	0801bdc8 	.word	0x0801bdc8

0800a4d8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a4d8:	b590      	push	{r4, r7, lr}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d006      	beq.n	800a4fc <pcb_new+0x24>
 800a4ee:	4b2b      	ldr	r3, [pc, #172]	; (800a59c <pcb_new+0xc4>)
 800a4f0:	f240 2265 	movw	r2, #613	; 0x265
 800a4f4:	492a      	ldr	r1, [pc, #168]	; (800a5a0 <pcb_new+0xc8>)
 800a4f6:	482b      	ldr	r0, [pc, #172]	; (800a5a4 <pcb_new+0xcc>)
 800a4f8:	f010 fc20 	bl	801ad3c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a506:	2b10      	cmp	r3, #16
 800a508:	d022      	beq.n	800a550 <pcb_new+0x78>
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	d133      	bne.n	800a576 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681c      	ldr	r4, [r3, #0]
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	4618      	mov	r0, r3
 800a516:	f00b fc30 	bl	8015d7a <udp_new_ip_type>
 800a51a:	4603      	mov	r3, r0
 800a51c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d02a      	beq.n	800a57e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	2b22      	cmp	r3, #34	; 0x22
 800a530:	d104      	bne.n	800a53c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6858      	ldr	r0, [r3, #4]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	4917      	ldr	r1, [pc, #92]	; (800a5a8 <pcb_new+0xd0>)
 800a54a:	f00b fb9d 	bl	8015c88 <udp_recv>
      }
      break;
 800a54e:	e016      	b.n	800a57e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681c      	ldr	r4, [r3, #0]
 800a554:	7bfb      	ldrb	r3, [r7, #15]
 800a556:	4618      	mov	r0, r3
 800a558:	f006 f922 	bl	80107a0 <tcp_new_ip_type>
 800a55c:	4603      	mov	r3, r0
 800a55e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00b      	beq.n	800a582 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff fece 	bl	800a310 <setup_tcp>
      }
      break;
 800a574:	e005      	b.n	800a582 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	22fa      	movs	r2, #250	; 0xfa
 800a57a:	711a      	strb	r2, [r3, #4]
      return;
 800a57c:	e00a      	b.n	800a594 <pcb_new+0xbc>
      break;
 800a57e:	bf00      	nop
 800a580:	e000      	b.n	800a584 <pcb_new+0xac>
      break;
 800a582:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d102      	bne.n	800a594 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	22ff      	movs	r2, #255	; 0xff
 800a592:	711a      	strb	r2, [r3, #4]
  }
}
 800a594:	3714      	adds	r7, #20
 800a596:	46bd      	mov	sp, r7
 800a598:	bd90      	pop	{r4, r7, pc}
 800a59a:	bf00      	nop
 800a59c:	0801bd84 	.word	0x0801bd84
 800a5a0:	0801bf68 	.word	0x0801bf68
 800a5a4:	0801bdc8 	.word	0x0801bdc8
 800a5a8:	08009ded 	.word	0x08009ded

0800a5ac <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d102      	bne.n	800a5ce <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7ff ff85 	bl	800a4d8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a5ce:	bf00      	nop
 800a5d0:	3710      	adds	r7, #16
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	bd80      	pop	{r7, pc}
	...

0800a5d8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	6039      	str	r1, [r7, #0]
 800a5e2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a5e8:	2007      	movs	r0, #7
 800a5ea:	f003 fadf 	bl	800dbac <memp_malloc>
 800a5ee:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d101      	bne.n	800a5fa <netconn_alloc+0x22>
    return NULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e052      	b.n	800a6a0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	79fa      	ldrb	r2, [r7, #7]
 800a604:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2200      	movs	r2, #0
 800a60a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a612:	2b10      	cmp	r3, #16
 800a614:	d004      	beq.n	800a620 <netconn_alloc+0x48>
 800a616:	2b20      	cmp	r3, #32
 800a618:	d105      	bne.n	800a626 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a61a:	2306      	movs	r3, #6
 800a61c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a61e:	e00a      	b.n	800a636 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a620:	2306      	movs	r3, #6
 800a622:	617b      	str	r3, [r7, #20]
      break;
 800a624:	e007      	b.n	800a636 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a626:	4b20      	ldr	r3, [pc, #128]	; (800a6a8 <netconn_alloc+0xd0>)
 800a628:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a62c:	491f      	ldr	r1, [pc, #124]	; (800a6ac <netconn_alloc+0xd4>)
 800a62e:	4820      	ldr	r0, [pc, #128]	; (800a6b0 <netconn_alloc+0xd8>)
 800a630:	f010 fb84 	bl	801ad3c <iprintf>
      goto free_and_return;
 800a634:	e02f      	b.n	800a696 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	3310      	adds	r3, #16
 800a63a:	6979      	ldr	r1, [r7, #20]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f00d ff1b 	bl	8018478 <sys_mbox_new>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d125      	bne.n	800a694 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	330c      	adds	r3, #12
 800a64c:	2100      	movs	r1, #0
 800a64e:	4618      	mov	r0, r3
 800a650:	f00d ffbe 	bl	80185d0 <sys_sem_new>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d005      	beq.n	800a666 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3310      	adds	r3, #16
 800a65e:	4618      	mov	r0, r3
 800a660:	f00d ff24 	bl	80184ac <sys_mbox_free>
    goto free_and_return;
 800a664:	e017      	b.n	800a696 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3314      	adds	r3, #20
 800a66a:	4618      	mov	r0, r3
 800a66c:	f00d ffa3 	bl	80185b6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f04f 32ff 	mov.w	r2, #4294967295
 800a67c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2200      	movs	r2, #0
 800a688:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	7cfa      	ldrb	r2, [r7, #19]
 800a68e:	771a      	strb	r2, [r3, #28]
  return conn;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	e005      	b.n	800a6a0 <netconn_alloc+0xc8>
    goto free_and_return;
 800a694:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a696:	68f9      	ldr	r1, [r7, #12]
 800a698:	2007      	movs	r0, #7
 800a69a:	f003 fad9 	bl	800dc50 <memp_free>
  return NULL;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3718      	adds	r7, #24
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	0801bd84 	.word	0x0801bd84
 800a6ac:	0801bf88 	.word	0x0801bf88
 800a6b0:	0801bdc8 	.word	0x0801bdc8

0800a6b4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d006      	beq.n	800a6d2 <netconn_free+0x1e>
 800a6c4:	4b1b      	ldr	r3, [pc, #108]	; (800a734 <netconn_free+0x80>)
 800a6c6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a6ca:	491b      	ldr	r1, [pc, #108]	; (800a738 <netconn_free+0x84>)
 800a6cc:	481b      	ldr	r0, [pc, #108]	; (800a73c <netconn_free+0x88>)
 800a6ce:	f010 fb35 	bl	801ad3c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	3310      	adds	r3, #16
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f00d ff5c 	bl	8018594 <sys_mbox_valid>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d006      	beq.n	800a6f0 <netconn_free+0x3c>
 800a6e2:	4b14      	ldr	r3, [pc, #80]	; (800a734 <netconn_free+0x80>)
 800a6e4:	f240 3223 	movw	r2, #803	; 0x323
 800a6e8:	4915      	ldr	r1, [pc, #84]	; (800a740 <netconn_free+0x8c>)
 800a6ea:	4814      	ldr	r0, [pc, #80]	; (800a73c <netconn_free+0x88>)
 800a6ec:	f010 fb26 	bl	801ad3c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	3314      	adds	r3, #20
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f00d ff4d 	bl	8018594 <sys_mbox_valid>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d006      	beq.n	800a70e <netconn_free+0x5a>
 800a700:	4b0c      	ldr	r3, [pc, #48]	; (800a734 <netconn_free+0x80>)
 800a702:	f240 3226 	movw	r2, #806	; 0x326
 800a706:	490f      	ldr	r1, [pc, #60]	; (800a744 <netconn_free+0x90>)
 800a708:	480c      	ldr	r0, [pc, #48]	; (800a73c <netconn_free+0x88>)
 800a70a:	f010 fb17 	bl	801ad3c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	330c      	adds	r3, #12
 800a712:	4618      	mov	r0, r3
 800a714:	f00d ffbf 	bl	8018696 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	330c      	adds	r3, #12
 800a71c:	4618      	mov	r0, r3
 800a71e:	f00d ffd8 	bl	80186d2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	2007      	movs	r0, #7
 800a726:	f003 fa93 	bl	800dc50 <memp_free>
}
 800a72a:	bf00      	nop
 800a72c:	3708      	adds	r7, #8
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	0801bd84 	.word	0x0801bd84
 800a738:	0801bfb0 	.word	0x0801bfb0
 800a73c:	0801bdc8 	.word	0x0801bdc8
 800a740:	0801bfe0 	.word	0x0801bfe0
 800a744:	0801c01c 	.word	0x0801c01c

0800a748 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b086      	sub	sp, #24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	3310      	adds	r3, #16
 800a754:	4618      	mov	r0, r3
 800a756:	f00d ff1d 	bl	8018594 <sys_mbox_valid>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d02f      	beq.n	800a7c0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a760:	e018      	b.n	800a794 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a76a:	2b10      	cmp	r3, #16
 800a76c:	d10e      	bne.n	800a78c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	f107 020f 	add.w	r2, r7, #15
 800a774:	4611      	mov	r1, r2
 800a776:	4618      	mov	r0, r3
 800a778:	f7ff fafe 	bl	8009d78 <lwip_netconn_is_err_msg>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d108      	bne.n	800a794 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	4618      	mov	r0, r3
 800a786:	f004 f971 	bl	800ea6c <pbuf_free>
 800a78a:	e003      	b.n	800a794 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 ff7e 	bl	800b690 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	3310      	adds	r3, #16
 800a798:	f107 0210 	add.w	r2, r7, #16
 800a79c:	4611      	mov	r1, r2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f00d fee1 	bl	8018566 <sys_arch_mbox_tryfetch>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7aa:	d1da      	bne.n	800a762 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3310      	adds	r3, #16
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f00d fe7b 	bl	80184ac <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	3310      	adds	r3, #16
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f00d fefb 	bl	80185b6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	3314      	adds	r3, #20
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f00d fee5 	bl	8018594 <sys_mbox_valid>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d034      	beq.n	800a83a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a7d0:	e01d      	b.n	800a80e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f107 020e 	add.w	r2, r7, #14
 800a7d8:	4611      	mov	r1, r2
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff facc 	bl	8009d78 <lwip_netconn_is_err_msg>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d113      	bne.n	800a80e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a7ea:	6978      	ldr	r0, [r7, #20]
 800a7ec:	f7ff ffac 	bl	800a748 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d007      	beq.n	800a808 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f004 ff35 	bl	800f66c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2200      	movs	r2, #0
 800a806:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a808:	6978      	ldr	r0, [r7, #20]
 800a80a:	f7ff ff53 	bl	800a6b4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3314      	adds	r3, #20
 800a812:	f107 0210 	add.w	r2, r7, #16
 800a816:	4611      	mov	r1, r2
 800a818:	4618      	mov	r0, r3
 800a81a:	f00d fea4 	bl	8018566 <sys_arch_mbox_tryfetch>
 800a81e:	4603      	mov	r3, r0
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d1d5      	bne.n	800a7d2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3314      	adds	r3, #20
 800a82a:	4618      	mov	r0, r3
 800a82c:	f00d fe3e 	bl	80184ac <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	3314      	adds	r3, #20
 800a834:	4618      	mov	r0, r3
 800a836:	f00d febe 	bl	80185b6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a83a:	bf00      	nop
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
	...

0800a844 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d106      	bne.n	800a868 <lwip_netconn_do_close_internal+0x24>
 800a85a:	4ba1      	ldr	r3, [pc, #644]	; (800aae0 <lwip_netconn_do_close_internal+0x29c>)
 800a85c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a860:	49a0      	ldr	r1, [pc, #640]	; (800aae4 <lwip_netconn_do_close_internal+0x2a0>)
 800a862:	48a1      	ldr	r0, [pc, #644]	; (800aae8 <lwip_netconn_do_close_internal+0x2a4>)
 800a864:	f010 fa6a 	bl	801ad3c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a870:	2b10      	cmp	r3, #16
 800a872:	d006      	beq.n	800a882 <lwip_netconn_do_close_internal+0x3e>
 800a874:	4b9a      	ldr	r3, [pc, #616]	; (800aae0 <lwip_netconn_do_close_internal+0x29c>)
 800a876:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a87a:	499c      	ldr	r1, [pc, #624]	; (800aaec <lwip_netconn_do_close_internal+0x2a8>)
 800a87c:	489a      	ldr	r0, [pc, #616]	; (800aae8 <lwip_netconn_do_close_internal+0x2a4>)
 800a87e:	f010 fa5d 	bl	801ad3c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	785b      	ldrb	r3, [r3, #1]
 800a886:	2b04      	cmp	r3, #4
 800a888:	d006      	beq.n	800a898 <lwip_netconn_do_close_internal+0x54>
 800a88a:	4b95      	ldr	r3, [pc, #596]	; (800aae0 <lwip_netconn_do_close_internal+0x29c>)
 800a88c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a890:	4997      	ldr	r1, [pc, #604]	; (800aaf0 <lwip_netconn_do_close_internal+0x2ac>)
 800a892:	4895      	ldr	r0, [pc, #596]	; (800aae8 <lwip_netconn_do_close_internal+0x2a4>)
 800a894:	f010 fa52 	bl	801ad3c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d106      	bne.n	800a8ae <lwip_netconn_do_close_internal+0x6a>
 800a8a0:	4b8f      	ldr	r3, [pc, #572]	; (800aae0 <lwip_netconn_do_close_internal+0x29c>)
 800a8a2:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a8a6:	4993      	ldr	r1, [pc, #588]	; (800aaf4 <lwip_netconn_do_close_internal+0x2b0>)
 800a8a8:	488f      	ldr	r0, [pc, #572]	; (800aae8 <lwip_netconn_do_close_internal+0x2a4>)
 800a8aa:	f010 fa47 	bl	801ad3c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d106      	bne.n	800a8c4 <lwip_netconn_do_close_internal+0x80>
 800a8b6:	4b8a      	ldr	r3, [pc, #552]	; (800aae0 <lwip_netconn_do_close_internal+0x29c>)
 800a8b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a8bc:	498e      	ldr	r1, [pc, #568]	; (800aaf8 <lwip_netconn_do_close_internal+0x2b4>)
 800a8be:	488a      	ldr	r0, [pc, #552]	; (800aae8 <lwip_netconn_do_close_internal+0x2a4>)
 800a8c0:	f010 fa3c 	bl	801ad3c <iprintf>

  tpcb = conn->pcb.tcp;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	7a1b      	ldrb	r3, [r3, #8]
 800a8d0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a8da:	7bfb      	ldrb	r3, [r7, #15]
 800a8dc:	f003 0302 	and.w	r3, r3, #2
 800a8e0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	2b03      	cmp	r3, #3
 800a8e6:	d102      	bne.n	800a8ee <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	75bb      	strb	r3, [r7, #22]
 800a8ec:	e01f      	b.n	800a92e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00e      	beq.n	800a912 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a8f8:	2b05      	cmp	r3, #5
 800a8fa:	d007      	beq.n	800a90c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a900:	2b06      	cmp	r3, #6
 800a902:	d003      	beq.n	800a90c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a908:	2b08      	cmp	r3, #8
 800a90a:	d102      	bne.n	800a912 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a90c:	2301      	movs	r3, #1
 800a90e:	75bb      	strb	r3, [r7, #22]
 800a910:	e00d      	b.n	800a92e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a912:	7b7b      	ldrb	r3, [r7, #13]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d008      	beq.n	800a92a <lwip_netconn_do_close_internal+0xe6>
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	8b5b      	ldrh	r3, [r3, #26]
 800a91c:	f003 0310 	and.w	r3, r3, #16
 800a920:	2b00      	cmp	r3, #0
 800a922:	d002      	beq.n	800a92a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a924:	2301      	movs	r3, #1
 800a926:	75bb      	strb	r3, [r7, #22]
 800a928:	e001      	b.n	800a92e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a92a:	2300      	movs	r3, #0
 800a92c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a92e:	7dbb      	ldrb	r3, [r7, #22]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d003      	beq.n	800a93c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a934:	2100      	movs	r1, #0
 800a936:	6938      	ldr	r0, [r7, #16]
 800a938:	f005 ff40 	bl	80107bc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	7d1b      	ldrb	r3, [r3, #20]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d104      	bne.n	800a94e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a944:	2100      	movs	r1, #0
 800a946:	6938      	ldr	r0, [r7, #16]
 800a948:	f005 ffb0 	bl	80108ac <tcp_accept>
 800a94c:	e01d      	b.n	800a98a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d007      	beq.n	800a964 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a954:	2100      	movs	r1, #0
 800a956:	6938      	ldr	r0, [r7, #16]
 800a958:	f005 ff42 	bl	80107e0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a95c:	2100      	movs	r1, #0
 800a95e:	6938      	ldr	r0, [r7, #16]
 800a960:	f005 ffa4 	bl	80108ac <tcp_accept>
    }
    if (shut_tx) {
 800a964:	7b7b      	ldrb	r3, [r7, #13]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d003      	beq.n	800a972 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a96a:	2100      	movs	r1, #0
 800a96c:	6938      	ldr	r0, [r7, #16]
 800a96e:	f005 ff59 	bl	8010824 <tcp_sent>
    }
    if (shut_close) {
 800a972:	7dbb      	ldrb	r3, [r7, #22]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d008      	beq.n	800a98a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a978:	2200      	movs	r2, #0
 800a97a:	2100      	movs	r1, #0
 800a97c:	6938      	ldr	r0, [r7, #16]
 800a97e:	f005 ffad 	bl	80108dc <tcp_poll>
      tcp_err(tpcb, NULL);
 800a982:	2100      	movs	r1, #0
 800a984:	6938      	ldr	r0, [r7, #16]
 800a986:	f005 ff6f 	bl	8010868 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a98a:	7dbb      	ldrb	r3, [r7, #22]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d005      	beq.n	800a99c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a990:	6938      	ldr	r0, [r7, #16]
 800a992:	f004 fd25 	bl	800f3e0 <tcp_close>
 800a996:	4603      	mov	r3, r0
 800a998:	75fb      	strb	r3, [r7, #23]
 800a99a:	e007      	b.n	800a9ac <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	7b7a      	ldrb	r2, [r7, #13]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6938      	ldr	r0, [r7, #16]
 800a9a4:	f004 fd48 	bl	800f438 <tcp_shutdown>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a9ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	757b      	strb	r3, [r7, #21]
 800a9b8:	e016      	b.n	800a9e8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a9ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c2:	d10f      	bne.n	800a9e4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	7a5b      	ldrb	r3, [r3, #9]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d10c      	bne.n	800a9e8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a9d2:	7dbb      	ldrb	r3, [r7, #22]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d007      	beq.n	800a9e8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a9d8:	6938      	ldr	r0, [r7, #16]
 800a9da:	f004 fe47 	bl	800f66c <tcp_abort>
          err = ERR_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	75fb      	strb	r3, [r7, #23]
 800a9e2:	e001      	b.n	800a9e8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a9e8:	7d7b      	ldrb	r3, [r7, #21]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d044      	beq.n	800aa78 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	330c      	adds	r3, #12
 800a9f6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	7dfa      	ldrb	r2, [r7, #23]
 800a9fe:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800aa0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d129      	bne.n	800aa68 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800aa14:	7dbb      	ldrb	r3, [r7, #22]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00c      	beq.n	800aa34 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d005      	beq.n	800aa34 <lwip_netconn_do_close_internal+0x1f0>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2104      	movs	r1, #4
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	4798      	blx	r3
      }
      if (shut_rx) {
 800aa34:	7bbb      	ldrb	r3, [r7, #14]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d009      	beq.n	800aa4e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d005      	beq.n	800aa4e <lwip_netconn_do_close_internal+0x20a>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa46:	2200      	movs	r2, #0
 800aa48:	2100      	movs	r1, #0
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	4798      	blx	r3
      }
      if (shut_tx) {
 800aa4e:	7b7b      	ldrb	r3, [r7, #13]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d009      	beq.n	800aa68 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d005      	beq.n	800aa68 <lwip_netconn_do_close_internal+0x224>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa60:	2200      	movs	r2, #0
 800aa62:	2102      	movs	r1, #2
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800aa68:	78fb      	ldrb	r3, [r7, #3]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d002      	beq.n	800aa74 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800aa6e:	68b8      	ldr	r0, [r7, #8]
 800aa70:	f00d fe04 	bl	801867c <sys_sem_signal>
    }
    return ERR_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	e02e      	b.n	800aad6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800aa78:	7d7b      	ldrb	r3, [r7, #21]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d11e      	bne.n	800aabc <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	7d1b      	ldrb	r3, [r3, #20]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d106      	bne.n	800aa94 <lwip_netconn_do_close_internal+0x250>
 800aa86:	4b16      	ldr	r3, [pc, #88]	; (800aae0 <lwip_netconn_do_close_internal+0x29c>)
 800aa88:	f240 4241 	movw	r2, #1089	; 0x441
 800aa8c:	491b      	ldr	r1, [pc, #108]	; (800aafc <lwip_netconn_do_close_internal+0x2b8>)
 800aa8e:	4816      	ldr	r0, [pc, #88]	; (800aae8 <lwip_netconn_do_close_internal+0x2a4>)
 800aa90:	f010 f954 	bl	801ad3c <iprintf>
    if (shut_tx) {
 800aa94:	7b7b      	ldrb	r3, [r7, #13]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800aa9a:	4919      	ldr	r1, [pc, #100]	; (800ab00 <lwip_netconn_do_close_internal+0x2bc>)
 800aa9c:	6938      	ldr	r0, [r7, #16]
 800aa9e:	f005 fec1 	bl	8010824 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	4917      	ldr	r1, [pc, #92]	; (800ab04 <lwip_netconn_do_close_internal+0x2c0>)
 800aaa6:	6938      	ldr	r0, [r7, #16]
 800aaa8:	f005 ff18 	bl	80108dc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800aaac:	4916      	ldr	r1, [pc, #88]	; (800ab08 <lwip_netconn_do_close_internal+0x2c4>)
 800aaae:	6938      	ldr	r0, [r7, #16]
 800aab0:	f005 feda 	bl	8010868 <tcp_err>
    tcp_arg(tpcb, conn);
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	6938      	ldr	r0, [r7, #16]
 800aab8:	f005 fe80 	bl	80107bc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800aabc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d106      	bne.n	800aad2 <lwip_netconn_do_close_internal+0x28e>
 800aac4:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <lwip_netconn_do_close_internal+0x29c>)
 800aac6:	f240 424d 	movw	r2, #1101	; 0x44d
 800aaca:	4910      	ldr	r1, [pc, #64]	; (800ab0c <lwip_netconn_do_close_internal+0x2c8>)
 800aacc:	4806      	ldr	r0, [pc, #24]	; (800aae8 <lwip_netconn_do_close_internal+0x2a4>)
 800aace:	f010 f935 	bl	801ad3c <iprintf>
  return err;
 800aad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	0801bd84 	.word	0x0801bd84
 800aae4:	0801c058 	.word	0x0801c058
 800aae8:	0801bdc8 	.word	0x0801bdc8
 800aaec:	0801c068 	.word	0x0801c068
 800aaf0:	0801c088 	.word	0x0801c088
 800aaf4:	0801c0ac 	.word	0x0801c0ac
 800aaf8:	0801beec 	.word	0x0801beec
 800aafc:	0801c0c0 	.word	0x0801c0c0
 800ab00:	0800a0bd 	.word	0x0800a0bd
 800ab04:	08009ff5 	.word	0x08009ff5
 800ab08:	0800a165 	.word	0x0800a165
 800ab0c:	0801c0e4 	.word	0x0801c0e4

0800ab10 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	785b      	ldrb	r3, [r3, #1]
 800ab22:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ab24:	7afb      	ldrb	r3, [r7, #11]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00d      	beq.n	800ab46 <lwip_netconn_do_delconn+0x36>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab34:	2b10      	cmp	r3, #16
 800ab36:	d006      	beq.n	800ab46 <lwip_netconn_do_delconn+0x36>
 800ab38:	4b60      	ldr	r3, [pc, #384]	; (800acbc <lwip_netconn_do_delconn+0x1ac>)
 800ab3a:	f240 425e 	movw	r2, #1118	; 0x45e
 800ab3e:	4960      	ldr	r1, [pc, #384]	; (800acc0 <lwip_netconn_do_delconn+0x1b0>)
 800ab40:	4860      	ldr	r0, [pc, #384]	; (800acc4 <lwip_netconn_do_delconn+0x1b4>)
 800ab42:	f010 f8fb 	bl	801ad3c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ab46:	7afb      	ldrb	r3, [r7, #11]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d005      	beq.n	800ab58 <lwip_netconn_do_delconn+0x48>
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	d002      	beq.n	800ab58 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	2b03      	cmp	r3, #3
 800ab56:	d109      	bne.n	800ab6c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	2b03      	cmp	r3, #3
 800ab5c:	d10a      	bne.n	800ab74 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	7f1b      	ldrb	r3, [r3, #28]
 800ab64:	f003 0304 	and.w	r3, r3, #4
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d103      	bne.n	800ab74 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	22fb      	movs	r2, #251	; 0xfb
 800ab70:	711a      	strb	r2, [r3, #4]
 800ab72:	e097      	b.n	800aca4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800ab74:	7afb      	ldrb	r3, [r7, #11]
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d10d      	bne.n	800ab96 <lwip_netconn_do_delconn+0x86>
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	7f1b      	ldrb	r3, [r3, #28]
 800ab80:	f003 0304 	and.w	r3, r3, #4
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d106      	bne.n	800ab96 <lwip_netconn_do_delconn+0x86>
 800ab88:	4b4c      	ldr	r3, [pc, #304]	; (800acbc <lwip_netconn_do_delconn+0x1ac>)
 800ab8a:	f240 427a 	movw	r2, #1146	; 0x47a
 800ab8e:	494e      	ldr	r1, [pc, #312]	; (800acc8 <lwip_netconn_do_delconn+0x1b8>)
 800ab90:	484c      	ldr	r0, [pc, #304]	; (800acc4 <lwip_netconn_do_delconn+0x1b4>)
 800ab92:	f010 f8d3 	bl	801ad3c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff fdd1 	bl	800a748 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d05f      	beq.n	800ac70 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abba:	2b10      	cmp	r3, #16
 800abbc:	d00d      	beq.n	800abda <lwip_netconn_do_delconn+0xca>
 800abbe:	2b20      	cmp	r3, #32
 800abc0:	d151      	bne.n	800ac66 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f00b f878 	bl	8015cc8 <udp_remove>
          break;
 800abd8:	e046      	b.n	800ac68 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d006      	beq.n	800abf2 <lwip_netconn_do_delconn+0xe2>
 800abe4:	4b35      	ldr	r3, [pc, #212]	; (800acbc <lwip_netconn_do_delconn+0x1ac>)
 800abe6:	f240 4294 	movw	r2, #1172	; 0x494
 800abea:	4938      	ldr	r1, [pc, #224]	; (800accc <lwip_netconn_do_delconn+0x1bc>)
 800abec:	4835      	ldr	r0, [pc, #212]	; (800acc4 <lwip_netconn_do_delconn+0x1b4>)
 800abee:	f010 f8a5 	bl	801ad3c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2204      	movs	r2, #4
 800abf8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2203      	movs	r2, #3
 800abfe:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7ff fe18 	bl	800a844 <lwip_netconn_do_close_internal>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d04b      	beq.n	800acb2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	785b      	ldrb	r3, [r3, #1]
 800ac20:	2b04      	cmp	r3, #4
 800ac22:	d006      	beq.n	800ac32 <lwip_netconn_do_delconn+0x122>
 800ac24:	4b25      	ldr	r3, [pc, #148]	; (800acbc <lwip_netconn_do_delconn+0x1ac>)
 800ac26:	f240 429a 	movw	r2, #1178	; 0x49a
 800ac2a:	4929      	ldr	r1, [pc, #164]	; (800acd0 <lwip_netconn_do_delconn+0x1c0>)
 800ac2c:	4825      	ldr	r0, [pc, #148]	; (800acc4 <lwip_netconn_do_delconn+0x1b4>)
 800ac2e:	f010 f885 	bl	801ad3c <iprintf>
            UNLOCK_TCPIP_CORE();
 800ac32:	4828      	ldr	r0, [pc, #160]	; (800acd4 <lwip_netconn_do_delconn+0x1c4>)
 800ac34:	f00d fd8b 	bl	801874e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	330c      	adds	r3, #12
 800ac3e:	2100      	movs	r1, #0
 800ac40:	4618      	mov	r0, r3
 800ac42:	f00d fcea 	bl	801861a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ac46:	4823      	ldr	r0, [pc, #140]	; (800acd4 <lwip_netconn_do_delconn+0x1c4>)
 800ac48:	f00d fd72 	bl	8018730 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	785b      	ldrb	r3, [r3, #1]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d02d      	beq.n	800acb2 <lwip_netconn_do_delconn+0x1a2>
 800ac56:	4b19      	ldr	r3, [pc, #100]	; (800acbc <lwip_netconn_do_delconn+0x1ac>)
 800ac58:	f240 429e 	movw	r2, #1182	; 0x49e
 800ac5c:	491c      	ldr	r1, [pc, #112]	; (800acd0 <lwip_netconn_do_delconn+0x1c0>)
 800ac5e:	4819      	ldr	r0, [pc, #100]	; (800acc4 <lwip_netconn_do_delconn+0x1b4>)
 800ac60:	f010 f86c 	bl	801ad3c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ac64:	e025      	b.n	800acb2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800ac66:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d007      	beq.n	800ac8a <lwip_netconn_do_delconn+0x17a>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	6810      	ldr	r0, [r2, #0]
 800ac84:	2200      	movs	r2, #0
 800ac86:	2100      	movs	r1, #0
 800ac88:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d007      	beq.n	800aca4 <lwip_netconn_do_delconn+0x194>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	6810      	ldr	r0, [r2, #0]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	2102      	movs	r1, #2
 800aca2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	330c      	adds	r3, #12
 800acaa:	4618      	mov	r0, r3
 800acac:	f00d fd00 	bl	80186b0 <sys_sem_valid>
 800acb0:	e000      	b.n	800acb4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800acb2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800acb4:	3710      	adds	r7, #16
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	0801bd84 	.word	0x0801bd84
 800acc0:	0801c0f4 	.word	0x0801c0f4
 800acc4:	0801bdc8 	.word	0x0801bdc8
 800acc8:	0801c108 	.word	0x0801c108
 800accc:	0801c128 	.word	0x0801c128
 800acd0:	0801c144 	.word	0x0801c144
 800acd4:	20014e48 	.word	0x20014e48

0800acd8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d025      	beq.n	800ad3a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acf8:	2b10      	cmp	r3, #16
 800acfa:	d00e      	beq.n	800ad1a <lwip_netconn_do_bind+0x42>
 800acfc:	2b20      	cmp	r3, #32
 800acfe:	d119      	bne.n	800ad34 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6858      	ldr	r0, [r3, #4]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	6899      	ldr	r1, [r3, #8]
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	899b      	ldrh	r3, [r3, #12]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f00a ff18 	bl	8015b44 <udp_bind>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73fb      	strb	r3, [r7, #15]
        break;
 800ad18:	e011      	b.n	800ad3e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6858      	ldr	r0, [r3, #4]
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	6899      	ldr	r1, [r3, #8]
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	899b      	ldrh	r3, [r3, #12]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	f004 fcab 	bl	800f684 <tcp_bind>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	73fb      	strb	r3, [r7, #15]
        break;
 800ad32:	e004      	b.n	800ad3e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ad34:	23fa      	movs	r3, #250	; 0xfa
 800ad36:	73fb      	strb	r3, [r7, #15]
        break;
 800ad38:	e001      	b.n	800ad3e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ad3a:	23fa      	movs	r3, #250	; 0xfa
 800ad3c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	7bfa      	ldrb	r2, [r7, #15]
 800ad42:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ad44:	bf00      	nop
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d07f      	beq.n	800ae62 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad6c:	2b10      	cmp	r3, #16
 800ad6e:	d175      	bne.n	800ae5c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	785b      	ldrb	r3, [r3, #1]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d165      	bne.n	800ae46 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	7d1b      	ldrb	r3, [r3, #20]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d002      	beq.n	800ad8c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ad86:	23fa      	movs	r3, #250	; 0xfa
 800ad88:	72fb      	strb	r3, [r7, #11]
 800ad8a:	e06c      	b.n	800ae66 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ad8c:	23ff      	movs	r3, #255	; 0xff
 800ad8e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	f107 020b 	add.w	r2, r7, #11
 800ad9a:	7cf9      	ldrb	r1, [r7, #19]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f004 fd43 	bl	800f828 <tcp_listen_with_backlog_and_err>
 800ada2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d05d      	beq.n	800ae66 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3310      	adds	r3, #16
 800adb0:	4618      	mov	r0, r3
 800adb2:	f00d fbef 	bl	8018594 <sys_mbox_valid>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00b      	beq.n	800add4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3310      	adds	r3, #16
 800adc2:	4618      	mov	r0, r3
 800adc4:	f00d fb72 	bl	80184ac <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	3310      	adds	r3, #16
 800adce:	4618      	mov	r0, r3
 800add0:	f00d fbf1 	bl	80185b6 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3314      	adds	r3, #20
 800adde:	4618      	mov	r0, r3
 800ade0:	f00d fbd8 	bl	8018594 <sys_mbox_valid>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d108      	bne.n	800adfc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	3314      	adds	r3, #20
 800adf0:	2106      	movs	r1, #6
 800adf2:	4618      	mov	r0, r3
 800adf4:	f00d fb40 	bl	8018478 <sys_mbox_new>
 800adf8:	4603      	mov	r3, r0
 800adfa:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800adfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d118      	bne.n	800ae36 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2202      	movs	r2, #2
 800ae0a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685a      	ldr	r2, [r3, #4]
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	4610      	mov	r0, r2
 800ae22:	f005 fccb 	bl	80107bc <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	4912      	ldr	r1, [pc, #72]	; (800ae78 <lwip_netconn_do_listen+0x12c>)
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f005 fd3c 	bl	80108ac <tcp_accept>
 800ae34:	e017      	b.n	800ae66 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f004 fad2 	bl	800f3e0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2200      	movs	r2, #0
 800ae42:	605a      	str	r2, [r3, #4]
 800ae44:	e00f      	b.n	800ae66 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	785b      	ldrb	r3, [r3, #1]
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d102      	bne.n	800ae56 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	72fb      	strb	r3, [r7, #11]
 800ae54:	e007      	b.n	800ae66 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ae56:	23f5      	movs	r3, #245	; 0xf5
 800ae58:	72fb      	strb	r3, [r7, #11]
 800ae5a:	e004      	b.n	800ae66 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ae5c:	23f0      	movs	r3, #240	; 0xf0
 800ae5e:	72fb      	strb	r3, [r7, #11]
 800ae60:	e001      	b.n	800ae66 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ae62:	23f5      	movs	r3, #245	; 0xf5
 800ae64:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ae66:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ae6e:	bf00      	nop
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	0800a361 	.word	0x0800a361

0800ae7c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fe ff21 	bl	8009cd4 <netconn_err>
 800ae92:	4603      	mov	r3, r0
 800ae94:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ae96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d134      	bne.n	800af08 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d02d      	beq.n	800af04 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aeb2:	2b20      	cmp	r3, #32
 800aeb4:	d123      	bne.n	800aefe <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10c      	bne.n	800aeda <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	685a      	ldr	r2, [r3, #4]
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f00a fc4e 	bl	8015770 <udp_send>
 800aed4:	4603      	mov	r3, r0
 800aed6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800aed8:	e016      	b.n	800af08 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	6858      	ldr	r0, [r3, #4]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	6819      	ldr	r1, [r3, #0]
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f103 0208 	add.w	r2, r3, #8
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	899b      	ldrh	r3, [r3, #12]
 800aef4:	f00a fc70 	bl	80157d8 <udp_sendto>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73fb      	strb	r3, [r7, #15]
          break;
 800aefc:	e004      	b.n	800af08 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800aefe:	23f5      	movs	r3, #245	; 0xf5
 800af00:	73fb      	strb	r3, [r7, #15]
          break;
 800af02:	e001      	b.n	800af08 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800af04:	23f5      	movs	r3, #245	; 0xf5
 800af06:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	7bfa      	ldrb	r2, [r7, #15]
 800af0c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800af0e:	bf00      	nop
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b086      	sub	sp, #24
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	2200      	movs	r2, #0
 800af26:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d022      	beq.n	800af78 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af3c:	2b10      	cmp	r3, #16
 800af3e:	d11b      	bne.n	800af78 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af4c:	d202      	bcs.n	800af54 <lwip_netconn_do_recv+0x3e>
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	b29b      	uxth	r3, r3
 800af52:	e001      	b.n	800af58 <lwip_netconn_do_recv+0x42>
 800af54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af58:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	89fa      	ldrh	r2, [r7, #14]
 800af62:	4611      	mov	r1, r2
 800af64:	4618      	mov	r0, r3
 800af66:	f004 fd63 	bl	800fa30 <tcp_recved>
        remaining -= recved;
 800af6a:	89fb      	ldrh	r3, [r7, #14]
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e6      	bne.n	800af46 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800af78:	bf00      	nop
 800af7a:	3718      	adds	r7, #24
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <lwip_netconn_do_writemore+0x24>
 800af96:	4b96      	ldr	r3, [pc, #600]	; (800b1f0 <lwip_netconn_do_writemore+0x270>)
 800af98:	f240 6273 	movw	r2, #1651	; 0x673
 800af9c:	4995      	ldr	r1, [pc, #596]	; (800b1f4 <lwip_netconn_do_writemore+0x274>)
 800af9e:	4896      	ldr	r0, [pc, #600]	; (800b1f8 <lwip_netconn_do_writemore+0x278>)
 800afa0:	f00f fecc 	bl	801ad3c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	785b      	ldrb	r3, [r3, #1]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d006      	beq.n	800afba <lwip_netconn_do_writemore+0x3a>
 800afac:	4b90      	ldr	r3, [pc, #576]	; (800b1f0 <lwip_netconn_do_writemore+0x270>)
 800afae:	f240 6274 	movw	r2, #1652	; 0x674
 800afb2:	4992      	ldr	r1, [pc, #584]	; (800b1fc <lwip_netconn_do_writemore+0x27c>)
 800afb4:	4890      	ldr	r0, [pc, #576]	; (800b1f8 <lwip_netconn_do_writemore+0x278>)
 800afb6:	f00f fec1 	bl	801ad3c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a1b      	ldr	r3, [r3, #32]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d106      	bne.n	800afd0 <lwip_netconn_do_writemore+0x50>
 800afc2:	4b8b      	ldr	r3, [pc, #556]	; (800b1f0 <lwip_netconn_do_writemore+0x270>)
 800afc4:	f240 6275 	movw	r2, #1653	; 0x675
 800afc8:	498d      	ldr	r1, [pc, #564]	; (800b200 <lwip_netconn_do_writemore+0x280>)
 800afca:	488b      	ldr	r0, [pc, #556]	; (800b1f8 <lwip_netconn_do_writemore+0x278>)
 800afcc:	f00f feb6 	bl	801ad3c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d106      	bne.n	800afe6 <lwip_netconn_do_writemore+0x66>
 800afd8:	4b85      	ldr	r3, [pc, #532]	; (800b1f0 <lwip_netconn_do_writemore+0x270>)
 800afda:	f240 6276 	movw	r2, #1654	; 0x676
 800afde:	4989      	ldr	r1, [pc, #548]	; (800b204 <lwip_netconn_do_writemore+0x284>)
 800afe0:	4885      	ldr	r0, [pc, #532]	; (800b1f8 <lwip_netconn_do_writemore+0x278>)
 800afe2:	f00f feab 	bl	801ad3c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	699a      	ldr	r2, [r3, #24]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a1b      	ldr	r3, [r3, #32]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d306      	bcc.n	800b004 <lwip_netconn_do_writemore+0x84>
 800aff6:	4b7e      	ldr	r3, [pc, #504]	; (800b1f0 <lwip_netconn_do_writemore+0x270>)
 800aff8:	f240 6277 	movw	r2, #1655	; 0x677
 800affc:	4982      	ldr	r1, [pc, #520]	; (800b208 <lwip_netconn_do_writemore+0x288>)
 800affe:	487e      	ldr	r0, [pc, #504]	; (800b1f8 <lwip_netconn_do_writemore+0x278>)
 800b000:	f00f fe9c 	bl	801ad3c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a1b      	ldr	r3, [r3, #32]
 800b008:	899b      	ldrh	r3, [r3, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <lwip_netconn_do_writemore+0x9c>
 800b00e:	4b78      	ldr	r3, [pc, #480]	; (800b1f0 <lwip_netconn_do_writemore+0x270>)
 800b010:	f240 6279 	movw	r2, #1657	; 0x679
 800b014:	497d      	ldr	r1, [pc, #500]	; (800b20c <lwip_netconn_do_writemore+0x28c>)
 800b016:	4878      	ldr	r0, [pc, #480]	; (800b1f8 <lwip_netconn_do_writemore+0x278>)
 800b018:	f00f fe90 	bl	801ad3c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a1b      	ldr	r3, [r3, #32]
 800b020:	7f1b      	ldrb	r3, [r3, #28]
 800b022:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	7f1b      	ldrb	r3, [r3, #28]
 800b028:	f003 0302 	and.w	r3, r3, #2
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d104      	bne.n	800b03a <lwip_netconn_do_writemore+0xba>
 800b030:	7ebb      	ldrb	r3, [r7, #26]
 800b032:	f003 0304 	and.w	r3, r3, #4
 800b036:	2b00      	cmp	r3, #0
 800b038:	d001      	beq.n	800b03e <lwip_netconn_do_writemore+0xbe>
 800b03a:	2301      	movs	r3, #1
 800b03c:	e000      	b.n	800b040 <lwip_netconn_do_writemore+0xc0>
 800b03e:	2300      	movs	r3, #0
 800b040:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	4413      	add	r3, r2
 800b052:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	689b      	ldr	r3, [r3, #8]
 800b05a:	685a      	ldr	r2, [r3, #4]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	1ad3      	subs	r3, r2, r3
 800b064:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b06c:	d307      	bcc.n	800b07e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b06e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b072:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b074:	7ebb      	ldrb	r3, [r7, #26]
 800b076:	f043 0302 	orr.w	r3, r3, #2
 800b07a:	76bb      	strb	r3, [r7, #26]
 800b07c:	e001      	b.n	800b082 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b08a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b08c:	89fa      	ldrh	r2, [r7, #14]
 800b08e:	8bbb      	ldrh	r3, [r7, #28]
 800b090:	429a      	cmp	r2, r3
 800b092:	d216      	bcs.n	800b0c2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b094:	89fb      	ldrh	r3, [r7, #14]
 800b096:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b098:	7e3b      	ldrb	r3, [r7, #24]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d00d      	beq.n	800b0ba <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b09e:	8bbb      	ldrh	r3, [r7, #28]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10e      	bne.n	800b0c2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	699b      	ldr	r3, [r3, #24]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <lwip_netconn_do_writemore+0x134>
 800b0ae:	f06f 0306 	mvn.w	r3, #6
 800b0b2:	e000      	b.n	800b0b6 <lwip_netconn_do_writemore+0x136>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b0b8:	e07d      	b.n	800b1b6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b0ba:	7ebb      	ldrb	r3, [r7, #26]
 800b0bc:	f043 0302 	orr.w	r3, r3, #2
 800b0c0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	691a      	ldr	r2, [r3, #16]
 800b0c8:	8bbb      	ldrh	r3, [r7, #28]
 800b0ca:	441a      	add	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a1b      	ldr	r3, [r3, #32]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d906      	bls.n	800b0e6 <lwip_netconn_do_writemore+0x166>
 800b0d8:	4b45      	ldr	r3, [pc, #276]	; (800b1f0 <lwip_netconn_do_writemore+0x270>)
 800b0da:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b0de:	494c      	ldr	r1, [pc, #304]	; (800b210 <lwip_netconn_do_writemore+0x290>)
 800b0e0:	4845      	ldr	r0, [pc, #276]	; (800b1f8 <lwip_netconn_do_writemore+0x278>)
 800b0e2:	f00f fe2b 	bl	801ad3c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b0e6:	8bbb      	ldrh	r3, [r7, #28]
 800b0e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d103      	bne.n	800b0f8 <lwip_netconn_do_writemore+0x178>
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f6:	d209      	bcs.n	800b10c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b0fc:	8bba      	ldrh	r2, [r7, #28]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d10b      	bne.n	800b11a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	899b      	ldrh	r3, [r3, #12]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d906      	bls.n	800b11a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b10c:	2301      	movs	r3, #1
 800b10e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b110:	7ebb      	ldrb	r3, [r7, #26]
 800b112:	f043 0302 	orr.w	r3, r3, #2
 800b116:	76bb      	strb	r3, [r7, #26]
 800b118:	e001      	b.n	800b11e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b11a:	2300      	movs	r3, #0
 800b11c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6858      	ldr	r0, [r3, #4]
 800b122:	7ebb      	ldrb	r3, [r7, #26]
 800b124:	8bba      	ldrh	r2, [r7, #28]
 800b126:	6979      	ldr	r1, [r7, #20]
 800b128:	f008 fa86 	bl	8013638 <tcp_write>
 800b12c:	4603      	mov	r3, r0
 800b12e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b130:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d12c      	bne.n	800b192 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	6999      	ldr	r1, [r3, #24]
 800b13e:	8bba      	ldrh	r2, [r7, #28]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6a1b      	ldr	r3, [r3, #32]
 800b144:	440a      	add	r2, r1
 800b146:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a1b      	ldr	r3, [r3, #32]
 800b14c:	6919      	ldr	r1, [r3, #16]
 800b14e:	8bba      	ldrh	r2, [r7, #28]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	440a      	add	r2, r1
 800b156:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a1b      	ldr	r3, [r3, #32]
 800b15c:	691a      	ldr	r2, [r3, #16]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	429a      	cmp	r2, r3
 800b168:	d113      	bne.n	800b192 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	899a      	ldrh	r2, [r3, #12]
 800b170:	3a01      	subs	r2, #1
 800b172:	b292      	uxth	r2, r2
 800b174:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	899b      	ldrh	r3, [r3, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d008      	beq.n	800b192 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a1b      	ldr	r3, [r3, #32]
 800b184:	689a      	ldr	r2, [r3, #8]
 800b186:	3208      	adds	r2, #8
 800b188:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	2200      	movs	r2, #0
 800b190:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b192:	7e7b      	ldrb	r3, [r7, #25]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d004      	beq.n	800b1a2 <lwip_netconn_do_writemore+0x222>
 800b198:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f43f af50 	beq.w	800b042 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b1a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d004      	beq.n	800b1b4 <lwip_netconn_do_writemore+0x234>
 800b1aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b2:	d146      	bne.n	800b242 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b1b4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b1b6:	7e3b      	ldrb	r3, [r7, #24]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d02b      	beq.n	800b214 <lwip_netconn_do_writemore+0x294>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a1b      	ldr	r3, [r3, #32]
 800b1c0:	699a      	ldr	r2, [r3, #24]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d223      	bcs.n	800b214 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d005      	beq.n	800b1e0 <lwip_netconn_do_writemore+0x260>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	2200      	movs	r2, #0
 800b1da:	2103      	movs	r1, #3
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7f1b      	ldrb	r3, [r3, #28]
 800b1e4:	f043 0310 	orr.w	r3, r3, #16
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	771a      	strb	r2, [r3, #28]
 800b1ee:	e028      	b.n	800b242 <lwip_netconn_do_writemore+0x2c2>
 800b1f0:	0801bd84 	.word	0x0801bd84
 800b1f4:	0801bedc 	.word	0x0801bedc
 800b1f8:	0801bdc8 	.word	0x0801bdc8
 800b1fc:	0801c1e4 	.word	0x0801c1e4
 800b200:	0801beec 	.word	0x0801beec
 800b204:	0801c204 	.word	0x0801c204
 800b208:	0801c21c 	.word	0x0801c21c
 800b20c:	0801c25c 	.word	0x0801c25c
 800b210:	0801c284 	.word	0x0801c284
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b21c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b220:	d305      	bcc.n	800b22e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b22a:	2b04      	cmp	r3, #4
 800b22c:	d909      	bls.n	800b242 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b232:	2b00      	cmp	r3, #0
 800b234:	d005      	beq.n	800b242 <lwip_netconn_do_writemore+0x2c2>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23a:	2200      	movs	r2, #0
 800b23c:	2103      	movs	r1, #3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b242:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d11d      	bne.n	800b286 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	699a      	ldr	r2, [r3, #24]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a1b      	ldr	r3, [r3, #32]
 800b254:	695b      	ldr	r3, [r3, #20]
 800b256:	429a      	cmp	r2, r3
 800b258:	d002      	beq.n	800b260 <lwip_netconn_do_writemore+0x2e0>
 800b25a:	7e3b      	ldrb	r3, [r7, #24]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b260:	2301      	movs	r3, #1
 800b262:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	4618      	mov	r0, r3
 800b26a:	f008 ffcf 	bl	801420c <tcp_output>
 800b26e:	4603      	mov	r3, r0
 800b270:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b272:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b276:	f113 0f04 	cmn.w	r3, #4
 800b27a:	d12c      	bne.n	800b2d6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b27c:	7b3b      	ldrb	r3, [r7, #12]
 800b27e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b280:	2301      	movs	r3, #1
 800b282:	76fb      	strb	r3, [r7, #27]
 800b284:	e027      	b.n	800b2d6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b286:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28e:	d120      	bne.n	800b2d2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	4618      	mov	r0, r3
 800b296:	f008 ffb9 	bl	801420c <tcp_output>
 800b29a:	4603      	mov	r3, r0
 800b29c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b29e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b2a2:	f113 0f04 	cmn.w	r3, #4
 800b2a6:	d104      	bne.n	800b2b2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b2a8:	7b7b      	ldrb	r3, [r7, #13]
 800b2aa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	76fb      	strb	r3, [r7, #27]
 800b2b0:	e011      	b.n	800b2d6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b2b2:	7e3b      	ldrb	r3, [r7, #24]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00e      	beq.n	800b2d6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d102      	bne.n	800b2c8 <lwip_netconn_do_writemore+0x348>
 800b2c2:	f06f 0306 	mvn.w	r3, #6
 800b2c6:	e000      	b.n	800b2ca <lwip_netconn_do_writemore+0x34a>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	76fb      	strb	r3, [r7, #27]
 800b2d0:	e001      	b.n	800b2d6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b2d6:	7efb      	ldrb	r3, [r7, #27]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d015      	beq.n	800b308 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a1b      	ldr	r3, [r3, #32]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	330c      	adds	r3, #12
 800b2e4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a1b      	ldr	r3, [r3, #32]
 800b2ea:	7ffa      	ldrb	r2, [r7, #31]
 800b2ec:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b2fa:	78fb      	ldrb	r3, [r7, #3]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d006      	beq.n	800b30e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b300:	68b8      	ldr	r0, [r7, #8]
 800b302:	f00d f9bb 	bl	801867c <sys_sem_signal>
 800b306:	e002      	b.n	800b30e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b308:	f04f 33ff 	mov.w	r3, #4294967295
 800b30c:	e000      	b.n	800b310 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	3720      	adds	r7, #32
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe fcd3 	bl	8009cd4 <netconn_err>
 800b32e:	4603      	mov	r3, r0
 800b330:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d166      	bne.n	800b408 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b344:	2b10      	cmp	r3, #16
 800b346:	d15d      	bne.n	800b404 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	785b      	ldrb	r3, [r3, #1]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d002      	beq.n	800b358 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b352:	23fb      	movs	r3, #251	; 0xfb
 800b354:	73fb      	strb	r3, [r7, #15]
 800b356:	e057      	b.n	800b408 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d04d      	beq.n	800b3fe <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2201      	movs	r2, #1
 800b368:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6a1b      	ldr	r3, [r3, #32]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d006      	beq.n	800b382 <lwip_netconn_do_write+0x6a>
 800b374:	4b28      	ldr	r3, [pc, #160]	; (800b418 <lwip_netconn_do_write+0x100>)
 800b376:	f240 7223 	movw	r2, #1827	; 0x723
 800b37a:	4928      	ldr	r1, [pc, #160]	; (800b41c <lwip_netconn_do_write+0x104>)
 800b37c:	4828      	ldr	r0, [pc, #160]	; (800b420 <lwip_netconn_do_write+0x108>)
 800b37e:	f00f fcdd 	bl	801ad3c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d106      	bne.n	800b398 <lwip_netconn_do_write+0x80>
 800b38a:	4b23      	ldr	r3, [pc, #140]	; (800b418 <lwip_netconn_do_write+0x100>)
 800b38c:	f240 7224 	movw	r2, #1828	; 0x724
 800b390:	4924      	ldr	r1, [pc, #144]	; (800b424 <lwip_netconn_do_write+0x10c>)
 800b392:	4823      	ldr	r0, [pc, #140]	; (800b420 <lwip_netconn_do_write+0x108>)
 800b394:	f00f fcd2 	bl	801ad3c <iprintf>
        msg->conn->current_msg = msg;
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7ff fdea 	bl	800af80 <lwip_netconn_do_writemore>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d02e      	beq.n	800b410 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	785b      	ldrb	r3, [r3, #1]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d006      	beq.n	800b3ca <lwip_netconn_do_write+0xb2>
 800b3bc:	4b16      	ldr	r3, [pc, #88]	; (800b418 <lwip_netconn_do_write+0x100>)
 800b3be:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b3c2:	4919      	ldr	r1, [pc, #100]	; (800b428 <lwip_netconn_do_write+0x110>)
 800b3c4:	4816      	ldr	r0, [pc, #88]	; (800b420 <lwip_netconn_do_write+0x108>)
 800b3c6:	f00f fcb9 	bl	801ad3c <iprintf>
          UNLOCK_TCPIP_CORE();
 800b3ca:	4818      	ldr	r0, [pc, #96]	; (800b42c <lwip_netconn_do_write+0x114>)
 800b3cc:	f00d f9bf 	bl	801874e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	330c      	adds	r3, #12
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f00d f91e 	bl	801861a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b3de:	4813      	ldr	r0, [pc, #76]	; (800b42c <lwip_netconn_do_write+0x114>)
 800b3e0:	f00d f9a6 	bl	8018730 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	785b      	ldrb	r3, [r3, #1]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d110      	bne.n	800b410 <lwip_netconn_do_write+0xf8>
 800b3ee:	4b0a      	ldr	r3, [pc, #40]	; (800b418 <lwip_netconn_do_write+0x100>)
 800b3f0:	f240 722c 	movw	r2, #1836	; 0x72c
 800b3f4:	490c      	ldr	r1, [pc, #48]	; (800b428 <lwip_netconn_do_write+0x110>)
 800b3f6:	480a      	ldr	r0, [pc, #40]	; (800b420 <lwip_netconn_do_write+0x108>)
 800b3f8:	f00f fca0 	bl	801ad3c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b3fc:	e008      	b.n	800b410 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b3fe:	23f5      	movs	r3, #245	; 0xf5
 800b400:	73fb      	strb	r3, [r7, #15]
 800b402:	e001      	b.n	800b408 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b404:	23fa      	movs	r3, #250	; 0xfa
 800b406:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	7bfa      	ldrb	r2, [r7, #15]
 800b40c:	711a      	strb	r2, [r3, #4]
 800b40e:	e000      	b.n	800b412 <lwip_netconn_do_write+0xfa>
        return;
 800b410:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	0801bd84 	.word	0x0801bd84
 800b41c:	0801c128 	.word	0x0801c128
 800b420:	0801bdc8 	.word	0x0801bdc8
 800b424:	0801c2b0 	.word	0x0801c2b0
 800b428:	0801c144 	.word	0x0801c144
 800b42c:	20014e48 	.word	0x20014e48

0800b430 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d06b      	beq.n	800b51e <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	7c1b      	ldrb	r3, [r3, #16]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d007      	beq.n	800b45e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	685a      	ldr	r2, [r3, #4]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	6812      	ldr	r2, [r2, #0]
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	e006      	b.n	800b46c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	685a      	ldr	r2, [r3, #4]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	6852      	ldr	r2, [r2, #4]
 800b46a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2200      	movs	r2, #0
 800b470:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b47c:	2b10      	cmp	r3, #16
 800b47e:	d021      	beq.n	800b4c4 <lwip_netconn_do_getaddr+0x94>
 800b480:	2b20      	cmp	r3, #32
 800b482:	d144      	bne.n	800b50e <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	7c1b      	ldrb	r3, [r3, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d007      	beq.n	800b49c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	8a52      	ldrh	r2, [r2, #18]
 800b498:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800b49a:	e044      	b.n	800b526 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	7c1b      	ldrb	r3, [r3, #16]
 800b4a4:	f003 0304 	and.w	r3, r3, #4
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d103      	bne.n	800b4b4 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	22f5      	movs	r2, #245	; 0xf5
 800b4b0:	711a      	strb	r2, [r3, #4]
        break;
 800b4b2:	e038      	b.n	800b526 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685a      	ldr	r2, [r3, #4]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	8a92      	ldrh	r2, [r2, #20]
 800b4c0:	801a      	strh	r2, [r3, #0]
        break;
 800b4c2:	e030      	b.n	800b526 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	7c1b      	ldrb	r3, [r3, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10f      	bne.n	800b4ec <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d005      	beq.n	800b4e4 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	7d1b      	ldrb	r3, [r3, #20]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d103      	bne.n	800b4ec <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	22f5      	movs	r2, #245	; 0xf5
 800b4e8:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800b4ea:	e01c      	b.n	800b526 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	7c1b      	ldrb	r3, [r3, #16]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d004      	beq.n	800b4fe <lwip_netconn_do_getaddr+0xce>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	8adb      	ldrh	r3, [r3, #22]
 800b4fc:	e003      	b.n	800b506 <lwip_netconn_do_getaddr+0xd6>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	8b1b      	ldrh	r3, [r3, #24]
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	68d2      	ldr	r2, [r2, #12]
 800b50a:	8013      	strh	r3, [r2, #0]
        break;
 800b50c:	e00b      	b.n	800b526 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800b50e:	4b08      	ldr	r3, [pc, #32]	; (800b530 <lwip_netconn_do_getaddr+0x100>)
 800b510:	f240 727d 	movw	r2, #1917	; 0x77d
 800b514:	4907      	ldr	r1, [pc, #28]	; (800b534 <lwip_netconn_do_getaddr+0x104>)
 800b516:	4808      	ldr	r0, [pc, #32]	; (800b538 <lwip_netconn_do_getaddr+0x108>)
 800b518:	f00f fc10 	bl	801ad3c <iprintf>
        break;
 800b51c:	e003      	b.n	800b526 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	22f5      	movs	r2, #245	; 0xf5
 800b522:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b524:	bf00      	nop
 800b526:	bf00      	nop
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	0801bd84 	.word	0x0801bd84
 800b534:	0801c2c4 	.word	0x0801c2c4
 800b538:	0801bdc8 	.word	0x0801bdc8

0800b53c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	785b      	ldrb	r3, [r3, #1]
 800b54e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d069      	beq.n	800b62e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b564:	2b10      	cmp	r3, #16
 800b566:	d162      	bne.n	800b62e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d002      	beq.n	800b576 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	2b02      	cmp	r3, #2
 800b574:	d05b      	beq.n	800b62e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b576:	7afb      	ldrb	r3, [r7, #11]
 800b578:	2b03      	cmp	r3, #3
 800b57a:	d103      	bne.n	800b584 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	22f5      	movs	r2, #245	; 0xf5
 800b580:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b582:	e059      	b.n	800b638 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b584:	7afb      	ldrb	r3, [r7, #11]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d103      	bne.n	800b592 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	22fb      	movs	r2, #251	; 0xfb
 800b58e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b590:	e052      	b.n	800b638 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	7a1b      	ldrb	r3, [r3, #8]
 800b596:	f003 0301 	and.w	r3, r3, #1
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d004      	beq.n	800b5a8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7ff f8d0 	bl	800a748 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d006      	beq.n	800b5c0 <lwip_netconn_do_close+0x84>
 800b5b2:	4b23      	ldr	r3, [pc, #140]	; (800b640 <lwip_netconn_do_close+0x104>)
 800b5b4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b5b8:	4922      	ldr	r1, [pc, #136]	; (800b644 <lwip_netconn_do_close+0x108>)
 800b5ba:	4823      	ldr	r0, [pc, #140]	; (800b648 <lwip_netconn_do_close+0x10c>)
 800b5bc:	f00f fbbe 	bl	801ad3c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2204      	movs	r2, #4
 800b5c6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff f934 	bl	800a844 <lwip_netconn_do_close_internal>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d029      	beq.n	800b636 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	785b      	ldrb	r3, [r3, #1]
 800b5e8:	2b04      	cmp	r3, #4
 800b5ea:	d006      	beq.n	800b5fa <lwip_netconn_do_close+0xbe>
 800b5ec:	4b14      	ldr	r3, [pc, #80]	; (800b640 <lwip_netconn_do_close+0x104>)
 800b5ee:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b5f2:	4916      	ldr	r1, [pc, #88]	; (800b64c <lwip_netconn_do_close+0x110>)
 800b5f4:	4814      	ldr	r0, [pc, #80]	; (800b648 <lwip_netconn_do_close+0x10c>)
 800b5f6:	f00f fba1 	bl	801ad3c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b5fa:	4815      	ldr	r0, [pc, #84]	; (800b650 <lwip_netconn_do_close+0x114>)
 800b5fc:	f00d f8a7 	bl	801874e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	330c      	adds	r3, #12
 800b606:	2100      	movs	r1, #0
 800b608:	4618      	mov	r0, r3
 800b60a:	f00d f806 	bl	801861a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b60e:	4810      	ldr	r0, [pc, #64]	; (800b650 <lwip_netconn_do_close+0x114>)
 800b610:	f00d f88e 	bl	8018730 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	785b      	ldrb	r3, [r3, #1]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00b      	beq.n	800b636 <lwip_netconn_do_close+0xfa>
 800b61e:	4b08      	ldr	r3, [pc, #32]	; (800b640 <lwip_netconn_do_close+0x104>)
 800b620:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b624:	4909      	ldr	r1, [pc, #36]	; (800b64c <lwip_netconn_do_close+0x110>)
 800b626:	4808      	ldr	r0, [pc, #32]	; (800b648 <lwip_netconn_do_close+0x10c>)
 800b628:	f00f fb88 	bl	801ad3c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b62c:	e003      	b.n	800b636 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	22f5      	movs	r2, #245	; 0xf5
 800b632:	711a      	strb	r2, [r3, #4]
 800b634:	e000      	b.n	800b638 <lwip_netconn_do_close+0xfc>
      return;
 800b636:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	0801bd84 	.word	0x0801bd84
 800b644:	0801c128 	.word	0x0801c128
 800b648:	0801bdc8 	.word	0x0801bdc8
 800b64c:	0801c144 	.word	0x0801c144
 800b650:	20014e48 	.word	0x20014e48

0800b654 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4603      	mov	r3, r0
 800b65c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b662:	2b00      	cmp	r3, #0
 800b664:	dc04      	bgt.n	800b670 <err_to_errno+0x1c>
 800b666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b66a:	f113 0f10 	cmn.w	r3, #16
 800b66e:	da01      	bge.n	800b674 <err_to_errno+0x20>
    return EIO;
 800b670:	2305      	movs	r3, #5
 800b672:	e005      	b.n	800b680 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b678:	425b      	negs	r3, r3
 800b67a:	4a04      	ldr	r2, [pc, #16]	; (800b68c <err_to_errno+0x38>)
 800b67c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b680:	4618      	mov	r0, r3
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	0801f4e8 	.word	0x0801f4e8

0800b690 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d013      	beq.n	800b6c6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00b      	beq.n	800b6be <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f003 f9de 	bl	800ea6c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	605a      	str	r2, [r3, #4]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	685a      	ldr	r2, [r3, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b6be:	6879      	ldr	r1, [r7, #4]
 800b6c0:	2006      	movs	r0, #6
 800b6c2:	f002 fac5 	bl	800dc50 <memp_free>
  }
}
 800b6c6:	bf00      	nop
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
	...

0800b6d0 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d106      	bne.n	800b6ec <netbuf_free+0x1c>
 800b6de:	4b0d      	ldr	r3, [pc, #52]	; (800b714 <netbuf_free+0x44>)
 800b6e0:	2281      	movs	r2, #129	; 0x81
 800b6e2:	490d      	ldr	r1, [pc, #52]	; (800b718 <netbuf_free+0x48>)
 800b6e4:	480d      	ldr	r0, [pc, #52]	; (800b71c <netbuf_free+0x4c>)
 800b6e6:	f00f fb29 	bl	801ad3c <iprintf>
 800b6ea:	e00f      	b.n	800b70c <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d004      	beq.n	800b6fe <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f003 f9b7 	bl	800ea6c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	605a      	str	r2, [r3, #4]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	0801c2dc 	.word	0x0801c2dc
 800b718:	0801c378 	.word	0x0801c378
 800b71c:	0801c32c 	.word	0x0801c32c

0800b720 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d108      	bne.n	800b746 <netbuf_ref+0x26>
 800b734:	4b1c      	ldr	r3, [pc, #112]	; (800b7a8 <netbuf_ref+0x88>)
 800b736:	2299      	movs	r2, #153	; 0x99
 800b738:	491c      	ldr	r1, [pc, #112]	; (800b7ac <netbuf_ref+0x8c>)
 800b73a:	481d      	ldr	r0, [pc, #116]	; (800b7b0 <netbuf_ref+0x90>)
 800b73c:	f00f fafe 	bl	801ad3c <iprintf>
 800b740:	f06f 030f 	mvn.w	r3, #15
 800b744:	e02b      	b.n	800b79e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d004      	beq.n	800b758 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4618      	mov	r0, r3
 800b754:	f003 f98a 	bl	800ea6c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b758:	2241      	movs	r2, #65	; 0x41
 800b75a:	2100      	movs	r1, #0
 800b75c:	2036      	movs	r0, #54	; 0x36
 800b75e:	f002 fe6f 	bl	800e440 <pbuf_alloc>
 800b762:	4602      	mov	r2, r0
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d105      	bne.n	800b77c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b776:	f04f 33ff 	mov.w	r3, #4294967295
 800b77a:	e010      	b.n	800b79e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	88fa      	ldrh	r2, [r7, #6]
 800b78a:	811a      	strh	r2, [r3, #8]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	6812      	ldr	r2, [r2, #0]
 800b790:	891b      	ldrh	r3, [r3, #8]
 800b792:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b79c:	2300      	movs	r3, #0
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	0801c2dc 	.word	0x0801c2dc
 800b7ac:	0801c394 	.word	0x0801c394
 800b7b0:	0801c32c 	.word	0x0801c32c

0800b7b4 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	db02      	blt.n	800b7cc <tryget_socket_unconn_nouse+0x18>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	dd01      	ble.n	800b7d0 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	e003      	b.n	800b7d8 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	011b      	lsls	r3, r3, #4
 800b7d4:	4a03      	ldr	r2, [pc, #12]	; (800b7e4 <tryget_socket_unconn_nouse+0x30>)
 800b7d6:	4413      	add	r3, r2
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	20011544 	.word	0x20011544

0800b7e8 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f7ff ffdf 	bl	800b7b4 <tryget_socket_unconn_nouse>
 800b7f6:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7ff ffec 	bl	800b7e8 <tryget_socket_unconn>
 800b810:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d005      	beq.n	800b824 <tryget_socket+0x22>
    if (sock->conn) {
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <tryget_socket+0x22>
      return sock;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	e000      	b.n	800b826 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800b824:	2300      	movs	r3, #0
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
	...

0800b830 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff ffe2 	bl	800b802 <tryget_socket>
 800b83e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d104      	bne.n	800b850 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800b846:	4b05      	ldr	r3, [pc, #20]	; (800b85c <get_socket+0x2c>)
 800b848:	2209      	movs	r2, #9
 800b84a:	601a      	str	r2, [r3, #0]
    return NULL;
 800b84c:	2300      	movs	r3, #0
 800b84e:	e000      	b.n	800b852 <get_socket+0x22>
  }
  return sock;
 800b850:	68fb      	ldr	r3, [r7, #12]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop
 800b85c:	2001857c 	.word	0x2001857c

0800b860 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b86a:	2300      	movs	r3, #0
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	e052      	b.n	800b916 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800b870:	f00c ff9a 	bl	80187a8 <sys_arch_protect>
 800b874:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800b876:	4a2c      	ldr	r2, [pc, #176]	; (800b928 <alloc_socket+0xc8>)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	011b      	lsls	r3, r3, #4
 800b87c:	4413      	add	r3, r2
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d142      	bne.n	800b90a <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800b884:	4a28      	ldr	r2, [pc, #160]	; (800b928 <alloc_socket+0xc8>)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	011b      	lsls	r3, r3, #4
 800b88a:	4413      	add	r3, r2
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800b890:	68b8      	ldr	r0, [r7, #8]
 800b892:	f00c ff97 	bl	80187c4 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800b896:	4a24      	ldr	r2, [pc, #144]	; (800b928 <alloc_socket+0xc8>)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	011b      	lsls	r3, r3, #4
 800b89c:	4413      	add	r3, r2
 800b89e:	3304      	adds	r3, #4
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800b8a4:	4a20      	ldr	r2, [pc, #128]	; (800b928 <alloc_socket+0xc8>)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	011b      	lsls	r3, r3, #4
 800b8aa:	4413      	add	r3, r2
 800b8ac:	330e      	adds	r3, #14
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d006      	beq.n	800b8c2 <alloc_socket+0x62>
 800b8b4:	4b1d      	ldr	r3, [pc, #116]	; (800b92c <alloc_socket+0xcc>)
 800b8b6:	f240 220e 	movw	r2, #526	; 0x20e
 800b8ba:	491d      	ldr	r1, [pc, #116]	; (800b930 <alloc_socket+0xd0>)
 800b8bc:	481d      	ldr	r0, [pc, #116]	; (800b934 <alloc_socket+0xd4>)
 800b8be:	f00f fa3d 	bl	801ad3c <iprintf>
      sockets[i].rcvevent   = 0;
 800b8c2:	4a19      	ldr	r2, [pc, #100]	; (800b928 <alloc_socket+0xc8>)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	011b      	lsls	r3, r3, #4
 800b8c8:	4413      	add	r3, r2
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8d8:	2b10      	cmp	r3, #16
 800b8da:	d102      	bne.n	800b8e2 <alloc_socket+0x82>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d001      	beq.n	800b8e6 <alloc_socket+0x86>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e000      	b.n	800b8e8 <alloc_socket+0x88>
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	b299      	uxth	r1, r3
 800b8ea:	4a0f      	ldr	r2, [pc, #60]	; (800b928 <alloc_socket+0xc8>)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	4413      	add	r3, r2
 800b8f2:	330a      	adds	r3, #10
 800b8f4:	460a      	mov	r2, r1
 800b8f6:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800b8f8:	4a0b      	ldr	r2, [pc, #44]	; (800b928 <alloc_socket+0xc8>)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	011b      	lsls	r3, r3, #4
 800b8fe:	4413      	add	r3, r2
 800b900:	330c      	adds	r3, #12
 800b902:	2200      	movs	r2, #0
 800b904:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	e00a      	b.n	800b920 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800b90a:	68b8      	ldr	r0, [r7, #8]
 800b90c:	f00c ff5a 	bl	80187c4 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3301      	adds	r3, #1
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b03      	cmp	r3, #3
 800b91a:	dda9      	ble.n	800b870 <alloc_socket+0x10>
  }
  return -1;
 800b91c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20011544 	.word	0x20011544
 800b92c:	0801c474 	.word	0x0801c474
 800b930:	0801c4a8 	.word	0x0801c4a8
 800b934:	0801c4c8 	.word	0x0801c4c8

0800b938 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	6852      	ldr	r2, [r2, #4]
 800b94c:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]
  return 1;
 800b962:	2301      	movs	r3, #1
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d00d      	beq.n	800b9a0 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d005      	beq.n	800b996 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4618      	mov	r0, r3
 800b990:	f003 f86c 	bl	800ea6c <pbuf_free>
 800b994:	e004      	b.n	800b9a0 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7ff fe78 	bl	800b690 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d002      	beq.n	800b9ac <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800b9a6:	68b8      	ldr	r0, [r7, #8]
 800b9a8:	f7fd fd04 	bl	80093b4 <netconn_delete>
  }
}
 800b9ac:	bf00      	nop
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800b9be:	f00c fef3 	bl	80187a8 <sys_arch_protect>
 800b9c2:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800b9c4:	f107 0308 	add.w	r3, r7, #8
 800b9c8:	f107 020c 	add.w	r2, r7, #12
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff ffb2 	bl	800b938 <free_socket_locked>
 800b9d4:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800b9d6:	6978      	ldr	r0, [r7, #20]
 800b9d8:	f00c fef4 	bl	80187c4 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d006      	beq.n	800b9f0 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f107 0208 	add.w	r2, r7, #8
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	6838      	ldr	r0, [r7, #0]
 800b9ec:	f7ff ffc0 	bl	800b970 <free_socket_free_elements>
  }
}
 800b9f0:	bf00      	nop
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800b9f8:	b590      	push	{r4, r7, lr}
 800b9fa:	b099      	sub	sp, #100	; 0x64
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f7ff ff11 	bl	800b830 <get_socket>
 800ba0e:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800ba10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d102      	bne.n	800ba1c <lwip_accept+0x24>
    return -1;
 800ba16:	f04f 33ff 	mov.w	r3, #4294967295
 800ba1a:	e0f8      	b.n	800bc0e <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800ba1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800ba24:	4611      	mov	r1, r2
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fd fd96 	bl	8009558 <netconn_accept>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800ba32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d02c      	beq.n	800ba94 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ba3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba44:	2b10      	cmp	r3, #16
 800ba46:	d008      	beq.n	800ba5a <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800ba48:	235f      	movs	r3, #95	; 0x5f
 800ba4a:	633b      	str	r3, [r7, #48]	; 0x30
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d01d      	beq.n	800ba8e <lwip_accept+0x96>
 800ba52:	4a71      	ldr	r2, [pc, #452]	; (800bc18 <lwip_accept+0x220>)
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	6013      	str	r3, [r2, #0]
 800ba58:	e019      	b.n	800ba8e <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800ba5a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba5e:	f113 0f0f 	cmn.w	r3, #15
 800ba62:	d108      	bne.n	800ba76 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800ba64:	2316      	movs	r3, #22
 800ba66:	637b      	str	r3, [r7, #52]	; 0x34
 800ba68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00f      	beq.n	800ba8e <lwip_accept+0x96>
 800ba6e:	4a6a      	ldr	r2, [pc, #424]	; (800bc18 <lwip_accept+0x220>)
 800ba70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba72:	6013      	str	r3, [r2, #0]
 800ba74:	e00b      	b.n	800ba8e <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800ba76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7ff fdea 	bl	800b654 <err_to_errno>
 800ba80:	63b8      	str	r0, [r7, #56]	; 0x38
 800ba82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <lwip_accept+0x96>
 800ba88:	4a63      	ldr	r2, [pc, #396]	; (800bc18 <lwip_accept+0x220>)
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800ba8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba92:	e0bc      	b.n	800bc0e <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800ba94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d106      	bne.n	800baa8 <lwip_accept+0xb0>
 800ba9a:	4b60      	ldr	r3, [pc, #384]	; (800bc1c <lwip_accept+0x224>)
 800ba9c:	f240 228b 	movw	r2, #651	; 0x28b
 800baa0:	495f      	ldr	r1, [pc, #380]	; (800bc20 <lwip_accept+0x228>)
 800baa2:	4860      	ldr	r0, [pc, #384]	; (800bc24 <lwip_accept+0x22c>)
 800baa4:	f00f f94a 	bl	801ad3c <iprintf>

  newsock = alloc_socket(newconn, 1);
 800baa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baaa:	2101      	movs	r1, #1
 800baac:	4618      	mov	r0, r3
 800baae:	f7ff fed7 	bl	800b860 <alloc_socket>
 800bab2:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800bab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baba:	d10e      	bne.n	800bada <lwip_accept+0xe2>
    netconn_delete(newconn);
 800babc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fd fc78 	bl	80093b4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800bac4:	2317      	movs	r3, #23
 800bac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d002      	beq.n	800bad4 <lwip_accept+0xdc>
 800bace:	4a52      	ldr	r2, [pc, #328]	; (800bc18 <lwip_accept+0x220>)
 800bad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bad4:	f04f 33ff 	mov.w	r3, #4294967295
 800bad8:	e099      	b.n	800bc0e <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800bada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800badc:	2b00      	cmp	r3, #0
 800bade:	db02      	blt.n	800bae6 <lwip_accept+0xee>
 800bae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	dd06      	ble.n	800baf4 <lwip_accept+0xfc>
 800bae6:	4b4d      	ldr	r3, [pc, #308]	; (800bc1c <lwip_accept+0x224>)
 800bae8:	f44f 7225 	mov.w	r2, #660	; 0x294
 800baec:	494e      	ldr	r1, [pc, #312]	; (800bc28 <lwip_accept+0x230>)
 800baee:	484d      	ldr	r0, [pc, #308]	; (800bc24 <lwip_accept+0x22c>)
 800baf0:	f00f f924 	bl	801ad3c <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800baf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baf6:	011b      	lsls	r3, r3, #4
 800baf8:	4a4c      	ldr	r2, [pc, #304]	; (800bc2c <lwip_accept+0x234>)
 800bafa:	4413      	add	r3, r2
 800bafc:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800bafe:	f00c fe53 	bl	80187a8 <sys_arch_protect>
 800bb02:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800bb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb06:	699b      	ldr	r3, [r3, #24]
 800bb08:	b21b      	sxth	r3, r3
 800bb0a:	43db      	mvns	r3, r3
 800bb0c:	b21b      	sxth	r3, r3
 800bb0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800bb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb14:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800bb16:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bb18:	f00c fe54 	bl	80187c4 <sys_arch_unprotect>

  if (newconn->callback) {
 800bb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d012      	beq.n	800bb4a <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800bb24:	4842      	ldr	r0, [pc, #264]	; (800bc30 <lwip_accept+0x238>)
 800bb26:	f00c fe03 	bl	8018730 <sys_mutex_lock>
    while (recvevent > 0) {
 800bb2a:	e008      	b.n	800bb3e <lwip_accept+0x146>
      recvevent--;
 800bb2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800bb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb38:	2200      	movs	r2, #0
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	4798      	blx	r3
    while (recvevent > 0) {
 800bb3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	dcf3      	bgt.n	800bb2c <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800bb44:	483a      	ldr	r0, [pc, #232]	; (800bc30 <lwip_accept+0x238>)
 800bb46:	f00c fe02 	bl	801874e <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d055      	beq.n	800bbfc <lwip_accept+0x204>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d052      	beq.n	800bbfc <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800bb56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb58:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800bb5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bb60:	2300      	movs	r3, #0
 800bb62:	f7fd fc43 	bl	80093ec <netconn_getaddr>
 800bb66:	4603      	mov	r3, r0
 800bb68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800bb6c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d016      	beq.n	800bba2 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fd fc1c 	bl	80093b4 <netconn_delete>
      free_socket(nsock, 1);
 800bb7c:	2101      	movs	r1, #1
 800bb7e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bb80:	f7ff ff18 	bl	800b9b4 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800bb84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7ff fd63 	bl	800b654 <err_to_errno>
 800bb8e:	6478      	str	r0, [r7, #68]	; 0x44
 800bb90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d002      	beq.n	800bb9c <lwip_accept+0x1a4>
 800bb96:	4a20      	ldr	r2, [pc, #128]	; (800bc18 <lwip_accept+0x220>)
 800bb98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb9a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800bb9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bba0:	e035      	b.n	800bc0e <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800bba2:	f107 0314 	add.w	r3, r7, #20
 800bba6:	2210      	movs	r2, #16
 800bba8:	701a      	strb	r2, [r3, #0]
 800bbaa:	f107 0314 	add.w	r3, r7, #20
 800bbae:	2202      	movs	r2, #2
 800bbb0:	705a      	strb	r2, [r3, #1]
 800bbb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bbb4:	f107 0414 	add.w	r4, r7, #20
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f001 fb41 	bl	800d240 <lwip_htons>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	8063      	strh	r3, [r4, #2]
 800bbc2:	f107 0314 	add.w	r3, r7, #20
 800bbc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbc8:	605a      	str	r2, [r3, #4]
 800bbca:	f107 0314 	add.w	r3, r7, #20
 800bbce:	3308      	adds	r3, #8
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	2100      	movs	r1, #0
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f00e fd11 	bl	801a5fc <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	7d3a      	ldrb	r2, [r7, #20]
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d903      	bls.n	800bbec <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800bbe4:	7d3b      	ldrb	r3, [r7, #20]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	f107 0314 	add.w	r3, r7, #20
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	68b8      	ldr	r0, [r7, #8]
 800bbf8:	f00e fcd8 	bl	801a5ac <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	643b      	str	r3, [r7, #64]	; 0x40
 800bc00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d002      	beq.n	800bc0c <lwip_accept+0x214>
 800bc06:	4a04      	ldr	r2, [pc, #16]	; (800bc18 <lwip_accept+0x220>)
 800bc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc0a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800bc0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3764      	adds	r7, #100	; 0x64
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd90      	pop	{r4, r7, pc}
 800bc16:	bf00      	nop
 800bc18:	2001857c 	.word	0x2001857c
 800bc1c:	0801c474 	.word	0x0801c474
 800bc20:	0801c4f0 	.word	0x0801c4f0
 800bc24:	0801c4c8 	.word	0x0801c4c8
 800bc28:	0801c500 	.word	0x0801c500
 800bc2c:	20011544 	.word	0x20011544
 800bc30:	20014e48 	.word	0x20014e48

0800bc34 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08a      	sub	sp, #40	; 0x28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800bc40:	68f8      	ldr	r0, [r7, #12]
 800bc42:	f7ff fdf5 	bl	800b830 <get_socket>
 800bc46:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d102      	bne.n	800bc54 <lwip_bind+0x20>
    return -1;
 800bc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800bc52:	e051      	b.n	800bcf8 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b10      	cmp	r3, #16
 800bc58:	d108      	bne.n	800bc6c <lwip_bind+0x38>
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	785b      	ldrb	r3, [r3, #1]
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d104      	bne.n	800bc6c <lwip_bind+0x38>
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	f003 0303 	and.w	r3, r3, #3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d014      	beq.n	800bc96 <lwip_bind+0x62>
 800bc6c:	4b24      	ldr	r3, [pc, #144]	; (800bd00 <lwip_bind+0xcc>)
 800bc6e:	f240 22e2 	movw	r2, #738	; 0x2e2
 800bc72:	4924      	ldr	r1, [pc, #144]	; (800bd04 <lwip_bind+0xd0>)
 800bc74:	4824      	ldr	r0, [pc, #144]	; (800bd08 <lwip_bind+0xd4>)
 800bc76:	f00f f861 	bl	801ad3c <iprintf>
 800bc7a:	f06f 000f 	mvn.w	r0, #15
 800bc7e:	f7ff fce9 	bl	800b654 <err_to_errno>
 800bc82:	6178      	str	r0, [r7, #20]
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d002      	beq.n	800bc90 <lwip_bind+0x5c>
 800bc8a:	4a20      	ldr	r2, [pc, #128]	; (800bd0c <lwip_bind+0xd8>)
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	6013      	str	r3, [r2, #0]
 800bc90:	f04f 33ff 	mov.w	r3, #4294967295
 800bc94:	e030      	b.n	800bcf8 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	613b      	str	r3, [r7, #16]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	885b      	ldrh	r3, [r3, #2]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f001 facd 	bl	800d240 <lwip_htons>
 800bca6:	4603      	mov	r3, r0
 800bca8:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bcb0:	f107 0110 	add.w	r1, r7, #16
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7fd fbeb 	bl	8009490 <netconn_bind>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800bcc0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00e      	beq.n	800bce6 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800bcc8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff fcc1 	bl	800b654 <err_to_errno>
 800bcd2:	61b8      	str	r0, [r7, #24]
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d002      	beq.n	800bce0 <lwip_bind+0xac>
 800bcda:	4a0c      	ldr	r2, [pc, #48]	; (800bd0c <lwip_bind+0xd8>)
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bce0:	f04f 33ff 	mov.w	r3, #4294967295
 800bce4:	e008      	b.n	800bcf8 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800bce6:	2300      	movs	r3, #0
 800bce8:	61fb      	str	r3, [r7, #28]
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <lwip_bind+0xc2>
 800bcf0:	4a06      	ldr	r2, [pc, #24]	; (800bd0c <lwip_bind+0xd8>)
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3728      	adds	r7, #40	; 0x28
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	0801c474 	.word	0x0801c474
 800bd04:	0801c518 	.word	0x0801c518
 800bd08:	0801c4c8 	.word	0x0801c4c8
 800bd0c:	2001857c 	.word	0x2001857c

0800bd10 <lwip_close>:

int
lwip_close(int s)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff fd87 	bl	800b830 <get_socket>
 800bd22:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d102      	bne.n	800bd30 <lwip_close+0x20>
    return -1;
 800bd2a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd2e:	e039      	b.n	800bda4 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00b      	beq.n	800bd50 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd42:	2b10      	cmp	r3, #16
 800bd44:	bf0c      	ite	eq
 800bd46:	2301      	moveq	r3, #1
 800bd48:	2300      	movne	r3, #0
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	617b      	str	r3, [r7, #20]
 800bd4e:	e00a      	b.n	800bd66 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d006      	beq.n	800bd66 <lwip_close+0x56>
 800bd58:	4b14      	ldr	r3, [pc, #80]	; (800bdac <lwip_close+0x9c>)
 800bd5a:	f44f 7245 	mov.w	r2, #788	; 0x314
 800bd5e:	4914      	ldr	r1, [pc, #80]	; (800bdb0 <lwip_close+0xa0>)
 800bd60:	4814      	ldr	r0, [pc, #80]	; (800bdb4 <lwip_close+0xa4>)
 800bd62:	f00e ffeb 	bl	801ad3c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fd fafe 	bl	800936c <netconn_prepare_delete>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bd74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00e      	beq.n	800bd9a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800bd7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff fc67 	bl	800b654 <err_to_errno>
 800bd86:	60b8      	str	r0, [r7, #8]
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d002      	beq.n	800bd94 <lwip_close+0x84>
 800bd8e:	4a0a      	ldr	r2, [pc, #40]	; (800bdb8 <lwip_close+0xa8>)
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295
 800bd98:	e004      	b.n	800bda4 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800bd9a:	6979      	ldr	r1, [r7, #20]
 800bd9c:	6938      	ldr	r0, [r7, #16]
 800bd9e:	f7ff fe09 	bl	800b9b4 <free_socket>
  set_errno(0);
  return 0;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	0801c474 	.word	0x0801c474
 800bdb0:	0801c534 	.word	0x0801c534
 800bdb4:	0801c4c8 	.word	0x0801c4c8
 800bdb8:	2001857c 	.word	0x2001857c

0800bdbc <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b088      	sub	sp, #32
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7ff fd32 	bl	800b830 <get_socket>
 800bdcc:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d102      	bne.n	800bdda <lwip_listen+0x1e>
    return -1;
 800bdd4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd8:	e03e      	b.n	800be58 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	2bfe      	cmp	r3, #254	; 0xfe
 800bdde:	dc03      	bgt.n	800bde8 <lwip_listen+0x2c>
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bde6:	e000      	b.n	800bdea <lwip_listen+0x2e>
 800bde8:	23ff      	movs	r3, #255	; 0xff
 800bdea:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	683a      	ldr	r2, [r7, #0]
 800bdf2:	b2d2      	uxtb	r2, r2
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fd fb82 	bl	8009500 <netconn_listen_with_backlog>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800be00:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d01e      	beq.n	800be46 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be12:	2b10      	cmp	r3, #16
 800be14:	d008      	beq.n	800be28 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800be16:	235f      	movs	r3, #95	; 0x5f
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00f      	beq.n	800be40 <lwip_listen+0x84>
 800be20:	4a0f      	ldr	r2, [pc, #60]	; (800be60 <lwip_listen+0xa4>)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6013      	str	r3, [r2, #0]
 800be26:	e00b      	b.n	800be40 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800be28:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7ff fc11 	bl	800b654 <err_to_errno>
 800be32:	6138      	str	r0, [r7, #16]
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d002      	beq.n	800be40 <lwip_listen+0x84>
 800be3a:	4a09      	ldr	r2, [pc, #36]	; (800be60 <lwip_listen+0xa4>)
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800be40:	f04f 33ff 	mov.w	r3, #4294967295
 800be44:	e008      	b.n	800be58 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800be46:	2300      	movs	r3, #0
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <lwip_listen+0x9a>
 800be50:	4a03      	ldr	r2, [pc, #12]	; (800be60 <lwip_listen+0xa4>)
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3720      	adds	r7, #32
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	2001857c 	.word	0x2001857c

0800be64 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b08c      	sub	sp, #48	; 0x30
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]
 800be70:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800be72:	2308      	movs	r3, #8
 800be74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800be78:	2300      	movs	r3, #0
 800be7a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	db01      	blt.n	800be86 <lwip_recv_tcp+0x22>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	e001      	b.n	800be8a <lwip_recv_tcp+0x26>
 800be86:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800be8a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d106      	bne.n	800bea0 <lwip_recv_tcp+0x3c>
 800be92:	4b74      	ldr	r3, [pc, #464]	; (800c064 <lwip_recv_tcp+0x200>)
 800be94:	f240 329e 	movw	r2, #926	; 0x39e
 800be98:	4973      	ldr	r1, [pc, #460]	; (800c068 <lwip_recv_tcp+0x204>)
 800be9a:	4874      	ldr	r0, [pc, #464]	; (800c06c <lwip_recv_tcp+0x208>)
 800be9c:	f00e ff4e 	bl	801ad3c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800beaa:	2b10      	cmp	r3, #16
 800beac:	d006      	beq.n	800bebc <lwip_recv_tcp+0x58>
 800beae:	4b6d      	ldr	r3, [pc, #436]	; (800c064 <lwip_recv_tcp+0x200>)
 800beb0:	f240 329f 	movw	r2, #927	; 0x39f
 800beb4:	496e      	ldr	r1, [pc, #440]	; (800c070 <lwip_recv_tcp+0x20c>)
 800beb6:	486d      	ldr	r0, [pc, #436]	; (800c06c <lwip_recv_tcp+0x208>)
 800beb8:	f00e ff40 	bl	801ad3c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	f003 0308 	and.w	r3, r3, #8
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d005      	beq.n	800bed2 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800bec6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800beca:	f043 0304 	orr.w	r3, r3, #4
 800bece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	617b      	str	r3, [r7, #20]
 800bee0:	e036      	b.n	800bf50 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800beea:	f107 0114 	add.w	r1, r7, #20
 800beee:	4618      	mov	r0, r3
 800bef0:	f7fd fd68 	bl	80099c4 <netconn_recv_tcp_pbuf_flags>
 800bef4:	4603      	mov	r3, r0
 800bef6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800befa:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d019      	beq.n	800bf36 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800bf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f300 808d 	bgt.w	800c024 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800bf0a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7ff fba0 	bl	800b654 <err_to_errno>
 800bf14:	61f8      	str	r0, [r7, #28]
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <lwip_recv_tcp+0xbe>
 800bf1c:	4a55      	ldr	r2, [pc, #340]	; (800c074 <lwip_recv_tcp+0x210>)
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800bf22:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bf26:	f113 0f0f 	cmn.w	r3, #15
 800bf2a:	d101      	bne.n	800bf30 <lwip_recv_tcp+0xcc>
          return 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	e094      	b.n	800c05a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800bf30:	f04f 33ff 	mov.w	r3, #4294967295
 800bf34:	e091      	b.n	800c05a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d106      	bne.n	800bf4a <lwip_recv_tcp+0xe6>
 800bf3c:	4b49      	ldr	r3, [pc, #292]	; (800c064 <lwip_recv_tcp+0x200>)
 800bf3e:	f240 32c5 	movw	r2, #965	; 0x3c5
 800bf42:	494d      	ldr	r1, [pc, #308]	; (800c078 <lwip_recv_tcp+0x214>)
 800bf44:	4849      	ldr	r0, [pc, #292]	; (800c06c <lwip_recv_tcp+0x208>)
 800bf46:	f00e fef9 	bl	801ad3c <iprintf>
      sock->lastdata.pbuf = p;
 800bf4a:	697a      	ldr	r2, [r7, #20]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	891b      	ldrh	r3, [r3, #8]
 800bf54:	461a      	mov	r2, r3
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	dd03      	ble.n	800bf64 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	891b      	ldrh	r3, [r3, #8]
 800bf60:	847b      	strh	r3, [r7, #34]	; 0x22
 800bf62:	e001      	b.n	800bf68 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800bf68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	4413      	add	r3, r2
 800bf6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf70:	429a      	cmp	r2, r3
 800bf72:	dd03      	ble.n	800bf7c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800bf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	43db      	mvns	r3, r3
 800bf7a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800bf7c:	6978      	ldr	r0, [r7, #20]
 800bf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	18d1      	adds	r1, r2, r3
 800bf84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bf86:	2300      	movs	r3, #0
 800bf88:	f002 ff76 	bl	800ee78 <pbuf_copy_partial>

    recvd += copylen;
 800bf8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf90:	4413      	add	r3, r2
 800bf92:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800bf94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	da06      	bge.n	800bfaa <lwip_recv_tcp+0x146>
 800bf9c:	4b31      	ldr	r3, [pc, #196]	; (800c064 <lwip_recv_tcp+0x200>)
 800bf9e:	f240 32dd 	movw	r2, #989	; 0x3dd
 800bfa2:	4936      	ldr	r1, [pc, #216]	; (800c07c <lwip_recv_tcp+0x218>)
 800bfa4:	4831      	ldr	r0, [pc, #196]	; (800c06c <lwip_recv_tcp+0x208>)
 800bfa6:	f00e fec9 	bl	801ad3c <iprintf>
    recv_left -= copylen;
 800bfaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bfac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d123      	bne.n	800c004 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	891b      	ldrh	r3, [r3, #8]
 800bfc0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d906      	bls.n	800bfd4 <lwip_recv_tcp+0x170>
 800bfc6:	4b27      	ldr	r3, [pc, #156]	; (800c064 <lwip_recv_tcp+0x200>)
 800bfc8:	f240 32e3 	movw	r2, #995	; 0x3e3
 800bfcc:	492c      	ldr	r1, [pc, #176]	; (800c080 <lwip_recv_tcp+0x21c>)
 800bfce:	4827      	ldr	r0, [pc, #156]	; (800c06c <lwip_recv_tcp+0x208>)
 800bfd0:	f00e feb4 	bl	801ad3c <iprintf>
      if (p->tot_len - copylen > 0) {
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	891b      	ldrh	r3, [r3, #8]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	dd09      	ble.n	800bff6 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f002 fd0c 	bl	800ea06 <pbuf_free_header>
 800bfee:	4602      	mov	r2, r0
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	605a      	str	r2, [r3, #4]
 800bff4:	e006      	b.n	800c004 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2200      	movs	r2, #0
 800bffa:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	4618      	mov	r0, r3
 800c000:	f002 fd34 	bl	800ea6c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800c004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c008:	f043 0314 	orr.w	r3, r3, #20
 800c00c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	2b00      	cmp	r3, #0
 800c014:	dd08      	ble.n	800c028 <lwip_recv_tcp+0x1c4>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	f003 0301 	and.w	r3, r3, #1
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f43f af58 	beq.w	800bed2 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800c022:	e001      	b.n	800c028 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800c024:	bf00      	nop
 800c026:	e000      	b.n	800c02a <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800c028:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800c02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	dd0b      	ble.n	800c048 <lwip_recv_tcp+0x1e4>
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	f003 0301 	and.w	r3, r3, #1
 800c036:	2b00      	cmp	r3, #0
 800c038:	d106      	bne.n	800c048 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f7fd fc0c 	bl	8009860 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800c048:	2300      	movs	r3, #0
 800c04a:	61bb      	str	r3, [r7, #24]
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d002      	beq.n	800c058 <lwip_recv_tcp+0x1f4>
 800c052:	4a08      	ldr	r2, [pc, #32]	; (800c074 <lwip_recv_tcp+0x210>)
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	6013      	str	r3, [r2, #0]
  return recvd;
 800c058:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3730      	adds	r7, #48	; 0x30
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	0801c474 	.word	0x0801c474
 800c068:	0801c56c 	.word	0x0801c56c
 800c06c:	0801c4c8 	.word	0x0801c4c8
 800c070:	0801c57c 	.word	0x0801c57c
 800c074:	2001857c 	.word	0x2001857c
 800c078:	0801c5a0 	.word	0x0801c5a0
 800c07c:	0801c5ac 	.word	0x0801c5ac
 800c080:	0801c5d4 	.word	0x0801c5d4

0800c084 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800c084:	b590      	push	{r4, r7, lr}
 800c086:	b08b      	sub	sp, #44	; 0x2c
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	603b      	str	r3, [r7, #0]
 800c090:	4613      	mov	r3, r2
 800c092:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d106      	bne.n	800c0ac <lwip_sock_make_addr+0x28>
 800c09e:	4b2b      	ldr	r3, [pc, #172]	; (800c14c <lwip_sock_make_addr+0xc8>)
 800c0a0:	f240 4207 	movw	r2, #1031	; 0x407
 800c0a4:	492a      	ldr	r1, [pc, #168]	; (800c150 <lwip_sock_make_addr+0xcc>)
 800c0a6:	482b      	ldr	r0, [pc, #172]	; (800c154 <lwip_sock_make_addr+0xd0>)
 800c0a8:	f00e fe48 	bl	801ad3c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d106      	bne.n	800c0c0 <lwip_sock_make_addr+0x3c>
 800c0b2:	4b26      	ldr	r3, [pc, #152]	; (800c14c <lwip_sock_make_addr+0xc8>)
 800c0b4:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c0b8:	4927      	ldr	r1, [pc, #156]	; (800c158 <lwip_sock_make_addr+0xd4>)
 800c0ba:	4826      	ldr	r0, [pc, #152]	; (800c154 <lwip_sock_make_addr+0xd0>)
 800c0bc:	f00e fe3e 	bl	801ad3c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d106      	bne.n	800c0d4 <lwip_sock_make_addr+0x50>
 800c0c6:	4b21      	ldr	r3, [pc, #132]	; (800c14c <lwip_sock_make_addr+0xc8>)
 800c0c8:	f240 4209 	movw	r2, #1033	; 0x409
 800c0cc:	4923      	ldr	r1, [pc, #140]	; (800c15c <lwip_sock_make_addr+0xd8>)
 800c0ce:	4821      	ldr	r0, [pc, #132]	; (800c154 <lwip_sock_make_addr+0xd0>)
 800c0d0:	f00e fe34 	bl	801ad3c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800c0d4:	f107 0314 	add.w	r3, r7, #20
 800c0d8:	2210      	movs	r2, #16
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	f107 0314 	add.w	r3, r7, #20
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	705a      	strb	r2, [r3, #1]
 800c0e4:	f107 0414 	add.w	r4, r7, #20
 800c0e8:	88fb      	ldrh	r3, [r7, #6]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f001 f8a8 	bl	800d240 <lwip_htons>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	8063      	strh	r3, [r4, #2]
 800c0f4:	f107 0314 	add.w	r3, r7, #20
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	6812      	ldr	r2, [r2, #0]
 800c0fc:	605a      	str	r2, [r3, #4]
 800c0fe:	f107 0314 	add.w	r3, r7, #20
 800c102:	3308      	adds	r3, #8
 800c104:	2208      	movs	r2, #8
 800c106:	2100      	movs	r1, #0
 800c108:	4618      	mov	r0, r3
 800c10a:	f00e fa77 	bl	801a5fc <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	7d3a      	ldrb	r2, [r7, #20]
 800c114:	4293      	cmp	r3, r2
 800c116:	d202      	bcs.n	800c11e <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800c118:	2301      	movs	r3, #1
 800c11a:	627b      	str	r3, [r7, #36]	; 0x24
 800c11c:	e008      	b.n	800c130 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800c11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	7d3a      	ldrb	r2, [r7, #20]
 800c124:	4293      	cmp	r3, r2
 800c126:	d903      	bls.n	800c130 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800c128:	7d3b      	ldrb	r3, [r7, #20]
 800c12a:	461a      	mov	r2, r3
 800c12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12e:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800c130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c132:	681a      	ldr	r2, [r3, #0]
 800c134:	f107 0314 	add.w	r3, r7, #20
 800c138:	4619      	mov	r1, r3
 800c13a:	6838      	ldr	r0, [r7, #0]
 800c13c:	f00e fa36 	bl	801a5ac <memcpy>
  return truncated;
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c142:	4618      	mov	r0, r3
 800c144:	372c      	adds	r7, #44	; 0x2c
 800c146:	46bd      	mov	sp, r7
 800c148:	bd90      	pop	{r4, r7, pc}
 800c14a:	bf00      	nop
 800c14c:	0801c474 	.word	0x0801c474
 800c150:	0801c5e4 	.word	0x0801c5e4
 800c154:	0801c4c8 	.word	0x0801c4c8
 800c158:	0801c5f8 	.word	0x0801c5f8
 800c15c:	0801c608 	.word	0x0801c608

0800c160 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b088      	sub	sp, #32
 800c164:	af02      	add	r7, sp, #8
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
 800c16c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d101      	bne.n	800c178 <lwip_recv_tcp_from+0x18>
    return 0;
 800c174:	2300      	movs	r3, #0
 800c176:	e021      	b.n	800c1bc <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d01d      	beq.n	800c1ba <lwip_recv_tcp_from+0x5a>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d01a      	beq.n	800c1ba <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6818      	ldr	r0, [r3, #0]
 800c188:	f107 0216 	add.w	r2, r7, #22
 800c18c:	f107 0110 	add.w	r1, r7, #16
 800c190:	2300      	movs	r3, #0
 800c192:	f7fd f92b 	bl	80093ec <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00e      	beq.n	800c1ba <lwip_recv_tcp_from+0x5a>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00b      	beq.n	800c1ba <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6818      	ldr	r0, [r3, #0]
 800c1a6:	8afa      	ldrh	r2, [r7, #22]
 800c1a8:	f107 0110 	add.w	r1, r7, #16
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	f7ff ff67 	bl	800c084 <lwip_sock_make_addr>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	e000      	b.n	800c1bc <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800c1c4:	b590      	push	{r4, r7, lr}
 800c1c6:	b08d      	sub	sp, #52	; 0x34
 800c1c8:	af02      	add	r7, sp, #8
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10d      	bne.n	800c1f6 <lwip_recvfrom_udp_raw+0x32>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	dd09      	ble.n	800c1f6 <lwip_recvfrom_udp_raw+0x32>
 800c1e2:	4b5e      	ldr	r3, [pc, #376]	; (800c35c <lwip_recvfrom_udp_raw+0x198>)
 800c1e4:	f240 4249 	movw	r2, #1097	; 0x449
 800c1e8:	495d      	ldr	r1, [pc, #372]	; (800c360 <lwip_recvfrom_udp_raw+0x19c>)
 800c1ea:	485e      	ldr	r0, [pc, #376]	; (800c364 <lwip_recvfrom_udp_raw+0x1a0>)
 800c1ec:	f00e fda6 	bl	801ad3c <iprintf>
 800c1f0:	f06f 030f 	mvn.w	r3, #15
 800c1f4:	e0ad      	b.n	800c352 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	f003 0308 	and.w	r3, r3, #8
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d003      	beq.n	800c208 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800c200:	2304      	movs	r3, #4
 800c202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c206:	e002      	b.n	800c20e <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d11e      	bne.n	800c258 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c222:	f107 0110 	add.w	r1, r7, #16
 800c226:	4618      	mov	r0, r3
 800c228:	f7fd fbf8 	bl	8009a1c <netconn_recv_udp_raw_netbuf_flags>
 800c22c:	4603      	mov	r3, r0
 800c22e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800c230:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800c238:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c23c:	e089      	b.n	800c352 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d106      	bne.n	800c252 <lwip_recvfrom_udp_raw+0x8e>
 800c244:	4b45      	ldr	r3, [pc, #276]	; (800c35c <lwip_recvfrom_udp_raw+0x198>)
 800c246:	f240 425e 	movw	r2, #1118	; 0x45e
 800c24a:	4947      	ldr	r1, [pc, #284]	; (800c368 <lwip_recvfrom_udp_raw+0x1a4>)
 800c24c:	4845      	ldr	r0, [pc, #276]	; (800c364 <lwip_recvfrom_udp_raw+0x1a0>)
 800c24e:	f00e fd75 	bl	801ad3c <iprintf>
    sock->lastdata.netbuf = buf;
 800c252:	693a      	ldr	r2, [r7, #16]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	891b      	ldrh	r3, [r3, #8]
 800c25e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c264:	2300      	movs	r3, #0
 800c266:	61fb      	str	r3, [r7, #28]
 800c268:	e029      	b.n	800c2be <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800c26a:	8b3a      	ldrh	r2, [r7, #24]
 800c26c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	689a      	ldr	r2, [r3, #8]
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	00db      	lsls	r3, r3, #3
 800c27a:	4413      	add	r3, r2
 800c27c:	685a      	ldr	r2, [r3, #4]
 800c27e:	8afb      	ldrh	r3, [r7, #22]
 800c280:	429a      	cmp	r2, r3
 800c282:	d902      	bls.n	800c28a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800c284:	8afb      	ldrh	r3, [r7, #22]
 800c286:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c288:	e006      	b.n	800c298 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	689a      	ldr	r2, [r3, #8]
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	00db      	lsls	r3, r3, #3
 800c292:	4413      	add	r3, r2
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	6818      	ldr	r0, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	689a      	ldr	r2, [r3, #8]
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	00db      	lsls	r3, r3, #3
 800c2a4:	4413      	add	r3, r2
 800c2a6:	6819      	ldr	r1, [r3, #0]
 800c2a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c2ac:	f002 fde4 	bl	800ee78 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800c2b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2b4:	4413      	add	r3, r2
 800c2b6:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	61fb      	str	r3, [r7, #28]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	69fa      	ldr	r2, [r7, #28]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	da03      	bge.n	800c2d0 <lwip_recvfrom_udp_raw+0x10c>
 800c2c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c2ca:	8b3b      	ldrh	r3, [r7, #24]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d3cc      	bcc.n	800c26a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d01a      	beq.n	800c30e <lwip_recvfrom_udp_raw+0x14a>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d016      	beq.n	800c30e <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d012      	beq.n	800c30e <lwip_recvfrom_udp_raw+0x14a>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00e      	beq.n	800c30e <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6818      	ldr	r0, [r3, #0]
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	f103 0108 	add.w	r1, r3, #8
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	3304      	adds	r3, #4
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	4623      	mov	r3, r4
 800c30a:	f7ff febb 	bl	800c084 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2200      	movs	r2, #0
 800c312:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d007      	beq.n	800c32c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800c31c:	2300      	movs	r3, #0
 800c31e:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800c320:	7d7b      	ldrb	r3, [r7, #21]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d102      	bne.n	800c32c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	f003 0301 	and.w	r3, r3, #1
 800c332:	2b00      	cmp	r3, #0
 800c334:	d106      	bne.n	800c344 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2200      	movs	r2, #0
 800c33a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	4618      	mov	r0, r3
 800c340:	f7ff f9a6 	bl	800b690 <netbuf_delete>
  }
  if (datagram_len) {
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d002      	beq.n	800c350 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	8b3a      	ldrh	r2, [r7, #24]
 800c34e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	372c      	adds	r7, #44	; 0x2c
 800c356:	46bd      	mov	sp, r7
 800c358:	bd90      	pop	{r4, r7, pc}
 800c35a:	bf00      	nop
 800c35c:	0801c474 	.word	0x0801c474
 800c360:	0801c618 	.word	0x0801c618
 800c364:	0801c4c8 	.word	0x0801c4c8
 800c368:	0801c644 	.word	0x0801c644

0800c36c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b096      	sub	sp, #88	; 0x58
 800c370:	af02      	add	r7, sp, #8
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
 800c378:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff fa58 	bl	800b830 <get_socket>
 800c380:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800c382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c384:	2b00      	cmp	r3, #0
 800c386:	d102      	bne.n	800c38e <lwip_recvfrom+0x22>
    return -1;
 800c388:	f04f 33ff 	mov.w	r3, #4294967295
 800c38c:	e078      	b.n	800c480 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c38e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c398:	2b10      	cmp	r3, #16
 800c39a:	d112      	bne.n	800c3c2 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	68b9      	ldr	r1, [r7, #8]
 800c3a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c3a4:	f7ff fd5e 	bl	800be64 <lwip_recv_tcp>
 800c3a8:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800c3aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3ac:	9301      	str	r3, [sp, #4]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	4b35      	ldr	r3, [pc, #212]	; (800c488 <lwip_recvfrom+0x11c>)
 800c3b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c3b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c3ba:	f7ff fed1 	bl	800c160 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800c3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3c0:	e05e      	b.n	800c480 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800c3da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c3de:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800c3e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c3e6:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800c3e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d002      	beq.n	800c3f4 <lwip_recvfrom+0x88>
 800c3ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	e000      	b.n	800c3f6 <lwip_recvfrom+0x8a>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800c3f8:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800c3fc:	f107 0214 	add.w	r2, r7, #20
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	460b      	mov	r3, r1
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c40a:	f7ff fedb 	bl	800c1c4 <lwip_recvfrom_udp_raw>
 800c40e:	4603      	mov	r3, r0
 800c410:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800c414:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00e      	beq.n	800c43a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800c41c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff f917 	bl	800b654 <err_to_errno>
 800c426:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d002      	beq.n	800c434 <lwip_recvfrom+0xc8>
 800c42e:	4a17      	ldr	r2, [pc, #92]	; (800c48c <lwip_recvfrom+0x120>)
 800c430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c432:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800c434:	f04f 33ff 	mov.w	r3, #4294967295
 800c438:	e022      	b.n	800c480 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800c43a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c43c:	461a      	mov	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4293      	cmp	r3, r2
 800c442:	bf28      	it	cs
 800c444:	4613      	movcs	r3, r2
 800c446:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d206      	bcs.n	800c45c <lwip_recvfrom+0xf0>
 800c44e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c450:	461a      	mov	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4293      	cmp	r3, r2
 800c456:	bf28      	it	cs
 800c458:	4613      	movcs	r3, r2
 800c45a:	e001      	b.n	800c460 <lwip_recvfrom+0xf4>
 800c45c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c460:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800c462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800c468:	69ba      	ldr	r2, [r7, #24]
 800c46a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c46c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800c46e:	2300      	movs	r3, #0
 800c470:	643b      	str	r3, [r7, #64]	; 0x40
 800c472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <lwip_recvfrom+0x112>
 800c478:	4a04      	ldr	r2, [pc, #16]	; (800c48c <lwip_recvfrom+0x120>)
 800c47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c47c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800c47e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c480:	4618      	mov	r0, r3
 800c482:	3750      	adds	r7, #80	; 0x50
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	0801c650 	.word	0x0801c650
 800c48c:	2001857c 	.word	0x2001857c

0800c490 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af02      	add	r7, sp, #8
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800c49e:	2300      	movs	r3, #0
 800c4a0:	9301      	str	r3, [sp, #4]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	68b9      	ldr	r1, [r7, #8]
 800c4ac:	68f8      	ldr	r0, [r7, #12]
 800c4ae:	f7ff ff5d 	bl	800c36c <lwip_recvfrom>
 800c4b2:	4603      	mov	r3, r0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08a      	sub	sp, #40	; 0x28
 800c4c0:	af02      	add	r7, sp, #8
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
 800c4c8:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f7ff f9b0 	bl	800b830 <get_socket>
 800c4d0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d102      	bne.n	800c4de <lwip_send+0x22>
    return -1;
 800c4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4dc:	e046      	b.n	800c56c <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4e8:	2b10      	cmp	r3, #16
 800c4ea:	d00b      	beq.n	800c504 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	9301      	str	r3, [sp, #4]
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	68b9      	ldr	r1, [r7, #8]
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f000 f83c 	bl	800c578 <lwip_sendto>
 800c500:	4603      	mov	r3, r0
 800c502:	e033      	b.n	800c56c <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d001      	beq.n	800c512 <lwip_send+0x56>
 800c50e:	2203      	movs	r2, #3
 800c510:	e000      	b.n	800c514 <lwip_send+0x58>
 800c512:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	105b      	asrs	r3, r3, #1
 800c518:	b25b      	sxtb	r3, r3
 800c51a:	f003 0304 	and.w	r3, r3, #4
 800c51e:	b25b      	sxtb	r3, r3
 800c520:	4313      	orrs	r3, r2
 800c522:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800c524:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	6818      	ldr	r0, [r3, #0]
 800c52e:	7efa      	ldrb	r2, [r7, #27]
 800c530:	f107 0310 	add.w	r3, r7, #16
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	4613      	mov	r3, r2
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	68b9      	ldr	r1, [r7, #8]
 800c53c:	f7fd fac8 	bl	8009ad0 <netconn_write_partly>
 800c540:	4603      	mov	r3, r0
 800c542:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800c544:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c548:	4618      	mov	r0, r3
 800c54a:	f7ff f883 	bl	800b654 <err_to_errno>
 800c54e:	6178      	str	r0, [r7, #20]
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d002      	beq.n	800c55c <lwip_send+0xa0>
 800c556:	4a07      	ldr	r2, [pc, #28]	; (800c574 <lwip_send+0xb8>)
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800c55c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d101      	bne.n	800c568 <lwip_send+0xac>
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	e001      	b.n	800c56c <lwip_send+0xb0>
 800c568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3720      	adds	r7, #32
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	2001857c 	.word	0x2001857c

0800c578 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b08e      	sub	sp, #56	; 0x38
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
 800c584:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f7ff f952 	bl	800b830 <get_socket>
 800c58c:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800c58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c590:	2b00      	cmp	r3, #0
 800c592:	d102      	bne.n	800c59a <lwip_sendto+0x22>
    return -1;
 800c594:	f04f 33ff 	mov.w	r3, #4294967295
 800c598:	e093      	b.n	800c6c2 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5a4:	2b10      	cmp	r3, #16
 800c5a6:	d107      	bne.n	800c5b8 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	68b9      	ldr	r1, [r7, #8]
 800c5ae:	68f8      	ldr	r0, [r7, #12]
 800c5b0:	f7ff ff84 	bl	800c4bc <lwip_send>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	e084      	b.n	800c6c2 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5be:	d30a      	bcc.n	800c5d6 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800c5c0:	235a      	movs	r3, #90	; 0x5a
 800c5c2:	623b      	str	r3, [r7, #32]
 800c5c4:	6a3b      	ldr	r3, [r7, #32]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d002      	beq.n	800c5d0 <lwip_sendto+0x58>
 800c5ca:	4a40      	ldr	r2, [pc, #256]	; (800c6cc <lwip_sendto+0x154>)
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d4:	e075      	b.n	800c6c2 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800c5da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d102      	bne.n	800c5e6 <lwip_sendto+0x6e>
 800c5e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d023      	beq.n	800c62e <lwip_sendto+0xb6>
 800c5e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5e8:	2b10      	cmp	r3, #16
 800c5ea:	d10b      	bne.n	800c604 <lwip_sendto+0x8c>
 800c5ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d008      	beq.n	800c604 <lwip_sendto+0x8c>
 800c5f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5f4:	785b      	ldrb	r3, [r3, #1]
 800c5f6:	2b02      	cmp	r3, #2
 800c5f8:	d104      	bne.n	800c604 <lwip_sendto+0x8c>
 800c5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5fc:	f003 0303 	and.w	r3, r3, #3
 800c600:	2b00      	cmp	r3, #0
 800c602:	d014      	beq.n	800c62e <lwip_sendto+0xb6>
 800c604:	4b32      	ldr	r3, [pc, #200]	; (800c6d0 <lwip_sendto+0x158>)
 800c606:	f240 6252 	movw	r2, #1618	; 0x652
 800c60a:	4932      	ldr	r1, [pc, #200]	; (800c6d4 <lwip_sendto+0x15c>)
 800c60c:	4832      	ldr	r0, [pc, #200]	; (800c6d8 <lwip_sendto+0x160>)
 800c60e:	f00e fb95 	bl	801ad3c <iprintf>
 800c612:	f06f 000f 	mvn.w	r0, #15
 800c616:	f7ff f81d 	bl	800b654 <err_to_errno>
 800c61a:	62b8      	str	r0, [r7, #40]	; 0x28
 800c61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d002      	beq.n	800c628 <lwip_sendto+0xb0>
 800c622:	4a2a      	ldr	r2, [pc, #168]	; (800c6cc <lwip_sendto+0x154>)
 800c624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	f04f 33ff 	mov.w	r3, #4294967295
 800c62c:	e049      	b.n	800c6c2 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800c62e:	2300      	movs	r3, #0
 800c630:	617b      	str	r3, [r7, #20]
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800c636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00a      	beq.n	800c652 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800c63c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	61bb      	str	r3, [r7, #24]
 800c642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c644:	885b      	ldrh	r3, [r3, #2]
 800c646:	4618      	mov	r0, r3
 800c648:	f000 fdfa 	bl	800d240 <lwip_htons>
 800c64c:	4603      	mov	r3, r0
 800c64e:	86bb      	strh	r3, [r7, #52]	; 0x34
 800c650:	e003      	b.n	800c65a <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800c656:	2300      	movs	r3, #0
 800c658:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800c65a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c65c:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800c65e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c660:	f107 0310 	add.w	r3, r7, #16
 800c664:	68b9      	ldr	r1, [r7, #8]
 800c666:	4618      	mov	r0, r3
 800c668:	f7ff f85a 	bl	800b720 <netbuf_ref>
 800c66c:	4603      	mov	r3, r0
 800c66e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800c672:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c676:	2b00      	cmp	r3, #0
 800c678:	d10a      	bne.n	800c690 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f107 0210 	add.w	r2, r7, #16
 800c682:	4611      	mov	r1, r2
 800c684:	4618      	mov	r0, r3
 800c686:	f7fd f9f5 	bl	8009a74 <netconn_send>
 800c68a:	4603      	mov	r3, r0
 800c68c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800c690:	f107 0310 	add.w	r3, r7, #16
 800c694:	4618      	mov	r0, r3
 800c696:	f7ff f81b 	bl	800b6d0 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800c69a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7fe ffd8 	bl	800b654 <err_to_errno>
 800c6a4:	6278      	str	r0, [r7, #36]	; 0x24
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <lwip_sendto+0x13a>
 800c6ac:	4a07      	ldr	r2, [pc, #28]	; (800c6cc <lwip_sendto+0x154>)
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800c6b2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <lwip_sendto+0x146>
 800c6ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c6bc:	e001      	b.n	800c6c2 <lwip_sendto+0x14a>
 800c6be:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3738      	adds	r7, #56	; 0x38
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	2001857c 	.word	0x2001857c
 800c6d0:	0801c474 	.word	0x0801c474
 800c6d4:	0801c754 	.word	0x0801c754
 800c6d8:	0801c4c8 	.word	0x0801c4c8

0800c6dc <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	2b03      	cmp	r3, #3
 800c6ec:	d009      	beq.n	800c702 <lwip_socket+0x26>
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	2b03      	cmp	r3, #3
 800c6f2:	dc23      	bgt.n	800c73c <lwip_socket+0x60>
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d019      	beq.n	800c72e <lwip_socket+0x52>
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	2b02      	cmp	r3, #2
 800c6fe:	d009      	beq.n	800c714 <lwip_socket+0x38>
 800c700:	e01c      	b.n	800c73c <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	b2db      	uxtb	r3, r3
 800c706:	4a22      	ldr	r2, [pc, #136]	; (800c790 <lwip_socket+0xb4>)
 800c708:	4619      	mov	r1, r3
 800c70a:	2040      	movs	r0, #64	; 0x40
 800c70c:	f7fc fdb4 	bl	8009278 <netconn_new_with_proto_and_callback>
 800c710:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c712:	e019      	b.n	800c748 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b88      	cmp	r3, #136	; 0x88
 800c718:	d101      	bne.n	800c71e <lwip_socket+0x42>
 800c71a:	2321      	movs	r3, #33	; 0x21
 800c71c:	e000      	b.n	800c720 <lwip_socket+0x44>
 800c71e:	2320      	movs	r3, #32
 800c720:	4a1b      	ldr	r2, [pc, #108]	; (800c790 <lwip_socket+0xb4>)
 800c722:	2100      	movs	r1, #0
 800c724:	4618      	mov	r0, r3
 800c726:	f7fc fda7 	bl	8009278 <netconn_new_with_proto_and_callback>
 800c72a:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c72c:	e00c      	b.n	800c748 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800c72e:	4a18      	ldr	r2, [pc, #96]	; (800c790 <lwip_socket+0xb4>)
 800c730:	2100      	movs	r1, #0
 800c732:	2010      	movs	r0, #16
 800c734:	f7fc fda0 	bl	8009278 <netconn_new_with_proto_and_callback>
 800c738:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c73a:	e005      	b.n	800c748 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800c73c:	4b15      	ldr	r3, [pc, #84]	; (800c794 <lwip_socket+0xb8>)
 800c73e:	2216      	movs	r2, #22
 800c740:	601a      	str	r2, [r3, #0]
      return -1;
 800c742:	f04f 33ff 	mov.w	r3, #4294967295
 800c746:	e01e      	b.n	800c786 <lwip_socket+0xaa>
  }

  if (!conn) {
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d105      	bne.n	800c75a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800c74e:	4b11      	ldr	r3, [pc, #68]	; (800c794 <lwip_socket+0xb8>)
 800c750:	2269      	movs	r2, #105	; 0x69
 800c752:	601a      	str	r2, [r3, #0]
    return -1;
 800c754:	f04f 33ff 	mov.w	r3, #4294967295
 800c758:	e015      	b.n	800c786 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800c75a:	2100      	movs	r1, #0
 800c75c:	6978      	ldr	r0, [r7, #20]
 800c75e:	f7ff f87f 	bl	800b860 <alloc_socket>
 800c762:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76a:	d108      	bne.n	800c77e <lwip_socket+0xa2>
    netconn_delete(conn);
 800c76c:	6978      	ldr	r0, [r7, #20]
 800c76e:	f7fc fe21 	bl	80093b4 <netconn_delete>
    set_errno(ENFILE);
 800c772:	4b08      	ldr	r3, [pc, #32]	; (800c794 <lwip_socket+0xb8>)
 800c774:	2217      	movs	r2, #23
 800c776:	601a      	str	r2, [r3, #0]
    return -1;
 800c778:	f04f 33ff 	mov.w	r3, #4294967295
 800c77c:	e003      	b.n	800c786 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800c784:	693b      	ldr	r3, [r7, #16]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3718      	adds	r7, #24
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	0800c821 	.word	0x0800c821
 800c794:	2001857c 	.word	0x2001857c

0800c798 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c798:	b480      	push	{r7}
 800c79a:	b087      	sub	sp, #28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
 800c7a4:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	617b      	str	r3, [r7, #20]
 800c7aa:	e02c      	b.n	800c806 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	695a      	ldr	r2, [r3, #20]
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	00db      	lsls	r3, r3, #3
 800c7b4:	4413      	add	r3, r2
 800c7b6:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d11e      	bne.n	800c800 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d009      	beq.n	800c7dc <lwip_poll_should_wake+0x44>
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d001      	beq.n	800c7dc <lwip_poll_should_wake+0x44>
        return 1;
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e01a      	b.n	800c812 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d009      	beq.n	800c7f6 <lwip_poll_should_wake+0x5e>
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	f003 0302 	and.w	r3, r3, #2
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d001      	beq.n	800c7f6 <lwip_poll_should_wake+0x5e>
        return 1;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e00d      	b.n	800c812 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800c7f6:	6a3b      	ldr	r3, [r7, #32]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	e008      	b.n	800c812 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	3301      	adds	r3, #1
 800c804:	617b      	str	r3, [r7, #20]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	699b      	ldr	r3, [r3, #24]
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d3cd      	bcc.n	800c7ac <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	371c      	adds	r7, #28
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
	...

0800c820 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b08a      	sub	sp, #40	; 0x28
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	460b      	mov	r3, r1
 800c82a:	70fb      	strb	r3, [r7, #3]
 800c82c:	4613      	mov	r3, r2
 800c82e:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	f000 80a4 	beq.w	800c980 <event_callback+0x160>
    s = conn->socket;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	699b      	ldr	r3, [r3, #24]
 800c83c:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	2b00      	cmp	r3, #0
 800c842:	da18      	bge.n	800c876 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800c844:	f00b ffb0 	bl	80187a8 <sys_arch_protect>
 800c848:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	699b      	ldr	r3, [r3, #24]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	da0b      	bge.n	800c86a <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800c852:	78fb      	ldrb	r3, [r7, #3]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d104      	bne.n	800c862 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	699b      	ldr	r3, [r3, #24]
 800c85c:	1e5a      	subs	r2, r3, #1
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800c862:	69f8      	ldr	r0, [r7, #28]
 800c864:	f00b ffae 	bl	80187c4 <sys_arch_unprotect>
        return;
 800c868:	e08d      	b.n	800c986 <event_callback+0x166>
      }
      s = conn->socket;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	699b      	ldr	r3, [r3, #24]
 800c86e:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800c870:	69f8      	ldr	r0, [r7, #28]
 800c872:	f00b ffa7 	bl	80187c4 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800c876:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c878:	f7fe ffda 	bl	800b830 <get_socket>
 800c87c:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d07f      	beq.n	800c984 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800c884:	2301      	movs	r3, #1
 800c886:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800c888:	f00b ff8e 	bl	80187a8 <sys_arch_protect>
 800c88c:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800c88e:	78fb      	ldrb	r3, [r7, #3]
 800c890:	2b04      	cmp	r3, #4
 800c892:	d83e      	bhi.n	800c912 <event_callback+0xf2>
 800c894:	a201      	add	r2, pc, #4	; (adr r2, 800c89c <event_callback+0x7c>)
 800c896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c89a:	bf00      	nop
 800c89c:	0800c8b1 	.word	0x0800c8b1
 800c8a0:	0800c8d3 	.word	0x0800c8d3
 800c8a4:	0800c8eb 	.word	0x0800c8eb
 800c8a8:	0800c8ff 	.word	0x0800c8ff
 800c8ac:	0800c90b 	.word	0x0800c90b
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	b21a      	sxth	r2, r3
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	dd2a      	ble.n	800c922 <event_callback+0x102>
        check_waiters = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	623b      	str	r3, [r7, #32]
      }
      break;
 800c8d0:	e027      	b.n	800c922 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	b21a      	sxth	r2, r3
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	623b      	str	r3, [r7, #32]
      break;
 800c8e8:	e01c      	b.n	800c924 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800c8ea:	69bb      	ldr	r3, [r7, #24]
 800c8ec:	895b      	ldrh	r3, [r3, #10]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d001      	beq.n	800c8f6 <event_callback+0xd6>
        check_waiters = 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	815a      	strh	r2, [r3, #10]
      break;
 800c8fc:	e012      	b.n	800c924 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	2200      	movs	r2, #0
 800c902:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	623b      	str	r3, [r7, #32]
      break;
 800c908:	e00c      	b.n	800c924 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	2201      	movs	r2, #1
 800c90e:	819a      	strh	r2, [r3, #12]
      break;
 800c910:	e008      	b.n	800c924 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800c912:	4b1e      	ldr	r3, [pc, #120]	; (800c98c <event_callback+0x16c>)
 800c914:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800c918:	491d      	ldr	r1, [pc, #116]	; (800c990 <event_callback+0x170>)
 800c91a:	481e      	ldr	r0, [pc, #120]	; (800c994 <event_callback+0x174>)
 800c91c:	f00e fa0e 	bl	801ad3c <iprintf>
      break;
 800c920:	e000      	b.n	800c924 <event_callback+0x104>
      break;
 800c922:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	7b9b      	ldrb	r3, [r3, #14]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d025      	beq.n	800c978 <event_callback+0x158>
 800c92c:	6a3b      	ldr	r3, [r7, #32]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d022      	beq.n	800c978 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	bfcc      	ite	gt
 800c93c:	2301      	movgt	r3, #1
 800c93e:	2300      	movle	r3, #0
 800c940:	b2db      	uxtb	r3, r3
 800c942:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	895b      	ldrh	r3, [r3, #10]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	bf14      	ite	ne
 800c94c:	2301      	movne	r3, #1
 800c94e:	2300      	moveq	r3, #0
 800c950:	b2db      	uxtb	r3, r3
 800c952:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	899b      	ldrh	r3, [r3, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	bf14      	ite	ne
 800c95c:	2301      	movne	r3, #1
 800c95e:	2300      	moveq	r3, #0
 800c960:	b2db      	uxtb	r3, r3
 800c962:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800c964:	69f8      	ldr	r0, [r7, #28]
 800c966:	f00b ff2d 	bl	80187c4 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	6979      	ldr	r1, [r7, #20]
 800c970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c972:	f000 f811 	bl	800c998 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c976:	e006      	b.n	800c986 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c978:	69f8      	ldr	r0, [r7, #28]
 800c97a:	f00b ff23 	bl	80187c4 <sys_arch_unprotect>
 800c97e:	e002      	b.n	800c986 <event_callback+0x166>
    return;
 800c980:	bf00      	nop
 800c982:	e000      	b.n	800c986 <event_callback+0x166>
      return;
 800c984:	bf00      	nop
  }
  done_socket(sock);
}
 800c986:	3728      	adds	r7, #40	; 0x28
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}
 800c98c:	0801c474 	.word	0x0801c474
 800c990:	0801c7f0 	.word	0x0801c7f0
 800c994:	0801c4c8 	.word	0x0801c4c8

0800c998 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b088      	sub	sp, #32
 800c99c:	af02      	add	r7, sp, #8
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
 800c9a4:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c9a6:	4b3e      	ldr	r3, [pc, #248]	; (800caa0 <select_check_waiters+0x108>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	617b      	str	r3, [r7, #20]
 800c9ac:	e06f      	b.n	800ca8e <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	69db      	ldr	r3, [r3, #28]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d168      	bne.n	800ca88 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	9300      	str	r3, [sp, #0]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	68f9      	ldr	r1, [r7, #12]
 800c9cc:	6978      	ldr	r0, [r7, #20]
 800c9ce:	f7ff fee3 	bl	800c798 <lwip_poll_should_wake>
 800c9d2:	6138      	str	r0, [r7, #16]
 800c9d4:	e04d      	b.n	800ca72 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d014      	beq.n	800ca06 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d010      	beq.n	800ca06 <select_check_waiters+0x6e>
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	0952      	lsrs	r2, r2, #5
 800c9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	f002 021f 	and.w	r2, r2, #31
 800c9f6:	2101      	movs	r1, #1
 800c9f8:	fa01 f202 	lsl.w	r2, r1, r2
 800c9fc:	4013      	ands	r3, r2
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <select_check_waiters+0x6e>
            do_signal = 1;
 800ca02:	2301      	movs	r3, #1
 800ca04:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d017      	beq.n	800ca3c <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d114      	bne.n	800ca3c <select_check_waiters+0xa4>
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	68db      	ldr	r3, [r3, #12]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d010      	beq.n	800ca3c <select_check_waiters+0xa4>
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	0952      	lsrs	r2, r2, #5
 800ca22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	f002 021f 	and.w	r2, r2, #31
 800ca2c:	2101      	movs	r1, #1
 800ca2e:	fa01 f202 	lsl.w	r2, r1, r2
 800ca32:	4013      	ands	r3, r2
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d001      	beq.n	800ca3c <select_check_waiters+0xa4>
            do_signal = 1;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d017      	beq.n	800ca72 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d114      	bne.n	800ca72 <select_check_waiters+0xda>
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	691b      	ldr	r3, [r3, #16]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d010      	beq.n	800ca72 <select_check_waiters+0xda>
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	0952      	lsrs	r2, r2, #5
 800ca58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	f002 021f 	and.w	r2, r2, #31
 800ca62:	2101      	movs	r1, #1
 800ca64:	fa01 f202 	lsl.w	r2, r1, r2
 800ca68:	4013      	ands	r3, r2
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <select_check_waiters+0xda>
            do_signal = 1;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d007      	beq.n	800ca88 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	3320      	adds	r3, #32
 800ca82:	4618      	mov	r0, r3
 800ca84:	f00b fdfa 	bl	801867c <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	617b      	str	r3, [r7, #20]
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d18c      	bne.n	800c9ae <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800ca94:	bf00      	nop
 800ca96:	bf00      	nop
 800ca98:	3718      	adds	r7, #24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	20011584 	.word	0x20011584

0800caa4 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b20      	cmp	r3, #32
 800cab0:	d009      	beq.n	800cac6 <lwip_sockopt_to_ipopt+0x22>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b20      	cmp	r3, #32
 800cab6:	dc0c      	bgt.n	800cad2 <lwip_sockopt_to_ipopt+0x2e>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b04      	cmp	r3, #4
 800cabc:	d007      	beq.n	800cace <lwip_sockopt_to_ipopt+0x2a>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b08      	cmp	r3, #8
 800cac2:	d002      	beq.n	800caca <lwip_sockopt_to_ipopt+0x26>
 800cac4:	e005      	b.n	800cad2 <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 800cac6:	2320      	movs	r3, #32
 800cac8:	e00b      	b.n	800cae2 <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 800caca:	2308      	movs	r3, #8
 800cacc:	e009      	b.n	800cae2 <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 800cace:	2304      	movs	r3, #4
 800cad0:	e007      	b.n	800cae2 <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 800cad2:	4b06      	ldr	r3, [pc, #24]	; (800caec <lwip_sockopt_to_ipopt+0x48>)
 800cad4:	f640 3239 	movw	r2, #2873	; 0xb39
 800cad8:	4905      	ldr	r1, [pc, #20]	; (800caf0 <lwip_sockopt_to_ipopt+0x4c>)
 800cada:	4806      	ldr	r0, [pc, #24]	; (800caf4 <lwip_sockopt_to_ipopt+0x50>)
 800cadc:	f00e f92e 	bl	801ad3c <iprintf>
    return 0;
 800cae0:	2300      	movs	r3, #0
  }
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	0801c474 	.word	0x0801c474
 800caf0:	0801c800 	.word	0x0801c800
 800caf4:	0801c4c8 	.word	0x0801c4c8

0800caf8 <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08a      	sub	sp, #40	; 0x28
 800cafc:	af02      	add	r7, sp, #8
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
 800cb04:	603b      	str	r3, [r7, #0]
  int err = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f7fe fe90 	bl	800b830 <get_socket>
 800cb10:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d102      	bne.n	800cb1e <lwip_setsockopt+0x26>
    return -1;
 800cb18:	f04f 33ff 	mov.w	r3, #4294967295
 800cb1c:	e02b      	b.n	800cb76 <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10a      	bne.n	800cb3a <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 800cb24:	230e      	movs	r3, #14
 800cb26:	613b      	str	r3, [r7, #16]
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d002      	beq.n	800cb34 <lwip_setsockopt+0x3c>
 800cb2e:	4a14      	ldr	r2, [pc, #80]	; (800cb80 <lwip_setsockopt+0x88>)
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800cb34:	f04f 33ff 	mov.w	r3, #4294967295
 800cb38:	e01d      	b.n	800cb76 <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 800cb3a:	4812      	ldr	r0, [pc, #72]	; (800cb84 <lwip_setsockopt+0x8c>)
 800cb3c:	f00b fdf8 	bl	8018730 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 800cb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	68b9      	ldr	r1, [r7, #8]
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f000 f81c 	bl	800cb88 <lwip_setsockopt_impl>
 800cb50:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 800cb52:	480c      	ldr	r0, [pc, #48]	; (800cb84 <lwip_setsockopt+0x8c>)
 800cb54:	f00b fdfb 	bl	801874e <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	617b      	str	r3, [r7, #20]
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d002      	beq.n	800cb68 <lwip_setsockopt+0x70>
 800cb62:	4a07      	ldr	r2, [pc, #28]	; (800cb80 <lwip_setsockopt+0x88>)
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d002      	beq.n	800cb74 <lwip_setsockopt+0x7c>
 800cb6e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb72:	e000      	b.n	800cb76 <lwip_setsockopt+0x7e>
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3720      	adds	r7, #32
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	2001857c 	.word	0x2001857c
 800cb84:	20014e48 	.word	0x20014e48

0800cb88 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b088      	sub	sp, #32
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
  int err = 0;
 800cb96:	2300      	movs	r3, #0
 800cb98:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f7fe fe31 	bl	800b802 <tryget_socket>
 800cba0:	6178      	str	r0, [r7, #20]
  if (!sock) {
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d101      	bne.n	800cbac <lwip_setsockopt_impl+0x24>
    return EBADF;
 800cba8:	2309      	movs	r3, #9
 800cbaa:	e187      	b.n	800cebc <lwip_setsockopt_impl+0x334>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	f640 72ff 	movw	r2, #4095	; 0xfff
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d015      	beq.n	800cbe2 <lwip_setsockopt_impl+0x5a>
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cbbc:	f280 817a 	bge.w	800ceb4 <lwip_setsockopt_impl+0x32c>
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	2bff      	cmp	r3, #255	; 0xff
 800cbc4:	f000 8172 	beq.w	800ceac <lwip_setsockopt_impl+0x324>
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	2bff      	cmp	r3, #255	; 0xff
 800cbcc:	f300 8172 	bgt.w	800ceb4 <lwip_setsockopt_impl+0x32c>
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f000 80e0 	beq.w	800cd98 <lwip_setsockopt_impl+0x210>
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	2b06      	cmp	r3, #6
 800cbdc:	f000 8116 	beq.w	800ce0c <lwip_setsockopt_impl+0x284>
 800cbe0:	e168      	b.n	800ceb4 <lwip_setsockopt_impl+0x32c>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f241 020b 	movw	r2, #4107	; 0x100b
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	f000 8091 	beq.w	800cd10 <lwip_setsockopt_impl+0x188>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f241 020b 	movw	r2, #4107	; 0x100b
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	f300 80cb 	bgt.w	800cd90 <lwip_setsockopt_impl+0x208>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f241 020a 	movw	r2, #4106	; 0x100a
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d050      	beq.n	800cca6 <lwip_setsockopt_impl+0x11e>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f241 020a 	movw	r2, #4106	; 0x100a
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	f300 80c0 	bgt.w	800cd90 <lwip_setsockopt_impl+0x208>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2b08      	cmp	r3, #8
 800cc14:	d003      	beq.n	800cc1e <lwip_setsockopt_impl+0x96>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b20      	cmp	r3, #32
 800cc1a:	f040 80b9 	bne.w	800cd90 <lwip_setsockopt_impl+0x208>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b20      	cmp	r3, #32
 800cc22:	d108      	bne.n	800cc36 <lwip_setsockopt_impl+0xae>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 800cc2e:	2b20      	cmp	r3, #32
 800cc30:	d001      	beq.n	800cc36 <lwip_setsockopt_impl+0xae>
            done_socket(sock);
            return ENOPROTOOPT;
 800cc32:	235c      	movs	r3, #92	; 0x5c
 800cc34:	e142      	b.n	800cebc <lwip_setsockopt_impl+0x334>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f7ff ff34 	bl	800caa4 <lwip_sockopt_to_ipopt>
 800cc3c:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800cc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc40:	2b03      	cmp	r3, #3
 800cc42:	d801      	bhi.n	800cc48 <lwip_setsockopt_impl+0xc0>
 800cc44:	2316      	movs	r3, #22
 800cc46:	e139      	b.n	800cebc <lwip_setsockopt_impl+0x334>
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d004      	beq.n	800cc5a <lwip_setsockopt_impl+0xd2>
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d101      	bne.n	800cc5e <lwip_setsockopt_impl+0xd6>
 800cc5a:	2316      	movs	r3, #22
 800cc5c:	e12e      	b.n	800cebc <lwip_setsockopt_impl+0x334>
          if (*(const int *)optval) {
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00e      	beq.n	800cc84 <lwip_setsockopt_impl+0xfc>
            ip_set_option(sock->conn->pcb.ip, optname);
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	7a5b      	ldrb	r3, [r3, #9]
 800cc6e:	b25a      	sxtb	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	b25b      	sxtb	r3, r3
 800cc74:	4313      	orrs	r3, r2
 800cc76:	b25a      	sxtb	r2, r3
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	b2d2      	uxtb	r2, r2
 800cc80:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 800cc82:	e088      	b.n	800cd96 <lwip_setsockopt_impl+0x20e>
            ip_reset_option(sock->conn->pcb.ip, optname);
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	7a5b      	ldrb	r3, [r3, #9]
 800cc8c:	b25a      	sxtb	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	b25b      	sxtb	r3, r3
 800cc92:	43db      	mvns	r3, r3
 800cc94:	b25b      	sxtb	r3, r3
 800cc96:	4013      	ands	r3, r2
 800cc98:	b25a      	sxtb	r2, r3
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	b2d2      	uxtb	r2, r2
 800cca2:	725a      	strb	r2, [r3, #9]
          break;
 800cca4:	e077      	b.n	800cd96 <lwip_setsockopt_impl+0x20e>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 800cca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca8:	2b03      	cmp	r3, #3
 800ccaa:	d801      	bhi.n	800ccb0 <lwip_setsockopt_impl+0x128>
 800ccac:	2316      	movs	r3, #22
 800ccae:	e105      	b.n	800cebc <lwip_setsockopt_impl+0x334>
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d004      	beq.n	800ccc2 <lwip_setsockopt_impl+0x13a>
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d101      	bne.n	800ccc6 <lwip_setsockopt_impl+0x13e>
 800ccc2:	2316      	movs	r3, #22
 800ccc4:	e0fa      	b.n	800cebc <lwip_setsockopt_impl+0x334>
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccd0:	2b20      	cmp	r3, #32
 800ccd2:	d001      	beq.n	800ccd8 <lwip_setsockopt_impl+0x150>
 800ccd4:	235c      	movs	r3, #92	; 0x5c
 800ccd6:	e0f1      	b.n	800cebc <lwip_setsockopt_impl+0x334>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00b      	beq.n	800ccf8 <lwip_setsockopt_impl+0x170>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	7c1a      	ldrb	r2, [r3, #16]
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	f042 0201 	orr.w	r2, r2, #1
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 800ccf6:	e04e      	b.n	800cd96 <lwip_setsockopt_impl+0x20e>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	7c1a      	ldrb	r2, [r3, #16]
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	f022 0201 	bic.w	r2, r2, #1
 800cd0a:	b2d2      	uxtb	r2, r2
 800cd0c:	741a      	strb	r2, [r3, #16]
          break;
 800cd0e:	e042      	b.n	800cd96 <lwip_setsockopt_impl+0x20e>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 800cd10:	2300      	movs	r3, #0
 800cd12:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 800cd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd16:	2b05      	cmp	r3, #5
 800cd18:	d801      	bhi.n	800cd1e <lwip_setsockopt_impl+0x196>
 800cd1a:	2316      	movs	r3, #22
 800cd1c:	e0ce      	b.n	800cebc <lwip_setsockopt_impl+0x334>
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d101      	bne.n	800cd2a <lwip_setsockopt_impl+0x1a2>
 800cd26:	2316      	movs	r3, #22
 800cd28:	e0c8      	b.n	800cebc <lwip_setsockopt_impl+0x334>

          iface = (const struct ifreq *)optval;
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d009      	beq.n	800cd4a <lwip_setsockopt_impl+0x1c2>
            n = netif_find(iface->ifr_name);
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f001 fac5 	bl	800e2c8 <netif_find>
 800cd3e:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <lwip_setsockopt_impl+0x1c2>
              done_socket(sock);
              return ENODEV;
 800cd46:	2313      	movs	r3, #19
 800cd48:	e0b8      	b.n	800cebc <lwip_setsockopt_impl+0x334>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd54:	2b10      	cmp	r3, #16
 800cd56:	d002      	beq.n	800cd5e <lwip_setsockopt_impl+0x1d6>
 800cd58:	2b20      	cmp	r3, #32
 800cd5a:	d008      	beq.n	800cd6e <lwip_setsockopt_impl+0x1e6>
 800cd5c:	e00f      	b.n	800cd7e <lwip_setsockopt_impl+0x1f6>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	69b9      	ldr	r1, [r7, #24]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f002 fd24 	bl	800f7b4 <tcp_bind_netif>
              break;
 800cd6c:	e00f      	b.n	800cd8e <lwip_setsockopt_impl+0x206>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	69b9      	ldr	r1, [r7, #24]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f008 ff6c 	bl	8015c54 <udp_bind_netif>
              break;
 800cd7c:	e007      	b.n	800cd8e <lwip_setsockopt_impl+0x206>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 800cd7e:	4b51      	ldr	r3, [pc, #324]	; (800cec4 <lwip_setsockopt_impl+0x33c>)
 800cd80:	f640 527d 	movw	r2, #3453	; 0xd7d
 800cd84:	4950      	ldr	r1, [pc, #320]	; (800cec8 <lwip_setsockopt_impl+0x340>)
 800cd86:	4851      	ldr	r0, [pc, #324]	; (800cecc <lwip_setsockopt_impl+0x344>)
 800cd88:	f00d ffd8 	bl	801ad3c <iprintf>
              break;
 800cd8c:	bf00      	nop
          }
        }
        break;
 800cd8e:	e002      	b.n	800cd96 <lwip_setsockopt_impl+0x20e>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800cd90:	235c      	movs	r3, #92	; 0x5c
 800cd92:	61fb      	str	r3, [r7, #28]
          break;
 800cd94:	bf00      	nop
      }  /* switch (optname) */
      break;
 800cd96:	e090      	b.n	800ceba <lwip_setsockopt_impl+0x332>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d01a      	beq.n	800cdd4 <lwip_setsockopt_impl+0x24c>
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d12f      	bne.n	800ce04 <lwip_setsockopt_impl+0x27c>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d801      	bhi.n	800cdae <lwip_setsockopt_impl+0x226>
 800cdaa:	2316      	movs	r3, #22
 800cdac:	e086      	b.n	800cebc <lwip_setsockopt_impl+0x334>
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d004      	beq.n	800cdc0 <lwip_setsockopt_impl+0x238>
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <lwip_setsockopt_impl+0x23c>
 800cdc0:	2316      	movs	r3, #22
 800cdc2:	e07b      	b.n	800cebc <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	b2d2      	uxtb	r2, r2
 800cdd0:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 800cdd2:	e01a      	b.n	800ce0a <lwip_setsockopt_impl+0x282>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 800cdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd6:	2b03      	cmp	r3, #3
 800cdd8:	d801      	bhi.n	800cdde <lwip_setsockopt_impl+0x256>
 800cdda:	2316      	movs	r3, #22
 800cddc:	e06e      	b.n	800cebc <lwip_setsockopt_impl+0x334>
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d004      	beq.n	800cdf0 <lwip_setsockopt_impl+0x268>
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d101      	bne.n	800cdf4 <lwip_setsockopt_impl+0x26c>
 800cdf0:	2316      	movs	r3, #22
 800cdf2:	e063      	b.n	800cebc <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	685b      	ldr	r3, [r3, #4]
 800cdfe:	b2d2      	uxtb	r2, r2
 800ce00:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 800ce02:	e002      	b.n	800ce0a <lwip_setsockopt_impl+0x282>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800ce04:	235c      	movs	r3, #92	; 0x5c
 800ce06:	61fb      	str	r3, [r7, #28]
          break;
 800ce08:	bf00      	nop
      }  /* switch (optname) */
      break;
 800ce0a:	e056      	b.n	800ceba <lwip_setsockopt_impl+0x332>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	2b03      	cmp	r3, #3
 800ce10:	d801      	bhi.n	800ce16 <lwip_setsockopt_impl+0x28e>
 800ce12:	2316      	movs	r3, #22
 800ce14:	e052      	b.n	800cebc <lwip_setsockopt_impl+0x334>
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d004      	beq.n	800ce28 <lwip_setsockopt_impl+0x2a0>
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d101      	bne.n	800ce2c <lwip_setsockopt_impl+0x2a4>
 800ce28:	2316      	movs	r3, #22
 800ce2a:	e047      	b.n	800cebc <lwip_setsockopt_impl+0x334>
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce36:	2b10      	cmp	r3, #16
 800ce38:	d001      	beq.n	800ce3e <lwip_setsockopt_impl+0x2b6>
 800ce3a:	235c      	movs	r3, #92	; 0x5c
 800ce3c:	e03e      	b.n	800cebc <lwip_setsockopt_impl+0x334>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	7d1b      	ldrb	r3, [r3, #20]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d101      	bne.n	800ce4e <lwip_setsockopt_impl+0x2c6>
        done_socket(sock);
        return EINVAL;
 800ce4a:	2316      	movs	r3, #22
 800ce4c:	e036      	b.n	800cebc <lwip_setsockopt_impl+0x334>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d003      	beq.n	800ce5c <lwip_setsockopt_impl+0x2d4>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d01c      	beq.n	800ce94 <lwip_setsockopt_impl+0x30c>
 800ce5a:	e023      	b.n	800cea4 <lwip_setsockopt_impl+0x31c>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d00b      	beq.n	800ce7c <lwip_setsockopt_impl+0x2f4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	8b5a      	ldrh	r2, [r3, #26]
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce76:	b292      	uxth	r2, r2
 800ce78:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 800ce7a:	e016      	b.n	800ceaa <lwip_setsockopt_impl+0x322>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	8b5a      	ldrh	r2, [r3, #26]
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce8e:	b292      	uxth	r2, r2
 800ce90:	835a      	strh	r2, [r3, #26]
          break;
 800ce92:	e00a      	b.n	800ceaa <lwip_setsockopt_impl+0x322>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 800cea2:	e002      	b.n	800ceaa <lwip_setsockopt_impl+0x322>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800cea4:	235c      	movs	r3, #92	; 0x5c
 800cea6:	61fb      	str	r3, [r7, #28]
          break;
 800cea8:	bf00      	nop
      }  /* switch (optname) */
      break;
 800ceaa:	e006      	b.n	800ceba <lwip_setsockopt_impl+0x332>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 800ceac:	235c      	movs	r3, #92	; 0x5c
 800ceae:	61fb      	str	r3, [r7, #28]
          break;
 800ceb0:	bf00      	nop
      }  /* switch (optname) */
      break;
 800ceb2:	e002      	b.n	800ceba <lwip_setsockopt_impl+0x332>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 800ceb4:	235c      	movs	r3, #92	; 0x5c
 800ceb6:	61fb      	str	r3, [r7, #28]
      break;
 800ceb8:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 800ceba:	69fb      	ldr	r3, [r7, #28]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3720      	adds	r7, #32
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	0801c474 	.word	0x0801c474
 800cec8:	0801c818 	.word	0x0801c818
 800cecc:	0801c4c8 	.word	0x0801c4c8

0800ced0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ceda:	f008 fa4f 	bl	801537c <sys_timeouts_sleeptime>
 800cede:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee6:	d10b      	bne.n	800cf00 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800cee8:	4813      	ldr	r0, [pc, #76]	; (800cf38 <tcpip_timeouts_mbox_fetch+0x68>)
 800ceea:	f00b fc30 	bl	801874e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ceee:	2200      	movs	r2, #0
 800cef0:	6839      	ldr	r1, [r7, #0]
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f00b fb06 	bl	8018504 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800cef8:	480f      	ldr	r0, [pc, #60]	; (800cf38 <tcpip_timeouts_mbox_fetch+0x68>)
 800cefa:	f00b fc19 	bl	8018730 <sys_mutex_lock>
    return;
 800cefe:	e018      	b.n	800cf32 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d102      	bne.n	800cf0c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800cf06:	f008 f9ff 	bl	8015308 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cf0a:	e7e6      	b.n	800ceda <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800cf0c:	480a      	ldr	r0, [pc, #40]	; (800cf38 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf0e:	f00b fc1e 	bl	801874e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	6839      	ldr	r1, [r7, #0]
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f00b faf4 	bl	8018504 <sys_arch_mbox_fetch>
 800cf1c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cf1e:	4806      	ldr	r0, [pc, #24]	; (800cf38 <tcpip_timeouts_mbox_fetch+0x68>)
 800cf20:	f00b fc06 	bl	8018730 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2a:	d102      	bne.n	800cf32 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800cf2c:	f008 f9ec 	bl	8015308 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800cf30:	e7d3      	b.n	800ceda <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	20014e48 	.word	0x20014e48

0800cf3c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cf44:	4810      	ldr	r0, [pc, #64]	; (800cf88 <tcpip_thread+0x4c>)
 800cf46:	f00b fbf3 	bl	8018730 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cf4a:	4b10      	ldr	r3, [pc, #64]	; (800cf8c <tcpip_thread+0x50>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d005      	beq.n	800cf5e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cf52:	4b0e      	ldr	r3, [pc, #56]	; (800cf8c <tcpip_thread+0x50>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a0e      	ldr	r2, [pc, #56]	; (800cf90 <tcpip_thread+0x54>)
 800cf58:	6812      	ldr	r2, [r2, #0]
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cf5e:	f107 030c 	add.w	r3, r7, #12
 800cf62:	4619      	mov	r1, r3
 800cf64:	480b      	ldr	r0, [pc, #44]	; (800cf94 <tcpip_thread+0x58>)
 800cf66:	f7ff ffb3 	bl	800ced0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d106      	bne.n	800cf7e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cf70:	4b09      	ldr	r3, [pc, #36]	; (800cf98 <tcpip_thread+0x5c>)
 800cf72:	2291      	movs	r2, #145	; 0x91
 800cf74:	4909      	ldr	r1, [pc, #36]	; (800cf9c <tcpip_thread+0x60>)
 800cf76:	480a      	ldr	r0, [pc, #40]	; (800cfa0 <tcpip_thread+0x64>)
 800cf78:	f00d fee0 	bl	801ad3c <iprintf>
      continue;
 800cf7c:	e003      	b.n	800cf86 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	4618      	mov	r0, r3
 800cf82:	f000 f80f 	bl	800cfa4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cf86:	e7ea      	b.n	800cf5e <tcpip_thread+0x22>
 800cf88:	20014e48 	.word	0x20014e48
 800cf8c:	20011588 	.word	0x20011588
 800cf90:	2001158c 	.word	0x2001158c
 800cf94:	20011590 	.word	0x20011590
 800cf98:	0801c844 	.word	0x0801c844
 800cf9c:	0801c874 	.word	0x0801c874
 800cfa0:	0801c894 	.word	0x0801c894

0800cfa4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d026      	beq.n	800d002 <tcpip_thread_handle_msg+0x5e>
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	dc2b      	bgt.n	800d010 <tcpip_thread_handle_msg+0x6c>
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <tcpip_thread_handle_msg+0x1e>
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d015      	beq.n	800cfec <tcpip_thread_handle_msg+0x48>
 800cfc0:	e026      	b.n	800d010 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	6850      	ldr	r0, [r2, #4]
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	6892      	ldr	r2, [r2, #8]
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4798      	blx	r3
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d004      	beq.n	800cfe2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f001 fd45 	bl	800ea6c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cfe2:	6879      	ldr	r1, [r7, #4]
 800cfe4:	2009      	movs	r0, #9
 800cfe6:	f000 fe33 	bl	800dc50 <memp_free>
      break;
 800cfea:	e018      	b.n	800d01e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	6892      	ldr	r2, [r2, #8]
 800cff4:	4610      	mov	r0, r2
 800cff6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cff8:	6879      	ldr	r1, [r7, #4]
 800cffa:	2008      	movs	r0, #8
 800cffc:	f000 fe28 	bl	800dc50 <memp_free>
      break;
 800d000:	e00d      	b.n	800d01e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	6892      	ldr	r2, [r2, #8]
 800d00a:	4610      	mov	r0, r2
 800d00c:	4798      	blx	r3
      break;
 800d00e:	e006      	b.n	800d01e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d010:	4b05      	ldr	r3, [pc, #20]	; (800d028 <tcpip_thread_handle_msg+0x84>)
 800d012:	22cf      	movs	r2, #207	; 0xcf
 800d014:	4905      	ldr	r1, [pc, #20]	; (800d02c <tcpip_thread_handle_msg+0x88>)
 800d016:	4806      	ldr	r0, [pc, #24]	; (800d030 <tcpip_thread_handle_msg+0x8c>)
 800d018:	f00d fe90 	bl	801ad3c <iprintf>
      break;
 800d01c:	bf00      	nop
  }
}
 800d01e:	bf00      	nop
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	0801c844 	.word	0x0801c844
 800d02c:	0801c874 	.word	0x0801c874
 800d030:	0801c894 	.word	0x0801c894

0800d034 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b086      	sub	sp, #24
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d040:	481a      	ldr	r0, [pc, #104]	; (800d0ac <tcpip_inpkt+0x78>)
 800d042:	f00b faa7 	bl	8018594 <sys_mbox_valid>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d105      	bne.n	800d058 <tcpip_inpkt+0x24>
 800d04c:	4b18      	ldr	r3, [pc, #96]	; (800d0b0 <tcpip_inpkt+0x7c>)
 800d04e:	22fc      	movs	r2, #252	; 0xfc
 800d050:	4918      	ldr	r1, [pc, #96]	; (800d0b4 <tcpip_inpkt+0x80>)
 800d052:	4819      	ldr	r0, [pc, #100]	; (800d0b8 <tcpip_inpkt+0x84>)
 800d054:	f00d fe72 	bl	801ad3c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d058:	2009      	movs	r0, #9
 800d05a:	f000 fda7 	bl	800dbac <memp_malloc>
 800d05e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d102      	bne.n	800d06c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d066:	f04f 33ff 	mov.w	r3, #4294967295
 800d06a:	e01a      	b.n	800d0a2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	2200      	movs	r2, #0
 800d070:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	68fa      	ldr	r2, [r7, #12]
 800d076:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d084:	6979      	ldr	r1, [r7, #20]
 800d086:	4809      	ldr	r0, [pc, #36]	; (800d0ac <tcpip_inpkt+0x78>)
 800d088:	f00b fa22 	bl	80184d0 <sys_mbox_trypost>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d006      	beq.n	800d0a0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d092:	6979      	ldr	r1, [r7, #20]
 800d094:	2009      	movs	r0, #9
 800d096:	f000 fddb 	bl	800dc50 <memp_free>
    return ERR_MEM;
 800d09a:	f04f 33ff 	mov.w	r3, #4294967295
 800d09e:	e000      	b.n	800d0a2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d0a0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3718      	adds	r7, #24
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop
 800d0ac:	20011590 	.word	0x20011590
 800d0b0:	0801c844 	.word	0x0801c844
 800d0b4:	0801c8bc 	.word	0x0801c8bc
 800d0b8:	0801c894 	.word	0x0801c894

0800d0bc <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d0cc:	f003 0318 	and.w	r3, r3, #24
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d006      	beq.n	800d0e2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d0d4:	4a08      	ldr	r2, [pc, #32]	; (800d0f8 <tcpip_input+0x3c>)
 800d0d6:	6839      	ldr	r1, [r7, #0]
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff ffab 	bl	800d034 <tcpip_inpkt>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	e005      	b.n	800d0ee <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d0e2:	4a06      	ldr	r2, [pc, #24]	; (800d0fc <tcpip_input+0x40>)
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f7ff ffa4 	bl	800d034 <tcpip_inpkt>
 800d0ec:	4603      	mov	r3, r0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	080182cd 	.word	0x080182cd
 800d0fc:	080170dd 	.word	0x080170dd

0800d100 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d10a:	4819      	ldr	r0, [pc, #100]	; (800d170 <tcpip_try_callback+0x70>)
 800d10c:	f00b fa42 	bl	8018594 <sys_mbox_valid>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d106      	bne.n	800d124 <tcpip_try_callback+0x24>
 800d116:	4b17      	ldr	r3, [pc, #92]	; (800d174 <tcpip_try_callback+0x74>)
 800d118:	f240 125d 	movw	r2, #349	; 0x15d
 800d11c:	4916      	ldr	r1, [pc, #88]	; (800d178 <tcpip_try_callback+0x78>)
 800d11e:	4817      	ldr	r0, [pc, #92]	; (800d17c <tcpip_try_callback+0x7c>)
 800d120:	f00d fe0c 	bl	801ad3c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d124:	2008      	movs	r0, #8
 800d126:	f000 fd41 	bl	800dbac <memp_malloc>
 800d12a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d102      	bne.n	800d138 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d132:	f04f 33ff 	mov.w	r3, #4294967295
 800d136:	e017      	b.n	800d168 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2201      	movs	r2, #1
 800d13c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	687a      	ldr	r2, [r7, #4]
 800d142:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d14a:	68f9      	ldr	r1, [r7, #12]
 800d14c:	4808      	ldr	r0, [pc, #32]	; (800d170 <tcpip_try_callback+0x70>)
 800d14e:	f00b f9bf 	bl	80184d0 <sys_mbox_trypost>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d006      	beq.n	800d166 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d158:	68f9      	ldr	r1, [r7, #12]
 800d15a:	2008      	movs	r0, #8
 800d15c:	f000 fd78 	bl	800dc50 <memp_free>
    return ERR_MEM;
 800d160:	f04f 33ff 	mov.w	r3, #4294967295
 800d164:	e000      	b.n	800d168 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d166:	2300      	movs	r3, #0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	20011590 	.word	0x20011590
 800d174:	0801c844 	.word	0x0801c844
 800d178:	0801c8bc 	.word	0x0801c8bc
 800d17c:	0801c894 	.word	0x0801c894

0800d180 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800d18c:	4806      	ldr	r0, [pc, #24]	; (800d1a8 <tcpip_send_msg_wait_sem+0x28>)
 800d18e:	f00b facf 	bl	8018730 <sys_mutex_lock>
  fn(apimsg);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	68b8      	ldr	r0, [r7, #8]
 800d196:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800d198:	4803      	ldr	r0, [pc, #12]	; (800d1a8 <tcpip_send_msg_wait_sem+0x28>)
 800d19a:	f00b fad8 	bl	801874e <sys_mutex_unlock>
  return ERR_OK;
 800d19e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	20014e48 	.word	0x20014e48

0800d1ac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af02      	add	r7, sp, #8
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d1b6:	f000 f871 	bl	800d29c <lwip_init>

  tcpip_init_done = initfunc;
 800d1ba:	4a17      	ldr	r2, [pc, #92]	; (800d218 <tcpip_init+0x6c>)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d1c0:	4a16      	ldr	r2, [pc, #88]	; (800d21c <tcpip_init+0x70>)
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d1c6:	2106      	movs	r1, #6
 800d1c8:	4815      	ldr	r0, [pc, #84]	; (800d220 <tcpip_init+0x74>)
 800d1ca:	f00b f955 	bl	8018478 <sys_mbox_new>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d006      	beq.n	800d1e2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d1d4:	4b13      	ldr	r3, [pc, #76]	; (800d224 <tcpip_init+0x78>)
 800d1d6:	f240 2261 	movw	r2, #609	; 0x261
 800d1da:	4913      	ldr	r1, [pc, #76]	; (800d228 <tcpip_init+0x7c>)
 800d1dc:	4813      	ldr	r0, [pc, #76]	; (800d22c <tcpip_init+0x80>)
 800d1de:	f00d fdad 	bl	801ad3c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d1e2:	4813      	ldr	r0, [pc, #76]	; (800d230 <tcpip_init+0x84>)
 800d1e4:	f00b fa8e 	bl	8018704 <sys_mutex_new>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d006      	beq.n	800d1fc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d1ee:	4b0d      	ldr	r3, [pc, #52]	; (800d224 <tcpip_init+0x78>)
 800d1f0:	f240 2265 	movw	r2, #613	; 0x265
 800d1f4:	490f      	ldr	r1, [pc, #60]	; (800d234 <tcpip_init+0x88>)
 800d1f6:	480d      	ldr	r0, [pc, #52]	; (800d22c <tcpip_init+0x80>)
 800d1f8:	f00d fda0 	bl	801ad3c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d1fc:	2318      	movs	r3, #24
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d204:	2200      	movs	r2, #0
 800d206:	490c      	ldr	r1, [pc, #48]	; (800d238 <tcpip_init+0x8c>)
 800d208:	480c      	ldr	r0, [pc, #48]	; (800d23c <tcpip_init+0x90>)
 800d20a:	f00b faad 	bl	8018768 <sys_thread_new>
}
 800d20e:	bf00      	nop
 800d210:	3708      	adds	r7, #8
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	20011588 	.word	0x20011588
 800d21c:	2001158c 	.word	0x2001158c
 800d220:	20011590 	.word	0x20011590
 800d224:	0801c844 	.word	0x0801c844
 800d228:	0801c8cc 	.word	0x0801c8cc
 800d22c:	0801c894 	.word	0x0801c894
 800d230:	20014e48 	.word	0x20014e48
 800d234:	0801c8f0 	.word	0x0801c8f0
 800d238:	0800cf3d 	.word	0x0800cf3d
 800d23c:	0801c914 	.word	0x0801c914

0800d240 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	4603      	mov	r3, r0
 800d248:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d24a:	88fb      	ldrh	r3, [r7, #6]
 800d24c:	021b      	lsls	r3, r3, #8
 800d24e:	b21a      	sxth	r2, r3
 800d250:	88fb      	ldrh	r3, [r7, #6]
 800d252:	0a1b      	lsrs	r3, r3, #8
 800d254:	b29b      	uxth	r3, r3
 800d256:	b21b      	sxth	r3, r3
 800d258:	4313      	orrs	r3, r2
 800d25a:	b21b      	sxth	r3, r3
 800d25c:	b29b      	uxth	r3, r3
}
 800d25e:	4618      	mov	r0, r3
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr

0800d26a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d26a:	b480      	push	{r7}
 800d26c:	b083      	sub	sp, #12
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	061a      	lsls	r2, r3, #24
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	021b      	lsls	r3, r3, #8
 800d27a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d27e:	431a      	orrs	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	0a1b      	lsrs	r3, r3, #8
 800d284:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d288:	431a      	orrs	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	0e1b      	lsrs	r3, r3, #24
 800d28e:	4313      	orrs	r3, r2
}
 800d290:	4618      	mov	r0, r3
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d2a6:	f00b fa21 	bl	80186ec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d2aa:	f000 f8d5 	bl	800d458 <mem_init>
  memp_init();
 800d2ae:	f000 fc31 	bl	800db14 <memp_init>
  pbuf_init();
  netif_init();
 800d2b2:	f000 fcf7 	bl	800dca4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d2b6:	f008 f899 	bl	80153ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d2ba:	f001 fe81 	bl	800efc0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d2be:	f007 ffdb 	bl	8015278 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d2c2:	bf00      	nop
 800d2c4:	3708      	adds	r7, #8
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
	...

0800d2cc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d2d6:	4b05      	ldr	r3, [pc, #20]	; (800d2ec <ptr_to_mem+0x20>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	88fb      	ldrh	r3, [r7, #6]
 800d2dc:	4413      	add	r3, r2
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	370c      	adds	r7, #12
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr
 800d2ea:	bf00      	nop
 800d2ec:	20011594 	.word	0x20011594

0800d2f0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d2f8:	4b05      	ldr	r3, [pc, #20]	; (800d310 <mem_to_ptr+0x20>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	b29b      	uxth	r3, r3
}
 800d302:	4618      	mov	r0, r3
 800d304:	370c      	adds	r7, #12
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
 800d30e:	bf00      	nop
 800d310:	20011594 	.word	0x20011594

0800d314 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d314:	b590      	push	{r4, r7, lr}
 800d316:	b085      	sub	sp, #20
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d31c:	4b45      	ldr	r3, [pc, #276]	; (800d434 <plug_holes+0x120>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	429a      	cmp	r2, r3
 800d324:	d206      	bcs.n	800d334 <plug_holes+0x20>
 800d326:	4b44      	ldr	r3, [pc, #272]	; (800d438 <plug_holes+0x124>)
 800d328:	f240 12df 	movw	r2, #479	; 0x1df
 800d32c:	4943      	ldr	r1, [pc, #268]	; (800d43c <plug_holes+0x128>)
 800d32e:	4844      	ldr	r0, [pc, #272]	; (800d440 <plug_holes+0x12c>)
 800d330:	f00d fd04 	bl	801ad3c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d334:	4b43      	ldr	r3, [pc, #268]	; (800d444 <plug_holes+0x130>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d306      	bcc.n	800d34c <plug_holes+0x38>
 800d33e:	4b3e      	ldr	r3, [pc, #248]	; (800d438 <plug_holes+0x124>)
 800d340:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d344:	4940      	ldr	r1, [pc, #256]	; (800d448 <plug_holes+0x134>)
 800d346:	483e      	ldr	r0, [pc, #248]	; (800d440 <plug_holes+0x12c>)
 800d348:	f00d fcf8 	bl	801ad3c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	791b      	ldrb	r3, [r3, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d006      	beq.n	800d362 <plug_holes+0x4e>
 800d354:	4b38      	ldr	r3, [pc, #224]	; (800d438 <plug_holes+0x124>)
 800d356:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d35a:	493c      	ldr	r1, [pc, #240]	; (800d44c <plug_holes+0x138>)
 800d35c:	4838      	ldr	r0, [pc, #224]	; (800d440 <plug_holes+0x12c>)
 800d35e:	f00d fced 	bl	801ad3c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d36a:	d906      	bls.n	800d37a <plug_holes+0x66>
 800d36c:	4b32      	ldr	r3, [pc, #200]	; (800d438 <plug_holes+0x124>)
 800d36e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d372:	4937      	ldr	r1, [pc, #220]	; (800d450 <plug_holes+0x13c>)
 800d374:	4832      	ldr	r0, [pc, #200]	; (800d440 <plug_holes+0x12c>)
 800d376:	f00d fce1 	bl	801ad3c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff ffa4 	bl	800d2cc <ptr_to_mem>
 800d384:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d024      	beq.n	800d3d8 <plug_holes+0xc4>
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	791b      	ldrb	r3, [r3, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d120      	bne.n	800d3d8 <plug_holes+0xc4>
 800d396:	4b2b      	ldr	r3, [pc, #172]	; (800d444 <plug_holes+0x130>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d01b      	beq.n	800d3d8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d3a0:	4b2c      	ldr	r3, [pc, #176]	; (800d454 <plug_holes+0x140>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d102      	bne.n	800d3b0 <plug_holes+0x9c>
      lfree = mem;
 800d3aa:	4a2a      	ldr	r2, [pc, #168]	; (800d454 <plug_holes+0x140>)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	881a      	ldrh	r2, [r3, #0]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	881b      	ldrh	r3, [r3, #0]
 800d3bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3c0:	d00a      	beq.n	800d3d8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff ff80 	bl	800d2cc <ptr_to_mem>
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7ff ff8e 	bl	800d2f0 <mem_to_ptr>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	885b      	ldrh	r3, [r3, #2]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff ff75 	bl	800d2cc <ptr_to_mem>
 800d3e2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d3e4:	68ba      	ldr	r2, [r7, #8]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d01f      	beq.n	800d42c <plug_holes+0x118>
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	791b      	ldrb	r3, [r3, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d11b      	bne.n	800d42c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d3f4:	4b17      	ldr	r3, [pc, #92]	; (800d454 <plug_holes+0x140>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d102      	bne.n	800d404 <plug_holes+0xf0>
      lfree = pmem;
 800d3fe:	4a15      	ldr	r2, [pc, #84]	; (800d454 <plug_holes+0x140>)
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	881a      	ldrh	r2, [r3, #0]
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	881b      	ldrh	r3, [r3, #0]
 800d410:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d414:	d00a      	beq.n	800d42c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	881b      	ldrh	r3, [r3, #0]
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff ff56 	bl	800d2cc <ptr_to_mem>
 800d420:	4604      	mov	r4, r0
 800d422:	68b8      	ldr	r0, [r7, #8]
 800d424:	f7ff ff64 	bl	800d2f0 <mem_to_ptr>
 800d428:	4603      	mov	r3, r0
 800d42a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d42c:	bf00      	nop
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	bd90      	pop	{r4, r7, pc}
 800d434:	20011594 	.word	0x20011594
 800d438:	0801c924 	.word	0x0801c924
 800d43c:	0801c954 	.word	0x0801c954
 800d440:	0801c96c 	.word	0x0801c96c
 800d444:	20011598 	.word	0x20011598
 800d448:	0801c994 	.word	0x0801c994
 800d44c:	0801c9b0 	.word	0x0801c9b0
 800d450:	0801c9cc 	.word	0x0801c9cc
 800d454:	200115a0 	.word	0x200115a0

0800d458 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d45e:	4b1f      	ldr	r3, [pc, #124]	; (800d4dc <mem_init+0x84>)
 800d460:	3303      	adds	r3, #3
 800d462:	f023 0303 	bic.w	r3, r3, #3
 800d466:	461a      	mov	r2, r3
 800d468:	4b1d      	ldr	r3, [pc, #116]	; (800d4e0 <mem_init+0x88>)
 800d46a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d46c:	4b1c      	ldr	r3, [pc, #112]	; (800d4e0 <mem_init+0x88>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d478:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d486:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d48a:	f7ff ff1f 	bl	800d2cc <ptr_to_mem>
 800d48e:	4603      	mov	r3, r0
 800d490:	4a14      	ldr	r2, [pc, #80]	; (800d4e4 <mem_init+0x8c>)
 800d492:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d494:	4b13      	ldr	r3, [pc, #76]	; (800d4e4 <mem_init+0x8c>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2201      	movs	r2, #1
 800d49a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d49c:	4b11      	ldr	r3, [pc, #68]	; (800d4e4 <mem_init+0x8c>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d4a4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d4a6:	4b0f      	ldr	r3, [pc, #60]	; (800d4e4 <mem_init+0x8c>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d4ae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d4b0:	4b0b      	ldr	r3, [pc, #44]	; (800d4e0 <mem_init+0x88>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a0c      	ldr	r2, [pc, #48]	; (800d4e8 <mem_init+0x90>)
 800d4b6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d4b8:	480c      	ldr	r0, [pc, #48]	; (800d4ec <mem_init+0x94>)
 800d4ba:	f00b f923 	bl	8018704 <sys_mutex_new>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d006      	beq.n	800d4d2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d4c4:	4b0a      	ldr	r3, [pc, #40]	; (800d4f0 <mem_init+0x98>)
 800d4c6:	f240 221f 	movw	r2, #543	; 0x21f
 800d4ca:	490a      	ldr	r1, [pc, #40]	; (800d4f4 <mem_init+0x9c>)
 800d4cc:	480a      	ldr	r0, [pc, #40]	; (800d4f8 <mem_init+0xa0>)
 800d4ce:	f00d fc35 	bl	801ad3c <iprintf>
  }
}
 800d4d2:	bf00      	nop
 800d4d4:	3708      	adds	r7, #8
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	20014e64 	.word	0x20014e64
 800d4e0:	20011594 	.word	0x20011594
 800d4e4:	20011598 	.word	0x20011598
 800d4e8:	200115a0 	.word	0x200115a0
 800d4ec:	2001159c 	.word	0x2001159c
 800d4f0:	0801c924 	.word	0x0801c924
 800d4f4:	0801c9f8 	.word	0x0801c9f8
 800d4f8:	0801c96c 	.word	0x0801c96c

0800d4fc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7ff fef3 	bl	800d2f0 <mem_to_ptr>
 800d50a:	4603      	mov	r3, r0
 800d50c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff feda 	bl	800d2cc <ptr_to_mem>
 800d518:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	885b      	ldrh	r3, [r3, #2]
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff fed4 	bl	800d2cc <ptr_to_mem>
 800d524:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	881b      	ldrh	r3, [r3, #0]
 800d52a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d52e:	d818      	bhi.n	800d562 <mem_link_valid+0x66>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	885b      	ldrh	r3, [r3, #2]
 800d534:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d538:	d813      	bhi.n	800d562 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d53e:	8afa      	ldrh	r2, [r7, #22]
 800d540:	429a      	cmp	r2, r3
 800d542:	d004      	beq.n	800d54e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	881b      	ldrh	r3, [r3, #0]
 800d548:	8afa      	ldrh	r2, [r7, #22]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d109      	bne.n	800d562 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d54e:	4b08      	ldr	r3, [pc, #32]	; (800d570 <mem_link_valid+0x74>)
 800d550:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d552:	693a      	ldr	r2, [r7, #16]
 800d554:	429a      	cmp	r2, r3
 800d556:	d006      	beq.n	800d566 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	885b      	ldrh	r3, [r3, #2]
 800d55c:	8afa      	ldrh	r2, [r7, #22]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d001      	beq.n	800d566 <mem_link_valid+0x6a>
    return 0;
 800d562:	2300      	movs	r3, #0
 800d564:	e000      	b.n	800d568 <mem_link_valid+0x6c>
  }
  return 1;
 800d566:	2301      	movs	r3, #1
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3718      	adds	r7, #24
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	20011598 	.word	0x20011598

0800d574 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b088      	sub	sp, #32
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d070      	beq.n	800d664 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f003 0303 	and.w	r3, r3, #3
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00d      	beq.n	800d5a8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d58c:	4b37      	ldr	r3, [pc, #220]	; (800d66c <mem_free+0xf8>)
 800d58e:	f240 2273 	movw	r2, #627	; 0x273
 800d592:	4937      	ldr	r1, [pc, #220]	; (800d670 <mem_free+0xfc>)
 800d594:	4837      	ldr	r0, [pc, #220]	; (800d674 <mem_free+0x100>)
 800d596:	f00d fbd1 	bl	801ad3c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d59a:	f00b f905 	bl	80187a8 <sys_arch_protect>
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f00b f90f 	bl	80187c4 <sys_arch_unprotect>
    return;
 800d5a6:	e05e      	b.n	800d666 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3b08      	subs	r3, #8
 800d5ac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d5ae:	4b32      	ldr	r3, [pc, #200]	; (800d678 <mem_free+0x104>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	69fa      	ldr	r2, [r7, #28]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d306      	bcc.n	800d5c6 <mem_free+0x52>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f103 020c 	add.w	r2, r3, #12
 800d5be:	4b2f      	ldr	r3, [pc, #188]	; (800d67c <mem_free+0x108>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d90d      	bls.n	800d5e2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d5c6:	4b29      	ldr	r3, [pc, #164]	; (800d66c <mem_free+0xf8>)
 800d5c8:	f240 227f 	movw	r2, #639	; 0x27f
 800d5cc:	492c      	ldr	r1, [pc, #176]	; (800d680 <mem_free+0x10c>)
 800d5ce:	4829      	ldr	r0, [pc, #164]	; (800d674 <mem_free+0x100>)
 800d5d0:	f00d fbb4 	bl	801ad3c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5d4:	f00b f8e8 	bl	80187a8 <sys_arch_protect>
 800d5d8:	6138      	str	r0, [r7, #16]
 800d5da:	6938      	ldr	r0, [r7, #16]
 800d5dc:	f00b f8f2 	bl	80187c4 <sys_arch_unprotect>
    return;
 800d5e0:	e041      	b.n	800d666 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d5e2:	4828      	ldr	r0, [pc, #160]	; (800d684 <mem_free+0x110>)
 800d5e4:	f00b f8a4 	bl	8018730 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	791b      	ldrb	r3, [r3, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d110      	bne.n	800d612 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d5f0:	4b1e      	ldr	r3, [pc, #120]	; (800d66c <mem_free+0xf8>)
 800d5f2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d5f6:	4924      	ldr	r1, [pc, #144]	; (800d688 <mem_free+0x114>)
 800d5f8:	481e      	ldr	r0, [pc, #120]	; (800d674 <mem_free+0x100>)
 800d5fa:	f00d fb9f 	bl	801ad3c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d5fe:	4821      	ldr	r0, [pc, #132]	; (800d684 <mem_free+0x110>)
 800d600:	f00b f8a5 	bl	801874e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d604:	f00b f8d0 	bl	80187a8 <sys_arch_protect>
 800d608:	6178      	str	r0, [r7, #20]
 800d60a:	6978      	ldr	r0, [r7, #20]
 800d60c:	f00b f8da 	bl	80187c4 <sys_arch_unprotect>
    return;
 800d610:	e029      	b.n	800d666 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d612:	69f8      	ldr	r0, [r7, #28]
 800d614:	f7ff ff72 	bl	800d4fc <mem_link_valid>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d110      	bne.n	800d640 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d61e:	4b13      	ldr	r3, [pc, #76]	; (800d66c <mem_free+0xf8>)
 800d620:	f240 2295 	movw	r2, #661	; 0x295
 800d624:	4919      	ldr	r1, [pc, #100]	; (800d68c <mem_free+0x118>)
 800d626:	4813      	ldr	r0, [pc, #76]	; (800d674 <mem_free+0x100>)
 800d628:	f00d fb88 	bl	801ad3c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d62c:	4815      	ldr	r0, [pc, #84]	; (800d684 <mem_free+0x110>)
 800d62e:	f00b f88e 	bl	801874e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d632:	f00b f8b9 	bl	80187a8 <sys_arch_protect>
 800d636:	61b8      	str	r0, [r7, #24]
 800d638:	69b8      	ldr	r0, [r7, #24]
 800d63a:	f00b f8c3 	bl	80187c4 <sys_arch_unprotect>
    return;
 800d63e:	e012      	b.n	800d666 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	2200      	movs	r2, #0
 800d644:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d646:	4b12      	ldr	r3, [pc, #72]	; (800d690 <mem_free+0x11c>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	69fa      	ldr	r2, [r7, #28]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d202      	bcs.n	800d656 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d650:	4a0f      	ldr	r2, [pc, #60]	; (800d690 <mem_free+0x11c>)
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d656:	69f8      	ldr	r0, [r7, #28]
 800d658:	f7ff fe5c 	bl	800d314 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d65c:	4809      	ldr	r0, [pc, #36]	; (800d684 <mem_free+0x110>)
 800d65e:	f00b f876 	bl	801874e <sys_mutex_unlock>
 800d662:	e000      	b.n	800d666 <mem_free+0xf2>
    return;
 800d664:	bf00      	nop
}
 800d666:	3720      	adds	r7, #32
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	0801c924 	.word	0x0801c924
 800d670:	0801ca14 	.word	0x0801ca14
 800d674:	0801c96c 	.word	0x0801c96c
 800d678:	20011594 	.word	0x20011594
 800d67c:	20011598 	.word	0x20011598
 800d680:	0801ca38 	.word	0x0801ca38
 800d684:	2001159c 	.word	0x2001159c
 800d688:	0801ca54 	.word	0x0801ca54
 800d68c:	0801ca7c 	.word	0x0801ca7c
 800d690:	200115a0 	.word	0x200115a0

0800d694 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b088      	sub	sp, #32
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	460b      	mov	r3, r1
 800d69e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d6a0:	887b      	ldrh	r3, [r7, #2]
 800d6a2:	3303      	adds	r3, #3
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f023 0303 	bic.w	r3, r3, #3
 800d6aa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d6ac:	8bfb      	ldrh	r3, [r7, #30]
 800d6ae:	2b0b      	cmp	r3, #11
 800d6b0:	d801      	bhi.n	800d6b6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d6b2:	230c      	movs	r3, #12
 800d6b4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d6b6:	8bfb      	ldrh	r3, [r7, #30]
 800d6b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6bc:	d803      	bhi.n	800d6c6 <mem_trim+0x32>
 800d6be:	8bfa      	ldrh	r2, [r7, #30]
 800d6c0:	887b      	ldrh	r3, [r7, #2]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d201      	bcs.n	800d6ca <mem_trim+0x36>
    return NULL;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	e0d8      	b.n	800d87c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d6ca:	4b6e      	ldr	r3, [pc, #440]	; (800d884 <mem_trim+0x1f0>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d304      	bcc.n	800d6de <mem_trim+0x4a>
 800d6d4:	4b6c      	ldr	r3, [pc, #432]	; (800d888 <mem_trim+0x1f4>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d306      	bcc.n	800d6ec <mem_trim+0x58>
 800d6de:	4b6b      	ldr	r3, [pc, #428]	; (800d88c <mem_trim+0x1f8>)
 800d6e0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d6e4:	496a      	ldr	r1, [pc, #424]	; (800d890 <mem_trim+0x1fc>)
 800d6e6:	486b      	ldr	r0, [pc, #428]	; (800d894 <mem_trim+0x200>)
 800d6e8:	f00d fb28 	bl	801ad3c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d6ec:	4b65      	ldr	r3, [pc, #404]	; (800d884 <mem_trim+0x1f0>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d304      	bcc.n	800d700 <mem_trim+0x6c>
 800d6f6:	4b64      	ldr	r3, [pc, #400]	; (800d888 <mem_trim+0x1f4>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d307      	bcc.n	800d710 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d700:	f00b f852 	bl	80187a8 <sys_arch_protect>
 800d704:	60b8      	str	r0, [r7, #8]
 800d706:	68b8      	ldr	r0, [r7, #8]
 800d708:	f00b f85c 	bl	80187c4 <sys_arch_unprotect>
    return rmem;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	e0b5      	b.n	800d87c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	3b08      	subs	r3, #8
 800d714:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d716:	69b8      	ldr	r0, [r7, #24]
 800d718:	f7ff fdea 	bl	800d2f0 <mem_to_ptr>
 800d71c:	4603      	mov	r3, r0
 800d71e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	881a      	ldrh	r2, [r3, #0]
 800d724:	8afb      	ldrh	r3, [r7, #22]
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	b29b      	uxth	r3, r3
 800d72a:	3b08      	subs	r3, #8
 800d72c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d72e:	8bfa      	ldrh	r2, [r7, #30]
 800d730:	8abb      	ldrh	r3, [r7, #20]
 800d732:	429a      	cmp	r2, r3
 800d734:	d906      	bls.n	800d744 <mem_trim+0xb0>
 800d736:	4b55      	ldr	r3, [pc, #340]	; (800d88c <mem_trim+0x1f8>)
 800d738:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d73c:	4956      	ldr	r1, [pc, #344]	; (800d898 <mem_trim+0x204>)
 800d73e:	4855      	ldr	r0, [pc, #340]	; (800d894 <mem_trim+0x200>)
 800d740:	f00d fafc 	bl	801ad3c <iprintf>
  if (newsize > size) {
 800d744:	8bfa      	ldrh	r2, [r7, #30]
 800d746:	8abb      	ldrh	r3, [r7, #20]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d901      	bls.n	800d750 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d74c:	2300      	movs	r3, #0
 800d74e:	e095      	b.n	800d87c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d750:	8bfa      	ldrh	r2, [r7, #30]
 800d752:	8abb      	ldrh	r3, [r7, #20]
 800d754:	429a      	cmp	r2, r3
 800d756:	d101      	bne.n	800d75c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	e08f      	b.n	800d87c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d75c:	484f      	ldr	r0, [pc, #316]	; (800d89c <mem_trim+0x208>)
 800d75e:	f00a ffe7 	bl	8018730 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	4618      	mov	r0, r3
 800d768:	f7ff fdb0 	bl	800d2cc <ptr_to_mem>
 800d76c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	791b      	ldrb	r3, [r3, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d13f      	bne.n	800d7f6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	881b      	ldrh	r3, [r3, #0]
 800d77a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d77e:	d106      	bne.n	800d78e <mem_trim+0xfa>
 800d780:	4b42      	ldr	r3, [pc, #264]	; (800d88c <mem_trim+0x1f8>)
 800d782:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d786:	4946      	ldr	r1, [pc, #280]	; (800d8a0 <mem_trim+0x20c>)
 800d788:	4842      	ldr	r0, [pc, #264]	; (800d894 <mem_trim+0x200>)
 800d78a:	f00d fad7 	bl	801ad3c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	881b      	ldrh	r3, [r3, #0]
 800d792:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d794:	8afa      	ldrh	r2, [r7, #22]
 800d796:	8bfb      	ldrh	r3, [r7, #30]
 800d798:	4413      	add	r3, r2
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	3308      	adds	r3, #8
 800d79e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d7a0:	4b40      	ldr	r3, [pc, #256]	; (800d8a4 <mem_trim+0x210>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	693a      	ldr	r2, [r7, #16]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d106      	bne.n	800d7b8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d7aa:	89fb      	ldrh	r3, [r7, #14]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7ff fd8d 	bl	800d2cc <ptr_to_mem>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	4a3b      	ldr	r2, [pc, #236]	; (800d8a4 <mem_trim+0x210>)
 800d7b6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d7b8:	89fb      	ldrh	r3, [r7, #14]
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7ff fd86 	bl	800d2cc <ptr_to_mem>
 800d7c0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	89ba      	ldrh	r2, [r7, #12]
 800d7cc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	8afa      	ldrh	r2, [r7, #22]
 800d7d2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d7d4:	69bb      	ldr	r3, [r7, #24]
 800d7d6:	89fa      	ldrh	r2, [r7, #14]
 800d7d8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d7da:	693b      	ldr	r3, [r7, #16]
 800d7dc:	881b      	ldrh	r3, [r3, #0]
 800d7de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d7e2:	d047      	beq.n	800d874 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff fd6f 	bl	800d2cc <ptr_to_mem>
 800d7ee:	4602      	mov	r2, r0
 800d7f0:	89fb      	ldrh	r3, [r7, #14]
 800d7f2:	8053      	strh	r3, [r2, #2]
 800d7f4:	e03e      	b.n	800d874 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d7f6:	8bfb      	ldrh	r3, [r7, #30]
 800d7f8:	f103 0214 	add.w	r2, r3, #20
 800d7fc:	8abb      	ldrh	r3, [r7, #20]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d838      	bhi.n	800d874 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d802:	8afa      	ldrh	r2, [r7, #22]
 800d804:	8bfb      	ldrh	r3, [r7, #30]
 800d806:	4413      	add	r3, r2
 800d808:	b29b      	uxth	r3, r3
 800d80a:	3308      	adds	r3, #8
 800d80c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	881b      	ldrh	r3, [r3, #0]
 800d812:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d816:	d106      	bne.n	800d826 <mem_trim+0x192>
 800d818:	4b1c      	ldr	r3, [pc, #112]	; (800d88c <mem_trim+0x1f8>)
 800d81a:	f240 3216 	movw	r2, #790	; 0x316
 800d81e:	4920      	ldr	r1, [pc, #128]	; (800d8a0 <mem_trim+0x20c>)
 800d820:	481c      	ldr	r0, [pc, #112]	; (800d894 <mem_trim+0x200>)
 800d822:	f00d fa8b 	bl	801ad3c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d826:	89fb      	ldrh	r3, [r7, #14]
 800d828:	4618      	mov	r0, r3
 800d82a:	f7ff fd4f 	bl	800d2cc <ptr_to_mem>
 800d82e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d830:	4b1c      	ldr	r3, [pc, #112]	; (800d8a4 <mem_trim+0x210>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	693a      	ldr	r2, [r7, #16]
 800d836:	429a      	cmp	r2, r3
 800d838:	d202      	bcs.n	800d840 <mem_trim+0x1ac>
      lfree = mem2;
 800d83a:	4a1a      	ldr	r2, [pc, #104]	; (800d8a4 <mem_trim+0x210>)
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	2200      	movs	r2, #0
 800d844:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	881a      	ldrh	r2, [r3, #0]
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	8afa      	ldrh	r2, [r7, #22]
 800d852:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	89fa      	ldrh	r2, [r7, #14]
 800d858:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d862:	d007      	beq.n	800d874 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	881b      	ldrh	r3, [r3, #0]
 800d868:	4618      	mov	r0, r3
 800d86a:	f7ff fd2f 	bl	800d2cc <ptr_to_mem>
 800d86e:	4602      	mov	r2, r0
 800d870:	89fb      	ldrh	r3, [r7, #14]
 800d872:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d874:	4809      	ldr	r0, [pc, #36]	; (800d89c <mem_trim+0x208>)
 800d876:	f00a ff6a 	bl	801874e <sys_mutex_unlock>
  return rmem;
 800d87a:	687b      	ldr	r3, [r7, #4]
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3720      	adds	r7, #32
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	20011594 	.word	0x20011594
 800d888:	20011598 	.word	0x20011598
 800d88c:	0801c924 	.word	0x0801c924
 800d890:	0801cab0 	.word	0x0801cab0
 800d894:	0801c96c 	.word	0x0801c96c
 800d898:	0801cac8 	.word	0x0801cac8
 800d89c:	2001159c 	.word	0x2001159c
 800d8a0:	0801cae8 	.word	0x0801cae8
 800d8a4:	200115a0 	.word	0x200115a0

0800d8a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b088      	sub	sp, #32
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d8b2:	88fb      	ldrh	r3, [r7, #6]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <mem_malloc+0x14>
    return NULL;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	e0e2      	b.n	800da82 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d8bc:	88fb      	ldrh	r3, [r7, #6]
 800d8be:	3303      	adds	r3, #3
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	f023 0303 	bic.w	r3, r3, #3
 800d8c6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d8c8:	8bbb      	ldrh	r3, [r7, #28]
 800d8ca:	2b0b      	cmp	r3, #11
 800d8cc:	d801      	bhi.n	800d8d2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d8ce:	230c      	movs	r3, #12
 800d8d0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d8d2:	8bbb      	ldrh	r3, [r7, #28]
 800d8d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d8d8:	d803      	bhi.n	800d8e2 <mem_malloc+0x3a>
 800d8da:	8bba      	ldrh	r2, [r7, #28]
 800d8dc:	88fb      	ldrh	r3, [r7, #6]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d201      	bcs.n	800d8e6 <mem_malloc+0x3e>
    return NULL;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	e0cd      	b.n	800da82 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d8e6:	4869      	ldr	r0, [pc, #420]	; (800da8c <mem_malloc+0x1e4>)
 800d8e8:	f00a ff22 	bl	8018730 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d8ec:	4b68      	ldr	r3, [pc, #416]	; (800da90 <mem_malloc+0x1e8>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f7ff fcfd 	bl	800d2f0 <mem_to_ptr>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	83fb      	strh	r3, [r7, #30]
 800d8fa:	e0b7      	b.n	800da6c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d8fc:	8bfb      	ldrh	r3, [r7, #30]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7ff fce4 	bl	800d2cc <ptr_to_mem>
 800d904:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	791b      	ldrb	r3, [r3, #4]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f040 80a7 	bne.w	800da5e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	461a      	mov	r2, r3
 800d916:	8bfb      	ldrh	r3, [r7, #30]
 800d918:	1ad3      	subs	r3, r2, r3
 800d91a:	f1a3 0208 	sub.w	r2, r3, #8
 800d91e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d920:	429a      	cmp	r2, r3
 800d922:	f0c0 809c 	bcc.w	800da5e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	881b      	ldrh	r3, [r3, #0]
 800d92a:	461a      	mov	r2, r3
 800d92c:	8bfb      	ldrh	r3, [r7, #30]
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	f1a3 0208 	sub.w	r2, r3, #8
 800d934:	8bbb      	ldrh	r3, [r7, #28]
 800d936:	3314      	adds	r3, #20
 800d938:	429a      	cmp	r2, r3
 800d93a:	d333      	bcc.n	800d9a4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d93c:	8bfa      	ldrh	r2, [r7, #30]
 800d93e:	8bbb      	ldrh	r3, [r7, #28]
 800d940:	4413      	add	r3, r2
 800d942:	b29b      	uxth	r3, r3
 800d944:	3308      	adds	r3, #8
 800d946:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d948:	8a7b      	ldrh	r3, [r7, #18]
 800d94a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d94e:	d106      	bne.n	800d95e <mem_malloc+0xb6>
 800d950:	4b50      	ldr	r3, [pc, #320]	; (800da94 <mem_malloc+0x1ec>)
 800d952:	f240 3287 	movw	r2, #903	; 0x387
 800d956:	4950      	ldr	r1, [pc, #320]	; (800da98 <mem_malloc+0x1f0>)
 800d958:	4850      	ldr	r0, [pc, #320]	; (800da9c <mem_malloc+0x1f4>)
 800d95a:	f00d f9ef 	bl	801ad3c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d95e:	8a7b      	ldrh	r3, [r7, #18]
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff fcb3 	bl	800d2cc <ptr_to_mem>
 800d966:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	2200      	movs	r2, #0
 800d96c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	881a      	ldrh	r2, [r3, #0]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	8bfa      	ldrh	r2, [r7, #30]
 800d97a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	8a7a      	ldrh	r2, [r7, #18]
 800d980:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	2201      	movs	r2, #1
 800d986:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d990:	d00b      	beq.n	800d9aa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	881b      	ldrh	r3, [r3, #0]
 800d996:	4618      	mov	r0, r3
 800d998:	f7ff fc98 	bl	800d2cc <ptr_to_mem>
 800d99c:	4602      	mov	r2, r0
 800d99e:	8a7b      	ldrh	r3, [r7, #18]
 800d9a0:	8053      	strh	r3, [r2, #2]
 800d9a2:	e002      	b.n	800d9aa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d9aa:	4b39      	ldr	r3, [pc, #228]	; (800da90 <mem_malloc+0x1e8>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d127      	bne.n	800da04 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d9b4:	4b36      	ldr	r3, [pc, #216]	; (800da90 <mem_malloc+0x1e8>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d9ba:	e005      	b.n	800d9c8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	881b      	ldrh	r3, [r3, #0]
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff fc83 	bl	800d2cc <ptr_to_mem>
 800d9c6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	791b      	ldrb	r3, [r3, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d004      	beq.n	800d9da <mem_malloc+0x132>
 800d9d0:	4b33      	ldr	r3, [pc, #204]	; (800daa0 <mem_malloc+0x1f8>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	69ba      	ldr	r2, [r7, #24]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d1f0      	bne.n	800d9bc <mem_malloc+0x114>
          }
          lfree = cur;
 800d9da:	4a2d      	ldr	r2, [pc, #180]	; (800da90 <mem_malloc+0x1e8>)
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d9e0:	4b2b      	ldr	r3, [pc, #172]	; (800da90 <mem_malloc+0x1e8>)
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	4b2e      	ldr	r3, [pc, #184]	; (800daa0 <mem_malloc+0x1f8>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d00b      	beq.n	800da04 <mem_malloc+0x15c>
 800d9ec:	4b28      	ldr	r3, [pc, #160]	; (800da90 <mem_malloc+0x1e8>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	791b      	ldrb	r3, [r3, #4]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d006      	beq.n	800da04 <mem_malloc+0x15c>
 800d9f6:	4b27      	ldr	r3, [pc, #156]	; (800da94 <mem_malloc+0x1ec>)
 800d9f8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d9fc:	4929      	ldr	r1, [pc, #164]	; (800daa4 <mem_malloc+0x1fc>)
 800d9fe:	4827      	ldr	r0, [pc, #156]	; (800da9c <mem_malloc+0x1f4>)
 800da00:	f00d f99c 	bl	801ad3c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800da04:	4821      	ldr	r0, [pc, #132]	; (800da8c <mem_malloc+0x1e4>)
 800da06:	f00a fea2 	bl	801874e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800da0a:	8bba      	ldrh	r2, [r7, #28]
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	4413      	add	r3, r2
 800da10:	3308      	adds	r3, #8
 800da12:	4a23      	ldr	r2, [pc, #140]	; (800daa0 <mem_malloc+0x1f8>)
 800da14:	6812      	ldr	r2, [r2, #0]
 800da16:	4293      	cmp	r3, r2
 800da18:	d906      	bls.n	800da28 <mem_malloc+0x180>
 800da1a:	4b1e      	ldr	r3, [pc, #120]	; (800da94 <mem_malloc+0x1ec>)
 800da1c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800da20:	4921      	ldr	r1, [pc, #132]	; (800daa8 <mem_malloc+0x200>)
 800da22:	481e      	ldr	r0, [pc, #120]	; (800da9c <mem_malloc+0x1f4>)
 800da24:	f00d f98a 	bl	801ad3c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	f003 0303 	and.w	r3, r3, #3
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d006      	beq.n	800da40 <mem_malloc+0x198>
 800da32:	4b18      	ldr	r3, [pc, #96]	; (800da94 <mem_malloc+0x1ec>)
 800da34:	f240 32bb 	movw	r2, #955	; 0x3bb
 800da38:	491c      	ldr	r1, [pc, #112]	; (800daac <mem_malloc+0x204>)
 800da3a:	4818      	ldr	r0, [pc, #96]	; (800da9c <mem_malloc+0x1f4>)
 800da3c:	f00d f97e 	bl	801ad3c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	f003 0303 	and.w	r3, r3, #3
 800da46:	2b00      	cmp	r3, #0
 800da48:	d006      	beq.n	800da58 <mem_malloc+0x1b0>
 800da4a:	4b12      	ldr	r3, [pc, #72]	; (800da94 <mem_malloc+0x1ec>)
 800da4c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800da50:	4917      	ldr	r1, [pc, #92]	; (800dab0 <mem_malloc+0x208>)
 800da52:	4812      	ldr	r0, [pc, #72]	; (800da9c <mem_malloc+0x1f4>)
 800da54:	f00d f972 	bl	801ad3c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	3308      	adds	r3, #8
 800da5c:	e011      	b.n	800da82 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800da5e:	8bfb      	ldrh	r3, [r7, #30]
 800da60:	4618      	mov	r0, r3
 800da62:	f7ff fc33 	bl	800d2cc <ptr_to_mem>
 800da66:	4603      	mov	r3, r0
 800da68:	881b      	ldrh	r3, [r3, #0]
 800da6a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800da6c:	8bfa      	ldrh	r2, [r7, #30]
 800da6e:	8bbb      	ldrh	r3, [r7, #28]
 800da70:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800da74:	429a      	cmp	r2, r3
 800da76:	f4ff af41 	bcc.w	800d8fc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800da7a:	4804      	ldr	r0, [pc, #16]	; (800da8c <mem_malloc+0x1e4>)
 800da7c:	f00a fe67 	bl	801874e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	3720      	adds	r7, #32
 800da86:	46bd      	mov	sp, r7
 800da88:	bd80      	pop	{r7, pc}
 800da8a:	bf00      	nop
 800da8c:	2001159c 	.word	0x2001159c
 800da90:	200115a0 	.word	0x200115a0
 800da94:	0801c924 	.word	0x0801c924
 800da98:	0801cae8 	.word	0x0801cae8
 800da9c:	0801c96c 	.word	0x0801c96c
 800daa0:	20011598 	.word	0x20011598
 800daa4:	0801cafc 	.word	0x0801cafc
 800daa8:	0801cb18 	.word	0x0801cb18
 800daac:	0801cb48 	.word	0x0801cb48
 800dab0:	0801cb78 	.word	0x0801cb78

0800dab4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	689b      	ldr	r3, [r3, #8]
 800dac0:	2200      	movs	r2, #0
 800dac2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	3303      	adds	r3, #3
 800daca:	f023 0303 	bic.w	r3, r3, #3
 800dace:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800dad0:	2300      	movs	r3, #0
 800dad2:	60fb      	str	r3, [r7, #12]
 800dad4:	e011      	b.n	800dafa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	68ba      	ldr	r2, [r7, #8]
 800dae6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	881b      	ldrh	r3, [r3, #0]
 800daec:	461a      	mov	r2, r3
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	4413      	add	r3, r2
 800daf2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	3301      	adds	r3, #1
 800daf8:	60fb      	str	r3, [r7, #12]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	885b      	ldrh	r3, [r3, #2]
 800dafe:	461a      	mov	r2, r3
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	4293      	cmp	r3, r2
 800db04:	dbe7      	blt.n	800dad6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800db06:	bf00      	nop
 800db08:	bf00      	nop
 800db0a:	3714      	adds	r7, #20
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr

0800db14 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800db1a:	2300      	movs	r3, #0
 800db1c:	80fb      	strh	r3, [r7, #6]
 800db1e:	e009      	b.n	800db34 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800db20:	88fb      	ldrh	r3, [r7, #6]
 800db22:	4a08      	ldr	r2, [pc, #32]	; (800db44 <memp_init+0x30>)
 800db24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db28:	4618      	mov	r0, r3
 800db2a:	f7ff ffc3 	bl	800dab4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800db2e:	88fb      	ldrh	r3, [r7, #6]
 800db30:	3301      	adds	r3, #1
 800db32:	80fb      	strh	r3, [r7, #6]
 800db34:	88fb      	ldrh	r3, [r7, #6]
 800db36:	2b0c      	cmp	r3, #12
 800db38:	d9f2      	bls.n	800db20 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800db3a:	bf00      	nop
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	0801f5c8 	.word	0x0801f5c8

0800db48 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800db50:	f00a fe2a 	bl	80187a8 <sys_arch_protect>
 800db54:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d015      	beq.n	800db90 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	68ba      	ldr	r2, [r7, #8]
 800db6a:	6812      	ldr	r2, [r2, #0]
 800db6c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	f003 0303 	and.w	r3, r3, #3
 800db74:	2b00      	cmp	r3, #0
 800db76:	d006      	beq.n	800db86 <do_memp_malloc_pool+0x3e>
 800db78:	4b09      	ldr	r3, [pc, #36]	; (800dba0 <do_memp_malloc_pool+0x58>)
 800db7a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800db7e:	4909      	ldr	r1, [pc, #36]	; (800dba4 <do_memp_malloc_pool+0x5c>)
 800db80:	4809      	ldr	r0, [pc, #36]	; (800dba8 <do_memp_malloc_pool+0x60>)
 800db82:	f00d f8db 	bl	801ad3c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f00a fe1c 	bl	80187c4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	e003      	b.n	800db98 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f00a fe17 	bl	80187c4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	0801cb9c 	.word	0x0801cb9c
 800dba4:	0801cbcc 	.word	0x0801cbcc
 800dba8:	0801cbf0 	.word	0x0801cbf0

0800dbac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800dbb6:	79fb      	ldrb	r3, [r7, #7]
 800dbb8:	2b0c      	cmp	r3, #12
 800dbba:	d908      	bls.n	800dbce <memp_malloc+0x22>
 800dbbc:	4b0a      	ldr	r3, [pc, #40]	; (800dbe8 <memp_malloc+0x3c>)
 800dbbe:	f240 1257 	movw	r2, #343	; 0x157
 800dbc2:	490a      	ldr	r1, [pc, #40]	; (800dbec <memp_malloc+0x40>)
 800dbc4:	480a      	ldr	r0, [pc, #40]	; (800dbf0 <memp_malloc+0x44>)
 800dbc6:	f00d f8b9 	bl	801ad3c <iprintf>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e008      	b.n	800dbe0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800dbce:	79fb      	ldrb	r3, [r7, #7]
 800dbd0:	4a08      	ldr	r2, [pc, #32]	; (800dbf4 <memp_malloc+0x48>)
 800dbd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7ff ffb6 	bl	800db48 <do_memp_malloc_pool>
 800dbdc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dbde:	68fb      	ldr	r3, [r7, #12]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	0801cb9c 	.word	0x0801cb9c
 800dbec:	0801cc2c 	.word	0x0801cc2c
 800dbf0:	0801cbf0 	.word	0x0801cbf0
 800dbf4:	0801f5c8 	.word	0x0801f5c8

0800dbf8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	f003 0303 	and.w	r3, r3, #3
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d006      	beq.n	800dc1a <do_memp_free_pool+0x22>
 800dc0c:	4b0d      	ldr	r3, [pc, #52]	; (800dc44 <do_memp_free_pool+0x4c>)
 800dc0e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800dc12:	490d      	ldr	r1, [pc, #52]	; (800dc48 <do_memp_free_pool+0x50>)
 800dc14:	480d      	ldr	r0, [pc, #52]	; (800dc4c <do_memp_free_pool+0x54>)
 800dc16:	f00d f891 	bl	801ad3c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800dc1e:	f00a fdc3 	bl	80187a8 <sys_arch_protect>
 800dc22:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	689b      	ldr	r3, [r3, #8]
 800dc32:	68fa      	ldr	r2, [r7, #12]
 800dc34:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800dc36:	68b8      	ldr	r0, [r7, #8]
 800dc38:	f00a fdc4 	bl	80187c4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800dc3c:	bf00      	nop
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	0801cb9c 	.word	0x0801cb9c
 800dc48:	0801cc4c 	.word	0x0801cc4c
 800dc4c:	0801cbf0 	.word	0x0801cbf0

0800dc50 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	6039      	str	r1, [r7, #0]
 800dc5a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dc5c:	79fb      	ldrb	r3, [r7, #7]
 800dc5e:	2b0c      	cmp	r3, #12
 800dc60:	d907      	bls.n	800dc72 <memp_free+0x22>
 800dc62:	4b0c      	ldr	r3, [pc, #48]	; (800dc94 <memp_free+0x44>)
 800dc64:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dc68:	490b      	ldr	r1, [pc, #44]	; (800dc98 <memp_free+0x48>)
 800dc6a:	480c      	ldr	r0, [pc, #48]	; (800dc9c <memp_free+0x4c>)
 800dc6c:	f00d f866 	bl	801ad3c <iprintf>
 800dc70:	e00c      	b.n	800dc8c <memp_free+0x3c>

  if (mem == NULL) {
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d008      	beq.n	800dc8a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dc78:	79fb      	ldrb	r3, [r7, #7]
 800dc7a:	4a09      	ldr	r2, [pc, #36]	; (800dca0 <memp_free+0x50>)
 800dc7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc80:	6839      	ldr	r1, [r7, #0]
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff ffb8 	bl	800dbf8 <do_memp_free_pool>
 800dc88:	e000      	b.n	800dc8c <memp_free+0x3c>
    return;
 800dc8a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	0801cb9c 	.word	0x0801cb9c
 800dc98:	0801cc6c 	.word	0x0801cc6c
 800dc9c:	0801cbf0 	.word	0x0801cbf0
 800dca0:	0801f5c8 	.word	0x0801f5c8

0800dca4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dca4:	b480      	push	{r7}
 800dca6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dca8:	bf00      	nop
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
	...

0800dcb4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b086      	sub	sp, #24
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d108      	bne.n	800dcda <netif_add+0x26>
 800dcc8:	4b57      	ldr	r3, [pc, #348]	; (800de28 <netif_add+0x174>)
 800dcca:	f240 1227 	movw	r2, #295	; 0x127
 800dcce:	4957      	ldr	r1, [pc, #348]	; (800de2c <netif_add+0x178>)
 800dcd0:	4857      	ldr	r0, [pc, #348]	; (800de30 <netif_add+0x17c>)
 800dcd2:	f00d f833 	bl	801ad3c <iprintf>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	e0a2      	b.n	800de20 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d108      	bne.n	800dcf2 <netif_add+0x3e>
 800dce0:	4b51      	ldr	r3, [pc, #324]	; (800de28 <netif_add+0x174>)
 800dce2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dce6:	4953      	ldr	r1, [pc, #332]	; (800de34 <netif_add+0x180>)
 800dce8:	4851      	ldr	r0, [pc, #324]	; (800de30 <netif_add+0x17c>)
 800dcea:	f00d f827 	bl	801ad3c <iprintf>
 800dcee:	2300      	movs	r3, #0
 800dcf0:	e096      	b.n	800de20 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d101      	bne.n	800dcfc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dcf8:	4b4f      	ldr	r3, [pc, #316]	; (800de38 <netif_add+0x184>)
 800dcfa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d101      	bne.n	800dd06 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dd02:	4b4d      	ldr	r3, [pc, #308]	; (800de38 <netif_add+0x184>)
 800dd04:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dd0c:	4b4a      	ldr	r3, [pc, #296]	; (800de38 <netif_add+0x184>)
 800dd0e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2200      	movs	r2, #0
 800dd14:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	4a45      	ldr	r2, [pc, #276]	; (800de3c <netif_add+0x188>)
 800dd26:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6a3a      	ldr	r2, [r7, #32]
 800dd40:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dd42:	4b3f      	ldr	r3, [pc, #252]	; (800de40 <netif_add+0x18c>)
 800dd44:	781a      	ldrb	r2, [r3, #0]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd50:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	68b9      	ldr	r1, [r7, #8]
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f000 f913 	bl	800df84 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd60:	68f8      	ldr	r0, [r7, #12]
 800dd62:	4798      	blx	r3
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <netif_add+0xba>
    return NULL;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	e058      	b.n	800de20 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd74:	2bff      	cmp	r3, #255	; 0xff
 800dd76:	d103      	bne.n	800dd80 <netif_add+0xcc>
        netif->num = 0;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800dd80:	2300      	movs	r3, #0
 800dd82:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800dd84:	4b2f      	ldr	r3, [pc, #188]	; (800de44 <netif_add+0x190>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	617b      	str	r3, [r7, #20]
 800dd8a:	e02b      	b.n	800dde4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800dd8c:	697a      	ldr	r2, [r7, #20]
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d106      	bne.n	800dda2 <netif_add+0xee>
 800dd94:	4b24      	ldr	r3, [pc, #144]	; (800de28 <netif_add+0x174>)
 800dd96:	f240 128b 	movw	r2, #395	; 0x18b
 800dd9a:	492b      	ldr	r1, [pc, #172]	; (800de48 <netif_add+0x194>)
 800dd9c:	4824      	ldr	r0, [pc, #144]	; (800de30 <netif_add+0x17c>)
 800dd9e:	f00c ffcd 	bl	801ad3c <iprintf>
        num_netifs++;
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	3301      	adds	r3, #1
 800dda6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	2bff      	cmp	r3, #255	; 0xff
 800ddac:	dd06      	ble.n	800ddbc <netif_add+0x108>
 800ddae:	4b1e      	ldr	r3, [pc, #120]	; (800de28 <netif_add+0x174>)
 800ddb0:	f240 128d 	movw	r2, #397	; 0x18d
 800ddb4:	4925      	ldr	r1, [pc, #148]	; (800de4c <netif_add+0x198>)
 800ddb6:	481e      	ldr	r0, [pc, #120]	; (800de30 <netif_add+0x17c>)
 800ddb8:	f00c ffc0 	bl	801ad3c <iprintf>
        if (netif2->num == netif->num) {
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d108      	bne.n	800ddde <netif_add+0x12a>
          netif->num++;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	b2da      	uxtb	r2, r3
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800dddc:	e005      	b.n	800ddea <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	617b      	str	r3, [r7, #20]
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1d0      	bne.n	800dd8c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d1be      	bne.n	800dd6e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddf6:	2bfe      	cmp	r3, #254	; 0xfe
 800ddf8:	d103      	bne.n	800de02 <netif_add+0x14e>
    netif_num = 0;
 800ddfa:	4b11      	ldr	r3, [pc, #68]	; (800de40 <netif_add+0x18c>)
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	701a      	strb	r2, [r3, #0]
 800de00:	e006      	b.n	800de10 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de08:	3301      	adds	r3, #1
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	4b0c      	ldr	r3, [pc, #48]	; (800de40 <netif_add+0x18c>)
 800de0e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800de10:	4b0c      	ldr	r3, [pc, #48]	; (800de44 <netif_add+0x190>)
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800de18:	4a0a      	ldr	r2, [pc, #40]	; (800de44 <netif_add+0x190>)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800de1e:	68fb      	ldr	r3, [r7, #12]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	0801cc88 	.word	0x0801cc88
 800de2c:	0801cd1c 	.word	0x0801cd1c
 800de30:	0801ccd8 	.word	0x0801ccd8
 800de34:	0801cd38 	.word	0x0801cd38
 800de38:	0801f63c 	.word	0x0801f63c
 800de3c:	0800e25f 	.word	0x0800e25f
 800de40:	200115d8 	.word	0x200115d8
 800de44:	20018550 	.word	0x20018550
 800de48:	0801cd5c 	.word	0x0801cd5c
 800de4c:	0801cd70 	.word	0x0801cd70

0800de50 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800de5a:	6839      	ldr	r1, [r7, #0]
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f002 fee3 	bl	8010c28 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800de62:	6839      	ldr	r1, [r7, #0]
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f007 ff95 	bl	8015d94 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800de6a:	bf00      	nop
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
	...

0800de74 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b086      	sub	sp, #24
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d106      	bne.n	800de94 <netif_do_set_ipaddr+0x20>
 800de86:	4b1d      	ldr	r3, [pc, #116]	; (800defc <netif_do_set_ipaddr+0x88>)
 800de88:	f240 12cb 	movw	r2, #459	; 0x1cb
 800de8c:	491c      	ldr	r1, [pc, #112]	; (800df00 <netif_do_set_ipaddr+0x8c>)
 800de8e:	481d      	ldr	r0, [pc, #116]	; (800df04 <netif_do_set_ipaddr+0x90>)
 800de90:	f00c ff54 	bl	801ad3c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d106      	bne.n	800dea8 <netif_do_set_ipaddr+0x34>
 800de9a:	4b18      	ldr	r3, [pc, #96]	; (800defc <netif_do_set_ipaddr+0x88>)
 800de9c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800dea0:	4917      	ldr	r1, [pc, #92]	; (800df00 <netif_do_set_ipaddr+0x8c>)
 800dea2:	4818      	ldr	r0, [pc, #96]	; (800df04 <netif_do_set_ipaddr+0x90>)
 800dea4:	f00c ff4a 	bl	801ad3c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	3304      	adds	r3, #4
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d01c      	beq.n	800def0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	3304      	adds	r3, #4
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800dec6:	f107 0314 	add.w	r3, r7, #20
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff ffbf 	bl	800de50 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d002      	beq.n	800dede <netif_do_set_ipaddr+0x6a>
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	e000      	b.n	800dee0 <netif_do_set_ipaddr+0x6c>
 800dede:	2300      	movs	r3, #0
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dee4:	2101      	movs	r1, #1
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f000 f8d2 	bl	800e090 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800deec:	2301      	movs	r3, #1
 800deee:	e000      	b.n	800def2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	0801cc88 	.word	0x0801cc88
 800df00:	0801cda0 	.word	0x0801cda0
 800df04:	0801ccd8 	.word	0x0801ccd8

0800df08 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800df08:	b480      	push	{r7}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	3308      	adds	r3, #8
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d00a      	beq.n	800df38 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d002      	beq.n	800df2e <netif_do_set_netmask+0x26>
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	e000      	b.n	800df30 <netif_do_set_netmask+0x28>
 800df2e:	2300      	movs	r3, #0
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800df34:	2301      	movs	r3, #1
 800df36:	e000      	b.n	800df3a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3714      	adds	r7, #20
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800df46:	b480      	push	{r7}
 800df48:	b085      	sub	sp, #20
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	60f8      	str	r0, [r7, #12]
 800df4e:	60b9      	str	r1, [r7, #8]
 800df50:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	330c      	adds	r3, #12
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d00a      	beq.n	800df76 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d002      	beq.n	800df6c <netif_do_set_gw+0x26>
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	e000      	b.n	800df6e <netif_do_set_gw+0x28>
 800df6c:	2300      	movs	r3, #0
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800df72:	2301      	movs	r3, #1
 800df74:	e000      	b.n	800df78 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800df76:	2300      	movs	r3, #0
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3714      	adds	r7, #20
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b088      	sub	sp, #32
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
 800df90:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800df92:	2300      	movs	r3, #0
 800df94:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800df96:	2300      	movs	r3, #0
 800df98:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d101      	bne.n	800dfa4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dfa0:	4b1c      	ldr	r3, [pc, #112]	; (800e014 <netif_set_addr+0x90>)
 800dfa2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d101      	bne.n	800dfae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dfaa:	4b1a      	ldr	r3, [pc, #104]	; (800e014 <netif_set_addr+0x90>)
 800dfac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dfb4:	4b17      	ldr	r3, [pc, #92]	; (800e014 <netif_set_addr+0x90>)
 800dfb6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d003      	beq.n	800dfc6 <netif_set_addr+0x42>
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d101      	bne.n	800dfca <netif_set_addr+0x46>
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e000      	b.n	800dfcc <netif_set_addr+0x48>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d006      	beq.n	800dfe2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dfd4:	f107 0310 	add.w	r3, r7, #16
 800dfd8:	461a      	mov	r2, r3
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f7ff ff49 	bl	800de74 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dfe2:	69fa      	ldr	r2, [r7, #28]
 800dfe4:	6879      	ldr	r1, [r7, #4]
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f7ff ff8e 	bl	800df08 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dfec:	69ba      	ldr	r2, [r7, #24]
 800dfee:	6839      	ldr	r1, [r7, #0]
 800dff0:	68f8      	ldr	r0, [r7, #12]
 800dff2:	f7ff ffa8 	bl	800df46 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d106      	bne.n	800e00a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dffc:	f107 0310 	add.w	r3, r7, #16
 800e000:	461a      	mov	r2, r3
 800e002:	68b9      	ldr	r1, [r7, #8]
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f7ff ff35 	bl	800de74 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e00a:	bf00      	nop
 800e00c:	3720      	adds	r7, #32
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	0801f63c 	.word	0x0801f63c

0800e018 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e020:	4a04      	ldr	r2, [pc, #16]	; (800e034 <netif_set_default+0x1c>)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e026:	bf00      	nop
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	20018554 	.word	0x20018554

0800e038 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d107      	bne.n	800e056 <netif_set_up+0x1e>
 800e046:	4b0f      	ldr	r3, [pc, #60]	; (800e084 <netif_set_up+0x4c>)
 800e048:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e04c:	490e      	ldr	r1, [pc, #56]	; (800e088 <netif_set_up+0x50>)
 800e04e:	480f      	ldr	r0, [pc, #60]	; (800e08c <netif_set_up+0x54>)
 800e050:	f00c fe74 	bl	801ad3c <iprintf>
 800e054:	e013      	b.n	800e07e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e05c:	f003 0301 	and.w	r3, r3, #1
 800e060:	2b00      	cmp	r3, #0
 800e062:	d10c      	bne.n	800e07e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e06a:	f043 0301 	orr.w	r3, r3, #1
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e076:	2103      	movs	r1, #3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f000 f809 	bl	800e090 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	0801cc88 	.word	0x0801cc88
 800e088:	0801ce10 	.word	0x0801ce10
 800e08c:	0801ccd8 	.word	0x0801ccd8

0800e090 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d106      	bne.n	800e0b0 <netif_issue_reports+0x20>
 800e0a2:	4b18      	ldr	r3, [pc, #96]	; (800e104 <netif_issue_reports+0x74>)
 800e0a4:	f240 326d 	movw	r2, #877	; 0x36d
 800e0a8:	4917      	ldr	r1, [pc, #92]	; (800e108 <netif_issue_reports+0x78>)
 800e0aa:	4818      	ldr	r0, [pc, #96]	; (800e10c <netif_issue_reports+0x7c>)
 800e0ac:	f00c fe46 	bl	801ad3c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0b6:	f003 0304 	and.w	r3, r3, #4
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d01e      	beq.n	800e0fc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0c4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d017      	beq.n	800e0fc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e0cc:	78fb      	ldrb	r3, [r7, #3]
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d013      	beq.n	800e0fe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	3304      	adds	r3, #4
 800e0da:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d00e      	beq.n	800e0fe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0e6:	f003 0308 	and.w	r3, r3, #8
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d007      	beq.n	800e0fe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	3304      	adds	r3, #4
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f008 fdb7 	bl	8016c68 <etharp_request>
 800e0fa:	e000      	b.n	800e0fe <netif_issue_reports+0x6e>
    return;
 800e0fc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	0801cc88 	.word	0x0801cc88
 800e108:	0801ce2c 	.word	0x0801ce2c
 800e10c:	0801ccd8 	.word	0x0801ccd8

0800e110 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d107      	bne.n	800e12e <netif_set_down+0x1e>
 800e11e:	4b12      	ldr	r3, [pc, #72]	; (800e168 <netif_set_down+0x58>)
 800e120:	f240 329b 	movw	r2, #923	; 0x39b
 800e124:	4911      	ldr	r1, [pc, #68]	; (800e16c <netif_set_down+0x5c>)
 800e126:	4812      	ldr	r0, [pc, #72]	; (800e170 <netif_set_down+0x60>)
 800e128:	f00c fe08 	bl	801ad3c <iprintf>
 800e12c:	e019      	b.n	800e162 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d012      	beq.n	800e162 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e142:	f023 0301 	bic.w	r3, r3, #1
 800e146:	b2da      	uxtb	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e154:	f003 0308 	and.w	r3, r3, #8
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d002      	beq.n	800e162 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f008 f941 	bl	80163e4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	0801cc88 	.word	0x0801cc88
 800e16c:	0801ce50 	.word	0x0801ce50
 800e170:	0801ccd8 	.word	0x0801ccd8

0800e174 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d107      	bne.n	800e192 <netif_set_link_up+0x1e>
 800e182:	4b13      	ldr	r3, [pc, #76]	; (800e1d0 <netif_set_link_up+0x5c>)
 800e184:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e188:	4912      	ldr	r1, [pc, #72]	; (800e1d4 <netif_set_link_up+0x60>)
 800e18a:	4813      	ldr	r0, [pc, #76]	; (800e1d8 <netif_set_link_up+0x64>)
 800e18c:	f00c fdd6 	bl	801ad3c <iprintf>
 800e190:	e01b      	b.n	800e1ca <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e198:	f003 0304 	and.w	r3, r3, #4
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d114      	bne.n	800e1ca <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1a6:	f043 0304 	orr.w	r3, r3, #4
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e1b2:	2103      	movs	r1, #3
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7ff ff6b 	bl	800e090 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	69db      	ldr	r3, [r3, #28]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d003      	beq.n	800e1ca <netif_set_link_up+0x56>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	69db      	ldr	r3, [r3, #28]
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	0801cc88 	.word	0x0801cc88
 800e1d4:	0801ce70 	.word	0x0801ce70
 800e1d8:	0801ccd8 	.word	0x0801ccd8

0800e1dc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d107      	bne.n	800e1fa <netif_set_link_down+0x1e>
 800e1ea:	4b11      	ldr	r3, [pc, #68]	; (800e230 <netif_set_link_down+0x54>)
 800e1ec:	f240 4206 	movw	r2, #1030	; 0x406
 800e1f0:	4910      	ldr	r1, [pc, #64]	; (800e234 <netif_set_link_down+0x58>)
 800e1f2:	4811      	ldr	r0, [pc, #68]	; (800e238 <netif_set_link_down+0x5c>)
 800e1f4:	f00c fda2 	bl	801ad3c <iprintf>
 800e1f8:	e017      	b.n	800e22a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e200:	f003 0304 	and.w	r3, r3, #4
 800e204:	2b00      	cmp	r3, #0
 800e206:	d010      	beq.n	800e22a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e20e:	f023 0304 	bic.w	r3, r3, #4
 800e212:	b2da      	uxtb	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	69db      	ldr	r3, [r3, #28]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d003      	beq.n	800e22a <netif_set_link_down+0x4e>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	69db      	ldr	r3, [r3, #28]
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	0801cc88 	.word	0x0801cc88
 800e234:	0801ce94 	.word	0x0801ce94
 800e238:	0801ccd8 	.word	0x0801ccd8

0800e23c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d002      	beq.n	800e252 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	61da      	str	r2, [r3, #28]
  }
}
 800e252:	bf00      	nop
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr

0800e25e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e25e:	b480      	push	{r7}
 800e260:	b085      	sub	sp, #20
 800e262:	af00      	add	r7, sp, #0
 800e264:	60f8      	str	r0, [r7, #12]
 800e266:	60b9      	str	r1, [r7, #8]
 800e268:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e26a:	f06f 030b 	mvn.w	r3, #11
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
	...

0800e27c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
 800e282:	4603      	mov	r3, r0
 800e284:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e286:	79fb      	ldrb	r3, [r7, #7]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d013      	beq.n	800e2b4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e28c:	4b0d      	ldr	r3, [pc, #52]	; (800e2c4 <netif_get_by_index+0x48>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	60fb      	str	r3, [r7, #12]
 800e292:	e00c      	b.n	800e2ae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e29a:	3301      	adds	r3, #1
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	79fa      	ldrb	r2, [r7, #7]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d101      	bne.n	800e2a8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	e006      	b.n	800e2b6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	60fb      	str	r3, [r7, #12]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1ef      	bne.n	800e294 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr
 800e2c2:	bf00      	nop
 800e2c4:	20018550 	.word	0x20018550

0800e2c8 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d101      	bne.n	800e2da <netif_find+0x12>
    return NULL;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	e028      	b.n	800e32c <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	3302      	adds	r3, #2
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f00c f812 	bl	801a308 <atoi>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 800e2e8:	4b12      	ldr	r3, [pc, #72]	; (800e334 <netif_find+0x6c>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	60fb      	str	r3, [r7, #12]
 800e2ee:	e019      	b.n	800e324 <netif_find+0x5c>
    if (num == netif->num &&
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2f6:	7afa      	ldrb	r2, [r7, #11]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d110      	bne.n	800e31e <netif_find+0x56>
        name[0] == netif->name[0] &&
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	781a      	ldrb	r2, [r3, #0]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    if (num == netif->num &&
 800e306:	429a      	cmp	r2, r3
 800e308:	d109      	bne.n	800e31e <netif_find+0x56>
        name[1] == netif->name[1]) {
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	3301      	adds	r3, #1
 800e30e:	781a      	ldrb	r2, [r3, #0]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
        name[0] == netif->name[0] &&
 800e316:	429a      	cmp	r2, r3
 800e318:	d101      	bne.n	800e31e <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	e006      	b.n	800e32c <netif_find+0x64>
  NETIF_FOREACH(netif) {
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	60fb      	str	r3, [r7, #12]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1e2      	bne.n	800e2f0 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	20018550 	.word	0x20018550

0800e338 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e33e:	f00a fa33 	bl	80187a8 <sys_arch_protect>
 800e342:	6038      	str	r0, [r7, #0]
 800e344:	4b0d      	ldr	r3, [pc, #52]	; (800e37c <pbuf_free_ooseq+0x44>)
 800e346:	2200      	movs	r2, #0
 800e348:	701a      	strb	r2, [r3, #0]
 800e34a:	6838      	ldr	r0, [r7, #0]
 800e34c:	f00a fa3a 	bl	80187c4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e350:	4b0b      	ldr	r3, [pc, #44]	; (800e380 <pbuf_free_ooseq+0x48>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	607b      	str	r3, [r7, #4]
 800e356:	e00a      	b.n	800e36e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d003      	beq.n	800e368 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f002 fc9f 	bl	8010ca4 <tcp_free_ooseq>
      return;
 800e366:	e005      	b.n	800e374 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	607b      	str	r3, [r7, #4]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d1f1      	bne.n	800e358 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e374:	3708      	adds	r7, #8
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	20018558 	.word	0x20018558
 800e380:	20018560 	.word	0x20018560

0800e384 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e38c:	f7ff ffd4 	bl	800e338 <pbuf_free_ooseq>
}
 800e390:	bf00      	nop
 800e392:	3708      	adds	r7, #8
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e39e:	f00a fa03 	bl	80187a8 <sys_arch_protect>
 800e3a2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e3a4:	4b0f      	ldr	r3, [pc, #60]	; (800e3e4 <pbuf_pool_is_empty+0x4c>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e3aa:	4b0e      	ldr	r3, [pc, #56]	; (800e3e4 <pbuf_pool_is_empty+0x4c>)
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f00a fa07 	bl	80187c4 <sys_arch_unprotect>

  if (!queued) {
 800e3b6:	78fb      	ldrb	r3, [r7, #3]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d10f      	bne.n	800e3dc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e3bc:	2100      	movs	r1, #0
 800e3be:	480a      	ldr	r0, [pc, #40]	; (800e3e8 <pbuf_pool_is_empty+0x50>)
 800e3c0:	f7fe fe9e 	bl	800d100 <tcpip_try_callback>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d008      	beq.n	800e3dc <pbuf_pool_is_empty+0x44>
 800e3ca:	f00a f9ed 	bl	80187a8 <sys_arch_protect>
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	4b04      	ldr	r3, [pc, #16]	; (800e3e4 <pbuf_pool_is_empty+0x4c>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	701a      	strb	r2, [r3, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f00a f9f4 	bl	80187c4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e3dc:	bf00      	nop
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	20018558 	.word	0x20018558
 800e3e8:	0800e385 	.word	0x0800e385

0800e3ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b085      	sub	sp, #20
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	4611      	mov	r1, r2
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	460b      	mov	r3, r1
 800e3fc:	80fb      	strh	r3, [r7, #6]
 800e3fe:	4613      	mov	r3, r2
 800e400:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	88fa      	ldrh	r2, [r7, #6]
 800e412:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	88ba      	ldrh	r2, [r7, #4]
 800e418:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e41a:	8b3b      	ldrh	r3, [r7, #24]
 800e41c:	b2da      	uxtb	r2, r3
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	7f3a      	ldrb	r2, [r7, #28]
 800e426:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2201      	movs	r2, #1
 800e42c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	73da      	strb	r2, [r3, #15]
}
 800e434:	bf00      	nop
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr

0800e440 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b08c      	sub	sp, #48	; 0x30
 800e444:	af02      	add	r7, sp, #8
 800e446:	4603      	mov	r3, r0
 800e448:	71fb      	strb	r3, [r7, #7]
 800e44a:	460b      	mov	r3, r1
 800e44c:	80bb      	strh	r3, [r7, #4]
 800e44e:	4613      	mov	r3, r2
 800e450:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e452:	79fb      	ldrb	r3, [r7, #7]
 800e454:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e456:	887b      	ldrh	r3, [r7, #2]
 800e458:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e45c:	d07f      	beq.n	800e55e <pbuf_alloc+0x11e>
 800e45e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e462:	f300 80c8 	bgt.w	800e5f6 <pbuf_alloc+0x1b6>
 800e466:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e46a:	d010      	beq.n	800e48e <pbuf_alloc+0x4e>
 800e46c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e470:	f300 80c1 	bgt.w	800e5f6 <pbuf_alloc+0x1b6>
 800e474:	2b01      	cmp	r3, #1
 800e476:	d002      	beq.n	800e47e <pbuf_alloc+0x3e>
 800e478:	2b41      	cmp	r3, #65	; 0x41
 800e47a:	f040 80bc 	bne.w	800e5f6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e47e:	887a      	ldrh	r2, [r7, #2]
 800e480:	88bb      	ldrh	r3, [r7, #4]
 800e482:	4619      	mov	r1, r3
 800e484:	2000      	movs	r0, #0
 800e486:	f000 f8d1 	bl	800e62c <pbuf_alloc_reference>
 800e48a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e48c:	e0bd      	b.n	800e60a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e48e:	2300      	movs	r3, #0
 800e490:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e492:	2300      	movs	r3, #0
 800e494:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e496:	88bb      	ldrh	r3, [r7, #4]
 800e498:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e49a:	200c      	movs	r0, #12
 800e49c:	f7ff fb86 	bl	800dbac <memp_malloc>
 800e4a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d109      	bne.n	800e4bc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e4a8:	f7ff ff76 	bl	800e398 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d002      	beq.n	800e4b8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e4b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4b4:	f000 fada 	bl	800ea6c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	e0a7      	b.n	800e60c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e4bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4be:	3303      	adds	r3, #3
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	f023 0303 	bic.w	r3, r3, #3
 800e4c6:	b29b      	uxth	r3, r3
 800e4c8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	8b7a      	ldrh	r2, [r7, #26]
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	bf28      	it	cs
 800e4d4:	4613      	movcs	r3, r2
 800e4d6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e4d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4da:	3310      	adds	r3, #16
 800e4dc:	693a      	ldr	r2, [r7, #16]
 800e4de:	4413      	add	r3, r2
 800e4e0:	3303      	adds	r3, #3
 800e4e2:	f023 0303 	bic.w	r3, r3, #3
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	89f9      	ldrh	r1, [r7, #14]
 800e4ea:	8b7a      	ldrh	r2, [r7, #26]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	887b      	ldrh	r3, [r7, #2]
 800e4f2:	9300      	str	r3, [sp, #0]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	4601      	mov	r1, r0
 800e4f8:	6938      	ldr	r0, [r7, #16]
 800e4fa:	f7ff ff77 	bl	800e3ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	f003 0303 	and.w	r3, r3, #3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d006      	beq.n	800e518 <pbuf_alloc+0xd8>
 800e50a:	4b42      	ldr	r3, [pc, #264]	; (800e614 <pbuf_alloc+0x1d4>)
 800e50c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e510:	4941      	ldr	r1, [pc, #260]	; (800e618 <pbuf_alloc+0x1d8>)
 800e512:	4842      	ldr	r0, [pc, #264]	; (800e61c <pbuf_alloc+0x1dc>)
 800e514:	f00c fc12 	bl	801ad3c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e518:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e51a:	3303      	adds	r3, #3
 800e51c:	f023 0303 	bic.w	r3, r3, #3
 800e520:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e524:	d106      	bne.n	800e534 <pbuf_alloc+0xf4>
 800e526:	4b3b      	ldr	r3, [pc, #236]	; (800e614 <pbuf_alloc+0x1d4>)
 800e528:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e52c:	493c      	ldr	r1, [pc, #240]	; (800e620 <pbuf_alloc+0x1e0>)
 800e52e:	483b      	ldr	r0, [pc, #236]	; (800e61c <pbuf_alloc+0x1dc>)
 800e530:	f00c fc04 	bl	801ad3c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	2b00      	cmp	r3, #0
 800e538:	d102      	bne.n	800e540 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	627b      	str	r3, [r7, #36]	; 0x24
 800e53e:	e002      	b.n	800e546 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	693a      	ldr	r2, [r7, #16]
 800e544:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e54a:	8b7a      	ldrh	r2, [r7, #26]
 800e54c:	89fb      	ldrh	r3, [r7, #14]
 800e54e:	1ad3      	subs	r3, r2, r3
 800e550:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e556:	8b7b      	ldrh	r3, [r7, #26]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d19e      	bne.n	800e49a <pbuf_alloc+0x5a>
      break;
 800e55c:	e055      	b.n	800e60a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e55e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e560:	3303      	adds	r3, #3
 800e562:	b29b      	uxth	r3, r3
 800e564:	f023 0303 	bic.w	r3, r3, #3
 800e568:	b29a      	uxth	r2, r3
 800e56a:	88bb      	ldrh	r3, [r7, #4]
 800e56c:	3303      	adds	r3, #3
 800e56e:	b29b      	uxth	r3, r3
 800e570:	f023 0303 	bic.w	r3, r3, #3
 800e574:	b29b      	uxth	r3, r3
 800e576:	4413      	add	r3, r2
 800e578:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e57a:	8b3b      	ldrh	r3, [r7, #24]
 800e57c:	3310      	adds	r3, #16
 800e57e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e580:	8b3a      	ldrh	r2, [r7, #24]
 800e582:	88bb      	ldrh	r3, [r7, #4]
 800e584:	3303      	adds	r3, #3
 800e586:	f023 0303 	bic.w	r3, r3, #3
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d306      	bcc.n	800e59c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e58e:	8afa      	ldrh	r2, [r7, #22]
 800e590:	88bb      	ldrh	r3, [r7, #4]
 800e592:	3303      	adds	r3, #3
 800e594:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e598:	429a      	cmp	r2, r3
 800e59a:	d201      	bcs.n	800e5a0 <pbuf_alloc+0x160>
        return NULL;
 800e59c:	2300      	movs	r3, #0
 800e59e:	e035      	b.n	800e60c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e5a0:	8afb      	ldrh	r3, [r7, #22]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7ff f980 	bl	800d8a8 <mem_malloc>
 800e5a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d101      	bne.n	800e5b4 <pbuf_alloc+0x174>
        return NULL;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	e02b      	b.n	800e60c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e5b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e5b6:	3310      	adds	r3, #16
 800e5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ba:	4413      	add	r3, r2
 800e5bc:	3303      	adds	r3, #3
 800e5be:	f023 0303 	bic.w	r3, r3, #3
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	88b9      	ldrh	r1, [r7, #4]
 800e5c6:	88ba      	ldrh	r2, [r7, #4]
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	9301      	str	r3, [sp, #4]
 800e5cc:	887b      	ldrh	r3, [r7, #2]
 800e5ce:	9300      	str	r3, [sp, #0]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	4601      	mov	r1, r0
 800e5d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5d6:	f7ff ff09 	bl	800e3ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5dc:	685b      	ldr	r3, [r3, #4]
 800e5de:	f003 0303 	and.w	r3, r3, #3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d010      	beq.n	800e608 <pbuf_alloc+0x1c8>
 800e5e6:	4b0b      	ldr	r3, [pc, #44]	; (800e614 <pbuf_alloc+0x1d4>)
 800e5e8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e5ec:	490d      	ldr	r1, [pc, #52]	; (800e624 <pbuf_alloc+0x1e4>)
 800e5ee:	480b      	ldr	r0, [pc, #44]	; (800e61c <pbuf_alloc+0x1dc>)
 800e5f0:	f00c fba4 	bl	801ad3c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e5f4:	e008      	b.n	800e608 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e5f6:	4b07      	ldr	r3, [pc, #28]	; (800e614 <pbuf_alloc+0x1d4>)
 800e5f8:	f240 1227 	movw	r2, #295	; 0x127
 800e5fc:	490a      	ldr	r1, [pc, #40]	; (800e628 <pbuf_alloc+0x1e8>)
 800e5fe:	4807      	ldr	r0, [pc, #28]	; (800e61c <pbuf_alloc+0x1dc>)
 800e600:	f00c fb9c 	bl	801ad3c <iprintf>
      return NULL;
 800e604:	2300      	movs	r3, #0
 800e606:	e001      	b.n	800e60c <pbuf_alloc+0x1cc>
      break;
 800e608:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3728      	adds	r7, #40	; 0x28
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	0801ceb8 	.word	0x0801ceb8
 800e618:	0801cee8 	.word	0x0801cee8
 800e61c:	0801cf18 	.word	0x0801cf18
 800e620:	0801cf40 	.word	0x0801cf40
 800e624:	0801cf74 	.word	0x0801cf74
 800e628:	0801cfa0 	.word	0x0801cfa0

0800e62c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b086      	sub	sp, #24
 800e630:	af02      	add	r7, sp, #8
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	460b      	mov	r3, r1
 800e636:	807b      	strh	r3, [r7, #2]
 800e638:	4613      	mov	r3, r2
 800e63a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e63c:	883b      	ldrh	r3, [r7, #0]
 800e63e:	2b41      	cmp	r3, #65	; 0x41
 800e640:	d009      	beq.n	800e656 <pbuf_alloc_reference+0x2a>
 800e642:	883b      	ldrh	r3, [r7, #0]
 800e644:	2b01      	cmp	r3, #1
 800e646:	d006      	beq.n	800e656 <pbuf_alloc_reference+0x2a>
 800e648:	4b0f      	ldr	r3, [pc, #60]	; (800e688 <pbuf_alloc_reference+0x5c>)
 800e64a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e64e:	490f      	ldr	r1, [pc, #60]	; (800e68c <pbuf_alloc_reference+0x60>)
 800e650:	480f      	ldr	r0, [pc, #60]	; (800e690 <pbuf_alloc_reference+0x64>)
 800e652:	f00c fb73 	bl	801ad3c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e656:	200b      	movs	r0, #11
 800e658:	f7ff faa8 	bl	800dbac <memp_malloc>
 800e65c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e664:	2300      	movs	r3, #0
 800e666:	e00b      	b.n	800e680 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e668:	8879      	ldrh	r1, [r7, #2]
 800e66a:	887a      	ldrh	r2, [r7, #2]
 800e66c:	2300      	movs	r3, #0
 800e66e:	9301      	str	r3, [sp, #4]
 800e670:	883b      	ldrh	r3, [r7, #0]
 800e672:	9300      	str	r3, [sp, #0]
 800e674:	460b      	mov	r3, r1
 800e676:	6879      	ldr	r1, [r7, #4]
 800e678:	68f8      	ldr	r0, [r7, #12]
 800e67a:	f7ff feb7 	bl	800e3ec <pbuf_init_alloced_pbuf>
  return p;
 800e67e:	68fb      	ldr	r3, [r7, #12]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3710      	adds	r7, #16
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	0801ceb8 	.word	0x0801ceb8
 800e68c:	0801cfbc 	.word	0x0801cfbc
 800e690:	0801cf18 	.word	0x0801cf18

0800e694 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b088      	sub	sp, #32
 800e698:	af02      	add	r7, sp, #8
 800e69a:	607b      	str	r3, [r7, #4]
 800e69c:	4603      	mov	r3, r0
 800e69e:	73fb      	strb	r3, [r7, #15]
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	81bb      	strh	r3, [r7, #12]
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e6a8:	7bfb      	ldrb	r3, [r7, #15]
 800e6aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e6ac:	8a7b      	ldrh	r3, [r7, #18]
 800e6ae:	3303      	adds	r3, #3
 800e6b0:	f023 0203 	bic.w	r2, r3, #3
 800e6b4:	89bb      	ldrh	r3, [r7, #12]
 800e6b6:	441a      	add	r2, r3
 800e6b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d901      	bls.n	800e6c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	e018      	b.n	800e6f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d007      	beq.n	800e6d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e6c8:	8a7b      	ldrh	r3, [r7, #18]
 800e6ca:	3303      	adds	r3, #3
 800e6cc:	f023 0303 	bic.w	r3, r3, #3
 800e6d0:	6a3a      	ldr	r2, [r7, #32]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	617b      	str	r3, [r7, #20]
 800e6d6:	e001      	b.n	800e6dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	89b9      	ldrh	r1, [r7, #12]
 800e6e0:	89ba      	ldrh	r2, [r7, #12]
 800e6e2:	2302      	movs	r3, #2
 800e6e4:	9301      	str	r3, [sp, #4]
 800e6e6:	897b      	ldrh	r3, [r7, #10]
 800e6e8:	9300      	str	r3, [sp, #0]
 800e6ea:	460b      	mov	r3, r1
 800e6ec:	6979      	ldr	r1, [r7, #20]
 800e6ee:	f7ff fe7d 	bl	800e3ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e6f2:	687b      	ldr	r3, [r7, #4]
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3718      	adds	r7, #24
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	460b      	mov	r3, r1
 800e706:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d106      	bne.n	800e71c <pbuf_realloc+0x20>
 800e70e:	4b3a      	ldr	r3, [pc, #232]	; (800e7f8 <pbuf_realloc+0xfc>)
 800e710:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e714:	4939      	ldr	r1, [pc, #228]	; (800e7fc <pbuf_realloc+0x100>)
 800e716:	483a      	ldr	r0, [pc, #232]	; (800e800 <pbuf_realloc+0x104>)
 800e718:	f00c fb10 	bl	801ad3c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	891b      	ldrh	r3, [r3, #8]
 800e720:	887a      	ldrh	r2, [r7, #2]
 800e722:	429a      	cmp	r2, r3
 800e724:	d263      	bcs.n	800e7ee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	891a      	ldrh	r2, [r3, #8]
 800e72a:	887b      	ldrh	r3, [r7, #2]
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e730:	887b      	ldrh	r3, [r7, #2]
 800e732:	817b      	strh	r3, [r7, #10]
  q = p;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e738:	e018      	b.n	800e76c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	895b      	ldrh	r3, [r3, #10]
 800e73e:	897a      	ldrh	r2, [r7, #10]
 800e740:	1ad3      	subs	r3, r2, r3
 800e742:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	891a      	ldrh	r2, [r3, #8]
 800e748:	893b      	ldrh	r3, [r7, #8]
 800e74a:	1ad3      	subs	r3, r2, r3
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d106      	bne.n	800e76c <pbuf_realloc+0x70>
 800e75e:	4b26      	ldr	r3, [pc, #152]	; (800e7f8 <pbuf_realloc+0xfc>)
 800e760:	f240 12af 	movw	r2, #431	; 0x1af
 800e764:	4927      	ldr	r1, [pc, #156]	; (800e804 <pbuf_realloc+0x108>)
 800e766:	4826      	ldr	r0, [pc, #152]	; (800e800 <pbuf_realloc+0x104>)
 800e768:	f00c fae8 	bl	801ad3c <iprintf>
  while (rem_len > q->len) {
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	895b      	ldrh	r3, [r3, #10]
 800e770:	897a      	ldrh	r2, [r7, #10]
 800e772:	429a      	cmp	r2, r3
 800e774:	d8e1      	bhi.n	800e73a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	7b1b      	ldrb	r3, [r3, #12]
 800e77a:	f003 030f 	and.w	r3, r3, #15
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d121      	bne.n	800e7c6 <pbuf_realloc+0xca>
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	895b      	ldrh	r3, [r3, #10]
 800e786:	897a      	ldrh	r2, [r7, #10]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d01c      	beq.n	800e7c6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	7b5b      	ldrb	r3, [r3, #13]
 800e790:	f003 0302 	and.w	r3, r3, #2
 800e794:	2b00      	cmp	r3, #0
 800e796:	d116      	bne.n	800e7c6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	897b      	ldrh	r3, [r7, #10]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	68f8      	ldr	r0, [r7, #12]
 800e7ac:	f7fe ff72 	bl	800d694 <mem_trim>
 800e7b0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d106      	bne.n	800e7c6 <pbuf_realloc+0xca>
 800e7b8:	4b0f      	ldr	r3, [pc, #60]	; (800e7f8 <pbuf_realloc+0xfc>)
 800e7ba:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e7be:	4912      	ldr	r1, [pc, #72]	; (800e808 <pbuf_realloc+0x10c>)
 800e7c0:	480f      	ldr	r0, [pc, #60]	; (800e800 <pbuf_realloc+0x104>)
 800e7c2:	f00c fabb 	bl	801ad3c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	897a      	ldrh	r2, [r7, #10]
 800e7ca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	895a      	ldrh	r2, [r3, #10]
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d004      	beq.n	800e7e6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f000 f943 	bl	800ea6c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	601a      	str	r2, [r3, #0]
 800e7ec:	e000      	b.n	800e7f0 <pbuf_realloc+0xf4>
    return;
 800e7ee:	bf00      	nop

}
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	0801ceb8 	.word	0x0801ceb8
 800e7fc:	0801cfd0 	.word	0x0801cfd0
 800e800:	0801cf18 	.word	0x0801cf18
 800e804:	0801cfe8 	.word	0x0801cfe8
 800e808:	0801d000 	.word	0x0801d000

0800e80c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	4613      	mov	r3, r2
 800e818:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d106      	bne.n	800e82e <pbuf_add_header_impl+0x22>
 800e820:	4b2b      	ldr	r3, [pc, #172]	; (800e8d0 <pbuf_add_header_impl+0xc4>)
 800e822:	f240 12df 	movw	r2, #479	; 0x1df
 800e826:	492b      	ldr	r1, [pc, #172]	; (800e8d4 <pbuf_add_header_impl+0xc8>)
 800e828:	482b      	ldr	r0, [pc, #172]	; (800e8d8 <pbuf_add_header_impl+0xcc>)
 800e82a:	f00c fa87 	bl	801ad3c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d003      	beq.n	800e83c <pbuf_add_header_impl+0x30>
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e83a:	d301      	bcc.n	800e840 <pbuf_add_header_impl+0x34>
    return 1;
 800e83c:	2301      	movs	r3, #1
 800e83e:	e043      	b.n	800e8c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d101      	bne.n	800e84a <pbuf_add_header_impl+0x3e>
    return 0;
 800e846:	2300      	movs	r3, #0
 800e848:	e03e      	b.n	800e8c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	891a      	ldrh	r2, [r3, #8]
 800e852:	8a7b      	ldrh	r3, [r7, #18]
 800e854:	4413      	add	r3, r2
 800e856:	b29b      	uxth	r3, r3
 800e858:	8a7a      	ldrh	r2, [r7, #18]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d901      	bls.n	800e862 <pbuf_add_header_impl+0x56>
    return 1;
 800e85e:	2301      	movs	r3, #1
 800e860:	e032      	b.n	800e8c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	7b1b      	ldrb	r3, [r3, #12]
 800e866:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e868:	8a3b      	ldrh	r3, [r7, #16]
 800e86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00c      	beq.n	800e88c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	685a      	ldr	r2, [r3, #4]
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	425b      	negs	r3, r3
 800e87a:	4413      	add	r3, r2
 800e87c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	3310      	adds	r3, #16
 800e882:	697a      	ldr	r2, [r7, #20]
 800e884:	429a      	cmp	r2, r3
 800e886:	d20d      	bcs.n	800e8a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e888:	2301      	movs	r3, #1
 800e88a:	e01d      	b.n	800e8c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e88c:	79fb      	ldrb	r3, [r7, #7]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d006      	beq.n	800e8a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	685a      	ldr	r2, [r3, #4]
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	425b      	negs	r3, r3
 800e89a:	4413      	add	r3, r2
 800e89c:	617b      	str	r3, [r7, #20]
 800e89e:	e001      	b.n	800e8a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e011      	b.n	800e8c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	697a      	ldr	r2, [r7, #20]
 800e8a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	895a      	ldrh	r2, [r3, #10]
 800e8ae:	8a7b      	ldrh	r3, [r7, #18]
 800e8b0:	4413      	add	r3, r2
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	891a      	ldrh	r2, [r3, #8]
 800e8bc:	8a7b      	ldrh	r3, [r7, #18]
 800e8be:	4413      	add	r3, r2
 800e8c0:	b29a      	uxth	r2, r3
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	811a      	strh	r2, [r3, #8]


  return 0;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3718      	adds	r7, #24
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	0801ceb8 	.word	0x0801ceb8
 800e8d4:	0801d01c 	.word	0x0801d01c
 800e8d8:	0801cf18 	.word	0x0801cf18

0800e8dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	6839      	ldr	r1, [r7, #0]
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f7ff ff8e 	bl	800e80c <pbuf_add_header_impl>
 800e8f0:	4603      	mov	r3, r0
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
	...

0800e8fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b084      	sub	sp, #16
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d106      	bne.n	800e91a <pbuf_remove_header+0x1e>
 800e90c:	4b20      	ldr	r3, [pc, #128]	; (800e990 <pbuf_remove_header+0x94>)
 800e90e:	f240 224b 	movw	r2, #587	; 0x24b
 800e912:	4920      	ldr	r1, [pc, #128]	; (800e994 <pbuf_remove_header+0x98>)
 800e914:	4820      	ldr	r0, [pc, #128]	; (800e998 <pbuf_remove_header+0x9c>)
 800e916:	f00c fa11 	bl	801ad3c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d003      	beq.n	800e928 <pbuf_remove_header+0x2c>
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e926:	d301      	bcc.n	800e92c <pbuf_remove_header+0x30>
    return 1;
 800e928:	2301      	movs	r3, #1
 800e92a:	e02c      	b.n	800e986 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d101      	bne.n	800e936 <pbuf_remove_header+0x3a>
    return 0;
 800e932:	2300      	movs	r3, #0
 800e934:	e027      	b.n	800e986 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	895b      	ldrh	r3, [r3, #10]
 800e93e:	89fa      	ldrh	r2, [r7, #14]
 800e940:	429a      	cmp	r2, r3
 800e942:	d908      	bls.n	800e956 <pbuf_remove_header+0x5a>
 800e944:	4b12      	ldr	r3, [pc, #72]	; (800e990 <pbuf_remove_header+0x94>)
 800e946:	f240 2255 	movw	r2, #597	; 0x255
 800e94a:	4914      	ldr	r1, [pc, #80]	; (800e99c <pbuf_remove_header+0xa0>)
 800e94c:	4812      	ldr	r0, [pc, #72]	; (800e998 <pbuf_remove_header+0x9c>)
 800e94e:	f00c f9f5 	bl	801ad3c <iprintf>
 800e952:	2301      	movs	r3, #1
 800e954:	e017      	b.n	800e986 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	685a      	ldr	r2, [r3, #4]
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	441a      	add	r2, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	895a      	ldrh	r2, [r3, #10]
 800e96c:	89fb      	ldrh	r3, [r7, #14]
 800e96e:	1ad3      	subs	r3, r2, r3
 800e970:	b29a      	uxth	r2, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	891a      	ldrh	r2, [r3, #8]
 800e97a:	89fb      	ldrh	r3, [r7, #14]
 800e97c:	1ad3      	subs	r3, r2, r3
 800e97e:	b29a      	uxth	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e984:	2300      	movs	r3, #0
}
 800e986:	4618      	mov	r0, r3
 800e988:	3710      	adds	r7, #16
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	0801ceb8 	.word	0x0801ceb8
 800e994:	0801d01c 	.word	0x0801d01c
 800e998:	0801cf18 	.word	0x0801cf18
 800e99c:	0801d028 	.word	0x0801d028

0800e9a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	807b      	strh	r3, [r7, #2]
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e9b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	da08      	bge.n	800e9ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e9b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9bc:	425b      	negs	r3, r3
 800e9be:	4619      	mov	r1, r3
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f7ff ff9b 	bl	800e8fc <pbuf_remove_header>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	e007      	b.n	800e9da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e9ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9ce:	787a      	ldrb	r2, [r7, #1]
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f7ff ff1a 	bl	800e80c <pbuf_add_header_impl>
 800e9d8:	4603      	mov	r3, r0
  }
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3708      	adds	r7, #8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b082      	sub	sp, #8
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e9ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f7ff ffd2 	bl	800e9a0 <pbuf_header_impl>
 800e9fc:	4603      	mov	r3, r0
}
 800e9fe:	4618      	mov	r0, r3
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}

0800ea06 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800ea06:	b580      	push	{r7, lr}
 800ea08:	b086      	sub	sp, #24
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
 800ea0e:	460b      	mov	r3, r1
 800ea10:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800ea16:	887b      	ldrh	r3, [r7, #2]
 800ea18:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800ea1a:	e01c      	b.n	800ea56 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	895b      	ldrh	r3, [r3, #10]
 800ea20:	8a7a      	ldrh	r2, [r7, #18]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d310      	bcc.n	800ea48 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	895b      	ldrh	r3, [r3, #10]
 800ea2e:	8a7a      	ldrh	r2, [r7, #18]
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f000 f813 	bl	800ea6c <pbuf_free>
 800ea46:	e006      	b.n	800ea56 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800ea48:	8a7b      	ldrh	r3, [r7, #18]
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	6978      	ldr	r0, [r7, #20]
 800ea4e:	f7ff ff55 	bl	800e8fc <pbuf_remove_header>
      free_left = 0;
 800ea52:	2300      	movs	r3, #0
 800ea54:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800ea56:	8a7b      	ldrh	r3, [r7, #18]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <pbuf_free_header+0x5c>
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1dc      	bne.n	800ea1c <pbuf_free_header+0x16>
    }
  }
  return p;
 800ea62:	697b      	ldr	r3, [r7, #20]
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b088      	sub	sp, #32
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d10b      	bne.n	800ea92 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d106      	bne.n	800ea8e <pbuf_free+0x22>
 800ea80:	4b3b      	ldr	r3, [pc, #236]	; (800eb70 <pbuf_free+0x104>)
 800ea82:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ea86:	493b      	ldr	r1, [pc, #236]	; (800eb74 <pbuf_free+0x108>)
 800ea88:	483b      	ldr	r0, [pc, #236]	; (800eb78 <pbuf_free+0x10c>)
 800ea8a:	f00c f957 	bl	801ad3c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	e069      	b.n	800eb66 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ea96:	e062      	b.n	800eb5e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ea98:	f009 fe86 	bl	80187a8 <sys_arch_protect>
 800ea9c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	7b9b      	ldrb	r3, [r3, #14]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d106      	bne.n	800eab4 <pbuf_free+0x48>
 800eaa6:	4b32      	ldr	r3, [pc, #200]	; (800eb70 <pbuf_free+0x104>)
 800eaa8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800eaac:	4933      	ldr	r1, [pc, #204]	; (800eb7c <pbuf_free+0x110>)
 800eaae:	4832      	ldr	r0, [pc, #200]	; (800eb78 <pbuf_free+0x10c>)
 800eab0:	f00c f944 	bl	801ad3c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	7b9b      	ldrb	r3, [r3, #14]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	b2da      	uxtb	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	739a      	strb	r2, [r3, #14]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	7b9b      	ldrb	r3, [r3, #14]
 800eac4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800eac6:	69b8      	ldr	r0, [r7, #24]
 800eac8:	f009 fe7c 	bl	80187c4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800eacc:	7dfb      	ldrb	r3, [r7, #23]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d143      	bne.n	800eb5a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	7b1b      	ldrb	r3, [r3, #12]
 800eadc:	f003 030f 	and.w	r3, r3, #15
 800eae0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	7b5b      	ldrb	r3, [r3, #13]
 800eae6:	f003 0302 	and.w	r3, r3, #2
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d011      	beq.n	800eb12 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	691b      	ldr	r3, [r3, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d106      	bne.n	800eb08 <pbuf_free+0x9c>
 800eafa:	4b1d      	ldr	r3, [pc, #116]	; (800eb70 <pbuf_free+0x104>)
 800eafc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800eb00:	491f      	ldr	r1, [pc, #124]	; (800eb80 <pbuf_free+0x114>)
 800eb02:	481d      	ldr	r0, [pc, #116]	; (800eb78 <pbuf_free+0x10c>)
 800eb04:	f00c f91a 	bl	801ad3c <iprintf>
        pc->custom_free_function(p);
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	691b      	ldr	r3, [r3, #16]
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	4798      	blx	r3
 800eb10:	e01d      	b.n	800eb4e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800eb12:	7bfb      	ldrb	r3, [r7, #15]
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d104      	bne.n	800eb22 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800eb18:	6879      	ldr	r1, [r7, #4]
 800eb1a:	200c      	movs	r0, #12
 800eb1c:	f7ff f898 	bl	800dc50 <memp_free>
 800eb20:	e015      	b.n	800eb4e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800eb22:	7bfb      	ldrb	r3, [r7, #15]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d104      	bne.n	800eb32 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800eb28:	6879      	ldr	r1, [r7, #4]
 800eb2a:	200b      	movs	r0, #11
 800eb2c:	f7ff f890 	bl	800dc50 <memp_free>
 800eb30:	e00d      	b.n	800eb4e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800eb32:	7bfb      	ldrb	r3, [r7, #15]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d103      	bne.n	800eb40 <pbuf_free+0xd4>
          mem_free(p);
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7fe fd1b 	bl	800d574 <mem_free>
 800eb3e:	e006      	b.n	800eb4e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800eb40:	4b0b      	ldr	r3, [pc, #44]	; (800eb70 <pbuf_free+0x104>)
 800eb42:	f240 320f 	movw	r2, #783	; 0x30f
 800eb46:	490f      	ldr	r1, [pc, #60]	; (800eb84 <pbuf_free+0x118>)
 800eb48:	480b      	ldr	r0, [pc, #44]	; (800eb78 <pbuf_free+0x10c>)
 800eb4a:	f00c f8f7 	bl	801ad3c <iprintf>
        }
      }
      count++;
 800eb4e:	7ffb      	ldrb	r3, [r7, #31]
 800eb50:	3301      	adds	r3, #1
 800eb52:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	607b      	str	r3, [r7, #4]
 800eb58:	e001      	b.n	800eb5e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d199      	bne.n	800ea98 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800eb64:	7ffb      	ldrb	r3, [r7, #31]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3720      	adds	r7, #32
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	0801ceb8 	.word	0x0801ceb8
 800eb74:	0801d01c 	.word	0x0801d01c
 800eb78:	0801cf18 	.word	0x0801cf18
 800eb7c:	0801d048 	.word	0x0801d048
 800eb80:	0801d060 	.word	0x0801d060
 800eb84:	0801d084 	.word	0x0801d084

0800eb88 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800eb90:	2300      	movs	r3, #0
 800eb92:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800eb94:	e005      	b.n	800eba2 <pbuf_clen+0x1a>
    ++len;
 800eb96:	89fb      	ldrh	r3, [r7, #14]
 800eb98:	3301      	adds	r3, #1
 800eb9a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d1f6      	bne.n	800eb96 <pbuf_clen+0xe>
  }
  return len;
 800eba8:	89fb      	ldrh	r3, [r7, #14]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3714      	adds	r7, #20
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr
	...

0800ebb8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d016      	beq.n	800ebf4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ebc6:	f009 fdef 	bl	80187a8 <sys_arch_protect>
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	7b9b      	ldrb	r3, [r3, #14]
 800ebd0:	3301      	adds	r3, #1
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	739a      	strb	r2, [r3, #14]
 800ebd8:	68f8      	ldr	r0, [r7, #12]
 800ebda:	f009 fdf3 	bl	80187c4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	7b9b      	ldrb	r3, [r3, #14]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d106      	bne.n	800ebf4 <pbuf_ref+0x3c>
 800ebe6:	4b05      	ldr	r3, [pc, #20]	; (800ebfc <pbuf_ref+0x44>)
 800ebe8:	f240 3242 	movw	r2, #834	; 0x342
 800ebec:	4904      	ldr	r1, [pc, #16]	; (800ec00 <pbuf_ref+0x48>)
 800ebee:	4805      	ldr	r0, [pc, #20]	; (800ec04 <pbuf_ref+0x4c>)
 800ebf0:	f00c f8a4 	bl	801ad3c <iprintf>
  }
}
 800ebf4:	bf00      	nop
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	0801ceb8 	.word	0x0801ceb8
 800ec00:	0801d098 	.word	0x0801d098
 800ec04:	0801cf18 	.word	0x0801cf18

0800ec08 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d002      	beq.n	800ec1e <pbuf_cat+0x16>
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d107      	bne.n	800ec2e <pbuf_cat+0x26>
 800ec1e:	4b20      	ldr	r3, [pc, #128]	; (800eca0 <pbuf_cat+0x98>)
 800ec20:	f240 3259 	movw	r2, #857	; 0x359
 800ec24:	491f      	ldr	r1, [pc, #124]	; (800eca4 <pbuf_cat+0x9c>)
 800ec26:	4820      	ldr	r0, [pc, #128]	; (800eca8 <pbuf_cat+0xa0>)
 800ec28:	f00c f888 	bl	801ad3c <iprintf>
 800ec2c:	e034      	b.n	800ec98 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	60fb      	str	r3, [r7, #12]
 800ec32:	e00a      	b.n	800ec4a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	891a      	ldrh	r2, [r3, #8]
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	891b      	ldrh	r3, [r3, #8]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	60fb      	str	r3, [r7, #12]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1f0      	bne.n	800ec34 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	891a      	ldrh	r2, [r3, #8]
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	895b      	ldrh	r3, [r3, #10]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d006      	beq.n	800ec6c <pbuf_cat+0x64>
 800ec5e:	4b10      	ldr	r3, [pc, #64]	; (800eca0 <pbuf_cat+0x98>)
 800ec60:	f240 3262 	movw	r2, #866	; 0x362
 800ec64:	4911      	ldr	r1, [pc, #68]	; (800ecac <pbuf_cat+0xa4>)
 800ec66:	4810      	ldr	r0, [pc, #64]	; (800eca8 <pbuf_cat+0xa0>)
 800ec68:	f00c f868 	bl	801ad3c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d006      	beq.n	800ec82 <pbuf_cat+0x7a>
 800ec74:	4b0a      	ldr	r3, [pc, #40]	; (800eca0 <pbuf_cat+0x98>)
 800ec76:	f240 3263 	movw	r2, #867	; 0x363
 800ec7a:	490d      	ldr	r1, [pc, #52]	; (800ecb0 <pbuf_cat+0xa8>)
 800ec7c:	480a      	ldr	r0, [pc, #40]	; (800eca8 <pbuf_cat+0xa0>)
 800ec7e:	f00c f85d 	bl	801ad3c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	891a      	ldrh	r2, [r3, #8]
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	891b      	ldrh	r3, [r3, #8]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	683a      	ldr	r2, [r7, #0]
 800ec96:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ec98:	3710      	adds	r7, #16
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	0801ceb8 	.word	0x0801ceb8
 800eca4:	0801d0ac 	.word	0x0801d0ac
 800eca8:	0801cf18 	.word	0x0801cf18
 800ecac:	0801d0e4 	.word	0x0801d0e4
 800ecb0:	0801d114 	.word	0x0801d114

0800ecb4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ecbe:	6839      	ldr	r1, [r7, #0]
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7ff ffa1 	bl	800ec08 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ecc6:	6838      	ldr	r0, [r7, #0]
 800ecc8:	f7ff ff76 	bl	800ebb8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800eccc:	bf00      	nop
 800ecce:	3708      	adds	r7, #8
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ecde:	2300      	movs	r3, #0
 800ece0:	617b      	str	r3, [r7, #20]
 800ece2:	2300      	movs	r3, #0
 800ece4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d008      	beq.n	800ecfe <pbuf_copy+0x2a>
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d005      	beq.n	800ecfe <pbuf_copy+0x2a>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	891a      	ldrh	r2, [r3, #8]
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	891b      	ldrh	r3, [r3, #8]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d209      	bcs.n	800ed12 <pbuf_copy+0x3e>
 800ecfe:	4b57      	ldr	r3, [pc, #348]	; (800ee5c <pbuf_copy+0x188>)
 800ed00:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ed04:	4956      	ldr	r1, [pc, #344]	; (800ee60 <pbuf_copy+0x18c>)
 800ed06:	4857      	ldr	r0, [pc, #348]	; (800ee64 <pbuf_copy+0x190>)
 800ed08:	f00c f818 	bl	801ad3c <iprintf>
 800ed0c:	f06f 030f 	mvn.w	r3, #15
 800ed10:	e09f      	b.n	800ee52 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	895b      	ldrh	r3, [r3, #10]
 800ed16:	461a      	mov	r2, r3
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	1ad2      	subs	r2, r2, r3
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	895b      	ldrh	r3, [r3, #10]
 800ed20:	4619      	mov	r1, r3
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	1acb      	subs	r3, r1, r3
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d306      	bcc.n	800ed38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	895b      	ldrh	r3, [r3, #10]
 800ed2e:	461a      	mov	r2, r3
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	60fb      	str	r3, [r7, #12]
 800ed36:	e005      	b.n	800ed44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	895b      	ldrh	r3, [r3, #10]
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	685a      	ldr	r2, [r3, #4]
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	18d0      	adds	r0, r2, r3
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	685a      	ldr	r2, [r3, #4]
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	4413      	add	r3, r2
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	4619      	mov	r1, r3
 800ed58:	f00b fc28 	bl	801a5ac <memcpy>
    offset_to += len;
 800ed5c:	697a      	ldr	r2, [r7, #20]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	4413      	add	r3, r2
 800ed62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ed64:	693a      	ldr	r2, [r7, #16]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	4413      	add	r3, r2
 800ed6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	895b      	ldrh	r3, [r3, #10]
 800ed70:	461a      	mov	r2, r3
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d906      	bls.n	800ed86 <pbuf_copy+0xb2>
 800ed78:	4b38      	ldr	r3, [pc, #224]	; (800ee5c <pbuf_copy+0x188>)
 800ed7a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ed7e:	493a      	ldr	r1, [pc, #232]	; (800ee68 <pbuf_copy+0x194>)
 800ed80:	4838      	ldr	r0, [pc, #224]	; (800ee64 <pbuf_copy+0x190>)
 800ed82:	f00b ffdb 	bl	801ad3c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	895b      	ldrh	r3, [r3, #10]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d906      	bls.n	800eda0 <pbuf_copy+0xcc>
 800ed92:	4b32      	ldr	r3, [pc, #200]	; (800ee5c <pbuf_copy+0x188>)
 800ed94:	f240 32da 	movw	r2, #986	; 0x3da
 800ed98:	4934      	ldr	r1, [pc, #208]	; (800ee6c <pbuf_copy+0x198>)
 800ed9a:	4832      	ldr	r0, [pc, #200]	; (800ee64 <pbuf_copy+0x190>)
 800ed9c:	f00b ffce 	bl	801ad3c <iprintf>
    if (offset_from >= p_from->len) {
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	895b      	ldrh	r3, [r3, #10]
 800eda4:	461a      	mov	r2, r3
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d304      	bcc.n	800edb6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800edac:	2300      	movs	r3, #0
 800edae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	895b      	ldrh	r3, [r3, #10]
 800edba:	461a      	mov	r2, r3
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d114      	bne.n	800edec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800edc2:	2300      	movs	r3, #0
 800edc4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d10c      	bne.n	800edec <pbuf_copy+0x118>
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d009      	beq.n	800edec <pbuf_copy+0x118>
 800edd8:	4b20      	ldr	r3, [pc, #128]	; (800ee5c <pbuf_copy+0x188>)
 800edda:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800edde:	4924      	ldr	r1, [pc, #144]	; (800ee70 <pbuf_copy+0x19c>)
 800ede0:	4820      	ldr	r0, [pc, #128]	; (800ee64 <pbuf_copy+0x190>)
 800ede2:	f00b ffab 	bl	801ad3c <iprintf>
 800ede6:	f06f 030f 	mvn.w	r3, #15
 800edea:	e032      	b.n	800ee52 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d013      	beq.n	800ee1a <pbuf_copy+0x146>
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	895a      	ldrh	r2, [r3, #10]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	891b      	ldrh	r3, [r3, #8]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d10d      	bne.n	800ee1a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d009      	beq.n	800ee1a <pbuf_copy+0x146>
 800ee06:	4b15      	ldr	r3, [pc, #84]	; (800ee5c <pbuf_copy+0x188>)
 800ee08:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ee0c:	4919      	ldr	r1, [pc, #100]	; (800ee74 <pbuf_copy+0x1a0>)
 800ee0e:	4815      	ldr	r0, [pc, #84]	; (800ee64 <pbuf_copy+0x190>)
 800ee10:	f00b ff94 	bl	801ad3c <iprintf>
 800ee14:	f06f 0305 	mvn.w	r3, #5
 800ee18:	e01b      	b.n	800ee52 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d013      	beq.n	800ee48 <pbuf_copy+0x174>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	895a      	ldrh	r2, [r3, #10]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	891b      	ldrh	r3, [r3, #8]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d10d      	bne.n	800ee48 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d009      	beq.n	800ee48 <pbuf_copy+0x174>
 800ee34:	4b09      	ldr	r3, [pc, #36]	; (800ee5c <pbuf_copy+0x188>)
 800ee36:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ee3a:	490e      	ldr	r1, [pc, #56]	; (800ee74 <pbuf_copy+0x1a0>)
 800ee3c:	4809      	ldr	r0, [pc, #36]	; (800ee64 <pbuf_copy+0x190>)
 800ee3e:	f00b ff7d 	bl	801ad3c <iprintf>
 800ee42:	f06f 0305 	mvn.w	r3, #5
 800ee46:	e004      	b.n	800ee52 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	f47f af61 	bne.w	800ed12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ee50:	2300      	movs	r3, #0
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3718      	adds	r7, #24
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	0801ceb8 	.word	0x0801ceb8
 800ee60:	0801d160 	.word	0x0801d160
 800ee64:	0801cf18 	.word	0x0801cf18
 800ee68:	0801d190 	.word	0x0801d190
 800ee6c:	0801d1a8 	.word	0x0801d1a8
 800ee70:	0801d1c4 	.word	0x0801d1c4
 800ee74:	0801d1d4 	.word	0x0801d1d4

0800ee78 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b088      	sub	sp, #32
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	4611      	mov	r1, r2
 800ee84:	461a      	mov	r2, r3
 800ee86:	460b      	mov	r3, r1
 800ee88:	80fb      	strh	r3, [r7, #6]
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ee92:	2300      	movs	r3, #0
 800ee94:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d108      	bne.n	800eeae <pbuf_copy_partial+0x36>
 800ee9c:	4b2b      	ldr	r3, [pc, #172]	; (800ef4c <pbuf_copy_partial+0xd4>)
 800ee9e:	f240 420a 	movw	r2, #1034	; 0x40a
 800eea2:	492b      	ldr	r1, [pc, #172]	; (800ef50 <pbuf_copy_partial+0xd8>)
 800eea4:	482b      	ldr	r0, [pc, #172]	; (800ef54 <pbuf_copy_partial+0xdc>)
 800eea6:	f00b ff49 	bl	801ad3c <iprintf>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e04a      	b.n	800ef44 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d108      	bne.n	800eec6 <pbuf_copy_partial+0x4e>
 800eeb4:	4b25      	ldr	r3, [pc, #148]	; (800ef4c <pbuf_copy_partial+0xd4>)
 800eeb6:	f240 420b 	movw	r2, #1035	; 0x40b
 800eeba:	4927      	ldr	r1, [pc, #156]	; (800ef58 <pbuf_copy_partial+0xe0>)
 800eebc:	4825      	ldr	r0, [pc, #148]	; (800ef54 <pbuf_copy_partial+0xdc>)
 800eebe:	f00b ff3d 	bl	801ad3c <iprintf>
 800eec2:	2300      	movs	r3, #0
 800eec4:	e03e      	b.n	800ef44 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	61fb      	str	r3, [r7, #28]
 800eeca:	e034      	b.n	800ef36 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800eecc:	88bb      	ldrh	r3, [r7, #4]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00a      	beq.n	800eee8 <pbuf_copy_partial+0x70>
 800eed2:	69fb      	ldr	r3, [r7, #28]
 800eed4:	895b      	ldrh	r3, [r3, #10]
 800eed6:	88ba      	ldrh	r2, [r7, #4]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d305      	bcc.n	800eee8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	895b      	ldrh	r3, [r3, #10]
 800eee0:	88ba      	ldrh	r2, [r7, #4]
 800eee2:	1ad3      	subs	r3, r2, r3
 800eee4:	80bb      	strh	r3, [r7, #4]
 800eee6:	e023      	b.n	800ef30 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	895a      	ldrh	r2, [r3, #10]
 800eeec:	88bb      	ldrh	r3, [r7, #4]
 800eeee:	1ad3      	subs	r3, r2, r3
 800eef0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800eef2:	8b3a      	ldrh	r2, [r7, #24]
 800eef4:	88fb      	ldrh	r3, [r7, #6]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d901      	bls.n	800eefe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800eefa:	88fb      	ldrh	r3, [r7, #6]
 800eefc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800eefe:	8b7b      	ldrh	r3, [r7, #26]
 800ef00:	68ba      	ldr	r2, [r7, #8]
 800ef02:	18d0      	adds	r0, r2, r3
 800ef04:	69fb      	ldr	r3, [r7, #28]
 800ef06:	685a      	ldr	r2, [r3, #4]
 800ef08:	88bb      	ldrh	r3, [r7, #4]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	8b3a      	ldrh	r2, [r7, #24]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	f00b fb4c 	bl	801a5ac <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ef14:	8afa      	ldrh	r2, [r7, #22]
 800ef16:	8b3b      	ldrh	r3, [r7, #24]
 800ef18:	4413      	add	r3, r2
 800ef1a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ef1c:	8b7a      	ldrh	r2, [r7, #26]
 800ef1e:	8b3b      	ldrh	r3, [r7, #24]
 800ef20:	4413      	add	r3, r2
 800ef22:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ef24:	88fa      	ldrh	r2, [r7, #6]
 800ef26:	8b3b      	ldrh	r3, [r7, #24]
 800ef28:	1ad3      	subs	r3, r2, r3
 800ef2a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	61fb      	str	r3, [r7, #28]
 800ef36:	88fb      	ldrh	r3, [r7, #6]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d002      	beq.n	800ef42 <pbuf_copy_partial+0xca>
 800ef3c:	69fb      	ldr	r3, [r7, #28]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d1c4      	bne.n	800eecc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ef42:	8afb      	ldrh	r3, [r7, #22]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3720      	adds	r7, #32
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	0801ceb8 	.word	0x0801ceb8
 800ef50:	0801d200 	.word	0x0801d200
 800ef54:	0801cf18 	.word	0x0801cf18
 800ef58:	0801d220 	.word	0x0801d220

0800ef5c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	4603      	mov	r3, r0
 800ef64:	603a      	str	r2, [r7, #0]
 800ef66:	71fb      	strb	r3, [r7, #7]
 800ef68:	460b      	mov	r3, r1
 800ef6a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	8919      	ldrh	r1, [r3, #8]
 800ef70:	88ba      	ldrh	r2, [r7, #4]
 800ef72:	79fb      	ldrb	r3, [r7, #7]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7ff fa63 	bl	800e440 <pbuf_alloc>
 800ef7a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d101      	bne.n	800ef86 <pbuf_clone+0x2a>
    return NULL;
 800ef82:	2300      	movs	r3, #0
 800ef84:	e011      	b.n	800efaa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ef86:	6839      	ldr	r1, [r7, #0]
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f7ff fea3 	bl	800ecd4 <pbuf_copy>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ef92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d006      	beq.n	800efa8 <pbuf_clone+0x4c>
 800ef9a:	4b06      	ldr	r3, [pc, #24]	; (800efb4 <pbuf_clone+0x58>)
 800ef9c:	f240 5224 	movw	r2, #1316	; 0x524
 800efa0:	4905      	ldr	r1, [pc, #20]	; (800efb8 <pbuf_clone+0x5c>)
 800efa2:	4806      	ldr	r0, [pc, #24]	; (800efbc <pbuf_clone+0x60>)
 800efa4:	f00b feca 	bl	801ad3c <iprintf>
  return q;
 800efa8:	68fb      	ldr	r3, [r7, #12]
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	0801ceb8 	.word	0x0801ceb8
 800efb8:	0801d32c 	.word	0x0801d32c
 800efbc:	0801cf18 	.word	0x0801cf18

0800efc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800efc4:	f00b fed2 	bl	801ad6c <rand>
 800efc8:	4603      	mov	r3, r0
 800efca:	b29b      	uxth	r3, r3
 800efcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800efd0:	b29b      	uxth	r3, r3
 800efd2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800efd6:	b29a      	uxth	r2, r3
 800efd8:	4b01      	ldr	r3, [pc, #4]	; (800efe0 <tcp_init+0x20>)
 800efda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800efdc:	bf00      	nop
 800efde:	bd80      	pop	{r7, pc}
 800efe0:	20000010 	.word	0x20000010

0800efe4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	7d1b      	ldrb	r3, [r3, #20]
 800eff0:	2b01      	cmp	r3, #1
 800eff2:	d105      	bne.n	800f000 <tcp_free+0x1c>
 800eff4:	4b06      	ldr	r3, [pc, #24]	; (800f010 <tcp_free+0x2c>)
 800eff6:	22d4      	movs	r2, #212	; 0xd4
 800eff8:	4906      	ldr	r1, [pc, #24]	; (800f014 <tcp_free+0x30>)
 800effa:	4807      	ldr	r0, [pc, #28]	; (800f018 <tcp_free+0x34>)
 800effc:	f00b fe9e 	bl	801ad3c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f000:	6879      	ldr	r1, [r7, #4]
 800f002:	2001      	movs	r0, #1
 800f004:	f7fe fe24 	bl	800dc50 <memp_free>
}
 800f008:	bf00      	nop
 800f00a:	3708      	adds	r7, #8
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	0801d3b8 	.word	0x0801d3b8
 800f014:	0801d3e8 	.word	0x0801d3e8
 800f018:	0801d3fc 	.word	0x0801d3fc

0800f01c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	7d1b      	ldrb	r3, [r3, #20]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	d105      	bne.n	800f038 <tcp_free_listen+0x1c>
 800f02c:	4b06      	ldr	r3, [pc, #24]	; (800f048 <tcp_free_listen+0x2c>)
 800f02e:	22df      	movs	r2, #223	; 0xdf
 800f030:	4906      	ldr	r1, [pc, #24]	; (800f04c <tcp_free_listen+0x30>)
 800f032:	4807      	ldr	r0, [pc, #28]	; (800f050 <tcp_free_listen+0x34>)
 800f034:	f00b fe82 	bl	801ad3c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f038:	6879      	ldr	r1, [r7, #4]
 800f03a:	2002      	movs	r0, #2
 800f03c:	f7fe fe08 	bl	800dc50 <memp_free>
}
 800f040:	bf00      	nop
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	0801d3b8 	.word	0x0801d3b8
 800f04c:	0801d424 	.word	0x0801d424
 800f050:	0801d3fc 	.word	0x0801d3fc

0800f054 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f058:	f001 f8c0 	bl	80101dc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f05c:	4b07      	ldr	r3, [pc, #28]	; (800f07c <tcp_tmr+0x28>)
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	3301      	adds	r3, #1
 800f062:	b2da      	uxtb	r2, r3
 800f064:	4b05      	ldr	r3, [pc, #20]	; (800f07c <tcp_tmr+0x28>)
 800f066:	701a      	strb	r2, [r3, #0]
 800f068:	4b04      	ldr	r3, [pc, #16]	; (800f07c <tcp_tmr+0x28>)
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	f003 0301 	and.w	r3, r3, #1
 800f070:	2b00      	cmp	r3, #0
 800f072:	d001      	beq.n	800f078 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f074:	f000 fd72 	bl	800fb5c <tcp_slowtmr>
  }
}
 800f078:	bf00      	nop
 800f07a:	bd80      	pop	{r7, pc}
 800f07c:	200115d9 	.word	0x200115d9

0800f080 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b084      	sub	sp, #16
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d105      	bne.n	800f09c <tcp_remove_listener+0x1c>
 800f090:	4b0d      	ldr	r3, [pc, #52]	; (800f0c8 <tcp_remove_listener+0x48>)
 800f092:	22ff      	movs	r2, #255	; 0xff
 800f094:	490d      	ldr	r1, [pc, #52]	; (800f0cc <tcp_remove_listener+0x4c>)
 800f096:	480e      	ldr	r0, [pc, #56]	; (800f0d0 <tcp_remove_listener+0x50>)
 800f098:	f00b fe50 	bl	801ad3c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	60fb      	str	r3, [r7, #12]
 800f0a0:	e00a      	b.n	800f0b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0a6:	683a      	ldr	r2, [r7, #0]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d102      	bne.n	800f0b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	60fb      	str	r3, [r7, #12]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d1f1      	bne.n	800f0a2 <tcp_remove_listener+0x22>
    }
  }
}
 800f0be:	bf00      	nop
 800f0c0:	bf00      	nop
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	0801d3b8 	.word	0x0801d3b8
 800f0cc:	0801d440 	.word	0x0801d440
 800f0d0:	0801d3fc 	.word	0x0801d3fc

0800f0d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d106      	bne.n	800f0f0 <tcp_listen_closed+0x1c>
 800f0e2:	4b14      	ldr	r3, [pc, #80]	; (800f134 <tcp_listen_closed+0x60>)
 800f0e4:	f240 1211 	movw	r2, #273	; 0x111
 800f0e8:	4913      	ldr	r1, [pc, #76]	; (800f138 <tcp_listen_closed+0x64>)
 800f0ea:	4814      	ldr	r0, [pc, #80]	; (800f13c <tcp_listen_closed+0x68>)
 800f0ec:	f00b fe26 	bl	801ad3c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	7d1b      	ldrb	r3, [r3, #20]
 800f0f4:	2b01      	cmp	r3, #1
 800f0f6:	d006      	beq.n	800f106 <tcp_listen_closed+0x32>
 800f0f8:	4b0e      	ldr	r3, [pc, #56]	; (800f134 <tcp_listen_closed+0x60>)
 800f0fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f0fe:	4910      	ldr	r1, [pc, #64]	; (800f140 <tcp_listen_closed+0x6c>)
 800f100:	480e      	ldr	r0, [pc, #56]	; (800f13c <tcp_listen_closed+0x68>)
 800f102:	f00b fe1b 	bl	801ad3c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f106:	2301      	movs	r3, #1
 800f108:	60fb      	str	r3, [r7, #12]
 800f10a:	e00b      	b.n	800f124 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f10c:	4a0d      	ldr	r2, [pc, #52]	; (800f144 <tcp_listen_closed+0x70>)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	6879      	ldr	r1, [r7, #4]
 800f118:	4618      	mov	r0, r3
 800f11a:	f7ff ffb1 	bl	800f080 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	3301      	adds	r3, #1
 800f122:	60fb      	str	r3, [r7, #12]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2b03      	cmp	r3, #3
 800f128:	d9f0      	bls.n	800f10c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f12a:	bf00      	nop
 800f12c:	bf00      	nop
 800f12e:	3710      	adds	r7, #16
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	0801d3b8 	.word	0x0801d3b8
 800f138:	0801d468 	.word	0x0801d468
 800f13c:	0801d3fc 	.word	0x0801d3fc
 800f140:	0801d474 	.word	0x0801d474
 800f144:	0801f614 	.word	0x0801f614

0800f148 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f148:	b5b0      	push	{r4, r5, r7, lr}
 800f14a:	b088      	sub	sp, #32
 800f14c:	af04      	add	r7, sp, #16
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	460b      	mov	r3, r1
 800f152:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d106      	bne.n	800f168 <tcp_close_shutdown+0x20>
 800f15a:	4b63      	ldr	r3, [pc, #396]	; (800f2e8 <tcp_close_shutdown+0x1a0>)
 800f15c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f160:	4962      	ldr	r1, [pc, #392]	; (800f2ec <tcp_close_shutdown+0x1a4>)
 800f162:	4863      	ldr	r0, [pc, #396]	; (800f2f0 <tcp_close_shutdown+0x1a8>)
 800f164:	f00b fdea 	bl	801ad3c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f168:	78fb      	ldrb	r3, [r7, #3]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d066      	beq.n	800f23c <tcp_close_shutdown+0xf4>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	7d1b      	ldrb	r3, [r3, #20]
 800f172:	2b04      	cmp	r3, #4
 800f174:	d003      	beq.n	800f17e <tcp_close_shutdown+0x36>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	7d1b      	ldrb	r3, [r3, #20]
 800f17a:	2b07      	cmp	r3, #7
 800f17c:	d15e      	bne.n	800f23c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f182:	2b00      	cmp	r3, #0
 800f184:	d104      	bne.n	800f190 <tcp_close_shutdown+0x48>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f18a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f18e:	d055      	beq.n	800f23c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	8b5b      	ldrh	r3, [r3, #26]
 800f194:	f003 0310 	and.w	r3, r3, #16
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d106      	bne.n	800f1aa <tcp_close_shutdown+0x62>
 800f19c:	4b52      	ldr	r3, [pc, #328]	; (800f2e8 <tcp_close_shutdown+0x1a0>)
 800f19e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f1a2:	4954      	ldr	r1, [pc, #336]	; (800f2f4 <tcp_close_shutdown+0x1ac>)
 800f1a4:	4852      	ldr	r0, [pc, #328]	; (800f2f0 <tcp_close_shutdown+0x1a8>)
 800f1a6:	f00b fdc9 	bl	801ad3c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f1b2:	687d      	ldr	r5, [r7, #4]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	3304      	adds	r3, #4
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	8ad2      	ldrh	r2, [r2, #22]
 800f1bc:	6879      	ldr	r1, [r7, #4]
 800f1be:	8b09      	ldrh	r1, [r1, #24]
 800f1c0:	9102      	str	r1, [sp, #8]
 800f1c2:	9201      	str	r2, [sp, #4]
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	462b      	mov	r3, r5
 800f1c8:	4622      	mov	r2, r4
 800f1ca:	4601      	mov	r1, r0
 800f1cc:	6878      	ldr	r0, [r7, #4]
 800f1ce:	f005 fdd1 	bl	8014d74 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f001 fbb2 	bl	801093c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f1d8:	4b47      	ldr	r3, [pc, #284]	; (800f2f8 <tcp_close_shutdown+0x1b0>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d105      	bne.n	800f1ee <tcp_close_shutdown+0xa6>
 800f1e2:	4b45      	ldr	r3, [pc, #276]	; (800f2f8 <tcp_close_shutdown+0x1b0>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	4a43      	ldr	r2, [pc, #268]	; (800f2f8 <tcp_close_shutdown+0x1b0>)
 800f1ea:	6013      	str	r3, [r2, #0]
 800f1ec:	e013      	b.n	800f216 <tcp_close_shutdown+0xce>
 800f1ee:	4b42      	ldr	r3, [pc, #264]	; (800f2f8 <tcp_close_shutdown+0x1b0>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	60fb      	str	r3, [r7, #12]
 800f1f4:	e00c      	b.n	800f210 <tcp_close_shutdown+0xc8>
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	687a      	ldr	r2, [r7, #4]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d104      	bne.n	800f20a <tcp_close_shutdown+0xc2>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	68da      	ldr	r2, [r3, #12]
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	60da      	str	r2, [r3, #12]
 800f208:	e005      	b.n	800f216 <tcp_close_shutdown+0xce>
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	60fb      	str	r3, [r7, #12]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d1ef      	bne.n	800f1f6 <tcp_close_shutdown+0xae>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	60da      	str	r2, [r3, #12]
 800f21c:	4b37      	ldr	r3, [pc, #220]	; (800f2fc <tcp_close_shutdown+0x1b4>)
 800f21e:	2201      	movs	r2, #1
 800f220:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f222:	4b37      	ldr	r3, [pc, #220]	; (800f300 <tcp_close_shutdown+0x1b8>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d102      	bne.n	800f232 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f22c:	f004 f846 	bl	80132bc <tcp_trigger_input_pcb_close>
 800f230:	e002      	b.n	800f238 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7ff fed6 	bl	800efe4 <tcp_free>
      }
      return ERR_OK;
 800f238:	2300      	movs	r3, #0
 800f23a:	e050      	b.n	800f2de <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	7d1b      	ldrb	r3, [r3, #20]
 800f240:	2b02      	cmp	r3, #2
 800f242:	d03b      	beq.n	800f2bc <tcp_close_shutdown+0x174>
 800f244:	2b02      	cmp	r3, #2
 800f246:	dc44      	bgt.n	800f2d2 <tcp_close_shutdown+0x18a>
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d002      	beq.n	800f252 <tcp_close_shutdown+0x10a>
 800f24c:	2b01      	cmp	r3, #1
 800f24e:	d02a      	beq.n	800f2a6 <tcp_close_shutdown+0x15e>
 800f250:	e03f      	b.n	800f2d2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	8adb      	ldrh	r3, [r3, #22]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d021      	beq.n	800f29e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f25a:	4b2a      	ldr	r3, [pc, #168]	; (800f304 <tcp_close_shutdown+0x1bc>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	429a      	cmp	r2, r3
 800f262:	d105      	bne.n	800f270 <tcp_close_shutdown+0x128>
 800f264:	4b27      	ldr	r3, [pc, #156]	; (800f304 <tcp_close_shutdown+0x1bc>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	4a26      	ldr	r2, [pc, #152]	; (800f304 <tcp_close_shutdown+0x1bc>)
 800f26c:	6013      	str	r3, [r2, #0]
 800f26e:	e013      	b.n	800f298 <tcp_close_shutdown+0x150>
 800f270:	4b24      	ldr	r3, [pc, #144]	; (800f304 <tcp_close_shutdown+0x1bc>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	60bb      	str	r3, [r7, #8]
 800f276:	e00c      	b.n	800f292 <tcp_close_shutdown+0x14a>
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d104      	bne.n	800f28c <tcp_close_shutdown+0x144>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	68da      	ldr	r2, [r3, #12]
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	60da      	str	r2, [r3, #12]
 800f28a:	e005      	b.n	800f298 <tcp_close_shutdown+0x150>
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	60bb      	str	r3, [r7, #8]
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1ef      	bne.n	800f278 <tcp_close_shutdown+0x130>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2200      	movs	r2, #0
 800f29c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f7ff fea0 	bl	800efe4 <tcp_free>
      break;
 800f2a4:	e01a      	b.n	800f2dc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f7ff ff14 	bl	800f0d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f2ac:	6879      	ldr	r1, [r7, #4]
 800f2ae:	4816      	ldr	r0, [pc, #88]	; (800f308 <tcp_close_shutdown+0x1c0>)
 800f2b0:	f001 fb94 	bl	80109dc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f7ff feb1 	bl	800f01c <tcp_free_listen>
      break;
 800f2ba:	e00f      	b.n	800f2dc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f2bc:	6879      	ldr	r1, [r7, #4]
 800f2be:	480e      	ldr	r0, [pc, #56]	; (800f2f8 <tcp_close_shutdown+0x1b0>)
 800f2c0:	f001 fb8c 	bl	80109dc <tcp_pcb_remove>
 800f2c4:	4b0d      	ldr	r3, [pc, #52]	; (800f2fc <tcp_close_shutdown+0x1b4>)
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff fe8a 	bl	800efe4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f2d0:	e004      	b.n	800f2dc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f81a 	bl	800f30c <tcp_close_shutdown_fin>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	e000      	b.n	800f2de <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f2dc:	2300      	movs	r3, #0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bdb0      	pop	{r4, r5, r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	0801d3b8 	.word	0x0801d3b8
 800f2ec:	0801d48c 	.word	0x0801d48c
 800f2f0:	0801d3fc 	.word	0x0801d3fc
 800f2f4:	0801d4ac 	.word	0x0801d4ac
 800f2f8:	20018560 	.word	0x20018560
 800f2fc:	2001855c 	.word	0x2001855c
 800f300:	20018574 	.word	0x20018574
 800f304:	2001856c 	.word	0x2001856c
 800f308:	20018568 	.word	0x20018568

0800f30c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d106      	bne.n	800f328 <tcp_close_shutdown_fin+0x1c>
 800f31a:	4b2e      	ldr	r3, [pc, #184]	; (800f3d4 <tcp_close_shutdown_fin+0xc8>)
 800f31c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f320:	492d      	ldr	r1, [pc, #180]	; (800f3d8 <tcp_close_shutdown_fin+0xcc>)
 800f322:	482e      	ldr	r0, [pc, #184]	; (800f3dc <tcp_close_shutdown_fin+0xd0>)
 800f324:	f00b fd0a 	bl	801ad3c <iprintf>

  switch (pcb->state) {
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	7d1b      	ldrb	r3, [r3, #20]
 800f32c:	2b07      	cmp	r3, #7
 800f32e:	d020      	beq.n	800f372 <tcp_close_shutdown_fin+0x66>
 800f330:	2b07      	cmp	r3, #7
 800f332:	dc2b      	bgt.n	800f38c <tcp_close_shutdown_fin+0x80>
 800f334:	2b03      	cmp	r3, #3
 800f336:	d002      	beq.n	800f33e <tcp_close_shutdown_fin+0x32>
 800f338:	2b04      	cmp	r3, #4
 800f33a:	d00d      	beq.n	800f358 <tcp_close_shutdown_fin+0x4c>
 800f33c:	e026      	b.n	800f38c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f004 fe26 	bl	8013f90 <tcp_send_fin>
 800f344:	4603      	mov	r3, r0
 800f346:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d11f      	bne.n	800f390 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2205      	movs	r2, #5
 800f354:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f356:	e01b      	b.n	800f390 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f004 fe19 	bl	8013f90 <tcp_send_fin>
 800f35e:	4603      	mov	r3, r0
 800f360:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d114      	bne.n	800f394 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2205      	movs	r2, #5
 800f36e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f370:	e010      	b.n	800f394 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f004 fe0c 	bl	8013f90 <tcp_send_fin>
 800f378:	4603      	mov	r3, r0
 800f37a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d109      	bne.n	800f398 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2209      	movs	r2, #9
 800f388:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f38a:	e005      	b.n	800f398 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f38c:	2300      	movs	r3, #0
 800f38e:	e01c      	b.n	800f3ca <tcp_close_shutdown_fin+0xbe>
      break;
 800f390:	bf00      	nop
 800f392:	e002      	b.n	800f39a <tcp_close_shutdown_fin+0x8e>
      break;
 800f394:	bf00      	nop
 800f396:	e000      	b.n	800f39a <tcp_close_shutdown_fin+0x8e>
      break;
 800f398:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f39a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d103      	bne.n	800f3aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f004 ff32 	bl	801420c <tcp_output>
 800f3a8:	e00d      	b.n	800f3c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f3aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b2:	d108      	bne.n	800f3c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	8b5b      	ldrh	r3, [r3, #26]
 800f3b8:	f043 0308 	orr.w	r3, r3, #8
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	e001      	b.n	800f3ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3710      	adds	r7, #16
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}
 800f3d2:	bf00      	nop
 800f3d4:	0801d3b8 	.word	0x0801d3b8
 800f3d8:	0801d468 	.word	0x0801d468
 800f3dc:	0801d3fc 	.word	0x0801d3fc

0800f3e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d109      	bne.n	800f402 <tcp_close+0x22>
 800f3ee:	4b0f      	ldr	r3, [pc, #60]	; (800f42c <tcp_close+0x4c>)
 800f3f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f3f4:	490e      	ldr	r1, [pc, #56]	; (800f430 <tcp_close+0x50>)
 800f3f6:	480f      	ldr	r0, [pc, #60]	; (800f434 <tcp_close+0x54>)
 800f3f8:	f00b fca0 	bl	801ad3c <iprintf>
 800f3fc:	f06f 030f 	mvn.w	r3, #15
 800f400:	e00f      	b.n	800f422 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	7d1b      	ldrb	r3, [r3, #20]
 800f406:	2b01      	cmp	r3, #1
 800f408:	d006      	beq.n	800f418 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	8b5b      	ldrh	r3, [r3, #26]
 800f40e:	f043 0310 	orr.w	r3, r3, #16
 800f412:	b29a      	uxth	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f418:	2101      	movs	r1, #1
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f7ff fe94 	bl	800f148 <tcp_close_shutdown>
 800f420:	4603      	mov	r3, r0
}
 800f422:	4618      	mov	r0, r3
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	0801d3b8 	.word	0x0801d3b8
 800f430:	0801d4c8 	.word	0x0801d4c8
 800f434:	0801d3fc 	.word	0x0801d3fc

0800f438 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d109      	bne.n	800f45e <tcp_shutdown+0x26>
 800f44a:	4b26      	ldr	r3, [pc, #152]	; (800f4e4 <tcp_shutdown+0xac>)
 800f44c:	f240 2207 	movw	r2, #519	; 0x207
 800f450:	4925      	ldr	r1, [pc, #148]	; (800f4e8 <tcp_shutdown+0xb0>)
 800f452:	4826      	ldr	r0, [pc, #152]	; (800f4ec <tcp_shutdown+0xb4>)
 800f454:	f00b fc72 	bl	801ad3c <iprintf>
 800f458:	f06f 030f 	mvn.w	r3, #15
 800f45c:	e03d      	b.n	800f4da <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	7d1b      	ldrb	r3, [r3, #20]
 800f462:	2b01      	cmp	r3, #1
 800f464:	d102      	bne.n	800f46c <tcp_shutdown+0x34>
    return ERR_CONN;
 800f466:	f06f 030a 	mvn.w	r3, #10
 800f46a:	e036      	b.n	800f4da <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d01b      	beq.n	800f4aa <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	8b5b      	ldrh	r3, [r3, #26]
 800f476:	f043 0310 	orr.w	r3, r3, #16
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d005      	beq.n	800f492 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f486:	2101      	movs	r1, #1
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f7ff fe5d 	bl	800f148 <tcp_close_shutdown>
 800f48e:	4603      	mov	r3, r0
 800f490:	e023      	b.n	800f4da <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f496:	2b00      	cmp	r3, #0
 800f498:	d007      	beq.n	800f4aa <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7ff fae4 	bl	800ea6c <pbuf_free>
      pcb->refused_data = NULL;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d013      	beq.n	800f4d8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
 800f4b4:	2b04      	cmp	r3, #4
 800f4b6:	dc02      	bgt.n	800f4be <tcp_shutdown+0x86>
 800f4b8:	2b03      	cmp	r3, #3
 800f4ba:	da02      	bge.n	800f4c2 <tcp_shutdown+0x8a>
 800f4bc:	e009      	b.n	800f4d2 <tcp_shutdown+0x9a>
 800f4be:	2b07      	cmp	r3, #7
 800f4c0:	d107      	bne.n	800f4d2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	b2db      	uxtb	r3, r3
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	68f8      	ldr	r0, [r7, #12]
 800f4ca:	f7ff fe3d 	bl	800f148 <tcp_close_shutdown>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	e003      	b.n	800f4da <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f4d2:	f06f 030a 	mvn.w	r3, #10
 800f4d6:	e000      	b.n	800f4da <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f4d8:	2300      	movs	r3, #0
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	0801d3b8 	.word	0x0801d3b8
 800f4e8:	0801d4e0 	.word	0x0801d4e0
 800f4ec:	0801d3fc 	.word	0x0801d3fc

0800f4f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b08e      	sub	sp, #56	; 0x38
 800f4f4:	af04      	add	r7, sp, #16
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d107      	bne.n	800f510 <tcp_abandon+0x20>
 800f500:	4b52      	ldr	r3, [pc, #328]	; (800f64c <tcp_abandon+0x15c>)
 800f502:	f240 223d 	movw	r2, #573	; 0x23d
 800f506:	4952      	ldr	r1, [pc, #328]	; (800f650 <tcp_abandon+0x160>)
 800f508:	4852      	ldr	r0, [pc, #328]	; (800f654 <tcp_abandon+0x164>)
 800f50a:	f00b fc17 	bl	801ad3c <iprintf>
 800f50e:	e099      	b.n	800f644 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	7d1b      	ldrb	r3, [r3, #20]
 800f514:	2b01      	cmp	r3, #1
 800f516:	d106      	bne.n	800f526 <tcp_abandon+0x36>
 800f518:	4b4c      	ldr	r3, [pc, #304]	; (800f64c <tcp_abandon+0x15c>)
 800f51a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f51e:	494e      	ldr	r1, [pc, #312]	; (800f658 <tcp_abandon+0x168>)
 800f520:	484c      	ldr	r0, [pc, #304]	; (800f654 <tcp_abandon+0x164>)
 800f522:	f00b fc0b 	bl	801ad3c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	7d1b      	ldrb	r3, [r3, #20]
 800f52a:	2b0a      	cmp	r3, #10
 800f52c:	d107      	bne.n	800f53e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f52e:	6879      	ldr	r1, [r7, #4]
 800f530:	484a      	ldr	r0, [pc, #296]	; (800f65c <tcp_abandon+0x16c>)
 800f532:	f001 fa53 	bl	80109dc <tcp_pcb_remove>
    tcp_free(pcb);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7ff fd54 	bl	800efe4 <tcp_free>
 800f53c:	e082      	b.n	800f644 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f542:	2300      	movs	r3, #0
 800f544:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f54a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f550:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f558:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	691b      	ldr	r3, [r3, #16]
 800f55e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	7d1b      	ldrb	r3, [r3, #20]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d126      	bne.n	800f5b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	8adb      	ldrh	r3, [r3, #22]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d02e      	beq.n	800f5ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f570:	4b3b      	ldr	r3, [pc, #236]	; (800f660 <tcp_abandon+0x170>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	429a      	cmp	r2, r3
 800f578:	d105      	bne.n	800f586 <tcp_abandon+0x96>
 800f57a:	4b39      	ldr	r3, [pc, #228]	; (800f660 <tcp_abandon+0x170>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	4a37      	ldr	r2, [pc, #220]	; (800f660 <tcp_abandon+0x170>)
 800f582:	6013      	str	r3, [r2, #0]
 800f584:	e013      	b.n	800f5ae <tcp_abandon+0xbe>
 800f586:	4b36      	ldr	r3, [pc, #216]	; (800f660 <tcp_abandon+0x170>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	61fb      	str	r3, [r7, #28]
 800f58c:	e00c      	b.n	800f5a8 <tcp_abandon+0xb8>
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	429a      	cmp	r2, r3
 800f596:	d104      	bne.n	800f5a2 <tcp_abandon+0xb2>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	68da      	ldr	r2, [r3, #12]
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	60da      	str	r2, [r3, #12]
 800f5a0:	e005      	b.n	800f5ae <tcp_abandon+0xbe>
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	68db      	ldr	r3, [r3, #12]
 800f5a6:	61fb      	str	r3, [r7, #28]
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d1ef      	bne.n	800f58e <tcp_abandon+0x9e>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	60da      	str	r2, [r3, #12]
 800f5b4:	e00b      	b.n	800f5ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	8adb      	ldrh	r3, [r3, #22]
 800f5be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f5c0:	6879      	ldr	r1, [r7, #4]
 800f5c2:	4828      	ldr	r0, [pc, #160]	; (800f664 <tcp_abandon+0x174>)
 800f5c4:	f001 fa0a 	bl	80109dc <tcp_pcb_remove>
 800f5c8:	4b27      	ldr	r3, [pc, #156]	; (800f668 <tcp_abandon+0x178>)
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d004      	beq.n	800f5e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 fede 	bl	801039c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d004      	beq.n	800f5f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f000 fed5 	bl	801039c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d004      	beq.n	800f604 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5fe:	4618      	mov	r0, r3
 800f600:	f000 fecc 	bl	801039c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f606:	2b00      	cmp	r3, #0
 800f608:	d00e      	beq.n	800f628 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f60a:	6879      	ldr	r1, [r7, #4]
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	3304      	adds	r3, #4
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	8b12      	ldrh	r2, [r2, #24]
 800f614:	9202      	str	r2, [sp, #8]
 800f616:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f618:	9201      	str	r2, [sp, #4]
 800f61a:	9300      	str	r3, [sp, #0]
 800f61c:	460b      	mov	r3, r1
 800f61e:	697a      	ldr	r2, [r7, #20]
 800f620:	69b9      	ldr	r1, [r7, #24]
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f005 fba6 	bl	8014d74 <tcp_rst>
    }
    last_state = pcb->state;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	7d1b      	ldrb	r3, [r3, #20]
 800f62c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f7ff fcd8 	bl	800efe4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d004      	beq.n	800f644 <tcp_abandon+0x154>
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	f06f 010c 	mvn.w	r1, #12
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	4798      	blx	r3
  }
}
 800f644:	3728      	adds	r7, #40	; 0x28
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	0801d3b8 	.word	0x0801d3b8
 800f650:	0801d4fc 	.word	0x0801d4fc
 800f654:	0801d3fc 	.word	0x0801d3fc
 800f658:	0801d518 	.word	0x0801d518
 800f65c:	20018570 	.word	0x20018570
 800f660:	2001856c 	.word	0x2001856c
 800f664:	20018560 	.word	0x20018560
 800f668:	2001855c 	.word	0x2001855c

0800f66c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f674:	2101      	movs	r1, #1
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f7ff ff3a 	bl	800f4f0 <tcp_abandon>
}
 800f67c:	bf00      	nop
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b088      	sub	sp, #32
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	60b9      	str	r1, [r7, #8]
 800f68e:	4613      	mov	r3, r2
 800f690:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f692:	2304      	movs	r3, #4
 800f694:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d101      	bne.n	800f6a0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f69c:	4b3e      	ldr	r3, [pc, #248]	; (800f798 <tcp_bind+0x114>)
 800f69e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d109      	bne.n	800f6ba <tcp_bind+0x36>
 800f6a6:	4b3d      	ldr	r3, [pc, #244]	; (800f79c <tcp_bind+0x118>)
 800f6a8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f6ac:	493c      	ldr	r1, [pc, #240]	; (800f7a0 <tcp_bind+0x11c>)
 800f6ae:	483d      	ldr	r0, [pc, #244]	; (800f7a4 <tcp_bind+0x120>)
 800f6b0:	f00b fb44 	bl	801ad3c <iprintf>
 800f6b4:	f06f 030f 	mvn.w	r3, #15
 800f6b8:	e06a      	b.n	800f790 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	7d1b      	ldrb	r3, [r3, #20]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d009      	beq.n	800f6d6 <tcp_bind+0x52>
 800f6c2:	4b36      	ldr	r3, [pc, #216]	; (800f79c <tcp_bind+0x118>)
 800f6c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f6c8:	4937      	ldr	r1, [pc, #220]	; (800f7a8 <tcp_bind+0x124>)
 800f6ca:	4836      	ldr	r0, [pc, #216]	; (800f7a4 <tcp_bind+0x120>)
 800f6cc:	f00b fb36 	bl	801ad3c <iprintf>
 800f6d0:	f06f 0305 	mvn.w	r3, #5
 800f6d4:	e05c      	b.n	800f790 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f6d6:	88fb      	ldrh	r3, [r7, #6]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d109      	bne.n	800f6f0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f6dc:	f000 f9f8 	bl	800fad0 <tcp_new_port>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f6e4:	88fb      	ldrh	r3, [r7, #6]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d135      	bne.n	800f756 <tcp_bind+0xd2>
      return ERR_BUF;
 800f6ea:	f06f 0301 	mvn.w	r3, #1
 800f6ee:	e04f      	b.n	800f790 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	61fb      	str	r3, [r7, #28]
 800f6f4:	e02b      	b.n	800f74e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f6f6:	4a2d      	ldr	r2, [pc, #180]	; (800f7ac <tcp_bind+0x128>)
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	61bb      	str	r3, [r7, #24]
 800f702:	e01e      	b.n	800f742 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f704:	69bb      	ldr	r3, [r7, #24]
 800f706:	8adb      	ldrh	r3, [r3, #22]
 800f708:	88fa      	ldrh	r2, [r7, #6]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d116      	bne.n	800f73c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f70e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f710:	2b00      	cmp	r3, #0
 800f712:	d010      	beq.n	800f736 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d00c      	beq.n	800f736 <tcp_bind+0xb2>
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d009      	beq.n	800f736 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d005      	beq.n	800f736 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f732:	429a      	cmp	r2, r3
 800f734:	d102      	bne.n	800f73c <tcp_bind+0xb8>
              return ERR_USE;
 800f736:	f06f 0307 	mvn.w	r3, #7
 800f73a:	e029      	b.n	800f790 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	68db      	ldr	r3, [r3, #12]
 800f740:	61bb      	str	r3, [r7, #24]
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d1dd      	bne.n	800f704 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	3301      	adds	r3, #1
 800f74c:	61fb      	str	r3, [r7, #28]
 800f74e:	69fa      	ldr	r2, [r7, #28]
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	429a      	cmp	r2, r3
 800f754:	dbcf      	blt.n	800f6f6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f756:	68bb      	ldr	r3, [r7, #8]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d00c      	beq.n	800f776 <tcp_bind+0xf2>
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d008      	beq.n	800f776 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d002      	beq.n	800f770 <tcp_bind+0xec>
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	e000      	b.n	800f772 <tcp_bind+0xee>
 800f770:	2300      	movs	r3, #0
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	88fa      	ldrh	r2, [r7, #6]
 800f77a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f77c:	4b0c      	ldr	r3, [pc, #48]	; (800f7b0 <tcp_bind+0x12c>)
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	60da      	str	r2, [r3, #12]
 800f784:	4a0a      	ldr	r2, [pc, #40]	; (800f7b0 <tcp_bind+0x12c>)
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	6013      	str	r3, [r2, #0]
 800f78a:	f005 fcb5 	bl	80150f8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3720      	adds	r7, #32
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	0801f63c 	.word	0x0801f63c
 800f79c:	0801d3b8 	.word	0x0801d3b8
 800f7a0:	0801d54c 	.word	0x0801d54c
 800f7a4:	0801d3fc 	.word	0x0801d3fc
 800f7a8:	0801d564 	.word	0x0801d564
 800f7ac:	0801f614 	.word	0x0801f614
 800f7b0:	2001856c 	.word	0x2001856c

0800f7b4 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d007      	beq.n	800f7d4 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	b2da      	uxtb	r2, r3
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 800f7d2:	e002      	b.n	800f7da <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	721a      	strb	r2, [r3, #8]
}
 800f7da:	bf00      	nop
 800f7dc:	370c      	adds	r7, #12
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr
	...

0800f7e8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	4613      	mov	r3, r2
 800f7f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d106      	bne.n	800f80a <tcp_accept_null+0x22>
 800f7fc:	4b07      	ldr	r3, [pc, #28]	; (800f81c <tcp_accept_null+0x34>)
 800f7fe:	f240 320f 	movw	r2, #783	; 0x30f
 800f802:	4907      	ldr	r1, [pc, #28]	; (800f820 <tcp_accept_null+0x38>)
 800f804:	4807      	ldr	r0, [pc, #28]	; (800f824 <tcp_accept_null+0x3c>)
 800f806:	f00b fa99 	bl	801ad3c <iprintf>

  tcp_abort(pcb);
 800f80a:	68b8      	ldr	r0, [r7, #8]
 800f80c:	f7ff ff2e 	bl	800f66c <tcp_abort>

  return ERR_ABRT;
 800f810:	f06f 030c 	mvn.w	r3, #12
}
 800f814:	4618      	mov	r0, r3
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}
 800f81c:	0801d3b8 	.word	0x0801d3b8
 800f820:	0801d58c 	.word	0x0801d58c
 800f824:	0801d3fc 	.word	0x0801d3fc

0800f828 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b088      	sub	sp, #32
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	460b      	mov	r3, r1
 800f832:	607a      	str	r2, [r7, #4]
 800f834:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f836:	2300      	movs	r3, #0
 800f838:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d109      	bne.n	800f854 <tcp_listen_with_backlog_and_err+0x2c>
 800f840:	4b47      	ldr	r3, [pc, #284]	; (800f960 <tcp_listen_with_backlog_and_err+0x138>)
 800f842:	f240 3259 	movw	r2, #857	; 0x359
 800f846:	4947      	ldr	r1, [pc, #284]	; (800f964 <tcp_listen_with_backlog_and_err+0x13c>)
 800f848:	4847      	ldr	r0, [pc, #284]	; (800f968 <tcp_listen_with_backlog_and_err+0x140>)
 800f84a:	f00b fa77 	bl	801ad3c <iprintf>
 800f84e:	23f0      	movs	r3, #240	; 0xf0
 800f850:	76fb      	strb	r3, [r7, #27]
 800f852:	e079      	b.n	800f948 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	7d1b      	ldrb	r3, [r3, #20]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d009      	beq.n	800f870 <tcp_listen_with_backlog_and_err+0x48>
 800f85c:	4b40      	ldr	r3, [pc, #256]	; (800f960 <tcp_listen_with_backlog_and_err+0x138>)
 800f85e:	f240 325a 	movw	r2, #858	; 0x35a
 800f862:	4942      	ldr	r1, [pc, #264]	; (800f96c <tcp_listen_with_backlog_and_err+0x144>)
 800f864:	4840      	ldr	r0, [pc, #256]	; (800f968 <tcp_listen_with_backlog_and_err+0x140>)
 800f866:	f00b fa69 	bl	801ad3c <iprintf>
 800f86a:	23f1      	movs	r3, #241	; 0xf1
 800f86c:	76fb      	strb	r3, [r7, #27]
 800f86e:	e06b      	b.n	800f948 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	7d1b      	ldrb	r3, [r3, #20]
 800f874:	2b01      	cmp	r3, #1
 800f876:	d104      	bne.n	800f882 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f87c:	23f7      	movs	r3, #247	; 0xf7
 800f87e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f880:	e062      	b.n	800f948 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f882:	2002      	movs	r0, #2
 800f884:	f7fe f992 	bl	800dbac <memp_malloc>
 800f888:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d102      	bne.n	800f896 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f890:	23ff      	movs	r3, #255	; 0xff
 800f892:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f894:	e058      	b.n	800f948 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	691a      	ldr	r2, [r3, #16]
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	8ada      	ldrh	r2, [r3, #22]
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	7d5a      	ldrb	r2, [r3, #21]
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	7a5a      	ldrb	r2, [r3, #9]
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	7ada      	ldrb	r2, [r3, #11]
 800f8c6:	69fb      	ldr	r3, [r7, #28]
 800f8c8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	7a9a      	ldrb	r2, [r3, #10]
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681a      	ldr	r2, [r3, #0]
 800f8d6:	69fb      	ldr	r3, [r7, #28]
 800f8d8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	8adb      	ldrh	r3, [r3, #22]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d021      	beq.n	800f926 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f8e2:	4b23      	ldr	r3, [pc, #140]	; (800f970 <tcp_listen_with_backlog_and_err+0x148>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	68fa      	ldr	r2, [r7, #12]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d105      	bne.n	800f8f8 <tcp_listen_with_backlog_and_err+0xd0>
 800f8ec:	4b20      	ldr	r3, [pc, #128]	; (800f970 <tcp_listen_with_backlog_and_err+0x148>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	4a1f      	ldr	r2, [pc, #124]	; (800f970 <tcp_listen_with_backlog_and_err+0x148>)
 800f8f4:	6013      	str	r3, [r2, #0]
 800f8f6:	e013      	b.n	800f920 <tcp_listen_with_backlog_and_err+0xf8>
 800f8f8:	4b1d      	ldr	r3, [pc, #116]	; (800f970 <tcp_listen_with_backlog_and_err+0x148>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	617b      	str	r3, [r7, #20]
 800f8fe:	e00c      	b.n	800f91a <tcp_listen_with_backlog_and_err+0xf2>
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	68fa      	ldr	r2, [r7, #12]
 800f906:	429a      	cmp	r2, r3
 800f908:	d104      	bne.n	800f914 <tcp_listen_with_backlog_and_err+0xec>
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	68da      	ldr	r2, [r3, #12]
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	60da      	str	r2, [r3, #12]
 800f912:	e005      	b.n	800f920 <tcp_listen_with_backlog_and_err+0xf8>
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	617b      	str	r3, [r7, #20]
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d1ef      	bne.n	800f900 <tcp_listen_with_backlog_and_err+0xd8>
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2200      	movs	r2, #0
 800f924:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f926:	68f8      	ldr	r0, [r7, #12]
 800f928:	f7ff fb5c 	bl	800efe4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	4a11      	ldr	r2, [pc, #68]	; (800f974 <tcp_listen_with_backlog_and_err+0x14c>)
 800f930:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f932:	4b11      	ldr	r3, [pc, #68]	; (800f978 <tcp_listen_with_backlog_and_err+0x150>)
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	60da      	str	r2, [r3, #12]
 800f93a:	4a0f      	ldr	r2, [pc, #60]	; (800f978 <tcp_listen_with_backlog_and_err+0x150>)
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	6013      	str	r3, [r2, #0]
 800f940:	f005 fbda 	bl	80150f8 <tcp_timer_needed>
  res = ERR_OK;
 800f944:	2300      	movs	r3, #0
 800f946:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d002      	beq.n	800f954 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	7efa      	ldrb	r2, [r7, #27]
 800f952:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f954:	69fb      	ldr	r3, [r7, #28]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3720      	adds	r7, #32
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	0801d3b8 	.word	0x0801d3b8
 800f964:	0801d5ac 	.word	0x0801d5ac
 800f968:	0801d3fc 	.word	0x0801d3fc
 800f96c:	0801d5dc 	.word	0x0801d5dc
 800f970:	2001856c 	.word	0x2001856c
 800f974:	0800f7e9 	.word	0x0800f7e9
 800f978:	20018568 	.word	0x20018568

0800f97c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d106      	bne.n	800f998 <tcp_update_rcv_ann_wnd+0x1c>
 800f98a:	4b25      	ldr	r3, [pc, #148]	; (800fa20 <tcp_update_rcv_ann_wnd+0xa4>)
 800f98c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f990:	4924      	ldr	r1, [pc, #144]	; (800fa24 <tcp_update_rcv_ann_wnd+0xa8>)
 800f992:	4825      	ldr	r0, [pc, #148]	; (800fa28 <tcp_update_rcv_ann_wnd+0xac>)
 800f994:	f00b f9d2 	bl	801ad3c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f9a0:	4413      	add	r3, r2
 800f9a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f9ac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f9b0:	bf28      	it	cs
 800f9b2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f9b6:	b292      	uxth	r2, r2
 800f9b8:	4413      	add	r3, r2
 800f9ba:	68fa      	ldr	r2, [r7, #12]
 800f9bc:	1ad3      	subs	r3, r2, r3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	db08      	blt.n	800f9d4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	1ad3      	subs	r3, r2, r3
 800f9d2:	e020      	b.n	800fa16 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	dd03      	ble.n	800f9ea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f9e8:	e014      	b.n	800fa14 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9fc:	d306      	bcc.n	800fa0c <tcp_update_rcv_ann_wnd+0x90>
 800f9fe:	4b08      	ldr	r3, [pc, #32]	; (800fa20 <tcp_update_rcv_ann_wnd+0xa4>)
 800fa00:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fa04:	4909      	ldr	r1, [pc, #36]	; (800fa2c <tcp_update_rcv_ann_wnd+0xb0>)
 800fa06:	4808      	ldr	r0, [pc, #32]	; (800fa28 <tcp_update_rcv_ann_wnd+0xac>)
 800fa08:	f00b f998 	bl	801ad3c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800fa14:	2300      	movs	r3, #0
  }
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3710      	adds	r7, #16
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	0801d3b8 	.word	0x0801d3b8
 800fa24:	0801d614 	.word	0x0801d614
 800fa28:	0801d3fc 	.word	0x0801d3fc
 800fa2c:	0801d638 	.word	0x0801d638

0800fa30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	460b      	mov	r3, r1
 800fa3a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d107      	bne.n	800fa52 <tcp_recved+0x22>
 800fa42:	4b1f      	ldr	r3, [pc, #124]	; (800fac0 <tcp_recved+0x90>)
 800fa44:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fa48:	491e      	ldr	r1, [pc, #120]	; (800fac4 <tcp_recved+0x94>)
 800fa4a:	481f      	ldr	r0, [pc, #124]	; (800fac8 <tcp_recved+0x98>)
 800fa4c:	f00b f976 	bl	801ad3c <iprintf>
 800fa50:	e032      	b.n	800fab8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	7d1b      	ldrb	r3, [r3, #20]
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d106      	bne.n	800fa68 <tcp_recved+0x38>
 800fa5a:	4b19      	ldr	r3, [pc, #100]	; (800fac0 <tcp_recved+0x90>)
 800fa5c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800fa60:	491a      	ldr	r1, [pc, #104]	; (800facc <tcp_recved+0x9c>)
 800fa62:	4819      	ldr	r0, [pc, #100]	; (800fac8 <tcp_recved+0x98>)
 800fa64:	f00b f96a 	bl	801ad3c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa6c:	887b      	ldrh	r3, [r7, #2]
 800fa6e:	4413      	add	r3, r2
 800fa70:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fa72:	89fb      	ldrh	r3, [r7, #14]
 800fa74:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fa78:	d804      	bhi.n	800fa84 <tcp_recved+0x54>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa7e:	89fa      	ldrh	r2, [r7, #14]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d204      	bcs.n	800fa8e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa8a:	851a      	strh	r2, [r3, #40]	; 0x28
 800fa8c:	e002      	b.n	800fa94 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	89fa      	ldrh	r2, [r7, #14]
 800fa92:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f7ff ff71 	bl	800f97c <tcp_update_rcv_ann_wnd>
 800fa9a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800faa2:	d309      	bcc.n	800fab8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	8b5b      	ldrh	r3, [r3, #26]
 800faa8:	f043 0302 	orr.w	r3, r3, #2
 800faac:	b29a      	uxth	r2, r3
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f004 fbaa 	bl	801420c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	0801d3b8 	.word	0x0801d3b8
 800fac4:	0801d654 	.word	0x0801d654
 800fac8:	0801d3fc 	.word	0x0801d3fc
 800facc:	0801d66c 	.word	0x0801d66c

0800fad0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800fad6:	2300      	movs	r3, #0
 800fad8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800fada:	4b1e      	ldr	r3, [pc, #120]	; (800fb54 <tcp_new_port+0x84>)
 800fadc:	881b      	ldrh	r3, [r3, #0]
 800fade:	3301      	adds	r3, #1
 800fae0:	b29a      	uxth	r2, r3
 800fae2:	4b1c      	ldr	r3, [pc, #112]	; (800fb54 <tcp_new_port+0x84>)
 800fae4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800fae6:	4b1b      	ldr	r3, [pc, #108]	; (800fb54 <tcp_new_port+0x84>)
 800fae8:	881b      	ldrh	r3, [r3, #0]
 800faea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faee:	4293      	cmp	r3, r2
 800faf0:	d103      	bne.n	800fafa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800faf2:	4b18      	ldr	r3, [pc, #96]	; (800fb54 <tcp_new_port+0x84>)
 800faf4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800faf8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fafa:	2300      	movs	r3, #0
 800fafc:	71fb      	strb	r3, [r7, #7]
 800fafe:	e01e      	b.n	800fb3e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fb00:	79fb      	ldrb	r3, [r7, #7]
 800fb02:	4a15      	ldr	r2, [pc, #84]	; (800fb58 <tcp_new_port+0x88>)
 800fb04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	603b      	str	r3, [r7, #0]
 800fb0c:	e011      	b.n	800fb32 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	8ada      	ldrh	r2, [r3, #22]
 800fb12:	4b10      	ldr	r3, [pc, #64]	; (800fb54 <tcp_new_port+0x84>)
 800fb14:	881b      	ldrh	r3, [r3, #0]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d108      	bne.n	800fb2c <tcp_new_port+0x5c>
        n++;
 800fb1a:	88bb      	ldrh	r3, [r7, #4]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fb20:	88bb      	ldrh	r3, [r7, #4]
 800fb22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fb26:	d3d8      	bcc.n	800fada <tcp_new_port+0xa>
          return 0;
 800fb28:	2300      	movs	r3, #0
 800fb2a:	e00d      	b.n	800fb48 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	603b      	str	r3, [r7, #0]
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d1ea      	bne.n	800fb0e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fb38:	79fb      	ldrb	r3, [r7, #7]
 800fb3a:	3301      	adds	r3, #1
 800fb3c:	71fb      	strb	r3, [r7, #7]
 800fb3e:	79fb      	ldrb	r3, [r7, #7]
 800fb40:	2b03      	cmp	r3, #3
 800fb42:	d9dd      	bls.n	800fb00 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800fb44:	4b03      	ldr	r3, [pc, #12]	; (800fb54 <tcp_new_port+0x84>)
 800fb46:	881b      	ldrh	r3, [r3, #0]
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	370c      	adds	r7, #12
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr
 800fb54:	20000010 	.word	0x20000010
 800fb58:	0801f614 	.word	0x0801f614

0800fb5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fb5c:	b5b0      	push	{r4, r5, r7, lr}
 800fb5e:	b090      	sub	sp, #64	; 0x40
 800fb60:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fb62:	2300      	movs	r3, #0
 800fb64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fb68:	4b94      	ldr	r3, [pc, #592]	; (800fdbc <tcp_slowtmr+0x260>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	4a93      	ldr	r2, [pc, #588]	; (800fdbc <tcp_slowtmr+0x260>)
 800fb70:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fb72:	4b93      	ldr	r3, [pc, #588]	; (800fdc0 <tcp_slowtmr+0x264>)
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	3301      	adds	r3, #1
 800fb78:	b2da      	uxtb	r2, r3
 800fb7a:	4b91      	ldr	r3, [pc, #580]	; (800fdc0 <tcp_slowtmr+0x264>)
 800fb7c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800fb82:	4b90      	ldr	r3, [pc, #576]	; (800fdc4 <tcp_slowtmr+0x268>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fb88:	e29f      	b.n	80100ca <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8c:	7d1b      	ldrb	r3, [r3, #20]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d106      	bne.n	800fba0 <tcp_slowtmr+0x44>
 800fb92:	4b8d      	ldr	r3, [pc, #564]	; (800fdc8 <tcp_slowtmr+0x26c>)
 800fb94:	f240 42be 	movw	r2, #1214	; 0x4be
 800fb98:	498c      	ldr	r1, [pc, #560]	; (800fdcc <tcp_slowtmr+0x270>)
 800fb9a:	488d      	ldr	r0, [pc, #564]	; (800fdd0 <tcp_slowtmr+0x274>)
 800fb9c:	f00b f8ce 	bl	801ad3c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba2:	7d1b      	ldrb	r3, [r3, #20]
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	d106      	bne.n	800fbb6 <tcp_slowtmr+0x5a>
 800fba8:	4b87      	ldr	r3, [pc, #540]	; (800fdc8 <tcp_slowtmr+0x26c>)
 800fbaa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fbae:	4989      	ldr	r1, [pc, #548]	; (800fdd4 <tcp_slowtmr+0x278>)
 800fbb0:	4887      	ldr	r0, [pc, #540]	; (800fdd0 <tcp_slowtmr+0x274>)
 800fbb2:	f00b f8c3 	bl	801ad3c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb8:	7d1b      	ldrb	r3, [r3, #20]
 800fbba:	2b0a      	cmp	r3, #10
 800fbbc:	d106      	bne.n	800fbcc <tcp_slowtmr+0x70>
 800fbbe:	4b82      	ldr	r3, [pc, #520]	; (800fdc8 <tcp_slowtmr+0x26c>)
 800fbc0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800fbc4:	4984      	ldr	r1, [pc, #528]	; (800fdd8 <tcp_slowtmr+0x27c>)
 800fbc6:	4882      	ldr	r0, [pc, #520]	; (800fdd0 <tcp_slowtmr+0x274>)
 800fbc8:	f00b f8b8 	bl	801ad3c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbce:	7f9a      	ldrb	r2, [r3, #30]
 800fbd0:	4b7b      	ldr	r3, [pc, #492]	; (800fdc0 <tcp_slowtmr+0x264>)
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d105      	bne.n	800fbe4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fbe2:	e272      	b.n	80100ca <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fbe4:	4b76      	ldr	r3, [pc, #472]	; (800fdc0 <tcp_slowtmr+0x264>)
 800fbe6:	781a      	ldrb	r2, [r3, #0]
 800fbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbea:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fbec:	2300      	movs	r3, #0
 800fbee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	7d1b      	ldrb	r3, [r3, #20]
 800fbfc:	2b02      	cmp	r3, #2
 800fbfe:	d10a      	bne.n	800fc16 <tcp_slowtmr+0xba>
 800fc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc06:	2b05      	cmp	r3, #5
 800fc08:	d905      	bls.n	800fc16 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fc0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc0e:	3301      	adds	r3, #1
 800fc10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc14:	e11e      	b.n	800fe54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc1c:	2b0b      	cmp	r3, #11
 800fc1e:	d905      	bls.n	800fc2c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fc20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc24:	3301      	adds	r3, #1
 800fc26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc2a:	e113      	b.n	800fe54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d075      	beq.n	800fd22 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d006      	beq.n	800fc4c <tcp_slowtmr+0xf0>
 800fc3e:	4b62      	ldr	r3, [pc, #392]	; (800fdc8 <tcp_slowtmr+0x26c>)
 800fc40:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fc44:	4965      	ldr	r1, [pc, #404]	; (800fddc <tcp_slowtmr+0x280>)
 800fc46:	4862      	ldr	r0, [pc, #392]	; (800fdd0 <tcp_slowtmr+0x274>)
 800fc48:	f00b f878 	bl	801ad3c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d106      	bne.n	800fc62 <tcp_slowtmr+0x106>
 800fc54:	4b5c      	ldr	r3, [pc, #368]	; (800fdc8 <tcp_slowtmr+0x26c>)
 800fc56:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fc5a:	4961      	ldr	r1, [pc, #388]	; (800fde0 <tcp_slowtmr+0x284>)
 800fc5c:	485c      	ldr	r0, [pc, #368]	; (800fdd0 <tcp_slowtmr+0x274>)
 800fc5e:	f00b f86d 	bl	801ad3c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fc68:	2b0b      	cmp	r3, #11
 800fc6a:	d905      	bls.n	800fc78 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc70:	3301      	adds	r3, #1
 800fc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc76:	e0ed      	b.n	800fe54 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	4a58      	ldr	r2, [pc, #352]	; (800fde4 <tcp_slowtmr+0x288>)
 800fc82:	5cd3      	ldrb	r3, [r2, r3]
 800fc84:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fc8c:	7c7a      	ldrb	r2, [r7, #17]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d907      	bls.n	800fca2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fc98:	3301      	adds	r3, #1
 800fc9a:	b2da      	uxtb	r2, r3
 800fc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fca8:	7c7a      	ldrb	r2, [r7, #17]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	f200 80d2 	bhi.w	800fe54 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d108      	bne.n	800fcd0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fcbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcc0:	f005 f94c 	bl	8014f5c <tcp_zero_window_probe>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d014      	beq.n	800fcf4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fcca:	2300      	movs	r3, #0
 800fccc:	623b      	str	r3, [r7, #32]
 800fcce:	e011      	b.n	800fcf4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcda:	f004 f811 	bl	8013d00 <tcp_split_unsent_seg>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d107      	bne.n	800fcf4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fce6:	f004 fa91 	bl	801420c <tcp_output>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d101      	bne.n	800fcf4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fcf4:	6a3b      	ldr	r3, [r7, #32]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	f000 80ac 	beq.w	800fe54 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcfe:	2200      	movs	r2, #0
 800fd00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fd0a:	2b06      	cmp	r3, #6
 800fd0c:	f200 80a2 	bhi.w	800fe54 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fd16:	3301      	adds	r3, #1
 800fd18:	b2da      	uxtb	r2, r3
 800fd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fd20:	e098      	b.n	800fe54 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	db0f      	blt.n	800fd4c <tcp_slowtmr+0x1f0>
 800fd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fd32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d008      	beq.n	800fd4c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	3301      	adds	r3, #1
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	b21a      	sxth	r2, r3
 800fd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd54:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fd58:	429a      	cmp	r2, r3
 800fd5a:	db7b      	blt.n	800fe54 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fd5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd5e:	f004 fd47 	bl	80147f0 <tcp_rexmit_rto_prepare>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d007      	beq.n	800fd78 <tcp_slowtmr+0x21c>
 800fd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d171      	bne.n	800fe54 <tcp_slowtmr+0x2f8>
 800fd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d06d      	beq.n	800fe54 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7a:	7d1b      	ldrb	r3, [r3, #20]
 800fd7c:	2b02      	cmp	r3, #2
 800fd7e:	d03a      	beq.n	800fdf6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd86:	2b0c      	cmp	r3, #12
 800fd88:	bf28      	it	cs
 800fd8a:	230c      	movcs	r3, #12
 800fd8c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fd94:	10db      	asrs	r3, r3, #3
 800fd96:	b21b      	sxth	r3, r3
 800fd98:	461a      	mov	r2, r3
 800fd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fda0:	4413      	add	r3, r2
 800fda2:	7efa      	ldrb	r2, [r7, #27]
 800fda4:	4910      	ldr	r1, [pc, #64]	; (800fde8 <tcp_slowtmr+0x28c>)
 800fda6:	5c8a      	ldrb	r2, [r1, r2]
 800fda8:	4093      	lsls	r3, r2
 800fdaa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	dc1a      	bgt.n	800fdec <tcp_slowtmr+0x290>
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	b21a      	sxth	r2, r3
 800fdba:	e019      	b.n	800fdf0 <tcp_slowtmr+0x294>
 800fdbc:	20018564 	.word	0x20018564
 800fdc0:	200115da 	.word	0x200115da
 800fdc4:	20018560 	.word	0x20018560
 800fdc8:	0801d3b8 	.word	0x0801d3b8
 800fdcc:	0801d6fc 	.word	0x0801d6fc
 800fdd0:	0801d3fc 	.word	0x0801d3fc
 800fdd4:	0801d728 	.word	0x0801d728
 800fdd8:	0801d754 	.word	0x0801d754
 800fddc:	0801d784 	.word	0x0801d784
 800fde0:	0801d7b8 	.word	0x0801d7b8
 800fde4:	0801f60c 	.word	0x0801f60c
 800fde8:	0801f5fc 	.word	0x0801f5fc
 800fdec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fe02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	bf28      	it	cs
 800fe0c:	4613      	movcs	r3, r2
 800fe0e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fe10:	8a7b      	ldrh	r3, [r7, #18]
 800fe12:	085b      	lsrs	r3, r3, #1
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fe22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe26:	005b      	lsls	r3, r3, #1
 800fe28:	b29b      	uxth	r3, r3
 800fe2a:	429a      	cmp	r2, r3
 800fe2c:	d206      	bcs.n	800fe3c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fe2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe32:	005b      	lsls	r3, r3, #1
 800fe34:	b29a      	uxth	r2, r3
 800fe36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fe40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fe46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe48:	2200      	movs	r2, #0
 800fe4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fe4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe50:	f004 fd3e 	bl	80148d0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fe54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe56:	7d1b      	ldrb	r3, [r3, #20]
 800fe58:	2b06      	cmp	r3, #6
 800fe5a:	d111      	bne.n	800fe80 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fe5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5e:	8b5b      	ldrh	r3, [r3, #26]
 800fe60:	f003 0310 	and.w	r3, r3, #16
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00b      	beq.n	800fe80 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe68:	4b9d      	ldr	r3, [pc, #628]	; (80100e0 <tcp_slowtmr+0x584>)
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6e:	6a1b      	ldr	r3, [r3, #32]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	2b28      	cmp	r3, #40	; 0x28
 800fe74:	d904      	bls.n	800fe80 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fe76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fe80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe82:	7a5b      	ldrb	r3, [r3, #9]
 800fe84:	f003 0308 	and.w	r3, r3, #8
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d04c      	beq.n	800ff26 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800fe8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fe90:	2b04      	cmp	r3, #4
 800fe92:	d003      	beq.n	800fe9c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fe94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe96:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fe98:	2b07      	cmp	r3, #7
 800fe9a:	d144      	bne.n	800ff26 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fe9c:	4b90      	ldr	r3, [pc, #576]	; (80100e0 <tcp_slowtmr+0x584>)
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea2:	6a1b      	ldr	r3, [r3, #32]
 800fea4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800feac:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800feb0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800feb4:	498b      	ldr	r1, [pc, #556]	; (80100e4 <tcp_slowtmr+0x588>)
 800feb6:	fba1 1303 	umull	r1, r3, r1, r3
 800feba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800febc:	429a      	cmp	r2, r3
 800febe:	d90a      	bls.n	800fed6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fec4:	3301      	adds	r3, #1
 800fec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800feca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fece:	3301      	adds	r3, #1
 800fed0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fed4:	e027      	b.n	800ff26 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fed6:	4b82      	ldr	r3, [pc, #520]	; (80100e0 <tcp_slowtmr+0x584>)
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fedc:	6a1b      	ldr	r3, [r3, #32]
 800fede:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800feec:	4618      	mov	r0, r3
 800feee:	4b7e      	ldr	r3, [pc, #504]	; (80100e8 <tcp_slowtmr+0x58c>)
 800fef0:	fb03 f300 	mul.w	r3, r3, r0
 800fef4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fef6:	497b      	ldr	r1, [pc, #492]	; (80100e4 <tcp_slowtmr+0x588>)
 800fef8:	fba1 1303 	umull	r1, r3, r1, r3
 800fefc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d911      	bls.n	800ff26 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ff02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff04:	f004 ffea 	bl	8014edc <tcp_keepalive>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ff0e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d107      	bne.n	800ff26 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ff16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff18:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	b2da      	uxtb	r2, r3
 800ff20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff22:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ff26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d011      	beq.n	800ff52 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ff2e:	4b6c      	ldr	r3, [pc, #432]	; (80100e0 <tcp_slowtmr+0x584>)
 800ff30:	681a      	ldr	r2, [r3, #0]
 800ff32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff34:	6a1b      	ldr	r3, [r3, #32]
 800ff36:	1ad2      	subs	r2, r2, r3
 800ff38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ff3e:	4619      	mov	r1, r3
 800ff40:	460b      	mov	r3, r1
 800ff42:	005b      	lsls	r3, r3, #1
 800ff44:	440b      	add	r3, r1
 800ff46:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d302      	bcc.n	800ff52 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ff4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff4e:	f000 fea9 	bl	8010ca4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ff52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff54:	7d1b      	ldrb	r3, [r3, #20]
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d10b      	bne.n	800ff72 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ff5a:	4b61      	ldr	r3, [pc, #388]	; (80100e0 <tcp_slowtmr+0x584>)
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff60:	6a1b      	ldr	r3, [r3, #32]
 800ff62:	1ad3      	subs	r3, r2, r3
 800ff64:	2b28      	cmp	r3, #40	; 0x28
 800ff66:	d904      	bls.n	800ff72 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ff68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff6c:	3301      	adds	r3, #1
 800ff6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ff72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff74:	7d1b      	ldrb	r3, [r3, #20]
 800ff76:	2b09      	cmp	r3, #9
 800ff78:	d10b      	bne.n	800ff92 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ff7a:	4b59      	ldr	r3, [pc, #356]	; (80100e0 <tcp_slowtmr+0x584>)
 800ff7c:	681a      	ldr	r2, [r3, #0]
 800ff7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff80:	6a1b      	ldr	r3, [r3, #32]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	2bf0      	cmp	r3, #240	; 0xf0
 800ff86:	d904      	bls.n	800ff92 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ff88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff8c:	3301      	adds	r3, #1
 800ff8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ff92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d060      	beq.n	801005c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ff9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffa0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ffa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffa4:	f000 fcca 	bl	801093c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ffa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d010      	beq.n	800ffd0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ffae:	4b4f      	ldr	r3, [pc, #316]	; (80100ec <tcp_slowtmr+0x590>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d106      	bne.n	800ffc6 <tcp_slowtmr+0x46a>
 800ffb8:	4b4d      	ldr	r3, [pc, #308]	; (80100f0 <tcp_slowtmr+0x594>)
 800ffba:	f240 526d 	movw	r2, #1389	; 0x56d
 800ffbe:	494d      	ldr	r1, [pc, #308]	; (80100f4 <tcp_slowtmr+0x598>)
 800ffc0:	484d      	ldr	r0, [pc, #308]	; (80100f8 <tcp_slowtmr+0x59c>)
 800ffc2:	f00a febb 	bl	801ad3c <iprintf>
        prev->next = pcb->next;
 800ffc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc8:	68da      	ldr	r2, [r3, #12]
 800ffca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffcc:	60da      	str	r2, [r3, #12]
 800ffce:	e00f      	b.n	800fff0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ffd0:	4b46      	ldr	r3, [pc, #280]	; (80100ec <tcp_slowtmr+0x590>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d006      	beq.n	800ffe8 <tcp_slowtmr+0x48c>
 800ffda:	4b45      	ldr	r3, [pc, #276]	; (80100f0 <tcp_slowtmr+0x594>)
 800ffdc:	f240 5271 	movw	r2, #1393	; 0x571
 800ffe0:	4946      	ldr	r1, [pc, #280]	; (80100fc <tcp_slowtmr+0x5a0>)
 800ffe2:	4845      	ldr	r0, [pc, #276]	; (80100f8 <tcp_slowtmr+0x59c>)
 800ffe4:	f00a feaa 	bl	801ad3c <iprintf>
        tcp_active_pcbs = pcb->next;
 800ffe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	4a3f      	ldr	r2, [pc, #252]	; (80100ec <tcp_slowtmr+0x590>)
 800ffee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d013      	beq.n	8010020 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fffe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010000:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010004:	3304      	adds	r3, #4
 8010006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010008:	8ad2      	ldrh	r2, [r2, #22]
 801000a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801000c:	8b09      	ldrh	r1, [r1, #24]
 801000e:	9102      	str	r1, [sp, #8]
 8010010:	9201      	str	r2, [sp, #4]
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	462b      	mov	r3, r5
 8010016:	4622      	mov	r2, r4
 8010018:	4601      	mov	r1, r0
 801001a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801001c:	f004 feaa 	bl	8014d74 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010022:	691b      	ldr	r3, [r3, #16]
 8010024:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010028:	7d1b      	ldrb	r3, [r3, #20]
 801002a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801002c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010036:	6838      	ldr	r0, [r7, #0]
 8010038:	f7fe ffd4 	bl	800efe4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801003c:	4b30      	ldr	r3, [pc, #192]	; (8010100 <tcp_slowtmr+0x5a4>)
 801003e:	2200      	movs	r2, #0
 8010040:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d004      	beq.n	8010052 <tcp_slowtmr+0x4f6>
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f06f 010c 	mvn.w	r1, #12
 801004e:	68b8      	ldr	r0, [r7, #8]
 8010050:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010052:	4b2b      	ldr	r3, [pc, #172]	; (8010100 <tcp_slowtmr+0x5a4>)
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d037      	beq.n	80100ca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801005a:	e590      	b.n	800fb7e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801005c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010068:	7f1b      	ldrb	r3, [r3, #28]
 801006a:	3301      	adds	r3, #1
 801006c:	b2da      	uxtb	r2, r3
 801006e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010070:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010074:	7f1a      	ldrb	r2, [r3, #28]
 8010076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010078:	7f5b      	ldrb	r3, [r3, #29]
 801007a:	429a      	cmp	r2, r3
 801007c:	d325      	bcc.n	80100ca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 801007e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010080:	2200      	movs	r2, #0
 8010082:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010084:	4b1e      	ldr	r3, [pc, #120]	; (8010100 <tcp_slowtmr+0x5a4>)
 8010086:	2200      	movs	r2, #0
 8010088:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801008a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801008c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010090:	2b00      	cmp	r3, #0
 8010092:	d00b      	beq.n	80100ac <tcp_slowtmr+0x550>
 8010094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801009a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801009c:	6912      	ldr	r2, [r2, #16]
 801009e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80100a0:	4610      	mov	r0, r2
 80100a2:	4798      	blx	r3
 80100a4:	4603      	mov	r3, r0
 80100a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80100aa:	e002      	b.n	80100b2 <tcp_slowtmr+0x556>
 80100ac:	2300      	movs	r3, #0
 80100ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80100b2:	4b13      	ldr	r3, [pc, #76]	; (8010100 <tcp_slowtmr+0x5a4>)
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d000      	beq.n	80100bc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80100ba:	e560      	b.n	800fb7e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80100bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d102      	bne.n	80100ca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80100c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100c6:	f004 f8a1 	bl	801420c <tcp_output>
  while (pcb != NULL) {
 80100ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	f47f ad5c 	bne.w	800fb8a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80100d2:	2300      	movs	r3, #0
 80100d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80100d6:	4b0b      	ldr	r3, [pc, #44]	; (8010104 <tcp_slowtmr+0x5a8>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80100dc:	e067      	b.n	80101ae <tcp_slowtmr+0x652>
 80100de:	bf00      	nop
 80100e0:	20018564 	.word	0x20018564
 80100e4:	10624dd3 	.word	0x10624dd3
 80100e8:	000124f8 	.word	0x000124f8
 80100ec:	20018560 	.word	0x20018560
 80100f0:	0801d3b8 	.word	0x0801d3b8
 80100f4:	0801d7f0 	.word	0x0801d7f0
 80100f8:	0801d3fc 	.word	0x0801d3fc
 80100fc:	0801d81c 	.word	0x0801d81c
 8010100:	2001855c 	.word	0x2001855c
 8010104:	20018570 	.word	0x20018570
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010a:	7d1b      	ldrb	r3, [r3, #20]
 801010c:	2b0a      	cmp	r3, #10
 801010e:	d006      	beq.n	801011e <tcp_slowtmr+0x5c2>
 8010110:	4b2b      	ldr	r3, [pc, #172]	; (80101c0 <tcp_slowtmr+0x664>)
 8010112:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010116:	492b      	ldr	r1, [pc, #172]	; (80101c4 <tcp_slowtmr+0x668>)
 8010118:	482b      	ldr	r0, [pc, #172]	; (80101c8 <tcp_slowtmr+0x66c>)
 801011a:	f00a fe0f 	bl	801ad3c <iprintf>
    pcb_remove = 0;
 801011e:	2300      	movs	r3, #0
 8010120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010124:	4b29      	ldr	r3, [pc, #164]	; (80101cc <tcp_slowtmr+0x670>)
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801012a:	6a1b      	ldr	r3, [r3, #32]
 801012c:	1ad3      	subs	r3, r2, r3
 801012e:	2bf0      	cmp	r3, #240	; 0xf0
 8010130:	d904      	bls.n	801013c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8010132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010136:	3301      	adds	r3, #1
 8010138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801013c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010140:	2b00      	cmp	r3, #0
 8010142:	d02f      	beq.n	80101a4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010146:	f000 fbf9 	bl	801093c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801014a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014c:	2b00      	cmp	r3, #0
 801014e:	d010      	beq.n	8010172 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010150:	4b1f      	ldr	r3, [pc, #124]	; (80101d0 <tcp_slowtmr+0x674>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010156:	429a      	cmp	r2, r3
 8010158:	d106      	bne.n	8010168 <tcp_slowtmr+0x60c>
 801015a:	4b19      	ldr	r3, [pc, #100]	; (80101c0 <tcp_slowtmr+0x664>)
 801015c:	f240 52af 	movw	r2, #1455	; 0x5af
 8010160:	491c      	ldr	r1, [pc, #112]	; (80101d4 <tcp_slowtmr+0x678>)
 8010162:	4819      	ldr	r0, [pc, #100]	; (80101c8 <tcp_slowtmr+0x66c>)
 8010164:	f00a fdea 	bl	801ad3c <iprintf>
        prev->next = pcb->next;
 8010168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016a:	68da      	ldr	r2, [r3, #12]
 801016c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801016e:	60da      	str	r2, [r3, #12]
 8010170:	e00f      	b.n	8010192 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010172:	4b17      	ldr	r3, [pc, #92]	; (80101d0 <tcp_slowtmr+0x674>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010178:	429a      	cmp	r2, r3
 801017a:	d006      	beq.n	801018a <tcp_slowtmr+0x62e>
 801017c:	4b10      	ldr	r3, [pc, #64]	; (80101c0 <tcp_slowtmr+0x664>)
 801017e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010182:	4915      	ldr	r1, [pc, #84]	; (80101d8 <tcp_slowtmr+0x67c>)
 8010184:	4810      	ldr	r0, [pc, #64]	; (80101c8 <tcp_slowtmr+0x66c>)
 8010186:	f00a fdd9 	bl	801ad3c <iprintf>
        tcp_tw_pcbs = pcb->next;
 801018a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	4a10      	ldr	r2, [pc, #64]	; (80101d0 <tcp_slowtmr+0x674>)
 8010190:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010194:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010198:	68db      	ldr	r3, [r3, #12]
 801019a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801019c:	69f8      	ldr	r0, [r7, #28]
 801019e:	f7fe ff21 	bl	800efe4 <tcp_free>
 80101a2:	e004      	b.n	80101ae <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80101a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80101a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101aa:	68db      	ldr	r3, [r3, #12]
 80101ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80101ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d1a9      	bne.n	8010108 <tcp_slowtmr+0x5ac>
    }
  }
}
 80101b4:	bf00      	nop
 80101b6:	bf00      	nop
 80101b8:	3730      	adds	r7, #48	; 0x30
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bdb0      	pop	{r4, r5, r7, pc}
 80101be:	bf00      	nop
 80101c0:	0801d3b8 	.word	0x0801d3b8
 80101c4:	0801d848 	.word	0x0801d848
 80101c8:	0801d3fc 	.word	0x0801d3fc
 80101cc:	20018564 	.word	0x20018564
 80101d0:	20018570 	.word	0x20018570
 80101d4:	0801d878 	.word	0x0801d878
 80101d8:	0801d8a0 	.word	0x0801d8a0

080101dc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80101e2:	4b2d      	ldr	r3, [pc, #180]	; (8010298 <tcp_fasttmr+0xbc>)
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	3301      	adds	r3, #1
 80101e8:	b2da      	uxtb	r2, r3
 80101ea:	4b2b      	ldr	r3, [pc, #172]	; (8010298 <tcp_fasttmr+0xbc>)
 80101ec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80101ee:	4b2b      	ldr	r3, [pc, #172]	; (801029c <tcp_fasttmr+0xc0>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80101f4:	e048      	b.n	8010288 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	7f9a      	ldrb	r2, [r3, #30]
 80101fa:	4b27      	ldr	r3, [pc, #156]	; (8010298 <tcp_fasttmr+0xbc>)
 80101fc:	781b      	ldrb	r3, [r3, #0]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d03f      	beq.n	8010282 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010202:	4b25      	ldr	r3, [pc, #148]	; (8010298 <tcp_fasttmr+0xbc>)
 8010204:	781a      	ldrb	r2, [r3, #0]
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	8b5b      	ldrh	r3, [r3, #26]
 801020e:	f003 0301 	and.w	r3, r3, #1
 8010212:	2b00      	cmp	r3, #0
 8010214:	d010      	beq.n	8010238 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	8b5b      	ldrh	r3, [r3, #26]
 801021a:	f043 0302 	orr.w	r3, r3, #2
 801021e:	b29a      	uxth	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f003 fff1 	bl	801420c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	8b5b      	ldrh	r3, [r3, #26]
 801022e:	f023 0303 	bic.w	r3, r3, #3
 8010232:	b29a      	uxth	r2, r3
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	8b5b      	ldrh	r3, [r3, #26]
 801023c:	f003 0308 	and.w	r3, r3, #8
 8010240:	2b00      	cmp	r3, #0
 8010242:	d009      	beq.n	8010258 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	8b5b      	ldrh	r3, [r3, #26]
 8010248:	f023 0308 	bic.w	r3, r3, #8
 801024c:	b29a      	uxth	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7ff f85a 	bl	800f30c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010262:	2b00      	cmp	r3, #0
 8010264:	d00a      	beq.n	801027c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010266:	4b0e      	ldr	r3, [pc, #56]	; (80102a0 <tcp_fasttmr+0xc4>)
 8010268:	2200      	movs	r2, #0
 801026a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801026c:	6878      	ldr	r0, [r7, #4]
 801026e:	f000 f819 	bl	80102a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010272:	4b0b      	ldr	r3, [pc, #44]	; (80102a0 <tcp_fasttmr+0xc4>)
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d000      	beq.n	801027c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801027a:	e7b8      	b.n	80101ee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	607b      	str	r3, [r7, #4]
 8010280:	e002      	b.n	8010288 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d1b3      	bne.n	80101f6 <tcp_fasttmr+0x1a>
    }
  }
}
 801028e:	bf00      	nop
 8010290:	bf00      	nop
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	200115da 	.word	0x200115da
 801029c:	20018560 	.word	0x20018560
 80102a0:	2001855c 	.word	0x2001855c

080102a4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80102a4:	b590      	push	{r4, r7, lr}
 80102a6:	b085      	sub	sp, #20
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d109      	bne.n	80102c6 <tcp_process_refused_data+0x22>
 80102b2:	4b37      	ldr	r3, [pc, #220]	; (8010390 <tcp_process_refused_data+0xec>)
 80102b4:	f240 6209 	movw	r2, #1545	; 0x609
 80102b8:	4936      	ldr	r1, [pc, #216]	; (8010394 <tcp_process_refused_data+0xf0>)
 80102ba:	4837      	ldr	r0, [pc, #220]	; (8010398 <tcp_process_refused_data+0xf4>)
 80102bc:	f00a fd3e 	bl	801ad3c <iprintf>
 80102c0:	f06f 030f 	mvn.w	r3, #15
 80102c4:	e060      	b.n	8010388 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102ca:	7b5b      	ldrb	r3, [r3, #13]
 80102cc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80102d2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2200      	movs	r2, #0
 80102d8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d00b      	beq.n	80102fc <tcp_process_refused_data+0x58>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6918      	ldr	r0, [r3, #16]
 80102ee:	2300      	movs	r3, #0
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	6879      	ldr	r1, [r7, #4]
 80102f4:	47a0      	blx	r4
 80102f6:	4603      	mov	r3, r0
 80102f8:	73fb      	strb	r3, [r7, #15]
 80102fa:	e007      	b.n	801030c <tcp_process_refused_data+0x68>
 80102fc:	2300      	movs	r3, #0
 80102fe:	68ba      	ldr	r2, [r7, #8]
 8010300:	6879      	ldr	r1, [r7, #4]
 8010302:	2000      	movs	r0, #0
 8010304:	f000 f8a4 	bl	8010450 <tcp_recv_null>
 8010308:	4603      	mov	r3, r0
 801030a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801030c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d12a      	bne.n	801036a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010314:	7bbb      	ldrb	r3, [r7, #14]
 8010316:	f003 0320 	and.w	r3, r3, #32
 801031a:	2b00      	cmp	r3, #0
 801031c:	d033      	beq.n	8010386 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010322:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010326:	d005      	beq.n	8010334 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801032c:	3301      	adds	r3, #1
 801032e:	b29a      	uxth	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00b      	beq.n	8010356 <tcp_process_refused_data+0xb2>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6918      	ldr	r0, [r3, #16]
 8010348:	2300      	movs	r3, #0
 801034a:	2200      	movs	r2, #0
 801034c:	6879      	ldr	r1, [r7, #4]
 801034e:	47a0      	blx	r4
 8010350:	4603      	mov	r3, r0
 8010352:	73fb      	strb	r3, [r7, #15]
 8010354:	e001      	b.n	801035a <tcp_process_refused_data+0xb6>
 8010356:	2300      	movs	r3, #0
 8010358:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801035a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801035e:	f113 0f0d 	cmn.w	r3, #13
 8010362:	d110      	bne.n	8010386 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010364:	f06f 030c 	mvn.w	r3, #12
 8010368:	e00e      	b.n	8010388 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801036a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801036e:	f113 0f0d 	cmn.w	r3, #13
 8010372:	d102      	bne.n	801037a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010374:	f06f 030c 	mvn.w	r3, #12
 8010378:	e006      	b.n	8010388 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010380:	f06f 0304 	mvn.w	r3, #4
 8010384:	e000      	b.n	8010388 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010386:	2300      	movs	r3, #0
}
 8010388:	4618      	mov	r0, r3
 801038a:	3714      	adds	r7, #20
 801038c:	46bd      	mov	sp, r7
 801038e:	bd90      	pop	{r4, r7, pc}
 8010390:	0801d3b8 	.word	0x0801d3b8
 8010394:	0801d8c8 	.word	0x0801d8c8
 8010398:	0801d3fc 	.word	0x0801d3fc

0801039c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b084      	sub	sp, #16
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80103a4:	e007      	b.n	80103b6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 f80a 	bl	80103c6 <tcp_seg_free>
    seg = next;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d1f4      	bne.n	80103a6 <tcp_segs_free+0xa>
  }
}
 80103bc:	bf00      	nop
 80103be:	bf00      	nop
 80103c0:	3710      	adds	r7, #16
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b082      	sub	sp, #8
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00c      	beq.n	80103ee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d004      	beq.n	80103e6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7fe fb43 	bl	800ea6c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80103e6:	6879      	ldr	r1, [r7, #4]
 80103e8:	2003      	movs	r0, #3
 80103ea:	f7fd fc31 	bl	800dc50 <memp_free>
  }
}
 80103ee:	bf00      	nop
 80103f0:	3708      	adds	r7, #8
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
	...

080103f8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b084      	sub	sp, #16
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d106      	bne.n	8010414 <tcp_seg_copy+0x1c>
 8010406:	4b0f      	ldr	r3, [pc, #60]	; (8010444 <tcp_seg_copy+0x4c>)
 8010408:	f240 6282 	movw	r2, #1666	; 0x682
 801040c:	490e      	ldr	r1, [pc, #56]	; (8010448 <tcp_seg_copy+0x50>)
 801040e:	480f      	ldr	r0, [pc, #60]	; (801044c <tcp_seg_copy+0x54>)
 8010410:	f00a fc94 	bl	801ad3c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010414:	2003      	movs	r0, #3
 8010416:	f7fd fbc9 	bl	800dbac <memp_malloc>
 801041a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d101      	bne.n	8010426 <tcp_seg_copy+0x2e>
    return NULL;
 8010422:	2300      	movs	r3, #0
 8010424:	e00a      	b.n	801043c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010426:	2210      	movs	r2, #16
 8010428:	6879      	ldr	r1, [r7, #4]
 801042a:	68f8      	ldr	r0, [r7, #12]
 801042c:	f00a f8be 	bl	801a5ac <memcpy>
  pbuf_ref(cseg->p);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	4618      	mov	r0, r3
 8010436:	f7fe fbbf 	bl	800ebb8 <pbuf_ref>
  return cseg;
 801043a:	68fb      	ldr	r3, [r7, #12]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3710      	adds	r7, #16
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	0801d3b8 	.word	0x0801d3b8
 8010448:	0801d90c 	.word	0x0801d90c
 801044c:	0801d3fc 	.word	0x0801d3fc

08010450 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
 801045c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d109      	bne.n	8010478 <tcp_recv_null+0x28>
 8010464:	4b12      	ldr	r3, [pc, #72]	; (80104b0 <tcp_recv_null+0x60>)
 8010466:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801046a:	4912      	ldr	r1, [pc, #72]	; (80104b4 <tcp_recv_null+0x64>)
 801046c:	4812      	ldr	r0, [pc, #72]	; (80104b8 <tcp_recv_null+0x68>)
 801046e:	f00a fc65 	bl	801ad3c <iprintf>
 8010472:	f06f 030f 	mvn.w	r3, #15
 8010476:	e016      	b.n	80104a6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d009      	beq.n	8010492 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	891b      	ldrh	r3, [r3, #8]
 8010482:	4619      	mov	r1, r3
 8010484:	68b8      	ldr	r0, [r7, #8]
 8010486:	f7ff fad3 	bl	800fa30 <tcp_recved>
    pbuf_free(p);
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7fe faee 	bl	800ea6c <pbuf_free>
 8010490:	e008      	b.n	80104a4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d104      	bne.n	80104a4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801049a:	68b8      	ldr	r0, [r7, #8]
 801049c:	f7fe ffa0 	bl	800f3e0 <tcp_close>
 80104a0:	4603      	mov	r3, r0
 80104a2:	e000      	b.n	80104a6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80104a4:	2300      	movs	r3, #0
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	3710      	adds	r7, #16
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd80      	pop	{r7, pc}
 80104ae:	bf00      	nop
 80104b0:	0801d3b8 	.word	0x0801d3b8
 80104b4:	0801d928 	.word	0x0801d928
 80104b8:	0801d3fc 	.word	0x0801d3fc

080104bc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b086      	sub	sp, #24
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	4603      	mov	r3, r0
 80104c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80104c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	db01      	blt.n	80104d2 <tcp_kill_prio+0x16>
 80104ce:	79fb      	ldrb	r3, [r7, #7]
 80104d0:	e000      	b.n	80104d4 <tcp_kill_prio+0x18>
 80104d2:	237f      	movs	r3, #127	; 0x7f
 80104d4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80104d6:	7afb      	ldrb	r3, [r7, #11]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d034      	beq.n	8010546 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80104dc:	7afb      	ldrb	r3, [r7, #11]
 80104de:	3b01      	subs	r3, #1
 80104e0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80104e2:	2300      	movs	r3, #0
 80104e4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80104e6:	2300      	movs	r3, #0
 80104e8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80104ea:	4b19      	ldr	r3, [pc, #100]	; (8010550 <tcp_kill_prio+0x94>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	617b      	str	r3, [r7, #20]
 80104f0:	e01f      	b.n	8010532 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	7d5b      	ldrb	r3, [r3, #21]
 80104f6:	7afa      	ldrb	r2, [r7, #11]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d80c      	bhi.n	8010516 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010500:	7afa      	ldrb	r2, [r7, #11]
 8010502:	429a      	cmp	r2, r3
 8010504:	d112      	bne.n	801052c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010506:	4b13      	ldr	r3, [pc, #76]	; (8010554 <tcp_kill_prio+0x98>)
 8010508:	681a      	ldr	r2, [r3, #0]
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	6a1b      	ldr	r3, [r3, #32]
 801050e:	1ad3      	subs	r3, r2, r3
 8010510:	68fa      	ldr	r2, [r7, #12]
 8010512:	429a      	cmp	r2, r3
 8010514:	d80a      	bhi.n	801052c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010516:	4b0f      	ldr	r3, [pc, #60]	; (8010554 <tcp_kill_prio+0x98>)
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	6a1b      	ldr	r3, [r3, #32]
 801051e:	1ad3      	subs	r3, r2, r3
 8010520:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	7d5b      	ldrb	r3, [r3, #21]
 801052a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	617b      	str	r3, [r7, #20]
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1dc      	bne.n	80104f2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d004      	beq.n	8010548 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801053e:	6938      	ldr	r0, [r7, #16]
 8010540:	f7ff f894 	bl	800f66c <tcp_abort>
 8010544:	e000      	b.n	8010548 <tcp_kill_prio+0x8c>
    return;
 8010546:	bf00      	nop
  }
}
 8010548:	3718      	adds	r7, #24
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	20018560 	.word	0x20018560
 8010554:	20018564 	.word	0x20018564

08010558 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af00      	add	r7, sp, #0
 801055e:	4603      	mov	r3, r0
 8010560:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010562:	79fb      	ldrb	r3, [r7, #7]
 8010564:	2b08      	cmp	r3, #8
 8010566:	d009      	beq.n	801057c <tcp_kill_state+0x24>
 8010568:	79fb      	ldrb	r3, [r7, #7]
 801056a:	2b09      	cmp	r3, #9
 801056c:	d006      	beq.n	801057c <tcp_kill_state+0x24>
 801056e:	4b1a      	ldr	r3, [pc, #104]	; (80105d8 <tcp_kill_state+0x80>)
 8010570:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010574:	4919      	ldr	r1, [pc, #100]	; (80105dc <tcp_kill_state+0x84>)
 8010576:	481a      	ldr	r0, [pc, #104]	; (80105e0 <tcp_kill_state+0x88>)
 8010578:	f00a fbe0 	bl	801ad3c <iprintf>

  inactivity = 0;
 801057c:	2300      	movs	r3, #0
 801057e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010580:	2300      	movs	r3, #0
 8010582:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010584:	4b17      	ldr	r3, [pc, #92]	; (80105e4 <tcp_kill_state+0x8c>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	617b      	str	r3, [r7, #20]
 801058a:	e017      	b.n	80105bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	7d1b      	ldrb	r3, [r3, #20]
 8010590:	79fa      	ldrb	r2, [r7, #7]
 8010592:	429a      	cmp	r2, r3
 8010594:	d10f      	bne.n	80105b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010596:	4b14      	ldr	r3, [pc, #80]	; (80105e8 <tcp_kill_state+0x90>)
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	6a1b      	ldr	r3, [r3, #32]
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	68fa      	ldr	r2, [r7, #12]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d807      	bhi.n	80105b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80105a6:	4b10      	ldr	r3, [pc, #64]	; (80105e8 <tcp_kill_state+0x90>)
 80105a8:	681a      	ldr	r2, [r3, #0]
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	6a1b      	ldr	r3, [r3, #32]
 80105ae:	1ad3      	subs	r3, r2, r3
 80105b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	617b      	str	r3, [r7, #20]
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d1e4      	bne.n	801058c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d003      	beq.n	80105d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80105c8:	2100      	movs	r1, #0
 80105ca:	6938      	ldr	r0, [r7, #16]
 80105cc:	f7fe ff90 	bl	800f4f0 <tcp_abandon>
  }
}
 80105d0:	bf00      	nop
 80105d2:	3718      	adds	r7, #24
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}
 80105d8:	0801d3b8 	.word	0x0801d3b8
 80105dc:	0801d944 	.word	0x0801d944
 80105e0:	0801d3fc 	.word	0x0801d3fc
 80105e4:	20018560 	.word	0x20018560
 80105e8:	20018564 	.word	0x20018564

080105ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80105f2:	2300      	movs	r3, #0
 80105f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80105f6:	2300      	movs	r3, #0
 80105f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80105fa:	4b12      	ldr	r3, [pc, #72]	; (8010644 <tcp_kill_timewait+0x58>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	60fb      	str	r3, [r7, #12]
 8010600:	e012      	b.n	8010628 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010602:	4b11      	ldr	r3, [pc, #68]	; (8010648 <tcp_kill_timewait+0x5c>)
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	6a1b      	ldr	r3, [r3, #32]
 801060a:	1ad3      	subs	r3, r2, r3
 801060c:	687a      	ldr	r2, [r7, #4]
 801060e:	429a      	cmp	r2, r3
 8010610:	d807      	bhi.n	8010622 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010612:	4b0d      	ldr	r3, [pc, #52]	; (8010648 <tcp_kill_timewait+0x5c>)
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	6a1b      	ldr	r3, [r3, #32]
 801061a:	1ad3      	subs	r3, r2, r3
 801061c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	60fb      	str	r3, [r7, #12]
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1e9      	bne.n	8010602 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d002      	beq.n	801063a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010634:	68b8      	ldr	r0, [r7, #8]
 8010636:	f7ff f819 	bl	800f66c <tcp_abort>
  }
}
 801063a:	bf00      	nop
 801063c:	3710      	adds	r7, #16
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	20018570 	.word	0x20018570
 8010648:	20018564 	.word	0x20018564

0801064c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010652:	4b10      	ldr	r3, [pc, #64]	; (8010694 <tcp_handle_closepend+0x48>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010658:	e014      	b.n	8010684 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	68db      	ldr	r3, [r3, #12]
 801065e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	8b5b      	ldrh	r3, [r3, #26]
 8010664:	f003 0308 	and.w	r3, r3, #8
 8010668:	2b00      	cmp	r3, #0
 801066a:	d009      	beq.n	8010680 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	8b5b      	ldrh	r3, [r3, #26]
 8010670:	f023 0308 	bic.w	r3, r3, #8
 8010674:	b29a      	uxth	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f7fe fe46 	bl	800f30c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d1e7      	bne.n	801065a <tcp_handle_closepend+0xe>
  }
}
 801068a:	bf00      	nop
 801068c:	bf00      	nop
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	20018560 	.word	0x20018560

08010698 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	4603      	mov	r3, r0
 80106a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106a2:	2001      	movs	r0, #1
 80106a4:	f7fd fa82 	bl	800dbac <memp_malloc>
 80106a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d126      	bne.n	80106fe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80106b0:	f7ff ffcc 	bl	801064c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80106b4:	f7ff ff9a 	bl	80105ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106b8:	2001      	movs	r0, #1
 80106ba:	f7fd fa77 	bl	800dbac <memp_malloc>
 80106be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d11b      	bne.n	80106fe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80106c6:	2009      	movs	r0, #9
 80106c8:	f7ff ff46 	bl	8010558 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106cc:	2001      	movs	r0, #1
 80106ce:	f7fd fa6d 	bl	800dbac <memp_malloc>
 80106d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d111      	bne.n	80106fe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80106da:	2008      	movs	r0, #8
 80106dc:	f7ff ff3c 	bl	8010558 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106e0:	2001      	movs	r0, #1
 80106e2:	f7fd fa63 	bl	800dbac <memp_malloc>
 80106e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d107      	bne.n	80106fe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80106ee:	79fb      	ldrb	r3, [r7, #7]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7ff fee3 	bl	80104bc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80106f6:	2001      	movs	r0, #1
 80106f8:	f7fd fa58 	bl	800dbac <memp_malloc>
 80106fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d03f      	beq.n	8010784 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010704:	229c      	movs	r2, #156	; 0x9c
 8010706:	2100      	movs	r1, #0
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f009 ff77 	bl	801a5fc <memset>
    pcb->prio = prio;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	79fa      	ldrb	r2, [r7, #7]
 8010712:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801071a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010724:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	22ff      	movs	r2, #255	; 0xff
 8010732:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f44f 7206 	mov.w	r2, #536	; 0x218
 801073a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2206      	movs	r2, #6
 8010740:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2206      	movs	r2, #6
 8010748:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010750:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	2201      	movs	r2, #1
 8010756:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801075a:	4b0d      	ldr	r3, [pc, #52]	; (8010790 <tcp_alloc+0xf8>)
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010762:	4b0c      	ldr	r3, [pc, #48]	; (8010794 <tcp_alloc+0xfc>)
 8010764:	781a      	ldrb	r2, [r3, #0]
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010770:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	4a08      	ldr	r2, [pc, #32]	; (8010798 <tcp_alloc+0x100>)
 8010778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	4a07      	ldr	r2, [pc, #28]	; (801079c <tcp_alloc+0x104>)
 8010780:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010784:	68fb      	ldr	r3, [r7, #12]
}
 8010786:	4618      	mov	r0, r3
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	20018564 	.word	0x20018564
 8010794:	200115da 	.word	0x200115da
 8010798:	08010451 	.word	0x08010451
 801079c:	006ddd00 	.word	0x006ddd00

080107a0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	4603      	mov	r3, r0
 80107a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80107aa:	2040      	movs	r0, #64	; 0x40
 80107ac:	f7ff ff74 	bl	8010698 <tcp_alloc>
 80107b0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80107b2:	68fb      	ldr	r3, [r7, #12]
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3710      	adds	r7, #16
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80107bc:	b480      	push	{r7}
 80107be:	b083      	sub	sp, #12
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d002      	beq.n	80107d2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	683a      	ldr	r2, [r7, #0]
 80107d0:	611a      	str	r2, [r3, #16]
  }
}
 80107d2:	bf00      	nop
 80107d4:	370c      	adds	r7, #12
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
	...

080107e0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d00e      	beq.n	801080e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	7d1b      	ldrb	r3, [r3, #20]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d106      	bne.n	8010806 <tcp_recv+0x26>
 80107f8:	4b07      	ldr	r3, [pc, #28]	; (8010818 <tcp_recv+0x38>)
 80107fa:	f240 72df 	movw	r2, #2015	; 0x7df
 80107fe:	4907      	ldr	r1, [pc, #28]	; (801081c <tcp_recv+0x3c>)
 8010800:	4807      	ldr	r0, [pc, #28]	; (8010820 <tcp_recv+0x40>)
 8010802:	f00a fa9b 	bl	801ad3c <iprintf>
    pcb->recv = recv;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	683a      	ldr	r2, [r7, #0]
 801080a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801080e:	bf00      	nop
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}
 8010816:	bf00      	nop
 8010818:	0801d3b8 	.word	0x0801d3b8
 801081c:	0801d954 	.word	0x0801d954
 8010820:	0801d3fc 	.word	0x0801d3fc

08010824 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b082      	sub	sp, #8
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d00e      	beq.n	8010852 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	7d1b      	ldrb	r3, [r3, #20]
 8010838:	2b01      	cmp	r3, #1
 801083a:	d106      	bne.n	801084a <tcp_sent+0x26>
 801083c:	4b07      	ldr	r3, [pc, #28]	; (801085c <tcp_sent+0x38>)
 801083e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010842:	4907      	ldr	r1, [pc, #28]	; (8010860 <tcp_sent+0x3c>)
 8010844:	4807      	ldr	r0, [pc, #28]	; (8010864 <tcp_sent+0x40>)
 8010846:	f00a fa79 	bl	801ad3c <iprintf>
    pcb->sent = sent;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010852:	bf00      	nop
 8010854:	3708      	adds	r7, #8
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	0801d3b8 	.word	0x0801d3b8
 8010860:	0801d97c 	.word	0x0801d97c
 8010864:	0801d3fc 	.word	0x0801d3fc

08010868 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d00e      	beq.n	8010896 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	7d1b      	ldrb	r3, [r3, #20]
 801087c:	2b01      	cmp	r3, #1
 801087e:	d106      	bne.n	801088e <tcp_err+0x26>
 8010880:	4b07      	ldr	r3, [pc, #28]	; (80108a0 <tcp_err+0x38>)
 8010882:	f640 020d 	movw	r2, #2061	; 0x80d
 8010886:	4907      	ldr	r1, [pc, #28]	; (80108a4 <tcp_err+0x3c>)
 8010888:	4807      	ldr	r0, [pc, #28]	; (80108a8 <tcp_err+0x40>)
 801088a:	f00a fa57 	bl	801ad3c <iprintf>
    pcb->errf = err;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	683a      	ldr	r2, [r7, #0]
 8010892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010896:	bf00      	nop
 8010898:	3708      	adds	r7, #8
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	0801d3b8 	.word	0x0801d3b8
 80108a4:	0801d9a4 	.word	0x0801d9a4
 80108a8:	0801d3fc 	.word	0x0801d3fc

080108ac <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b085      	sub	sp, #20
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d008      	beq.n	80108ce <tcp_accept+0x22>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	7d1b      	ldrb	r3, [r3, #20]
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	d104      	bne.n	80108ce <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	683a      	ldr	r2, [r7, #0]
 80108cc:	619a      	str	r2, [r3, #24]
  }
}
 80108ce:	bf00      	nop
 80108d0:	3714      	adds	r7, #20
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr
	...

080108dc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	4613      	mov	r3, r2
 80108e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d107      	bne.n	8010900 <tcp_poll+0x24>
 80108f0:	4b0e      	ldr	r3, [pc, #56]	; (801092c <tcp_poll+0x50>)
 80108f2:	f640 023d 	movw	r2, #2109	; 0x83d
 80108f6:	490e      	ldr	r1, [pc, #56]	; (8010930 <tcp_poll+0x54>)
 80108f8:	480e      	ldr	r0, [pc, #56]	; (8010934 <tcp_poll+0x58>)
 80108fa:	f00a fa1f 	bl	801ad3c <iprintf>
 80108fe:	e011      	b.n	8010924 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	7d1b      	ldrb	r3, [r3, #20]
 8010904:	2b01      	cmp	r3, #1
 8010906:	d106      	bne.n	8010916 <tcp_poll+0x3a>
 8010908:	4b08      	ldr	r3, [pc, #32]	; (801092c <tcp_poll+0x50>)
 801090a:	f640 023e 	movw	r2, #2110	; 0x83e
 801090e:	490a      	ldr	r1, [pc, #40]	; (8010938 <tcp_poll+0x5c>)
 8010910:	4808      	ldr	r0, [pc, #32]	; (8010934 <tcp_poll+0x58>)
 8010912:	f00a fa13 	bl	801ad3c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	68ba      	ldr	r2, [r7, #8]
 801091a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	79fa      	ldrb	r2, [r7, #7]
 8010922:	775a      	strb	r2, [r3, #29]
}
 8010924:	3710      	adds	r7, #16
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	0801d3b8 	.word	0x0801d3b8
 8010930:	0801d9cc 	.word	0x0801d9cc
 8010934:	0801d3fc 	.word	0x0801d3fc
 8010938:	0801d9e4 	.word	0x0801d9e4

0801093c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d107      	bne.n	801095a <tcp_pcb_purge+0x1e>
 801094a:	4b21      	ldr	r3, [pc, #132]	; (80109d0 <tcp_pcb_purge+0x94>)
 801094c:	f640 0251 	movw	r2, #2129	; 0x851
 8010950:	4920      	ldr	r1, [pc, #128]	; (80109d4 <tcp_pcb_purge+0x98>)
 8010952:	4821      	ldr	r0, [pc, #132]	; (80109d8 <tcp_pcb_purge+0x9c>)
 8010954:	f00a f9f2 	bl	801ad3c <iprintf>
 8010958:	e037      	b.n	80109ca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	7d1b      	ldrb	r3, [r3, #20]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d033      	beq.n	80109ca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010966:	2b0a      	cmp	r3, #10
 8010968:	d02f      	beq.n	80109ca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801096e:	2b01      	cmp	r3, #1
 8010970:	d02b      	beq.n	80109ca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010976:	2b00      	cmp	r3, #0
 8010978:	d007      	beq.n	801098a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801097e:	4618      	mov	r0, r3
 8010980:	f7fe f874 	bl	800ea6c <pbuf_free>
      pcb->refused_data = NULL;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2200      	movs	r2, #0
 8010988:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801098e:	2b00      	cmp	r3, #0
 8010990:	d002      	beq.n	8010998 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 f986 	bl	8010ca4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801099e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7ff fcf9 	bl	801039c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7ff fcf4 	bl	801039c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2200      	movs	r2, #0
 80109b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2200      	movs	r2, #0
 80109c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	bd80      	pop	{r7, pc}
 80109d0:	0801d3b8 	.word	0x0801d3b8
 80109d4:	0801da04 	.word	0x0801da04
 80109d8:	0801d3fc 	.word	0x0801d3fc

080109dc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b084      	sub	sp, #16
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d106      	bne.n	80109fa <tcp_pcb_remove+0x1e>
 80109ec:	4b3e      	ldr	r3, [pc, #248]	; (8010ae8 <tcp_pcb_remove+0x10c>)
 80109ee:	f640 0283 	movw	r2, #2179	; 0x883
 80109f2:	493e      	ldr	r1, [pc, #248]	; (8010aec <tcp_pcb_remove+0x110>)
 80109f4:	483e      	ldr	r0, [pc, #248]	; (8010af0 <tcp_pcb_remove+0x114>)
 80109f6:	f00a f9a1 	bl	801ad3c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d106      	bne.n	8010a0e <tcp_pcb_remove+0x32>
 8010a00:	4b39      	ldr	r3, [pc, #228]	; (8010ae8 <tcp_pcb_remove+0x10c>)
 8010a02:	f640 0284 	movw	r2, #2180	; 0x884
 8010a06:	493b      	ldr	r1, [pc, #236]	; (8010af4 <tcp_pcb_remove+0x118>)
 8010a08:	4839      	ldr	r0, [pc, #228]	; (8010af0 <tcp_pcb_remove+0x114>)
 8010a0a:	f00a f997 	bl	801ad3c <iprintf>

  TCP_RMV(pcblist, pcb);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	683a      	ldr	r2, [r7, #0]
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d105      	bne.n	8010a24 <tcp_pcb_remove+0x48>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	68da      	ldr	r2, [r3, #12]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	601a      	str	r2, [r3, #0]
 8010a22:	e013      	b.n	8010a4c <tcp_pcb_remove+0x70>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	60fb      	str	r3, [r7, #12]
 8010a2a:	e00c      	b.n	8010a46 <tcp_pcb_remove+0x6a>
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	683a      	ldr	r2, [r7, #0]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d104      	bne.n	8010a40 <tcp_pcb_remove+0x64>
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	68da      	ldr	r2, [r3, #12]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	60da      	str	r2, [r3, #12]
 8010a3e:	e005      	b.n	8010a4c <tcp_pcb_remove+0x70>
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	60fb      	str	r3, [r7, #12]
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1ef      	bne.n	8010a2c <tcp_pcb_remove+0x50>
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010a52:	6838      	ldr	r0, [r7, #0]
 8010a54:	f7ff ff72 	bl	801093c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	7d1b      	ldrb	r3, [r3, #20]
 8010a5c:	2b0a      	cmp	r3, #10
 8010a5e:	d013      	beq.n	8010a88 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d00f      	beq.n	8010a88 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	8b5b      	ldrh	r3, [r3, #26]
 8010a6c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d009      	beq.n	8010a88 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	8b5b      	ldrh	r3, [r3, #26]
 8010a78:	f043 0302 	orr.w	r3, r3, #2
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010a82:	6838      	ldr	r0, [r7, #0]
 8010a84:	f003 fbc2 	bl	801420c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	7d1b      	ldrb	r3, [r3, #20]
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d020      	beq.n	8010ad2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d006      	beq.n	8010aa6 <tcp_pcb_remove+0xca>
 8010a98:	4b13      	ldr	r3, [pc, #76]	; (8010ae8 <tcp_pcb_remove+0x10c>)
 8010a9a:	f640 0293 	movw	r2, #2195	; 0x893
 8010a9e:	4916      	ldr	r1, [pc, #88]	; (8010af8 <tcp_pcb_remove+0x11c>)
 8010aa0:	4813      	ldr	r0, [pc, #76]	; (8010af0 <tcp_pcb_remove+0x114>)
 8010aa2:	f00a f94b 	bl	801ad3c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d006      	beq.n	8010abc <tcp_pcb_remove+0xe0>
 8010aae:	4b0e      	ldr	r3, [pc, #56]	; (8010ae8 <tcp_pcb_remove+0x10c>)
 8010ab0:	f640 0294 	movw	r2, #2196	; 0x894
 8010ab4:	4911      	ldr	r1, [pc, #68]	; (8010afc <tcp_pcb_remove+0x120>)
 8010ab6:	480e      	ldr	r0, [pc, #56]	; (8010af0 <tcp_pcb_remove+0x114>)
 8010ab8:	f00a f940 	bl	801ad3c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d006      	beq.n	8010ad2 <tcp_pcb_remove+0xf6>
 8010ac4:	4b08      	ldr	r3, [pc, #32]	; (8010ae8 <tcp_pcb_remove+0x10c>)
 8010ac6:	f640 0296 	movw	r2, #2198	; 0x896
 8010aca:	490d      	ldr	r1, [pc, #52]	; (8010b00 <tcp_pcb_remove+0x124>)
 8010acc:	4808      	ldr	r0, [pc, #32]	; (8010af0 <tcp_pcb_remove+0x114>)
 8010ace:	f00a f935 	bl	801ad3c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	2200      	movs	r2, #0
 8010adc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010ade:	bf00      	nop
 8010ae0:	3710      	adds	r7, #16
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	0801d3b8 	.word	0x0801d3b8
 8010aec:	0801da20 	.word	0x0801da20
 8010af0:	0801d3fc 	.word	0x0801d3fc
 8010af4:	0801da3c 	.word	0x0801da3c
 8010af8:	0801da5c 	.word	0x0801da5c
 8010afc:	0801da74 	.word	0x0801da74
 8010b00:	0801da90 	.word	0x0801da90

08010b04 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d106      	bne.n	8010b20 <tcp_next_iss+0x1c>
 8010b12:	4b0a      	ldr	r3, [pc, #40]	; (8010b3c <tcp_next_iss+0x38>)
 8010b14:	f640 02af 	movw	r2, #2223	; 0x8af
 8010b18:	4909      	ldr	r1, [pc, #36]	; (8010b40 <tcp_next_iss+0x3c>)
 8010b1a:	480a      	ldr	r0, [pc, #40]	; (8010b44 <tcp_next_iss+0x40>)
 8010b1c:	f00a f90e 	bl	801ad3c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010b20:	4b09      	ldr	r3, [pc, #36]	; (8010b48 <tcp_next_iss+0x44>)
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	4b09      	ldr	r3, [pc, #36]	; (8010b4c <tcp_next_iss+0x48>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	4413      	add	r3, r2
 8010b2a:	4a07      	ldr	r2, [pc, #28]	; (8010b48 <tcp_next_iss+0x44>)
 8010b2c:	6013      	str	r3, [r2, #0]
  return iss;
 8010b2e:	4b06      	ldr	r3, [pc, #24]	; (8010b48 <tcp_next_iss+0x44>)
 8010b30:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3708      	adds	r7, #8
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}
 8010b3a:	bf00      	nop
 8010b3c:	0801d3b8 	.word	0x0801d3b8
 8010b40:	0801daa8 	.word	0x0801daa8
 8010b44:	0801d3fc 	.word	0x0801d3fc
 8010b48:	20000014 	.word	0x20000014
 8010b4c:	20018564 	.word	0x20018564

08010b50 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b086      	sub	sp, #24
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	4603      	mov	r3, r0
 8010b58:	60b9      	str	r1, [r7, #8]
 8010b5a:	607a      	str	r2, [r7, #4]
 8010b5c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d106      	bne.n	8010b72 <tcp_eff_send_mss_netif+0x22>
 8010b64:	4b14      	ldr	r3, [pc, #80]	; (8010bb8 <tcp_eff_send_mss_netif+0x68>)
 8010b66:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010b6a:	4914      	ldr	r1, [pc, #80]	; (8010bbc <tcp_eff_send_mss_netif+0x6c>)
 8010b6c:	4814      	ldr	r0, [pc, #80]	; (8010bc0 <tcp_eff_send_mss_netif+0x70>)
 8010b6e:	f00a f8e5 	bl	801ad3c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010b72:	68bb      	ldr	r3, [r7, #8]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d101      	bne.n	8010b7c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010b78:	89fb      	ldrh	r3, [r7, #14]
 8010b7a:	e019      	b.n	8010bb0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010b80:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010b82:	8afb      	ldrh	r3, [r7, #22]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d012      	beq.n	8010bae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010b88:	2328      	movs	r3, #40	; 0x28
 8010b8a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010b8c:	8afa      	ldrh	r2, [r7, #22]
 8010b8e:	8abb      	ldrh	r3, [r7, #20]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d904      	bls.n	8010b9e <tcp_eff_send_mss_netif+0x4e>
 8010b94:	8afa      	ldrh	r2, [r7, #22]
 8010b96:	8abb      	ldrh	r3, [r7, #20]
 8010b98:	1ad3      	subs	r3, r2, r3
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	e000      	b.n	8010ba0 <tcp_eff_send_mss_netif+0x50>
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010ba2:	8a7a      	ldrh	r2, [r7, #18]
 8010ba4:	89fb      	ldrh	r3, [r7, #14]
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	bf28      	it	cs
 8010baa:	4613      	movcs	r3, r2
 8010bac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010bae:	89fb      	ldrh	r3, [r7, #14]
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3718      	adds	r7, #24
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	0801d3b8 	.word	0x0801d3b8
 8010bbc:	0801dac4 	.word	0x0801dac4
 8010bc0:	0801d3fc 	.word	0x0801d3fc

08010bc4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d119      	bne.n	8010c0c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010bd8:	4b10      	ldr	r3, [pc, #64]	; (8010c1c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010bda:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010bde:	4910      	ldr	r1, [pc, #64]	; (8010c20 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010be0:	4810      	ldr	r0, [pc, #64]	; (8010c24 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010be2:	f00a f8ab 	bl	801ad3c <iprintf>

  while (pcb != NULL) {
 8010be6:	e011      	b.n	8010c0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d108      	bne.n	8010c06 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010bfa:	68f8      	ldr	r0, [r7, #12]
 8010bfc:	f7fe fd36 	bl	800f66c <tcp_abort>
      pcb = next;
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	60fb      	str	r3, [r7, #12]
 8010c04:	e002      	b.n	8010c0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d1ea      	bne.n	8010be8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010c12:	bf00      	nop
 8010c14:	bf00      	nop
 8010c16:	3710      	adds	r7, #16
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	0801d3b8 	.word	0x0801d3b8
 8010c20:	0801daec 	.word	0x0801daec
 8010c24:	0801d3fc 	.word	0x0801d3fc

08010c28 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d02a      	beq.n	8010c8e <tcp_netif_ip_addr_changed+0x66>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d026      	beq.n	8010c8e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010c40:	4b15      	ldr	r3, [pc, #84]	; (8010c98 <tcp_netif_ip_addr_changed+0x70>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	4619      	mov	r1, r3
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7ff ffbc 	bl	8010bc4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010c4c:	4b13      	ldr	r3, [pc, #76]	; (8010c9c <tcp_netif_ip_addr_changed+0x74>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	4619      	mov	r1, r3
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7ff ffb6 	bl	8010bc4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d017      	beq.n	8010c8e <tcp_netif_ip_addr_changed+0x66>
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d013      	beq.n	8010c8e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c66:	4b0e      	ldr	r3, [pc, #56]	; (8010ca0 <tcp_netif_ip_addr_changed+0x78>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	60fb      	str	r3, [r7, #12]
 8010c6c:	e00c      	b.n	8010c88 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d103      	bne.n	8010c82 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	60fb      	str	r3, [r7, #12]
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d1ef      	bne.n	8010c6e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010c8e:	bf00      	nop
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	20018560 	.word	0x20018560
 8010c9c:	2001856c 	.word	0x2001856c
 8010ca0:	20018568 	.word	0x20018568

08010ca4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d007      	beq.n	8010cc4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7ff fb6f 	bl	801039c <tcp_segs_free>
    pcb->ooseq = NULL;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010cc4:	bf00      	nop
 8010cc6:	3708      	adds	r7, #8
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010ccc:	b590      	push	{r4, r7, lr}
 8010cce:	b08d      	sub	sp, #52	; 0x34
 8010cd0:	af04      	add	r7, sp, #16
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d105      	bne.n	8010ce8 <tcp_input+0x1c>
 8010cdc:	4b9b      	ldr	r3, [pc, #620]	; (8010f4c <tcp_input+0x280>)
 8010cde:	2283      	movs	r2, #131	; 0x83
 8010ce0:	499b      	ldr	r1, [pc, #620]	; (8010f50 <tcp_input+0x284>)
 8010ce2:	489c      	ldr	r0, [pc, #624]	; (8010f54 <tcp_input+0x288>)
 8010ce4:	f00a f82a 	bl	801ad3c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	4a9a      	ldr	r2, [pc, #616]	; (8010f58 <tcp_input+0x28c>)
 8010cee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	895b      	ldrh	r3, [r3, #10]
 8010cf4:	2b13      	cmp	r3, #19
 8010cf6:	f240 83c4 	bls.w	8011482 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010cfa:	4b98      	ldr	r3, [pc, #608]	; (8010f5c <tcp_input+0x290>)
 8010cfc:	695b      	ldr	r3, [r3, #20]
 8010cfe:	4a97      	ldr	r2, [pc, #604]	; (8010f5c <tcp_input+0x290>)
 8010d00:	6812      	ldr	r2, [r2, #0]
 8010d02:	4611      	mov	r1, r2
 8010d04:	4618      	mov	r0, r3
 8010d06:	f006 fbe5 	bl	80174d4 <ip4_addr_isbroadcast_u32>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	f040 83ba 	bne.w	8011486 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010d12:	4b92      	ldr	r3, [pc, #584]	; (8010f5c <tcp_input+0x290>)
 8010d14:	695b      	ldr	r3, [r3, #20]
 8010d16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010d1a:	2be0      	cmp	r3, #224	; 0xe0
 8010d1c:	f000 83b3 	beq.w	8011486 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010d20:	4b8d      	ldr	r3, [pc, #564]	; (8010f58 <tcp_input+0x28c>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	899b      	ldrh	r3, [r3, #12]
 8010d26:	b29b      	uxth	r3, r3
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7fc fa89 	bl	800d240 <lwip_htons>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	0b1b      	lsrs	r3, r3, #12
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	009b      	lsls	r3, r3, #2
 8010d38:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010d3a:	7cbb      	ldrb	r3, [r7, #18]
 8010d3c:	2b13      	cmp	r3, #19
 8010d3e:	f240 83a4 	bls.w	801148a <tcp_input+0x7be>
 8010d42:	7cbb      	ldrb	r3, [r7, #18]
 8010d44:	b29a      	uxth	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	891b      	ldrh	r3, [r3, #8]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	f200 839d 	bhi.w	801148a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010d50:	7cbb      	ldrb	r3, [r7, #18]
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	3b14      	subs	r3, #20
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	4b81      	ldr	r3, [pc, #516]	; (8010f60 <tcp_input+0x294>)
 8010d5a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010d5c:	4b81      	ldr	r3, [pc, #516]	; (8010f64 <tcp_input+0x298>)
 8010d5e:	2200      	movs	r2, #0
 8010d60:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	895a      	ldrh	r2, [r3, #10]
 8010d66:	7cbb      	ldrb	r3, [r7, #18]
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d309      	bcc.n	8010d82 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010d6e:	4b7c      	ldr	r3, [pc, #496]	; (8010f60 <tcp_input+0x294>)
 8010d70:	881a      	ldrh	r2, [r3, #0]
 8010d72:	4b7d      	ldr	r3, [pc, #500]	; (8010f68 <tcp_input+0x29c>)
 8010d74:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010d76:	7cbb      	ldrb	r3, [r7, #18]
 8010d78:	4619      	mov	r1, r3
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f7fd fdbe 	bl	800e8fc <pbuf_remove_header>
 8010d80:	e04e      	b.n	8010e20 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d105      	bne.n	8010d96 <tcp_input+0xca>
 8010d8a:	4b70      	ldr	r3, [pc, #448]	; (8010f4c <tcp_input+0x280>)
 8010d8c:	22c2      	movs	r2, #194	; 0xc2
 8010d8e:	4977      	ldr	r1, [pc, #476]	; (8010f6c <tcp_input+0x2a0>)
 8010d90:	4870      	ldr	r0, [pc, #448]	; (8010f54 <tcp_input+0x288>)
 8010d92:	f009 ffd3 	bl	801ad3c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010d96:	2114      	movs	r1, #20
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f7fd fdaf 	bl	800e8fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	895a      	ldrh	r2, [r3, #10]
 8010da2:	4b71      	ldr	r3, [pc, #452]	; (8010f68 <tcp_input+0x29c>)
 8010da4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010da6:	4b6e      	ldr	r3, [pc, #440]	; (8010f60 <tcp_input+0x294>)
 8010da8:	881a      	ldrh	r2, [r3, #0]
 8010daa:	4b6f      	ldr	r3, [pc, #444]	; (8010f68 <tcp_input+0x29c>)
 8010dac:	881b      	ldrh	r3, [r3, #0]
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010db2:	4b6d      	ldr	r3, [pc, #436]	; (8010f68 <tcp_input+0x29c>)
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	4619      	mov	r1, r3
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7fd fd9f 	bl	800e8fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	895b      	ldrh	r3, [r3, #10]
 8010dc4:	8a3a      	ldrh	r2, [r7, #16]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	f200 8361 	bhi.w	801148e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	4a64      	ldr	r2, [pc, #400]	; (8010f64 <tcp_input+0x298>)
 8010dd4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	8a3a      	ldrh	r2, [r7, #16]
 8010ddc:	4611      	mov	r1, r2
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7fd fd8c 	bl	800e8fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	891a      	ldrh	r2, [r3, #8]
 8010de8:	8a3b      	ldrh	r3, [r7, #16]
 8010dea:	1ad3      	subs	r3, r2, r3
 8010dec:	b29a      	uxth	r2, r3
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	895b      	ldrh	r3, [r3, #10]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d005      	beq.n	8010e06 <tcp_input+0x13a>
 8010dfa:	4b54      	ldr	r3, [pc, #336]	; (8010f4c <tcp_input+0x280>)
 8010dfc:	22df      	movs	r2, #223	; 0xdf
 8010dfe:	495c      	ldr	r1, [pc, #368]	; (8010f70 <tcp_input+0x2a4>)
 8010e00:	4854      	ldr	r0, [pc, #336]	; (8010f54 <tcp_input+0x288>)
 8010e02:	f009 ff9b 	bl	801ad3c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	891a      	ldrh	r2, [r3, #8]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	891b      	ldrh	r3, [r3, #8]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d005      	beq.n	8010e20 <tcp_input+0x154>
 8010e14:	4b4d      	ldr	r3, [pc, #308]	; (8010f4c <tcp_input+0x280>)
 8010e16:	22e0      	movs	r2, #224	; 0xe0
 8010e18:	4956      	ldr	r1, [pc, #344]	; (8010f74 <tcp_input+0x2a8>)
 8010e1a:	484e      	ldr	r0, [pc, #312]	; (8010f54 <tcp_input+0x288>)
 8010e1c:	f009 ff8e 	bl	801ad3c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010e20:	4b4d      	ldr	r3, [pc, #308]	; (8010f58 <tcp_input+0x28c>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	881b      	ldrh	r3, [r3, #0]
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	4a4b      	ldr	r2, [pc, #300]	; (8010f58 <tcp_input+0x28c>)
 8010e2a:	6814      	ldr	r4, [r2, #0]
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7fc fa07 	bl	800d240 <lwip_htons>
 8010e32:	4603      	mov	r3, r0
 8010e34:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010e36:	4b48      	ldr	r3, [pc, #288]	; (8010f58 <tcp_input+0x28c>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	885b      	ldrh	r3, [r3, #2]
 8010e3c:	b29b      	uxth	r3, r3
 8010e3e:	4a46      	ldr	r2, [pc, #280]	; (8010f58 <tcp_input+0x28c>)
 8010e40:	6814      	ldr	r4, [r2, #0]
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fc f9fc 	bl	800d240 <lwip_htons>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010e4c:	4b42      	ldr	r3, [pc, #264]	; (8010f58 <tcp_input+0x28c>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	4a41      	ldr	r2, [pc, #260]	; (8010f58 <tcp_input+0x28c>)
 8010e54:	6814      	ldr	r4, [r2, #0]
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fc fa07 	bl	800d26a <lwip_htonl>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	6063      	str	r3, [r4, #4]
 8010e60:	6863      	ldr	r3, [r4, #4]
 8010e62:	4a45      	ldr	r2, [pc, #276]	; (8010f78 <tcp_input+0x2ac>)
 8010e64:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010e66:	4b3c      	ldr	r3, [pc, #240]	; (8010f58 <tcp_input+0x28c>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	689b      	ldr	r3, [r3, #8]
 8010e6c:	4a3a      	ldr	r2, [pc, #232]	; (8010f58 <tcp_input+0x28c>)
 8010e6e:	6814      	ldr	r4, [r2, #0]
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fc f9fa 	bl	800d26a <lwip_htonl>
 8010e76:	4603      	mov	r3, r0
 8010e78:	60a3      	str	r3, [r4, #8]
 8010e7a:	68a3      	ldr	r3, [r4, #8]
 8010e7c:	4a3f      	ldr	r2, [pc, #252]	; (8010f7c <tcp_input+0x2b0>)
 8010e7e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010e80:	4b35      	ldr	r3, [pc, #212]	; (8010f58 <tcp_input+0x28c>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	89db      	ldrh	r3, [r3, #14]
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	4a33      	ldr	r2, [pc, #204]	; (8010f58 <tcp_input+0x28c>)
 8010e8a:	6814      	ldr	r4, [r2, #0]
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	f7fc f9d7 	bl	800d240 <lwip_htons>
 8010e92:	4603      	mov	r3, r0
 8010e94:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010e96:	4b30      	ldr	r3, [pc, #192]	; (8010f58 <tcp_input+0x28c>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	899b      	ldrh	r3, [r3, #12]
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fc f9ce 	bl	800d240 <lwip_htons>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010eac:	b2da      	uxtb	r2, r3
 8010eae:	4b34      	ldr	r3, [pc, #208]	; (8010f80 <tcp_input+0x2b4>)
 8010eb0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	891a      	ldrh	r2, [r3, #8]
 8010eb6:	4b33      	ldr	r3, [pc, #204]	; (8010f84 <tcp_input+0x2b8>)
 8010eb8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010eba:	4b31      	ldr	r3, [pc, #196]	; (8010f80 <tcp_input+0x2b4>)
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	f003 0303 	and.w	r3, r3, #3
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d00c      	beq.n	8010ee0 <tcp_input+0x214>
    tcplen++;
 8010ec6:	4b2f      	ldr	r3, [pc, #188]	; (8010f84 <tcp_input+0x2b8>)
 8010ec8:	881b      	ldrh	r3, [r3, #0]
 8010eca:	3301      	adds	r3, #1
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	4b2d      	ldr	r3, [pc, #180]	; (8010f84 <tcp_input+0x2b8>)
 8010ed0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	891a      	ldrh	r2, [r3, #8]
 8010ed6:	4b2b      	ldr	r3, [pc, #172]	; (8010f84 <tcp_input+0x2b8>)
 8010ed8:	881b      	ldrh	r3, [r3, #0]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	f200 82d9 	bhi.w	8011492 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ee4:	4b28      	ldr	r3, [pc, #160]	; (8010f88 <tcp_input+0x2bc>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	61fb      	str	r3, [r7, #28]
 8010eea:	e09d      	b.n	8011028 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	7d1b      	ldrb	r3, [r3, #20]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d105      	bne.n	8010f00 <tcp_input+0x234>
 8010ef4:	4b15      	ldr	r3, [pc, #84]	; (8010f4c <tcp_input+0x280>)
 8010ef6:	22fb      	movs	r2, #251	; 0xfb
 8010ef8:	4924      	ldr	r1, [pc, #144]	; (8010f8c <tcp_input+0x2c0>)
 8010efa:	4816      	ldr	r0, [pc, #88]	; (8010f54 <tcp_input+0x288>)
 8010efc:	f009 ff1e 	bl	801ad3c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010f00:	69fb      	ldr	r3, [r7, #28]
 8010f02:	7d1b      	ldrb	r3, [r3, #20]
 8010f04:	2b0a      	cmp	r3, #10
 8010f06:	d105      	bne.n	8010f14 <tcp_input+0x248>
 8010f08:	4b10      	ldr	r3, [pc, #64]	; (8010f4c <tcp_input+0x280>)
 8010f0a:	22fc      	movs	r2, #252	; 0xfc
 8010f0c:	4920      	ldr	r1, [pc, #128]	; (8010f90 <tcp_input+0x2c4>)
 8010f0e:	4811      	ldr	r0, [pc, #68]	; (8010f54 <tcp_input+0x288>)
 8010f10:	f009 ff14 	bl	801ad3c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	7d1b      	ldrb	r3, [r3, #20]
 8010f18:	2b01      	cmp	r3, #1
 8010f1a:	d105      	bne.n	8010f28 <tcp_input+0x25c>
 8010f1c:	4b0b      	ldr	r3, [pc, #44]	; (8010f4c <tcp_input+0x280>)
 8010f1e:	22fd      	movs	r2, #253	; 0xfd
 8010f20:	491c      	ldr	r1, [pc, #112]	; (8010f94 <tcp_input+0x2c8>)
 8010f22:	480c      	ldr	r0, [pc, #48]	; (8010f54 <tcp_input+0x288>)
 8010f24:	f009 ff0a 	bl	801ad3c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	7a1b      	ldrb	r3, [r3, #8]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d033      	beq.n	8010f98 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	7a1a      	ldrb	r2, [r3, #8]
 8010f34:	4b09      	ldr	r3, [pc, #36]	; (8010f5c <tcp_input+0x290>)
 8010f36:	685b      	ldr	r3, [r3, #4]
 8010f38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f40:	429a      	cmp	r2, r3
 8010f42:	d029      	beq.n	8010f98 <tcp_input+0x2cc>
      prev = pcb;
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	61bb      	str	r3, [r7, #24]
      continue;
 8010f48:	e06b      	b.n	8011022 <tcp_input+0x356>
 8010f4a:	bf00      	nop
 8010f4c:	0801db20 	.word	0x0801db20
 8010f50:	0801db54 	.word	0x0801db54
 8010f54:	0801db6c 	.word	0x0801db6c
 8010f58:	200115ec 	.word	0x200115ec
 8010f5c:	20014e4c 	.word	0x20014e4c
 8010f60:	200115f0 	.word	0x200115f0
 8010f64:	200115f4 	.word	0x200115f4
 8010f68:	200115f2 	.word	0x200115f2
 8010f6c:	0801db94 	.word	0x0801db94
 8010f70:	0801dba4 	.word	0x0801dba4
 8010f74:	0801dbb0 	.word	0x0801dbb0
 8010f78:	200115fc 	.word	0x200115fc
 8010f7c:	20011600 	.word	0x20011600
 8010f80:	20011608 	.word	0x20011608
 8010f84:	20011606 	.word	0x20011606
 8010f88:	20018560 	.word	0x20018560
 8010f8c:	0801dbd0 	.word	0x0801dbd0
 8010f90:	0801dbf8 	.word	0x0801dbf8
 8010f94:	0801dc24 	.word	0x0801dc24
    }

    if (pcb->remote_port == tcphdr->src &&
 8010f98:	69fb      	ldr	r3, [r7, #28]
 8010f9a:	8b1a      	ldrh	r2, [r3, #24]
 8010f9c:	4b94      	ldr	r3, [pc, #592]	; (80111f0 <tcp_input+0x524>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	881b      	ldrh	r3, [r3, #0]
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d13a      	bne.n	801101e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	8ada      	ldrh	r2, [r3, #22]
 8010fac:	4b90      	ldr	r3, [pc, #576]	; (80111f0 <tcp_input+0x524>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	885b      	ldrh	r3, [r3, #2]
 8010fb2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d132      	bne.n	801101e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	685a      	ldr	r2, [r3, #4]
 8010fbc:	4b8d      	ldr	r3, [pc, #564]	; (80111f4 <tcp_input+0x528>)
 8010fbe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d12c      	bne.n	801101e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	681a      	ldr	r2, [r3, #0]
 8010fc8:	4b8a      	ldr	r3, [pc, #552]	; (80111f4 <tcp_input+0x528>)
 8010fca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d126      	bne.n	801101e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	68db      	ldr	r3, [r3, #12]
 8010fd4:	69fa      	ldr	r2, [r7, #28]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d106      	bne.n	8010fe8 <tcp_input+0x31c>
 8010fda:	4b87      	ldr	r3, [pc, #540]	; (80111f8 <tcp_input+0x52c>)
 8010fdc:	f240 120d 	movw	r2, #269	; 0x10d
 8010fe0:	4986      	ldr	r1, [pc, #536]	; (80111fc <tcp_input+0x530>)
 8010fe2:	4887      	ldr	r0, [pc, #540]	; (8011200 <tcp_input+0x534>)
 8010fe4:	f009 feaa 	bl	801ad3c <iprintf>
      if (prev != NULL) {
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d00a      	beq.n	8011004 <tcp_input+0x338>
        prev->next = pcb->next;
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	68da      	ldr	r2, [r3, #12]
 8010ff2:	69bb      	ldr	r3, [r7, #24]
 8010ff4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010ff6:	4b83      	ldr	r3, [pc, #524]	; (8011204 <tcp_input+0x538>)
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010ffe:	4a81      	ldr	r2, [pc, #516]	; (8011204 <tcp_input+0x538>)
 8011000:	69fb      	ldr	r3, [r7, #28]
 8011002:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011004:	69fb      	ldr	r3, [r7, #28]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	69fa      	ldr	r2, [r7, #28]
 801100a:	429a      	cmp	r2, r3
 801100c:	d111      	bne.n	8011032 <tcp_input+0x366>
 801100e:	4b7a      	ldr	r3, [pc, #488]	; (80111f8 <tcp_input+0x52c>)
 8011010:	f240 1215 	movw	r2, #277	; 0x115
 8011014:	497c      	ldr	r1, [pc, #496]	; (8011208 <tcp_input+0x53c>)
 8011016:	487a      	ldr	r0, [pc, #488]	; (8011200 <tcp_input+0x534>)
 8011018:	f009 fe90 	bl	801ad3c <iprintf>
      break;
 801101c:	e009      	b.n	8011032 <tcp_input+0x366>
    }
    prev = pcb;
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	61fb      	str	r3, [r7, #28]
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	2b00      	cmp	r3, #0
 801102c:	f47f af5e 	bne.w	8010eec <tcp_input+0x220>
 8011030:	e000      	b.n	8011034 <tcp_input+0x368>
      break;
 8011032:	bf00      	nop
  }

  if (pcb == NULL) {
 8011034:	69fb      	ldr	r3, [r7, #28]
 8011036:	2b00      	cmp	r3, #0
 8011038:	f040 8095 	bne.w	8011166 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801103c:	4b73      	ldr	r3, [pc, #460]	; (801120c <tcp_input+0x540>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	61fb      	str	r3, [r7, #28]
 8011042:	e03f      	b.n	80110c4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	7d1b      	ldrb	r3, [r3, #20]
 8011048:	2b0a      	cmp	r3, #10
 801104a:	d006      	beq.n	801105a <tcp_input+0x38e>
 801104c:	4b6a      	ldr	r3, [pc, #424]	; (80111f8 <tcp_input+0x52c>)
 801104e:	f240 121f 	movw	r2, #287	; 0x11f
 8011052:	496f      	ldr	r1, [pc, #444]	; (8011210 <tcp_input+0x544>)
 8011054:	486a      	ldr	r0, [pc, #424]	; (8011200 <tcp_input+0x534>)
 8011056:	f009 fe71 	bl	801ad3c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801105a:	69fb      	ldr	r3, [r7, #28]
 801105c:	7a1b      	ldrb	r3, [r3, #8]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d009      	beq.n	8011076 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	7a1a      	ldrb	r2, [r3, #8]
 8011066:	4b63      	ldr	r3, [pc, #396]	; (80111f4 <tcp_input+0x528>)
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801106e:	3301      	adds	r3, #1
 8011070:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011072:	429a      	cmp	r2, r3
 8011074:	d122      	bne.n	80110bc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011076:	69fb      	ldr	r3, [r7, #28]
 8011078:	8b1a      	ldrh	r2, [r3, #24]
 801107a:	4b5d      	ldr	r3, [pc, #372]	; (80111f0 <tcp_input+0x524>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	881b      	ldrh	r3, [r3, #0]
 8011080:	b29b      	uxth	r3, r3
 8011082:	429a      	cmp	r2, r3
 8011084:	d11b      	bne.n	80110be <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	8ada      	ldrh	r2, [r3, #22]
 801108a:	4b59      	ldr	r3, [pc, #356]	; (80111f0 <tcp_input+0x524>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	885b      	ldrh	r3, [r3, #2]
 8011090:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011092:	429a      	cmp	r2, r3
 8011094:	d113      	bne.n	80110be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	685a      	ldr	r2, [r3, #4]
 801109a:	4b56      	ldr	r3, [pc, #344]	; (80111f4 <tcp_input+0x528>)
 801109c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801109e:	429a      	cmp	r2, r3
 80110a0:	d10d      	bne.n	80110be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	681a      	ldr	r2, [r3, #0]
 80110a6:	4b53      	ldr	r3, [pc, #332]	; (80111f4 <tcp_input+0x528>)
 80110a8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d107      	bne.n	80110be <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80110ae:	69f8      	ldr	r0, [r7, #28]
 80110b0:	f000 fb54 	bl	801175c <tcp_timewait_input>
        }
        pbuf_free(p);
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f7fd fcd9 	bl	800ea6c <pbuf_free>
        return;
 80110ba:	e1f0      	b.n	801149e <tcp_input+0x7d2>
        continue;
 80110bc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80110be:	69fb      	ldr	r3, [r7, #28]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	61fb      	str	r3, [r7, #28]
 80110c4:	69fb      	ldr	r3, [r7, #28]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1bc      	bne.n	8011044 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80110ca:	2300      	movs	r3, #0
 80110cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80110ce:	4b51      	ldr	r3, [pc, #324]	; (8011214 <tcp_input+0x548>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	617b      	str	r3, [r7, #20]
 80110d4:	e02a      	b.n	801112c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	7a1b      	ldrb	r3, [r3, #8]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d00c      	beq.n	80110f8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	7a1a      	ldrb	r2, [r3, #8]
 80110e2:	4b44      	ldr	r3, [pc, #272]	; (80111f4 <tcp_input+0x528>)
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110ea:	3301      	adds	r3, #1
 80110ec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80110ee:	429a      	cmp	r2, r3
 80110f0:	d002      	beq.n	80110f8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	61bb      	str	r3, [r7, #24]
        continue;
 80110f6:	e016      	b.n	8011126 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	8ada      	ldrh	r2, [r3, #22]
 80110fc:	4b3c      	ldr	r3, [pc, #240]	; (80111f0 <tcp_input+0x524>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	885b      	ldrh	r3, [r3, #2]
 8011102:	b29b      	uxth	r3, r3
 8011104:	429a      	cmp	r2, r3
 8011106:	d10c      	bne.n	8011122 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	681a      	ldr	r2, [r3, #0]
 801110c:	4b39      	ldr	r3, [pc, #228]	; (80111f4 <tcp_input+0x528>)
 801110e:	695b      	ldr	r3, [r3, #20]
 8011110:	429a      	cmp	r2, r3
 8011112:	d00f      	beq.n	8011134 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d00d      	beq.n	8011136 <tcp_input+0x46a>
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d009      	beq.n	8011136 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	68db      	ldr	r3, [r3, #12]
 801112a:	617b      	str	r3, [r7, #20]
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d1d1      	bne.n	80110d6 <tcp_input+0x40a>
 8011132:	e000      	b.n	8011136 <tcp_input+0x46a>
            break;
 8011134:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d014      	beq.n	8011166 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801113c:	69bb      	ldr	r3, [r7, #24]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d00a      	beq.n	8011158 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	68da      	ldr	r2, [r3, #12]
 8011146:	69bb      	ldr	r3, [r7, #24]
 8011148:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801114a:	4b32      	ldr	r3, [pc, #200]	; (8011214 <tcp_input+0x548>)
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011152:	4a30      	ldr	r2, [pc, #192]	; (8011214 <tcp_input+0x548>)
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011158:	6978      	ldr	r0, [r7, #20]
 801115a:	f000 fa01 	bl	8011560 <tcp_listen_input>
      }
      pbuf_free(p);
 801115e:	6878      	ldr	r0, [r7, #4]
 8011160:	f7fd fc84 	bl	800ea6c <pbuf_free>
      return;
 8011164:	e19b      	b.n	801149e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 8160 	beq.w	801142e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801116e:	4b2a      	ldr	r3, [pc, #168]	; (8011218 <tcp_input+0x54c>)
 8011170:	2200      	movs	r2, #0
 8011172:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	891a      	ldrh	r2, [r3, #8]
 8011178:	4b27      	ldr	r3, [pc, #156]	; (8011218 <tcp_input+0x54c>)
 801117a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801117c:	4a26      	ldr	r2, [pc, #152]	; (8011218 <tcp_input+0x54c>)
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011182:	4b1b      	ldr	r3, [pc, #108]	; (80111f0 <tcp_input+0x524>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	4a24      	ldr	r2, [pc, #144]	; (8011218 <tcp_input+0x54c>)
 8011188:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801118a:	4b24      	ldr	r3, [pc, #144]	; (801121c <tcp_input+0x550>)
 801118c:	2200      	movs	r2, #0
 801118e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011190:	4b23      	ldr	r3, [pc, #140]	; (8011220 <tcp_input+0x554>)
 8011192:	2200      	movs	r2, #0
 8011194:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011196:	4b23      	ldr	r3, [pc, #140]	; (8011224 <tcp_input+0x558>)
 8011198:	2200      	movs	r2, #0
 801119a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801119c:	4b22      	ldr	r3, [pc, #136]	; (8011228 <tcp_input+0x55c>)
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	f003 0308 	and.w	r3, r3, #8
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d006      	beq.n	80111b6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	7b5b      	ldrb	r3, [r3, #13]
 80111ac:	f043 0301 	orr.w	r3, r3, #1
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d038      	beq.n	8011230 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80111be:	69f8      	ldr	r0, [r7, #28]
 80111c0:	f7ff f870 	bl	80102a4 <tcp_process_refused_data>
 80111c4:	4603      	mov	r3, r0
 80111c6:	f113 0f0d 	cmn.w	r3, #13
 80111ca:	d007      	beq.n	80111dc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d02d      	beq.n	8011230 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80111d4:	4b15      	ldr	r3, [pc, #84]	; (801122c <tcp_input+0x560>)
 80111d6:	881b      	ldrh	r3, [r3, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d029      	beq.n	8011230 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f040 8104 	bne.w	80113ee <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80111e6:	69f8      	ldr	r0, [r7, #28]
 80111e8:	f003 fe16 	bl	8014e18 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80111ec:	e0ff      	b.n	80113ee <tcp_input+0x722>
 80111ee:	bf00      	nop
 80111f0:	200115ec 	.word	0x200115ec
 80111f4:	20014e4c 	.word	0x20014e4c
 80111f8:	0801db20 	.word	0x0801db20
 80111fc:	0801dc4c 	.word	0x0801dc4c
 8011200:	0801db6c 	.word	0x0801db6c
 8011204:	20018560 	.word	0x20018560
 8011208:	0801dc78 	.word	0x0801dc78
 801120c:	20018570 	.word	0x20018570
 8011210:	0801dca4 	.word	0x0801dca4
 8011214:	20018568 	.word	0x20018568
 8011218:	200115dc 	.word	0x200115dc
 801121c:	2001160c 	.word	0x2001160c
 8011220:	20011609 	.word	0x20011609
 8011224:	20011604 	.word	0x20011604
 8011228:	20011608 	.word	0x20011608
 801122c:	20011606 	.word	0x20011606
      }
    }
    tcp_input_pcb = pcb;
 8011230:	4a9c      	ldr	r2, [pc, #624]	; (80114a4 <tcp_input+0x7d8>)
 8011232:	69fb      	ldr	r3, [r7, #28]
 8011234:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011236:	69f8      	ldr	r0, [r7, #28]
 8011238:	f000 fb0a 	bl	8011850 <tcp_process>
 801123c:	4603      	mov	r3, r0
 801123e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011240:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011244:	f113 0f0d 	cmn.w	r3, #13
 8011248:	f000 80d3 	beq.w	80113f2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801124c:	4b96      	ldr	r3, [pc, #600]	; (80114a8 <tcp_input+0x7dc>)
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	f003 0308 	and.w	r3, r3, #8
 8011254:	2b00      	cmp	r3, #0
 8011256:	d015      	beq.n	8011284 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011258:	69fb      	ldr	r3, [r7, #28]
 801125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801125e:	2b00      	cmp	r3, #0
 8011260:	d008      	beq.n	8011274 <tcp_input+0x5a8>
 8011262:	69fb      	ldr	r3, [r7, #28]
 8011264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011268:	69fa      	ldr	r2, [r7, #28]
 801126a:	6912      	ldr	r2, [r2, #16]
 801126c:	f06f 010d 	mvn.w	r1, #13
 8011270:	4610      	mov	r0, r2
 8011272:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011274:	69f9      	ldr	r1, [r7, #28]
 8011276:	488d      	ldr	r0, [pc, #564]	; (80114ac <tcp_input+0x7e0>)
 8011278:	f7ff fbb0 	bl	80109dc <tcp_pcb_remove>
        tcp_free(pcb);
 801127c:	69f8      	ldr	r0, [r7, #28]
 801127e:	f7fd feb1 	bl	800efe4 <tcp_free>
 8011282:	e0c1      	b.n	8011408 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8011284:	2300      	movs	r3, #0
 8011286:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011288:	4b89      	ldr	r3, [pc, #548]	; (80114b0 <tcp_input+0x7e4>)
 801128a:	881b      	ldrh	r3, [r3, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d01d      	beq.n	80112cc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011290:	4b87      	ldr	r3, [pc, #540]	; (80114b0 <tcp_input+0x7e4>)
 8011292:	881b      	ldrh	r3, [r3, #0]
 8011294:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011296:	69fb      	ldr	r3, [r7, #28]
 8011298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801129c:	2b00      	cmp	r3, #0
 801129e:	d00a      	beq.n	80112b6 <tcp_input+0x5ea>
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80112a6:	69fa      	ldr	r2, [r7, #28]
 80112a8:	6910      	ldr	r0, [r2, #16]
 80112aa:	89fa      	ldrh	r2, [r7, #14]
 80112ac:	69f9      	ldr	r1, [r7, #28]
 80112ae:	4798      	blx	r3
 80112b0:	4603      	mov	r3, r0
 80112b2:	74fb      	strb	r3, [r7, #19]
 80112b4:	e001      	b.n	80112ba <tcp_input+0x5ee>
 80112b6:	2300      	movs	r3, #0
 80112b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80112ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80112be:	f113 0f0d 	cmn.w	r3, #13
 80112c2:	f000 8098 	beq.w	80113f6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80112c6:	4b7a      	ldr	r3, [pc, #488]	; (80114b0 <tcp_input+0x7e4>)
 80112c8:	2200      	movs	r2, #0
 80112ca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80112cc:	69f8      	ldr	r0, [r7, #28]
 80112ce:	f000 f907 	bl	80114e0 <tcp_input_delayed_close>
 80112d2:	4603      	mov	r3, r0
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	f040 8090 	bne.w	80113fa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80112da:	4b76      	ldr	r3, [pc, #472]	; (80114b4 <tcp_input+0x7e8>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d041      	beq.n	8011366 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d006      	beq.n	80112f8 <tcp_input+0x62c>
 80112ea:	4b73      	ldr	r3, [pc, #460]	; (80114b8 <tcp_input+0x7ec>)
 80112ec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80112f0:	4972      	ldr	r1, [pc, #456]	; (80114bc <tcp_input+0x7f0>)
 80112f2:	4873      	ldr	r0, [pc, #460]	; (80114c0 <tcp_input+0x7f4>)
 80112f4:	f009 fd22 	bl	801ad3c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	8b5b      	ldrh	r3, [r3, #26]
 80112fc:	f003 0310 	and.w	r3, r3, #16
 8011300:	2b00      	cmp	r3, #0
 8011302:	d008      	beq.n	8011316 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011304:	4b6b      	ldr	r3, [pc, #428]	; (80114b4 <tcp_input+0x7e8>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4618      	mov	r0, r3
 801130a:	f7fd fbaf 	bl	800ea6c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801130e:	69f8      	ldr	r0, [r7, #28]
 8011310:	f7fe f9ac 	bl	800f66c <tcp_abort>
            goto aborted;
 8011314:	e078      	b.n	8011408 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011316:	69fb      	ldr	r3, [r7, #28]
 8011318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801131c:	2b00      	cmp	r3, #0
 801131e:	d00c      	beq.n	801133a <tcp_input+0x66e>
 8011320:	69fb      	ldr	r3, [r7, #28]
 8011322:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011326:	69fb      	ldr	r3, [r7, #28]
 8011328:	6918      	ldr	r0, [r3, #16]
 801132a:	4b62      	ldr	r3, [pc, #392]	; (80114b4 <tcp_input+0x7e8>)
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	2300      	movs	r3, #0
 8011330:	69f9      	ldr	r1, [r7, #28]
 8011332:	47a0      	blx	r4
 8011334:	4603      	mov	r3, r0
 8011336:	74fb      	strb	r3, [r7, #19]
 8011338:	e008      	b.n	801134c <tcp_input+0x680>
 801133a:	4b5e      	ldr	r3, [pc, #376]	; (80114b4 <tcp_input+0x7e8>)
 801133c:	681a      	ldr	r2, [r3, #0]
 801133e:	2300      	movs	r3, #0
 8011340:	69f9      	ldr	r1, [r7, #28]
 8011342:	2000      	movs	r0, #0
 8011344:	f7ff f884 	bl	8010450 <tcp_recv_null>
 8011348:	4603      	mov	r3, r0
 801134a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801134c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011350:	f113 0f0d 	cmn.w	r3, #13
 8011354:	d053      	beq.n	80113fe <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011356:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d003      	beq.n	8011366 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801135e:	4b55      	ldr	r3, [pc, #340]	; (80114b4 <tcp_input+0x7e8>)
 8011360:	681a      	ldr	r2, [r3, #0]
 8011362:	69fb      	ldr	r3, [r7, #28]
 8011364:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011366:	4b50      	ldr	r3, [pc, #320]	; (80114a8 <tcp_input+0x7dc>)
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	f003 0320 	and.w	r3, r3, #32
 801136e:	2b00      	cmp	r3, #0
 8011370:	d030      	beq.n	80113d4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8011372:	69fb      	ldr	r3, [r7, #28]
 8011374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011376:	2b00      	cmp	r3, #0
 8011378:	d009      	beq.n	801138e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801137e:	7b5a      	ldrb	r2, [r3, #13]
 8011380:	69fb      	ldr	r3, [r7, #28]
 8011382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011384:	f042 0220 	orr.w	r2, r2, #32
 8011388:	b2d2      	uxtb	r2, r2
 801138a:	735a      	strb	r2, [r3, #13]
 801138c:	e022      	b.n	80113d4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801138e:	69fb      	ldr	r3, [r7, #28]
 8011390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011392:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011396:	d005      	beq.n	80113a4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011398:	69fb      	ldr	r3, [r7, #28]
 801139a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801139c:	3301      	adds	r3, #1
 801139e:	b29a      	uxth	r2, r3
 80113a0:	69fb      	ldr	r3, [r7, #28]
 80113a2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80113a4:	69fb      	ldr	r3, [r7, #28]
 80113a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00b      	beq.n	80113c6 <tcp_input+0x6fa>
 80113ae:	69fb      	ldr	r3, [r7, #28]
 80113b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	6918      	ldr	r0, [r3, #16]
 80113b8:	2300      	movs	r3, #0
 80113ba:	2200      	movs	r2, #0
 80113bc:	69f9      	ldr	r1, [r7, #28]
 80113be:	47a0      	blx	r4
 80113c0:	4603      	mov	r3, r0
 80113c2:	74fb      	strb	r3, [r7, #19]
 80113c4:	e001      	b.n	80113ca <tcp_input+0x6fe>
 80113c6:	2300      	movs	r3, #0
 80113c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80113ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80113ce:	f113 0f0d 	cmn.w	r3, #13
 80113d2:	d016      	beq.n	8011402 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80113d4:	4b33      	ldr	r3, [pc, #204]	; (80114a4 <tcp_input+0x7d8>)
 80113d6:	2200      	movs	r2, #0
 80113d8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80113da:	69f8      	ldr	r0, [r7, #28]
 80113dc:	f000 f880 	bl	80114e0 <tcp_input_delayed_close>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d10f      	bne.n	8011406 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80113e6:	69f8      	ldr	r0, [r7, #28]
 80113e8:	f002 ff10 	bl	801420c <tcp_output>
 80113ec:	e00c      	b.n	8011408 <tcp_input+0x73c>
        goto aborted;
 80113ee:	bf00      	nop
 80113f0:	e00a      	b.n	8011408 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80113f2:	bf00      	nop
 80113f4:	e008      	b.n	8011408 <tcp_input+0x73c>
              goto aborted;
 80113f6:	bf00      	nop
 80113f8:	e006      	b.n	8011408 <tcp_input+0x73c>
          goto aborted;
 80113fa:	bf00      	nop
 80113fc:	e004      	b.n	8011408 <tcp_input+0x73c>
            goto aborted;
 80113fe:	bf00      	nop
 8011400:	e002      	b.n	8011408 <tcp_input+0x73c>
              goto aborted;
 8011402:	bf00      	nop
 8011404:	e000      	b.n	8011408 <tcp_input+0x73c>
          goto aborted;
 8011406:	bf00      	nop
    tcp_input_pcb = NULL;
 8011408:	4b26      	ldr	r3, [pc, #152]	; (80114a4 <tcp_input+0x7d8>)
 801140a:	2200      	movs	r2, #0
 801140c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801140e:	4b29      	ldr	r3, [pc, #164]	; (80114b4 <tcp_input+0x7e8>)
 8011410:	2200      	movs	r2, #0
 8011412:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011414:	4b2b      	ldr	r3, [pc, #172]	; (80114c4 <tcp_input+0x7f8>)
 8011416:	685b      	ldr	r3, [r3, #4]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d03f      	beq.n	801149c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801141c:	4b29      	ldr	r3, [pc, #164]	; (80114c4 <tcp_input+0x7f8>)
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	4618      	mov	r0, r3
 8011422:	f7fd fb23 	bl	800ea6c <pbuf_free>
      inseg.p = NULL;
 8011426:	4b27      	ldr	r3, [pc, #156]	; (80114c4 <tcp_input+0x7f8>)
 8011428:	2200      	movs	r2, #0
 801142a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801142c:	e036      	b.n	801149c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801142e:	4b26      	ldr	r3, [pc, #152]	; (80114c8 <tcp_input+0x7fc>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	899b      	ldrh	r3, [r3, #12]
 8011434:	b29b      	uxth	r3, r3
 8011436:	4618      	mov	r0, r3
 8011438:	f7fb ff02 	bl	800d240 <lwip_htons>
 801143c:	4603      	mov	r3, r0
 801143e:	b2db      	uxtb	r3, r3
 8011440:	f003 0304 	and.w	r3, r3, #4
 8011444:	2b00      	cmp	r3, #0
 8011446:	d118      	bne.n	801147a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011448:	4b20      	ldr	r3, [pc, #128]	; (80114cc <tcp_input+0x800>)
 801144a:	6819      	ldr	r1, [r3, #0]
 801144c:	4b20      	ldr	r3, [pc, #128]	; (80114d0 <tcp_input+0x804>)
 801144e:	881b      	ldrh	r3, [r3, #0]
 8011450:	461a      	mov	r2, r3
 8011452:	4b20      	ldr	r3, [pc, #128]	; (80114d4 <tcp_input+0x808>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011458:	4b1b      	ldr	r3, [pc, #108]	; (80114c8 <tcp_input+0x7fc>)
 801145a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801145c:	885b      	ldrh	r3, [r3, #2]
 801145e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011460:	4a19      	ldr	r2, [pc, #100]	; (80114c8 <tcp_input+0x7fc>)
 8011462:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011464:	8812      	ldrh	r2, [r2, #0]
 8011466:	b292      	uxth	r2, r2
 8011468:	9202      	str	r2, [sp, #8]
 801146a:	9301      	str	r3, [sp, #4]
 801146c:	4b1a      	ldr	r3, [pc, #104]	; (80114d8 <tcp_input+0x80c>)
 801146e:	9300      	str	r3, [sp, #0]
 8011470:	4b1a      	ldr	r3, [pc, #104]	; (80114dc <tcp_input+0x810>)
 8011472:	4602      	mov	r2, r0
 8011474:	2000      	movs	r0, #0
 8011476:	f003 fc7d 	bl	8014d74 <tcp_rst>
    pbuf_free(p);
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f7fd faf6 	bl	800ea6c <pbuf_free>
  return;
 8011480:	e00c      	b.n	801149c <tcp_input+0x7d0>
    goto dropped;
 8011482:	bf00      	nop
 8011484:	e006      	b.n	8011494 <tcp_input+0x7c8>
    goto dropped;
 8011486:	bf00      	nop
 8011488:	e004      	b.n	8011494 <tcp_input+0x7c8>
    goto dropped;
 801148a:	bf00      	nop
 801148c:	e002      	b.n	8011494 <tcp_input+0x7c8>
      goto dropped;
 801148e:	bf00      	nop
 8011490:	e000      	b.n	8011494 <tcp_input+0x7c8>
      goto dropped;
 8011492:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011494:	6878      	ldr	r0, [r7, #4]
 8011496:	f7fd fae9 	bl	800ea6c <pbuf_free>
 801149a:	e000      	b.n	801149e <tcp_input+0x7d2>
  return;
 801149c:	bf00      	nop
}
 801149e:	3724      	adds	r7, #36	; 0x24
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd90      	pop	{r4, r7, pc}
 80114a4:	20018574 	.word	0x20018574
 80114a8:	20011609 	.word	0x20011609
 80114ac:	20018560 	.word	0x20018560
 80114b0:	20011604 	.word	0x20011604
 80114b4:	2001160c 	.word	0x2001160c
 80114b8:	0801db20 	.word	0x0801db20
 80114bc:	0801dcd4 	.word	0x0801dcd4
 80114c0:	0801db6c 	.word	0x0801db6c
 80114c4:	200115dc 	.word	0x200115dc
 80114c8:	200115ec 	.word	0x200115ec
 80114cc:	20011600 	.word	0x20011600
 80114d0:	20011606 	.word	0x20011606
 80114d4:	200115fc 	.word	0x200115fc
 80114d8:	20014e5c 	.word	0x20014e5c
 80114dc:	20014e60 	.word	0x20014e60

080114e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d106      	bne.n	80114fc <tcp_input_delayed_close+0x1c>
 80114ee:	4b17      	ldr	r3, [pc, #92]	; (801154c <tcp_input_delayed_close+0x6c>)
 80114f0:	f240 225a 	movw	r2, #602	; 0x25a
 80114f4:	4916      	ldr	r1, [pc, #88]	; (8011550 <tcp_input_delayed_close+0x70>)
 80114f6:	4817      	ldr	r0, [pc, #92]	; (8011554 <tcp_input_delayed_close+0x74>)
 80114f8:	f009 fc20 	bl	801ad3c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80114fc:	4b16      	ldr	r3, [pc, #88]	; (8011558 <tcp_input_delayed_close+0x78>)
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	f003 0310 	and.w	r3, r3, #16
 8011504:	2b00      	cmp	r3, #0
 8011506:	d01c      	beq.n	8011542 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	8b5b      	ldrh	r3, [r3, #26]
 801150c:	f003 0310 	and.w	r3, r3, #16
 8011510:	2b00      	cmp	r3, #0
 8011512:	d10d      	bne.n	8011530 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801151a:	2b00      	cmp	r3, #0
 801151c:	d008      	beq.n	8011530 <tcp_input_delayed_close+0x50>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	6912      	ldr	r2, [r2, #16]
 8011528:	f06f 010e 	mvn.w	r1, #14
 801152c:	4610      	mov	r0, r2
 801152e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011530:	6879      	ldr	r1, [r7, #4]
 8011532:	480a      	ldr	r0, [pc, #40]	; (801155c <tcp_input_delayed_close+0x7c>)
 8011534:	f7ff fa52 	bl	80109dc <tcp_pcb_remove>
    tcp_free(pcb);
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f7fd fd53 	bl	800efe4 <tcp_free>
    return 1;
 801153e:	2301      	movs	r3, #1
 8011540:	e000      	b.n	8011544 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011542:	2300      	movs	r3, #0
}
 8011544:	4618      	mov	r0, r3
 8011546:	3708      	adds	r7, #8
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}
 801154c:	0801db20 	.word	0x0801db20
 8011550:	0801dcf0 	.word	0x0801dcf0
 8011554:	0801db6c 	.word	0x0801db6c
 8011558:	20011609 	.word	0x20011609
 801155c:	20018560 	.word	0x20018560

08011560 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011560:	b590      	push	{r4, r7, lr}
 8011562:	b08b      	sub	sp, #44	; 0x2c
 8011564:	af04      	add	r7, sp, #16
 8011566:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011568:	4b6f      	ldr	r3, [pc, #444]	; (8011728 <tcp_listen_input+0x1c8>)
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	f003 0304 	and.w	r3, r3, #4
 8011570:	2b00      	cmp	r3, #0
 8011572:	f040 80d2 	bne.w	801171a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d106      	bne.n	801158a <tcp_listen_input+0x2a>
 801157c:	4b6b      	ldr	r3, [pc, #428]	; (801172c <tcp_listen_input+0x1cc>)
 801157e:	f240 2281 	movw	r2, #641	; 0x281
 8011582:	496b      	ldr	r1, [pc, #428]	; (8011730 <tcp_listen_input+0x1d0>)
 8011584:	486b      	ldr	r0, [pc, #428]	; (8011734 <tcp_listen_input+0x1d4>)
 8011586:	f009 fbd9 	bl	801ad3c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801158a:	4b67      	ldr	r3, [pc, #412]	; (8011728 <tcp_listen_input+0x1c8>)
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	f003 0310 	and.w	r3, r3, #16
 8011592:	2b00      	cmp	r3, #0
 8011594:	d019      	beq.n	80115ca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011596:	4b68      	ldr	r3, [pc, #416]	; (8011738 <tcp_listen_input+0x1d8>)
 8011598:	6819      	ldr	r1, [r3, #0]
 801159a:	4b68      	ldr	r3, [pc, #416]	; (801173c <tcp_listen_input+0x1dc>)
 801159c:	881b      	ldrh	r3, [r3, #0]
 801159e:	461a      	mov	r2, r3
 80115a0:	4b67      	ldr	r3, [pc, #412]	; (8011740 <tcp_listen_input+0x1e0>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115a6:	4b67      	ldr	r3, [pc, #412]	; (8011744 <tcp_listen_input+0x1e4>)
 80115a8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115aa:	885b      	ldrh	r3, [r3, #2]
 80115ac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115ae:	4a65      	ldr	r2, [pc, #404]	; (8011744 <tcp_listen_input+0x1e4>)
 80115b0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115b2:	8812      	ldrh	r2, [r2, #0]
 80115b4:	b292      	uxth	r2, r2
 80115b6:	9202      	str	r2, [sp, #8]
 80115b8:	9301      	str	r3, [sp, #4]
 80115ba:	4b63      	ldr	r3, [pc, #396]	; (8011748 <tcp_listen_input+0x1e8>)
 80115bc:	9300      	str	r3, [sp, #0]
 80115be:	4b63      	ldr	r3, [pc, #396]	; (801174c <tcp_listen_input+0x1ec>)
 80115c0:	4602      	mov	r2, r0
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f003 fbd6 	bl	8014d74 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80115c8:	e0a9      	b.n	801171e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80115ca:	4b57      	ldr	r3, [pc, #348]	; (8011728 <tcp_listen_input+0x1c8>)
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	f003 0302 	and.w	r3, r3, #2
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	f000 80a3 	beq.w	801171e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	7d5b      	ldrb	r3, [r3, #21]
 80115dc:	4618      	mov	r0, r3
 80115de:	f7ff f85b 	bl	8010698 <tcp_alloc>
 80115e2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d111      	bne.n	801160e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	699b      	ldr	r3, [r3, #24]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d00a      	beq.n	8011608 <tcp_listen_input+0xa8>
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	699b      	ldr	r3, [r3, #24]
 80115f6:	687a      	ldr	r2, [r7, #4]
 80115f8:	6910      	ldr	r0, [r2, #16]
 80115fa:	f04f 32ff 	mov.w	r2, #4294967295
 80115fe:	2100      	movs	r1, #0
 8011600:	4798      	blx	r3
 8011602:	4603      	mov	r3, r0
 8011604:	73bb      	strb	r3, [r7, #14]
      return;
 8011606:	e08b      	b.n	8011720 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011608:	23f0      	movs	r3, #240	; 0xf0
 801160a:	73bb      	strb	r3, [r7, #14]
      return;
 801160c:	e088      	b.n	8011720 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801160e:	4b50      	ldr	r3, [pc, #320]	; (8011750 <tcp_listen_input+0x1f0>)
 8011610:	695a      	ldr	r2, [r3, #20]
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011616:	4b4e      	ldr	r3, [pc, #312]	; (8011750 <tcp_listen_input+0x1f0>)
 8011618:	691a      	ldr	r2, [r3, #16]
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	8ada      	ldrh	r2, [r3, #22]
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011626:	4b47      	ldr	r3, [pc, #284]	; (8011744 <tcp_listen_input+0x1e4>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	881b      	ldrh	r3, [r3, #0]
 801162c:	b29a      	uxth	r2, r3
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	2203      	movs	r2, #3
 8011636:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011638:	4b41      	ldr	r3, [pc, #260]	; (8011740 <tcp_listen_input+0x1e0>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	1c5a      	adds	r2, r3, #1
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801164a:	6978      	ldr	r0, [r7, #20]
 801164c:	f7ff fa5a 	bl	8010b04 <tcp_next_iss>
 8011650:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	693a      	ldr	r2, [r7, #16]
 8011656:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	693a      	ldr	r2, [r7, #16]
 801165c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	693a      	ldr	r2, [r7, #16]
 8011662:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	693a      	ldr	r2, [r7, #16]
 8011668:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801166a:	4b35      	ldr	r3, [pc, #212]	; (8011740 <tcp_listen_input+0x1e0>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	1e5a      	subs	r2, r3, #1
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	691a      	ldr	r2, [r3, #16]
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	687a      	ldr	r2, [r7, #4]
 8011680:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	7a5b      	ldrb	r3, [r3, #9]
 8011686:	f003 030c 	and.w	r3, r3, #12
 801168a:	b2da      	uxtb	r2, r3
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	7a1a      	ldrb	r2, [r3, #8]
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011698:	4b2e      	ldr	r3, [pc, #184]	; (8011754 <tcp_listen_input+0x1f4>)
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	60da      	str	r2, [r3, #12]
 80116a0:	4a2c      	ldr	r2, [pc, #176]	; (8011754 <tcp_listen_input+0x1f4>)
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	6013      	str	r3, [r2, #0]
 80116a6:	f003 fd27 	bl	80150f8 <tcp_timer_needed>
 80116aa:	4b2b      	ldr	r3, [pc, #172]	; (8011758 <tcp_listen_input+0x1f8>)
 80116ac:	2201      	movs	r2, #1
 80116ae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80116b0:	6978      	ldr	r0, [r7, #20]
 80116b2:	f001 fd8d 	bl	80131d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80116b6:	4b23      	ldr	r3, [pc, #140]	; (8011744 <tcp_listen_input+0x1e4>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	89db      	ldrh	r3, [r3, #14]
 80116bc:	b29a      	uxth	r2, r3
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	3304      	adds	r3, #4
 80116d8:	4618      	mov	r0, r3
 80116da:	f005 fc65 	bl	8016fa8 <ip4_route>
 80116de:	4601      	mov	r1, r0
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	3304      	adds	r3, #4
 80116e4:	461a      	mov	r2, r3
 80116e6:	4620      	mov	r0, r4
 80116e8:	f7ff fa32 	bl	8010b50 <tcp_eff_send_mss_netif>
 80116ec:	4603      	mov	r3, r0
 80116ee:	461a      	mov	r2, r3
 80116f0:	697b      	ldr	r3, [r7, #20]
 80116f2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80116f4:	2112      	movs	r1, #18
 80116f6:	6978      	ldr	r0, [r7, #20]
 80116f8:	f002 fc9a 	bl	8014030 <tcp_enqueue_flags>
 80116fc:	4603      	mov	r3, r0
 80116fe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d004      	beq.n	8011712 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011708:	2100      	movs	r1, #0
 801170a:	6978      	ldr	r0, [r7, #20]
 801170c:	f7fd fef0 	bl	800f4f0 <tcp_abandon>
      return;
 8011710:	e006      	b.n	8011720 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011712:	6978      	ldr	r0, [r7, #20]
 8011714:	f002 fd7a 	bl	801420c <tcp_output>
  return;
 8011718:	e001      	b.n	801171e <tcp_listen_input+0x1be>
    return;
 801171a:	bf00      	nop
 801171c:	e000      	b.n	8011720 <tcp_listen_input+0x1c0>
  return;
 801171e:	bf00      	nop
}
 8011720:	371c      	adds	r7, #28
 8011722:	46bd      	mov	sp, r7
 8011724:	bd90      	pop	{r4, r7, pc}
 8011726:	bf00      	nop
 8011728:	20011608 	.word	0x20011608
 801172c:	0801db20 	.word	0x0801db20
 8011730:	0801dd18 	.word	0x0801dd18
 8011734:	0801db6c 	.word	0x0801db6c
 8011738:	20011600 	.word	0x20011600
 801173c:	20011606 	.word	0x20011606
 8011740:	200115fc 	.word	0x200115fc
 8011744:	200115ec 	.word	0x200115ec
 8011748:	20014e5c 	.word	0x20014e5c
 801174c:	20014e60 	.word	0x20014e60
 8011750:	20014e4c 	.word	0x20014e4c
 8011754:	20018560 	.word	0x20018560
 8011758:	2001855c 	.word	0x2001855c

0801175c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b086      	sub	sp, #24
 8011760:	af04      	add	r7, sp, #16
 8011762:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011764:	4b2f      	ldr	r3, [pc, #188]	; (8011824 <tcp_timewait_input+0xc8>)
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	f003 0304 	and.w	r3, r3, #4
 801176c:	2b00      	cmp	r3, #0
 801176e:	d153      	bne.n	8011818 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d106      	bne.n	8011784 <tcp_timewait_input+0x28>
 8011776:	4b2c      	ldr	r3, [pc, #176]	; (8011828 <tcp_timewait_input+0xcc>)
 8011778:	f240 22ee 	movw	r2, #750	; 0x2ee
 801177c:	492b      	ldr	r1, [pc, #172]	; (801182c <tcp_timewait_input+0xd0>)
 801177e:	482c      	ldr	r0, [pc, #176]	; (8011830 <tcp_timewait_input+0xd4>)
 8011780:	f009 fadc 	bl	801ad3c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011784:	4b27      	ldr	r3, [pc, #156]	; (8011824 <tcp_timewait_input+0xc8>)
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	f003 0302 	and.w	r3, r3, #2
 801178c:	2b00      	cmp	r3, #0
 801178e:	d02a      	beq.n	80117e6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011790:	4b28      	ldr	r3, [pc, #160]	; (8011834 <tcp_timewait_input+0xd8>)
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011798:	1ad3      	subs	r3, r2, r3
 801179a:	2b00      	cmp	r3, #0
 801179c:	db2d      	blt.n	80117fa <tcp_timewait_input+0x9e>
 801179e:	4b25      	ldr	r3, [pc, #148]	; (8011834 <tcp_timewait_input+0xd8>)
 80117a0:	681a      	ldr	r2, [r3, #0]
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117a6:	6879      	ldr	r1, [r7, #4]
 80117a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117aa:	440b      	add	r3, r1
 80117ac:	1ad3      	subs	r3, r2, r3
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	dc23      	bgt.n	80117fa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117b2:	4b21      	ldr	r3, [pc, #132]	; (8011838 <tcp_timewait_input+0xdc>)
 80117b4:	6819      	ldr	r1, [r3, #0]
 80117b6:	4b21      	ldr	r3, [pc, #132]	; (801183c <tcp_timewait_input+0xe0>)
 80117b8:	881b      	ldrh	r3, [r3, #0]
 80117ba:	461a      	mov	r2, r3
 80117bc:	4b1d      	ldr	r3, [pc, #116]	; (8011834 <tcp_timewait_input+0xd8>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117c2:	4b1f      	ldr	r3, [pc, #124]	; (8011840 <tcp_timewait_input+0xe4>)
 80117c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117c6:	885b      	ldrh	r3, [r3, #2]
 80117c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117ca:	4a1d      	ldr	r2, [pc, #116]	; (8011840 <tcp_timewait_input+0xe4>)
 80117cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117ce:	8812      	ldrh	r2, [r2, #0]
 80117d0:	b292      	uxth	r2, r2
 80117d2:	9202      	str	r2, [sp, #8]
 80117d4:	9301      	str	r3, [sp, #4]
 80117d6:	4b1b      	ldr	r3, [pc, #108]	; (8011844 <tcp_timewait_input+0xe8>)
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	4b1b      	ldr	r3, [pc, #108]	; (8011848 <tcp_timewait_input+0xec>)
 80117dc:	4602      	mov	r2, r0
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f003 fac8 	bl	8014d74 <tcp_rst>
      return;
 80117e4:	e01b      	b.n	801181e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80117e6:	4b0f      	ldr	r3, [pc, #60]	; (8011824 <tcp_timewait_input+0xc8>)
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	f003 0301 	and.w	r3, r3, #1
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d003      	beq.n	80117fa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80117f2:	4b16      	ldr	r3, [pc, #88]	; (801184c <tcp_timewait_input+0xf0>)
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80117fa:	4b10      	ldr	r3, [pc, #64]	; (801183c <tcp_timewait_input+0xe0>)
 80117fc:	881b      	ldrh	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d00c      	beq.n	801181c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	8b5b      	ldrh	r3, [r3, #26]
 8011806:	f043 0302 	orr.w	r3, r3, #2
 801180a:	b29a      	uxth	r2, r3
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011810:	6878      	ldr	r0, [r7, #4]
 8011812:	f002 fcfb 	bl	801420c <tcp_output>
  }
  return;
 8011816:	e001      	b.n	801181c <tcp_timewait_input+0xc0>
    return;
 8011818:	bf00      	nop
 801181a:	e000      	b.n	801181e <tcp_timewait_input+0xc2>
  return;
 801181c:	bf00      	nop
}
 801181e:	3708      	adds	r7, #8
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}
 8011824:	20011608 	.word	0x20011608
 8011828:	0801db20 	.word	0x0801db20
 801182c:	0801dd38 	.word	0x0801dd38
 8011830:	0801db6c 	.word	0x0801db6c
 8011834:	200115fc 	.word	0x200115fc
 8011838:	20011600 	.word	0x20011600
 801183c:	20011606 	.word	0x20011606
 8011840:	200115ec 	.word	0x200115ec
 8011844:	20014e5c 	.word	0x20014e5c
 8011848:	20014e60 	.word	0x20014e60
 801184c:	20018564 	.word	0x20018564

08011850 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011850:	b590      	push	{r4, r7, lr}
 8011852:	b08d      	sub	sp, #52	; 0x34
 8011854:	af04      	add	r7, sp, #16
 8011856:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011858:	2300      	movs	r3, #0
 801185a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801185c:	2300      	movs	r3, #0
 801185e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d106      	bne.n	8011874 <tcp_process+0x24>
 8011866:	4ba5      	ldr	r3, [pc, #660]	; (8011afc <tcp_process+0x2ac>)
 8011868:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801186c:	49a4      	ldr	r1, [pc, #656]	; (8011b00 <tcp_process+0x2b0>)
 801186e:	48a5      	ldr	r0, [pc, #660]	; (8011b04 <tcp_process+0x2b4>)
 8011870:	f009 fa64 	bl	801ad3c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011874:	4ba4      	ldr	r3, [pc, #656]	; (8011b08 <tcp_process+0x2b8>)
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	f003 0304 	and.w	r3, r3, #4
 801187c:	2b00      	cmp	r3, #0
 801187e:	d04e      	beq.n	801191e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	7d1b      	ldrb	r3, [r3, #20]
 8011884:	2b02      	cmp	r3, #2
 8011886:	d108      	bne.n	801189a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801188c:	4b9f      	ldr	r3, [pc, #636]	; (8011b0c <tcp_process+0x2bc>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	429a      	cmp	r2, r3
 8011892:	d123      	bne.n	80118dc <tcp_process+0x8c>
        acceptable = 1;
 8011894:	2301      	movs	r3, #1
 8011896:	76fb      	strb	r3, [r7, #27]
 8011898:	e020      	b.n	80118dc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801189e:	4b9c      	ldr	r3, [pc, #624]	; (8011b10 <tcp_process+0x2c0>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d102      	bne.n	80118ac <tcp_process+0x5c>
        acceptable = 1;
 80118a6:	2301      	movs	r3, #1
 80118a8:	76fb      	strb	r3, [r7, #27]
 80118aa:	e017      	b.n	80118dc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80118ac:	4b98      	ldr	r3, [pc, #608]	; (8011b10 <tcp_process+0x2c0>)
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b4:	1ad3      	subs	r3, r2, r3
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	db10      	blt.n	80118dc <tcp_process+0x8c>
 80118ba:	4b95      	ldr	r3, [pc, #596]	; (8011b10 <tcp_process+0x2c0>)
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118c2:	6879      	ldr	r1, [r7, #4]
 80118c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80118c6:	440b      	add	r3, r1
 80118c8:	1ad3      	subs	r3, r2, r3
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	dc06      	bgt.n	80118dc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	8b5b      	ldrh	r3, [r3, #26]
 80118d2:	f043 0302 	orr.w	r3, r3, #2
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80118dc:	7efb      	ldrb	r3, [r7, #27]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d01b      	beq.n	801191a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	7d1b      	ldrb	r3, [r3, #20]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d106      	bne.n	80118f8 <tcp_process+0xa8>
 80118ea:	4b84      	ldr	r3, [pc, #528]	; (8011afc <tcp_process+0x2ac>)
 80118ec:	f44f 724e 	mov.w	r2, #824	; 0x338
 80118f0:	4988      	ldr	r1, [pc, #544]	; (8011b14 <tcp_process+0x2c4>)
 80118f2:	4884      	ldr	r0, [pc, #528]	; (8011b04 <tcp_process+0x2b4>)
 80118f4:	f009 fa22 	bl	801ad3c <iprintf>
      recv_flags |= TF_RESET;
 80118f8:	4b87      	ldr	r3, [pc, #540]	; (8011b18 <tcp_process+0x2c8>)
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	f043 0308 	orr.w	r3, r3, #8
 8011900:	b2da      	uxtb	r2, r3
 8011902:	4b85      	ldr	r3, [pc, #532]	; (8011b18 <tcp_process+0x2c8>)
 8011904:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	8b5b      	ldrh	r3, [r3, #26]
 801190a:	f023 0301 	bic.w	r3, r3, #1
 801190e:	b29a      	uxth	r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011914:	f06f 030d 	mvn.w	r3, #13
 8011918:	e37a      	b.n	8012010 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801191a:	2300      	movs	r3, #0
 801191c:	e378      	b.n	8012010 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801191e:	4b7a      	ldr	r3, [pc, #488]	; (8011b08 <tcp_process+0x2b8>)
 8011920:	781b      	ldrb	r3, [r3, #0]
 8011922:	f003 0302 	and.w	r3, r3, #2
 8011926:	2b00      	cmp	r3, #0
 8011928:	d010      	beq.n	801194c <tcp_process+0xfc>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	7d1b      	ldrb	r3, [r3, #20]
 801192e:	2b02      	cmp	r3, #2
 8011930:	d00c      	beq.n	801194c <tcp_process+0xfc>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	7d1b      	ldrb	r3, [r3, #20]
 8011936:	2b03      	cmp	r3, #3
 8011938:	d008      	beq.n	801194c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	8b5b      	ldrh	r3, [r3, #26]
 801193e:	f043 0302 	orr.w	r3, r3, #2
 8011942:	b29a      	uxth	r2, r3
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011948:	2300      	movs	r3, #0
 801194a:	e361      	b.n	8012010 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	8b5b      	ldrh	r3, [r3, #26]
 8011950:	f003 0310 	and.w	r3, r3, #16
 8011954:	2b00      	cmp	r3, #0
 8011956:	d103      	bne.n	8011960 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011958:	4b70      	ldr	r3, [pc, #448]	; (8011b1c <tcp_process+0x2cc>)
 801195a:	681a      	ldr	r2, [r3, #0]
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2200      	movs	r2, #0
 8011964:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2200      	movs	r2, #0
 801196c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f001 fc2d 	bl	80131d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	7d1b      	ldrb	r3, [r3, #20]
 801197a:	3b02      	subs	r3, #2
 801197c:	2b07      	cmp	r3, #7
 801197e:	f200 8337 	bhi.w	8011ff0 <tcp_process+0x7a0>
 8011982:	a201      	add	r2, pc, #4	; (adr r2, 8011988 <tcp_process+0x138>)
 8011984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011988:	080119a9 	.word	0x080119a9
 801198c:	08011bd9 	.word	0x08011bd9
 8011990:	08011d51 	.word	0x08011d51
 8011994:	08011d7b 	.word	0x08011d7b
 8011998:	08011e9f 	.word	0x08011e9f
 801199c:	08011d51 	.word	0x08011d51
 80119a0:	08011f2b 	.word	0x08011f2b
 80119a4:	08011fbb 	.word	0x08011fbb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80119a8:	4b57      	ldr	r3, [pc, #348]	; (8011b08 <tcp_process+0x2b8>)
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	f003 0310 	and.w	r3, r3, #16
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	f000 80e4 	beq.w	8011b7e <tcp_process+0x32e>
 80119b6:	4b54      	ldr	r3, [pc, #336]	; (8011b08 <tcp_process+0x2b8>)
 80119b8:	781b      	ldrb	r3, [r3, #0]
 80119ba:	f003 0302 	and.w	r3, r3, #2
 80119be:	2b00      	cmp	r3, #0
 80119c0:	f000 80dd 	beq.w	8011b7e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119c8:	1c5a      	adds	r2, r3, #1
 80119ca:	4b50      	ldr	r3, [pc, #320]	; (8011b0c <tcp_process+0x2bc>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	f040 80d5 	bne.w	8011b7e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80119d4:	4b4e      	ldr	r3, [pc, #312]	; (8011b10 <tcp_process+0x2c0>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	1c5a      	adds	r2, r3, #1
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80119e6:	4b49      	ldr	r3, [pc, #292]	; (8011b0c <tcp_process+0x2bc>)
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80119ee:	4b4c      	ldr	r3, [pc, #304]	; (8011b20 <tcp_process+0x2d0>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	89db      	ldrh	r3, [r3, #14]
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011a08:	4b41      	ldr	r3, [pc, #260]	; (8011b10 <tcp_process+0x2c0>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	1e5a      	subs	r2, r3, #1
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2204      	movs	r2, #4
 8011a16:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	3304      	adds	r3, #4
 8011a20:	4618      	mov	r0, r3
 8011a22:	f005 fac1 	bl	8016fa8 <ip4_route>
 8011a26:	4601      	mov	r1, r0
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	3304      	adds	r3, #4
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	4620      	mov	r0, r4
 8011a30:	f7ff f88e 	bl	8010b50 <tcp_eff_send_mss_netif>
 8011a34:	4603      	mov	r3, r0
 8011a36:	461a      	mov	r2, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a40:	009a      	lsls	r2, r3, #2
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a46:	005b      	lsls	r3, r3, #1
 8011a48:	f241 111c 	movw	r1, #4380	; 0x111c
 8011a4c:	428b      	cmp	r3, r1
 8011a4e:	bf38      	it	cc
 8011a50:	460b      	movcc	r3, r1
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d204      	bcs.n	8011a60 <tcp_process+0x210>
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	e00d      	b.n	8011a7c <tcp_process+0x22c>
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a64:	005b      	lsls	r3, r3, #1
 8011a66:	f241 121c 	movw	r2, #4380	; 0x111c
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d904      	bls.n	8011a78 <tcp_process+0x228>
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a72:	005b      	lsls	r3, r3, #1
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	e001      	b.n	8011a7c <tcp_process+0x22c>
 8011a78:	f241 131c 	movw	r3, #4380	; 0x111c
 8011a7c:	687a      	ldr	r2, [r7, #4]
 8011a7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d106      	bne.n	8011a9a <tcp_process+0x24a>
 8011a8c:	4b1b      	ldr	r3, [pc, #108]	; (8011afc <tcp_process+0x2ac>)
 8011a8e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011a92:	4924      	ldr	r1, [pc, #144]	; (8011b24 <tcp_process+0x2d4>)
 8011a94:	481b      	ldr	r0, [pc, #108]	; (8011b04 <tcp_process+0x2b4>)
 8011a96:	f009 f951 	bl	801ad3c <iprintf>
        --pcb->snd_queuelen;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011aa0:	3b01      	subs	r3, #1
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011ab0:	69fb      	ldr	r3, [r7, #28]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d111      	bne.n	8011ada <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011abc:	69fb      	ldr	r3, [r7, #28]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d106      	bne.n	8011ad0 <tcp_process+0x280>
 8011ac2:	4b0e      	ldr	r3, [pc, #56]	; (8011afc <tcp_process+0x2ac>)
 8011ac4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011ac8:	4917      	ldr	r1, [pc, #92]	; (8011b28 <tcp_process+0x2d8>)
 8011aca:	480e      	ldr	r0, [pc, #56]	; (8011b04 <tcp_process+0x2b4>)
 8011acc:	f009 f936 	bl	801ad3c <iprintf>
          pcb->unsent = rseg->next;
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	681a      	ldr	r2, [r3, #0]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	66da      	str	r2, [r3, #108]	; 0x6c
 8011ad8:	e003      	b.n	8011ae2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	681a      	ldr	r2, [r3, #0]
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011ae2:	69f8      	ldr	r0, [r7, #28]
 8011ae4:	f7fe fc6f 	bl	80103c6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d11d      	bne.n	8011b2c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011af6:	861a      	strh	r2, [r3, #48]	; 0x30
 8011af8:	e01f      	b.n	8011b3a <tcp_process+0x2ea>
 8011afa:	bf00      	nop
 8011afc:	0801db20 	.word	0x0801db20
 8011b00:	0801dd58 	.word	0x0801dd58
 8011b04:	0801db6c 	.word	0x0801db6c
 8011b08:	20011608 	.word	0x20011608
 8011b0c:	20011600 	.word	0x20011600
 8011b10:	200115fc 	.word	0x200115fc
 8011b14:	0801dd74 	.word	0x0801dd74
 8011b18:	20011609 	.word	0x20011609
 8011b1c:	20018564 	.word	0x20018564
 8011b20:	200115ec 	.word	0x200115ec
 8011b24:	0801dd94 	.word	0x0801dd94
 8011b28:	0801ddac 	.word	0x0801ddac
        } else {
          pcb->rtime = 0;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2200      	movs	r2, #0
 8011b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d00a      	beq.n	8011b5a <tcp_process+0x30a>
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	6910      	ldr	r0, [r2, #16]
 8011b4e:	2200      	movs	r2, #0
 8011b50:	6879      	ldr	r1, [r7, #4]
 8011b52:	4798      	blx	r3
 8011b54:	4603      	mov	r3, r0
 8011b56:	76bb      	strb	r3, [r7, #26]
 8011b58:	e001      	b.n	8011b5e <tcp_process+0x30e>
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011b5e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011b62:	f113 0f0d 	cmn.w	r3, #13
 8011b66:	d102      	bne.n	8011b6e <tcp_process+0x31e>
          return ERR_ABRT;
 8011b68:	f06f 030c 	mvn.w	r3, #12
 8011b6c:	e250      	b.n	8012010 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	8b5b      	ldrh	r3, [r3, #26]
 8011b72:	f043 0302 	orr.w	r3, r3, #2
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011b7c:	e23a      	b.n	8011ff4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011b7e:	4b9d      	ldr	r3, [pc, #628]	; (8011df4 <tcp_process+0x5a4>)
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	f003 0310 	and.w	r3, r3, #16
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f000 8234 	beq.w	8011ff4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b8c:	4b9a      	ldr	r3, [pc, #616]	; (8011df8 <tcp_process+0x5a8>)
 8011b8e:	6819      	ldr	r1, [r3, #0]
 8011b90:	4b9a      	ldr	r3, [pc, #616]	; (8011dfc <tcp_process+0x5ac>)
 8011b92:	881b      	ldrh	r3, [r3, #0]
 8011b94:	461a      	mov	r2, r3
 8011b96:	4b9a      	ldr	r3, [pc, #616]	; (8011e00 <tcp_process+0x5b0>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b9c:	4b99      	ldr	r3, [pc, #612]	; (8011e04 <tcp_process+0x5b4>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ba0:	885b      	ldrh	r3, [r3, #2]
 8011ba2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ba4:	4a97      	ldr	r2, [pc, #604]	; (8011e04 <tcp_process+0x5b4>)
 8011ba6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ba8:	8812      	ldrh	r2, [r2, #0]
 8011baa:	b292      	uxth	r2, r2
 8011bac:	9202      	str	r2, [sp, #8]
 8011bae:	9301      	str	r3, [sp, #4]
 8011bb0:	4b95      	ldr	r3, [pc, #596]	; (8011e08 <tcp_process+0x5b8>)
 8011bb2:	9300      	str	r3, [sp, #0]
 8011bb4:	4b95      	ldr	r3, [pc, #596]	; (8011e0c <tcp_process+0x5bc>)
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f003 f8db 	bl	8014d74 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011bc4:	2b05      	cmp	r3, #5
 8011bc6:	f200 8215 	bhi.w	8011ff4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f002 fea5 	bl	8014920 <tcp_rexmit_rto>
      break;
 8011bd6:	e20d      	b.n	8011ff4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011bd8:	4b86      	ldr	r3, [pc, #536]	; (8011df4 <tcp_process+0x5a4>)
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	f003 0310 	and.w	r3, r3, #16
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f000 80a1 	beq.w	8011d28 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011be6:	4b84      	ldr	r3, [pc, #528]	; (8011df8 <tcp_process+0x5a8>)
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bee:	1ad3      	subs	r3, r2, r3
 8011bf0:	3b01      	subs	r3, #1
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	db7e      	blt.n	8011cf4 <tcp_process+0x4a4>
 8011bf6:	4b80      	ldr	r3, [pc, #512]	; (8011df8 <tcp_process+0x5a8>)
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bfe:	1ad3      	subs	r3, r2, r3
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	dc77      	bgt.n	8011cf4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2204      	movs	r2, #4
 8011c08:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d102      	bne.n	8011c18 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011c12:	23fa      	movs	r3, #250	; 0xfa
 8011c14:	76bb      	strb	r3, [r7, #26]
 8011c16:	e01d      	b.n	8011c54 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c1c:	699b      	ldr	r3, [r3, #24]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d106      	bne.n	8011c30 <tcp_process+0x3e0>
 8011c22:	4b7b      	ldr	r3, [pc, #492]	; (8011e10 <tcp_process+0x5c0>)
 8011c24:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011c28:	497a      	ldr	r1, [pc, #488]	; (8011e14 <tcp_process+0x5c4>)
 8011c2a:	487b      	ldr	r0, [pc, #492]	; (8011e18 <tcp_process+0x5c8>)
 8011c2c:	f009 f886 	bl	801ad3c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c34:	699b      	ldr	r3, [r3, #24]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d00a      	beq.n	8011c50 <tcp_process+0x400>
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c3e:	699b      	ldr	r3, [r3, #24]
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	6910      	ldr	r0, [r2, #16]
 8011c44:	2200      	movs	r2, #0
 8011c46:	6879      	ldr	r1, [r7, #4]
 8011c48:	4798      	blx	r3
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	76bb      	strb	r3, [r7, #26]
 8011c4e:	e001      	b.n	8011c54 <tcp_process+0x404>
 8011c50:	23f0      	movs	r3, #240	; 0xf0
 8011c52:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011c54:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d00a      	beq.n	8011c72 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011c5c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011c60:	f113 0f0d 	cmn.w	r3, #13
 8011c64:	d002      	beq.n	8011c6c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7fd fd00 	bl	800f66c <tcp_abort>
            }
            return ERR_ABRT;
 8011c6c:	f06f 030c 	mvn.w	r3, #12
 8011c70:	e1ce      	b.n	8012010 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f000 fae0 	bl	8012238 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011c78:	4b68      	ldr	r3, [pc, #416]	; (8011e1c <tcp_process+0x5cc>)
 8011c7a:	881b      	ldrh	r3, [r3, #0]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d005      	beq.n	8011c8c <tcp_process+0x43c>
            recv_acked--;
 8011c80:	4b66      	ldr	r3, [pc, #408]	; (8011e1c <tcp_process+0x5cc>)
 8011c82:	881b      	ldrh	r3, [r3, #0]
 8011c84:	3b01      	subs	r3, #1
 8011c86:	b29a      	uxth	r2, r3
 8011c88:	4b64      	ldr	r3, [pc, #400]	; (8011e1c <tcp_process+0x5cc>)
 8011c8a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c90:	009a      	lsls	r2, r3, #2
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c96:	005b      	lsls	r3, r3, #1
 8011c98:	f241 111c 	movw	r1, #4380	; 0x111c
 8011c9c:	428b      	cmp	r3, r1
 8011c9e:	bf38      	it	cc
 8011ca0:	460b      	movcc	r3, r1
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d204      	bcs.n	8011cb0 <tcp_process+0x460>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	e00d      	b.n	8011ccc <tcp_process+0x47c>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cb4:	005b      	lsls	r3, r3, #1
 8011cb6:	f241 121c 	movw	r2, #4380	; 0x111c
 8011cba:	4293      	cmp	r3, r2
 8011cbc:	d904      	bls.n	8011cc8 <tcp_process+0x478>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cc2:	005b      	lsls	r3, r3, #1
 8011cc4:	b29b      	uxth	r3, r3
 8011cc6:	e001      	b.n	8011ccc <tcp_process+0x47c>
 8011cc8:	f241 131c 	movw	r3, #4380	; 0x111c
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011cd2:	4b53      	ldr	r3, [pc, #332]	; (8011e20 <tcp_process+0x5d0>)
 8011cd4:	781b      	ldrb	r3, [r3, #0]
 8011cd6:	f003 0320 	and.w	r3, r3, #32
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d037      	beq.n	8011d4e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	8b5b      	ldrh	r3, [r3, #26]
 8011ce2:	f043 0302 	orr.w	r3, r3, #2
 8011ce6:	b29a      	uxth	r2, r3
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2207      	movs	r2, #7
 8011cf0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011cf2:	e02c      	b.n	8011d4e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cf4:	4b40      	ldr	r3, [pc, #256]	; (8011df8 <tcp_process+0x5a8>)
 8011cf6:	6819      	ldr	r1, [r3, #0]
 8011cf8:	4b40      	ldr	r3, [pc, #256]	; (8011dfc <tcp_process+0x5ac>)
 8011cfa:	881b      	ldrh	r3, [r3, #0]
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	4b40      	ldr	r3, [pc, #256]	; (8011e00 <tcp_process+0x5b0>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d04:	4b3f      	ldr	r3, [pc, #252]	; (8011e04 <tcp_process+0x5b4>)
 8011d06:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d08:	885b      	ldrh	r3, [r3, #2]
 8011d0a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d0c:	4a3d      	ldr	r2, [pc, #244]	; (8011e04 <tcp_process+0x5b4>)
 8011d0e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d10:	8812      	ldrh	r2, [r2, #0]
 8011d12:	b292      	uxth	r2, r2
 8011d14:	9202      	str	r2, [sp, #8]
 8011d16:	9301      	str	r3, [sp, #4]
 8011d18:	4b3b      	ldr	r3, [pc, #236]	; (8011e08 <tcp_process+0x5b8>)
 8011d1a:	9300      	str	r3, [sp, #0]
 8011d1c:	4b3b      	ldr	r3, [pc, #236]	; (8011e0c <tcp_process+0x5bc>)
 8011d1e:	4602      	mov	r2, r0
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f003 f827 	bl	8014d74 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011d26:	e167      	b.n	8011ff8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011d28:	4b32      	ldr	r3, [pc, #200]	; (8011df4 <tcp_process+0x5a4>)
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	f003 0302 	and.w	r3, r3, #2
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f000 8161 	beq.w	8011ff8 <tcp_process+0x7a8>
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d3a:	1e5a      	subs	r2, r3, #1
 8011d3c:	4b30      	ldr	r3, [pc, #192]	; (8011e00 <tcp_process+0x5b0>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	f040 8159 	bne.w	8011ff8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f002 fe0c 	bl	8014964 <tcp_rexmit>
      break;
 8011d4c:	e154      	b.n	8011ff8 <tcp_process+0x7a8>
 8011d4e:	e153      	b.n	8011ff8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f000 fa71 	bl	8012238 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011d56:	4b32      	ldr	r3, [pc, #200]	; (8011e20 <tcp_process+0x5d0>)
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	f003 0320 	and.w	r3, r3, #32
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	f000 814c 	beq.w	8011ffc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	8b5b      	ldrh	r3, [r3, #26]
 8011d68:	f043 0302 	orr.w	r3, r3, #2
 8011d6c:	b29a      	uxth	r2, r3
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2207      	movs	r2, #7
 8011d76:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011d78:	e140      	b.n	8011ffc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 fa5c 	bl	8012238 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011d80:	4b27      	ldr	r3, [pc, #156]	; (8011e20 <tcp_process+0x5d0>)
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	f003 0320 	and.w	r3, r3, #32
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d071      	beq.n	8011e70 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d8c:	4b19      	ldr	r3, [pc, #100]	; (8011df4 <tcp_process+0x5a4>)
 8011d8e:	781b      	ldrb	r3, [r3, #0]
 8011d90:	f003 0310 	and.w	r3, r3, #16
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d060      	beq.n	8011e5a <tcp_process+0x60a>
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d9c:	4b16      	ldr	r3, [pc, #88]	; (8011df8 <tcp_process+0x5a8>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d15a      	bne.n	8011e5a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d156      	bne.n	8011e5a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	8b5b      	ldrh	r3, [r3, #26]
 8011db0:	f043 0302 	orr.w	r3, r3, #2
 8011db4:	b29a      	uxth	r2, r3
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f7fe fdbe 	bl	801093c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011dc0:	4b18      	ldr	r3, [pc, #96]	; (8011e24 <tcp_process+0x5d4>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d105      	bne.n	8011dd6 <tcp_process+0x586>
 8011dca:	4b16      	ldr	r3, [pc, #88]	; (8011e24 <tcp_process+0x5d4>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	4a14      	ldr	r2, [pc, #80]	; (8011e24 <tcp_process+0x5d4>)
 8011dd2:	6013      	str	r3, [r2, #0]
 8011dd4:	e02e      	b.n	8011e34 <tcp_process+0x5e4>
 8011dd6:	4b13      	ldr	r3, [pc, #76]	; (8011e24 <tcp_process+0x5d4>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	617b      	str	r3, [r7, #20]
 8011ddc:	e027      	b.n	8011e2e <tcp_process+0x5de>
 8011dde:	697b      	ldr	r3, [r7, #20]
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d11f      	bne.n	8011e28 <tcp_process+0x5d8>
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	68da      	ldr	r2, [r3, #12]
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	60da      	str	r2, [r3, #12]
 8011df0:	e020      	b.n	8011e34 <tcp_process+0x5e4>
 8011df2:	bf00      	nop
 8011df4:	20011608 	.word	0x20011608
 8011df8:	20011600 	.word	0x20011600
 8011dfc:	20011606 	.word	0x20011606
 8011e00:	200115fc 	.word	0x200115fc
 8011e04:	200115ec 	.word	0x200115ec
 8011e08:	20014e5c 	.word	0x20014e5c
 8011e0c:	20014e60 	.word	0x20014e60
 8011e10:	0801db20 	.word	0x0801db20
 8011e14:	0801ddc0 	.word	0x0801ddc0
 8011e18:	0801db6c 	.word	0x0801db6c
 8011e1c:	20011604 	.word	0x20011604
 8011e20:	20011609 	.word	0x20011609
 8011e24:	20018560 	.word	0x20018560
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	617b      	str	r3, [r7, #20]
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d1d4      	bne.n	8011dde <tcp_process+0x58e>
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2200      	movs	r2, #0
 8011e38:	60da      	str	r2, [r3, #12]
 8011e3a:	4b77      	ldr	r3, [pc, #476]	; (8012018 <tcp_process+0x7c8>)
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	220a      	movs	r2, #10
 8011e44:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011e46:	4b75      	ldr	r3, [pc, #468]	; (801201c <tcp_process+0x7cc>)
 8011e48:	681a      	ldr	r2, [r3, #0]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	60da      	str	r2, [r3, #12]
 8011e4e:	4a73      	ldr	r2, [pc, #460]	; (801201c <tcp_process+0x7cc>)
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6013      	str	r3, [r2, #0]
 8011e54:	f003 f950 	bl	80150f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011e58:	e0d2      	b.n	8012000 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	8b5b      	ldrh	r3, [r3, #26]
 8011e5e:	f043 0302 	orr.w	r3, r3, #2
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2208      	movs	r2, #8
 8011e6c:	751a      	strb	r2, [r3, #20]
      break;
 8011e6e:	e0c7      	b.n	8012000 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011e70:	4b6b      	ldr	r3, [pc, #428]	; (8012020 <tcp_process+0x7d0>)
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	f003 0310 	and.w	r3, r3, #16
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f000 80c1 	beq.w	8012000 <tcp_process+0x7b0>
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e82:	4b68      	ldr	r3, [pc, #416]	; (8012024 <tcp_process+0x7d4>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	f040 80ba 	bne.w	8012000 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	f040 80b5 	bne.w	8012000 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	2206      	movs	r2, #6
 8011e9a:	751a      	strb	r2, [r3, #20]
      break;
 8011e9c:	e0b0      	b.n	8012000 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 f9ca 	bl	8012238 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011ea4:	4b60      	ldr	r3, [pc, #384]	; (8012028 <tcp_process+0x7d8>)
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	f003 0320 	and.w	r3, r3, #32
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	f000 80a9 	beq.w	8012004 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	8b5b      	ldrh	r3, [r3, #26]
 8011eb6:	f043 0302 	orr.w	r3, r3, #2
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7fe fd3b 	bl	801093c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011ec6:	4b59      	ldr	r3, [pc, #356]	; (801202c <tcp_process+0x7dc>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d105      	bne.n	8011edc <tcp_process+0x68c>
 8011ed0:	4b56      	ldr	r3, [pc, #344]	; (801202c <tcp_process+0x7dc>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	4a55      	ldr	r2, [pc, #340]	; (801202c <tcp_process+0x7dc>)
 8011ed8:	6013      	str	r3, [r2, #0]
 8011eda:	e013      	b.n	8011f04 <tcp_process+0x6b4>
 8011edc:	4b53      	ldr	r3, [pc, #332]	; (801202c <tcp_process+0x7dc>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	613b      	str	r3, [r7, #16]
 8011ee2:	e00c      	b.n	8011efe <tcp_process+0x6ae>
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	687a      	ldr	r2, [r7, #4]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d104      	bne.n	8011ef8 <tcp_process+0x6a8>
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	68da      	ldr	r2, [r3, #12]
 8011ef2:	693b      	ldr	r3, [r7, #16]
 8011ef4:	60da      	str	r2, [r3, #12]
 8011ef6:	e005      	b.n	8011f04 <tcp_process+0x6b4>
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	613b      	str	r3, [r7, #16]
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d1ef      	bne.n	8011ee4 <tcp_process+0x694>
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2200      	movs	r2, #0
 8011f08:	60da      	str	r2, [r3, #12]
 8011f0a:	4b43      	ldr	r3, [pc, #268]	; (8012018 <tcp_process+0x7c8>)
 8011f0c:	2201      	movs	r2, #1
 8011f0e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	220a      	movs	r2, #10
 8011f14:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011f16:	4b41      	ldr	r3, [pc, #260]	; (801201c <tcp_process+0x7cc>)
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	60da      	str	r2, [r3, #12]
 8011f1e:	4a3f      	ldr	r2, [pc, #252]	; (801201c <tcp_process+0x7cc>)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6013      	str	r3, [r2, #0]
 8011f24:	f003 f8e8 	bl	80150f8 <tcp_timer_needed>
      }
      break;
 8011f28:	e06c      	b.n	8012004 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f000 f984 	bl	8012238 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011f30:	4b3b      	ldr	r3, [pc, #236]	; (8012020 <tcp_process+0x7d0>)
 8011f32:	781b      	ldrb	r3, [r3, #0]
 8011f34:	f003 0310 	and.w	r3, r3, #16
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d065      	beq.n	8012008 <tcp_process+0x7b8>
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f40:	4b38      	ldr	r3, [pc, #224]	; (8012024 <tcp_process+0x7d4>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d15f      	bne.n	8012008 <tcp_process+0x7b8>
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d15b      	bne.n	8012008 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f7fe fcf3 	bl	801093c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011f56:	4b35      	ldr	r3, [pc, #212]	; (801202c <tcp_process+0x7dc>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d105      	bne.n	8011f6c <tcp_process+0x71c>
 8011f60:	4b32      	ldr	r3, [pc, #200]	; (801202c <tcp_process+0x7dc>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	68db      	ldr	r3, [r3, #12]
 8011f66:	4a31      	ldr	r2, [pc, #196]	; (801202c <tcp_process+0x7dc>)
 8011f68:	6013      	str	r3, [r2, #0]
 8011f6a:	e013      	b.n	8011f94 <tcp_process+0x744>
 8011f6c:	4b2f      	ldr	r3, [pc, #188]	; (801202c <tcp_process+0x7dc>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	60fb      	str	r3, [r7, #12]
 8011f72:	e00c      	b.n	8011f8e <tcp_process+0x73e>
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	68db      	ldr	r3, [r3, #12]
 8011f78:	687a      	ldr	r2, [r7, #4]
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d104      	bne.n	8011f88 <tcp_process+0x738>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	68da      	ldr	r2, [r3, #12]
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	60da      	str	r2, [r3, #12]
 8011f86:	e005      	b.n	8011f94 <tcp_process+0x744>
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	68db      	ldr	r3, [r3, #12]
 8011f8c:	60fb      	str	r3, [r7, #12]
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d1ef      	bne.n	8011f74 <tcp_process+0x724>
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2200      	movs	r2, #0
 8011f98:	60da      	str	r2, [r3, #12]
 8011f9a:	4b1f      	ldr	r3, [pc, #124]	; (8012018 <tcp_process+0x7c8>)
 8011f9c:	2201      	movs	r2, #1
 8011f9e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	220a      	movs	r2, #10
 8011fa4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011fa6:	4b1d      	ldr	r3, [pc, #116]	; (801201c <tcp_process+0x7cc>)
 8011fa8:	681a      	ldr	r2, [r3, #0]
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	60da      	str	r2, [r3, #12]
 8011fae:	4a1b      	ldr	r2, [pc, #108]	; (801201c <tcp_process+0x7cc>)
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	6013      	str	r3, [r2, #0]
 8011fb4:	f003 f8a0 	bl	80150f8 <tcp_timer_needed>
      }
      break;
 8011fb8:	e026      	b.n	8012008 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011fba:	6878      	ldr	r0, [r7, #4]
 8011fbc:	f000 f93c 	bl	8012238 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011fc0:	4b17      	ldr	r3, [pc, #92]	; (8012020 <tcp_process+0x7d0>)
 8011fc2:	781b      	ldrb	r3, [r3, #0]
 8011fc4:	f003 0310 	and.w	r3, r3, #16
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d01f      	beq.n	801200c <tcp_process+0x7bc>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011fd0:	4b14      	ldr	r3, [pc, #80]	; (8012024 <tcp_process+0x7d4>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d119      	bne.n	801200c <tcp_process+0x7bc>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d115      	bne.n	801200c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011fe0:	4b11      	ldr	r3, [pc, #68]	; (8012028 <tcp_process+0x7d8>)
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	f043 0310 	orr.w	r3, r3, #16
 8011fe8:	b2da      	uxtb	r2, r3
 8011fea:	4b0f      	ldr	r3, [pc, #60]	; (8012028 <tcp_process+0x7d8>)
 8011fec:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011fee:	e00d      	b.n	801200c <tcp_process+0x7bc>
    default:
      break;
 8011ff0:	bf00      	nop
 8011ff2:	e00c      	b.n	801200e <tcp_process+0x7be>
      break;
 8011ff4:	bf00      	nop
 8011ff6:	e00a      	b.n	801200e <tcp_process+0x7be>
      break;
 8011ff8:	bf00      	nop
 8011ffa:	e008      	b.n	801200e <tcp_process+0x7be>
      break;
 8011ffc:	bf00      	nop
 8011ffe:	e006      	b.n	801200e <tcp_process+0x7be>
      break;
 8012000:	bf00      	nop
 8012002:	e004      	b.n	801200e <tcp_process+0x7be>
      break;
 8012004:	bf00      	nop
 8012006:	e002      	b.n	801200e <tcp_process+0x7be>
      break;
 8012008:	bf00      	nop
 801200a:	e000      	b.n	801200e <tcp_process+0x7be>
      break;
 801200c:	bf00      	nop
  }
  return ERR_OK;
 801200e:	2300      	movs	r3, #0
}
 8012010:	4618      	mov	r0, r3
 8012012:	3724      	adds	r7, #36	; 0x24
 8012014:	46bd      	mov	sp, r7
 8012016:	bd90      	pop	{r4, r7, pc}
 8012018:	2001855c 	.word	0x2001855c
 801201c:	20018570 	.word	0x20018570
 8012020:	20011608 	.word	0x20011608
 8012024:	20011600 	.word	0x20011600
 8012028:	20011609 	.word	0x20011609
 801202c:	20018560 	.word	0x20018560

08012030 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012030:	b590      	push	{r4, r7, lr}
 8012032:	b085      	sub	sp, #20
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d106      	bne.n	801204e <tcp_oos_insert_segment+0x1e>
 8012040:	4b3b      	ldr	r3, [pc, #236]	; (8012130 <tcp_oos_insert_segment+0x100>)
 8012042:	f240 421f 	movw	r2, #1055	; 0x41f
 8012046:	493b      	ldr	r1, [pc, #236]	; (8012134 <tcp_oos_insert_segment+0x104>)
 8012048:	483b      	ldr	r0, [pc, #236]	; (8012138 <tcp_oos_insert_segment+0x108>)
 801204a:	f008 fe77 	bl	801ad3c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	68db      	ldr	r3, [r3, #12]
 8012052:	899b      	ldrh	r3, [r3, #12]
 8012054:	b29b      	uxth	r3, r3
 8012056:	4618      	mov	r0, r3
 8012058:	f7fb f8f2 	bl	800d240 <lwip_htons>
 801205c:	4603      	mov	r3, r0
 801205e:	b2db      	uxtb	r3, r3
 8012060:	f003 0301 	and.w	r3, r3, #1
 8012064:	2b00      	cmp	r3, #0
 8012066:	d028      	beq.n	80120ba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012068:	6838      	ldr	r0, [r7, #0]
 801206a:	f7fe f997 	bl	801039c <tcp_segs_free>
    next = NULL;
 801206e:	2300      	movs	r3, #0
 8012070:	603b      	str	r3, [r7, #0]
 8012072:	e056      	b.n	8012122 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	899b      	ldrh	r3, [r3, #12]
 801207a:	b29b      	uxth	r3, r3
 801207c:	4618      	mov	r0, r3
 801207e:	f7fb f8df 	bl	800d240 <lwip_htons>
 8012082:	4603      	mov	r3, r0
 8012084:	b2db      	uxtb	r3, r3
 8012086:	f003 0301 	and.w	r3, r3, #1
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00d      	beq.n	80120aa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	899b      	ldrh	r3, [r3, #12]
 8012094:	b29c      	uxth	r4, r3
 8012096:	2001      	movs	r0, #1
 8012098:	f7fb f8d2 	bl	800d240 <lwip_htons>
 801209c:	4603      	mov	r3, r0
 801209e:	461a      	mov	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	4322      	orrs	r2, r4
 80120a6:	b292      	uxth	r2, r2
 80120a8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80120b4:	68f8      	ldr	r0, [r7, #12]
 80120b6:	f7fe f986 	bl	80103c6 <tcp_seg_free>
    while (next &&
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00e      	beq.n	80120de <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	891b      	ldrh	r3, [r3, #8]
 80120c4:	461a      	mov	r2, r3
 80120c6:	4b1d      	ldr	r3, [pc, #116]	; (801213c <tcp_oos_insert_segment+0x10c>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	441a      	add	r2, r3
 80120cc:	683b      	ldr	r3, [r7, #0]
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	6839      	ldr	r1, [r7, #0]
 80120d4:	8909      	ldrh	r1, [r1, #8]
 80120d6:	440b      	add	r3, r1
 80120d8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80120da:	2b00      	cmp	r3, #0
 80120dc:	daca      	bge.n	8012074 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d01e      	beq.n	8012122 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	891b      	ldrh	r3, [r3, #8]
 80120e8:	461a      	mov	r2, r3
 80120ea:	4b14      	ldr	r3, [pc, #80]	; (801213c <tcp_oos_insert_segment+0x10c>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	441a      	add	r2, r3
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	68db      	ldr	r3, [r3, #12]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	dd12      	ble.n	8012122 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	68db      	ldr	r3, [r3, #12]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	b29a      	uxth	r2, r3
 8012104:	4b0d      	ldr	r3, [pc, #52]	; (801213c <tcp_oos_insert_segment+0x10c>)
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	b29b      	uxth	r3, r3
 801210a:	1ad3      	subs	r3, r2, r3
 801210c:	b29a      	uxth	r2, r3
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	685a      	ldr	r2, [r3, #4]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	891b      	ldrh	r3, [r3, #8]
 801211a:	4619      	mov	r1, r3
 801211c:	4610      	mov	r0, r2
 801211e:	f7fc faed 	bl	800e6fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	683a      	ldr	r2, [r7, #0]
 8012126:	601a      	str	r2, [r3, #0]
}
 8012128:	bf00      	nop
 801212a:	3714      	adds	r7, #20
 801212c:	46bd      	mov	sp, r7
 801212e:	bd90      	pop	{r4, r7, pc}
 8012130:	0801db20 	.word	0x0801db20
 8012134:	0801dde0 	.word	0x0801dde0
 8012138:	0801db6c 	.word	0x0801db6c
 801213c:	200115fc 	.word	0x200115fc

08012140 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012140:	b5b0      	push	{r4, r5, r7, lr}
 8012142:	b086      	sub	sp, #24
 8012144:	af00      	add	r7, sp, #0
 8012146:	60f8      	str	r0, [r7, #12]
 8012148:	60b9      	str	r1, [r7, #8]
 801214a:	607a      	str	r2, [r7, #4]
 801214c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801214e:	e03e      	b.n	80121ce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	4618      	mov	r0, r3
 8012160:	f7fc fd12 	bl	800eb88 <pbuf_clen>
 8012164:	4603      	mov	r3, r0
 8012166:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801216e:	8a7a      	ldrh	r2, [r7, #18]
 8012170:	429a      	cmp	r2, r3
 8012172:	d906      	bls.n	8012182 <tcp_free_acked_segments+0x42>
 8012174:	4b2a      	ldr	r3, [pc, #168]	; (8012220 <tcp_free_acked_segments+0xe0>)
 8012176:	f240 4257 	movw	r2, #1111	; 0x457
 801217a:	492a      	ldr	r1, [pc, #168]	; (8012224 <tcp_free_acked_segments+0xe4>)
 801217c:	482a      	ldr	r0, [pc, #168]	; (8012228 <tcp_free_acked_segments+0xe8>)
 801217e:	f008 fddd 	bl	801ad3c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012188:	8a7b      	ldrh	r3, [r7, #18]
 801218a:	1ad3      	subs	r3, r2, r3
 801218c:	b29a      	uxth	r2, r3
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	891a      	ldrh	r2, [r3, #8]
 8012198:	4b24      	ldr	r3, [pc, #144]	; (801222c <tcp_free_acked_segments+0xec>)
 801219a:	881b      	ldrh	r3, [r3, #0]
 801219c:	4413      	add	r3, r2
 801219e:	b29a      	uxth	r2, r3
 80121a0:	4b22      	ldr	r3, [pc, #136]	; (801222c <tcp_free_acked_segments+0xec>)
 80121a2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80121a4:	6978      	ldr	r0, [r7, #20]
 80121a6:	f7fe f90e 	bl	80103c6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d00c      	beq.n	80121ce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80121b4:	68bb      	ldr	r3, [r7, #8]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d109      	bne.n	80121ce <tcp_free_acked_segments+0x8e>
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d106      	bne.n	80121ce <tcp_free_acked_segments+0x8e>
 80121c0:	4b17      	ldr	r3, [pc, #92]	; (8012220 <tcp_free_acked_segments+0xe0>)
 80121c2:	f240 4261 	movw	r2, #1121	; 0x461
 80121c6:	491a      	ldr	r1, [pc, #104]	; (8012230 <tcp_free_acked_segments+0xf0>)
 80121c8:	4817      	ldr	r0, [pc, #92]	; (8012228 <tcp_free_acked_segments+0xe8>)
 80121ca:	f008 fdb7 	bl	801ad3c <iprintf>
  while (seg_list != NULL &&
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d020      	beq.n	8012216 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	685b      	ldr	r3, [r3, #4]
 80121da:	4618      	mov	r0, r3
 80121dc:	f7fb f845 	bl	800d26a <lwip_htonl>
 80121e0:	4604      	mov	r4, r0
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	891b      	ldrh	r3, [r3, #8]
 80121e6:	461d      	mov	r5, r3
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	68db      	ldr	r3, [r3, #12]
 80121ec:	899b      	ldrh	r3, [r3, #12]
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7fb f825 	bl	800d240 <lwip_htons>
 80121f6:	4603      	mov	r3, r0
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	f003 0303 	and.w	r3, r3, #3
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d001      	beq.n	8012206 <tcp_free_acked_segments+0xc6>
 8012202:	2301      	movs	r3, #1
 8012204:	e000      	b.n	8012208 <tcp_free_acked_segments+0xc8>
 8012206:	2300      	movs	r3, #0
 8012208:	442b      	add	r3, r5
 801220a:	18e2      	adds	r2, r4, r3
 801220c:	4b09      	ldr	r3, [pc, #36]	; (8012234 <tcp_free_acked_segments+0xf4>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012212:	2b00      	cmp	r3, #0
 8012214:	dd9c      	ble.n	8012150 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012216:	68bb      	ldr	r3, [r7, #8]
}
 8012218:	4618      	mov	r0, r3
 801221a:	3718      	adds	r7, #24
 801221c:	46bd      	mov	sp, r7
 801221e:	bdb0      	pop	{r4, r5, r7, pc}
 8012220:	0801db20 	.word	0x0801db20
 8012224:	0801de08 	.word	0x0801de08
 8012228:	0801db6c 	.word	0x0801db6c
 801222c:	20011604 	.word	0x20011604
 8012230:	0801de30 	.word	0x0801de30
 8012234:	20011600 	.word	0x20011600

08012238 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012238:	b5b0      	push	{r4, r5, r7, lr}
 801223a:	b094      	sub	sp, #80	; 0x50
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012240:	2300      	movs	r3, #0
 8012242:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d106      	bne.n	8012258 <tcp_receive+0x20>
 801224a:	4ba6      	ldr	r3, [pc, #664]	; (80124e4 <tcp_receive+0x2ac>)
 801224c:	f240 427b 	movw	r2, #1147	; 0x47b
 8012250:	49a5      	ldr	r1, [pc, #660]	; (80124e8 <tcp_receive+0x2b0>)
 8012252:	48a6      	ldr	r0, [pc, #664]	; (80124ec <tcp_receive+0x2b4>)
 8012254:	f008 fd72 	bl	801ad3c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	7d1b      	ldrb	r3, [r3, #20]
 801225c:	2b03      	cmp	r3, #3
 801225e:	d806      	bhi.n	801226e <tcp_receive+0x36>
 8012260:	4ba0      	ldr	r3, [pc, #640]	; (80124e4 <tcp_receive+0x2ac>)
 8012262:	f240 427c 	movw	r2, #1148	; 0x47c
 8012266:	49a2      	ldr	r1, [pc, #648]	; (80124f0 <tcp_receive+0x2b8>)
 8012268:	48a0      	ldr	r0, [pc, #640]	; (80124ec <tcp_receive+0x2b4>)
 801226a:	f008 fd67 	bl	801ad3c <iprintf>

  if (flags & TCP_ACK) {
 801226e:	4ba1      	ldr	r3, [pc, #644]	; (80124f4 <tcp_receive+0x2bc>)
 8012270:	781b      	ldrb	r3, [r3, #0]
 8012272:	f003 0310 	and.w	r3, r3, #16
 8012276:	2b00      	cmp	r3, #0
 8012278:	f000 8263 	beq.w	8012742 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012282:	461a      	mov	r2, r3
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012288:	4413      	add	r3, r2
 801228a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012290:	4b99      	ldr	r3, [pc, #612]	; (80124f8 <tcp_receive+0x2c0>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	1ad3      	subs	r3, r2, r3
 8012296:	2b00      	cmp	r3, #0
 8012298:	db1b      	blt.n	80122d2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801229e:	4b96      	ldr	r3, [pc, #600]	; (80124f8 <tcp_receive+0x2c0>)
 80122a0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d106      	bne.n	80122b4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80122aa:	4b94      	ldr	r3, [pc, #592]	; (80124fc <tcp_receive+0x2c4>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	1ad3      	subs	r3, r2, r3
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	db0e      	blt.n	80122d2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80122b8:	4b90      	ldr	r3, [pc, #576]	; (80124fc <tcp_receive+0x2c4>)
 80122ba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80122bc:	429a      	cmp	r2, r3
 80122be:	d125      	bne.n	801230c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80122c0:	4b8f      	ldr	r3, [pc, #572]	; (8012500 <tcp_receive+0x2c8>)
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	89db      	ldrh	r3, [r3, #14]
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d91c      	bls.n	801230c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80122d2:	4b8b      	ldr	r3, [pc, #556]	; (8012500 <tcp_receive+0x2c8>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	89db      	ldrh	r3, [r3, #14]
 80122d8:	b29a      	uxth	r2, r3
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80122ec:	429a      	cmp	r2, r3
 80122ee:	d205      	bcs.n	80122fc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80122fc:	4b7e      	ldr	r3, [pc, #504]	; (80124f8 <tcp_receive+0x2c0>)
 80122fe:	681a      	ldr	r2, [r3, #0]
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012304:	4b7d      	ldr	r3, [pc, #500]	; (80124fc <tcp_receive+0x2c4>)
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801230c:	4b7b      	ldr	r3, [pc, #492]	; (80124fc <tcp_receive+0x2c4>)
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012314:	1ad3      	subs	r3, r2, r3
 8012316:	2b00      	cmp	r3, #0
 8012318:	dc58      	bgt.n	80123cc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801231a:	4b7a      	ldr	r3, [pc, #488]	; (8012504 <tcp_receive+0x2cc>)
 801231c:	881b      	ldrh	r3, [r3, #0]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d14b      	bne.n	80123ba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801232c:	4413      	add	r3, r2
 801232e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012330:	429a      	cmp	r2, r3
 8012332:	d142      	bne.n	80123ba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801233a:	2b00      	cmp	r3, #0
 801233c:	db3d      	blt.n	80123ba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012342:	4b6e      	ldr	r3, [pc, #440]	; (80124fc <tcp_receive+0x2c4>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	429a      	cmp	r2, r3
 8012348:	d137      	bne.n	80123ba <tcp_receive+0x182>
              found_dupack = 1;
 801234a:	2301      	movs	r3, #1
 801234c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012354:	2bff      	cmp	r3, #255	; 0xff
 8012356:	d007      	beq.n	8012368 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801235e:	3301      	adds	r3, #1
 8012360:	b2da      	uxtb	r2, r3
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801236e:	2b03      	cmp	r3, #3
 8012370:	d91b      	bls.n	80123aa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801237c:	4413      	add	r3, r2
 801237e:	b29a      	uxth	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012386:	429a      	cmp	r2, r3
 8012388:	d30a      	bcc.n	80123a0 <tcp_receive+0x168>
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012394:	4413      	add	r3, r2
 8012396:	b29a      	uxth	r2, r3
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801239e:	e004      	b.n	80123aa <tcp_receive+0x172>
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80123b0:	2b02      	cmp	r3, #2
 80123b2:	d902      	bls.n	80123ba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f002 fb41 	bl	8014a3c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80123ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123bc:	2b00      	cmp	r3, #0
 80123be:	f040 8160 	bne.w	8012682 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2200      	movs	r2, #0
 80123c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80123ca:	e15a      	b.n	8012682 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80123cc:	4b4b      	ldr	r3, [pc, #300]	; (80124fc <tcp_receive+0x2c4>)
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123d4:	1ad3      	subs	r3, r2, r3
 80123d6:	3b01      	subs	r3, #1
 80123d8:	2b00      	cmp	r3, #0
 80123da:	f2c0 814d 	blt.w	8012678 <tcp_receive+0x440>
 80123de:	4b47      	ldr	r3, [pc, #284]	; (80124fc <tcp_receive+0x2c4>)
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123e6:	1ad3      	subs	r3, r2, r3
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	f300 8145 	bgt.w	8012678 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	8b5b      	ldrh	r3, [r3, #26]
 80123f2:	f003 0304 	and.w	r3, r3, #4
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d010      	beq.n	801241c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	8b5b      	ldrh	r3, [r3, #26]
 80123fe:	f023 0304 	bic.w	r3, r3, #4
 8012402:	b29a      	uxth	r2, r3
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2200      	movs	r2, #0
 8012420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801242a:	10db      	asrs	r3, r3, #3
 801242c:	b21b      	sxth	r3, r3
 801242e:	b29a      	uxth	r2, r3
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012436:	b29b      	uxth	r3, r3
 8012438:	4413      	add	r3, r2
 801243a:	b29b      	uxth	r3, r3
 801243c:	b21a      	sxth	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012444:	4b2d      	ldr	r3, [pc, #180]	; (80124fc <tcp_receive+0x2c4>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	b29a      	uxth	r2, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801244e:	b29b      	uxth	r3, r3
 8012450:	1ad3      	subs	r3, r2, r3
 8012452:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2200      	movs	r2, #0
 8012458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801245c:	4b27      	ldr	r3, [pc, #156]	; (80124fc <tcp_receive+0x2c4>)
 801245e:	681a      	ldr	r2, [r3, #0]
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	7d1b      	ldrb	r3, [r3, #20]
 8012468:	2b03      	cmp	r3, #3
 801246a:	f240 8096 	bls.w	801259a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801247a:	429a      	cmp	r2, r3
 801247c:	d244      	bcs.n	8012508 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	8b5b      	ldrh	r3, [r3, #26]
 8012482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012486:	2b00      	cmp	r3, #0
 8012488:	d001      	beq.n	801248e <tcp_receive+0x256>
 801248a:	2301      	movs	r3, #1
 801248c:	e000      	b.n	8012490 <tcp_receive+0x258>
 801248e:	2302      	movs	r3, #2
 8012490:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012494:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012498:	b29a      	uxth	r2, r3
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801249e:	fb12 f303 	smulbb	r3, r2, r3
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80124a6:	4293      	cmp	r3, r2
 80124a8:	bf28      	it	cs
 80124aa:	4613      	movcs	r3, r2
 80124ac:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80124b6:	4413      	add	r3, r2
 80124b8:	b29a      	uxth	r2, r3
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d309      	bcc.n	80124d8 <tcp_receive+0x2a0>
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80124ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80124cc:	4413      	add	r3, r2
 80124ce:	b29a      	uxth	r2, r3
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80124d6:	e060      	b.n	801259a <tcp_receive+0x362>
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80124e2:	e05a      	b.n	801259a <tcp_receive+0x362>
 80124e4:	0801db20 	.word	0x0801db20
 80124e8:	0801de50 	.word	0x0801de50
 80124ec:	0801db6c 	.word	0x0801db6c
 80124f0:	0801de6c 	.word	0x0801de6c
 80124f4:	20011608 	.word	0x20011608
 80124f8:	200115fc 	.word	0x200115fc
 80124fc:	20011600 	.word	0x20011600
 8012500:	200115ec 	.word	0x200115ec
 8012504:	20011606 	.word	0x20011606
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801250e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012510:	4413      	add	r3, r2
 8012512:	b29a      	uxth	r2, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801251a:	429a      	cmp	r2, r3
 801251c:	d309      	bcc.n	8012532 <tcp_receive+0x2fa>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012524:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012526:	4413      	add	r3, r2
 8012528:	b29a      	uxth	r2, r3
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012530:	e004      	b.n	801253c <tcp_receive+0x304>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012548:	429a      	cmp	r2, r3
 801254a:	d326      	bcc.n	801259a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012558:	1ad3      	subs	r3, r2, r3
 801255a:	b29a      	uxth	r2, r3
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801256c:	4413      	add	r3, r2
 801256e:	b29a      	uxth	r2, r3
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012576:	429a      	cmp	r2, r3
 8012578:	d30a      	bcc.n	8012590 <tcp_receive+0x358>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012584:	4413      	add	r3, r2
 8012586:	b29a      	uxth	r2, r3
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801258e:	e004      	b.n	801259a <tcp_receive+0x362>
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012596:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125a2:	4a98      	ldr	r2, [pc, #608]	; (8012804 <tcp_receive+0x5cc>)
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7ff fdcb 	bl	8012140 <tcp_free_acked_segments>
 80125aa:	4602      	mov	r2, r0
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125b8:	4a93      	ldr	r2, [pc, #588]	; (8012808 <tcp_receive+0x5d0>)
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f7ff fdc0 	bl	8012140 <tcp_free_acked_segments>
 80125c0:	4602      	mov	r2, r0
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d104      	bne.n	80125d8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125d4:	861a      	strh	r2, [r3, #48]	; 0x30
 80125d6:	e002      	b.n	80125de <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2200      	movs	r2, #0
 80125e2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d103      	bne.n	80125f4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80125fa:	4b84      	ldr	r3, [pc, #528]	; (801280c <tcp_receive+0x5d4>)
 80125fc:	881b      	ldrh	r3, [r3, #0]
 80125fe:	4413      	add	r3, r2
 8012600:	b29a      	uxth	r2, r3
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	8b5b      	ldrh	r3, [r3, #26]
 801260c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012610:	2b00      	cmp	r3, #0
 8012612:	d035      	beq.n	8012680 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012618:	2b00      	cmp	r3, #0
 801261a:	d118      	bne.n	801264e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00c      	beq.n	801263e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801262c:	68db      	ldr	r3, [r3, #12]
 801262e:	685b      	ldr	r3, [r3, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	f7fa fe1a 	bl	800d26a <lwip_htonl>
 8012636:	4603      	mov	r3, r0
 8012638:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801263a:	2b00      	cmp	r3, #0
 801263c:	dc20      	bgt.n	8012680 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	8b5b      	ldrh	r3, [r3, #26]
 8012642:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012646:	b29a      	uxth	r2, r3
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801264c:	e018      	b.n	8012680 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	4618      	mov	r0, r3
 801265c:	f7fa fe05 	bl	800d26a <lwip_htonl>
 8012660:	4603      	mov	r3, r0
 8012662:	1ae3      	subs	r3, r4, r3
 8012664:	2b00      	cmp	r3, #0
 8012666:	dc0b      	bgt.n	8012680 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	8b5b      	ldrh	r3, [r3, #26]
 801266c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012670:	b29a      	uxth	r2, r3
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012676:	e003      	b.n	8012680 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f002 fbcd 	bl	8014e18 <tcp_send_empty_ack>
 801267e:	e000      	b.n	8012682 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012680:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012686:	2b00      	cmp	r3, #0
 8012688:	d05b      	beq.n	8012742 <tcp_receive+0x50a>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801268e:	4b60      	ldr	r3, [pc, #384]	; (8012810 <tcp_receive+0x5d8>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	2b00      	cmp	r3, #0
 8012696:	da54      	bge.n	8012742 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012698:	4b5e      	ldr	r3, [pc, #376]	; (8012814 <tcp_receive+0x5dc>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	b29a      	uxth	r2, r3
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	1ad3      	subs	r3, r2, r3
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80126ac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80126b6:	10db      	asrs	r3, r3, #3
 80126b8:	b21b      	sxth	r3, r3
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	1ad3      	subs	r3, r2, r3
 80126be:	b29b      	uxth	r3, r3
 80126c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80126ca:	b29a      	uxth	r2, r3
 80126cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80126d0:	4413      	add	r3, r2
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	b21a      	sxth	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80126da:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80126de:	2b00      	cmp	r3, #0
 80126e0:	da05      	bge.n	80126ee <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80126e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80126e6:	425b      	negs	r3, r3
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80126ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80126f8:	109b      	asrs	r3, r3, #2
 80126fa:	b21b      	sxth	r3, r3
 80126fc:	b29b      	uxth	r3, r3
 80126fe:	1ad3      	subs	r3, r2, r3
 8012700:	b29b      	uxth	r3, r3
 8012702:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801270c:	b29a      	uxth	r2, r3
 801270e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012712:	4413      	add	r3, r2
 8012714:	b29b      	uxth	r3, r3
 8012716:	b21a      	sxth	r2, r3
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012722:	10db      	asrs	r3, r3, #3
 8012724:	b21b      	sxth	r3, r3
 8012726:	b29a      	uxth	r2, r3
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801272e:	b29b      	uxth	r3, r3
 8012730:	4413      	add	r3, r2
 8012732:	b29b      	uxth	r3, r3
 8012734:	b21a      	sxth	r2, r3
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2200      	movs	r2, #0
 8012740:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012742:	4b35      	ldr	r3, [pc, #212]	; (8012818 <tcp_receive+0x5e0>)
 8012744:	881b      	ldrh	r3, [r3, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	f000 84e1 	beq.w	801310e <tcp_receive+0xed6>
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	7d1b      	ldrb	r3, [r3, #20]
 8012750:	2b06      	cmp	r3, #6
 8012752:	f200 84dc 	bhi.w	801310e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801275a:	4b30      	ldr	r3, [pc, #192]	; (801281c <tcp_receive+0x5e4>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	3b01      	subs	r3, #1
 8012762:	2b00      	cmp	r3, #0
 8012764:	f2c0 808e 	blt.w	8012884 <tcp_receive+0x64c>
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801276c:	4b2a      	ldr	r3, [pc, #168]	; (8012818 <tcp_receive+0x5e0>)
 801276e:	881b      	ldrh	r3, [r3, #0]
 8012770:	4619      	mov	r1, r3
 8012772:	4b2a      	ldr	r3, [pc, #168]	; (801281c <tcp_receive+0x5e4>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	440b      	add	r3, r1
 8012778:	1ad3      	subs	r3, r2, r3
 801277a:	3301      	adds	r3, #1
 801277c:	2b00      	cmp	r3, #0
 801277e:	f300 8081 	bgt.w	8012884 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012782:	4b27      	ldr	r3, [pc, #156]	; (8012820 <tcp_receive+0x5e8>)
 8012784:	685b      	ldr	r3, [r3, #4]
 8012786:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801278c:	4b23      	ldr	r3, [pc, #140]	; (801281c <tcp_receive+0x5e4>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	1ad3      	subs	r3, r2, r3
 8012792:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012794:	4b22      	ldr	r3, [pc, #136]	; (8012820 <tcp_receive+0x5e8>)
 8012796:	685b      	ldr	r3, [r3, #4]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d106      	bne.n	80127aa <tcp_receive+0x572>
 801279c:	4b21      	ldr	r3, [pc, #132]	; (8012824 <tcp_receive+0x5ec>)
 801279e:	f240 5294 	movw	r2, #1428	; 0x594
 80127a2:	4921      	ldr	r1, [pc, #132]	; (8012828 <tcp_receive+0x5f0>)
 80127a4:	4821      	ldr	r0, [pc, #132]	; (801282c <tcp_receive+0x5f4>)
 80127a6:	f008 fac9 	bl	801ad3c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80127aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80127b0:	4293      	cmp	r3, r2
 80127b2:	d906      	bls.n	80127c2 <tcp_receive+0x58a>
 80127b4:	4b1b      	ldr	r3, [pc, #108]	; (8012824 <tcp_receive+0x5ec>)
 80127b6:	f240 5295 	movw	r2, #1429	; 0x595
 80127ba:	491d      	ldr	r1, [pc, #116]	; (8012830 <tcp_receive+0x5f8>)
 80127bc:	481b      	ldr	r0, [pc, #108]	; (801282c <tcp_receive+0x5f4>)
 80127be:	f008 fabd 	bl	801ad3c <iprintf>
      off = (u16_t)off32;
 80127c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80127c8:	4b15      	ldr	r3, [pc, #84]	; (8012820 <tcp_receive+0x5e8>)
 80127ca:	685b      	ldr	r3, [r3, #4]
 80127cc:	891b      	ldrh	r3, [r3, #8]
 80127ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d906      	bls.n	80127e4 <tcp_receive+0x5ac>
 80127d6:	4b13      	ldr	r3, [pc, #76]	; (8012824 <tcp_receive+0x5ec>)
 80127d8:	f240 5297 	movw	r2, #1431	; 0x597
 80127dc:	4915      	ldr	r1, [pc, #84]	; (8012834 <tcp_receive+0x5fc>)
 80127de:	4813      	ldr	r0, [pc, #76]	; (801282c <tcp_receive+0x5f4>)
 80127e0:	f008 faac 	bl	801ad3c <iprintf>
      inseg.len -= off;
 80127e4:	4b0e      	ldr	r3, [pc, #56]	; (8012820 <tcp_receive+0x5e8>)
 80127e6:	891a      	ldrh	r2, [r3, #8]
 80127e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127ec:	1ad3      	subs	r3, r2, r3
 80127ee:	b29a      	uxth	r2, r3
 80127f0:	4b0b      	ldr	r3, [pc, #44]	; (8012820 <tcp_receive+0x5e8>)
 80127f2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80127f4:	4b0a      	ldr	r3, [pc, #40]	; (8012820 <tcp_receive+0x5e8>)
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	891a      	ldrh	r2, [r3, #8]
 80127fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80127fe:	1ad3      	subs	r3, r2, r3
 8012800:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012802:	e029      	b.n	8012858 <tcp_receive+0x620>
 8012804:	0801de88 	.word	0x0801de88
 8012808:	0801de90 	.word	0x0801de90
 801280c:	20011604 	.word	0x20011604
 8012810:	20011600 	.word	0x20011600
 8012814:	20018564 	.word	0x20018564
 8012818:	20011606 	.word	0x20011606
 801281c:	200115fc 	.word	0x200115fc
 8012820:	200115dc 	.word	0x200115dc
 8012824:	0801db20 	.word	0x0801db20
 8012828:	0801de98 	.word	0x0801de98
 801282c:	0801db6c 	.word	0x0801db6c
 8012830:	0801dea8 	.word	0x0801dea8
 8012834:	0801deb8 	.word	0x0801deb8
        off -= p->len;
 8012838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801283a:	895b      	ldrh	r3, [r3, #10]
 801283c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012840:	1ad3      	subs	r3, r2, r3
 8012842:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012848:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801284a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801284c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801284e:	2200      	movs	r2, #0
 8012850:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801285a:	895b      	ldrh	r3, [r3, #10]
 801285c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012860:	429a      	cmp	r2, r3
 8012862:	d8e9      	bhi.n	8012838 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012864:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012868:	4619      	mov	r1, r3
 801286a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801286c:	f7fc f846 	bl	800e8fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012874:	4a91      	ldr	r2, [pc, #580]	; (8012abc <tcp_receive+0x884>)
 8012876:	6013      	str	r3, [r2, #0]
 8012878:	4b91      	ldr	r3, [pc, #580]	; (8012ac0 <tcp_receive+0x888>)
 801287a:	68db      	ldr	r3, [r3, #12]
 801287c:	4a8f      	ldr	r2, [pc, #572]	; (8012abc <tcp_receive+0x884>)
 801287e:	6812      	ldr	r2, [r2, #0]
 8012880:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012882:	e00d      	b.n	80128a0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012884:	4b8d      	ldr	r3, [pc, #564]	; (8012abc <tcp_receive+0x884>)
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801288c:	1ad3      	subs	r3, r2, r3
 801288e:	2b00      	cmp	r3, #0
 8012890:	da06      	bge.n	80128a0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	8b5b      	ldrh	r3, [r3, #26]
 8012896:	f043 0302 	orr.w	r3, r3, #2
 801289a:	b29a      	uxth	r2, r3
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80128a0:	4b86      	ldr	r3, [pc, #536]	; (8012abc <tcp_receive+0x884>)
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a8:	1ad3      	subs	r3, r2, r3
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	f2c0 842a 	blt.w	8013104 <tcp_receive+0xecc>
 80128b0:	4b82      	ldr	r3, [pc, #520]	; (8012abc <tcp_receive+0x884>)
 80128b2:	681a      	ldr	r2, [r3, #0]
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b8:	6879      	ldr	r1, [r7, #4]
 80128ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80128bc:	440b      	add	r3, r1
 80128be:	1ad3      	subs	r3, r2, r3
 80128c0:	3301      	adds	r3, #1
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	f300 841e 	bgt.w	8013104 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128cc:	4b7b      	ldr	r3, [pc, #492]	; (8012abc <tcp_receive+0x884>)
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	f040 829a 	bne.w	8012e0a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80128d6:	4b7a      	ldr	r3, [pc, #488]	; (8012ac0 <tcp_receive+0x888>)
 80128d8:	891c      	ldrh	r4, [r3, #8]
 80128da:	4b79      	ldr	r3, [pc, #484]	; (8012ac0 <tcp_receive+0x888>)
 80128dc:	68db      	ldr	r3, [r3, #12]
 80128de:	899b      	ldrh	r3, [r3, #12]
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7fa fcac 	bl	800d240 <lwip_htons>
 80128e8:	4603      	mov	r3, r0
 80128ea:	b2db      	uxtb	r3, r3
 80128ec:	f003 0303 	and.w	r3, r3, #3
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d001      	beq.n	80128f8 <tcp_receive+0x6c0>
 80128f4:	2301      	movs	r3, #1
 80128f6:	e000      	b.n	80128fa <tcp_receive+0x6c2>
 80128f8:	2300      	movs	r3, #0
 80128fa:	4423      	add	r3, r4
 80128fc:	b29a      	uxth	r2, r3
 80128fe:	4b71      	ldr	r3, [pc, #452]	; (8012ac4 <tcp_receive+0x88c>)
 8012900:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012906:	4b6f      	ldr	r3, [pc, #444]	; (8012ac4 <tcp_receive+0x88c>)
 8012908:	881b      	ldrh	r3, [r3, #0]
 801290a:	429a      	cmp	r2, r3
 801290c:	d275      	bcs.n	80129fa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801290e:	4b6c      	ldr	r3, [pc, #432]	; (8012ac0 <tcp_receive+0x888>)
 8012910:	68db      	ldr	r3, [r3, #12]
 8012912:	899b      	ldrh	r3, [r3, #12]
 8012914:	b29b      	uxth	r3, r3
 8012916:	4618      	mov	r0, r3
 8012918:	f7fa fc92 	bl	800d240 <lwip_htons>
 801291c:	4603      	mov	r3, r0
 801291e:	b2db      	uxtb	r3, r3
 8012920:	f003 0301 	and.w	r3, r3, #1
 8012924:	2b00      	cmp	r3, #0
 8012926:	d01f      	beq.n	8012968 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012928:	4b65      	ldr	r3, [pc, #404]	; (8012ac0 <tcp_receive+0x888>)
 801292a:	68db      	ldr	r3, [r3, #12]
 801292c:	899b      	ldrh	r3, [r3, #12]
 801292e:	b29b      	uxth	r3, r3
 8012930:	b21b      	sxth	r3, r3
 8012932:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012936:	b21c      	sxth	r4, r3
 8012938:	4b61      	ldr	r3, [pc, #388]	; (8012ac0 <tcp_receive+0x888>)
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	899b      	ldrh	r3, [r3, #12]
 801293e:	b29b      	uxth	r3, r3
 8012940:	4618      	mov	r0, r3
 8012942:	f7fa fc7d 	bl	800d240 <lwip_htons>
 8012946:	4603      	mov	r3, r0
 8012948:	b2db      	uxtb	r3, r3
 801294a:	b29b      	uxth	r3, r3
 801294c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012950:	b29b      	uxth	r3, r3
 8012952:	4618      	mov	r0, r3
 8012954:	f7fa fc74 	bl	800d240 <lwip_htons>
 8012958:	4603      	mov	r3, r0
 801295a:	b21b      	sxth	r3, r3
 801295c:	4323      	orrs	r3, r4
 801295e:	b21a      	sxth	r2, r3
 8012960:	4b57      	ldr	r3, [pc, #348]	; (8012ac0 <tcp_receive+0x888>)
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	b292      	uxth	r2, r2
 8012966:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801296c:	4b54      	ldr	r3, [pc, #336]	; (8012ac0 <tcp_receive+0x888>)
 801296e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012970:	4b53      	ldr	r3, [pc, #332]	; (8012ac0 <tcp_receive+0x888>)
 8012972:	68db      	ldr	r3, [r3, #12]
 8012974:	899b      	ldrh	r3, [r3, #12]
 8012976:	b29b      	uxth	r3, r3
 8012978:	4618      	mov	r0, r3
 801297a:	f7fa fc61 	bl	800d240 <lwip_htons>
 801297e:	4603      	mov	r3, r0
 8012980:	b2db      	uxtb	r3, r3
 8012982:	f003 0302 	and.w	r3, r3, #2
 8012986:	2b00      	cmp	r3, #0
 8012988:	d005      	beq.n	8012996 <tcp_receive+0x75e>
            inseg.len -= 1;
 801298a:	4b4d      	ldr	r3, [pc, #308]	; (8012ac0 <tcp_receive+0x888>)
 801298c:	891b      	ldrh	r3, [r3, #8]
 801298e:	3b01      	subs	r3, #1
 8012990:	b29a      	uxth	r2, r3
 8012992:	4b4b      	ldr	r3, [pc, #300]	; (8012ac0 <tcp_receive+0x888>)
 8012994:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012996:	4b4a      	ldr	r3, [pc, #296]	; (8012ac0 <tcp_receive+0x888>)
 8012998:	685b      	ldr	r3, [r3, #4]
 801299a:	4a49      	ldr	r2, [pc, #292]	; (8012ac0 <tcp_receive+0x888>)
 801299c:	8912      	ldrh	r2, [r2, #8]
 801299e:	4611      	mov	r1, r2
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7fb feab 	bl	800e6fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80129a6:	4b46      	ldr	r3, [pc, #280]	; (8012ac0 <tcp_receive+0x888>)
 80129a8:	891c      	ldrh	r4, [r3, #8]
 80129aa:	4b45      	ldr	r3, [pc, #276]	; (8012ac0 <tcp_receive+0x888>)
 80129ac:	68db      	ldr	r3, [r3, #12]
 80129ae:	899b      	ldrh	r3, [r3, #12]
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7fa fc44 	bl	800d240 <lwip_htons>
 80129b8:	4603      	mov	r3, r0
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	f003 0303 	and.w	r3, r3, #3
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d001      	beq.n	80129c8 <tcp_receive+0x790>
 80129c4:	2301      	movs	r3, #1
 80129c6:	e000      	b.n	80129ca <tcp_receive+0x792>
 80129c8:	2300      	movs	r3, #0
 80129ca:	4423      	add	r3, r4
 80129cc:	b29a      	uxth	r2, r3
 80129ce:	4b3d      	ldr	r3, [pc, #244]	; (8012ac4 <tcp_receive+0x88c>)
 80129d0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80129d2:	4b3c      	ldr	r3, [pc, #240]	; (8012ac4 <tcp_receive+0x88c>)
 80129d4:	881b      	ldrh	r3, [r3, #0]
 80129d6:	461a      	mov	r2, r3
 80129d8:	4b38      	ldr	r3, [pc, #224]	; (8012abc <tcp_receive+0x884>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	441a      	add	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129e2:	6879      	ldr	r1, [r7, #4]
 80129e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80129e6:	440b      	add	r3, r1
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d006      	beq.n	80129fa <tcp_receive+0x7c2>
 80129ec:	4b36      	ldr	r3, [pc, #216]	; (8012ac8 <tcp_receive+0x890>)
 80129ee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80129f2:	4936      	ldr	r1, [pc, #216]	; (8012acc <tcp_receive+0x894>)
 80129f4:	4836      	ldr	r0, [pc, #216]	; (8012ad0 <tcp_receive+0x898>)
 80129f6:	f008 f9a1 	bl	801ad3c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	f000 80e7 	beq.w	8012bd2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a04:	4b2e      	ldr	r3, [pc, #184]	; (8012ac0 <tcp_receive+0x888>)
 8012a06:	68db      	ldr	r3, [r3, #12]
 8012a08:	899b      	ldrh	r3, [r3, #12]
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7fa fc17 	bl	800d240 <lwip_htons>
 8012a12:	4603      	mov	r3, r0
 8012a14:	b2db      	uxtb	r3, r3
 8012a16:	f003 0301 	and.w	r3, r3, #1
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d010      	beq.n	8012a40 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012a1e:	e00a      	b.n	8012a36 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a24:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012a30:	68f8      	ldr	r0, [r7, #12]
 8012a32:	f7fd fcc8 	bl	80103c6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d1f0      	bne.n	8012a20 <tcp_receive+0x7e8>
 8012a3e:	e0c8      	b.n	8012bd2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a44:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012a46:	e052      	b.n	8012aee <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a4a:	68db      	ldr	r3, [r3, #12]
 8012a4c:	899b      	ldrh	r3, [r3, #12]
 8012a4e:	b29b      	uxth	r3, r3
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7fa fbf5 	bl	800d240 <lwip_htons>
 8012a56:	4603      	mov	r3, r0
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	f003 0301 	and.w	r3, r3, #1
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d03d      	beq.n	8012ade <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012a62:	4b17      	ldr	r3, [pc, #92]	; (8012ac0 <tcp_receive+0x888>)
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	899b      	ldrh	r3, [r3, #12]
 8012a68:	b29b      	uxth	r3, r3
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7fa fbe8 	bl	800d240 <lwip_htons>
 8012a70:	4603      	mov	r3, r0
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d130      	bne.n	8012ade <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012a7c:	4b10      	ldr	r3, [pc, #64]	; (8012ac0 <tcp_receive+0x888>)
 8012a7e:	68db      	ldr	r3, [r3, #12]
 8012a80:	899b      	ldrh	r3, [r3, #12]
 8012a82:	b29c      	uxth	r4, r3
 8012a84:	2001      	movs	r0, #1
 8012a86:	f7fa fbdb 	bl	800d240 <lwip_htons>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	4b0c      	ldr	r3, [pc, #48]	; (8012ac0 <tcp_receive+0x888>)
 8012a90:	68db      	ldr	r3, [r3, #12]
 8012a92:	4322      	orrs	r2, r4
 8012a94:	b292      	uxth	r2, r2
 8012a96:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012a98:	4b09      	ldr	r3, [pc, #36]	; (8012ac0 <tcp_receive+0x888>)
 8012a9a:	891c      	ldrh	r4, [r3, #8]
 8012a9c:	4b08      	ldr	r3, [pc, #32]	; (8012ac0 <tcp_receive+0x888>)
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	899b      	ldrh	r3, [r3, #12]
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7fa fbcb 	bl	800d240 <lwip_htons>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	f003 0303 	and.w	r3, r3, #3
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d00e      	beq.n	8012ad4 <tcp_receive+0x89c>
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	e00d      	b.n	8012ad6 <tcp_receive+0x89e>
 8012aba:	bf00      	nop
 8012abc:	200115fc 	.word	0x200115fc
 8012ac0:	200115dc 	.word	0x200115dc
 8012ac4:	20011606 	.word	0x20011606
 8012ac8:	0801db20 	.word	0x0801db20
 8012acc:	0801dec8 	.word	0x0801dec8
 8012ad0:	0801db6c 	.word	0x0801db6c
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	4423      	add	r3, r4
 8012ad8:	b29a      	uxth	r2, r3
 8012ada:	4b98      	ldr	r3, [pc, #608]	; (8012d3c <tcp_receive+0xb04>)
 8012adc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ae0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012ae8:	6938      	ldr	r0, [r7, #16]
 8012aea:	f7fd fc6c 	bl	80103c6 <tcp_seg_free>
            while (next &&
 8012aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d00e      	beq.n	8012b12 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012af4:	4b91      	ldr	r3, [pc, #580]	; (8012d3c <tcp_receive+0xb04>)
 8012af6:	881b      	ldrh	r3, [r3, #0]
 8012af8:	461a      	mov	r2, r3
 8012afa:	4b91      	ldr	r3, [pc, #580]	; (8012d40 <tcp_receive+0xb08>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	441a      	add	r2, r3
 8012b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b02:	68db      	ldr	r3, [r3, #12]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b08:	8909      	ldrh	r1, [r1, #8]
 8012b0a:	440b      	add	r3, r1
 8012b0c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	da9a      	bge.n	8012a48 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d059      	beq.n	8012bcc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012b18:	4b88      	ldr	r3, [pc, #544]	; (8012d3c <tcp_receive+0xb04>)
 8012b1a:	881b      	ldrh	r3, [r3, #0]
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	4b88      	ldr	r3, [pc, #544]	; (8012d40 <tcp_receive+0xb08>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	441a      	add	r2, r3
 8012b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b26:	68db      	ldr	r3, [r3, #12]
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	dd4d      	ble.n	8012bcc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	685b      	ldr	r3, [r3, #4]
 8012b36:	b29a      	uxth	r2, r3
 8012b38:	4b81      	ldr	r3, [pc, #516]	; (8012d40 <tcp_receive+0xb08>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	1ad3      	subs	r3, r2, r3
 8012b40:	b29a      	uxth	r2, r3
 8012b42:	4b80      	ldr	r3, [pc, #512]	; (8012d44 <tcp_receive+0xb0c>)
 8012b44:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012b46:	4b7f      	ldr	r3, [pc, #508]	; (8012d44 <tcp_receive+0xb0c>)
 8012b48:	68db      	ldr	r3, [r3, #12]
 8012b4a:	899b      	ldrh	r3, [r3, #12]
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7fa fb76 	bl	800d240 <lwip_htons>
 8012b54:	4603      	mov	r3, r0
 8012b56:	b2db      	uxtb	r3, r3
 8012b58:	f003 0302 	and.w	r3, r3, #2
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d005      	beq.n	8012b6c <tcp_receive+0x934>
                inseg.len -= 1;
 8012b60:	4b78      	ldr	r3, [pc, #480]	; (8012d44 <tcp_receive+0xb0c>)
 8012b62:	891b      	ldrh	r3, [r3, #8]
 8012b64:	3b01      	subs	r3, #1
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	4b76      	ldr	r3, [pc, #472]	; (8012d44 <tcp_receive+0xb0c>)
 8012b6a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012b6c:	4b75      	ldr	r3, [pc, #468]	; (8012d44 <tcp_receive+0xb0c>)
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	4a74      	ldr	r2, [pc, #464]	; (8012d44 <tcp_receive+0xb0c>)
 8012b72:	8912      	ldrh	r2, [r2, #8]
 8012b74:	4611      	mov	r1, r2
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7fb fdc0 	bl	800e6fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012b7c:	4b71      	ldr	r3, [pc, #452]	; (8012d44 <tcp_receive+0xb0c>)
 8012b7e:	891c      	ldrh	r4, [r3, #8]
 8012b80:	4b70      	ldr	r3, [pc, #448]	; (8012d44 <tcp_receive+0xb0c>)
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	899b      	ldrh	r3, [r3, #12]
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7fa fb59 	bl	800d240 <lwip_htons>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	f003 0303 	and.w	r3, r3, #3
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d001      	beq.n	8012b9e <tcp_receive+0x966>
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	e000      	b.n	8012ba0 <tcp_receive+0x968>
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	4423      	add	r3, r4
 8012ba2:	b29a      	uxth	r2, r3
 8012ba4:	4b65      	ldr	r3, [pc, #404]	; (8012d3c <tcp_receive+0xb04>)
 8012ba6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012ba8:	4b64      	ldr	r3, [pc, #400]	; (8012d3c <tcp_receive+0xb04>)
 8012baa:	881b      	ldrh	r3, [r3, #0]
 8012bac:	461a      	mov	r2, r3
 8012bae:	4b64      	ldr	r3, [pc, #400]	; (8012d40 <tcp_receive+0xb08>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	441a      	add	r2, r3
 8012bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d006      	beq.n	8012bcc <tcp_receive+0x994>
 8012bbe:	4b62      	ldr	r3, [pc, #392]	; (8012d48 <tcp_receive+0xb10>)
 8012bc0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012bc4:	4961      	ldr	r1, [pc, #388]	; (8012d4c <tcp_receive+0xb14>)
 8012bc6:	4862      	ldr	r0, [pc, #392]	; (8012d50 <tcp_receive+0xb18>)
 8012bc8:	f008 f8b8 	bl	801ad3c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bd0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012bd2:	4b5a      	ldr	r3, [pc, #360]	; (8012d3c <tcp_receive+0xb04>)
 8012bd4:	881b      	ldrh	r3, [r3, #0]
 8012bd6:	461a      	mov	r2, r3
 8012bd8:	4b59      	ldr	r3, [pc, #356]	; (8012d40 <tcp_receive+0xb08>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	441a      	add	r2, r3
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012be6:	4b55      	ldr	r3, [pc, #340]	; (8012d3c <tcp_receive+0xb04>)
 8012be8:	881b      	ldrh	r3, [r3, #0]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d206      	bcs.n	8012bfc <tcp_receive+0x9c4>
 8012bee:	4b56      	ldr	r3, [pc, #344]	; (8012d48 <tcp_receive+0xb10>)
 8012bf0:	f240 6207 	movw	r2, #1543	; 0x607
 8012bf4:	4957      	ldr	r1, [pc, #348]	; (8012d54 <tcp_receive+0xb1c>)
 8012bf6:	4856      	ldr	r0, [pc, #344]	; (8012d50 <tcp_receive+0xb18>)
 8012bf8:	f008 f8a0 	bl	801ad3c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012c00:	4b4e      	ldr	r3, [pc, #312]	; (8012d3c <tcp_receive+0xb04>)
 8012c02:	881b      	ldrh	r3, [r3, #0]
 8012c04:	1ad3      	subs	r3, r2, r3
 8012c06:	b29a      	uxth	r2, r3
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f7fc feb5 	bl	800f97c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012c12:	4b4c      	ldr	r3, [pc, #304]	; (8012d44 <tcp_receive+0xb0c>)
 8012c14:	685b      	ldr	r3, [r3, #4]
 8012c16:	891b      	ldrh	r3, [r3, #8]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d006      	beq.n	8012c2a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012c1c:	4b49      	ldr	r3, [pc, #292]	; (8012d44 <tcp_receive+0xb0c>)
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	4a4d      	ldr	r2, [pc, #308]	; (8012d58 <tcp_receive+0xb20>)
 8012c22:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012c24:	4b47      	ldr	r3, [pc, #284]	; (8012d44 <tcp_receive+0xb0c>)
 8012c26:	2200      	movs	r2, #0
 8012c28:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012c2a:	4b46      	ldr	r3, [pc, #280]	; (8012d44 <tcp_receive+0xb0c>)
 8012c2c:	68db      	ldr	r3, [r3, #12]
 8012c2e:	899b      	ldrh	r3, [r3, #12]
 8012c30:	b29b      	uxth	r3, r3
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7fa fb04 	bl	800d240 <lwip_htons>
 8012c38:	4603      	mov	r3, r0
 8012c3a:	b2db      	uxtb	r3, r3
 8012c3c:	f003 0301 	and.w	r3, r3, #1
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f000 80b8 	beq.w	8012db6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012c46:	4b45      	ldr	r3, [pc, #276]	; (8012d5c <tcp_receive+0xb24>)
 8012c48:	781b      	ldrb	r3, [r3, #0]
 8012c4a:	f043 0320 	orr.w	r3, r3, #32
 8012c4e:	b2da      	uxtb	r2, r3
 8012c50:	4b42      	ldr	r3, [pc, #264]	; (8012d5c <tcp_receive+0xb24>)
 8012c52:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012c54:	e0af      	b.n	8012db6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c5a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	685b      	ldr	r3, [r3, #4]
 8012c64:	4a36      	ldr	r2, [pc, #216]	; (8012d40 <tcp_receive+0xb08>)
 8012c66:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	891b      	ldrh	r3, [r3, #8]
 8012c6c:	461c      	mov	r4, r3
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	899b      	ldrh	r3, [r3, #12]
 8012c74:	b29b      	uxth	r3, r3
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7fa fae2 	bl	800d240 <lwip_htons>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	b2db      	uxtb	r3, r3
 8012c80:	f003 0303 	and.w	r3, r3, #3
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d001      	beq.n	8012c8c <tcp_receive+0xa54>
 8012c88:	2301      	movs	r3, #1
 8012c8a:	e000      	b.n	8012c8e <tcp_receive+0xa56>
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	191a      	adds	r2, r3, r4
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c94:	441a      	add	r2, r3
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012c9e:	461c      	mov	r4, r3
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	891b      	ldrh	r3, [r3, #8]
 8012ca4:	461d      	mov	r5, r3
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	68db      	ldr	r3, [r3, #12]
 8012caa:	899b      	ldrh	r3, [r3, #12]
 8012cac:	b29b      	uxth	r3, r3
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7fa fac6 	bl	800d240 <lwip_htons>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	b2db      	uxtb	r3, r3
 8012cb8:	f003 0303 	and.w	r3, r3, #3
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d001      	beq.n	8012cc4 <tcp_receive+0xa8c>
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	e000      	b.n	8012cc6 <tcp_receive+0xa8e>
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	442b      	add	r3, r5
 8012cc8:	429c      	cmp	r4, r3
 8012cca:	d206      	bcs.n	8012cda <tcp_receive+0xaa2>
 8012ccc:	4b1e      	ldr	r3, [pc, #120]	; (8012d48 <tcp_receive+0xb10>)
 8012cce:	f240 622b 	movw	r2, #1579	; 0x62b
 8012cd2:	4923      	ldr	r1, [pc, #140]	; (8012d60 <tcp_receive+0xb28>)
 8012cd4:	481e      	ldr	r0, [pc, #120]	; (8012d50 <tcp_receive+0xb18>)
 8012cd6:	f008 f831 	bl	801ad3c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	891b      	ldrh	r3, [r3, #8]
 8012cde:	461c      	mov	r4, r3
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	68db      	ldr	r3, [r3, #12]
 8012ce4:	899b      	ldrh	r3, [r3, #12]
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f7fa faa9 	bl	800d240 <lwip_htons>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	b2db      	uxtb	r3, r3
 8012cf2:	f003 0303 	and.w	r3, r3, #3
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d001      	beq.n	8012cfe <tcp_receive+0xac6>
 8012cfa:	2301      	movs	r3, #1
 8012cfc:	e000      	b.n	8012d00 <tcp_receive+0xac8>
 8012cfe:	2300      	movs	r3, #0
 8012d00:	1919      	adds	r1, r3, r4
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012d06:	b28b      	uxth	r3, r1
 8012d08:	1ad3      	subs	r3, r2, r3
 8012d0a:	b29a      	uxth	r2, r3
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f7fc fe33 	bl	800f97c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	891b      	ldrh	r3, [r3, #8]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d028      	beq.n	8012d72 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012d20:	4b0d      	ldr	r3, [pc, #52]	; (8012d58 <tcp_receive+0xb20>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d01d      	beq.n	8012d64 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012d28:	4b0b      	ldr	r3, [pc, #44]	; (8012d58 <tcp_receive+0xb20>)
 8012d2a:	681a      	ldr	r2, [r3, #0]
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	4619      	mov	r1, r3
 8012d32:	4610      	mov	r0, r2
 8012d34:	f7fb ff68 	bl	800ec08 <pbuf_cat>
 8012d38:	e018      	b.n	8012d6c <tcp_receive+0xb34>
 8012d3a:	bf00      	nop
 8012d3c:	20011606 	.word	0x20011606
 8012d40:	200115fc 	.word	0x200115fc
 8012d44:	200115dc 	.word	0x200115dc
 8012d48:	0801db20 	.word	0x0801db20
 8012d4c:	0801df00 	.word	0x0801df00
 8012d50:	0801db6c 	.word	0x0801db6c
 8012d54:	0801df3c 	.word	0x0801df3c
 8012d58:	2001160c 	.word	0x2001160c
 8012d5c:	20011609 	.word	0x20011609
 8012d60:	0801df5c 	.word	0x0801df5c
            } else {
              recv_data = cseg->p;
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	4a70      	ldr	r2, [pc, #448]	; (8012f2c <tcp_receive+0xcf4>)
 8012d6a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	68db      	ldr	r3, [r3, #12]
 8012d76:	899b      	ldrh	r3, [r3, #12]
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7fa fa60 	bl	800d240 <lwip_htons>
 8012d80:	4603      	mov	r3, r0
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	f003 0301 	and.w	r3, r3, #1
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d00d      	beq.n	8012da8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012d8c:	4b68      	ldr	r3, [pc, #416]	; (8012f30 <tcp_receive+0xcf8>)
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	f043 0320 	orr.w	r3, r3, #32
 8012d94:	b2da      	uxtb	r2, r3
 8012d96:	4b66      	ldr	r3, [pc, #408]	; (8012f30 <tcp_receive+0xcf8>)
 8012d98:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	7d1b      	ldrb	r3, [r3, #20]
 8012d9e:	2b04      	cmp	r3, #4
 8012da0:	d102      	bne.n	8012da8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2207      	movs	r2, #7
 8012da6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	681a      	ldr	r2, [r3, #0]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012db0:	68b8      	ldr	r0, [r7, #8]
 8012db2:	f7fd fb08 	bl	80103c6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d008      	beq.n	8012dd0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	685a      	ldr	r2, [r3, #4]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	f43f af43 	beq.w	8012c56 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	8b5b      	ldrh	r3, [r3, #26]
 8012dd4:	f003 0301 	and.w	r3, r3, #1
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d00e      	beq.n	8012dfa <tcp_receive+0xbc2>
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	8b5b      	ldrh	r3, [r3, #26]
 8012de0:	f023 0301 	bic.w	r3, r3, #1
 8012de4:	b29a      	uxth	r2, r3
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	835a      	strh	r2, [r3, #26]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	8b5b      	ldrh	r3, [r3, #26]
 8012dee:	f043 0302 	orr.w	r3, r3, #2
 8012df2:	b29a      	uxth	r2, r3
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012df8:	e188      	b.n	801310c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	8b5b      	ldrh	r3, [r3, #26]
 8012dfe:	f043 0301 	orr.w	r3, r3, #1
 8012e02:	b29a      	uxth	r2, r3
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012e08:	e180      	b.n	801310c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d106      	bne.n	8012e20 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012e12:	4848      	ldr	r0, [pc, #288]	; (8012f34 <tcp_receive+0xcfc>)
 8012e14:	f7fd faf0 	bl	80103f8 <tcp_seg_copy>
 8012e18:	4602      	mov	r2, r0
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	675a      	str	r2, [r3, #116]	; 0x74
 8012e1e:	e16d      	b.n	80130fc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012e20:	2300      	movs	r3, #0
 8012e22:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e28:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e2a:	e157      	b.n	80130dc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2e:	68db      	ldr	r3, [r3, #12]
 8012e30:	685a      	ldr	r2, [r3, #4]
 8012e32:	4b41      	ldr	r3, [pc, #260]	; (8012f38 <tcp_receive+0xd00>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d11d      	bne.n	8012e76 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012e3a:	4b3e      	ldr	r3, [pc, #248]	; (8012f34 <tcp_receive+0xcfc>)
 8012e3c:	891a      	ldrh	r2, [r3, #8]
 8012e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e40:	891b      	ldrh	r3, [r3, #8]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	f240 814f 	bls.w	80130e6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e48:	483a      	ldr	r0, [pc, #232]	; (8012f34 <tcp_receive+0xcfc>)
 8012e4a:	f7fd fad5 	bl	80103f8 <tcp_seg_copy>
 8012e4e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	f000 8149 	beq.w	80130ea <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d003      	beq.n	8012e66 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e60:	697a      	ldr	r2, [r7, #20]
 8012e62:	601a      	str	r2, [r3, #0]
 8012e64:	e002      	b.n	8012e6c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	697a      	ldr	r2, [r7, #20]
 8012e6a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012e6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012e6e:	6978      	ldr	r0, [r7, #20]
 8012e70:	f7ff f8de 	bl	8012030 <tcp_oos_insert_segment>
                }
                break;
 8012e74:	e139      	b.n	80130ea <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d117      	bne.n	8012eac <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012e7c:	4b2e      	ldr	r3, [pc, #184]	; (8012f38 <tcp_receive+0xd00>)
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e82:	68db      	ldr	r3, [r3, #12]
 8012e84:	685b      	ldr	r3, [r3, #4]
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	da57      	bge.n	8012f3c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012e8c:	4829      	ldr	r0, [pc, #164]	; (8012f34 <tcp_receive+0xcfc>)
 8012e8e:	f7fd fab3 	bl	80103f8 <tcp_seg_copy>
 8012e92:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012e94:	69bb      	ldr	r3, [r7, #24]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	f000 8129 	beq.w	80130ee <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	69ba      	ldr	r2, [r7, #24]
 8012ea0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ea4:	69b8      	ldr	r0, [r7, #24]
 8012ea6:	f7ff f8c3 	bl	8012030 <tcp_oos_insert_segment>
                  }
                  break;
 8012eaa:	e120      	b.n	80130ee <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012eac:	4b22      	ldr	r3, [pc, #136]	; (8012f38 <tcp_receive+0xd00>)
 8012eae:	681a      	ldr	r2, [r3, #0]
 8012eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eb2:	68db      	ldr	r3, [r3, #12]
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	1ad3      	subs	r3, r2, r3
 8012eb8:	3b01      	subs	r3, #1
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	db3e      	blt.n	8012f3c <tcp_receive+0xd04>
 8012ebe:	4b1e      	ldr	r3, [pc, #120]	; (8012f38 <tcp_receive+0xd00>)
 8012ec0:	681a      	ldr	r2, [r3, #0]
 8012ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec4:	68db      	ldr	r3, [r3, #12]
 8012ec6:	685b      	ldr	r3, [r3, #4]
 8012ec8:	1ad3      	subs	r3, r2, r3
 8012eca:	3301      	adds	r3, #1
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	dc35      	bgt.n	8012f3c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012ed0:	4818      	ldr	r0, [pc, #96]	; (8012f34 <tcp_receive+0xcfc>)
 8012ed2:	f7fd fa91 	bl	80103f8 <tcp_seg_copy>
 8012ed6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012ed8:	69fb      	ldr	r3, [r7, #28]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f000 8109 	beq.w	80130f2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ee2:	68db      	ldr	r3, [r3, #12]
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ee8:	8912      	ldrh	r2, [r2, #8]
 8012eea:	441a      	add	r2, r3
 8012eec:	4b12      	ldr	r3, [pc, #72]	; (8012f38 <tcp_receive+0xd00>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	1ad3      	subs	r3, r2, r3
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	dd12      	ble.n	8012f1c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012ef6:	4b10      	ldr	r3, [pc, #64]	; (8012f38 <tcp_receive+0xd00>)
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	b29a      	uxth	r2, r3
 8012efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012efe:	68db      	ldr	r3, [r3, #12]
 8012f00:	685b      	ldr	r3, [r3, #4]
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	1ad3      	subs	r3, r2, r3
 8012f06:	b29a      	uxth	r2, r3
 8012f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f0a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f0e:	685a      	ldr	r2, [r3, #4]
 8012f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f12:	891b      	ldrh	r3, [r3, #8]
 8012f14:	4619      	mov	r1, r3
 8012f16:	4610      	mov	r0, r2
 8012f18:	f7fb fbf0 	bl	800e6fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f1e:	69fa      	ldr	r2, [r7, #28]
 8012f20:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012f22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012f24:	69f8      	ldr	r0, [r7, #28]
 8012f26:	f7ff f883 	bl	8012030 <tcp_oos_insert_segment>
                  }
                  break;
 8012f2a:	e0e2      	b.n	80130f2 <tcp_receive+0xeba>
 8012f2c:	2001160c 	.word	0x2001160c
 8012f30:	20011609 	.word	0x20011609
 8012f34:	200115dc 	.word	0x200115dc
 8012f38:	200115fc 	.word	0x200115fc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	f040 80c6 	bne.w	80130d6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012f4a:	4b80      	ldr	r3, [pc, #512]	; (801314c <tcp_receive+0xf14>)
 8012f4c:	681a      	ldr	r2, [r3, #0]
 8012f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f50:	68db      	ldr	r3, [r3, #12]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	f340 80bd 	ble.w	80130d6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5e:	68db      	ldr	r3, [r3, #12]
 8012f60:	899b      	ldrh	r3, [r3, #12]
 8012f62:	b29b      	uxth	r3, r3
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7fa f96b 	bl	800d240 <lwip_htons>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	b2db      	uxtb	r3, r3
 8012f6e:	f003 0301 	and.w	r3, r3, #1
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	f040 80bf 	bne.w	80130f6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012f78:	4875      	ldr	r0, [pc, #468]	; (8013150 <tcp_receive+0xf18>)
 8012f7a:	f7fd fa3d 	bl	80103f8 <tcp_seg_copy>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f82:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	f000 80b6 	beq.w	80130fa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f90:	68db      	ldr	r3, [r3, #12]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f96:	8912      	ldrh	r2, [r2, #8]
 8012f98:	441a      	add	r2, r3
 8012f9a:	4b6c      	ldr	r3, [pc, #432]	; (801314c <tcp_receive+0xf14>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	dd12      	ble.n	8012fca <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012fa4:	4b69      	ldr	r3, [pc, #420]	; (801314c <tcp_receive+0xf14>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fac:	68db      	ldr	r3, [r3, #12]
 8012fae:	685b      	ldr	r3, [r3, #4]
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	1ad3      	subs	r3, r2, r3
 8012fb4:	b29a      	uxth	r2, r3
 8012fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fbc:	685a      	ldr	r2, [r3, #4]
 8012fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc0:	891b      	ldrh	r3, [r3, #8]
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	4610      	mov	r0, r2
 8012fc6:	f7fb fb99 	bl	800e6fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012fca:	4b62      	ldr	r3, [pc, #392]	; (8013154 <tcp_receive+0xf1c>)
 8012fcc:	881b      	ldrh	r3, [r3, #0]
 8012fce:	461a      	mov	r2, r3
 8012fd0:	4b5e      	ldr	r3, [pc, #376]	; (801314c <tcp_receive+0xf14>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	441a      	add	r2, r3
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fda:	6879      	ldr	r1, [r7, #4]
 8012fdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012fde:	440b      	add	r3, r1
 8012fe0:	1ad3      	subs	r3, r2, r3
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	f340 8089 	ble.w	80130fa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	68db      	ldr	r3, [r3, #12]
 8012fee:	899b      	ldrh	r3, [r3, #12]
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7fa f924 	bl	800d240 <lwip_htons>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	b2db      	uxtb	r3, r3
 8012ffc:	f003 0301 	and.w	r3, r3, #1
 8013000:	2b00      	cmp	r3, #0
 8013002:	d022      	beq.n	801304a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	68db      	ldr	r3, [r3, #12]
 801300a:	899b      	ldrh	r3, [r3, #12]
 801300c:	b29b      	uxth	r3, r3
 801300e:	b21b      	sxth	r3, r3
 8013010:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013014:	b21c      	sxth	r4, r3
 8013016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	68db      	ldr	r3, [r3, #12]
 801301c:	899b      	ldrh	r3, [r3, #12]
 801301e:	b29b      	uxth	r3, r3
 8013020:	4618      	mov	r0, r3
 8013022:	f7fa f90d 	bl	800d240 <lwip_htons>
 8013026:	4603      	mov	r3, r0
 8013028:	b2db      	uxtb	r3, r3
 801302a:	b29b      	uxth	r3, r3
 801302c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013030:	b29b      	uxth	r3, r3
 8013032:	4618      	mov	r0, r3
 8013034:	f7fa f904 	bl	800d240 <lwip_htons>
 8013038:	4603      	mov	r3, r0
 801303a:	b21b      	sxth	r3, r3
 801303c:	4323      	orrs	r3, r4
 801303e:	b21a      	sxth	r2, r3
 8013040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	68db      	ldr	r3, [r3, #12]
 8013046:	b292      	uxth	r2, r2
 8013048:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801304e:	b29a      	uxth	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013054:	4413      	add	r3, r2
 8013056:	b299      	uxth	r1, r3
 8013058:	4b3c      	ldr	r3, [pc, #240]	; (801314c <tcp_receive+0xf14>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	b29a      	uxth	r2, r3
 801305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	1a8a      	subs	r2, r1, r2
 8013064:	b292      	uxth	r2, r2
 8013066:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	685a      	ldr	r2, [r3, #4]
 801306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	891b      	ldrh	r3, [r3, #8]
 8013074:	4619      	mov	r1, r3
 8013076:	4610      	mov	r0, r2
 8013078:	f7fb fb40 	bl	800e6fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	891c      	ldrh	r4, [r3, #8]
 8013082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	68db      	ldr	r3, [r3, #12]
 8013088:	899b      	ldrh	r3, [r3, #12]
 801308a:	b29b      	uxth	r3, r3
 801308c:	4618      	mov	r0, r3
 801308e:	f7fa f8d7 	bl	800d240 <lwip_htons>
 8013092:	4603      	mov	r3, r0
 8013094:	b2db      	uxtb	r3, r3
 8013096:	f003 0303 	and.w	r3, r3, #3
 801309a:	2b00      	cmp	r3, #0
 801309c:	d001      	beq.n	80130a2 <tcp_receive+0xe6a>
 801309e:	2301      	movs	r3, #1
 80130a0:	e000      	b.n	80130a4 <tcp_receive+0xe6c>
 80130a2:	2300      	movs	r3, #0
 80130a4:	4423      	add	r3, r4
 80130a6:	b29a      	uxth	r2, r3
 80130a8:	4b2a      	ldr	r3, [pc, #168]	; (8013154 <tcp_receive+0xf1c>)
 80130aa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80130ac:	4b29      	ldr	r3, [pc, #164]	; (8013154 <tcp_receive+0xf1c>)
 80130ae:	881b      	ldrh	r3, [r3, #0]
 80130b0:	461a      	mov	r2, r3
 80130b2:	4b26      	ldr	r3, [pc, #152]	; (801314c <tcp_receive+0xf14>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	441a      	add	r2, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130bc:	6879      	ldr	r1, [r7, #4]
 80130be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80130c0:	440b      	add	r3, r1
 80130c2:	429a      	cmp	r2, r3
 80130c4:	d019      	beq.n	80130fa <tcp_receive+0xec2>
 80130c6:	4b24      	ldr	r3, [pc, #144]	; (8013158 <tcp_receive+0xf20>)
 80130c8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80130cc:	4923      	ldr	r1, [pc, #140]	; (801315c <tcp_receive+0xf24>)
 80130ce:	4824      	ldr	r0, [pc, #144]	; (8013160 <tcp_receive+0xf28>)
 80130d0:	f007 fe34 	bl	801ad3c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80130d4:	e011      	b.n	80130fa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80130d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	63bb      	str	r3, [r7, #56]	; 0x38
 80130dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130de:	2b00      	cmp	r3, #0
 80130e0:	f47f aea4 	bne.w	8012e2c <tcp_receive+0xbf4>
 80130e4:	e00a      	b.n	80130fc <tcp_receive+0xec4>
                break;
 80130e6:	bf00      	nop
 80130e8:	e008      	b.n	80130fc <tcp_receive+0xec4>
                break;
 80130ea:	bf00      	nop
 80130ec:	e006      	b.n	80130fc <tcp_receive+0xec4>
                  break;
 80130ee:	bf00      	nop
 80130f0:	e004      	b.n	80130fc <tcp_receive+0xec4>
                  break;
 80130f2:	bf00      	nop
 80130f4:	e002      	b.n	80130fc <tcp_receive+0xec4>
                  break;
 80130f6:	bf00      	nop
 80130f8:	e000      	b.n	80130fc <tcp_receive+0xec4>
                break;
 80130fa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f001 fe8b 	bl	8014e18 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013102:	e003      	b.n	801310c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f001 fe87 	bl	8014e18 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801310a:	e01a      	b.n	8013142 <tcp_receive+0xf0a>
 801310c:	e019      	b.n	8013142 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801310e:	4b0f      	ldr	r3, [pc, #60]	; (801314c <tcp_receive+0xf14>)
 8013110:	681a      	ldr	r2, [r3, #0]
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013116:	1ad3      	subs	r3, r2, r3
 8013118:	2b00      	cmp	r3, #0
 801311a:	db0a      	blt.n	8013132 <tcp_receive+0xefa>
 801311c:	4b0b      	ldr	r3, [pc, #44]	; (801314c <tcp_receive+0xf14>)
 801311e:	681a      	ldr	r2, [r3, #0]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013124:	6879      	ldr	r1, [r7, #4]
 8013126:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013128:	440b      	add	r3, r1
 801312a:	1ad3      	subs	r3, r2, r3
 801312c:	3301      	adds	r3, #1
 801312e:	2b00      	cmp	r3, #0
 8013130:	dd07      	ble.n	8013142 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	8b5b      	ldrh	r3, [r3, #26]
 8013136:	f043 0302 	orr.w	r3, r3, #2
 801313a:	b29a      	uxth	r2, r3
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013140:	e7ff      	b.n	8013142 <tcp_receive+0xf0a>
 8013142:	bf00      	nop
 8013144:	3750      	adds	r7, #80	; 0x50
 8013146:	46bd      	mov	sp, r7
 8013148:	bdb0      	pop	{r4, r5, r7, pc}
 801314a:	bf00      	nop
 801314c:	200115fc 	.word	0x200115fc
 8013150:	200115dc 	.word	0x200115dc
 8013154:	20011606 	.word	0x20011606
 8013158:	0801db20 	.word	0x0801db20
 801315c:	0801dec8 	.word	0x0801dec8
 8013160:	0801db6c 	.word	0x0801db6c

08013164 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013164:	b480      	push	{r7}
 8013166:	b083      	sub	sp, #12
 8013168:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801316a:	4b15      	ldr	r3, [pc, #84]	; (80131c0 <tcp_get_next_optbyte+0x5c>)
 801316c:	881b      	ldrh	r3, [r3, #0]
 801316e:	1c5a      	adds	r2, r3, #1
 8013170:	b291      	uxth	r1, r2
 8013172:	4a13      	ldr	r2, [pc, #76]	; (80131c0 <tcp_get_next_optbyte+0x5c>)
 8013174:	8011      	strh	r1, [r2, #0]
 8013176:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013178:	4b12      	ldr	r3, [pc, #72]	; (80131c4 <tcp_get_next_optbyte+0x60>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d004      	beq.n	801318a <tcp_get_next_optbyte+0x26>
 8013180:	4b11      	ldr	r3, [pc, #68]	; (80131c8 <tcp_get_next_optbyte+0x64>)
 8013182:	881b      	ldrh	r3, [r3, #0]
 8013184:	88fa      	ldrh	r2, [r7, #6]
 8013186:	429a      	cmp	r2, r3
 8013188:	d208      	bcs.n	801319c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801318a:	4b10      	ldr	r3, [pc, #64]	; (80131cc <tcp_get_next_optbyte+0x68>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	3314      	adds	r3, #20
 8013190:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013192:	88fb      	ldrh	r3, [r7, #6]
 8013194:	683a      	ldr	r2, [r7, #0]
 8013196:	4413      	add	r3, r2
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	e00b      	b.n	80131b4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801319c:	88fb      	ldrh	r3, [r7, #6]
 801319e:	b2da      	uxtb	r2, r3
 80131a0:	4b09      	ldr	r3, [pc, #36]	; (80131c8 <tcp_get_next_optbyte+0x64>)
 80131a2:	881b      	ldrh	r3, [r3, #0]
 80131a4:	b2db      	uxtb	r3, r3
 80131a6:	1ad3      	subs	r3, r2, r3
 80131a8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80131aa:	4b06      	ldr	r3, [pc, #24]	; (80131c4 <tcp_get_next_optbyte+0x60>)
 80131ac:	681a      	ldr	r2, [r3, #0]
 80131ae:	797b      	ldrb	r3, [r7, #5]
 80131b0:	4413      	add	r3, r2
 80131b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	370c      	adds	r7, #12
 80131b8:	46bd      	mov	sp, r7
 80131ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131be:	4770      	bx	lr
 80131c0:	200115f8 	.word	0x200115f8
 80131c4:	200115f4 	.word	0x200115f4
 80131c8:	200115f2 	.word	0x200115f2
 80131cc:	200115ec 	.word	0x200115ec

080131d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b084      	sub	sp, #16
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d106      	bne.n	80131ec <tcp_parseopt+0x1c>
 80131de:	4b32      	ldr	r3, [pc, #200]	; (80132a8 <tcp_parseopt+0xd8>)
 80131e0:	f240 727d 	movw	r2, #1917	; 0x77d
 80131e4:	4931      	ldr	r1, [pc, #196]	; (80132ac <tcp_parseopt+0xdc>)
 80131e6:	4832      	ldr	r0, [pc, #200]	; (80132b0 <tcp_parseopt+0xe0>)
 80131e8:	f007 fda8 	bl	801ad3c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80131ec:	4b31      	ldr	r3, [pc, #196]	; (80132b4 <tcp_parseopt+0xe4>)
 80131ee:	881b      	ldrh	r3, [r3, #0]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d055      	beq.n	80132a0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80131f4:	4b30      	ldr	r3, [pc, #192]	; (80132b8 <tcp_parseopt+0xe8>)
 80131f6:	2200      	movs	r2, #0
 80131f8:	801a      	strh	r2, [r3, #0]
 80131fa:	e045      	b.n	8013288 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80131fc:	f7ff ffb2 	bl	8013164 <tcp_get_next_optbyte>
 8013200:	4603      	mov	r3, r0
 8013202:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013204:	7bfb      	ldrb	r3, [r7, #15]
 8013206:	2b02      	cmp	r3, #2
 8013208:	d006      	beq.n	8013218 <tcp_parseopt+0x48>
 801320a:	2b02      	cmp	r3, #2
 801320c:	dc2b      	bgt.n	8013266 <tcp_parseopt+0x96>
 801320e:	2b00      	cmp	r3, #0
 8013210:	d041      	beq.n	8013296 <tcp_parseopt+0xc6>
 8013212:	2b01      	cmp	r3, #1
 8013214:	d127      	bne.n	8013266 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013216:	e037      	b.n	8013288 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013218:	f7ff ffa4 	bl	8013164 <tcp_get_next_optbyte>
 801321c:	4603      	mov	r3, r0
 801321e:	2b04      	cmp	r3, #4
 8013220:	d13b      	bne.n	801329a <tcp_parseopt+0xca>
 8013222:	4b25      	ldr	r3, [pc, #148]	; (80132b8 <tcp_parseopt+0xe8>)
 8013224:	881b      	ldrh	r3, [r3, #0]
 8013226:	3301      	adds	r3, #1
 8013228:	4a22      	ldr	r2, [pc, #136]	; (80132b4 <tcp_parseopt+0xe4>)
 801322a:	8812      	ldrh	r2, [r2, #0]
 801322c:	4293      	cmp	r3, r2
 801322e:	da34      	bge.n	801329a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013230:	f7ff ff98 	bl	8013164 <tcp_get_next_optbyte>
 8013234:	4603      	mov	r3, r0
 8013236:	b29b      	uxth	r3, r3
 8013238:	021b      	lsls	r3, r3, #8
 801323a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801323c:	f7ff ff92 	bl	8013164 <tcp_get_next_optbyte>
 8013240:	4603      	mov	r3, r0
 8013242:	b29a      	uxth	r2, r3
 8013244:	89bb      	ldrh	r3, [r7, #12]
 8013246:	4313      	orrs	r3, r2
 8013248:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801324a:	89bb      	ldrh	r3, [r7, #12]
 801324c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013250:	d804      	bhi.n	801325c <tcp_parseopt+0x8c>
 8013252:	89bb      	ldrh	r3, [r7, #12]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d001      	beq.n	801325c <tcp_parseopt+0x8c>
 8013258:	89ba      	ldrh	r2, [r7, #12]
 801325a:	e001      	b.n	8013260 <tcp_parseopt+0x90>
 801325c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013264:	e010      	b.n	8013288 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013266:	f7ff ff7d 	bl	8013164 <tcp_get_next_optbyte>
 801326a:	4603      	mov	r3, r0
 801326c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801326e:	7afb      	ldrb	r3, [r7, #11]
 8013270:	2b01      	cmp	r3, #1
 8013272:	d914      	bls.n	801329e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013274:	7afb      	ldrb	r3, [r7, #11]
 8013276:	b29a      	uxth	r2, r3
 8013278:	4b0f      	ldr	r3, [pc, #60]	; (80132b8 <tcp_parseopt+0xe8>)
 801327a:	881b      	ldrh	r3, [r3, #0]
 801327c:	4413      	add	r3, r2
 801327e:	b29b      	uxth	r3, r3
 8013280:	3b02      	subs	r3, #2
 8013282:	b29a      	uxth	r2, r3
 8013284:	4b0c      	ldr	r3, [pc, #48]	; (80132b8 <tcp_parseopt+0xe8>)
 8013286:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013288:	4b0b      	ldr	r3, [pc, #44]	; (80132b8 <tcp_parseopt+0xe8>)
 801328a:	881a      	ldrh	r2, [r3, #0]
 801328c:	4b09      	ldr	r3, [pc, #36]	; (80132b4 <tcp_parseopt+0xe4>)
 801328e:	881b      	ldrh	r3, [r3, #0]
 8013290:	429a      	cmp	r2, r3
 8013292:	d3b3      	bcc.n	80131fc <tcp_parseopt+0x2c>
 8013294:	e004      	b.n	80132a0 <tcp_parseopt+0xd0>
          return;
 8013296:	bf00      	nop
 8013298:	e002      	b.n	80132a0 <tcp_parseopt+0xd0>
            return;
 801329a:	bf00      	nop
 801329c:	e000      	b.n	80132a0 <tcp_parseopt+0xd0>
            return;
 801329e:	bf00      	nop
      }
    }
  }
}
 80132a0:	3710      	adds	r7, #16
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
 80132a6:	bf00      	nop
 80132a8:	0801db20 	.word	0x0801db20
 80132ac:	0801df84 	.word	0x0801df84
 80132b0:	0801db6c 	.word	0x0801db6c
 80132b4:	200115f0 	.word	0x200115f0
 80132b8:	200115f8 	.word	0x200115f8

080132bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80132bc:	b480      	push	{r7}
 80132be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80132c0:	4b05      	ldr	r3, [pc, #20]	; (80132d8 <tcp_trigger_input_pcb_close+0x1c>)
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	f043 0310 	orr.w	r3, r3, #16
 80132c8:	b2da      	uxtb	r2, r3
 80132ca:	4b03      	ldr	r3, [pc, #12]	; (80132d8 <tcp_trigger_input_pcb_close+0x1c>)
 80132cc:	701a      	strb	r2, [r3, #0]
}
 80132ce:	bf00      	nop
 80132d0:	46bd      	mov	sp, r7
 80132d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d6:	4770      	bx	lr
 80132d8:	20011609 	.word	0x20011609

080132dc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d00a      	beq.n	8013304 <tcp_route+0x28>
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	7a1b      	ldrb	r3, [r3, #8]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d006      	beq.n	8013304 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	7a1b      	ldrb	r3, [r3, #8]
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7fa ffbe 	bl	800e27c <netif_get_by_index>
 8013300:	4603      	mov	r3, r0
 8013302:	e003      	b.n	801330c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013304:	6878      	ldr	r0, [r7, #4]
 8013306:	f003 fe4f 	bl	8016fa8 <ip4_route>
 801330a:	4603      	mov	r3, r0
  }
}
 801330c:	4618      	mov	r0, r3
 801330e:	3710      	adds	r7, #16
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}

08013314 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013314:	b590      	push	{r4, r7, lr}
 8013316:	b087      	sub	sp, #28
 8013318:	af00      	add	r7, sp, #0
 801331a:	60f8      	str	r0, [r7, #12]
 801331c:	60b9      	str	r1, [r7, #8]
 801331e:	603b      	str	r3, [r7, #0]
 8013320:	4613      	mov	r3, r2
 8013322:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d105      	bne.n	8013336 <tcp_create_segment+0x22>
 801332a:	4b44      	ldr	r3, [pc, #272]	; (801343c <tcp_create_segment+0x128>)
 801332c:	22a3      	movs	r2, #163	; 0xa3
 801332e:	4944      	ldr	r1, [pc, #272]	; (8013440 <tcp_create_segment+0x12c>)
 8013330:	4844      	ldr	r0, [pc, #272]	; (8013444 <tcp_create_segment+0x130>)
 8013332:	f007 fd03 	bl	801ad3c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d105      	bne.n	8013348 <tcp_create_segment+0x34>
 801333c:	4b3f      	ldr	r3, [pc, #252]	; (801343c <tcp_create_segment+0x128>)
 801333e:	22a4      	movs	r2, #164	; 0xa4
 8013340:	4941      	ldr	r1, [pc, #260]	; (8013448 <tcp_create_segment+0x134>)
 8013342:	4840      	ldr	r0, [pc, #256]	; (8013444 <tcp_create_segment+0x130>)
 8013344:	f007 fcfa 	bl	801ad3c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013348:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801334c:	009b      	lsls	r3, r3, #2
 801334e:	b2db      	uxtb	r3, r3
 8013350:	f003 0304 	and.w	r3, r3, #4
 8013354:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013356:	2003      	movs	r0, #3
 8013358:	f7fa fc28 	bl	800dbac <memp_malloc>
 801335c:	6138      	str	r0, [r7, #16]
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d104      	bne.n	801336e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013364:	68b8      	ldr	r0, [r7, #8]
 8013366:	f7fb fb81 	bl	800ea6c <pbuf_free>
    return NULL;
 801336a:	2300      	movs	r3, #0
 801336c:	e061      	b.n	8013432 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801336e:	693b      	ldr	r3, [r7, #16]
 8013370:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013374:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	2200      	movs	r2, #0
 801337a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	68ba      	ldr	r2, [r7, #8]
 8013380:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	891a      	ldrh	r2, [r3, #8]
 8013386:	7dfb      	ldrb	r3, [r7, #23]
 8013388:	b29b      	uxth	r3, r3
 801338a:	429a      	cmp	r2, r3
 801338c:	d205      	bcs.n	801339a <tcp_create_segment+0x86>
 801338e:	4b2b      	ldr	r3, [pc, #172]	; (801343c <tcp_create_segment+0x128>)
 8013390:	22b0      	movs	r2, #176	; 0xb0
 8013392:	492e      	ldr	r1, [pc, #184]	; (801344c <tcp_create_segment+0x138>)
 8013394:	482b      	ldr	r0, [pc, #172]	; (8013444 <tcp_create_segment+0x130>)
 8013396:	f007 fcd1 	bl	801ad3c <iprintf>
  seg->len = p->tot_len - optlen;
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	891a      	ldrh	r2, [r3, #8]
 801339e:	7dfb      	ldrb	r3, [r7, #23]
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	1ad3      	subs	r3, r2, r3
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	693b      	ldr	r3, [r7, #16]
 80133a8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80133aa:	2114      	movs	r1, #20
 80133ac:	68b8      	ldr	r0, [r7, #8]
 80133ae:	f7fb fa95 	bl	800e8dc <pbuf_add_header>
 80133b2:	4603      	mov	r3, r0
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d004      	beq.n	80133c2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80133b8:	6938      	ldr	r0, [r7, #16]
 80133ba:	f7fd f804 	bl	80103c6 <tcp_seg_free>
    return NULL;
 80133be:	2300      	movs	r3, #0
 80133c0:	e037      	b.n	8013432 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	685b      	ldr	r3, [r3, #4]
 80133c6:	685a      	ldr	r2, [r3, #4]
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	8ada      	ldrh	r2, [r3, #22]
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	68dc      	ldr	r4, [r3, #12]
 80133d4:	4610      	mov	r0, r2
 80133d6:	f7f9 ff33 	bl	800d240 <lwip_htons>
 80133da:	4603      	mov	r3, r0
 80133dc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	8b1a      	ldrh	r2, [r3, #24]
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	68dc      	ldr	r4, [r3, #12]
 80133e6:	4610      	mov	r0, r2
 80133e8:	f7f9 ff2a 	bl	800d240 <lwip_htons>
 80133ec:	4603      	mov	r3, r0
 80133ee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	68dc      	ldr	r4, [r3, #12]
 80133f4:	6838      	ldr	r0, [r7, #0]
 80133f6:	f7f9 ff38 	bl	800d26a <lwip_htonl>
 80133fa:	4603      	mov	r3, r0
 80133fc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80133fe:	7dfb      	ldrb	r3, [r7, #23]
 8013400:	089b      	lsrs	r3, r3, #2
 8013402:	b2db      	uxtb	r3, r3
 8013404:	b29b      	uxth	r3, r3
 8013406:	3305      	adds	r3, #5
 8013408:	b29b      	uxth	r3, r3
 801340a:	031b      	lsls	r3, r3, #12
 801340c:	b29a      	uxth	r2, r3
 801340e:	79fb      	ldrb	r3, [r7, #7]
 8013410:	b29b      	uxth	r3, r3
 8013412:	4313      	orrs	r3, r2
 8013414:	b29a      	uxth	r2, r3
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	68dc      	ldr	r4, [r3, #12]
 801341a:	4610      	mov	r0, r2
 801341c:	f7f9 ff10 	bl	800d240 <lwip_htons>
 8013420:	4603      	mov	r3, r0
 8013422:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013424:	693b      	ldr	r3, [r7, #16]
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	2200      	movs	r2, #0
 801342a:	749a      	strb	r2, [r3, #18]
 801342c:	2200      	movs	r2, #0
 801342e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013430:	693b      	ldr	r3, [r7, #16]
}
 8013432:	4618      	mov	r0, r3
 8013434:	371c      	adds	r7, #28
 8013436:	46bd      	mov	sp, r7
 8013438:	bd90      	pop	{r4, r7, pc}
 801343a:	bf00      	nop
 801343c:	0801dfa0 	.word	0x0801dfa0
 8013440:	0801dfd4 	.word	0x0801dfd4
 8013444:	0801dff4 	.word	0x0801dff4
 8013448:	0801e01c 	.word	0x0801e01c
 801344c:	0801e040 	.word	0x0801e040

08013450 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b086      	sub	sp, #24
 8013454:	af00      	add	r7, sp, #0
 8013456:	607b      	str	r3, [r7, #4]
 8013458:	4603      	mov	r3, r0
 801345a:	73fb      	strb	r3, [r7, #15]
 801345c:	460b      	mov	r3, r1
 801345e:	81bb      	strh	r3, [r7, #12]
 8013460:	4613      	mov	r3, r2
 8013462:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013464:	89bb      	ldrh	r3, [r7, #12]
 8013466:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d105      	bne.n	801347a <tcp_pbuf_prealloc+0x2a>
 801346e:	4b30      	ldr	r3, [pc, #192]	; (8013530 <tcp_pbuf_prealloc+0xe0>)
 8013470:	22e8      	movs	r2, #232	; 0xe8
 8013472:	4930      	ldr	r1, [pc, #192]	; (8013534 <tcp_pbuf_prealloc+0xe4>)
 8013474:	4830      	ldr	r0, [pc, #192]	; (8013538 <tcp_pbuf_prealloc+0xe8>)
 8013476:	f007 fc61 	bl	801ad3c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801347a:	6a3b      	ldr	r3, [r7, #32]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d105      	bne.n	801348c <tcp_pbuf_prealloc+0x3c>
 8013480:	4b2b      	ldr	r3, [pc, #172]	; (8013530 <tcp_pbuf_prealloc+0xe0>)
 8013482:	22e9      	movs	r2, #233	; 0xe9
 8013484:	492d      	ldr	r1, [pc, #180]	; (801353c <tcp_pbuf_prealloc+0xec>)
 8013486:	482c      	ldr	r0, [pc, #176]	; (8013538 <tcp_pbuf_prealloc+0xe8>)
 8013488:	f007 fc58 	bl	801ad3c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801348c:	89ba      	ldrh	r2, [r7, #12]
 801348e:	897b      	ldrh	r3, [r7, #10]
 8013490:	429a      	cmp	r2, r3
 8013492:	d221      	bcs.n	80134d8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013494:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013498:	f003 0302 	and.w	r3, r3, #2
 801349c:	2b00      	cmp	r3, #0
 801349e:	d111      	bne.n	80134c4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80134a0:	6a3b      	ldr	r3, [r7, #32]
 80134a2:	8b5b      	ldrh	r3, [r3, #26]
 80134a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d115      	bne.n	80134d8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80134ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d007      	beq.n	80134c4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80134b4:	6a3b      	ldr	r3, [r7, #32]
 80134b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d103      	bne.n	80134c4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80134bc:	6a3b      	ldr	r3, [r7, #32]
 80134be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d009      	beq.n	80134d8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80134c4:	89bb      	ldrh	r3, [r7, #12]
 80134c6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80134ca:	f023 0203 	bic.w	r2, r3, #3
 80134ce:	897b      	ldrh	r3, [r7, #10]
 80134d0:	4293      	cmp	r3, r2
 80134d2:	bf28      	it	cs
 80134d4:	4613      	movcs	r3, r2
 80134d6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80134d8:	8af9      	ldrh	r1, [r7, #22]
 80134da:	7bfb      	ldrb	r3, [r7, #15]
 80134dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134e0:	4618      	mov	r0, r3
 80134e2:	f7fa ffad 	bl	800e440 <pbuf_alloc>
 80134e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d101      	bne.n	80134f2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80134ee:	2300      	movs	r3, #0
 80134f0:	e019      	b.n	8013526 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d006      	beq.n	8013508 <tcp_pbuf_prealloc+0xb8>
 80134fa:	4b0d      	ldr	r3, [pc, #52]	; (8013530 <tcp_pbuf_prealloc+0xe0>)
 80134fc:	f240 120b 	movw	r2, #267	; 0x10b
 8013500:	490f      	ldr	r1, [pc, #60]	; (8013540 <tcp_pbuf_prealloc+0xf0>)
 8013502:	480d      	ldr	r0, [pc, #52]	; (8013538 <tcp_pbuf_prealloc+0xe8>)
 8013504:	f007 fc1a 	bl	801ad3c <iprintf>
  *oversize = p->len - length;
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	895a      	ldrh	r2, [r3, #10]
 801350c:	89bb      	ldrh	r3, [r7, #12]
 801350e:	1ad3      	subs	r3, r2, r3
 8013510:	b29a      	uxth	r2, r3
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013516:	693b      	ldr	r3, [r7, #16]
 8013518:	89ba      	ldrh	r2, [r7, #12]
 801351a:	811a      	strh	r2, [r3, #8]
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	891a      	ldrh	r2, [r3, #8]
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	815a      	strh	r2, [r3, #10]
  return p;
 8013524:	693b      	ldr	r3, [r7, #16]
}
 8013526:	4618      	mov	r0, r3
 8013528:	3718      	adds	r7, #24
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}
 801352e:	bf00      	nop
 8013530:	0801dfa0 	.word	0x0801dfa0
 8013534:	0801e058 	.word	0x0801e058
 8013538:	0801dff4 	.word	0x0801dff4
 801353c:	0801e07c 	.word	0x0801e07c
 8013540:	0801e09c 	.word	0x0801e09c

08013544 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
 801354c:	460b      	mov	r3, r1
 801354e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d106      	bne.n	8013564 <tcp_write_checks+0x20>
 8013556:	4b33      	ldr	r3, [pc, #204]	; (8013624 <tcp_write_checks+0xe0>)
 8013558:	f240 1233 	movw	r2, #307	; 0x133
 801355c:	4932      	ldr	r1, [pc, #200]	; (8013628 <tcp_write_checks+0xe4>)
 801355e:	4833      	ldr	r0, [pc, #204]	; (801362c <tcp_write_checks+0xe8>)
 8013560:	f007 fbec 	bl	801ad3c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	7d1b      	ldrb	r3, [r3, #20]
 8013568:	2b04      	cmp	r3, #4
 801356a:	d00e      	beq.n	801358a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013570:	2b07      	cmp	r3, #7
 8013572:	d00a      	beq.n	801358a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013578:	2b02      	cmp	r3, #2
 801357a:	d006      	beq.n	801358a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013580:	2b03      	cmp	r3, #3
 8013582:	d002      	beq.n	801358a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013584:	f06f 030a 	mvn.w	r3, #10
 8013588:	e048      	b.n	801361c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801358a:	887b      	ldrh	r3, [r7, #2]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d101      	bne.n	8013594 <tcp_write_checks+0x50>
    return ERR_OK;
 8013590:	2300      	movs	r3, #0
 8013592:	e043      	b.n	801361c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801359a:	887a      	ldrh	r2, [r7, #2]
 801359c:	429a      	cmp	r2, r3
 801359e:	d909      	bls.n	80135b4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	8b5b      	ldrh	r3, [r3, #26]
 80135a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135a8:	b29a      	uxth	r2, r3
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80135ae:	f04f 33ff 	mov.w	r3, #4294967295
 80135b2:	e033      	b.n	801361c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135ba:	2b08      	cmp	r3, #8
 80135bc:	d909      	bls.n	80135d2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	8b5b      	ldrh	r3, [r3, #26]
 80135c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135c6:	b29a      	uxth	r2, r3
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80135cc:	f04f 33ff 	mov.w	r3, #4294967295
 80135d0:	e024      	b.n	801361c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d00f      	beq.n	80135fc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d11a      	bne.n	801361a <tcp_write_checks+0xd6>
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d116      	bne.n	801361a <tcp_write_checks+0xd6>
 80135ec:	4b0d      	ldr	r3, [pc, #52]	; (8013624 <tcp_write_checks+0xe0>)
 80135ee:	f240 1255 	movw	r2, #341	; 0x155
 80135f2:	490f      	ldr	r1, [pc, #60]	; (8013630 <tcp_write_checks+0xec>)
 80135f4:	480d      	ldr	r0, [pc, #52]	; (801362c <tcp_write_checks+0xe8>)
 80135f6:	f007 fba1 	bl	801ad3c <iprintf>
 80135fa:	e00e      	b.n	801361a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013600:	2b00      	cmp	r3, #0
 8013602:	d103      	bne.n	801360c <tcp_write_checks+0xc8>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013608:	2b00      	cmp	r3, #0
 801360a:	d006      	beq.n	801361a <tcp_write_checks+0xd6>
 801360c:	4b05      	ldr	r3, [pc, #20]	; (8013624 <tcp_write_checks+0xe0>)
 801360e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013612:	4908      	ldr	r1, [pc, #32]	; (8013634 <tcp_write_checks+0xf0>)
 8013614:	4805      	ldr	r0, [pc, #20]	; (801362c <tcp_write_checks+0xe8>)
 8013616:	f007 fb91 	bl	801ad3c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801361a:	2300      	movs	r3, #0
}
 801361c:	4618      	mov	r0, r3
 801361e:	3708      	adds	r7, #8
 8013620:	46bd      	mov	sp, r7
 8013622:	bd80      	pop	{r7, pc}
 8013624:	0801dfa0 	.word	0x0801dfa0
 8013628:	0801e0b0 	.word	0x0801e0b0
 801362c:	0801dff4 	.word	0x0801dff4
 8013630:	0801e0d0 	.word	0x0801e0d0
 8013634:	0801e10c 	.word	0x0801e10c

08013638 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013638:	b590      	push	{r4, r7, lr}
 801363a:	b09b      	sub	sp, #108	; 0x6c
 801363c:	af04      	add	r7, sp, #16
 801363e:	60f8      	str	r0, [r7, #12]
 8013640:	60b9      	str	r1, [r7, #8]
 8013642:	4611      	mov	r1, r2
 8013644:	461a      	mov	r2, r3
 8013646:	460b      	mov	r3, r1
 8013648:	80fb      	strh	r3, [r7, #6]
 801364a:	4613      	mov	r3, r2
 801364c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801364e:	2300      	movs	r3, #0
 8013650:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013652:	2300      	movs	r3, #0
 8013654:	653b      	str	r3, [r7, #80]	; 0x50
 8013656:	2300      	movs	r3, #0
 8013658:	64fb      	str	r3, [r7, #76]	; 0x4c
 801365a:	2300      	movs	r3, #0
 801365c:	64bb      	str	r3, [r7, #72]	; 0x48
 801365e:	2300      	movs	r3, #0
 8013660:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013662:	2300      	movs	r3, #0
 8013664:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013668:	2300      	movs	r3, #0
 801366a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013672:	2300      	movs	r3, #0
 8013674:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013676:	2300      	movs	r3, #0
 8013678:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d109      	bne.n	8013694 <tcp_write+0x5c>
 8013680:	4ba4      	ldr	r3, [pc, #656]	; (8013914 <tcp_write+0x2dc>)
 8013682:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013686:	49a4      	ldr	r1, [pc, #656]	; (8013918 <tcp_write+0x2e0>)
 8013688:	48a4      	ldr	r0, [pc, #656]	; (801391c <tcp_write+0x2e4>)
 801368a:	f007 fb57 	bl	801ad3c <iprintf>
 801368e:	f06f 030f 	mvn.w	r3, #15
 8013692:	e32a      	b.n	8013cea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801369a:	085b      	lsrs	r3, r3, #1
 801369c:	b29a      	uxth	r2, r3
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136a2:	4293      	cmp	r3, r2
 80136a4:	bf28      	it	cs
 80136a6:	4613      	movcs	r3, r2
 80136a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80136aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d102      	bne.n	80136b6 <tcp_write+0x7e>
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136b4:	e000      	b.n	80136b8 <tcp_write+0x80>
 80136b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d109      	bne.n	80136d4 <tcp_write+0x9c>
 80136c0:	4b94      	ldr	r3, [pc, #592]	; (8013914 <tcp_write+0x2dc>)
 80136c2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80136c6:	4996      	ldr	r1, [pc, #600]	; (8013920 <tcp_write+0x2e8>)
 80136c8:	4894      	ldr	r0, [pc, #592]	; (801391c <tcp_write+0x2e4>)
 80136ca:	f007 fb37 	bl	801ad3c <iprintf>
 80136ce:	f06f 030f 	mvn.w	r3, #15
 80136d2:	e30a      	b.n	8013cea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80136d4:	88fb      	ldrh	r3, [r7, #6]
 80136d6:	4619      	mov	r1, r3
 80136d8:	68f8      	ldr	r0, [r7, #12]
 80136da:	f7ff ff33 	bl	8013544 <tcp_write_checks>
 80136de:	4603      	mov	r3, r0
 80136e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80136e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d002      	beq.n	80136f2 <tcp_write+0xba>
    return err;
 80136ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80136f0:	e2fb      	b.n	8013cea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136fc:	2300      	movs	r3, #0
 80136fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013706:	2b00      	cmp	r3, #0
 8013708:	f000 80f6 	beq.w	80138f8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013710:	653b      	str	r3, [r7, #80]	; 0x50
 8013712:	e002      	b.n	801371a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801371a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d1f8      	bne.n	8013714 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013724:	7a9b      	ldrb	r3, [r3, #10]
 8013726:	009b      	lsls	r3, r3, #2
 8013728:	b29b      	uxth	r3, r3
 801372a:	f003 0304 	and.w	r3, r3, #4
 801372e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013730:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013734:	891b      	ldrh	r3, [r3, #8]
 8013736:	4619      	mov	r1, r3
 8013738:	8c3b      	ldrh	r3, [r7, #32]
 801373a:	440b      	add	r3, r1
 801373c:	429a      	cmp	r2, r3
 801373e:	da06      	bge.n	801374e <tcp_write+0x116>
 8013740:	4b74      	ldr	r3, [pc, #464]	; (8013914 <tcp_write+0x2dc>)
 8013742:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013746:	4977      	ldr	r1, [pc, #476]	; (8013924 <tcp_write+0x2ec>)
 8013748:	4874      	ldr	r0, [pc, #464]	; (801391c <tcp_write+0x2e4>)
 801374a:	f007 faf7 	bl	801ad3c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801374e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013750:	891a      	ldrh	r2, [r3, #8]
 8013752:	8c3b      	ldrh	r3, [r7, #32]
 8013754:	4413      	add	r3, r2
 8013756:	b29b      	uxth	r3, r3
 8013758:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801375a:	1ad3      	subs	r3, r2, r3
 801375c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013764:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013766:	8a7b      	ldrh	r3, [r7, #18]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d026      	beq.n	80137ba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801376c:	8a7b      	ldrh	r3, [r7, #18]
 801376e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013770:	429a      	cmp	r2, r3
 8013772:	d206      	bcs.n	8013782 <tcp_write+0x14a>
 8013774:	4b67      	ldr	r3, [pc, #412]	; (8013914 <tcp_write+0x2dc>)
 8013776:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801377a:	496b      	ldr	r1, [pc, #428]	; (8013928 <tcp_write+0x2f0>)
 801377c:	4867      	ldr	r0, [pc, #412]	; (801391c <tcp_write+0x2e4>)
 801377e:	f007 fadd 	bl	801ad3c <iprintf>
      seg = last_unsent;
 8013782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013784:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013786:	8a7b      	ldrh	r3, [r7, #18]
 8013788:	88fa      	ldrh	r2, [r7, #6]
 801378a:	4293      	cmp	r3, r2
 801378c:	bf28      	it	cs
 801378e:	4613      	movcs	r3, r2
 8013790:	b29b      	uxth	r3, r3
 8013792:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013794:	4293      	cmp	r3, r2
 8013796:	bf28      	it	cs
 8013798:	4613      	movcs	r3, r2
 801379a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801379c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80137a2:	4413      	add	r3, r2
 80137a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80137a8:	8a7a      	ldrh	r2, [r7, #18]
 80137aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80137ac:	1ad3      	subs	r3, r2, r3
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80137b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80137b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80137b6:	1ad3      	subs	r3, r2, r3
 80137b8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80137ba:	8a7b      	ldrh	r3, [r7, #18]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d00b      	beq.n	80137d8 <tcp_write+0x1a0>
 80137c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137c4:	88fb      	ldrh	r3, [r7, #6]
 80137c6:	429a      	cmp	r2, r3
 80137c8:	d006      	beq.n	80137d8 <tcp_write+0x1a0>
 80137ca:	4b52      	ldr	r3, [pc, #328]	; (8013914 <tcp_write+0x2dc>)
 80137cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80137d0:	4956      	ldr	r1, [pc, #344]	; (801392c <tcp_write+0x2f4>)
 80137d2:	4852      	ldr	r0, [pc, #328]	; (801391c <tcp_write+0x2e4>)
 80137d4:	f007 fab2 	bl	801ad3c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80137d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137dc:	88fb      	ldrh	r3, [r7, #6]
 80137de:	429a      	cmp	r2, r3
 80137e0:	f080 8167 	bcs.w	8013ab2 <tcp_write+0x47a>
 80137e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	f000 8163 	beq.w	8013ab2 <tcp_write+0x47a>
 80137ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137ee:	891b      	ldrh	r3, [r3, #8]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	f000 815e 	beq.w	8013ab2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80137f6:	88fa      	ldrh	r2, [r7, #6]
 80137f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137fc:	1ad2      	subs	r2, r2, r3
 80137fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013800:	4293      	cmp	r3, r2
 8013802:	bfa8      	it	ge
 8013804:	4613      	movge	r3, r2
 8013806:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801380a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801380c:	797b      	ldrb	r3, [r7, #5]
 801380e:	f003 0301 	and.w	r3, r3, #1
 8013812:	2b00      	cmp	r3, #0
 8013814:	d027      	beq.n	8013866 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013816:	f107 0012 	add.w	r0, r7, #18
 801381a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801381c:	8bf9      	ldrh	r1, [r7, #30]
 801381e:	2301      	movs	r3, #1
 8013820:	9302      	str	r3, [sp, #8]
 8013822:	797b      	ldrb	r3, [r7, #5]
 8013824:	9301      	str	r3, [sp, #4]
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	9300      	str	r3, [sp, #0]
 801382a:	4603      	mov	r3, r0
 801382c:	2000      	movs	r0, #0
 801382e:	f7ff fe0f 	bl	8013450 <tcp_pbuf_prealloc>
 8013832:	6578      	str	r0, [r7, #84]	; 0x54
 8013834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013836:	2b00      	cmp	r3, #0
 8013838:	f000 8225 	beq.w	8013c86 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801383c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801383e:	6858      	ldr	r0, [r3, #4]
 8013840:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013844:	68ba      	ldr	r2, [r7, #8]
 8013846:	4413      	add	r3, r2
 8013848:	8bfa      	ldrh	r2, [r7, #30]
 801384a:	4619      	mov	r1, r3
 801384c:	f006 feae 	bl	801a5ac <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013850:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013852:	f7fb f999 	bl	800eb88 <pbuf_clen>
 8013856:	4603      	mov	r3, r0
 8013858:	461a      	mov	r2, r3
 801385a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801385e:	4413      	add	r3, r2
 8013860:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013864:	e041      	b.n	80138ea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	637b      	str	r3, [r7, #52]	; 0x34
 801386c:	e002      	b.n	8013874 <tcp_write+0x23c>
 801386e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	637b      	str	r3, [r7, #52]	; 0x34
 8013874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d1f8      	bne.n	801386e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801387e:	7b1b      	ldrb	r3, [r3, #12]
 8013880:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013884:	2b00      	cmp	r3, #0
 8013886:	d115      	bne.n	80138b4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801388e:	8952      	ldrh	r2, [r2, #10]
 8013890:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013892:	68ba      	ldr	r2, [r7, #8]
 8013894:	429a      	cmp	r2, r3
 8013896:	d10d      	bne.n	80138b4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013898:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801389c:	2b00      	cmp	r3, #0
 801389e:	d006      	beq.n	80138ae <tcp_write+0x276>
 80138a0:	4b1c      	ldr	r3, [pc, #112]	; (8013914 <tcp_write+0x2dc>)
 80138a2:	f240 2231 	movw	r2, #561	; 0x231
 80138a6:	4922      	ldr	r1, [pc, #136]	; (8013930 <tcp_write+0x2f8>)
 80138a8:	481c      	ldr	r0, [pc, #112]	; (801391c <tcp_write+0x2e4>)
 80138aa:	f007 fa47 	bl	801ad3c <iprintf>
          extendlen = seglen;
 80138ae:	8bfb      	ldrh	r3, [r7, #30]
 80138b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80138b2:	e01a      	b.n	80138ea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80138b4:	8bfb      	ldrh	r3, [r7, #30]
 80138b6:	2201      	movs	r2, #1
 80138b8:	4619      	mov	r1, r3
 80138ba:	2000      	movs	r0, #0
 80138bc:	f7fa fdc0 	bl	800e440 <pbuf_alloc>
 80138c0:	6578      	str	r0, [r7, #84]	; 0x54
 80138c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	f000 81e0 	beq.w	8013c8a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80138ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138ce:	68ba      	ldr	r2, [r7, #8]
 80138d0:	441a      	add	r2, r3
 80138d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138d4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80138d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80138d8:	f7fb f956 	bl	800eb88 <pbuf_clen>
 80138dc:	4603      	mov	r3, r0
 80138de:	461a      	mov	r2, r3
 80138e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80138e4:	4413      	add	r3, r2
 80138e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80138ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138ee:	8bfb      	ldrh	r3, [r7, #30]
 80138f0:	4413      	add	r3, r2
 80138f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80138f6:	e0dc      	b.n	8013ab2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80138fe:	2b00      	cmp	r3, #0
 8013900:	f000 80d7 	beq.w	8013ab2 <tcp_write+0x47a>
 8013904:	4b03      	ldr	r3, [pc, #12]	; (8013914 <tcp_write+0x2dc>)
 8013906:	f240 224a 	movw	r2, #586	; 0x24a
 801390a:	490a      	ldr	r1, [pc, #40]	; (8013934 <tcp_write+0x2fc>)
 801390c:	4803      	ldr	r0, [pc, #12]	; (801391c <tcp_write+0x2e4>)
 801390e:	f007 fa15 	bl	801ad3c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013912:	e0ce      	b.n	8013ab2 <tcp_write+0x47a>
 8013914:	0801dfa0 	.word	0x0801dfa0
 8013918:	0801e140 	.word	0x0801e140
 801391c:	0801dff4 	.word	0x0801dff4
 8013920:	0801e158 	.word	0x0801e158
 8013924:	0801e18c 	.word	0x0801e18c
 8013928:	0801e1a4 	.word	0x0801e1a4
 801392c:	0801e1c4 	.word	0x0801e1c4
 8013930:	0801e1e4 	.word	0x0801e1e4
 8013934:	0801e210 	.word	0x0801e210
    struct pbuf *p;
    u16_t left = len - pos;
 8013938:	88fa      	ldrh	r2, [r7, #6]
 801393a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801393e:	1ad3      	subs	r3, r2, r3
 8013940:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013942:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013946:	b29b      	uxth	r3, r3
 8013948:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801394a:	1ad3      	subs	r3, r2, r3
 801394c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801394e:	8b7a      	ldrh	r2, [r7, #26]
 8013950:	8bbb      	ldrh	r3, [r7, #28]
 8013952:	4293      	cmp	r3, r2
 8013954:	bf28      	it	cs
 8013956:	4613      	movcs	r3, r2
 8013958:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801395a:	797b      	ldrb	r3, [r7, #5]
 801395c:	f003 0301 	and.w	r3, r3, #1
 8013960:	2b00      	cmp	r3, #0
 8013962:	d036      	beq.n	80139d2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013964:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013968:	b29a      	uxth	r2, r3
 801396a:	8b3b      	ldrh	r3, [r7, #24]
 801396c:	4413      	add	r3, r2
 801396e:	b299      	uxth	r1, r3
 8013970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013972:	2b00      	cmp	r3, #0
 8013974:	bf0c      	ite	eq
 8013976:	2301      	moveq	r3, #1
 8013978:	2300      	movne	r3, #0
 801397a:	b2db      	uxtb	r3, r3
 801397c:	f107 0012 	add.w	r0, r7, #18
 8013980:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013982:	9302      	str	r3, [sp, #8]
 8013984:	797b      	ldrb	r3, [r7, #5]
 8013986:	9301      	str	r3, [sp, #4]
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	9300      	str	r3, [sp, #0]
 801398c:	4603      	mov	r3, r0
 801398e:	2036      	movs	r0, #54	; 0x36
 8013990:	f7ff fd5e 	bl	8013450 <tcp_pbuf_prealloc>
 8013994:	6338      	str	r0, [r7, #48]	; 0x30
 8013996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013998:	2b00      	cmp	r3, #0
 801399a:	f000 8178 	beq.w	8013c8e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a0:	895b      	ldrh	r3, [r3, #10]
 80139a2:	8b3a      	ldrh	r2, [r7, #24]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d906      	bls.n	80139b6 <tcp_write+0x37e>
 80139a8:	4b8c      	ldr	r3, [pc, #560]	; (8013bdc <tcp_write+0x5a4>)
 80139aa:	f240 2266 	movw	r2, #614	; 0x266
 80139ae:	498c      	ldr	r1, [pc, #560]	; (8013be0 <tcp_write+0x5a8>)
 80139b0:	488c      	ldr	r0, [pc, #560]	; (8013be4 <tcp_write+0x5ac>)
 80139b2:	f007 f9c3 	bl	801ad3c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80139b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b8:	685a      	ldr	r2, [r3, #4]
 80139ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80139be:	18d0      	adds	r0, r2, r3
 80139c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80139c4:	68ba      	ldr	r2, [r7, #8]
 80139c6:	4413      	add	r3, r2
 80139c8:	8b3a      	ldrh	r2, [r7, #24]
 80139ca:	4619      	mov	r1, r3
 80139cc:	f006 fdee 	bl	801a5ac <memcpy>
 80139d0:	e02f      	b.n	8013a32 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80139d2:	8a7b      	ldrh	r3, [r7, #18]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d006      	beq.n	80139e6 <tcp_write+0x3ae>
 80139d8:	4b80      	ldr	r3, [pc, #512]	; (8013bdc <tcp_write+0x5a4>)
 80139da:	f240 2271 	movw	r2, #625	; 0x271
 80139de:	4982      	ldr	r1, [pc, #520]	; (8013be8 <tcp_write+0x5b0>)
 80139e0:	4880      	ldr	r0, [pc, #512]	; (8013be4 <tcp_write+0x5ac>)
 80139e2:	f007 f9ab 	bl	801ad3c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80139e6:	8b3b      	ldrh	r3, [r7, #24]
 80139e8:	2201      	movs	r2, #1
 80139ea:	4619      	mov	r1, r3
 80139ec:	2036      	movs	r0, #54	; 0x36
 80139ee:	f7fa fd27 	bl	800e440 <pbuf_alloc>
 80139f2:	6178      	str	r0, [r7, #20]
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	f000 814b 	beq.w	8013c92 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80139fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a00:	68ba      	ldr	r2, [r7, #8]
 8013a02:	441a      	add	r2, r3
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013a08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a12:	4619      	mov	r1, r3
 8013a14:	2036      	movs	r0, #54	; 0x36
 8013a16:	f7fa fd13 	bl	800e440 <pbuf_alloc>
 8013a1a:	6338      	str	r0, [r7, #48]	; 0x30
 8013a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d103      	bne.n	8013a2a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013a22:	6978      	ldr	r0, [r7, #20]
 8013a24:	f7fb f822 	bl	800ea6c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013a28:	e136      	b.n	8013c98 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013a2a:	6979      	ldr	r1, [r7, #20]
 8013a2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a2e:	f7fb f8eb 	bl	800ec08 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013a32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a34:	f7fb f8a8 	bl	800eb88 <pbuf_clen>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	461a      	mov	r2, r3
 8013a3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013a40:	4413      	add	r3, r2
 8013a42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013a46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013a4a:	2b09      	cmp	r3, #9
 8013a4c:	d903      	bls.n	8013a56 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a50:	f7fb f80c 	bl	800ea6c <pbuf_free>
      goto memerr;
 8013a54:	e120      	b.n	8013c98 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013a5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a5e:	441a      	add	r2, r3
 8013a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a64:	9300      	str	r3, [sp, #0]
 8013a66:	4613      	mov	r3, r2
 8013a68:	2200      	movs	r2, #0
 8013a6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013a6c:	68f8      	ldr	r0, [r7, #12]
 8013a6e:	f7ff fc51 	bl	8013314 <tcp_create_segment>
 8013a72:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f000 810d 	beq.w	8013c96 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d102      	bne.n	8013a88 <tcp_write+0x450>
      queue = seg;
 8013a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a84:	647b      	str	r3, [r7, #68]	; 0x44
 8013a86:	e00c      	b.n	8013aa2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d106      	bne.n	8013a9c <tcp_write+0x464>
 8013a8e:	4b53      	ldr	r3, [pc, #332]	; (8013bdc <tcp_write+0x5a4>)
 8013a90:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013a94:	4955      	ldr	r1, [pc, #340]	; (8013bec <tcp_write+0x5b4>)
 8013a96:	4853      	ldr	r0, [pc, #332]	; (8013be4 <tcp_write+0x5ac>)
 8013a98:	f007 f950 	bl	801ad3c <iprintf>
      prev_seg->next = seg;
 8013a9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013a9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013aa0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aa4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013aa6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013aaa:	8b3b      	ldrh	r3, [r7, #24]
 8013aac:	4413      	add	r3, r2
 8013aae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013ab2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013ab6:	88fb      	ldrh	r3, [r7, #6]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	f4ff af3d 	bcc.w	8013938 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8013abe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d02c      	beq.n	8013b1e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ac6:	685b      	ldr	r3, [r3, #4]
 8013ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013aca:	e01e      	b.n	8013b0a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8013acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ace:	891a      	ldrh	r2, [r3, #8]
 8013ad0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013ad2:	4413      	add	r3, r2
 8013ad4:	b29a      	uxth	r2, r3
 8013ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d110      	bne.n	8013b04 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ae8:	8952      	ldrh	r2, [r2, #10]
 8013aea:	4413      	add	r3, r2
 8013aec:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013aee:	68b9      	ldr	r1, [r7, #8]
 8013af0:	4618      	mov	r0, r3
 8013af2:	f006 fd5b 	bl	801a5ac <memcpy>
        p->len += oversize_used;
 8013af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af8:	895a      	ldrh	r2, [r3, #10]
 8013afa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013afc:	4413      	add	r3, r2
 8013afe:	b29a      	uxth	r2, r3
 8013b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b02:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d1dd      	bne.n	8013acc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b12:	891a      	ldrh	r2, [r3, #8]
 8013b14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013b16:	4413      	add	r3, r2
 8013b18:	b29a      	uxth	r2, r3
 8013b1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b1c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013b1e:	8a7a      	ldrh	r2, [r7, #18]
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d018      	beq.n	8013b5e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d106      	bne.n	8013b40 <tcp_write+0x508>
 8013b32:	4b2a      	ldr	r3, [pc, #168]	; (8013bdc <tcp_write+0x5a4>)
 8013b34:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013b38:	492d      	ldr	r1, [pc, #180]	; (8013bf0 <tcp_write+0x5b8>)
 8013b3a:	482a      	ldr	r0, [pc, #168]	; (8013be4 <tcp_write+0x5ac>)
 8013b3c:	f007 f8fe 	bl	801ad3c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7fb f85e 	bl	800ec08 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b4e:	891a      	ldrh	r2, [r3, #8]
 8013b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b52:	891b      	ldrh	r3, [r3, #8]
 8013b54:	4413      	add	r3, r2
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b5a:	811a      	strh	r2, [r3, #8]
 8013b5c:	e037      	b.n	8013bce <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013b5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d034      	beq.n	8013bce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d003      	beq.n	8013b72 <tcp_write+0x53a>
 8013b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d106      	bne.n	8013b80 <tcp_write+0x548>
 8013b72:	4b1a      	ldr	r3, [pc, #104]	; (8013bdc <tcp_write+0x5a4>)
 8013b74:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013b78:	491e      	ldr	r1, [pc, #120]	; (8013bf4 <tcp_write+0x5bc>)
 8013b7a:	481a      	ldr	r0, [pc, #104]	; (8013be4 <tcp_write+0x5ac>)
 8013b7c:	f007 f8de 	bl	801ad3c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b82:	685b      	ldr	r3, [r3, #4]
 8013b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8013b86:	e009      	b.n	8013b9c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b8a:	891a      	ldrh	r2, [r3, #8]
 8013b8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b8e:	4413      	add	r3, r2
 8013b90:	b29a      	uxth	r2, r3
 8013b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b94:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8013b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d1f1      	bne.n	8013b88 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba6:	891a      	ldrh	r2, [r3, #8]
 8013ba8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013baa:	4413      	add	r3, r2
 8013bac:	b29a      	uxth	r2, r3
 8013bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb4:	895a      	ldrh	r2, [r3, #10]
 8013bb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013bb8:	4413      	add	r3, r2
 8013bba:	b29a      	uxth	r2, r3
 8013bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bbe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bc2:	891a      	ldrh	r2, [r3, #8]
 8013bc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013bc6:	4413      	add	r3, r2
 8013bc8:	b29a      	uxth	r2, r3
 8013bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bcc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d111      	bne.n	8013bf8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bd8:	66da      	str	r2, [r3, #108]	; 0x6c
 8013bda:	e010      	b.n	8013bfe <tcp_write+0x5c6>
 8013bdc:	0801dfa0 	.word	0x0801dfa0
 8013be0:	0801e240 	.word	0x0801e240
 8013be4:	0801dff4 	.word	0x0801dff4
 8013be8:	0801e280 	.word	0x0801e280
 8013bec:	0801e290 	.word	0x0801e290
 8013bf0:	0801e2a4 	.word	0x0801e2a4
 8013bf4:	0801e2dc 	.word	0x0801e2dc
  } else {
    last_unsent->next = queue;
 8013bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013bfc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013c02:	88fb      	ldrh	r3, [r7, #6]
 8013c04:	441a      	add	r2, r3
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013c10:	88fb      	ldrh	r3, [r7, #6]
 8013c12:	1ad3      	subs	r3, r2, r3
 8013c14:	b29a      	uxth	r2, r3
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013c22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d00e      	beq.n	8013c4e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d10a      	bne.n	8013c4e <tcp_write+0x616>
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d106      	bne.n	8013c4e <tcp_write+0x616>
 8013c40:	4b2c      	ldr	r3, [pc, #176]	; (8013cf4 <tcp_write+0x6bc>)
 8013c42:	f240 3212 	movw	r2, #786	; 0x312
 8013c46:	492c      	ldr	r1, [pc, #176]	; (8013cf8 <tcp_write+0x6c0>)
 8013c48:	482c      	ldr	r0, [pc, #176]	; (8013cfc <tcp_write+0x6c4>)
 8013c4a:	f007 f877 	bl	801ad3c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d016      	beq.n	8013c82 <tcp_write+0x64a>
 8013c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c56:	68db      	ldr	r3, [r3, #12]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d012      	beq.n	8013c82 <tcp_write+0x64a>
 8013c5c:	797b      	ldrb	r3, [r7, #5]
 8013c5e:	f003 0302 	and.w	r3, r3, #2
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d10d      	bne.n	8013c82 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c68:	68db      	ldr	r3, [r3, #12]
 8013c6a:	899b      	ldrh	r3, [r3, #12]
 8013c6c:	b29c      	uxth	r4, r3
 8013c6e:	2008      	movs	r0, #8
 8013c70:	f7f9 fae6 	bl	800d240 <lwip_htons>
 8013c74:	4603      	mov	r3, r0
 8013c76:	461a      	mov	r2, r3
 8013c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c7a:	68db      	ldr	r3, [r3, #12]
 8013c7c:	4322      	orrs	r2, r4
 8013c7e:	b292      	uxth	r2, r2
 8013c80:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013c82:	2300      	movs	r3, #0
 8013c84:	e031      	b.n	8013cea <tcp_write+0x6b2>
          goto memerr;
 8013c86:	bf00      	nop
 8013c88:	e006      	b.n	8013c98 <tcp_write+0x660>
            goto memerr;
 8013c8a:	bf00      	nop
 8013c8c:	e004      	b.n	8013c98 <tcp_write+0x660>
        goto memerr;
 8013c8e:	bf00      	nop
 8013c90:	e002      	b.n	8013c98 <tcp_write+0x660>
        goto memerr;
 8013c92:	bf00      	nop
 8013c94:	e000      	b.n	8013c98 <tcp_write+0x660>
      goto memerr;
 8013c96:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	8b5b      	ldrh	r3, [r3, #26]
 8013c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ca0:	b29a      	uxth	r2, r3
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d002      	beq.n	8013cb2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013cac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013cae:	f7fa fedd 	bl	800ea6c <pbuf_free>
  }
  if (queue != NULL) {
 8013cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d002      	beq.n	8013cbe <tcp_write+0x686>
    tcp_segs_free(queue);
 8013cb8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013cba:	f7fc fb6f 	bl	801039c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d00e      	beq.n	8013ce6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d10a      	bne.n	8013ce6 <tcp_write+0x6ae>
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d106      	bne.n	8013ce6 <tcp_write+0x6ae>
 8013cd8:	4b06      	ldr	r3, [pc, #24]	; (8013cf4 <tcp_write+0x6bc>)
 8013cda:	f240 3227 	movw	r2, #807	; 0x327
 8013cde:	4906      	ldr	r1, [pc, #24]	; (8013cf8 <tcp_write+0x6c0>)
 8013ce0:	4806      	ldr	r0, [pc, #24]	; (8013cfc <tcp_write+0x6c4>)
 8013ce2:	f007 f82b 	bl	801ad3c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	375c      	adds	r7, #92	; 0x5c
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd90      	pop	{r4, r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	0801dfa0 	.word	0x0801dfa0
 8013cf8:	0801e314 	.word	0x0801e314
 8013cfc:	0801dff4 	.word	0x0801dff4

08013d00 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013d00:	b590      	push	{r4, r7, lr}
 8013d02:	b08b      	sub	sp, #44	; 0x2c
 8013d04:	af02      	add	r7, sp, #8
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	460b      	mov	r3, r1
 8013d0a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	61fb      	str	r3, [r7, #28]
 8013d10:	2300      	movs	r3, #0
 8013d12:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013d14:	2300      	movs	r3, #0
 8013d16:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d106      	bne.n	8013d2c <tcp_split_unsent_seg+0x2c>
 8013d1e:	4b95      	ldr	r3, [pc, #596]	; (8013f74 <tcp_split_unsent_seg+0x274>)
 8013d20:	f240 324b 	movw	r2, #843	; 0x34b
 8013d24:	4994      	ldr	r1, [pc, #592]	; (8013f78 <tcp_split_unsent_seg+0x278>)
 8013d26:	4895      	ldr	r0, [pc, #596]	; (8013f7c <tcp_split_unsent_seg+0x27c>)
 8013d28:	f007 f808 	bl	801ad3c <iprintf>

  useg = pcb->unsent;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d30:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d102      	bne.n	8013d3e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013d38:	f04f 33ff 	mov.w	r3, #4294967295
 8013d3c:	e116      	b.n	8013f6c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013d3e:	887b      	ldrh	r3, [r7, #2]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d109      	bne.n	8013d58 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013d44:	4b8b      	ldr	r3, [pc, #556]	; (8013f74 <tcp_split_unsent_seg+0x274>)
 8013d46:	f240 3253 	movw	r2, #851	; 0x353
 8013d4a:	498d      	ldr	r1, [pc, #564]	; (8013f80 <tcp_split_unsent_seg+0x280>)
 8013d4c:	488b      	ldr	r0, [pc, #556]	; (8013f7c <tcp_split_unsent_seg+0x27c>)
 8013d4e:	f006 fff5 	bl	801ad3c <iprintf>
    return ERR_VAL;
 8013d52:	f06f 0305 	mvn.w	r3, #5
 8013d56:	e109      	b.n	8013f6c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	891b      	ldrh	r3, [r3, #8]
 8013d5c:	887a      	ldrh	r2, [r7, #2]
 8013d5e:	429a      	cmp	r2, r3
 8013d60:	d301      	bcc.n	8013d66 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013d62:	2300      	movs	r3, #0
 8013d64:	e102      	b.n	8013f6c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d6a:	887a      	ldrh	r2, [r7, #2]
 8013d6c:	429a      	cmp	r2, r3
 8013d6e:	d906      	bls.n	8013d7e <tcp_split_unsent_seg+0x7e>
 8013d70:	4b80      	ldr	r3, [pc, #512]	; (8013f74 <tcp_split_unsent_seg+0x274>)
 8013d72:	f240 325b 	movw	r2, #859	; 0x35b
 8013d76:	4983      	ldr	r1, [pc, #524]	; (8013f84 <tcp_split_unsent_seg+0x284>)
 8013d78:	4880      	ldr	r0, [pc, #512]	; (8013f7c <tcp_split_unsent_seg+0x27c>)
 8013d7a:	f006 ffdf 	bl	801ad3c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	891b      	ldrh	r3, [r3, #8]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d106      	bne.n	8013d94 <tcp_split_unsent_seg+0x94>
 8013d86:	4b7b      	ldr	r3, [pc, #492]	; (8013f74 <tcp_split_unsent_seg+0x274>)
 8013d88:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013d8c:	497e      	ldr	r1, [pc, #504]	; (8013f88 <tcp_split_unsent_seg+0x288>)
 8013d8e:	487b      	ldr	r0, [pc, #492]	; (8013f7c <tcp_split_unsent_seg+0x27c>)
 8013d90:	f006 ffd4 	bl	801ad3c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	7a9b      	ldrb	r3, [r3, #10]
 8013d98:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013d9a:	7bfb      	ldrb	r3, [r7, #15]
 8013d9c:	009b      	lsls	r3, r3, #2
 8013d9e:	b2db      	uxtb	r3, r3
 8013da0:	f003 0304 	and.w	r3, r3, #4
 8013da4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013da6:	697b      	ldr	r3, [r7, #20]
 8013da8:	891a      	ldrh	r2, [r3, #8]
 8013daa:	887b      	ldrh	r3, [r7, #2]
 8013dac:	1ad3      	subs	r3, r2, r3
 8013dae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013db0:	7bbb      	ldrb	r3, [r7, #14]
 8013db2:	b29a      	uxth	r2, r3
 8013db4:	89bb      	ldrh	r3, [r7, #12]
 8013db6:	4413      	add	r3, r2
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013dbe:	4619      	mov	r1, r3
 8013dc0:	2036      	movs	r0, #54	; 0x36
 8013dc2:	f7fa fb3d 	bl	800e440 <pbuf_alloc>
 8013dc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	f000 80b7 	beq.w	8013f3e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	685b      	ldr	r3, [r3, #4]
 8013dd4:	891a      	ldrh	r2, [r3, #8]
 8013dd6:	697b      	ldr	r3, [r7, #20]
 8013dd8:	891b      	ldrh	r3, [r3, #8]
 8013dda:	1ad3      	subs	r3, r2, r3
 8013ddc:	b29a      	uxth	r2, r3
 8013dde:	887b      	ldrh	r3, [r7, #2]
 8013de0:	4413      	add	r3, r2
 8013de2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013de4:	697b      	ldr	r3, [r7, #20]
 8013de6:	6858      	ldr	r0, [r3, #4]
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	685a      	ldr	r2, [r3, #4]
 8013dec:	7bbb      	ldrb	r3, [r7, #14]
 8013dee:	18d1      	adds	r1, r2, r3
 8013df0:	897b      	ldrh	r3, [r7, #10]
 8013df2:	89ba      	ldrh	r2, [r7, #12]
 8013df4:	f7fb f840 	bl	800ee78 <pbuf_copy_partial>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	89bb      	ldrh	r3, [r7, #12]
 8013dfe:	4293      	cmp	r3, r2
 8013e00:	f040 809f 	bne.w	8013f42 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	68db      	ldr	r3, [r3, #12]
 8013e08:	899b      	ldrh	r3, [r3, #12]
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7f9 fa17 	bl	800d240 <lwip_htons>
 8013e12:	4603      	mov	r3, r0
 8013e14:	b2db      	uxtb	r3, r3
 8013e16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e1a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013e20:	7efb      	ldrb	r3, [r7, #27]
 8013e22:	f003 0308 	and.w	r3, r3, #8
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d007      	beq.n	8013e3a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013e2a:	7efb      	ldrb	r3, [r7, #27]
 8013e2c:	f023 0308 	bic.w	r3, r3, #8
 8013e30:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013e32:	7ebb      	ldrb	r3, [r7, #26]
 8013e34:	f043 0308 	orr.w	r3, r3, #8
 8013e38:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013e3a:	7efb      	ldrb	r3, [r7, #27]
 8013e3c:	f003 0301 	and.w	r3, r3, #1
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d007      	beq.n	8013e54 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013e44:	7efb      	ldrb	r3, [r7, #27]
 8013e46:	f023 0301 	bic.w	r3, r3, #1
 8013e4a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013e4c:	7ebb      	ldrb	r3, [r7, #26]
 8013e4e:	f043 0301 	orr.w	r3, r3, #1
 8013e52:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013e54:	697b      	ldr	r3, [r7, #20]
 8013e56:	68db      	ldr	r3, [r3, #12]
 8013e58:	685b      	ldr	r3, [r3, #4]
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7f9 fa05 	bl	800d26a <lwip_htonl>
 8013e60:	4602      	mov	r2, r0
 8013e62:	887b      	ldrh	r3, [r7, #2]
 8013e64:	18d1      	adds	r1, r2, r3
 8013e66:	7eba      	ldrb	r2, [r7, #26]
 8013e68:	7bfb      	ldrb	r3, [r7, #15]
 8013e6a:	9300      	str	r3, [sp, #0]
 8013e6c:	460b      	mov	r3, r1
 8013e6e:	6939      	ldr	r1, [r7, #16]
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f7ff fa4f 	bl	8013314 <tcp_create_segment>
 8013e76:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013e78:	69fb      	ldr	r3, [r7, #28]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d063      	beq.n	8013f46 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7fa fe80 	bl	800eb88 <pbuf_clen>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	461a      	mov	r2, r3
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e92:	1a9b      	subs	r3, r3, r2
 8013e94:	b29a      	uxth	r2, r3
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	6858      	ldr	r0, [r3, #4]
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	685b      	ldr	r3, [r3, #4]
 8013ea4:	891a      	ldrh	r2, [r3, #8]
 8013ea6:	89bb      	ldrh	r3, [r7, #12]
 8013ea8:	1ad3      	subs	r3, r2, r3
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	4619      	mov	r1, r3
 8013eae:	f7fa fc25 	bl	800e6fc <pbuf_realloc>
  useg->len -= remainder;
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	891a      	ldrh	r2, [r3, #8]
 8013eb6:	89bb      	ldrh	r3, [r7, #12]
 8013eb8:	1ad3      	subs	r3, r2, r3
 8013eba:	b29a      	uxth	r2, r3
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013ec0:	697b      	ldr	r3, [r7, #20]
 8013ec2:	68db      	ldr	r3, [r3, #12]
 8013ec4:	899b      	ldrh	r3, [r3, #12]
 8013ec6:	b29c      	uxth	r4, r3
 8013ec8:	7efb      	ldrb	r3, [r7, #27]
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7f9 f9b7 	bl	800d240 <lwip_htons>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	68db      	ldr	r3, [r3, #12]
 8013eda:	4322      	orrs	r2, r4
 8013edc:	b292      	uxth	r2, r2
 8013ede:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013ee0:	697b      	ldr	r3, [r7, #20]
 8013ee2:	685b      	ldr	r3, [r3, #4]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7fa fe4f 	bl	800eb88 <pbuf_clen>
 8013eea:	4603      	mov	r3, r0
 8013eec:	461a      	mov	r2, r3
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ef4:	4413      	add	r3, r2
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	685b      	ldr	r3, [r3, #4]
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7fa fe40 	bl	800eb88 <pbuf_clen>
 8013f08:	4603      	mov	r3, r0
 8013f0a:	461a      	mov	r2, r3
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f12:	4413      	add	r3, r2
 8013f14:	b29a      	uxth	r2, r3
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	681a      	ldr	r2, [r3, #0]
 8013f20:	69fb      	ldr	r3, [r7, #28]
 8013f22:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	69fa      	ldr	r2, [r7, #28]
 8013f28:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013f2a:	69fb      	ldr	r3, [r7, #28]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d103      	bne.n	8013f3a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2200      	movs	r2, #0
 8013f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	e016      	b.n	8013f6c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013f3e:	bf00      	nop
 8013f40:	e002      	b.n	8013f48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013f42:	bf00      	nop
 8013f44:	e000      	b.n	8013f48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013f46:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013f48:	69fb      	ldr	r3, [r7, #28]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d006      	beq.n	8013f5c <tcp_split_unsent_seg+0x25c>
 8013f4e:	4b09      	ldr	r3, [pc, #36]	; (8013f74 <tcp_split_unsent_seg+0x274>)
 8013f50:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013f54:	490d      	ldr	r1, [pc, #52]	; (8013f8c <tcp_split_unsent_seg+0x28c>)
 8013f56:	4809      	ldr	r0, [pc, #36]	; (8013f7c <tcp_split_unsent_seg+0x27c>)
 8013f58:	f006 fef0 	bl	801ad3c <iprintf>
  if (p != NULL) {
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d002      	beq.n	8013f68 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013f62:	6938      	ldr	r0, [r7, #16]
 8013f64:	f7fa fd82 	bl	800ea6c <pbuf_free>
  }

  return ERR_MEM;
 8013f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3724      	adds	r7, #36	; 0x24
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd90      	pop	{r4, r7, pc}
 8013f74:	0801dfa0 	.word	0x0801dfa0
 8013f78:	0801e334 	.word	0x0801e334
 8013f7c:	0801dff4 	.word	0x0801dff4
 8013f80:	0801e358 	.word	0x0801e358
 8013f84:	0801e37c 	.word	0x0801e37c
 8013f88:	0801e38c 	.word	0x0801e38c
 8013f8c:	0801e39c 	.word	0x0801e39c

08013f90 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013f90:	b590      	push	{r4, r7, lr}
 8013f92:	b085      	sub	sp, #20
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d106      	bne.n	8013fac <tcp_send_fin+0x1c>
 8013f9e:	4b21      	ldr	r3, [pc, #132]	; (8014024 <tcp_send_fin+0x94>)
 8013fa0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013fa4:	4920      	ldr	r1, [pc, #128]	; (8014028 <tcp_send_fin+0x98>)
 8013fa6:	4821      	ldr	r0, [pc, #132]	; (801402c <tcp_send_fin+0x9c>)
 8013fa8:	f006 fec8 	bl	801ad3c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d02e      	beq.n	8014012 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fb8:	60fb      	str	r3, [r7, #12]
 8013fba:	e002      	b.n	8013fc2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d1f8      	bne.n	8013fbc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	68db      	ldr	r3, [r3, #12]
 8013fce:	899b      	ldrh	r3, [r3, #12]
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7f9 f934 	bl	800d240 <lwip_htons>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	f003 0307 	and.w	r3, r3, #7
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d116      	bne.n	8014012 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	68db      	ldr	r3, [r3, #12]
 8013fe8:	899b      	ldrh	r3, [r3, #12]
 8013fea:	b29c      	uxth	r4, r3
 8013fec:	2001      	movs	r0, #1
 8013fee:	f7f9 f927 	bl	800d240 <lwip_htons>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	68db      	ldr	r3, [r3, #12]
 8013ffa:	4322      	orrs	r2, r4
 8013ffc:	b292      	uxth	r2, r2
 8013ffe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	8b5b      	ldrh	r3, [r3, #26]
 8014004:	f043 0320 	orr.w	r3, r3, #32
 8014008:	b29a      	uxth	r2, r3
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801400e:	2300      	movs	r3, #0
 8014010:	e004      	b.n	801401c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014012:	2101      	movs	r1, #1
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f000 f80b 	bl	8014030 <tcp_enqueue_flags>
 801401a:	4603      	mov	r3, r0
}
 801401c:	4618      	mov	r0, r3
 801401e:	3714      	adds	r7, #20
 8014020:	46bd      	mov	sp, r7
 8014022:	bd90      	pop	{r4, r7, pc}
 8014024:	0801dfa0 	.word	0x0801dfa0
 8014028:	0801e3a8 	.word	0x0801e3a8
 801402c:	0801dff4 	.word	0x0801dff4

08014030 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b08a      	sub	sp, #40	; 0x28
 8014034:	af02      	add	r7, sp, #8
 8014036:	6078      	str	r0, [r7, #4]
 8014038:	460b      	mov	r3, r1
 801403a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801403c:	2300      	movs	r3, #0
 801403e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014040:	2300      	movs	r3, #0
 8014042:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014044:	78fb      	ldrb	r3, [r7, #3]
 8014046:	f003 0303 	and.w	r3, r3, #3
 801404a:	2b00      	cmp	r3, #0
 801404c:	d106      	bne.n	801405c <tcp_enqueue_flags+0x2c>
 801404e:	4b67      	ldr	r3, [pc, #412]	; (80141ec <tcp_enqueue_flags+0x1bc>)
 8014050:	f240 4211 	movw	r2, #1041	; 0x411
 8014054:	4966      	ldr	r1, [pc, #408]	; (80141f0 <tcp_enqueue_flags+0x1c0>)
 8014056:	4867      	ldr	r0, [pc, #412]	; (80141f4 <tcp_enqueue_flags+0x1c4>)
 8014058:	f006 fe70 	bl	801ad3c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d106      	bne.n	8014070 <tcp_enqueue_flags+0x40>
 8014062:	4b62      	ldr	r3, [pc, #392]	; (80141ec <tcp_enqueue_flags+0x1bc>)
 8014064:	f240 4213 	movw	r2, #1043	; 0x413
 8014068:	4963      	ldr	r1, [pc, #396]	; (80141f8 <tcp_enqueue_flags+0x1c8>)
 801406a:	4862      	ldr	r0, [pc, #392]	; (80141f4 <tcp_enqueue_flags+0x1c4>)
 801406c:	f006 fe66 	bl	801ad3c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014070:	78fb      	ldrb	r3, [r7, #3]
 8014072:	f003 0302 	and.w	r3, r3, #2
 8014076:	2b00      	cmp	r3, #0
 8014078:	d001      	beq.n	801407e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801407a:	2301      	movs	r3, #1
 801407c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801407e:	7ffb      	ldrb	r3, [r7, #31]
 8014080:	009b      	lsls	r3, r3, #2
 8014082:	b2db      	uxtb	r3, r3
 8014084:	f003 0304 	and.w	r3, r3, #4
 8014088:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801408a:	7dfb      	ldrb	r3, [r7, #23]
 801408c:	b29b      	uxth	r3, r3
 801408e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014092:	4619      	mov	r1, r3
 8014094:	2036      	movs	r0, #54	; 0x36
 8014096:	f7fa f9d3 	bl	800e440 <pbuf_alloc>
 801409a:	6138      	str	r0, [r7, #16]
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d109      	bne.n	80140b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	8b5b      	ldrh	r3, [r3, #26]
 80140a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140aa:	b29a      	uxth	r2, r3
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80140b0:	f04f 33ff 	mov.w	r3, #4294967295
 80140b4:	e095      	b.n	80141e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80140b6:	693b      	ldr	r3, [r7, #16]
 80140b8:	895a      	ldrh	r2, [r3, #10]
 80140ba:	7dfb      	ldrb	r3, [r7, #23]
 80140bc:	b29b      	uxth	r3, r3
 80140be:	429a      	cmp	r2, r3
 80140c0:	d206      	bcs.n	80140d0 <tcp_enqueue_flags+0xa0>
 80140c2:	4b4a      	ldr	r3, [pc, #296]	; (80141ec <tcp_enqueue_flags+0x1bc>)
 80140c4:	f240 4239 	movw	r2, #1081	; 0x439
 80140c8:	494c      	ldr	r1, [pc, #304]	; (80141fc <tcp_enqueue_flags+0x1cc>)
 80140ca:	484a      	ldr	r0, [pc, #296]	; (80141f4 <tcp_enqueue_flags+0x1c4>)
 80140cc:	f006 fe36 	bl	801ad3c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80140d4:	78fa      	ldrb	r2, [r7, #3]
 80140d6:	7ffb      	ldrb	r3, [r7, #31]
 80140d8:	9300      	str	r3, [sp, #0]
 80140da:	460b      	mov	r3, r1
 80140dc:	6939      	ldr	r1, [r7, #16]
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f7ff f918 	bl	8013314 <tcp_create_segment>
 80140e4:	60f8      	str	r0, [r7, #12]
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d109      	bne.n	8014100 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	8b5b      	ldrh	r3, [r3, #26]
 80140f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140f4:	b29a      	uxth	r2, r3
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80140fa:	f04f 33ff 	mov.w	r3, #4294967295
 80140fe:	e070      	b.n	80141e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	68db      	ldr	r3, [r3, #12]
 8014104:	f003 0303 	and.w	r3, r3, #3
 8014108:	2b00      	cmp	r3, #0
 801410a:	d006      	beq.n	801411a <tcp_enqueue_flags+0xea>
 801410c:	4b37      	ldr	r3, [pc, #220]	; (80141ec <tcp_enqueue_flags+0x1bc>)
 801410e:	f240 4242 	movw	r2, #1090	; 0x442
 8014112:	493b      	ldr	r1, [pc, #236]	; (8014200 <tcp_enqueue_flags+0x1d0>)
 8014114:	4837      	ldr	r0, [pc, #220]	; (80141f4 <tcp_enqueue_flags+0x1c4>)
 8014116:	f006 fe11 	bl	801ad3c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	891b      	ldrh	r3, [r3, #8]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d006      	beq.n	8014130 <tcp_enqueue_flags+0x100>
 8014122:	4b32      	ldr	r3, [pc, #200]	; (80141ec <tcp_enqueue_flags+0x1bc>)
 8014124:	f240 4243 	movw	r2, #1091	; 0x443
 8014128:	4936      	ldr	r1, [pc, #216]	; (8014204 <tcp_enqueue_flags+0x1d4>)
 801412a:	4832      	ldr	r0, [pc, #200]	; (80141f4 <tcp_enqueue_flags+0x1c4>)
 801412c:	f006 fe06 	bl	801ad3c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014134:	2b00      	cmp	r3, #0
 8014136:	d103      	bne.n	8014140 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	68fa      	ldr	r2, [r7, #12]
 801413c:	66da      	str	r2, [r3, #108]	; 0x6c
 801413e:	e00d      	b.n	801415c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014144:	61bb      	str	r3, [r7, #24]
 8014146:	e002      	b.n	801414e <tcp_enqueue_flags+0x11e>
 8014148:	69bb      	ldr	r3, [r7, #24]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	61bb      	str	r3, [r7, #24]
 801414e:	69bb      	ldr	r3, [r7, #24]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d1f8      	bne.n	8014148 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014156:	69bb      	ldr	r3, [r7, #24]
 8014158:	68fa      	ldr	r2, [r7, #12]
 801415a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2200      	movs	r2, #0
 8014160:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014164:	78fb      	ldrb	r3, [r7, #3]
 8014166:	f003 0302 	and.w	r3, r3, #2
 801416a:	2b00      	cmp	r3, #0
 801416c:	d104      	bne.n	8014178 <tcp_enqueue_flags+0x148>
 801416e:	78fb      	ldrb	r3, [r7, #3]
 8014170:	f003 0301 	and.w	r3, r3, #1
 8014174:	2b00      	cmp	r3, #0
 8014176:	d004      	beq.n	8014182 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801417c:	1c5a      	adds	r2, r3, #1
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014182:	78fb      	ldrb	r3, [r7, #3]
 8014184:	f003 0301 	and.w	r3, r3, #1
 8014188:	2b00      	cmp	r3, #0
 801418a:	d006      	beq.n	801419a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	8b5b      	ldrh	r3, [r3, #26]
 8014190:	f043 0320 	orr.w	r3, r3, #32
 8014194:	b29a      	uxth	r2, r3
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	4618      	mov	r0, r3
 80141a0:	f7fa fcf2 	bl	800eb88 <pbuf_clen>
 80141a4:	4603      	mov	r3, r0
 80141a6:	461a      	mov	r2, r3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141ae:	4413      	add	r3, r2
 80141b0:	b29a      	uxth	r2, r3
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d00e      	beq.n	80141e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d10a      	bne.n	80141e0 <tcp_enqueue_flags+0x1b0>
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d106      	bne.n	80141e0 <tcp_enqueue_flags+0x1b0>
 80141d2:	4b06      	ldr	r3, [pc, #24]	; (80141ec <tcp_enqueue_flags+0x1bc>)
 80141d4:	f240 4265 	movw	r2, #1125	; 0x465
 80141d8:	490b      	ldr	r1, [pc, #44]	; (8014208 <tcp_enqueue_flags+0x1d8>)
 80141da:	4806      	ldr	r0, [pc, #24]	; (80141f4 <tcp_enqueue_flags+0x1c4>)
 80141dc:	f006 fdae 	bl	801ad3c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80141e0:	2300      	movs	r3, #0
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3720      	adds	r7, #32
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
 80141ea:	bf00      	nop
 80141ec:	0801dfa0 	.word	0x0801dfa0
 80141f0:	0801e3c4 	.word	0x0801e3c4
 80141f4:	0801dff4 	.word	0x0801dff4
 80141f8:	0801e41c 	.word	0x0801e41c
 80141fc:	0801e43c 	.word	0x0801e43c
 8014200:	0801e478 	.word	0x0801e478
 8014204:	0801e490 	.word	0x0801e490
 8014208:	0801e4bc 	.word	0x0801e4bc

0801420c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801420c:	b5b0      	push	{r4, r5, r7, lr}
 801420e:	b08a      	sub	sp, #40	; 0x28
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d106      	bne.n	8014228 <tcp_output+0x1c>
 801421a:	4b9e      	ldr	r3, [pc, #632]	; (8014494 <tcp_output+0x288>)
 801421c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014220:	499d      	ldr	r1, [pc, #628]	; (8014498 <tcp_output+0x28c>)
 8014222:	489e      	ldr	r0, [pc, #632]	; (801449c <tcp_output+0x290>)
 8014224:	f006 fd8a 	bl	801ad3c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	7d1b      	ldrb	r3, [r3, #20]
 801422c:	2b01      	cmp	r3, #1
 801422e:	d106      	bne.n	801423e <tcp_output+0x32>
 8014230:	4b98      	ldr	r3, [pc, #608]	; (8014494 <tcp_output+0x288>)
 8014232:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014236:	499a      	ldr	r1, [pc, #616]	; (80144a0 <tcp_output+0x294>)
 8014238:	4898      	ldr	r0, [pc, #608]	; (801449c <tcp_output+0x290>)
 801423a:	f006 fd7f 	bl	801ad3c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801423e:	4b99      	ldr	r3, [pc, #612]	; (80144a4 <tcp_output+0x298>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	687a      	ldr	r2, [r7, #4]
 8014244:	429a      	cmp	r2, r3
 8014246:	d101      	bne.n	801424c <tcp_output+0x40>
    return ERR_OK;
 8014248:	2300      	movs	r3, #0
 801424a:	e1ce      	b.n	80145ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014258:	4293      	cmp	r3, r2
 801425a:	bf28      	it	cs
 801425c:	4613      	movcs	r3, r2
 801425e:	b29b      	uxth	r3, r3
 8014260:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014266:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426a:	2b00      	cmp	r3, #0
 801426c:	d10b      	bne.n	8014286 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	8b5b      	ldrh	r3, [r3, #26]
 8014272:	f003 0302 	and.w	r3, r3, #2
 8014276:	2b00      	cmp	r3, #0
 8014278:	f000 81aa 	beq.w	80145d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f000 fdcb 	bl	8014e18 <tcp_send_empty_ack>
 8014282:	4603      	mov	r3, r0
 8014284:	e1b1      	b.n	80145ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014286:	6879      	ldr	r1, [r7, #4]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	3304      	adds	r3, #4
 801428c:	461a      	mov	r2, r3
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f7ff f824 	bl	80132dc <tcp_route>
 8014294:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d102      	bne.n	80142a2 <tcp_output+0x96>
    return ERR_RTE;
 801429c:	f06f 0303 	mvn.w	r3, #3
 80142a0:	e1a3      	b.n	80145ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d003      	beq.n	80142b0 <tcp_output+0xa4>
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d111      	bne.n	80142d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80142b0:	697b      	ldr	r3, [r7, #20]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d002      	beq.n	80142bc <tcp_output+0xb0>
 80142b6:	697b      	ldr	r3, [r7, #20]
 80142b8:	3304      	adds	r3, #4
 80142ba:	e000      	b.n	80142be <tcp_output+0xb2>
 80142bc:	2300      	movs	r3, #0
 80142be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80142c0:	693b      	ldr	r3, [r7, #16]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d102      	bne.n	80142cc <tcp_output+0xc0>
      return ERR_RTE;
 80142c6:	f06f 0303 	mvn.w	r3, #3
 80142ca:	e18e      	b.n	80145ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80142cc:	693b      	ldr	r3, [r7, #16]
 80142ce:	681a      	ldr	r2, [r3, #0]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80142d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d6:	68db      	ldr	r3, [r3, #12]
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	4618      	mov	r0, r3
 80142dc:	f7f8 ffc5 	bl	800d26a <lwip_htonl>
 80142e0:	4602      	mov	r2, r0
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142ea:	8912      	ldrh	r2, [r2, #8]
 80142ec:	4413      	add	r3, r2
 80142ee:	69ba      	ldr	r2, [r7, #24]
 80142f0:	429a      	cmp	r2, r3
 80142f2:	d227      	bcs.n	8014344 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80142fa:	461a      	mov	r2, r3
 80142fc:	69bb      	ldr	r3, [r7, #24]
 80142fe:	4293      	cmp	r3, r2
 8014300:	d114      	bne.n	801432c <tcp_output+0x120>
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014306:	2b00      	cmp	r3, #0
 8014308:	d110      	bne.n	801432c <tcp_output+0x120>
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014310:	2b00      	cmp	r3, #0
 8014312:	d10b      	bne.n	801432c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	2200      	movs	r2, #0
 8014318:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2201      	movs	r2, #1
 8014320:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2200      	movs	r2, #0
 8014328:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	8b5b      	ldrh	r3, [r3, #26]
 8014330:	f003 0302 	and.w	r3, r3, #2
 8014334:	2b00      	cmp	r3, #0
 8014336:	f000 814d 	beq.w	80145d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801433a:	6878      	ldr	r0, [r7, #4]
 801433c:	f000 fd6c 	bl	8014e18 <tcp_send_empty_ack>
 8014340:	4603      	mov	r3, r0
 8014342:	e152      	b.n	80145ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2200      	movs	r2, #0
 8014348:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014350:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014352:	6a3b      	ldr	r3, [r7, #32]
 8014354:	2b00      	cmp	r3, #0
 8014356:	f000 811c 	beq.w	8014592 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801435a:	e002      	b.n	8014362 <tcp_output+0x156>
 801435c:	6a3b      	ldr	r3, [r7, #32]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	623b      	str	r3, [r7, #32]
 8014362:	6a3b      	ldr	r3, [r7, #32]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d1f8      	bne.n	801435c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801436a:	e112      	b.n	8014592 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436e:	68db      	ldr	r3, [r3, #12]
 8014370:	899b      	ldrh	r3, [r3, #12]
 8014372:	b29b      	uxth	r3, r3
 8014374:	4618      	mov	r0, r3
 8014376:	f7f8 ff63 	bl	800d240 <lwip_htons>
 801437a:	4603      	mov	r3, r0
 801437c:	b2db      	uxtb	r3, r3
 801437e:	f003 0304 	and.w	r3, r3, #4
 8014382:	2b00      	cmp	r3, #0
 8014384:	d006      	beq.n	8014394 <tcp_output+0x188>
 8014386:	4b43      	ldr	r3, [pc, #268]	; (8014494 <tcp_output+0x288>)
 8014388:	f240 5236 	movw	r2, #1334	; 0x536
 801438c:	4946      	ldr	r1, [pc, #280]	; (80144a8 <tcp_output+0x29c>)
 801438e:	4843      	ldr	r0, [pc, #268]	; (801449c <tcp_output+0x290>)
 8014390:	f006 fcd4 	bl	801ad3c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014398:	2b00      	cmp	r3, #0
 801439a:	d01f      	beq.n	80143dc <tcp_output+0x1d0>
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	8b5b      	ldrh	r3, [r3, #26]
 80143a0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d119      	bne.n	80143dc <tcp_output+0x1d0>
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d00b      	beq.n	80143c8 <tcp_output+0x1bc>
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d110      	bne.n	80143dc <tcp_output+0x1d0>
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143be:	891a      	ldrh	r2, [r3, #8]
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d209      	bcs.n	80143dc <tcp_output+0x1d0>
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d004      	beq.n	80143dc <tcp_output+0x1d0>
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80143d8:	2b08      	cmp	r3, #8
 80143da:	d901      	bls.n	80143e0 <tcp_output+0x1d4>
 80143dc:	2301      	movs	r3, #1
 80143de:	e000      	b.n	80143e2 <tcp_output+0x1d6>
 80143e0:	2300      	movs	r3, #0
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d106      	bne.n	80143f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	8b5b      	ldrh	r3, [r3, #26]
 80143ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f000 80e4 	beq.w	80145bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	7d1b      	ldrb	r3, [r3, #20]
 80143f8:	2b02      	cmp	r3, #2
 80143fa:	d00d      	beq.n	8014418 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80143fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fe:	68db      	ldr	r3, [r3, #12]
 8014400:	899b      	ldrh	r3, [r3, #12]
 8014402:	b29c      	uxth	r4, r3
 8014404:	2010      	movs	r0, #16
 8014406:	f7f8 ff1b 	bl	800d240 <lwip_htons>
 801440a:	4603      	mov	r3, r0
 801440c:	461a      	mov	r2, r3
 801440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014410:	68db      	ldr	r3, [r3, #12]
 8014412:	4322      	orrs	r2, r4
 8014414:	b292      	uxth	r2, r2
 8014416:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014418:	697a      	ldr	r2, [r7, #20]
 801441a:	6879      	ldr	r1, [r7, #4]
 801441c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801441e:	f000 f909 	bl	8014634 <tcp_output_segment>
 8014422:	4603      	mov	r3, r0
 8014424:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d009      	beq.n	8014442 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	8b5b      	ldrh	r3, [r3, #26]
 8014432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014436:	b29a      	uxth	r2, r3
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	835a      	strh	r2, [r3, #26]
      return err;
 801443c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014440:	e0d3      	b.n	80145ea <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014444:	681a      	ldr	r2, [r3, #0]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	7d1b      	ldrb	r3, [r3, #20]
 801444e:	2b02      	cmp	r3, #2
 8014450:	d006      	beq.n	8014460 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	8b5b      	ldrh	r3, [r3, #26]
 8014456:	f023 0303 	bic.w	r3, r3, #3
 801445a:	b29a      	uxth	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014462:	68db      	ldr	r3, [r3, #12]
 8014464:	685b      	ldr	r3, [r3, #4]
 8014466:	4618      	mov	r0, r3
 8014468:	f7f8 feff 	bl	800d26a <lwip_htonl>
 801446c:	4604      	mov	r4, r0
 801446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014470:	891b      	ldrh	r3, [r3, #8]
 8014472:	461d      	mov	r5, r3
 8014474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014476:	68db      	ldr	r3, [r3, #12]
 8014478:	899b      	ldrh	r3, [r3, #12]
 801447a:	b29b      	uxth	r3, r3
 801447c:	4618      	mov	r0, r3
 801447e:	f7f8 fedf 	bl	800d240 <lwip_htons>
 8014482:	4603      	mov	r3, r0
 8014484:	b2db      	uxtb	r3, r3
 8014486:	f003 0303 	and.w	r3, r3, #3
 801448a:	2b00      	cmp	r3, #0
 801448c:	d00e      	beq.n	80144ac <tcp_output+0x2a0>
 801448e:	2301      	movs	r3, #1
 8014490:	e00d      	b.n	80144ae <tcp_output+0x2a2>
 8014492:	bf00      	nop
 8014494:	0801dfa0 	.word	0x0801dfa0
 8014498:	0801e4e4 	.word	0x0801e4e4
 801449c:	0801dff4 	.word	0x0801dff4
 80144a0:	0801e4fc 	.word	0x0801e4fc
 80144a4:	20018574 	.word	0x20018574
 80144a8:	0801e524 	.word	0x0801e524
 80144ac:	2300      	movs	r3, #0
 80144ae:	442b      	add	r3, r5
 80144b0:	4423      	add	r3, r4
 80144b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	1ad3      	subs	r3, r2, r3
 80144bc:	2b00      	cmp	r3, #0
 80144be:	da02      	bge.n	80144c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	68ba      	ldr	r2, [r7, #8]
 80144c4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80144c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c8:	891b      	ldrh	r3, [r3, #8]
 80144ca:	461c      	mov	r4, r3
 80144cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ce:	68db      	ldr	r3, [r3, #12]
 80144d0:	899b      	ldrh	r3, [r3, #12]
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	4618      	mov	r0, r3
 80144d6:	f7f8 feb3 	bl	800d240 <lwip_htons>
 80144da:	4603      	mov	r3, r0
 80144dc:	b2db      	uxtb	r3, r3
 80144de:	f003 0303 	and.w	r3, r3, #3
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d001      	beq.n	80144ea <tcp_output+0x2de>
 80144e6:	2301      	movs	r3, #1
 80144e8:	e000      	b.n	80144ec <tcp_output+0x2e0>
 80144ea:	2300      	movs	r3, #0
 80144ec:	4423      	add	r3, r4
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d049      	beq.n	8014586 <tcp_output+0x37a>
      seg->next = NULL;
 80144f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144f4:	2200      	movs	r2, #0
 80144f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d105      	bne.n	801450c <tcp_output+0x300>
        pcb->unacked = seg;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014504:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014508:	623b      	str	r3, [r7, #32]
 801450a:	e03f      	b.n	801458c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	4618      	mov	r0, r3
 8014514:	f7f8 fea9 	bl	800d26a <lwip_htonl>
 8014518:	4604      	mov	r4, r0
 801451a:	6a3b      	ldr	r3, [r7, #32]
 801451c:	68db      	ldr	r3, [r3, #12]
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	4618      	mov	r0, r3
 8014522:	f7f8 fea2 	bl	800d26a <lwip_htonl>
 8014526:	4603      	mov	r3, r0
 8014528:	1ae3      	subs	r3, r4, r3
 801452a:	2b00      	cmp	r3, #0
 801452c:	da24      	bge.n	8014578 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	3370      	adds	r3, #112	; 0x70
 8014532:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014534:	e002      	b.n	801453c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014536:	69fb      	ldr	r3, [r7, #28]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801453c:	69fb      	ldr	r3, [r7, #28]
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d011      	beq.n	8014568 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014544:	69fb      	ldr	r3, [r7, #28]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	68db      	ldr	r3, [r3, #12]
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	4618      	mov	r0, r3
 801454e:	f7f8 fe8c 	bl	800d26a <lwip_htonl>
 8014552:	4604      	mov	r4, r0
 8014554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014556:	68db      	ldr	r3, [r3, #12]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	4618      	mov	r0, r3
 801455c:	f7f8 fe85 	bl	800d26a <lwip_htonl>
 8014560:	4603      	mov	r3, r0
 8014562:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014564:	2b00      	cmp	r3, #0
 8014566:	dbe6      	blt.n	8014536 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014568:	69fb      	ldr	r3, [r7, #28]
 801456a:	681a      	ldr	r2, [r3, #0]
 801456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801456e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014570:	69fb      	ldr	r3, [r7, #28]
 8014572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014574:	601a      	str	r2, [r3, #0]
 8014576:	e009      	b.n	801458c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014578:	6a3b      	ldr	r3, [r7, #32]
 801457a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801457c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801457e:	6a3b      	ldr	r3, [r7, #32]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	623b      	str	r3, [r7, #32]
 8014584:	e002      	b.n	801458c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014586:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014588:	f7fb ff1d 	bl	80103c6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014590:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014594:	2b00      	cmp	r3, #0
 8014596:	d012      	beq.n	80145be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801459a:	68db      	ldr	r3, [r3, #12]
 801459c:	685b      	ldr	r3, [r3, #4]
 801459e:	4618      	mov	r0, r3
 80145a0:	f7f8 fe63 	bl	800d26a <lwip_htonl>
 80145a4:	4602      	mov	r2, r0
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145aa:	1ad3      	subs	r3, r2, r3
 80145ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145ae:	8912      	ldrh	r2, [r2, #8]
 80145b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80145b2:	69ba      	ldr	r2, [r7, #24]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	f4bf aed9 	bcs.w	801436c <tcp_output+0x160>
 80145ba:	e000      	b.n	80145be <tcp_output+0x3b2>
      break;
 80145bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d108      	bne.n	80145d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2200      	movs	r2, #0
 80145ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80145ce:	e004      	b.n	80145da <tcp_output+0x3ce>
    goto output_done;
 80145d0:	bf00      	nop
 80145d2:	e002      	b.n	80145da <tcp_output+0x3ce>
    goto output_done;
 80145d4:	bf00      	nop
 80145d6:	e000      	b.n	80145da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80145d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	8b5b      	ldrh	r3, [r3, #26]
 80145de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80145e2:	b29a      	uxth	r2, r3
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80145e8:	2300      	movs	r3, #0
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3728      	adds	r7, #40	; 0x28
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bdb0      	pop	{r4, r5, r7, pc}
 80145f2:	bf00      	nop

080145f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b082      	sub	sp, #8
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d106      	bne.n	8014610 <tcp_output_segment_busy+0x1c>
 8014602:	4b09      	ldr	r3, [pc, #36]	; (8014628 <tcp_output_segment_busy+0x34>)
 8014604:	f240 529a 	movw	r2, #1434	; 0x59a
 8014608:	4908      	ldr	r1, [pc, #32]	; (801462c <tcp_output_segment_busy+0x38>)
 801460a:	4809      	ldr	r0, [pc, #36]	; (8014630 <tcp_output_segment_busy+0x3c>)
 801460c:	f006 fb96 	bl	801ad3c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	685b      	ldr	r3, [r3, #4]
 8014614:	7b9b      	ldrb	r3, [r3, #14]
 8014616:	2b01      	cmp	r3, #1
 8014618:	d001      	beq.n	801461e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801461a:	2301      	movs	r3, #1
 801461c:	e000      	b.n	8014620 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801461e:	2300      	movs	r3, #0
}
 8014620:	4618      	mov	r0, r3
 8014622:	3708      	adds	r7, #8
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}
 8014628:	0801dfa0 	.word	0x0801dfa0
 801462c:	0801e53c 	.word	0x0801e53c
 8014630:	0801dff4 	.word	0x0801dff4

08014634 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014634:	b5b0      	push	{r4, r5, r7, lr}
 8014636:	b08c      	sub	sp, #48	; 0x30
 8014638:	af04      	add	r7, sp, #16
 801463a:	60f8      	str	r0, [r7, #12]
 801463c:	60b9      	str	r1, [r7, #8]
 801463e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d106      	bne.n	8014654 <tcp_output_segment+0x20>
 8014646:	4b63      	ldr	r3, [pc, #396]	; (80147d4 <tcp_output_segment+0x1a0>)
 8014648:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801464c:	4962      	ldr	r1, [pc, #392]	; (80147d8 <tcp_output_segment+0x1a4>)
 801464e:	4863      	ldr	r0, [pc, #396]	; (80147dc <tcp_output_segment+0x1a8>)
 8014650:	f006 fb74 	bl	801ad3c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d106      	bne.n	8014668 <tcp_output_segment+0x34>
 801465a:	4b5e      	ldr	r3, [pc, #376]	; (80147d4 <tcp_output_segment+0x1a0>)
 801465c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014660:	495f      	ldr	r1, [pc, #380]	; (80147e0 <tcp_output_segment+0x1ac>)
 8014662:	485e      	ldr	r0, [pc, #376]	; (80147dc <tcp_output_segment+0x1a8>)
 8014664:	f006 fb6a 	bl	801ad3c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d106      	bne.n	801467c <tcp_output_segment+0x48>
 801466e:	4b59      	ldr	r3, [pc, #356]	; (80147d4 <tcp_output_segment+0x1a0>)
 8014670:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014674:	495b      	ldr	r1, [pc, #364]	; (80147e4 <tcp_output_segment+0x1b0>)
 8014676:	4859      	ldr	r0, [pc, #356]	; (80147dc <tcp_output_segment+0x1a8>)
 8014678:	f006 fb60 	bl	801ad3c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801467c:	68f8      	ldr	r0, [r7, #12]
 801467e:	f7ff ffb9 	bl	80145f4 <tcp_output_segment_busy>
 8014682:	4603      	mov	r3, r0
 8014684:	2b00      	cmp	r3, #0
 8014686:	d001      	beq.n	801468c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014688:	2300      	movs	r3, #0
 801468a:	e09f      	b.n	80147cc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	68dc      	ldr	r4, [r3, #12]
 8014694:	4610      	mov	r0, r2
 8014696:	f7f8 fde8 	bl	800d26a <lwip_htonl>
 801469a:	4603      	mov	r3, r0
 801469c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	68dc      	ldr	r4, [r3, #12]
 80146a6:	4610      	mov	r0, r2
 80146a8:	f7f8 fdca 	bl	800d240 <lwip_htons>
 80146ac:	4603      	mov	r3, r0
 80146ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146b4:	68ba      	ldr	r2, [r7, #8]
 80146b6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80146b8:	441a      	add	r2, r3
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	68db      	ldr	r3, [r3, #12]
 80146c2:	3314      	adds	r3, #20
 80146c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	7a9b      	ldrb	r3, [r3, #10]
 80146ca:	f003 0301 	and.w	r3, r3, #1
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d015      	beq.n	80146fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	3304      	adds	r3, #4
 80146d6:	461a      	mov	r2, r3
 80146d8:	6879      	ldr	r1, [r7, #4]
 80146da:	f44f 7006 	mov.w	r0, #536	; 0x218
 80146de:	f7fc fa37 	bl	8010b50 <tcp_eff_send_mss_netif>
 80146e2:	4603      	mov	r3, r0
 80146e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80146e6:	8b7b      	ldrh	r3, [r7, #26]
 80146e8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7f8 fdbc 	bl	800d26a <lwip_htonl>
 80146f2:	4602      	mov	r2, r0
 80146f4:	69fb      	ldr	r3, [r7, #28]
 80146f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	3304      	adds	r3, #4
 80146fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014704:	2b00      	cmp	r3, #0
 8014706:	da02      	bge.n	801470e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	2200      	movs	r2, #0
 801470c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014712:	2b00      	cmp	r3, #0
 8014714:	d10c      	bne.n	8014730 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014716:	4b34      	ldr	r3, [pc, #208]	; (80147e8 <tcp_output_segment+0x1b4>)
 8014718:	681a      	ldr	r2, [r3, #0]
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	68db      	ldr	r3, [r3, #12]
 8014722:	685b      	ldr	r3, [r3, #4]
 8014724:	4618      	mov	r0, r3
 8014726:	f7f8 fda0 	bl	800d26a <lwip_htonl>
 801472a:	4602      	mov	r2, r0
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	68da      	ldr	r2, [r3, #12]
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	685b      	ldr	r3, [r3, #4]
 8014738:	685b      	ldr	r3, [r3, #4]
 801473a:	1ad3      	subs	r3, r2, r3
 801473c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	685b      	ldr	r3, [r3, #4]
 8014742:	8959      	ldrh	r1, [r3, #10]
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	685b      	ldr	r3, [r3, #4]
 8014748:	8b3a      	ldrh	r2, [r7, #24]
 801474a:	1a8a      	subs	r2, r1, r2
 801474c:	b292      	uxth	r2, r2
 801474e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	8919      	ldrh	r1, [r3, #8]
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	8b3a      	ldrh	r2, [r7, #24]
 801475c:	1a8a      	subs	r2, r1, r2
 801475e:	b292      	uxth	r2, r2
 8014760:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	685b      	ldr	r3, [r3, #4]
 8014766:	68fa      	ldr	r2, [r7, #12]
 8014768:	68d2      	ldr	r2, [r2, #12]
 801476a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	68db      	ldr	r3, [r3, #12]
 8014770:	2200      	movs	r2, #0
 8014772:	741a      	strb	r2, [r3, #16]
 8014774:	2200      	movs	r2, #0
 8014776:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	68db      	ldr	r3, [r3, #12]
 801477c:	f103 0214 	add.w	r2, r3, #20
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	7a9b      	ldrb	r3, [r3, #10]
 8014784:	009b      	lsls	r3, r3, #2
 8014786:	f003 0304 	and.w	r3, r3, #4
 801478a:	4413      	add	r3, r2
 801478c:	69fa      	ldr	r2, [r7, #28]
 801478e:	429a      	cmp	r2, r3
 8014790:	d006      	beq.n	80147a0 <tcp_output_segment+0x16c>
 8014792:	4b10      	ldr	r3, [pc, #64]	; (80147d4 <tcp_output_segment+0x1a0>)
 8014794:	f240 621c 	movw	r2, #1564	; 0x61c
 8014798:	4914      	ldr	r1, [pc, #80]	; (80147ec <tcp_output_segment+0x1b8>)
 801479a:	4810      	ldr	r0, [pc, #64]	; (80147dc <tcp_output_segment+0x1a8>)
 801479c:	f006 face 	bl	801ad3c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	6858      	ldr	r0, [r3, #4]
 80147a4:	68b9      	ldr	r1, [r7, #8]
 80147a6:	68bb      	ldr	r3, [r7, #8]
 80147a8:	1d1c      	adds	r4, r3, #4
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	7add      	ldrb	r5, [r3, #11]
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	7a9b      	ldrb	r3, [r3, #10]
 80147b2:	687a      	ldr	r2, [r7, #4]
 80147b4:	9202      	str	r2, [sp, #8]
 80147b6:	2206      	movs	r2, #6
 80147b8:	9201      	str	r2, [sp, #4]
 80147ba:	9300      	str	r3, [sp, #0]
 80147bc:	462b      	mov	r3, r5
 80147be:	4622      	mov	r2, r4
 80147c0:	f002 fdb0 	bl	8017324 <ip4_output_if>
 80147c4:	4603      	mov	r3, r0
 80147c6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80147c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80147cc:	4618      	mov	r0, r3
 80147ce:	3720      	adds	r7, #32
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bdb0      	pop	{r4, r5, r7, pc}
 80147d4:	0801dfa0 	.word	0x0801dfa0
 80147d8:	0801e564 	.word	0x0801e564
 80147dc:	0801dff4 	.word	0x0801dff4
 80147e0:	0801e584 	.word	0x0801e584
 80147e4:	0801e5a4 	.word	0x0801e5a4
 80147e8:	20018564 	.word	0x20018564
 80147ec:	0801e5c8 	.word	0x0801e5c8

080147f0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80147f0:	b5b0      	push	{r4, r5, r7, lr}
 80147f2:	b084      	sub	sp, #16
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d106      	bne.n	801480c <tcp_rexmit_rto_prepare+0x1c>
 80147fe:	4b31      	ldr	r3, [pc, #196]	; (80148c4 <tcp_rexmit_rto_prepare+0xd4>)
 8014800:	f240 6263 	movw	r2, #1635	; 0x663
 8014804:	4930      	ldr	r1, [pc, #192]	; (80148c8 <tcp_rexmit_rto_prepare+0xd8>)
 8014806:	4831      	ldr	r0, [pc, #196]	; (80148cc <tcp_rexmit_rto_prepare+0xdc>)
 8014808:	f006 fa98 	bl	801ad3c <iprintf>

  if (pcb->unacked == NULL) {
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014810:	2b00      	cmp	r3, #0
 8014812:	d102      	bne.n	801481a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014814:	f06f 0305 	mvn.w	r3, #5
 8014818:	e050      	b.n	80148bc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801481e:	60fb      	str	r3, [r7, #12]
 8014820:	e00b      	b.n	801483a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014822:	68f8      	ldr	r0, [r7, #12]
 8014824:	f7ff fee6 	bl	80145f4 <tcp_output_segment_busy>
 8014828:	4603      	mov	r3, r0
 801482a:	2b00      	cmp	r3, #0
 801482c:	d002      	beq.n	8014834 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801482e:	f06f 0305 	mvn.w	r3, #5
 8014832:	e043      	b.n	80148bc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	60fb      	str	r3, [r7, #12]
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d1ef      	bne.n	8014822 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014842:	68f8      	ldr	r0, [r7, #12]
 8014844:	f7ff fed6 	bl	80145f4 <tcp_output_segment_busy>
 8014848:	4603      	mov	r3, r0
 801484a:	2b00      	cmp	r3, #0
 801484c:	d002      	beq.n	8014854 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801484e:	f06f 0305 	mvn.w	r3, #5
 8014852:	e033      	b.n	80148bc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2200      	movs	r2, #0
 8014868:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	8b5b      	ldrh	r3, [r3, #26]
 801486e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014872:	b29a      	uxth	r2, r3
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	68db      	ldr	r3, [r3, #12]
 801487c:	685b      	ldr	r3, [r3, #4]
 801487e:	4618      	mov	r0, r3
 8014880:	f7f8 fcf3 	bl	800d26a <lwip_htonl>
 8014884:	4604      	mov	r4, r0
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	891b      	ldrh	r3, [r3, #8]
 801488a:	461d      	mov	r5, r3
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	68db      	ldr	r3, [r3, #12]
 8014890:	899b      	ldrh	r3, [r3, #12]
 8014892:	b29b      	uxth	r3, r3
 8014894:	4618      	mov	r0, r3
 8014896:	f7f8 fcd3 	bl	800d240 <lwip_htons>
 801489a:	4603      	mov	r3, r0
 801489c:	b2db      	uxtb	r3, r3
 801489e:	f003 0303 	and.w	r3, r3, #3
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d001      	beq.n	80148aa <tcp_rexmit_rto_prepare+0xba>
 80148a6:	2301      	movs	r3, #1
 80148a8:	e000      	b.n	80148ac <tcp_rexmit_rto_prepare+0xbc>
 80148aa:	2300      	movs	r3, #0
 80148ac:	442b      	add	r3, r5
 80148ae:	18e2      	adds	r2, r4, r3
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	2200      	movs	r2, #0
 80148b8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80148ba:	2300      	movs	r3, #0
}
 80148bc:	4618      	mov	r0, r3
 80148be:	3710      	adds	r7, #16
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bdb0      	pop	{r4, r5, r7, pc}
 80148c4:	0801dfa0 	.word	0x0801dfa0
 80148c8:	0801e5dc 	.word	0x0801e5dc
 80148cc:	0801dff4 	.word	0x0801dff4

080148d0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b082      	sub	sp, #8
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d106      	bne.n	80148ec <tcp_rexmit_rto_commit+0x1c>
 80148de:	4b0d      	ldr	r3, [pc, #52]	; (8014914 <tcp_rexmit_rto_commit+0x44>)
 80148e0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80148e4:	490c      	ldr	r1, [pc, #48]	; (8014918 <tcp_rexmit_rto_commit+0x48>)
 80148e6:	480d      	ldr	r0, [pc, #52]	; (801491c <tcp_rexmit_rto_commit+0x4c>)
 80148e8:	f006 fa28 	bl	801ad3c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148f2:	2bff      	cmp	r3, #255	; 0xff
 80148f4:	d007      	beq.n	8014906 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148fc:	3301      	adds	r3, #1
 80148fe:	b2da      	uxtb	r2, r3
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	f7ff fc80 	bl	801420c <tcp_output>
}
 801490c:	bf00      	nop
 801490e:	3708      	adds	r7, #8
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}
 8014914:	0801dfa0 	.word	0x0801dfa0
 8014918:	0801e600 	.word	0x0801e600
 801491c:	0801dff4 	.word	0x0801dff4

08014920 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b082      	sub	sp, #8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d106      	bne.n	801493c <tcp_rexmit_rto+0x1c>
 801492e:	4b0a      	ldr	r3, [pc, #40]	; (8014958 <tcp_rexmit_rto+0x38>)
 8014930:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014934:	4909      	ldr	r1, [pc, #36]	; (801495c <tcp_rexmit_rto+0x3c>)
 8014936:	480a      	ldr	r0, [pc, #40]	; (8014960 <tcp_rexmit_rto+0x40>)
 8014938:	f006 fa00 	bl	801ad3c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f7ff ff57 	bl	80147f0 <tcp_rexmit_rto_prepare>
 8014942:	4603      	mov	r3, r0
 8014944:	2b00      	cmp	r3, #0
 8014946:	d102      	bne.n	801494e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7ff ffc1 	bl	80148d0 <tcp_rexmit_rto_commit>
  }
}
 801494e:	bf00      	nop
 8014950:	3708      	adds	r7, #8
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	0801dfa0 	.word	0x0801dfa0
 801495c:	0801e624 	.word	0x0801e624
 8014960:	0801dff4 	.word	0x0801dff4

08014964 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014964:	b590      	push	{r4, r7, lr}
 8014966:	b085      	sub	sp, #20
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d106      	bne.n	8014980 <tcp_rexmit+0x1c>
 8014972:	4b2f      	ldr	r3, [pc, #188]	; (8014a30 <tcp_rexmit+0xcc>)
 8014974:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014978:	492e      	ldr	r1, [pc, #184]	; (8014a34 <tcp_rexmit+0xd0>)
 801497a:	482f      	ldr	r0, [pc, #188]	; (8014a38 <tcp_rexmit+0xd4>)
 801497c:	f006 f9de 	bl	801ad3c <iprintf>

  if (pcb->unacked == NULL) {
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014984:	2b00      	cmp	r3, #0
 8014986:	d102      	bne.n	801498e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014988:	f06f 0305 	mvn.w	r3, #5
 801498c:	e04c      	b.n	8014a28 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014992:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014994:	68b8      	ldr	r0, [r7, #8]
 8014996:	f7ff fe2d 	bl	80145f4 <tcp_output_segment_busy>
 801499a:	4603      	mov	r3, r0
 801499c:	2b00      	cmp	r3, #0
 801499e:	d002      	beq.n	80149a6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80149a0:	f06f 0305 	mvn.w	r3, #5
 80149a4:	e040      	b.n	8014a28 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	681a      	ldr	r2, [r3, #0]
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	336c      	adds	r3, #108	; 0x6c
 80149b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80149b4:	e002      	b.n	80149bc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d011      	beq.n	80149e8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	68db      	ldr	r3, [r3, #12]
 80149ca:	685b      	ldr	r3, [r3, #4]
 80149cc:	4618      	mov	r0, r3
 80149ce:	f7f8 fc4c 	bl	800d26a <lwip_htonl>
 80149d2:	4604      	mov	r4, r0
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	68db      	ldr	r3, [r3, #12]
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	4618      	mov	r0, r3
 80149dc:	f7f8 fc45 	bl	800d26a <lwip_htonl>
 80149e0:	4603      	mov	r3, r0
 80149e2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	dbe6      	blt.n	80149b6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	681a      	ldr	r2, [r3, #0]
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	68ba      	ldr	r2, [r7, #8]
 80149f4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d103      	bne.n	8014a06 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	2200      	movs	r2, #0
 8014a02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014a0c:	2bff      	cmp	r3, #255	; 0xff
 8014a0e:	d007      	beq.n	8014a20 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014a16:	3301      	adds	r3, #1
 8014a18:	b2da      	uxtb	r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2200      	movs	r2, #0
 8014a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014a26:	2300      	movs	r3, #0
}
 8014a28:	4618      	mov	r0, r3
 8014a2a:	3714      	adds	r7, #20
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd90      	pop	{r4, r7, pc}
 8014a30:	0801dfa0 	.word	0x0801dfa0
 8014a34:	0801e640 	.word	0x0801e640
 8014a38:	0801dff4 	.word	0x0801dff4

08014a3c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b082      	sub	sp, #8
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d106      	bne.n	8014a58 <tcp_rexmit_fast+0x1c>
 8014a4a:	4b2a      	ldr	r3, [pc, #168]	; (8014af4 <tcp_rexmit_fast+0xb8>)
 8014a4c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014a50:	4929      	ldr	r1, [pc, #164]	; (8014af8 <tcp_rexmit_fast+0xbc>)
 8014a52:	482a      	ldr	r0, [pc, #168]	; (8014afc <tcp_rexmit_fast+0xc0>)
 8014a54:	f006 f972 	bl	801ad3c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d044      	beq.n	8014aea <tcp_rexmit_fast+0xae>
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	8b5b      	ldrh	r3, [r3, #26]
 8014a64:	f003 0304 	and.w	r3, r3, #4
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d13e      	bne.n	8014aea <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f7ff ff79 	bl	8014964 <tcp_rexmit>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d138      	bne.n	8014aea <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014a84:	4293      	cmp	r3, r2
 8014a86:	bf28      	it	cs
 8014a88:	4613      	movcs	r3, r2
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	0fda      	lsrs	r2, r3, #31
 8014a8e:	4413      	add	r3, r2
 8014a90:	105b      	asrs	r3, r3, #1
 8014a92:	b29a      	uxth	r2, r3
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014aa6:	005b      	lsls	r3, r3, #1
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d206      	bcs.n	8014aba <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	b29a      	uxth	r2, r3
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	0049      	lsls	r1, r1, #1
 8014ac8:	440b      	add	r3, r1
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	4413      	add	r3, r2
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	8b5b      	ldrh	r3, [r3, #26]
 8014ada:	f043 0304 	orr.w	r3, r3, #4
 8014ade:	b29a      	uxth	r2, r3
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014aea:	bf00      	nop
 8014aec:	3708      	adds	r7, #8
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	0801dfa0 	.word	0x0801dfa0
 8014af8:	0801e658 	.word	0x0801e658
 8014afc:	0801dff4 	.word	0x0801dff4

08014b00 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b086      	sub	sp, #24
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	607b      	str	r3, [r7, #4]
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	817b      	strh	r3, [r7, #10]
 8014b0e:	4613      	mov	r3, r2
 8014b10:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014b12:	897a      	ldrh	r2, [r7, #10]
 8014b14:	893b      	ldrh	r3, [r7, #8]
 8014b16:	4413      	add	r3, r2
 8014b18:	b29b      	uxth	r3, r3
 8014b1a:	3314      	adds	r3, #20
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b22:	4619      	mov	r1, r3
 8014b24:	2022      	movs	r0, #34	; 0x22
 8014b26:	f7f9 fc8b 	bl	800e440 <pbuf_alloc>
 8014b2a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d04d      	beq.n	8014bce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014b32:	897b      	ldrh	r3, [r7, #10]
 8014b34:	3313      	adds	r3, #19
 8014b36:	697a      	ldr	r2, [r7, #20]
 8014b38:	8952      	ldrh	r2, [r2, #10]
 8014b3a:	4293      	cmp	r3, r2
 8014b3c:	db06      	blt.n	8014b4c <tcp_output_alloc_header_common+0x4c>
 8014b3e:	4b26      	ldr	r3, [pc, #152]	; (8014bd8 <tcp_output_alloc_header_common+0xd8>)
 8014b40:	f240 7223 	movw	r2, #1827	; 0x723
 8014b44:	4925      	ldr	r1, [pc, #148]	; (8014bdc <tcp_output_alloc_header_common+0xdc>)
 8014b46:	4826      	ldr	r0, [pc, #152]	; (8014be0 <tcp_output_alloc_header_common+0xe0>)
 8014b48:	f006 f8f8 	bl	801ad3c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	685b      	ldr	r3, [r3, #4]
 8014b50:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014b52:	8c3b      	ldrh	r3, [r7, #32]
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7f8 fb73 	bl	800d240 <lwip_htons>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	461a      	mov	r2, r3
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014b62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7f8 fb6b 	bl	800d240 <lwip_htons>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	693b      	ldr	r3, [r7, #16]
 8014b70:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	687a      	ldr	r2, [r7, #4]
 8014b76:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014b78:	68f8      	ldr	r0, [r7, #12]
 8014b7a:	f7f8 fb76 	bl	800d26a <lwip_htonl>
 8014b7e:	4602      	mov	r2, r0
 8014b80:	693b      	ldr	r3, [r7, #16]
 8014b82:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014b84:	897b      	ldrh	r3, [r7, #10]
 8014b86:	089b      	lsrs	r3, r3, #2
 8014b88:	b29b      	uxth	r3, r3
 8014b8a:	3305      	adds	r3, #5
 8014b8c:	b29b      	uxth	r3, r3
 8014b8e:	031b      	lsls	r3, r3, #12
 8014b90:	b29a      	uxth	r2, r3
 8014b92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	4313      	orrs	r3, r2
 8014b9a:	b29b      	uxth	r3, r3
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	f7f8 fb4f 	bl	800d240 <lwip_htons>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	461a      	mov	r2, r3
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014baa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7f8 fb47 	bl	800d240 <lwip_htons>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014bba:	693b      	ldr	r3, [r7, #16]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	741a      	strb	r2, [r3, #16]
 8014bc0:	2200      	movs	r2, #0
 8014bc2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	749a      	strb	r2, [r3, #18]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014bce:	697b      	ldr	r3, [r7, #20]
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	3718      	adds	r7, #24
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	0801dfa0 	.word	0x0801dfa0
 8014bdc:	0801e678 	.word	0x0801e678
 8014be0:	0801dff4 	.word	0x0801dff4

08014be4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014be4:	b5b0      	push	{r4, r5, r7, lr}
 8014be6:	b08a      	sub	sp, #40	; 0x28
 8014be8:	af04      	add	r7, sp, #16
 8014bea:	60f8      	str	r0, [r7, #12]
 8014bec:	607b      	str	r3, [r7, #4]
 8014bee:	460b      	mov	r3, r1
 8014bf0:	817b      	strh	r3, [r7, #10]
 8014bf2:	4613      	mov	r3, r2
 8014bf4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d106      	bne.n	8014c0a <tcp_output_alloc_header+0x26>
 8014bfc:	4b15      	ldr	r3, [pc, #84]	; (8014c54 <tcp_output_alloc_header+0x70>)
 8014bfe:	f240 7242 	movw	r2, #1858	; 0x742
 8014c02:	4915      	ldr	r1, [pc, #84]	; (8014c58 <tcp_output_alloc_header+0x74>)
 8014c04:	4815      	ldr	r0, [pc, #84]	; (8014c5c <tcp_output_alloc_header+0x78>)
 8014c06:	f006 f899 	bl	801ad3c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	8adb      	ldrh	r3, [r3, #22]
 8014c12:	68fa      	ldr	r2, [r7, #12]
 8014c14:	8b12      	ldrh	r2, [r2, #24]
 8014c16:	68f9      	ldr	r1, [r7, #12]
 8014c18:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014c1a:	893d      	ldrh	r5, [r7, #8]
 8014c1c:	897c      	ldrh	r4, [r7, #10]
 8014c1e:	9103      	str	r1, [sp, #12]
 8014c20:	2110      	movs	r1, #16
 8014c22:	9102      	str	r1, [sp, #8]
 8014c24:	9201      	str	r2, [sp, #4]
 8014c26:	9300      	str	r3, [sp, #0]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	462a      	mov	r2, r5
 8014c2c:	4621      	mov	r1, r4
 8014c2e:	f7ff ff67 	bl	8014b00 <tcp_output_alloc_header_common>
 8014c32:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d006      	beq.n	8014c48 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c3e:	68fa      	ldr	r2, [r7, #12]
 8014c40:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014c42:	441a      	add	r2, r3
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014c48:	697b      	ldr	r3, [r7, #20]
}
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3718      	adds	r7, #24
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bdb0      	pop	{r4, r5, r7, pc}
 8014c52:	bf00      	nop
 8014c54:	0801dfa0 	.word	0x0801dfa0
 8014c58:	0801e6a8 	.word	0x0801e6a8
 8014c5c:	0801dff4 	.word	0x0801dff4

08014c60 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b088      	sub	sp, #32
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	60f8      	str	r0, [r7, #12]
 8014c68:	60b9      	str	r1, [r7, #8]
 8014c6a:	4611      	mov	r1, r2
 8014c6c:	461a      	mov	r2, r3
 8014c6e:	460b      	mov	r3, r1
 8014c70:	71fb      	strb	r3, [r7, #7]
 8014c72:	4613      	mov	r3, r2
 8014c74:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014c76:	2300      	movs	r3, #0
 8014c78:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d106      	bne.n	8014c8e <tcp_output_fill_options+0x2e>
 8014c80:	4b13      	ldr	r3, [pc, #76]	; (8014cd0 <tcp_output_fill_options+0x70>)
 8014c82:	f240 7256 	movw	r2, #1878	; 0x756
 8014c86:	4913      	ldr	r1, [pc, #76]	; (8014cd4 <tcp_output_fill_options+0x74>)
 8014c88:	4813      	ldr	r0, [pc, #76]	; (8014cd8 <tcp_output_fill_options+0x78>)
 8014c8a:	f006 f857 	bl	801ad3c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014c8e:	68bb      	ldr	r3, [r7, #8]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014c94:	69bb      	ldr	r3, [r7, #24]
 8014c96:	3314      	adds	r3, #20
 8014c98:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014c9a:	69bb      	ldr	r3, [r7, #24]
 8014c9c:	f103 0214 	add.w	r2, r3, #20
 8014ca0:	8bfb      	ldrh	r3, [r7, #30]
 8014ca2:	009b      	lsls	r3, r3, #2
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	79fb      	ldrb	r3, [r7, #7]
 8014ca8:	009b      	lsls	r3, r3, #2
 8014caa:	f003 0304 	and.w	r3, r3, #4
 8014cae:	440b      	add	r3, r1
 8014cb0:	4413      	add	r3, r2
 8014cb2:	697a      	ldr	r2, [r7, #20]
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d006      	beq.n	8014cc6 <tcp_output_fill_options+0x66>
 8014cb8:	4b05      	ldr	r3, [pc, #20]	; (8014cd0 <tcp_output_fill_options+0x70>)
 8014cba:	f240 7275 	movw	r2, #1909	; 0x775
 8014cbe:	4907      	ldr	r1, [pc, #28]	; (8014cdc <tcp_output_fill_options+0x7c>)
 8014cc0:	4805      	ldr	r0, [pc, #20]	; (8014cd8 <tcp_output_fill_options+0x78>)
 8014cc2:	f006 f83b 	bl	801ad3c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014cc6:	bf00      	nop
 8014cc8:	3720      	adds	r7, #32
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	0801dfa0 	.word	0x0801dfa0
 8014cd4:	0801e6d0 	.word	0x0801e6d0
 8014cd8:	0801dff4 	.word	0x0801dff4
 8014cdc:	0801e5c8 	.word	0x0801e5c8

08014ce0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b08a      	sub	sp, #40	; 0x28
 8014ce4:	af04      	add	r7, sp, #16
 8014ce6:	60f8      	str	r0, [r7, #12]
 8014ce8:	60b9      	str	r1, [r7, #8]
 8014cea:	607a      	str	r2, [r7, #4]
 8014cec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d106      	bne.n	8014d02 <tcp_output_control_segment+0x22>
 8014cf4:	4b1c      	ldr	r3, [pc, #112]	; (8014d68 <tcp_output_control_segment+0x88>)
 8014cf6:	f240 7287 	movw	r2, #1927	; 0x787
 8014cfa:	491c      	ldr	r1, [pc, #112]	; (8014d6c <tcp_output_control_segment+0x8c>)
 8014cfc:	481c      	ldr	r0, [pc, #112]	; (8014d70 <tcp_output_control_segment+0x90>)
 8014cfe:	f006 f81d 	bl	801ad3c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014d02:	683a      	ldr	r2, [r7, #0]
 8014d04:	6879      	ldr	r1, [r7, #4]
 8014d06:	68f8      	ldr	r0, [r7, #12]
 8014d08:	f7fe fae8 	bl	80132dc <tcp_route>
 8014d0c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d102      	bne.n	8014d1a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014d14:	23fc      	movs	r3, #252	; 0xfc
 8014d16:	75fb      	strb	r3, [r7, #23]
 8014d18:	e01c      	b.n	8014d54 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d006      	beq.n	8014d2e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	7adb      	ldrb	r3, [r3, #11]
 8014d24:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	7a9b      	ldrb	r3, [r3, #10]
 8014d2a:	757b      	strb	r3, [r7, #21]
 8014d2c:	e003      	b.n	8014d36 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014d2e:	23ff      	movs	r3, #255	; 0xff
 8014d30:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014d32:	2300      	movs	r3, #0
 8014d34:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014d36:	7dba      	ldrb	r2, [r7, #22]
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	9302      	str	r3, [sp, #8]
 8014d3c:	2306      	movs	r3, #6
 8014d3e:	9301      	str	r3, [sp, #4]
 8014d40:	7d7b      	ldrb	r3, [r7, #21]
 8014d42:	9300      	str	r3, [sp, #0]
 8014d44:	4613      	mov	r3, r2
 8014d46:	683a      	ldr	r2, [r7, #0]
 8014d48:	6879      	ldr	r1, [r7, #4]
 8014d4a:	68b8      	ldr	r0, [r7, #8]
 8014d4c:	f002 faea 	bl	8017324 <ip4_output_if>
 8014d50:	4603      	mov	r3, r0
 8014d52:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014d54:	68b8      	ldr	r0, [r7, #8]
 8014d56:	f7f9 fe89 	bl	800ea6c <pbuf_free>
  return err;
 8014d5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3718      	adds	r7, #24
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	0801dfa0 	.word	0x0801dfa0
 8014d6c:	0801e6f8 	.word	0x0801e6f8
 8014d70:	0801dff4 	.word	0x0801dff4

08014d74 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014d74:	b590      	push	{r4, r7, lr}
 8014d76:	b08b      	sub	sp, #44	; 0x2c
 8014d78:	af04      	add	r7, sp, #16
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	607a      	str	r2, [r7, #4]
 8014d80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d106      	bne.n	8014d96 <tcp_rst+0x22>
 8014d88:	4b1f      	ldr	r3, [pc, #124]	; (8014e08 <tcp_rst+0x94>)
 8014d8a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014d8e:	491f      	ldr	r1, [pc, #124]	; (8014e0c <tcp_rst+0x98>)
 8014d90:	481f      	ldr	r0, [pc, #124]	; (8014e10 <tcp_rst+0x9c>)
 8014d92:	f005 ffd3 	bl	801ad3c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d106      	bne.n	8014daa <tcp_rst+0x36>
 8014d9c:	4b1a      	ldr	r3, [pc, #104]	; (8014e08 <tcp_rst+0x94>)
 8014d9e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014da2:	491c      	ldr	r1, [pc, #112]	; (8014e14 <tcp_rst+0xa0>)
 8014da4:	481a      	ldr	r0, [pc, #104]	; (8014e10 <tcp_rst+0x9c>)
 8014da6:	f005 ffc9 	bl	801ad3c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014daa:	2300      	movs	r3, #0
 8014dac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014dae:	f246 0308 	movw	r3, #24584	; 0x6008
 8014db2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014db4:	7dfb      	ldrb	r3, [r7, #23]
 8014db6:	b29c      	uxth	r4, r3
 8014db8:	68b8      	ldr	r0, [r7, #8]
 8014dba:	f7f8 fa56 	bl	800d26a <lwip_htonl>
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	8abb      	ldrh	r3, [r7, #20]
 8014dc2:	9303      	str	r3, [sp, #12]
 8014dc4:	2314      	movs	r3, #20
 8014dc6:	9302      	str	r3, [sp, #8]
 8014dc8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014dca:	9301      	str	r3, [sp, #4]
 8014dcc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014dce:	9300      	str	r3, [sp, #0]
 8014dd0:	4613      	mov	r3, r2
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	4621      	mov	r1, r4
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	f7ff fe92 	bl	8014b00 <tcp_output_alloc_header_common>
 8014ddc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d00c      	beq.n	8014dfe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014de4:	7dfb      	ldrb	r3, [r7, #23]
 8014de6:	2200      	movs	r2, #0
 8014de8:	6939      	ldr	r1, [r7, #16]
 8014dea:	68f8      	ldr	r0, [r7, #12]
 8014dec:	f7ff ff38 	bl	8014c60 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df2:	683a      	ldr	r2, [r7, #0]
 8014df4:	6939      	ldr	r1, [r7, #16]
 8014df6:	68f8      	ldr	r0, [r7, #12]
 8014df8:	f7ff ff72 	bl	8014ce0 <tcp_output_control_segment>
 8014dfc:	e000      	b.n	8014e00 <tcp_rst+0x8c>
    return;
 8014dfe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014e00:	371c      	adds	r7, #28
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd90      	pop	{r4, r7, pc}
 8014e06:	bf00      	nop
 8014e08:	0801dfa0 	.word	0x0801dfa0
 8014e0c:	0801e724 	.word	0x0801e724
 8014e10:	0801dff4 	.word	0x0801dff4
 8014e14:	0801e740 	.word	0x0801e740

08014e18 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014e18:	b590      	push	{r4, r7, lr}
 8014e1a:	b087      	sub	sp, #28
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014e20:	2300      	movs	r3, #0
 8014e22:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014e24:	2300      	movs	r3, #0
 8014e26:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d106      	bne.n	8014e3c <tcp_send_empty_ack+0x24>
 8014e2e:	4b28      	ldr	r3, [pc, #160]	; (8014ed0 <tcp_send_empty_ack+0xb8>)
 8014e30:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014e34:	4927      	ldr	r1, [pc, #156]	; (8014ed4 <tcp_send_empty_ack+0xbc>)
 8014e36:	4828      	ldr	r0, [pc, #160]	; (8014ed8 <tcp_send_empty_ack+0xc0>)
 8014e38:	f005 ff80 	bl	801ad3c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014e3c:	7dfb      	ldrb	r3, [r7, #23]
 8014e3e:	009b      	lsls	r3, r3, #2
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	f003 0304 	and.w	r3, r3, #4
 8014e46:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014e48:	7d7b      	ldrb	r3, [r7, #21]
 8014e4a:	b29c      	uxth	r4, r3
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e50:	4618      	mov	r0, r3
 8014e52:	f7f8 fa0a 	bl	800d26a <lwip_htonl>
 8014e56:	4603      	mov	r3, r0
 8014e58:	2200      	movs	r2, #0
 8014e5a:	4621      	mov	r1, r4
 8014e5c:	6878      	ldr	r0, [r7, #4]
 8014e5e:	f7ff fec1 	bl	8014be4 <tcp_output_alloc_header>
 8014e62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014e64:	693b      	ldr	r3, [r7, #16]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d109      	bne.n	8014e7e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	8b5b      	ldrh	r3, [r3, #26]
 8014e6e:	f043 0303 	orr.w	r3, r3, #3
 8014e72:	b29a      	uxth	r2, r3
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014e78:	f06f 0301 	mvn.w	r3, #1
 8014e7c:	e023      	b.n	8014ec6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014e7e:	7dbb      	ldrb	r3, [r7, #22]
 8014e80:	7dfa      	ldrb	r2, [r7, #23]
 8014e82:	6939      	ldr	r1, [r7, #16]
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f7ff feeb 	bl	8014c60 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	3304      	adds	r3, #4
 8014e90:	6939      	ldr	r1, [r7, #16]
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f7ff ff24 	bl	8014ce0 <tcp_output_control_segment>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d007      	beq.n	8014eb4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	8b5b      	ldrh	r3, [r3, #26]
 8014ea8:	f043 0303 	orr.w	r3, r3, #3
 8014eac:	b29a      	uxth	r2, r3
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	835a      	strh	r2, [r3, #26]
 8014eb2:	e006      	b.n	8014ec2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	8b5b      	ldrh	r3, [r3, #26]
 8014eb8:	f023 0303 	bic.w	r3, r3, #3
 8014ebc:	b29a      	uxth	r2, r3
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	371c      	adds	r7, #28
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd90      	pop	{r4, r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	0801dfa0 	.word	0x0801dfa0
 8014ed4:	0801e75c 	.word	0x0801e75c
 8014ed8:	0801dff4 	.word	0x0801dff4

08014edc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014edc:	b590      	push	{r4, r7, lr}
 8014ede:	b087      	sub	sp, #28
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d106      	bne.n	8014efc <tcp_keepalive+0x20>
 8014eee:	4b18      	ldr	r3, [pc, #96]	; (8014f50 <tcp_keepalive+0x74>)
 8014ef0:	f640 0224 	movw	r2, #2084	; 0x824
 8014ef4:	4917      	ldr	r1, [pc, #92]	; (8014f54 <tcp_keepalive+0x78>)
 8014ef6:	4818      	ldr	r0, [pc, #96]	; (8014f58 <tcp_keepalive+0x7c>)
 8014ef8:	f005 ff20 	bl	801ad3c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014efc:	7dfb      	ldrb	r3, [r7, #23]
 8014efe:	b29c      	uxth	r4, r3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f04:	3b01      	subs	r3, #1
 8014f06:	4618      	mov	r0, r3
 8014f08:	f7f8 f9af 	bl	800d26a <lwip_htonl>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	2200      	movs	r2, #0
 8014f10:	4621      	mov	r1, r4
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f7ff fe66 	bl	8014be4 <tcp_output_alloc_header>
 8014f18:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d102      	bne.n	8014f26 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014f20:	f04f 33ff 	mov.w	r3, #4294967295
 8014f24:	e010      	b.n	8014f48 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014f26:	7dfb      	ldrb	r3, [r7, #23]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	6939      	ldr	r1, [r7, #16]
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f7ff fe97 	bl	8014c60 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014f32:	687a      	ldr	r2, [r7, #4]
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	3304      	adds	r3, #4
 8014f38:	6939      	ldr	r1, [r7, #16]
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f7ff fed0 	bl	8014ce0 <tcp_output_control_segment>
 8014f40:	4603      	mov	r3, r0
 8014f42:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014f48:	4618      	mov	r0, r3
 8014f4a:	371c      	adds	r7, #28
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd90      	pop	{r4, r7, pc}
 8014f50:	0801dfa0 	.word	0x0801dfa0
 8014f54:	0801e77c 	.word	0x0801e77c
 8014f58:	0801dff4 	.word	0x0801dff4

08014f5c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014f5c:	b590      	push	{r4, r7, lr}
 8014f5e:	b08b      	sub	sp, #44	; 0x2c
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014f64:	2300      	movs	r3, #0
 8014f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d106      	bne.n	8014f7e <tcp_zero_window_probe+0x22>
 8014f70:	4b4c      	ldr	r3, [pc, #304]	; (80150a4 <tcp_zero_window_probe+0x148>)
 8014f72:	f640 024f 	movw	r2, #2127	; 0x84f
 8014f76:	494c      	ldr	r1, [pc, #304]	; (80150a8 <tcp_zero_window_probe+0x14c>)
 8014f78:	484c      	ldr	r0, [pc, #304]	; (80150ac <tcp_zero_window_probe+0x150>)
 8014f7a:	f005 fedf 	bl	801ad3c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f82:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014f84:	6a3b      	ldr	r3, [r7, #32]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d101      	bne.n	8014f8e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	e086      	b.n	801509c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014f94:	2bff      	cmp	r3, #255	; 0xff
 8014f96:	d007      	beq.n	8014fa8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	b2da      	uxtb	r2, r3
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014fa8:	6a3b      	ldr	r3, [r7, #32]
 8014faa:	68db      	ldr	r3, [r3, #12]
 8014fac:	899b      	ldrh	r3, [r3, #12]
 8014fae:	b29b      	uxth	r3, r3
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f7f8 f945 	bl	800d240 <lwip_htons>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	b2db      	uxtb	r3, r3
 8014fba:	f003 0301 	and.w	r3, r3, #1
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d005      	beq.n	8014fce <tcp_zero_window_probe+0x72>
 8014fc2:	6a3b      	ldr	r3, [r7, #32]
 8014fc4:	891b      	ldrh	r3, [r3, #8]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d101      	bne.n	8014fce <tcp_zero_window_probe+0x72>
 8014fca:	2301      	movs	r3, #1
 8014fcc:	e000      	b.n	8014fd0 <tcp_zero_window_probe+0x74>
 8014fce:	2300      	movs	r3, #0
 8014fd0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014fd2:	7ffb      	ldrb	r3, [r7, #31]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	bf0c      	ite	eq
 8014fd8:	2301      	moveq	r3, #1
 8014fda:	2300      	movne	r3, #0
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fe4:	b299      	uxth	r1, r3
 8014fe6:	6a3b      	ldr	r3, [r7, #32]
 8014fe8:	68db      	ldr	r3, [r3, #12]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	8bba      	ldrh	r2, [r7, #28]
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f7ff fdf8 	bl	8014be4 <tcp_output_alloc_header>
 8014ff4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014ff6:	69bb      	ldr	r3, [r7, #24]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d102      	bne.n	8015002 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8015000:	e04c      	b.n	801509c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015002:	69bb      	ldr	r3, [r7, #24]
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015008:	7ffb      	ldrb	r3, [r7, #31]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d011      	beq.n	8015032 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	899b      	ldrh	r3, [r3, #12]
 8015012:	b29b      	uxth	r3, r3
 8015014:	b21b      	sxth	r3, r3
 8015016:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801501a:	b21c      	sxth	r4, r3
 801501c:	2011      	movs	r0, #17
 801501e:	f7f8 f90f 	bl	800d240 <lwip_htons>
 8015022:	4603      	mov	r3, r0
 8015024:	b21b      	sxth	r3, r3
 8015026:	4323      	orrs	r3, r4
 8015028:	b21b      	sxth	r3, r3
 801502a:	b29a      	uxth	r2, r3
 801502c:	697b      	ldr	r3, [r7, #20]
 801502e:	819a      	strh	r2, [r3, #12]
 8015030:	e010      	b.n	8015054 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015032:	69bb      	ldr	r3, [r7, #24]
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	3314      	adds	r3, #20
 8015038:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801503a:	6a3b      	ldr	r3, [r7, #32]
 801503c:	6858      	ldr	r0, [r3, #4]
 801503e:	6a3b      	ldr	r3, [r7, #32]
 8015040:	685b      	ldr	r3, [r3, #4]
 8015042:	891a      	ldrh	r2, [r3, #8]
 8015044:	6a3b      	ldr	r3, [r7, #32]
 8015046:	891b      	ldrh	r3, [r3, #8]
 8015048:	1ad3      	subs	r3, r2, r3
 801504a:	b29b      	uxth	r3, r3
 801504c:	2201      	movs	r2, #1
 801504e:	6939      	ldr	r1, [r7, #16]
 8015050:	f7f9 ff12 	bl	800ee78 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015054:	6a3b      	ldr	r3, [r7, #32]
 8015056:	68db      	ldr	r3, [r3, #12]
 8015058:	685b      	ldr	r3, [r3, #4]
 801505a:	4618      	mov	r0, r3
 801505c:	f7f8 f905 	bl	800d26a <lwip_htonl>
 8015060:	4603      	mov	r3, r0
 8015062:	3301      	adds	r3, #1
 8015064:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	1ad3      	subs	r3, r2, r3
 801506e:	2b00      	cmp	r3, #0
 8015070:	da02      	bge.n	8015078 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	68fa      	ldr	r2, [r7, #12]
 8015076:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801507c:	2200      	movs	r2, #0
 801507e:	69b9      	ldr	r1, [r7, #24]
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f7ff fded 	bl	8014c60 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	3304      	adds	r3, #4
 801508c:	69b9      	ldr	r1, [r7, #24]
 801508e:	6878      	ldr	r0, [r7, #4]
 8015090:	f7ff fe26 	bl	8014ce0 <tcp_output_control_segment>
 8015094:	4603      	mov	r3, r0
 8015096:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015098:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801509c:	4618      	mov	r0, r3
 801509e:	372c      	adds	r7, #44	; 0x2c
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd90      	pop	{r4, r7, pc}
 80150a4:	0801dfa0 	.word	0x0801dfa0
 80150a8:	0801e798 	.word	0x0801e798
 80150ac:	0801dff4 	.word	0x0801dff4

080150b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80150b8:	f7f9 ffcc 	bl	800f054 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80150bc:	4b0a      	ldr	r3, [pc, #40]	; (80150e8 <tcpip_tcp_timer+0x38>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d103      	bne.n	80150cc <tcpip_tcp_timer+0x1c>
 80150c4:	4b09      	ldr	r3, [pc, #36]	; (80150ec <tcpip_tcp_timer+0x3c>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d005      	beq.n	80150d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80150cc:	2200      	movs	r2, #0
 80150ce:	4908      	ldr	r1, [pc, #32]	; (80150f0 <tcpip_tcp_timer+0x40>)
 80150d0:	20fa      	movs	r0, #250	; 0xfa
 80150d2:	f000 f8f3 	bl	80152bc <sys_timeout>
 80150d6:	e003      	b.n	80150e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80150d8:	4b06      	ldr	r3, [pc, #24]	; (80150f4 <tcpip_tcp_timer+0x44>)
 80150da:	2200      	movs	r2, #0
 80150dc:	601a      	str	r2, [r3, #0]
  }
}
 80150de:	bf00      	nop
 80150e0:	bf00      	nop
 80150e2:	3708      	adds	r7, #8
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	20018560 	.word	0x20018560
 80150ec:	20018570 	.word	0x20018570
 80150f0:	080150b1 	.word	0x080150b1
 80150f4:	20011618 	.word	0x20011618

080150f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80150fc:	4b0a      	ldr	r3, [pc, #40]	; (8015128 <tcp_timer_needed+0x30>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d10f      	bne.n	8015124 <tcp_timer_needed+0x2c>
 8015104:	4b09      	ldr	r3, [pc, #36]	; (801512c <tcp_timer_needed+0x34>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d103      	bne.n	8015114 <tcp_timer_needed+0x1c>
 801510c:	4b08      	ldr	r3, [pc, #32]	; (8015130 <tcp_timer_needed+0x38>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d007      	beq.n	8015124 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015114:	4b04      	ldr	r3, [pc, #16]	; (8015128 <tcp_timer_needed+0x30>)
 8015116:	2201      	movs	r2, #1
 8015118:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801511a:	2200      	movs	r2, #0
 801511c:	4905      	ldr	r1, [pc, #20]	; (8015134 <tcp_timer_needed+0x3c>)
 801511e:	20fa      	movs	r0, #250	; 0xfa
 8015120:	f000 f8cc 	bl	80152bc <sys_timeout>
  }
}
 8015124:	bf00      	nop
 8015126:	bd80      	pop	{r7, pc}
 8015128:	20011618 	.word	0x20011618
 801512c:	20018560 	.word	0x20018560
 8015130:	20018570 	.word	0x20018570
 8015134:	080150b1 	.word	0x080150b1

08015138 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b086      	sub	sp, #24
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015144:	200a      	movs	r0, #10
 8015146:	f7f8 fd31 	bl	800dbac <memp_malloc>
 801514a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d109      	bne.n	8015166 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d151      	bne.n	80151fc <sys_timeout_abs+0xc4>
 8015158:	4b2a      	ldr	r3, [pc, #168]	; (8015204 <sys_timeout_abs+0xcc>)
 801515a:	22be      	movs	r2, #190	; 0xbe
 801515c:	492a      	ldr	r1, [pc, #168]	; (8015208 <sys_timeout_abs+0xd0>)
 801515e:	482b      	ldr	r0, [pc, #172]	; (801520c <sys_timeout_abs+0xd4>)
 8015160:	f005 fdec 	bl	801ad3c <iprintf>
    return;
 8015164:	e04a      	b.n	80151fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015166:	693b      	ldr	r3, [r7, #16]
 8015168:	2200      	movs	r2, #0
 801516a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801516c:	693b      	ldr	r3, [r7, #16]
 801516e:	68ba      	ldr	r2, [r7, #8]
 8015170:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	687a      	ldr	r2, [r7, #4]
 8015176:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015178:	693b      	ldr	r3, [r7, #16]
 801517a:	68fa      	ldr	r2, [r7, #12]
 801517c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801517e:	4b24      	ldr	r3, [pc, #144]	; (8015210 <sys_timeout_abs+0xd8>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d103      	bne.n	801518e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015186:	4a22      	ldr	r2, [pc, #136]	; (8015210 <sys_timeout_abs+0xd8>)
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	6013      	str	r3, [r2, #0]
    return;
 801518c:	e037      	b.n	80151fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	685a      	ldr	r2, [r3, #4]
 8015192:	4b1f      	ldr	r3, [pc, #124]	; (8015210 <sys_timeout_abs+0xd8>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	685b      	ldr	r3, [r3, #4]
 8015198:	1ad3      	subs	r3, r2, r3
 801519a:	0fdb      	lsrs	r3, r3, #31
 801519c:	f003 0301 	and.w	r3, r3, #1
 80151a0:	b2db      	uxtb	r3, r3
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d007      	beq.n	80151b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80151a6:	4b1a      	ldr	r3, [pc, #104]	; (8015210 <sys_timeout_abs+0xd8>)
 80151a8:	681a      	ldr	r2, [r3, #0]
 80151aa:	693b      	ldr	r3, [r7, #16]
 80151ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80151ae:	4a18      	ldr	r2, [pc, #96]	; (8015210 <sys_timeout_abs+0xd8>)
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	6013      	str	r3, [r2, #0]
 80151b4:	e023      	b.n	80151fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80151b6:	4b16      	ldr	r3, [pc, #88]	; (8015210 <sys_timeout_abs+0xd8>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	617b      	str	r3, [r7, #20]
 80151bc:	e01a      	b.n	80151f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80151be:	697b      	ldr	r3, [r7, #20]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d00b      	beq.n	80151de <sys_timeout_abs+0xa6>
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	685a      	ldr	r2, [r3, #4]
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	685b      	ldr	r3, [r3, #4]
 80151d0:	1ad3      	subs	r3, r2, r3
 80151d2:	0fdb      	lsrs	r3, r3, #31
 80151d4:	f003 0301 	and.w	r3, r3, #1
 80151d8:	b2db      	uxtb	r3, r3
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d007      	beq.n	80151ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80151de:	697b      	ldr	r3, [r7, #20]
 80151e0:	681a      	ldr	r2, [r3, #0]
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80151e6:	697b      	ldr	r3, [r7, #20]
 80151e8:	693a      	ldr	r2, [r7, #16]
 80151ea:	601a      	str	r2, [r3, #0]
        break;
 80151ec:	e007      	b.n	80151fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80151ee:	697b      	ldr	r3, [r7, #20]
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	617b      	str	r3, [r7, #20]
 80151f4:	697b      	ldr	r3, [r7, #20]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d1e1      	bne.n	80151be <sys_timeout_abs+0x86>
 80151fa:	e000      	b.n	80151fe <sys_timeout_abs+0xc6>
    return;
 80151fc:	bf00      	nop
      }
    }
  }
}
 80151fe:	3718      	adds	r7, #24
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	0801e7bc 	.word	0x0801e7bc
 8015208:	0801e7f0 	.word	0x0801e7f0
 801520c:	0801e830 	.word	0x0801e830
 8015210:	20011610 	.word	0x20011610

08015214 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015214:	b580      	push	{r7, lr}
 8015216:	b086      	sub	sp, #24
 8015218:	af00      	add	r7, sp, #0
 801521a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	685b      	ldr	r3, [r3, #4]
 8015224:	4798      	blx	r3

  now = sys_now();
 8015226:	f7ef fff1 	bl	800520c <sys_now>
 801522a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	681a      	ldr	r2, [r3, #0]
 8015230:	4b0f      	ldr	r3, [pc, #60]	; (8015270 <lwip_cyclic_timer+0x5c>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	4413      	add	r3, r2
 8015236:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015238:	68fa      	ldr	r2, [r7, #12]
 801523a:	693b      	ldr	r3, [r7, #16]
 801523c:	1ad3      	subs	r3, r2, r3
 801523e:	0fdb      	lsrs	r3, r3, #31
 8015240:	f003 0301 	and.w	r3, r3, #1
 8015244:	b2db      	uxtb	r3, r3
 8015246:	2b00      	cmp	r3, #0
 8015248:	d009      	beq.n	801525e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801524a:	697b      	ldr	r3, [r7, #20]
 801524c:	681a      	ldr	r2, [r3, #0]
 801524e:	693b      	ldr	r3, [r7, #16]
 8015250:	4413      	add	r3, r2
 8015252:	687a      	ldr	r2, [r7, #4]
 8015254:	4907      	ldr	r1, [pc, #28]	; (8015274 <lwip_cyclic_timer+0x60>)
 8015256:	4618      	mov	r0, r3
 8015258:	f7ff ff6e 	bl	8015138 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801525c:	e004      	b.n	8015268 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801525e:	687a      	ldr	r2, [r7, #4]
 8015260:	4904      	ldr	r1, [pc, #16]	; (8015274 <lwip_cyclic_timer+0x60>)
 8015262:	68f8      	ldr	r0, [r7, #12]
 8015264:	f7ff ff68 	bl	8015138 <sys_timeout_abs>
}
 8015268:	bf00      	nop
 801526a:	3718      	adds	r7, #24
 801526c:	46bd      	mov	sp, r7
 801526e:	bd80      	pop	{r7, pc}
 8015270:	20011614 	.word	0x20011614
 8015274:	08015215 	.word	0x08015215

08015278 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b082      	sub	sp, #8
 801527c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801527e:	2301      	movs	r3, #1
 8015280:	607b      	str	r3, [r7, #4]
 8015282:	e00e      	b.n	80152a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015284:	4a0b      	ldr	r2, [pc, #44]	; (80152b4 <sys_timeouts_init+0x3c>)
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	00db      	lsls	r3, r3, #3
 8015290:	4a08      	ldr	r2, [pc, #32]	; (80152b4 <sys_timeouts_init+0x3c>)
 8015292:	4413      	add	r3, r2
 8015294:	461a      	mov	r2, r3
 8015296:	4908      	ldr	r1, [pc, #32]	; (80152b8 <sys_timeouts_init+0x40>)
 8015298:	f000 f810 	bl	80152bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	3301      	adds	r3, #1
 80152a0:	607b      	str	r3, [r7, #4]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	2b02      	cmp	r3, #2
 80152a6:	d9ed      	bls.n	8015284 <sys_timeouts_init+0xc>
  }
}
 80152a8:	bf00      	nop
 80152aa:	bf00      	nop
 80152ac:	3708      	adds	r7, #8
 80152ae:	46bd      	mov	sp, r7
 80152b0:	bd80      	pop	{r7, pc}
 80152b2:	bf00      	nop
 80152b4:	0801f624 	.word	0x0801f624
 80152b8:	08015215 	.word	0x08015215

080152bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b086      	sub	sp, #24
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	60f8      	str	r0, [r7, #12]
 80152c4:	60b9      	str	r1, [r7, #8]
 80152c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80152ce:	d306      	bcc.n	80152de <sys_timeout+0x22>
 80152d0:	4b0a      	ldr	r3, [pc, #40]	; (80152fc <sys_timeout+0x40>)
 80152d2:	f240 1229 	movw	r2, #297	; 0x129
 80152d6:	490a      	ldr	r1, [pc, #40]	; (8015300 <sys_timeout+0x44>)
 80152d8:	480a      	ldr	r0, [pc, #40]	; (8015304 <sys_timeout+0x48>)
 80152da:	f005 fd2f 	bl	801ad3c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80152de:	f7ef ff95 	bl	800520c <sys_now>
 80152e2:	4602      	mov	r2, r0
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	4413      	add	r3, r2
 80152e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80152ea:	687a      	ldr	r2, [r7, #4]
 80152ec:	68b9      	ldr	r1, [r7, #8]
 80152ee:	6978      	ldr	r0, [r7, #20]
 80152f0:	f7ff ff22 	bl	8015138 <sys_timeout_abs>
#endif
}
 80152f4:	bf00      	nop
 80152f6:	3718      	adds	r7, #24
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	0801e7bc 	.word	0x0801e7bc
 8015300:	0801e858 	.word	0x0801e858
 8015304:	0801e830 	.word	0x0801e830

08015308 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b084      	sub	sp, #16
 801530c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801530e:	f7ef ff7d 	bl	800520c <sys_now>
 8015312:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015314:	4b17      	ldr	r3, [pc, #92]	; (8015374 <sys_check_timeouts+0x6c>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d022      	beq.n	8015366 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	1ad3      	subs	r3, r2, r3
 8015328:	0fdb      	lsrs	r3, r3, #31
 801532a:	f003 0301 	and.w	r3, r3, #1
 801532e:	b2db      	uxtb	r3, r3
 8015330:	2b00      	cmp	r3, #0
 8015332:	d11a      	bne.n	801536a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015334:	68bb      	ldr	r3, [r7, #8]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	4a0e      	ldr	r2, [pc, #56]	; (8015374 <sys_check_timeouts+0x6c>)
 801533a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	689b      	ldr	r3, [r3, #8]
 8015340:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	68db      	ldr	r3, [r3, #12]
 8015346:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	4a0a      	ldr	r2, [pc, #40]	; (8015378 <sys_check_timeouts+0x70>)
 801534e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015350:	68b9      	ldr	r1, [r7, #8]
 8015352:	200a      	movs	r0, #10
 8015354:	f7f8 fc7c 	bl	800dc50 <memp_free>
    if (handler != NULL) {
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d0da      	beq.n	8015314 <sys_check_timeouts+0xc>
      handler(arg);
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	6838      	ldr	r0, [r7, #0]
 8015362:	4798      	blx	r3
  do {
 8015364:	e7d6      	b.n	8015314 <sys_check_timeouts+0xc>
      return;
 8015366:	bf00      	nop
 8015368:	e000      	b.n	801536c <sys_check_timeouts+0x64>
      return;
 801536a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801536c:	3710      	adds	r7, #16
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}
 8015372:	bf00      	nop
 8015374:	20011610 	.word	0x20011610
 8015378:	20011614 	.word	0x20011614

0801537c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015382:	4b16      	ldr	r3, [pc, #88]	; (80153dc <sys_timeouts_sleeptime+0x60>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d102      	bne.n	8015390 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801538a:	f04f 33ff 	mov.w	r3, #4294967295
 801538e:	e020      	b.n	80153d2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015390:	f7ef ff3c 	bl	800520c <sys_now>
 8015394:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015396:	4b11      	ldr	r3, [pc, #68]	; (80153dc <sys_timeouts_sleeptime+0x60>)
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	685a      	ldr	r2, [r3, #4]
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	1ad3      	subs	r3, r2, r3
 80153a0:	0fdb      	lsrs	r3, r3, #31
 80153a2:	f003 0301 	and.w	r3, r3, #1
 80153a6:	b2db      	uxtb	r3, r3
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d001      	beq.n	80153b0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80153ac:	2300      	movs	r3, #0
 80153ae:	e010      	b.n	80153d2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80153b0:	4b0a      	ldr	r3, [pc, #40]	; (80153dc <sys_timeouts_sleeptime+0x60>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	685a      	ldr	r2, [r3, #4]
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	1ad3      	subs	r3, r2, r3
 80153ba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	da06      	bge.n	80153d0 <sys_timeouts_sleeptime+0x54>
 80153c2:	4b07      	ldr	r3, [pc, #28]	; (80153e0 <sys_timeouts_sleeptime+0x64>)
 80153c4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80153c8:	4906      	ldr	r1, [pc, #24]	; (80153e4 <sys_timeouts_sleeptime+0x68>)
 80153ca:	4807      	ldr	r0, [pc, #28]	; (80153e8 <sys_timeouts_sleeptime+0x6c>)
 80153cc:	f005 fcb6 	bl	801ad3c <iprintf>
    return ret;
 80153d0:	683b      	ldr	r3, [r7, #0]
  }
}
 80153d2:	4618      	mov	r0, r3
 80153d4:	3708      	adds	r7, #8
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	bf00      	nop
 80153dc:	20011610 	.word	0x20011610
 80153e0:	0801e7bc 	.word	0x0801e7bc
 80153e4:	0801e890 	.word	0x0801e890
 80153e8:	0801e830 	.word	0x0801e830

080153ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80153f0:	f005 fcbc 	bl	801ad6c <rand>
 80153f4:	4603      	mov	r3, r0
 80153f6:	b29b      	uxth	r3, r3
 80153f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015402:	b29a      	uxth	r2, r3
 8015404:	4b01      	ldr	r3, [pc, #4]	; (801540c <udp_init+0x20>)
 8015406:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015408:	bf00      	nop
 801540a:	bd80      	pop	{r7, pc}
 801540c:	20000018 	.word	0x20000018

08015410 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015410:	b480      	push	{r7}
 8015412:	b083      	sub	sp, #12
 8015414:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015416:	2300      	movs	r3, #0
 8015418:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801541a:	4b17      	ldr	r3, [pc, #92]	; (8015478 <udp_new_port+0x68>)
 801541c:	881b      	ldrh	r3, [r3, #0]
 801541e:	1c5a      	adds	r2, r3, #1
 8015420:	b291      	uxth	r1, r2
 8015422:	4a15      	ldr	r2, [pc, #84]	; (8015478 <udp_new_port+0x68>)
 8015424:	8011      	strh	r1, [r2, #0]
 8015426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801542a:	4293      	cmp	r3, r2
 801542c:	d103      	bne.n	8015436 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801542e:	4b12      	ldr	r3, [pc, #72]	; (8015478 <udp_new_port+0x68>)
 8015430:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015434:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015436:	4b11      	ldr	r3, [pc, #68]	; (801547c <udp_new_port+0x6c>)
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	603b      	str	r3, [r7, #0]
 801543c:	e011      	b.n	8015462 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801543e:	683b      	ldr	r3, [r7, #0]
 8015440:	8a5a      	ldrh	r2, [r3, #18]
 8015442:	4b0d      	ldr	r3, [pc, #52]	; (8015478 <udp_new_port+0x68>)
 8015444:	881b      	ldrh	r3, [r3, #0]
 8015446:	429a      	cmp	r2, r3
 8015448:	d108      	bne.n	801545c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801544a:	88fb      	ldrh	r3, [r7, #6]
 801544c:	3301      	adds	r3, #1
 801544e:	80fb      	strh	r3, [r7, #6]
 8015450:	88fb      	ldrh	r3, [r7, #6]
 8015452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015456:	d3e0      	bcc.n	801541a <udp_new_port+0xa>
        return 0;
 8015458:	2300      	movs	r3, #0
 801545a:	e007      	b.n	801546c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801545c:	683b      	ldr	r3, [r7, #0]
 801545e:	68db      	ldr	r3, [r3, #12]
 8015460:	603b      	str	r3, [r7, #0]
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d1ea      	bne.n	801543e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015468:	4b03      	ldr	r3, [pc, #12]	; (8015478 <udp_new_port+0x68>)
 801546a:	881b      	ldrh	r3, [r3, #0]
}
 801546c:	4618      	mov	r0, r3
 801546e:	370c      	adds	r7, #12
 8015470:	46bd      	mov	sp, r7
 8015472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015476:	4770      	bx	lr
 8015478:	20000018 	.word	0x20000018
 801547c:	20018578 	.word	0x20018578

08015480 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b084      	sub	sp, #16
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	4613      	mov	r3, r2
 801548c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d105      	bne.n	80154a0 <udp_input_local_match+0x20>
 8015494:	4b27      	ldr	r3, [pc, #156]	; (8015534 <udp_input_local_match+0xb4>)
 8015496:	2287      	movs	r2, #135	; 0x87
 8015498:	4927      	ldr	r1, [pc, #156]	; (8015538 <udp_input_local_match+0xb8>)
 801549a:	4828      	ldr	r0, [pc, #160]	; (801553c <udp_input_local_match+0xbc>)
 801549c:	f005 fc4e 	bl	801ad3c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d105      	bne.n	80154b2 <udp_input_local_match+0x32>
 80154a6:	4b23      	ldr	r3, [pc, #140]	; (8015534 <udp_input_local_match+0xb4>)
 80154a8:	2288      	movs	r2, #136	; 0x88
 80154aa:	4925      	ldr	r1, [pc, #148]	; (8015540 <udp_input_local_match+0xc0>)
 80154ac:	4823      	ldr	r0, [pc, #140]	; (801553c <udp_input_local_match+0xbc>)
 80154ae:	f005 fc45 	bl	801ad3c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	7a1b      	ldrb	r3, [r3, #8]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d00b      	beq.n	80154d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	7a1a      	ldrb	r2, [r3, #8]
 80154be:	4b21      	ldr	r3, [pc, #132]	; (8015544 <udp_input_local_match+0xc4>)
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80154c6:	3301      	adds	r3, #1
 80154c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d001      	beq.n	80154d2 <udp_input_local_match+0x52>
    return 0;
 80154ce:	2300      	movs	r3, #0
 80154d0:	e02b      	b.n	801552a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80154d2:	79fb      	ldrb	r3, [r7, #7]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d018      	beq.n	801550a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d013      	beq.n	8015506 <udp_input_local_match+0x86>
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d00f      	beq.n	8015506 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80154e6:	4b17      	ldr	r3, [pc, #92]	; (8015544 <udp_input_local_match+0xc4>)
 80154e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80154ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154ee:	d00a      	beq.n	8015506 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	681a      	ldr	r2, [r3, #0]
 80154f4:	4b13      	ldr	r3, [pc, #76]	; (8015544 <udp_input_local_match+0xc4>)
 80154f6:	695b      	ldr	r3, [r3, #20]
 80154f8:	405a      	eors	r2, r3
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	3308      	adds	r3, #8
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015502:	2b00      	cmp	r3, #0
 8015504:	d110      	bne.n	8015528 <udp_input_local_match+0xa8>
          return 1;
 8015506:	2301      	movs	r3, #1
 8015508:	e00f      	b.n	801552a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d009      	beq.n	8015524 <udp_input_local_match+0xa4>
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d005      	beq.n	8015524 <udp_input_local_match+0xa4>
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	681a      	ldr	r2, [r3, #0]
 801551c:	4b09      	ldr	r3, [pc, #36]	; (8015544 <udp_input_local_match+0xc4>)
 801551e:	695b      	ldr	r3, [r3, #20]
 8015520:	429a      	cmp	r2, r3
 8015522:	d101      	bne.n	8015528 <udp_input_local_match+0xa8>
        return 1;
 8015524:	2301      	movs	r3, #1
 8015526:	e000      	b.n	801552a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015528:	2300      	movs	r3, #0
}
 801552a:	4618      	mov	r0, r3
 801552c:	3710      	adds	r7, #16
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}
 8015532:	bf00      	nop
 8015534:	0801e8a4 	.word	0x0801e8a4
 8015538:	0801e8d4 	.word	0x0801e8d4
 801553c:	0801e8f8 	.word	0x0801e8f8
 8015540:	0801e920 	.word	0x0801e920
 8015544:	20014e4c 	.word	0x20014e4c

08015548 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015548:	b590      	push	{r4, r7, lr}
 801554a:	b08d      	sub	sp, #52	; 0x34
 801554c:	af02      	add	r7, sp, #8
 801554e:	6078      	str	r0, [r7, #4]
 8015550:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015552:	2300      	movs	r3, #0
 8015554:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d105      	bne.n	8015568 <udp_input+0x20>
 801555c:	4b7c      	ldr	r3, [pc, #496]	; (8015750 <udp_input+0x208>)
 801555e:	22cf      	movs	r2, #207	; 0xcf
 8015560:	497c      	ldr	r1, [pc, #496]	; (8015754 <udp_input+0x20c>)
 8015562:	487d      	ldr	r0, [pc, #500]	; (8015758 <udp_input+0x210>)
 8015564:	f005 fbea 	bl	801ad3c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d105      	bne.n	801557a <udp_input+0x32>
 801556e:	4b78      	ldr	r3, [pc, #480]	; (8015750 <udp_input+0x208>)
 8015570:	22d0      	movs	r2, #208	; 0xd0
 8015572:	497a      	ldr	r1, [pc, #488]	; (801575c <udp_input+0x214>)
 8015574:	4878      	ldr	r0, [pc, #480]	; (8015758 <udp_input+0x210>)
 8015576:	f005 fbe1 	bl	801ad3c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	895b      	ldrh	r3, [r3, #10]
 801557e:	2b07      	cmp	r3, #7
 8015580:	d803      	bhi.n	801558a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015582:	6878      	ldr	r0, [r7, #4]
 8015584:	f7f9 fa72 	bl	800ea6c <pbuf_free>
    goto end;
 8015588:	e0de      	b.n	8015748 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	685b      	ldr	r3, [r3, #4]
 801558e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015590:	4b73      	ldr	r3, [pc, #460]	; (8015760 <udp_input+0x218>)
 8015592:	695b      	ldr	r3, [r3, #20]
 8015594:	4a72      	ldr	r2, [pc, #456]	; (8015760 <udp_input+0x218>)
 8015596:	6812      	ldr	r2, [r2, #0]
 8015598:	4611      	mov	r1, r2
 801559a:	4618      	mov	r0, r3
 801559c:	f001 ff9a 	bl	80174d4 <ip4_addr_isbroadcast_u32>
 80155a0:	4603      	mov	r3, r0
 80155a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	881b      	ldrh	r3, [r3, #0]
 80155a8:	b29b      	uxth	r3, r3
 80155aa:	4618      	mov	r0, r3
 80155ac:	f7f7 fe48 	bl	800d240 <lwip_htons>
 80155b0:	4603      	mov	r3, r0
 80155b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	885b      	ldrh	r3, [r3, #2]
 80155b8:	b29b      	uxth	r3, r3
 80155ba:	4618      	mov	r0, r3
 80155bc:	f7f7 fe40 	bl	800d240 <lwip_htons>
 80155c0:	4603      	mov	r3, r0
 80155c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80155c4:	2300      	movs	r3, #0
 80155c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80155c8:	2300      	movs	r3, #0
 80155ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80155cc:	2300      	movs	r3, #0
 80155ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80155d0:	4b64      	ldr	r3, [pc, #400]	; (8015764 <udp_input+0x21c>)
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	627b      	str	r3, [r7, #36]	; 0x24
 80155d6:	e054      	b.n	8015682 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80155d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155da:	8a5b      	ldrh	r3, [r3, #18]
 80155dc:	89fa      	ldrh	r2, [r7, #14]
 80155de:	429a      	cmp	r2, r3
 80155e0:	d14a      	bne.n	8015678 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80155e2:	7cfb      	ldrb	r3, [r7, #19]
 80155e4:	461a      	mov	r2, r3
 80155e6:	6839      	ldr	r1, [r7, #0]
 80155e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80155ea:	f7ff ff49 	bl	8015480 <udp_input_local_match>
 80155ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d041      	beq.n	8015678 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80155f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f6:	7c1b      	ldrb	r3, [r3, #16]
 80155f8:	f003 0304 	and.w	r3, r3, #4
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d11d      	bne.n	801563c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015600:	69fb      	ldr	r3, [r7, #28]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d102      	bne.n	801560c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015608:	61fb      	str	r3, [r7, #28]
 801560a:	e017      	b.n	801563c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801560c:	7cfb      	ldrb	r3, [r7, #19]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d014      	beq.n	801563c <udp_input+0xf4>
 8015612:	4b53      	ldr	r3, [pc, #332]	; (8015760 <udp_input+0x218>)
 8015614:	695b      	ldr	r3, [r3, #20]
 8015616:	f1b3 3fff 	cmp.w	r3, #4294967295
 801561a:	d10f      	bne.n	801563c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	681a      	ldr	r2, [r3, #0]
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	3304      	adds	r3, #4
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	429a      	cmp	r2, r3
 8015628:	d008      	beq.n	801563c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801562c:	681a      	ldr	r2, [r3, #0]
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	3304      	adds	r3, #4
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	429a      	cmp	r2, r3
 8015636:	d101      	bne.n	801563c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801563e:	8a9b      	ldrh	r3, [r3, #20]
 8015640:	8a3a      	ldrh	r2, [r7, #16]
 8015642:	429a      	cmp	r2, r3
 8015644:	d118      	bne.n	8015678 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015648:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801564a:	2b00      	cmp	r3, #0
 801564c:	d005      	beq.n	801565a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015650:	685a      	ldr	r2, [r3, #4]
 8015652:	4b43      	ldr	r3, [pc, #268]	; (8015760 <udp_input+0x218>)
 8015654:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015656:	429a      	cmp	r2, r3
 8015658:	d10e      	bne.n	8015678 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801565a:	6a3b      	ldr	r3, [r7, #32]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d014      	beq.n	801568a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015662:	68da      	ldr	r2, [r3, #12]
 8015664:	6a3b      	ldr	r3, [r7, #32]
 8015666:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015668:	4b3e      	ldr	r3, [pc, #248]	; (8015764 <udp_input+0x21c>)
 801566a:	681a      	ldr	r2, [r3, #0]
 801566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801566e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015670:	4a3c      	ldr	r2, [pc, #240]	; (8015764 <udp_input+0x21c>)
 8015672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015674:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015676:	e008      	b.n	801568a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567e:	68db      	ldr	r3, [r3, #12]
 8015680:	627b      	str	r3, [r7, #36]	; 0x24
 8015682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015684:	2b00      	cmp	r3, #0
 8015686:	d1a7      	bne.n	80155d8 <udp_input+0x90>
 8015688:	e000      	b.n	801568c <udp_input+0x144>
        break;
 801568a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801568e:	2b00      	cmp	r3, #0
 8015690:	d101      	bne.n	8015696 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015692:	69fb      	ldr	r3, [r7, #28]
 8015694:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015698:	2b00      	cmp	r3, #0
 801569a:	d002      	beq.n	80156a2 <udp_input+0x15a>
    for_us = 1;
 801569c:	2301      	movs	r3, #1
 801569e:	76fb      	strb	r3, [r7, #27]
 80156a0:	e00a      	b.n	80156b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	3304      	adds	r3, #4
 80156a6:	681a      	ldr	r2, [r3, #0]
 80156a8:	4b2d      	ldr	r3, [pc, #180]	; (8015760 <udp_input+0x218>)
 80156aa:	695b      	ldr	r3, [r3, #20]
 80156ac:	429a      	cmp	r2, r3
 80156ae:	bf0c      	ite	eq
 80156b0:	2301      	moveq	r3, #1
 80156b2:	2300      	movne	r3, #0
 80156b4:	b2db      	uxtb	r3, r3
 80156b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80156b8:	7efb      	ldrb	r3, [r7, #27]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d041      	beq.n	8015742 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80156be:	2108      	movs	r1, #8
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f7f9 f91b 	bl	800e8fc <pbuf_remove_header>
 80156c6:	4603      	mov	r3, r0
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d00a      	beq.n	80156e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80156cc:	4b20      	ldr	r3, [pc, #128]	; (8015750 <udp_input+0x208>)
 80156ce:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80156d2:	4925      	ldr	r1, [pc, #148]	; (8015768 <udp_input+0x220>)
 80156d4:	4820      	ldr	r0, [pc, #128]	; (8015758 <udp_input+0x210>)
 80156d6:	f005 fb31 	bl	801ad3c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f7f9 f9c6 	bl	800ea6c <pbuf_free>
      goto end;
 80156e0:	e032      	b.n	8015748 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80156e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d012      	beq.n	801570e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80156e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ea:	699b      	ldr	r3, [r3, #24]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d00a      	beq.n	8015706 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80156f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f2:	699c      	ldr	r4, [r3, #24]
 80156f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f6:	69d8      	ldr	r0, [r3, #28]
 80156f8:	8a3b      	ldrh	r3, [r7, #16]
 80156fa:	9300      	str	r3, [sp, #0]
 80156fc:	4b1b      	ldr	r3, [pc, #108]	; (801576c <udp_input+0x224>)
 80156fe:	687a      	ldr	r2, [r7, #4]
 8015700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015702:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015704:	e021      	b.n	801574a <udp_input+0x202>
        pbuf_free(p);
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f7f9 f9b0 	bl	800ea6c <pbuf_free>
        goto end;
 801570c:	e01c      	b.n	8015748 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801570e:	7cfb      	ldrb	r3, [r7, #19]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d112      	bne.n	801573a <udp_input+0x1f2>
 8015714:	4b12      	ldr	r3, [pc, #72]	; (8015760 <udp_input+0x218>)
 8015716:	695b      	ldr	r3, [r3, #20]
 8015718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801571c:	2be0      	cmp	r3, #224	; 0xe0
 801571e:	d00c      	beq.n	801573a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015720:	4b0f      	ldr	r3, [pc, #60]	; (8015760 <udp_input+0x218>)
 8015722:	899b      	ldrh	r3, [r3, #12]
 8015724:	3308      	adds	r3, #8
 8015726:	b29b      	uxth	r3, r3
 8015728:	b21b      	sxth	r3, r3
 801572a:	4619      	mov	r1, r3
 801572c:	6878      	ldr	r0, [r7, #4]
 801572e:	f7f9 f958 	bl	800e9e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015732:	2103      	movs	r1, #3
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f001 fbad 	bl	8016e94 <icmp_dest_unreach>
      pbuf_free(p);
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f7f9 f996 	bl	800ea6c <pbuf_free>
  return;
 8015740:	e003      	b.n	801574a <udp_input+0x202>
    pbuf_free(p);
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f7f9 f992 	bl	800ea6c <pbuf_free>
  return;
 8015748:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801574a:	372c      	adds	r7, #44	; 0x2c
 801574c:	46bd      	mov	sp, r7
 801574e:	bd90      	pop	{r4, r7, pc}
 8015750:	0801e8a4 	.word	0x0801e8a4
 8015754:	0801e948 	.word	0x0801e948
 8015758:	0801e8f8 	.word	0x0801e8f8
 801575c:	0801e960 	.word	0x0801e960
 8015760:	20014e4c 	.word	0x20014e4c
 8015764:	20018578 	.word	0x20018578
 8015768:	0801e97c 	.word	0x0801e97c
 801576c:	20014e5c 	.word	0x20014e5c

08015770 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d109      	bne.n	8015794 <udp_send+0x24>
 8015780:	4b11      	ldr	r3, [pc, #68]	; (80157c8 <udp_send+0x58>)
 8015782:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015786:	4911      	ldr	r1, [pc, #68]	; (80157cc <udp_send+0x5c>)
 8015788:	4811      	ldr	r0, [pc, #68]	; (80157d0 <udp_send+0x60>)
 801578a:	f005 fad7 	bl	801ad3c <iprintf>
 801578e:	f06f 030f 	mvn.w	r3, #15
 8015792:	e015      	b.n	80157c0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d109      	bne.n	80157ae <udp_send+0x3e>
 801579a:	4b0b      	ldr	r3, [pc, #44]	; (80157c8 <udp_send+0x58>)
 801579c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80157a0:	490c      	ldr	r1, [pc, #48]	; (80157d4 <udp_send+0x64>)
 80157a2:	480b      	ldr	r0, [pc, #44]	; (80157d0 <udp_send+0x60>)
 80157a4:	f005 faca 	bl	801ad3c <iprintf>
 80157a8:	f06f 030f 	mvn.w	r3, #15
 80157ac:	e008      	b.n	80157c0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	1d1a      	adds	r2, r3, #4
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	8a9b      	ldrh	r3, [r3, #20]
 80157b6:	6839      	ldr	r1, [r7, #0]
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	f000 f80d 	bl	80157d8 <udp_sendto>
 80157be:	4603      	mov	r3, r0
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3708      	adds	r7, #8
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	0801e8a4 	.word	0x0801e8a4
 80157cc:	0801e998 	.word	0x0801e998
 80157d0:	0801e8f8 	.word	0x0801e8f8
 80157d4:	0801e9b0 	.word	0x0801e9b0

080157d8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b088      	sub	sp, #32
 80157dc:	af02      	add	r7, sp, #8
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d109      	bne.n	8015800 <udp_sendto+0x28>
 80157ec:	4b23      	ldr	r3, [pc, #140]	; (801587c <udp_sendto+0xa4>)
 80157ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 80157f2:	4923      	ldr	r1, [pc, #140]	; (8015880 <udp_sendto+0xa8>)
 80157f4:	4823      	ldr	r0, [pc, #140]	; (8015884 <udp_sendto+0xac>)
 80157f6:	f005 faa1 	bl	801ad3c <iprintf>
 80157fa:	f06f 030f 	mvn.w	r3, #15
 80157fe:	e038      	b.n	8015872 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d109      	bne.n	801581a <udp_sendto+0x42>
 8015806:	4b1d      	ldr	r3, [pc, #116]	; (801587c <udp_sendto+0xa4>)
 8015808:	f240 2219 	movw	r2, #537	; 0x219
 801580c:	491e      	ldr	r1, [pc, #120]	; (8015888 <udp_sendto+0xb0>)
 801580e:	481d      	ldr	r0, [pc, #116]	; (8015884 <udp_sendto+0xac>)
 8015810:	f005 fa94 	bl	801ad3c <iprintf>
 8015814:	f06f 030f 	mvn.w	r3, #15
 8015818:	e02b      	b.n	8015872 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d109      	bne.n	8015834 <udp_sendto+0x5c>
 8015820:	4b16      	ldr	r3, [pc, #88]	; (801587c <udp_sendto+0xa4>)
 8015822:	f240 221a 	movw	r2, #538	; 0x21a
 8015826:	4919      	ldr	r1, [pc, #100]	; (801588c <udp_sendto+0xb4>)
 8015828:	4816      	ldr	r0, [pc, #88]	; (8015884 <udp_sendto+0xac>)
 801582a:	f005 fa87 	bl	801ad3c <iprintf>
 801582e:	f06f 030f 	mvn.w	r3, #15
 8015832:	e01e      	b.n	8015872 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	7a1b      	ldrb	r3, [r3, #8]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d006      	beq.n	801584a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	7a1b      	ldrb	r3, [r3, #8]
 8015840:	4618      	mov	r0, r3
 8015842:	f7f8 fd1b 	bl	800e27c <netif_get_by_index>
 8015846:	6178      	str	r0, [r7, #20]
 8015848:	e003      	b.n	8015852 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f001 fbac 	bl	8016fa8 <ip4_route>
 8015850:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015852:	697b      	ldr	r3, [r7, #20]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d102      	bne.n	801585e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015858:	f06f 0303 	mvn.w	r3, #3
 801585c:	e009      	b.n	8015872 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801585e:	887a      	ldrh	r2, [r7, #2]
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	9300      	str	r3, [sp, #0]
 8015864:	4613      	mov	r3, r2
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	68b9      	ldr	r1, [r7, #8]
 801586a:	68f8      	ldr	r0, [r7, #12]
 801586c:	f000 f810 	bl	8015890 <udp_sendto_if>
 8015870:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015872:	4618      	mov	r0, r3
 8015874:	3718      	adds	r7, #24
 8015876:	46bd      	mov	sp, r7
 8015878:	bd80      	pop	{r7, pc}
 801587a:	bf00      	nop
 801587c:	0801e8a4 	.word	0x0801e8a4
 8015880:	0801e9c8 	.word	0x0801e9c8
 8015884:	0801e8f8 	.word	0x0801e8f8
 8015888:	0801e9e0 	.word	0x0801e9e0
 801588c:	0801e9fc 	.word	0x0801e9fc

08015890 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b088      	sub	sp, #32
 8015894:	af02      	add	r7, sp, #8
 8015896:	60f8      	str	r0, [r7, #12]
 8015898:	60b9      	str	r1, [r7, #8]
 801589a:	607a      	str	r2, [r7, #4]
 801589c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d109      	bne.n	80158b8 <udp_sendto_if+0x28>
 80158a4:	4b2e      	ldr	r3, [pc, #184]	; (8015960 <udp_sendto_if+0xd0>)
 80158a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80158aa:	492e      	ldr	r1, [pc, #184]	; (8015964 <udp_sendto_if+0xd4>)
 80158ac:	482e      	ldr	r0, [pc, #184]	; (8015968 <udp_sendto_if+0xd8>)
 80158ae:	f005 fa45 	bl	801ad3c <iprintf>
 80158b2:	f06f 030f 	mvn.w	r3, #15
 80158b6:	e04f      	b.n	8015958 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d109      	bne.n	80158d2 <udp_sendto_if+0x42>
 80158be:	4b28      	ldr	r3, [pc, #160]	; (8015960 <udp_sendto_if+0xd0>)
 80158c0:	f240 2281 	movw	r2, #641	; 0x281
 80158c4:	4929      	ldr	r1, [pc, #164]	; (801596c <udp_sendto_if+0xdc>)
 80158c6:	4828      	ldr	r0, [pc, #160]	; (8015968 <udp_sendto_if+0xd8>)
 80158c8:	f005 fa38 	bl	801ad3c <iprintf>
 80158cc:	f06f 030f 	mvn.w	r3, #15
 80158d0:	e042      	b.n	8015958 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d109      	bne.n	80158ec <udp_sendto_if+0x5c>
 80158d8:	4b21      	ldr	r3, [pc, #132]	; (8015960 <udp_sendto_if+0xd0>)
 80158da:	f240 2282 	movw	r2, #642	; 0x282
 80158de:	4924      	ldr	r1, [pc, #144]	; (8015970 <udp_sendto_if+0xe0>)
 80158e0:	4821      	ldr	r0, [pc, #132]	; (8015968 <udp_sendto_if+0xd8>)
 80158e2:	f005 fa2b 	bl	801ad3c <iprintf>
 80158e6:	f06f 030f 	mvn.w	r3, #15
 80158ea:	e035      	b.n	8015958 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80158ec:	6a3b      	ldr	r3, [r7, #32]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d109      	bne.n	8015906 <udp_sendto_if+0x76>
 80158f2:	4b1b      	ldr	r3, [pc, #108]	; (8015960 <udp_sendto_if+0xd0>)
 80158f4:	f240 2283 	movw	r2, #643	; 0x283
 80158f8:	491e      	ldr	r1, [pc, #120]	; (8015974 <udp_sendto_if+0xe4>)
 80158fa:	481b      	ldr	r0, [pc, #108]	; (8015968 <udp_sendto_if+0xd8>)
 80158fc:	f005 fa1e 	bl	801ad3c <iprintf>
 8015900:	f06f 030f 	mvn.w	r3, #15
 8015904:	e028      	b.n	8015958 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d009      	beq.n	8015920 <udp_sendto_if+0x90>
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d005      	beq.n	8015920 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801591c:	2be0      	cmp	r3, #224	; 0xe0
 801591e:	d103      	bne.n	8015928 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015920:	6a3b      	ldr	r3, [r7, #32]
 8015922:	3304      	adds	r3, #4
 8015924:	617b      	str	r3, [r7, #20]
 8015926:	e00b      	b.n	8015940 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	681a      	ldr	r2, [r3, #0]
 801592c:	6a3b      	ldr	r3, [r7, #32]
 801592e:	3304      	adds	r3, #4
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	429a      	cmp	r2, r3
 8015934:	d002      	beq.n	801593c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015936:	f06f 0303 	mvn.w	r3, #3
 801593a:	e00d      	b.n	8015958 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015940:	887a      	ldrh	r2, [r7, #2]
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	9301      	str	r3, [sp, #4]
 8015946:	6a3b      	ldr	r3, [r7, #32]
 8015948:	9300      	str	r3, [sp, #0]
 801594a:	4613      	mov	r3, r2
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	68b9      	ldr	r1, [r7, #8]
 8015950:	68f8      	ldr	r0, [r7, #12]
 8015952:	f000 f811 	bl	8015978 <udp_sendto_if_src>
 8015956:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015958:	4618      	mov	r0, r3
 801595a:	3718      	adds	r7, #24
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}
 8015960:	0801e8a4 	.word	0x0801e8a4
 8015964:	0801ea18 	.word	0x0801ea18
 8015968:	0801e8f8 	.word	0x0801e8f8
 801596c:	0801ea34 	.word	0x0801ea34
 8015970:	0801ea50 	.word	0x0801ea50
 8015974:	0801ea70 	.word	0x0801ea70

08015978 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b08c      	sub	sp, #48	; 0x30
 801597c:	af04      	add	r7, sp, #16
 801597e:	60f8      	str	r0, [r7, #12]
 8015980:	60b9      	str	r1, [r7, #8]
 8015982:	607a      	str	r2, [r7, #4]
 8015984:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d109      	bne.n	80159a0 <udp_sendto_if_src+0x28>
 801598c:	4b65      	ldr	r3, [pc, #404]	; (8015b24 <udp_sendto_if_src+0x1ac>)
 801598e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015992:	4965      	ldr	r1, [pc, #404]	; (8015b28 <udp_sendto_if_src+0x1b0>)
 8015994:	4865      	ldr	r0, [pc, #404]	; (8015b2c <udp_sendto_if_src+0x1b4>)
 8015996:	f005 f9d1 	bl	801ad3c <iprintf>
 801599a:	f06f 030f 	mvn.w	r3, #15
 801599e:	e0bc      	b.n	8015b1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d109      	bne.n	80159ba <udp_sendto_if_src+0x42>
 80159a6:	4b5f      	ldr	r3, [pc, #380]	; (8015b24 <udp_sendto_if_src+0x1ac>)
 80159a8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80159ac:	4960      	ldr	r1, [pc, #384]	; (8015b30 <udp_sendto_if_src+0x1b8>)
 80159ae:	485f      	ldr	r0, [pc, #380]	; (8015b2c <udp_sendto_if_src+0x1b4>)
 80159b0:	f005 f9c4 	bl	801ad3c <iprintf>
 80159b4:	f06f 030f 	mvn.w	r3, #15
 80159b8:	e0af      	b.n	8015b1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d109      	bne.n	80159d4 <udp_sendto_if_src+0x5c>
 80159c0:	4b58      	ldr	r3, [pc, #352]	; (8015b24 <udp_sendto_if_src+0x1ac>)
 80159c2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80159c6:	495b      	ldr	r1, [pc, #364]	; (8015b34 <udp_sendto_if_src+0x1bc>)
 80159c8:	4858      	ldr	r0, [pc, #352]	; (8015b2c <udp_sendto_if_src+0x1b4>)
 80159ca:	f005 f9b7 	bl	801ad3c <iprintf>
 80159ce:	f06f 030f 	mvn.w	r3, #15
 80159d2:	e0a2      	b.n	8015b1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80159d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d109      	bne.n	80159ee <udp_sendto_if_src+0x76>
 80159da:	4b52      	ldr	r3, [pc, #328]	; (8015b24 <udp_sendto_if_src+0x1ac>)
 80159dc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80159e0:	4955      	ldr	r1, [pc, #340]	; (8015b38 <udp_sendto_if_src+0x1c0>)
 80159e2:	4852      	ldr	r0, [pc, #328]	; (8015b2c <udp_sendto_if_src+0x1b4>)
 80159e4:	f005 f9aa 	bl	801ad3c <iprintf>
 80159e8:	f06f 030f 	mvn.w	r3, #15
 80159ec:	e095      	b.n	8015b1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80159ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d109      	bne.n	8015a08 <udp_sendto_if_src+0x90>
 80159f4:	4b4b      	ldr	r3, [pc, #300]	; (8015b24 <udp_sendto_if_src+0x1ac>)
 80159f6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80159fa:	4950      	ldr	r1, [pc, #320]	; (8015b3c <udp_sendto_if_src+0x1c4>)
 80159fc:	484b      	ldr	r0, [pc, #300]	; (8015b2c <udp_sendto_if_src+0x1b4>)
 80159fe:	f005 f99d 	bl	801ad3c <iprintf>
 8015a02:	f06f 030f 	mvn.w	r3, #15
 8015a06:	e088      	b.n	8015b1a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	8a5b      	ldrh	r3, [r3, #18]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d10f      	bne.n	8015a30 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015a10:	68f9      	ldr	r1, [r7, #12]
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	8a5b      	ldrh	r3, [r3, #18]
 8015a16:	461a      	mov	r2, r3
 8015a18:	68f8      	ldr	r0, [r7, #12]
 8015a1a:	f000 f893 	bl	8015b44 <udp_bind>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015a22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d002      	beq.n	8015a30 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015a2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015a2e:	e074      	b.n	8015b1a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	891b      	ldrh	r3, [r3, #8]
 8015a34:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015a38:	4293      	cmp	r3, r2
 8015a3a:	d902      	bls.n	8015a42 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8015a40:	e06b      	b.n	8015b1a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015a42:	2108      	movs	r1, #8
 8015a44:	68b8      	ldr	r0, [r7, #8]
 8015a46:	f7f8 ff49 	bl	800e8dc <pbuf_add_header>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d015      	beq.n	8015a7c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015a50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a54:	2108      	movs	r1, #8
 8015a56:	2022      	movs	r0, #34	; 0x22
 8015a58:	f7f8 fcf2 	bl	800e440 <pbuf_alloc>
 8015a5c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015a5e:	69fb      	ldr	r3, [r7, #28]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d102      	bne.n	8015a6a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015a64:	f04f 33ff 	mov.w	r3, #4294967295
 8015a68:	e057      	b.n	8015b1a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015a6a:	68bb      	ldr	r3, [r7, #8]
 8015a6c:	891b      	ldrh	r3, [r3, #8]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d006      	beq.n	8015a80 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015a72:	68b9      	ldr	r1, [r7, #8]
 8015a74:	69f8      	ldr	r0, [r7, #28]
 8015a76:	f7f9 f91d 	bl	800ecb4 <pbuf_chain>
 8015a7a:	e001      	b.n	8015a80 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015a80:	69fb      	ldr	r3, [r7, #28]
 8015a82:	895b      	ldrh	r3, [r3, #10]
 8015a84:	2b07      	cmp	r3, #7
 8015a86:	d806      	bhi.n	8015a96 <udp_sendto_if_src+0x11e>
 8015a88:	4b26      	ldr	r3, [pc, #152]	; (8015b24 <udp_sendto_if_src+0x1ac>)
 8015a8a:	f240 320d 	movw	r2, #781	; 0x30d
 8015a8e:	492c      	ldr	r1, [pc, #176]	; (8015b40 <udp_sendto_if_src+0x1c8>)
 8015a90:	4826      	ldr	r0, [pc, #152]	; (8015b2c <udp_sendto_if_src+0x1b4>)
 8015a92:	f005 f953 	bl	801ad3c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015a96:	69fb      	ldr	r3, [r7, #28]
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	8a5b      	ldrh	r3, [r3, #18]
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	f7f7 fbcd 	bl	800d240 <lwip_htons>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	461a      	mov	r2, r3
 8015aaa:	697b      	ldr	r3, [r7, #20]
 8015aac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015aae:	887b      	ldrh	r3, [r7, #2]
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7f7 fbc5 	bl	800d240 <lwip_htons>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	461a      	mov	r2, r3
 8015aba:	697b      	ldr	r3, [r7, #20]
 8015abc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	719a      	strb	r2, [r3, #6]
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	891b      	ldrh	r3, [r3, #8]
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f7 fbb7 	bl	800d240 <lwip_htons>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	461a      	mov	r2, r3
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015ada:	2311      	movs	r3, #17
 8015adc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	7adb      	ldrb	r3, [r3, #11]
 8015ae2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	7a9b      	ldrb	r3, [r3, #10]
 8015ae8:	7cb9      	ldrb	r1, [r7, #18]
 8015aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015aec:	9202      	str	r2, [sp, #8]
 8015aee:	7cfa      	ldrb	r2, [r7, #19]
 8015af0:	9201      	str	r2, [sp, #4]
 8015af2:	9300      	str	r3, [sp, #0]
 8015af4:	460b      	mov	r3, r1
 8015af6:	687a      	ldr	r2, [r7, #4]
 8015af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015afa:	69f8      	ldr	r0, [r7, #28]
 8015afc:	f001 fc3c 	bl	8017378 <ip4_output_if_src>
 8015b00:	4603      	mov	r3, r0
 8015b02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015b04:	69fa      	ldr	r2, [r7, #28]
 8015b06:	68bb      	ldr	r3, [r7, #8]
 8015b08:	429a      	cmp	r2, r3
 8015b0a:	d004      	beq.n	8015b16 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015b0c:	69f8      	ldr	r0, [r7, #28]
 8015b0e:	f7f8 ffad 	bl	800ea6c <pbuf_free>
    q = NULL;
 8015b12:	2300      	movs	r3, #0
 8015b14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015b16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	3720      	adds	r7, #32
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}
 8015b22:	bf00      	nop
 8015b24:	0801e8a4 	.word	0x0801e8a4
 8015b28:	0801ea90 	.word	0x0801ea90
 8015b2c:	0801e8f8 	.word	0x0801e8f8
 8015b30:	0801eab0 	.word	0x0801eab0
 8015b34:	0801ead0 	.word	0x0801ead0
 8015b38:	0801eaf4 	.word	0x0801eaf4
 8015b3c:	0801eb18 	.word	0x0801eb18
 8015b40:	0801eb3c 	.word	0x0801eb3c

08015b44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b086      	sub	sp, #24
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	60f8      	str	r0, [r7, #12]
 8015b4c:	60b9      	str	r1, [r7, #8]
 8015b4e:	4613      	mov	r3, r2
 8015b50:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d101      	bne.n	8015b5c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015b58:	4b39      	ldr	r3, [pc, #228]	; (8015c40 <udp_bind+0xfc>)
 8015b5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d109      	bne.n	8015b76 <udp_bind+0x32>
 8015b62:	4b38      	ldr	r3, [pc, #224]	; (8015c44 <udp_bind+0x100>)
 8015b64:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015b68:	4937      	ldr	r1, [pc, #220]	; (8015c48 <udp_bind+0x104>)
 8015b6a:	4838      	ldr	r0, [pc, #224]	; (8015c4c <udp_bind+0x108>)
 8015b6c:	f005 f8e6 	bl	801ad3c <iprintf>
 8015b70:	f06f 030f 	mvn.w	r3, #15
 8015b74:	e060      	b.n	8015c38 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b7a:	4b35      	ldr	r3, [pc, #212]	; (8015c50 <udp_bind+0x10c>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	617b      	str	r3, [r7, #20]
 8015b80:	e009      	b.n	8015b96 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015b82:	68fa      	ldr	r2, [r7, #12]
 8015b84:	697b      	ldr	r3, [r7, #20]
 8015b86:	429a      	cmp	r2, r3
 8015b88:	d102      	bne.n	8015b90 <udp_bind+0x4c>
      rebind = 1;
 8015b8a:	2301      	movs	r3, #1
 8015b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8015b8e:	e005      	b.n	8015b9c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	68db      	ldr	r3, [r3, #12]
 8015b94:	617b      	str	r3, [r7, #20]
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d1f2      	bne.n	8015b82 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015b9c:	88fb      	ldrh	r3, [r7, #6]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d109      	bne.n	8015bb6 <udp_bind+0x72>
    port = udp_new_port();
 8015ba2:	f7ff fc35 	bl	8015410 <udp_new_port>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015baa:	88fb      	ldrh	r3, [r7, #6]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d12c      	bne.n	8015c0a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015bb0:	f06f 0307 	mvn.w	r3, #7
 8015bb4:	e040      	b.n	8015c38 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015bb6:	4b26      	ldr	r3, [pc, #152]	; (8015c50 <udp_bind+0x10c>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	617b      	str	r3, [r7, #20]
 8015bbc:	e022      	b.n	8015c04 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015bbe:	68fa      	ldr	r2, [r7, #12]
 8015bc0:	697b      	ldr	r3, [r7, #20]
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	d01b      	beq.n	8015bfe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	8a5b      	ldrh	r3, [r3, #18]
 8015bca:	88fa      	ldrh	r2, [r7, #6]
 8015bcc:	429a      	cmp	r2, r3
 8015bce:	d116      	bne.n	8015bfe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	681a      	ldr	r2, [r3, #0]
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d00d      	beq.n	8015bf8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d00a      	beq.n	8015bf8 <udp_bind+0xb4>
 8015be2:	68bb      	ldr	r3, [r7, #8]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d006      	beq.n	8015bf8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015bea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d003      	beq.n	8015bf8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015bf0:	697b      	ldr	r3, [r7, #20]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d102      	bne.n	8015bfe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015bf8:	f06f 0307 	mvn.w	r3, #7
 8015bfc:	e01c      	b.n	8015c38 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	68db      	ldr	r3, [r3, #12]
 8015c02:	617b      	str	r3, [r7, #20]
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d1d9      	bne.n	8015bbe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d002      	beq.n	8015c16 <udp_bind+0xd2>
 8015c10:	68bb      	ldr	r3, [r7, #8]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	e000      	b.n	8015c18 <udp_bind+0xd4>
 8015c16:	2300      	movs	r3, #0
 8015c18:	68fa      	ldr	r2, [r7, #12]
 8015c1a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	88fa      	ldrh	r2, [r7, #6]
 8015c20:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015c22:	7cfb      	ldrb	r3, [r7, #19]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d106      	bne.n	8015c36 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015c28:	4b09      	ldr	r3, [pc, #36]	; (8015c50 <udp_bind+0x10c>)
 8015c2a:	681a      	ldr	r2, [r3, #0]
 8015c2c:	68fb      	ldr	r3, [r7, #12]
 8015c2e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015c30:	4a07      	ldr	r2, [pc, #28]	; (8015c50 <udp_bind+0x10c>)
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015c36:	2300      	movs	r3, #0
}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	3718      	adds	r7, #24
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}
 8015c40:	0801f63c 	.word	0x0801f63c
 8015c44:	0801e8a4 	.word	0x0801e8a4
 8015c48:	0801eb6c 	.word	0x0801eb6c
 8015c4c:	0801e8f8 	.word	0x0801e8f8
 8015c50:	20018578 	.word	0x20018578

08015c54 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b083      	sub	sp, #12
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
 8015c5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d007      	beq.n	8015c74 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	b2da      	uxtb	r2, r3
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8015c72:	e002      	b.n	8015c7a <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2200      	movs	r2, #0
 8015c78:	721a      	strb	r2, [r3, #8]
}
 8015c7a:	bf00      	nop
 8015c7c:	370c      	adds	r7, #12
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c84:	4770      	bx	lr
	...

08015c88 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b084      	sub	sp, #16
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d107      	bne.n	8015caa <udp_recv+0x22>
 8015c9a:	4b08      	ldr	r3, [pc, #32]	; (8015cbc <udp_recv+0x34>)
 8015c9c:	f240 428a 	movw	r2, #1162	; 0x48a
 8015ca0:	4907      	ldr	r1, [pc, #28]	; (8015cc0 <udp_recv+0x38>)
 8015ca2:	4808      	ldr	r0, [pc, #32]	; (8015cc4 <udp_recv+0x3c>)
 8015ca4:	f005 f84a 	bl	801ad3c <iprintf>
 8015ca8:	e005      	b.n	8015cb6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	68ba      	ldr	r2, [r7, #8]
 8015cae:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	687a      	ldr	r2, [r7, #4]
 8015cb4:	61da      	str	r2, [r3, #28]
}
 8015cb6:	3710      	adds	r7, #16
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	0801e8a4 	.word	0x0801e8a4
 8015cc0:	0801ebd8 	.word	0x0801ebd8
 8015cc4:	0801e8f8 	.word	0x0801e8f8

08015cc8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b084      	sub	sp, #16
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d107      	bne.n	8015ce6 <udp_remove+0x1e>
 8015cd6:	4b19      	ldr	r3, [pc, #100]	; (8015d3c <udp_remove+0x74>)
 8015cd8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015cdc:	4918      	ldr	r1, [pc, #96]	; (8015d40 <udp_remove+0x78>)
 8015cde:	4819      	ldr	r0, [pc, #100]	; (8015d44 <udp_remove+0x7c>)
 8015ce0:	f005 f82c 	bl	801ad3c <iprintf>
 8015ce4:	e026      	b.n	8015d34 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015ce6:	4b18      	ldr	r3, [pc, #96]	; (8015d48 <udp_remove+0x80>)
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	687a      	ldr	r2, [r7, #4]
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d105      	bne.n	8015cfc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015cf0:	4b15      	ldr	r3, [pc, #84]	; (8015d48 <udp_remove+0x80>)
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	68db      	ldr	r3, [r3, #12]
 8015cf6:	4a14      	ldr	r2, [pc, #80]	; (8015d48 <udp_remove+0x80>)
 8015cf8:	6013      	str	r3, [r2, #0]
 8015cfa:	e017      	b.n	8015d2c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015cfc:	4b12      	ldr	r3, [pc, #72]	; (8015d48 <udp_remove+0x80>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	60fb      	str	r3, [r7, #12]
 8015d02:	e010      	b.n	8015d26 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	68db      	ldr	r3, [r3, #12]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d009      	beq.n	8015d20 <udp_remove+0x58>
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	68db      	ldr	r3, [r3, #12]
 8015d10:	687a      	ldr	r2, [r7, #4]
 8015d12:	429a      	cmp	r2, r3
 8015d14:	d104      	bne.n	8015d20 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	68da      	ldr	r2, [r3, #12]
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	60da      	str	r2, [r3, #12]
        break;
 8015d1e:	e005      	b.n	8015d2c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	68db      	ldr	r3, [r3, #12]
 8015d24:	60fb      	str	r3, [r7, #12]
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d1eb      	bne.n	8015d04 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015d2c:	6879      	ldr	r1, [r7, #4]
 8015d2e:	2000      	movs	r0, #0
 8015d30:	f7f7 ff8e 	bl	800dc50 <memp_free>
}
 8015d34:	3710      	adds	r7, #16
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}
 8015d3a:	bf00      	nop
 8015d3c:	0801e8a4 	.word	0x0801e8a4
 8015d40:	0801ebf0 	.word	0x0801ebf0
 8015d44:	0801e8f8 	.word	0x0801e8f8
 8015d48:	20018578 	.word	0x20018578

08015d4c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b082      	sub	sp, #8
 8015d50:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015d52:	2000      	movs	r0, #0
 8015d54:	f7f7 ff2a 	bl	800dbac <memp_malloc>
 8015d58:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d007      	beq.n	8015d70 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015d60:	2220      	movs	r2, #32
 8015d62:	2100      	movs	r1, #0
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f004 fc49 	bl	801a5fc <memset>
    pcb->ttl = UDP_TTL;
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	22ff      	movs	r2, #255	; 0xff
 8015d6e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015d70:	687b      	ldr	r3, [r7, #4]
}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3708      	adds	r7, #8
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}

08015d7a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015d7a:	b580      	push	{r7, lr}
 8015d7c:	b084      	sub	sp, #16
 8015d7e:	af00      	add	r7, sp, #0
 8015d80:	4603      	mov	r3, r0
 8015d82:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015d84:	f7ff ffe2 	bl	8015d4c <udp_new>
 8015d88:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3710      	adds	r7, #16
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}

08015d94 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015d94:	b480      	push	{r7}
 8015d96:	b085      	sub	sp, #20
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d01e      	beq.n	8015de2 <udp_netif_ip_addr_changed+0x4e>
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d01a      	beq.n	8015de2 <udp_netif_ip_addr_changed+0x4e>
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d017      	beq.n	8015de2 <udp_netif_ip_addr_changed+0x4e>
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d013      	beq.n	8015de2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015dba:	4b0d      	ldr	r3, [pc, #52]	; (8015df0 <udp_netif_ip_addr_changed+0x5c>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	60fb      	str	r3, [r7, #12]
 8015dc0:	e00c      	b.n	8015ddc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	681a      	ldr	r2, [r3, #0]
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d103      	bne.n	8015dd6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	681a      	ldr	r2, [r3, #0]
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	68db      	ldr	r3, [r3, #12]
 8015dda:	60fb      	str	r3, [r7, #12]
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d1ef      	bne.n	8015dc2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015de2:	bf00      	nop
 8015de4:	3714      	adds	r7, #20
 8015de6:	46bd      	mov	sp, r7
 8015de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dec:	4770      	bx	lr
 8015dee:	bf00      	nop
 8015df0:	20018578 	.word	0x20018578

08015df4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b082      	sub	sp, #8
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015dfc:	4915      	ldr	r1, [pc, #84]	; (8015e54 <etharp_free_entry+0x60>)
 8015dfe:	687a      	ldr	r2, [r7, #4]
 8015e00:	4613      	mov	r3, r2
 8015e02:	005b      	lsls	r3, r3, #1
 8015e04:	4413      	add	r3, r2
 8015e06:	00db      	lsls	r3, r3, #3
 8015e08:	440b      	add	r3, r1
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d013      	beq.n	8015e38 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015e10:	4910      	ldr	r1, [pc, #64]	; (8015e54 <etharp_free_entry+0x60>)
 8015e12:	687a      	ldr	r2, [r7, #4]
 8015e14:	4613      	mov	r3, r2
 8015e16:	005b      	lsls	r3, r3, #1
 8015e18:	4413      	add	r3, r2
 8015e1a:	00db      	lsls	r3, r3, #3
 8015e1c:	440b      	add	r3, r1
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7f8 fe23 	bl	800ea6c <pbuf_free>
    arp_table[i].q = NULL;
 8015e26:	490b      	ldr	r1, [pc, #44]	; (8015e54 <etharp_free_entry+0x60>)
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	005b      	lsls	r3, r3, #1
 8015e2e:	4413      	add	r3, r2
 8015e30:	00db      	lsls	r3, r3, #3
 8015e32:	440b      	add	r3, r1
 8015e34:	2200      	movs	r2, #0
 8015e36:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015e38:	4906      	ldr	r1, [pc, #24]	; (8015e54 <etharp_free_entry+0x60>)
 8015e3a:	687a      	ldr	r2, [r7, #4]
 8015e3c:	4613      	mov	r3, r2
 8015e3e:	005b      	lsls	r3, r3, #1
 8015e40:	4413      	add	r3, r2
 8015e42:	00db      	lsls	r3, r3, #3
 8015e44:	440b      	add	r3, r1
 8015e46:	3314      	adds	r3, #20
 8015e48:	2200      	movs	r2, #0
 8015e4a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015e4c:	bf00      	nop
 8015e4e:	3708      	adds	r7, #8
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}
 8015e54:	2001161c 	.word	0x2001161c

08015e58 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b082      	sub	sp, #8
 8015e5c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015e5e:	2300      	movs	r3, #0
 8015e60:	607b      	str	r3, [r7, #4]
 8015e62:	e096      	b.n	8015f92 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015e64:	494f      	ldr	r1, [pc, #316]	; (8015fa4 <etharp_tmr+0x14c>)
 8015e66:	687a      	ldr	r2, [r7, #4]
 8015e68:	4613      	mov	r3, r2
 8015e6a:	005b      	lsls	r3, r3, #1
 8015e6c:	4413      	add	r3, r2
 8015e6e:	00db      	lsls	r3, r3, #3
 8015e70:	440b      	add	r3, r1
 8015e72:	3314      	adds	r3, #20
 8015e74:	781b      	ldrb	r3, [r3, #0]
 8015e76:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015e78:	78fb      	ldrb	r3, [r7, #3]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	f000 8086 	beq.w	8015f8c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015e80:	4948      	ldr	r1, [pc, #288]	; (8015fa4 <etharp_tmr+0x14c>)
 8015e82:	687a      	ldr	r2, [r7, #4]
 8015e84:	4613      	mov	r3, r2
 8015e86:	005b      	lsls	r3, r3, #1
 8015e88:	4413      	add	r3, r2
 8015e8a:	00db      	lsls	r3, r3, #3
 8015e8c:	440b      	add	r3, r1
 8015e8e:	3312      	adds	r3, #18
 8015e90:	881b      	ldrh	r3, [r3, #0]
 8015e92:	3301      	adds	r3, #1
 8015e94:	b298      	uxth	r0, r3
 8015e96:	4943      	ldr	r1, [pc, #268]	; (8015fa4 <etharp_tmr+0x14c>)
 8015e98:	687a      	ldr	r2, [r7, #4]
 8015e9a:	4613      	mov	r3, r2
 8015e9c:	005b      	lsls	r3, r3, #1
 8015e9e:	4413      	add	r3, r2
 8015ea0:	00db      	lsls	r3, r3, #3
 8015ea2:	440b      	add	r3, r1
 8015ea4:	3312      	adds	r3, #18
 8015ea6:	4602      	mov	r2, r0
 8015ea8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015eaa:	493e      	ldr	r1, [pc, #248]	; (8015fa4 <etharp_tmr+0x14c>)
 8015eac:	687a      	ldr	r2, [r7, #4]
 8015eae:	4613      	mov	r3, r2
 8015eb0:	005b      	lsls	r3, r3, #1
 8015eb2:	4413      	add	r3, r2
 8015eb4:	00db      	lsls	r3, r3, #3
 8015eb6:	440b      	add	r3, r1
 8015eb8:	3312      	adds	r3, #18
 8015eba:	881b      	ldrh	r3, [r3, #0]
 8015ebc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015ec0:	d215      	bcs.n	8015eee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015ec2:	4938      	ldr	r1, [pc, #224]	; (8015fa4 <etharp_tmr+0x14c>)
 8015ec4:	687a      	ldr	r2, [r7, #4]
 8015ec6:	4613      	mov	r3, r2
 8015ec8:	005b      	lsls	r3, r3, #1
 8015eca:	4413      	add	r3, r2
 8015ecc:	00db      	lsls	r3, r3, #3
 8015ece:	440b      	add	r3, r1
 8015ed0:	3314      	adds	r3, #20
 8015ed2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015ed4:	2b01      	cmp	r3, #1
 8015ed6:	d10e      	bne.n	8015ef6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015ed8:	4932      	ldr	r1, [pc, #200]	; (8015fa4 <etharp_tmr+0x14c>)
 8015eda:	687a      	ldr	r2, [r7, #4]
 8015edc:	4613      	mov	r3, r2
 8015ede:	005b      	lsls	r3, r3, #1
 8015ee0:	4413      	add	r3, r2
 8015ee2:	00db      	lsls	r3, r3, #3
 8015ee4:	440b      	add	r3, r1
 8015ee6:	3312      	adds	r3, #18
 8015ee8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015eea:	2b04      	cmp	r3, #4
 8015eec:	d903      	bls.n	8015ef6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f7ff ff80 	bl	8015df4 <etharp_free_entry>
 8015ef4:	e04a      	b.n	8015f8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015ef6:	492b      	ldr	r1, [pc, #172]	; (8015fa4 <etharp_tmr+0x14c>)
 8015ef8:	687a      	ldr	r2, [r7, #4]
 8015efa:	4613      	mov	r3, r2
 8015efc:	005b      	lsls	r3, r3, #1
 8015efe:	4413      	add	r3, r2
 8015f00:	00db      	lsls	r3, r3, #3
 8015f02:	440b      	add	r3, r1
 8015f04:	3314      	adds	r3, #20
 8015f06:	781b      	ldrb	r3, [r3, #0]
 8015f08:	2b03      	cmp	r3, #3
 8015f0a:	d10a      	bne.n	8015f22 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015f0c:	4925      	ldr	r1, [pc, #148]	; (8015fa4 <etharp_tmr+0x14c>)
 8015f0e:	687a      	ldr	r2, [r7, #4]
 8015f10:	4613      	mov	r3, r2
 8015f12:	005b      	lsls	r3, r3, #1
 8015f14:	4413      	add	r3, r2
 8015f16:	00db      	lsls	r3, r3, #3
 8015f18:	440b      	add	r3, r1
 8015f1a:	3314      	adds	r3, #20
 8015f1c:	2204      	movs	r2, #4
 8015f1e:	701a      	strb	r2, [r3, #0]
 8015f20:	e034      	b.n	8015f8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015f22:	4920      	ldr	r1, [pc, #128]	; (8015fa4 <etharp_tmr+0x14c>)
 8015f24:	687a      	ldr	r2, [r7, #4]
 8015f26:	4613      	mov	r3, r2
 8015f28:	005b      	lsls	r3, r3, #1
 8015f2a:	4413      	add	r3, r2
 8015f2c:	00db      	lsls	r3, r3, #3
 8015f2e:	440b      	add	r3, r1
 8015f30:	3314      	adds	r3, #20
 8015f32:	781b      	ldrb	r3, [r3, #0]
 8015f34:	2b04      	cmp	r3, #4
 8015f36:	d10a      	bne.n	8015f4e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015f38:	491a      	ldr	r1, [pc, #104]	; (8015fa4 <etharp_tmr+0x14c>)
 8015f3a:	687a      	ldr	r2, [r7, #4]
 8015f3c:	4613      	mov	r3, r2
 8015f3e:	005b      	lsls	r3, r3, #1
 8015f40:	4413      	add	r3, r2
 8015f42:	00db      	lsls	r3, r3, #3
 8015f44:	440b      	add	r3, r1
 8015f46:	3314      	adds	r3, #20
 8015f48:	2202      	movs	r2, #2
 8015f4a:	701a      	strb	r2, [r3, #0]
 8015f4c:	e01e      	b.n	8015f8c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015f4e:	4915      	ldr	r1, [pc, #84]	; (8015fa4 <etharp_tmr+0x14c>)
 8015f50:	687a      	ldr	r2, [r7, #4]
 8015f52:	4613      	mov	r3, r2
 8015f54:	005b      	lsls	r3, r3, #1
 8015f56:	4413      	add	r3, r2
 8015f58:	00db      	lsls	r3, r3, #3
 8015f5a:	440b      	add	r3, r1
 8015f5c:	3314      	adds	r3, #20
 8015f5e:	781b      	ldrb	r3, [r3, #0]
 8015f60:	2b01      	cmp	r3, #1
 8015f62:	d113      	bne.n	8015f8c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015f64:	490f      	ldr	r1, [pc, #60]	; (8015fa4 <etharp_tmr+0x14c>)
 8015f66:	687a      	ldr	r2, [r7, #4]
 8015f68:	4613      	mov	r3, r2
 8015f6a:	005b      	lsls	r3, r3, #1
 8015f6c:	4413      	add	r3, r2
 8015f6e:	00db      	lsls	r3, r3, #3
 8015f70:	440b      	add	r3, r1
 8015f72:	3308      	adds	r3, #8
 8015f74:	6818      	ldr	r0, [r3, #0]
 8015f76:	687a      	ldr	r2, [r7, #4]
 8015f78:	4613      	mov	r3, r2
 8015f7a:	005b      	lsls	r3, r3, #1
 8015f7c:	4413      	add	r3, r2
 8015f7e:	00db      	lsls	r3, r3, #3
 8015f80:	4a08      	ldr	r2, [pc, #32]	; (8015fa4 <etharp_tmr+0x14c>)
 8015f82:	4413      	add	r3, r2
 8015f84:	3304      	adds	r3, #4
 8015f86:	4619      	mov	r1, r3
 8015f88:	f000 fe6e 	bl	8016c68 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	3301      	adds	r3, #1
 8015f90:	607b      	str	r3, [r7, #4]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	2b09      	cmp	r3, #9
 8015f96:	f77f af65 	ble.w	8015e64 <etharp_tmr+0xc>
      }
    }
  }
}
 8015f9a:	bf00      	nop
 8015f9c:	bf00      	nop
 8015f9e:	3708      	adds	r7, #8
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	bd80      	pop	{r7, pc}
 8015fa4:	2001161c 	.word	0x2001161c

08015fa8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b08a      	sub	sp, #40	; 0x28
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	60f8      	str	r0, [r7, #12]
 8015fb0:	460b      	mov	r3, r1
 8015fb2:	607a      	str	r2, [r7, #4]
 8015fb4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015fb6:	230a      	movs	r3, #10
 8015fb8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015fba:	230a      	movs	r3, #10
 8015fbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015fbe:	230a      	movs	r3, #10
 8015fc0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015fc6:	230a      	movs	r3, #10
 8015fc8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	83bb      	strh	r3, [r7, #28]
 8015fce:	2300      	movs	r3, #0
 8015fd0:	837b      	strh	r3, [r7, #26]
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	843b      	strh	r3, [r7, #32]
 8015fda:	e0ae      	b.n	801613a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015fdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015fe0:	49a6      	ldr	r1, [pc, #664]	; (801627c <etharp_find_entry+0x2d4>)
 8015fe2:	4613      	mov	r3, r2
 8015fe4:	005b      	lsls	r3, r3, #1
 8015fe6:	4413      	add	r3, r2
 8015fe8:	00db      	lsls	r3, r3, #3
 8015fea:	440b      	add	r3, r1
 8015fec:	3314      	adds	r3, #20
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015ff2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015ff6:	2b0a      	cmp	r3, #10
 8015ff8:	d105      	bne.n	8016006 <etharp_find_entry+0x5e>
 8015ffa:	7dfb      	ldrb	r3, [r7, #23]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d102      	bne.n	8016006 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016000:	8c3b      	ldrh	r3, [r7, #32]
 8016002:	847b      	strh	r3, [r7, #34]	; 0x22
 8016004:	e095      	b.n	8016132 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016006:	7dfb      	ldrb	r3, [r7, #23]
 8016008:	2b00      	cmp	r3, #0
 801600a:	f000 8092 	beq.w	8016132 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801600e:	7dfb      	ldrb	r3, [r7, #23]
 8016010:	2b01      	cmp	r3, #1
 8016012:	d009      	beq.n	8016028 <etharp_find_entry+0x80>
 8016014:	7dfb      	ldrb	r3, [r7, #23]
 8016016:	2b01      	cmp	r3, #1
 8016018:	d806      	bhi.n	8016028 <etharp_find_entry+0x80>
 801601a:	4b99      	ldr	r3, [pc, #612]	; (8016280 <etharp_find_entry+0x2d8>)
 801601c:	f240 1223 	movw	r2, #291	; 0x123
 8016020:	4998      	ldr	r1, [pc, #608]	; (8016284 <etharp_find_entry+0x2dc>)
 8016022:	4899      	ldr	r0, [pc, #612]	; (8016288 <etharp_find_entry+0x2e0>)
 8016024:	f004 fe8a 	bl	801ad3c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d020      	beq.n	8016070 <etharp_find_entry+0xc8>
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	6819      	ldr	r1, [r3, #0]
 8016032:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016036:	4891      	ldr	r0, [pc, #580]	; (801627c <etharp_find_entry+0x2d4>)
 8016038:	4613      	mov	r3, r2
 801603a:	005b      	lsls	r3, r3, #1
 801603c:	4413      	add	r3, r2
 801603e:	00db      	lsls	r3, r3, #3
 8016040:	4403      	add	r3, r0
 8016042:	3304      	adds	r3, #4
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	4299      	cmp	r1, r3
 8016048:	d112      	bne.n	8016070 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d00c      	beq.n	801606a <etharp_find_entry+0xc2>
 8016050:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016054:	4989      	ldr	r1, [pc, #548]	; (801627c <etharp_find_entry+0x2d4>)
 8016056:	4613      	mov	r3, r2
 8016058:	005b      	lsls	r3, r3, #1
 801605a:	4413      	add	r3, r2
 801605c:	00db      	lsls	r3, r3, #3
 801605e:	440b      	add	r3, r1
 8016060:	3308      	adds	r3, #8
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	687a      	ldr	r2, [r7, #4]
 8016066:	429a      	cmp	r2, r3
 8016068:	d102      	bne.n	8016070 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801606a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801606e:	e100      	b.n	8016272 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016070:	7dfb      	ldrb	r3, [r7, #23]
 8016072:	2b01      	cmp	r3, #1
 8016074:	d140      	bne.n	80160f8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016076:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801607a:	4980      	ldr	r1, [pc, #512]	; (801627c <etharp_find_entry+0x2d4>)
 801607c:	4613      	mov	r3, r2
 801607e:	005b      	lsls	r3, r3, #1
 8016080:	4413      	add	r3, r2
 8016082:	00db      	lsls	r3, r3, #3
 8016084:	440b      	add	r3, r1
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d01a      	beq.n	80160c2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801608c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016090:	497a      	ldr	r1, [pc, #488]	; (801627c <etharp_find_entry+0x2d4>)
 8016092:	4613      	mov	r3, r2
 8016094:	005b      	lsls	r3, r3, #1
 8016096:	4413      	add	r3, r2
 8016098:	00db      	lsls	r3, r3, #3
 801609a:	440b      	add	r3, r1
 801609c:	3312      	adds	r3, #18
 801609e:	881b      	ldrh	r3, [r3, #0]
 80160a0:	8bba      	ldrh	r2, [r7, #28]
 80160a2:	429a      	cmp	r2, r3
 80160a4:	d845      	bhi.n	8016132 <etharp_find_entry+0x18a>
            old_queue = i;
 80160a6:	8c3b      	ldrh	r3, [r7, #32]
 80160a8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80160aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160ae:	4973      	ldr	r1, [pc, #460]	; (801627c <etharp_find_entry+0x2d4>)
 80160b0:	4613      	mov	r3, r2
 80160b2:	005b      	lsls	r3, r3, #1
 80160b4:	4413      	add	r3, r2
 80160b6:	00db      	lsls	r3, r3, #3
 80160b8:	440b      	add	r3, r1
 80160ba:	3312      	adds	r3, #18
 80160bc:	881b      	ldrh	r3, [r3, #0]
 80160be:	83bb      	strh	r3, [r7, #28]
 80160c0:	e037      	b.n	8016132 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80160c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160c6:	496d      	ldr	r1, [pc, #436]	; (801627c <etharp_find_entry+0x2d4>)
 80160c8:	4613      	mov	r3, r2
 80160ca:	005b      	lsls	r3, r3, #1
 80160cc:	4413      	add	r3, r2
 80160ce:	00db      	lsls	r3, r3, #3
 80160d0:	440b      	add	r3, r1
 80160d2:	3312      	adds	r3, #18
 80160d4:	881b      	ldrh	r3, [r3, #0]
 80160d6:	8b7a      	ldrh	r2, [r7, #26]
 80160d8:	429a      	cmp	r2, r3
 80160da:	d82a      	bhi.n	8016132 <etharp_find_entry+0x18a>
            old_pending = i;
 80160dc:	8c3b      	ldrh	r3, [r7, #32]
 80160de:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80160e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80160e4:	4965      	ldr	r1, [pc, #404]	; (801627c <etharp_find_entry+0x2d4>)
 80160e6:	4613      	mov	r3, r2
 80160e8:	005b      	lsls	r3, r3, #1
 80160ea:	4413      	add	r3, r2
 80160ec:	00db      	lsls	r3, r3, #3
 80160ee:	440b      	add	r3, r1
 80160f0:	3312      	adds	r3, #18
 80160f2:	881b      	ldrh	r3, [r3, #0]
 80160f4:	837b      	strh	r3, [r7, #26]
 80160f6:	e01c      	b.n	8016132 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80160f8:	7dfb      	ldrb	r3, [r7, #23]
 80160fa:	2b01      	cmp	r3, #1
 80160fc:	d919      	bls.n	8016132 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80160fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016102:	495e      	ldr	r1, [pc, #376]	; (801627c <etharp_find_entry+0x2d4>)
 8016104:	4613      	mov	r3, r2
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	4413      	add	r3, r2
 801610a:	00db      	lsls	r3, r3, #3
 801610c:	440b      	add	r3, r1
 801610e:	3312      	adds	r3, #18
 8016110:	881b      	ldrh	r3, [r3, #0]
 8016112:	8b3a      	ldrh	r2, [r7, #24]
 8016114:	429a      	cmp	r2, r3
 8016116:	d80c      	bhi.n	8016132 <etharp_find_entry+0x18a>
            old_stable = i;
 8016118:	8c3b      	ldrh	r3, [r7, #32]
 801611a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801611c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016120:	4956      	ldr	r1, [pc, #344]	; (801627c <etharp_find_entry+0x2d4>)
 8016122:	4613      	mov	r3, r2
 8016124:	005b      	lsls	r3, r3, #1
 8016126:	4413      	add	r3, r2
 8016128:	00db      	lsls	r3, r3, #3
 801612a:	440b      	add	r3, r1
 801612c:	3312      	adds	r3, #18
 801612e:	881b      	ldrh	r3, [r3, #0]
 8016130:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016132:	8c3b      	ldrh	r3, [r7, #32]
 8016134:	3301      	adds	r3, #1
 8016136:	b29b      	uxth	r3, r3
 8016138:	843b      	strh	r3, [r7, #32]
 801613a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801613e:	2b09      	cmp	r3, #9
 8016140:	f77f af4c 	ble.w	8015fdc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016144:	7afb      	ldrb	r3, [r7, #11]
 8016146:	f003 0302 	and.w	r3, r3, #2
 801614a:	2b00      	cmp	r3, #0
 801614c:	d108      	bne.n	8016160 <etharp_find_entry+0x1b8>
 801614e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016152:	2b0a      	cmp	r3, #10
 8016154:	d107      	bne.n	8016166 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016156:	7afb      	ldrb	r3, [r7, #11]
 8016158:	f003 0301 	and.w	r3, r3, #1
 801615c:	2b00      	cmp	r3, #0
 801615e:	d102      	bne.n	8016166 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016160:	f04f 33ff 	mov.w	r3, #4294967295
 8016164:	e085      	b.n	8016272 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016166:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801616a:	2b09      	cmp	r3, #9
 801616c:	dc02      	bgt.n	8016174 <etharp_find_entry+0x1cc>
    i = empty;
 801616e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016170:	843b      	strh	r3, [r7, #32]
 8016172:	e039      	b.n	80161e8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016174:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016178:	2b09      	cmp	r3, #9
 801617a:	dc14      	bgt.n	80161a6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801617c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801617e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016180:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016184:	493d      	ldr	r1, [pc, #244]	; (801627c <etharp_find_entry+0x2d4>)
 8016186:	4613      	mov	r3, r2
 8016188:	005b      	lsls	r3, r3, #1
 801618a:	4413      	add	r3, r2
 801618c:	00db      	lsls	r3, r3, #3
 801618e:	440b      	add	r3, r1
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d018      	beq.n	80161c8 <etharp_find_entry+0x220>
 8016196:	4b3a      	ldr	r3, [pc, #232]	; (8016280 <etharp_find_entry+0x2d8>)
 8016198:	f240 126d 	movw	r2, #365	; 0x16d
 801619c:	493b      	ldr	r1, [pc, #236]	; (801628c <etharp_find_entry+0x2e4>)
 801619e:	483a      	ldr	r0, [pc, #232]	; (8016288 <etharp_find_entry+0x2e0>)
 80161a0:	f004 fdcc 	bl	801ad3c <iprintf>
 80161a4:	e010      	b.n	80161c8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80161a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80161aa:	2b09      	cmp	r3, #9
 80161ac:	dc02      	bgt.n	80161b4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80161ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80161b0:	843b      	strh	r3, [r7, #32]
 80161b2:	e009      	b.n	80161c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80161b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80161b8:	2b09      	cmp	r3, #9
 80161ba:	dc02      	bgt.n	80161c2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80161bc:	8bfb      	ldrh	r3, [r7, #30]
 80161be:	843b      	strh	r3, [r7, #32]
 80161c0:	e002      	b.n	80161c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80161c2:	f04f 33ff 	mov.w	r3, #4294967295
 80161c6:	e054      	b.n	8016272 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80161c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80161cc:	2b09      	cmp	r3, #9
 80161ce:	dd06      	ble.n	80161de <etharp_find_entry+0x236>
 80161d0:	4b2b      	ldr	r3, [pc, #172]	; (8016280 <etharp_find_entry+0x2d8>)
 80161d2:	f240 127f 	movw	r2, #383	; 0x17f
 80161d6:	492e      	ldr	r1, [pc, #184]	; (8016290 <etharp_find_entry+0x2e8>)
 80161d8:	482b      	ldr	r0, [pc, #172]	; (8016288 <etharp_find_entry+0x2e0>)
 80161da:	f004 fdaf 	bl	801ad3c <iprintf>
    etharp_free_entry(i);
 80161de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7ff fe06 	bl	8015df4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80161e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80161ec:	2b09      	cmp	r3, #9
 80161ee:	dd06      	ble.n	80161fe <etharp_find_entry+0x256>
 80161f0:	4b23      	ldr	r3, [pc, #140]	; (8016280 <etharp_find_entry+0x2d8>)
 80161f2:	f240 1283 	movw	r2, #387	; 0x183
 80161f6:	4926      	ldr	r1, [pc, #152]	; (8016290 <etharp_find_entry+0x2e8>)
 80161f8:	4823      	ldr	r0, [pc, #140]	; (8016288 <etharp_find_entry+0x2e0>)
 80161fa:	f004 fd9f 	bl	801ad3c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80161fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016202:	491e      	ldr	r1, [pc, #120]	; (801627c <etharp_find_entry+0x2d4>)
 8016204:	4613      	mov	r3, r2
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	4413      	add	r3, r2
 801620a:	00db      	lsls	r3, r3, #3
 801620c:	440b      	add	r3, r1
 801620e:	3314      	adds	r3, #20
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d006      	beq.n	8016224 <etharp_find_entry+0x27c>
 8016216:	4b1a      	ldr	r3, [pc, #104]	; (8016280 <etharp_find_entry+0x2d8>)
 8016218:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801621c:	491d      	ldr	r1, [pc, #116]	; (8016294 <etharp_find_entry+0x2ec>)
 801621e:	481a      	ldr	r0, [pc, #104]	; (8016288 <etharp_find_entry+0x2e0>)
 8016220:	f004 fd8c 	bl	801ad3c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00b      	beq.n	8016242 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801622a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	6819      	ldr	r1, [r3, #0]
 8016232:	4812      	ldr	r0, [pc, #72]	; (801627c <etharp_find_entry+0x2d4>)
 8016234:	4613      	mov	r3, r2
 8016236:	005b      	lsls	r3, r3, #1
 8016238:	4413      	add	r3, r2
 801623a:	00db      	lsls	r3, r3, #3
 801623c:	4403      	add	r3, r0
 801623e:	3304      	adds	r3, #4
 8016240:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016242:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016246:	490d      	ldr	r1, [pc, #52]	; (801627c <etharp_find_entry+0x2d4>)
 8016248:	4613      	mov	r3, r2
 801624a:	005b      	lsls	r3, r3, #1
 801624c:	4413      	add	r3, r2
 801624e:	00db      	lsls	r3, r3, #3
 8016250:	440b      	add	r3, r1
 8016252:	3312      	adds	r3, #18
 8016254:	2200      	movs	r2, #0
 8016256:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016258:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801625c:	4907      	ldr	r1, [pc, #28]	; (801627c <etharp_find_entry+0x2d4>)
 801625e:	4613      	mov	r3, r2
 8016260:	005b      	lsls	r3, r3, #1
 8016262:	4413      	add	r3, r2
 8016264:	00db      	lsls	r3, r3, #3
 8016266:	440b      	add	r3, r1
 8016268:	3308      	adds	r3, #8
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801626e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016272:	4618      	mov	r0, r3
 8016274:	3728      	adds	r7, #40	; 0x28
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
 801627a:	bf00      	nop
 801627c:	2001161c 	.word	0x2001161c
 8016280:	0801ec08 	.word	0x0801ec08
 8016284:	0801ec40 	.word	0x0801ec40
 8016288:	0801ec80 	.word	0x0801ec80
 801628c:	0801eca8 	.word	0x0801eca8
 8016290:	0801ecc0 	.word	0x0801ecc0
 8016294:	0801ecd4 	.word	0x0801ecd4

08016298 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b088      	sub	sp, #32
 801629c:	af02      	add	r7, sp, #8
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	60b9      	str	r1, [r7, #8]
 80162a2:	607a      	str	r2, [r7, #4]
 80162a4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80162ac:	2b06      	cmp	r3, #6
 80162ae:	d006      	beq.n	80162be <etharp_update_arp_entry+0x26>
 80162b0:	4b48      	ldr	r3, [pc, #288]	; (80163d4 <etharp_update_arp_entry+0x13c>)
 80162b2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80162b6:	4948      	ldr	r1, [pc, #288]	; (80163d8 <etharp_update_arp_entry+0x140>)
 80162b8:	4848      	ldr	r0, [pc, #288]	; (80163dc <etharp_update_arp_entry+0x144>)
 80162ba:	f004 fd3f 	bl	801ad3c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d012      	beq.n	80162ea <etharp_update_arp_entry+0x52>
 80162c4:	68bb      	ldr	r3, [r7, #8]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d00e      	beq.n	80162ea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	68f9      	ldr	r1, [r7, #12]
 80162d2:	4618      	mov	r0, r3
 80162d4:	f001 f8fe 	bl	80174d4 <ip4_addr_isbroadcast_u32>
 80162d8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d105      	bne.n	80162ea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80162e6:	2be0      	cmp	r3, #224	; 0xe0
 80162e8:	d102      	bne.n	80162f0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80162ea:	f06f 030f 	mvn.w	r3, #15
 80162ee:	e06c      	b.n	80163ca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80162f0:	78fb      	ldrb	r3, [r7, #3]
 80162f2:	68fa      	ldr	r2, [r7, #12]
 80162f4:	4619      	mov	r1, r3
 80162f6:	68b8      	ldr	r0, [r7, #8]
 80162f8:	f7ff fe56 	bl	8015fa8 <etharp_find_entry>
 80162fc:	4603      	mov	r3, r0
 80162fe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016300:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016304:	2b00      	cmp	r3, #0
 8016306:	da02      	bge.n	801630e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016308:	8afb      	ldrh	r3, [r7, #22]
 801630a:	b25b      	sxtb	r3, r3
 801630c:	e05d      	b.n	80163ca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801630e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016312:	4933      	ldr	r1, [pc, #204]	; (80163e0 <etharp_update_arp_entry+0x148>)
 8016314:	4613      	mov	r3, r2
 8016316:	005b      	lsls	r3, r3, #1
 8016318:	4413      	add	r3, r2
 801631a:	00db      	lsls	r3, r3, #3
 801631c:	440b      	add	r3, r1
 801631e:	3314      	adds	r3, #20
 8016320:	2202      	movs	r2, #2
 8016322:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016328:	492d      	ldr	r1, [pc, #180]	; (80163e0 <etharp_update_arp_entry+0x148>)
 801632a:	4613      	mov	r3, r2
 801632c:	005b      	lsls	r3, r3, #1
 801632e:	4413      	add	r3, r2
 8016330:	00db      	lsls	r3, r3, #3
 8016332:	440b      	add	r3, r1
 8016334:	3308      	adds	r3, #8
 8016336:	68fa      	ldr	r2, [r7, #12]
 8016338:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801633a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801633e:	4613      	mov	r3, r2
 8016340:	005b      	lsls	r3, r3, #1
 8016342:	4413      	add	r3, r2
 8016344:	00db      	lsls	r3, r3, #3
 8016346:	3308      	adds	r3, #8
 8016348:	4a25      	ldr	r2, [pc, #148]	; (80163e0 <etharp_update_arp_entry+0x148>)
 801634a:	4413      	add	r3, r2
 801634c:	3304      	adds	r3, #4
 801634e:	2206      	movs	r2, #6
 8016350:	6879      	ldr	r1, [r7, #4]
 8016352:	4618      	mov	r0, r3
 8016354:	f004 f92a 	bl	801a5ac <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016358:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801635c:	4920      	ldr	r1, [pc, #128]	; (80163e0 <etharp_update_arp_entry+0x148>)
 801635e:	4613      	mov	r3, r2
 8016360:	005b      	lsls	r3, r3, #1
 8016362:	4413      	add	r3, r2
 8016364:	00db      	lsls	r3, r3, #3
 8016366:	440b      	add	r3, r1
 8016368:	3312      	adds	r3, #18
 801636a:	2200      	movs	r2, #0
 801636c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801636e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016372:	491b      	ldr	r1, [pc, #108]	; (80163e0 <etharp_update_arp_entry+0x148>)
 8016374:	4613      	mov	r3, r2
 8016376:	005b      	lsls	r3, r3, #1
 8016378:	4413      	add	r3, r2
 801637a:	00db      	lsls	r3, r3, #3
 801637c:	440b      	add	r3, r1
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d021      	beq.n	80163c8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016384:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016388:	4915      	ldr	r1, [pc, #84]	; (80163e0 <etharp_update_arp_entry+0x148>)
 801638a:	4613      	mov	r3, r2
 801638c:	005b      	lsls	r3, r3, #1
 801638e:	4413      	add	r3, r2
 8016390:	00db      	lsls	r3, r3, #3
 8016392:	440b      	add	r3, r1
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016398:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801639c:	4910      	ldr	r1, [pc, #64]	; (80163e0 <etharp_update_arp_entry+0x148>)
 801639e:	4613      	mov	r3, r2
 80163a0:	005b      	lsls	r3, r3, #1
 80163a2:	4413      	add	r3, r2
 80163a4:	00db      	lsls	r3, r3, #3
 80163a6:	440b      	add	r3, r1
 80163a8:	2200      	movs	r2, #0
 80163aa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80163b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80163b6:	9300      	str	r3, [sp, #0]
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	6939      	ldr	r1, [r7, #16]
 80163bc:	68f8      	ldr	r0, [r7, #12]
 80163be:	f002 f813 	bl	80183e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80163c2:	6938      	ldr	r0, [r7, #16]
 80163c4:	f7f8 fb52 	bl	800ea6c <pbuf_free>
  }
  return ERR_OK;
 80163c8:	2300      	movs	r3, #0
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3718      	adds	r7, #24
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	0801ec08 	.word	0x0801ec08
 80163d8:	0801ed00 	.word	0x0801ed00
 80163dc:	0801ec80 	.word	0x0801ec80
 80163e0:	2001161c 	.word	0x2001161c

080163e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b084      	sub	sp, #16
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80163ec:	2300      	movs	r3, #0
 80163ee:	60fb      	str	r3, [r7, #12]
 80163f0:	e01e      	b.n	8016430 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80163f2:	4913      	ldr	r1, [pc, #76]	; (8016440 <etharp_cleanup_netif+0x5c>)
 80163f4:	68fa      	ldr	r2, [r7, #12]
 80163f6:	4613      	mov	r3, r2
 80163f8:	005b      	lsls	r3, r3, #1
 80163fa:	4413      	add	r3, r2
 80163fc:	00db      	lsls	r3, r3, #3
 80163fe:	440b      	add	r3, r1
 8016400:	3314      	adds	r3, #20
 8016402:	781b      	ldrb	r3, [r3, #0]
 8016404:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016406:	7afb      	ldrb	r3, [r7, #11]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d00e      	beq.n	801642a <etharp_cleanup_netif+0x46>
 801640c:	490c      	ldr	r1, [pc, #48]	; (8016440 <etharp_cleanup_netif+0x5c>)
 801640e:	68fa      	ldr	r2, [r7, #12]
 8016410:	4613      	mov	r3, r2
 8016412:	005b      	lsls	r3, r3, #1
 8016414:	4413      	add	r3, r2
 8016416:	00db      	lsls	r3, r3, #3
 8016418:	440b      	add	r3, r1
 801641a:	3308      	adds	r3, #8
 801641c:	681b      	ldr	r3, [r3, #0]
 801641e:	687a      	ldr	r2, [r7, #4]
 8016420:	429a      	cmp	r2, r3
 8016422:	d102      	bne.n	801642a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016424:	68f8      	ldr	r0, [r7, #12]
 8016426:	f7ff fce5 	bl	8015df4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	3301      	adds	r3, #1
 801642e:	60fb      	str	r3, [r7, #12]
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	2b09      	cmp	r3, #9
 8016434:	dddd      	ble.n	80163f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016436:	bf00      	nop
 8016438:	bf00      	nop
 801643a:	3710      	adds	r7, #16
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}
 8016440:	2001161c 	.word	0x2001161c

08016444 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016444:	b5b0      	push	{r4, r5, r7, lr}
 8016446:	b08a      	sub	sp, #40	; 0x28
 8016448:	af04      	add	r7, sp, #16
 801644a:	6078      	str	r0, [r7, #4]
 801644c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801644e:	683b      	ldr	r3, [r7, #0]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d107      	bne.n	8016464 <etharp_input+0x20>
 8016454:	4b3d      	ldr	r3, [pc, #244]	; (801654c <etharp_input+0x108>)
 8016456:	f240 228a 	movw	r2, #650	; 0x28a
 801645a:	493d      	ldr	r1, [pc, #244]	; (8016550 <etharp_input+0x10c>)
 801645c:	483d      	ldr	r0, [pc, #244]	; (8016554 <etharp_input+0x110>)
 801645e:	f004 fc6d 	bl	801ad3c <iprintf>
 8016462:	e06f      	b.n	8016544 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	685b      	ldr	r3, [r3, #4]
 8016468:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801646a:	693b      	ldr	r3, [r7, #16]
 801646c:	881b      	ldrh	r3, [r3, #0]
 801646e:	b29b      	uxth	r3, r3
 8016470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016474:	d10c      	bne.n	8016490 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016476:	693b      	ldr	r3, [r7, #16]
 8016478:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801647a:	2b06      	cmp	r3, #6
 801647c:	d108      	bne.n	8016490 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016482:	2b04      	cmp	r3, #4
 8016484:	d104      	bne.n	8016490 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016486:	693b      	ldr	r3, [r7, #16]
 8016488:	885b      	ldrh	r3, [r3, #2]
 801648a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801648c:	2b08      	cmp	r3, #8
 801648e:	d003      	beq.n	8016498 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016490:	6878      	ldr	r0, [r7, #4]
 8016492:	f7f8 faeb 	bl	800ea6c <pbuf_free>
    return;
 8016496:	e055      	b.n	8016544 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016498:	693b      	ldr	r3, [r7, #16]
 801649a:	330e      	adds	r3, #14
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80164a0:	693b      	ldr	r3, [r7, #16]
 80164a2:	3318      	adds	r3, #24
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	3304      	adds	r3, #4
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d102      	bne.n	80164b8 <etharp_input+0x74>
    for_us = 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	75fb      	strb	r3, [r7, #23]
 80164b6:	e009      	b.n	80164cc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80164b8:	68ba      	ldr	r2, [r7, #8]
 80164ba:	683b      	ldr	r3, [r7, #0]
 80164bc:	3304      	adds	r3, #4
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	429a      	cmp	r2, r3
 80164c2:	bf0c      	ite	eq
 80164c4:	2301      	moveq	r3, #1
 80164c6:	2300      	movne	r3, #0
 80164c8:	b2db      	uxtb	r3, r3
 80164ca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80164cc:	693b      	ldr	r3, [r7, #16]
 80164ce:	f103 0208 	add.w	r2, r3, #8
 80164d2:	7dfb      	ldrb	r3, [r7, #23]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d001      	beq.n	80164dc <etharp_input+0x98>
 80164d8:	2301      	movs	r3, #1
 80164da:	e000      	b.n	80164de <etharp_input+0x9a>
 80164dc:	2302      	movs	r3, #2
 80164de:	f107 010c 	add.w	r1, r7, #12
 80164e2:	6838      	ldr	r0, [r7, #0]
 80164e4:	f7ff fed8 	bl	8016298 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80164e8:	693b      	ldr	r3, [r7, #16]
 80164ea:	88db      	ldrh	r3, [r3, #6]
 80164ec:	b29b      	uxth	r3, r3
 80164ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80164f2:	d003      	beq.n	80164fc <etharp_input+0xb8>
 80164f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164f8:	d01e      	beq.n	8016538 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80164fa:	e020      	b.n	801653e <etharp_input+0xfa>
      if (for_us) {
 80164fc:	7dfb      	ldrb	r3, [r7, #23]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d01c      	beq.n	801653c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016508:	693b      	ldr	r3, [r7, #16]
 801650a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016518:	693a      	ldr	r2, [r7, #16]
 801651a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801651c:	2102      	movs	r1, #2
 801651e:	9103      	str	r1, [sp, #12]
 8016520:	f107 010c 	add.w	r1, r7, #12
 8016524:	9102      	str	r1, [sp, #8]
 8016526:	9201      	str	r2, [sp, #4]
 8016528:	9300      	str	r3, [sp, #0]
 801652a:	462b      	mov	r3, r5
 801652c:	4622      	mov	r2, r4
 801652e:	4601      	mov	r1, r0
 8016530:	6838      	ldr	r0, [r7, #0]
 8016532:	f000 faeb 	bl	8016b0c <etharp_raw>
      break;
 8016536:	e001      	b.n	801653c <etharp_input+0xf8>
      break;
 8016538:	bf00      	nop
 801653a:	e000      	b.n	801653e <etharp_input+0xfa>
      break;
 801653c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f7f8 fa94 	bl	800ea6c <pbuf_free>
}
 8016544:	3718      	adds	r7, #24
 8016546:	46bd      	mov	sp, r7
 8016548:	bdb0      	pop	{r4, r5, r7, pc}
 801654a:	bf00      	nop
 801654c:	0801ec08 	.word	0x0801ec08
 8016550:	0801ed58 	.word	0x0801ed58
 8016554:	0801ec80 	.word	0x0801ec80

08016558 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b086      	sub	sp, #24
 801655c:	af02      	add	r7, sp, #8
 801655e:	60f8      	str	r0, [r7, #12]
 8016560:	60b9      	str	r1, [r7, #8]
 8016562:	4613      	mov	r3, r2
 8016564:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016566:	79fa      	ldrb	r2, [r7, #7]
 8016568:	4944      	ldr	r1, [pc, #272]	; (801667c <etharp_output_to_arp_index+0x124>)
 801656a:	4613      	mov	r3, r2
 801656c:	005b      	lsls	r3, r3, #1
 801656e:	4413      	add	r3, r2
 8016570:	00db      	lsls	r3, r3, #3
 8016572:	440b      	add	r3, r1
 8016574:	3314      	adds	r3, #20
 8016576:	781b      	ldrb	r3, [r3, #0]
 8016578:	2b01      	cmp	r3, #1
 801657a:	d806      	bhi.n	801658a <etharp_output_to_arp_index+0x32>
 801657c:	4b40      	ldr	r3, [pc, #256]	; (8016680 <etharp_output_to_arp_index+0x128>)
 801657e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016582:	4940      	ldr	r1, [pc, #256]	; (8016684 <etharp_output_to_arp_index+0x12c>)
 8016584:	4840      	ldr	r0, [pc, #256]	; (8016688 <etharp_output_to_arp_index+0x130>)
 8016586:	f004 fbd9 	bl	801ad3c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801658a:	79fa      	ldrb	r2, [r7, #7]
 801658c:	493b      	ldr	r1, [pc, #236]	; (801667c <etharp_output_to_arp_index+0x124>)
 801658e:	4613      	mov	r3, r2
 8016590:	005b      	lsls	r3, r3, #1
 8016592:	4413      	add	r3, r2
 8016594:	00db      	lsls	r3, r3, #3
 8016596:	440b      	add	r3, r1
 8016598:	3314      	adds	r3, #20
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	2b02      	cmp	r3, #2
 801659e:	d153      	bne.n	8016648 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80165a0:	79fa      	ldrb	r2, [r7, #7]
 80165a2:	4936      	ldr	r1, [pc, #216]	; (801667c <etharp_output_to_arp_index+0x124>)
 80165a4:	4613      	mov	r3, r2
 80165a6:	005b      	lsls	r3, r3, #1
 80165a8:	4413      	add	r3, r2
 80165aa:	00db      	lsls	r3, r3, #3
 80165ac:	440b      	add	r3, r1
 80165ae:	3312      	adds	r3, #18
 80165b0:	881b      	ldrh	r3, [r3, #0]
 80165b2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80165b6:	d919      	bls.n	80165ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80165b8:	79fa      	ldrb	r2, [r7, #7]
 80165ba:	4613      	mov	r3, r2
 80165bc:	005b      	lsls	r3, r3, #1
 80165be:	4413      	add	r3, r2
 80165c0:	00db      	lsls	r3, r3, #3
 80165c2:	4a2e      	ldr	r2, [pc, #184]	; (801667c <etharp_output_to_arp_index+0x124>)
 80165c4:	4413      	add	r3, r2
 80165c6:	3304      	adds	r3, #4
 80165c8:	4619      	mov	r1, r3
 80165ca:	68f8      	ldr	r0, [r7, #12]
 80165cc:	f000 fb4c 	bl	8016c68 <etharp_request>
 80165d0:	4603      	mov	r3, r0
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d138      	bne.n	8016648 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80165d6:	79fa      	ldrb	r2, [r7, #7]
 80165d8:	4928      	ldr	r1, [pc, #160]	; (801667c <etharp_output_to_arp_index+0x124>)
 80165da:	4613      	mov	r3, r2
 80165dc:	005b      	lsls	r3, r3, #1
 80165de:	4413      	add	r3, r2
 80165e0:	00db      	lsls	r3, r3, #3
 80165e2:	440b      	add	r3, r1
 80165e4:	3314      	adds	r3, #20
 80165e6:	2203      	movs	r2, #3
 80165e8:	701a      	strb	r2, [r3, #0]
 80165ea:	e02d      	b.n	8016648 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80165ec:	79fa      	ldrb	r2, [r7, #7]
 80165ee:	4923      	ldr	r1, [pc, #140]	; (801667c <etharp_output_to_arp_index+0x124>)
 80165f0:	4613      	mov	r3, r2
 80165f2:	005b      	lsls	r3, r3, #1
 80165f4:	4413      	add	r3, r2
 80165f6:	00db      	lsls	r3, r3, #3
 80165f8:	440b      	add	r3, r1
 80165fa:	3312      	adds	r3, #18
 80165fc:	881b      	ldrh	r3, [r3, #0]
 80165fe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016602:	d321      	bcc.n	8016648 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016604:	79fa      	ldrb	r2, [r7, #7]
 8016606:	4613      	mov	r3, r2
 8016608:	005b      	lsls	r3, r3, #1
 801660a:	4413      	add	r3, r2
 801660c:	00db      	lsls	r3, r3, #3
 801660e:	4a1b      	ldr	r2, [pc, #108]	; (801667c <etharp_output_to_arp_index+0x124>)
 8016610:	4413      	add	r3, r2
 8016612:	1d19      	adds	r1, r3, #4
 8016614:	79fa      	ldrb	r2, [r7, #7]
 8016616:	4613      	mov	r3, r2
 8016618:	005b      	lsls	r3, r3, #1
 801661a:	4413      	add	r3, r2
 801661c:	00db      	lsls	r3, r3, #3
 801661e:	3308      	adds	r3, #8
 8016620:	4a16      	ldr	r2, [pc, #88]	; (801667c <etharp_output_to_arp_index+0x124>)
 8016622:	4413      	add	r3, r2
 8016624:	3304      	adds	r3, #4
 8016626:	461a      	mov	r2, r3
 8016628:	68f8      	ldr	r0, [r7, #12]
 801662a:	f000 fafb 	bl	8016c24 <etharp_request_dst>
 801662e:	4603      	mov	r3, r0
 8016630:	2b00      	cmp	r3, #0
 8016632:	d109      	bne.n	8016648 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016634:	79fa      	ldrb	r2, [r7, #7]
 8016636:	4911      	ldr	r1, [pc, #68]	; (801667c <etharp_output_to_arp_index+0x124>)
 8016638:	4613      	mov	r3, r2
 801663a:	005b      	lsls	r3, r3, #1
 801663c:	4413      	add	r3, r2
 801663e:	00db      	lsls	r3, r3, #3
 8016640:	440b      	add	r3, r1
 8016642:	3314      	adds	r3, #20
 8016644:	2203      	movs	r2, #3
 8016646:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801664e:	79fa      	ldrb	r2, [r7, #7]
 8016650:	4613      	mov	r3, r2
 8016652:	005b      	lsls	r3, r3, #1
 8016654:	4413      	add	r3, r2
 8016656:	00db      	lsls	r3, r3, #3
 8016658:	3308      	adds	r3, #8
 801665a:	4a08      	ldr	r2, [pc, #32]	; (801667c <etharp_output_to_arp_index+0x124>)
 801665c:	4413      	add	r3, r2
 801665e:	3304      	adds	r3, #4
 8016660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016664:	9200      	str	r2, [sp, #0]
 8016666:	460a      	mov	r2, r1
 8016668:	68b9      	ldr	r1, [r7, #8]
 801666a:	68f8      	ldr	r0, [r7, #12]
 801666c:	f001 febc 	bl	80183e8 <ethernet_output>
 8016670:	4603      	mov	r3, r0
}
 8016672:	4618      	mov	r0, r3
 8016674:	3710      	adds	r7, #16
 8016676:	46bd      	mov	sp, r7
 8016678:	bd80      	pop	{r7, pc}
 801667a:	bf00      	nop
 801667c:	2001161c 	.word	0x2001161c
 8016680:	0801ec08 	.word	0x0801ec08
 8016684:	0801ed78 	.word	0x0801ed78
 8016688:	0801ec80 	.word	0x0801ec80

0801668c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b08a      	sub	sp, #40	; 0x28
 8016690:	af02      	add	r7, sp, #8
 8016692:	60f8      	str	r0, [r7, #12]
 8016694:	60b9      	str	r1, [r7, #8]
 8016696:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d106      	bne.n	80166b0 <etharp_output+0x24>
 80166a2:	4b73      	ldr	r3, [pc, #460]	; (8016870 <etharp_output+0x1e4>)
 80166a4:	f240 321e 	movw	r2, #798	; 0x31e
 80166a8:	4972      	ldr	r1, [pc, #456]	; (8016874 <etharp_output+0x1e8>)
 80166aa:	4873      	ldr	r0, [pc, #460]	; (8016878 <etharp_output+0x1ec>)
 80166ac:	f004 fb46 	bl	801ad3c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d106      	bne.n	80166c4 <etharp_output+0x38>
 80166b6:	4b6e      	ldr	r3, [pc, #440]	; (8016870 <etharp_output+0x1e4>)
 80166b8:	f240 321f 	movw	r2, #799	; 0x31f
 80166bc:	496f      	ldr	r1, [pc, #444]	; (801687c <etharp_output+0x1f0>)
 80166be:	486e      	ldr	r0, [pc, #440]	; (8016878 <etharp_output+0x1ec>)
 80166c0:	f004 fb3c 	bl	801ad3c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d106      	bne.n	80166d8 <etharp_output+0x4c>
 80166ca:	4b69      	ldr	r3, [pc, #420]	; (8016870 <etharp_output+0x1e4>)
 80166cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80166d0:	496b      	ldr	r1, [pc, #428]	; (8016880 <etharp_output+0x1f4>)
 80166d2:	4869      	ldr	r0, [pc, #420]	; (8016878 <etharp_output+0x1ec>)
 80166d4:	f004 fb32 	bl	801ad3c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	68f9      	ldr	r1, [r7, #12]
 80166de:	4618      	mov	r0, r3
 80166e0:	f000 fef8 	bl	80174d4 <ip4_addr_isbroadcast_u32>
 80166e4:	4603      	mov	r3, r0
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d002      	beq.n	80166f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80166ea:	4b66      	ldr	r3, [pc, #408]	; (8016884 <etharp_output+0x1f8>)
 80166ec:	61fb      	str	r3, [r7, #28]
 80166ee:	e0af      	b.n	8016850 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80166f8:	2be0      	cmp	r3, #224	; 0xe0
 80166fa:	d118      	bne.n	801672e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80166fc:	2301      	movs	r3, #1
 80166fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016700:	2300      	movs	r3, #0
 8016702:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016704:	235e      	movs	r3, #94	; 0x5e
 8016706:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	3301      	adds	r3, #1
 801670c:	781b      	ldrb	r3, [r3, #0]
 801670e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016712:	b2db      	uxtb	r3, r3
 8016714:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	3302      	adds	r3, #2
 801671a:	781b      	ldrb	r3, [r3, #0]
 801671c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	3303      	adds	r3, #3
 8016722:	781b      	ldrb	r3, [r3, #0]
 8016724:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016726:	f107 0310 	add.w	r3, r7, #16
 801672a:	61fb      	str	r3, [r7, #28]
 801672c:	e090      	b.n	8016850 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681a      	ldr	r2, [r3, #0]
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	3304      	adds	r3, #4
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	405a      	eors	r2, r3
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	3308      	adds	r3, #8
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	4013      	ands	r3, r2
 8016742:	2b00      	cmp	r3, #0
 8016744:	d012      	beq.n	801676c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801674c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016750:	4293      	cmp	r3, r2
 8016752:	d00b      	beq.n	801676c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	330c      	adds	r3, #12
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d003      	beq.n	8016766 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	330c      	adds	r3, #12
 8016762:	61bb      	str	r3, [r7, #24]
 8016764:	e002      	b.n	801676c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016766:	f06f 0303 	mvn.w	r3, #3
 801676a:	e07d      	b.n	8016868 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801676c:	4b46      	ldr	r3, [pc, #280]	; (8016888 <etharp_output+0x1fc>)
 801676e:	781b      	ldrb	r3, [r3, #0]
 8016770:	4619      	mov	r1, r3
 8016772:	4a46      	ldr	r2, [pc, #280]	; (801688c <etharp_output+0x200>)
 8016774:	460b      	mov	r3, r1
 8016776:	005b      	lsls	r3, r3, #1
 8016778:	440b      	add	r3, r1
 801677a:	00db      	lsls	r3, r3, #3
 801677c:	4413      	add	r3, r2
 801677e:	3314      	adds	r3, #20
 8016780:	781b      	ldrb	r3, [r3, #0]
 8016782:	2b01      	cmp	r3, #1
 8016784:	d925      	bls.n	80167d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016786:	4b40      	ldr	r3, [pc, #256]	; (8016888 <etharp_output+0x1fc>)
 8016788:	781b      	ldrb	r3, [r3, #0]
 801678a:	4619      	mov	r1, r3
 801678c:	4a3f      	ldr	r2, [pc, #252]	; (801688c <etharp_output+0x200>)
 801678e:	460b      	mov	r3, r1
 8016790:	005b      	lsls	r3, r3, #1
 8016792:	440b      	add	r3, r1
 8016794:	00db      	lsls	r3, r3, #3
 8016796:	4413      	add	r3, r2
 8016798:	3308      	adds	r3, #8
 801679a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801679c:	68fa      	ldr	r2, [r7, #12]
 801679e:	429a      	cmp	r2, r3
 80167a0:	d117      	bne.n	80167d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80167a2:	69bb      	ldr	r3, [r7, #24]
 80167a4:	681a      	ldr	r2, [r3, #0]
 80167a6:	4b38      	ldr	r3, [pc, #224]	; (8016888 <etharp_output+0x1fc>)
 80167a8:	781b      	ldrb	r3, [r3, #0]
 80167aa:	4618      	mov	r0, r3
 80167ac:	4937      	ldr	r1, [pc, #220]	; (801688c <etharp_output+0x200>)
 80167ae:	4603      	mov	r3, r0
 80167b0:	005b      	lsls	r3, r3, #1
 80167b2:	4403      	add	r3, r0
 80167b4:	00db      	lsls	r3, r3, #3
 80167b6:	440b      	add	r3, r1
 80167b8:	3304      	adds	r3, #4
 80167ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80167bc:	429a      	cmp	r2, r3
 80167be:	d108      	bne.n	80167d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80167c0:	4b31      	ldr	r3, [pc, #196]	; (8016888 <etharp_output+0x1fc>)
 80167c2:	781b      	ldrb	r3, [r3, #0]
 80167c4:	461a      	mov	r2, r3
 80167c6:	68b9      	ldr	r1, [r7, #8]
 80167c8:	68f8      	ldr	r0, [r7, #12]
 80167ca:	f7ff fec5 	bl	8016558 <etharp_output_to_arp_index>
 80167ce:	4603      	mov	r3, r0
 80167d0:	e04a      	b.n	8016868 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80167d2:	2300      	movs	r3, #0
 80167d4:	75fb      	strb	r3, [r7, #23]
 80167d6:	e031      	b.n	801683c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80167d8:	7dfa      	ldrb	r2, [r7, #23]
 80167da:	492c      	ldr	r1, [pc, #176]	; (801688c <etharp_output+0x200>)
 80167dc:	4613      	mov	r3, r2
 80167de:	005b      	lsls	r3, r3, #1
 80167e0:	4413      	add	r3, r2
 80167e2:	00db      	lsls	r3, r3, #3
 80167e4:	440b      	add	r3, r1
 80167e6:	3314      	adds	r3, #20
 80167e8:	781b      	ldrb	r3, [r3, #0]
 80167ea:	2b01      	cmp	r3, #1
 80167ec:	d923      	bls.n	8016836 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80167ee:	7dfa      	ldrb	r2, [r7, #23]
 80167f0:	4926      	ldr	r1, [pc, #152]	; (801688c <etharp_output+0x200>)
 80167f2:	4613      	mov	r3, r2
 80167f4:	005b      	lsls	r3, r3, #1
 80167f6:	4413      	add	r3, r2
 80167f8:	00db      	lsls	r3, r3, #3
 80167fa:	440b      	add	r3, r1
 80167fc:	3308      	adds	r3, #8
 80167fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016800:	68fa      	ldr	r2, [r7, #12]
 8016802:	429a      	cmp	r2, r3
 8016804:	d117      	bne.n	8016836 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016806:	69bb      	ldr	r3, [r7, #24]
 8016808:	6819      	ldr	r1, [r3, #0]
 801680a:	7dfa      	ldrb	r2, [r7, #23]
 801680c:	481f      	ldr	r0, [pc, #124]	; (801688c <etharp_output+0x200>)
 801680e:	4613      	mov	r3, r2
 8016810:	005b      	lsls	r3, r3, #1
 8016812:	4413      	add	r3, r2
 8016814:	00db      	lsls	r3, r3, #3
 8016816:	4403      	add	r3, r0
 8016818:	3304      	adds	r3, #4
 801681a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801681c:	4299      	cmp	r1, r3
 801681e:	d10a      	bne.n	8016836 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016820:	4a19      	ldr	r2, [pc, #100]	; (8016888 <etharp_output+0x1fc>)
 8016822:	7dfb      	ldrb	r3, [r7, #23]
 8016824:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016826:	7dfb      	ldrb	r3, [r7, #23]
 8016828:	461a      	mov	r2, r3
 801682a:	68b9      	ldr	r1, [r7, #8]
 801682c:	68f8      	ldr	r0, [r7, #12]
 801682e:	f7ff fe93 	bl	8016558 <etharp_output_to_arp_index>
 8016832:	4603      	mov	r3, r0
 8016834:	e018      	b.n	8016868 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016836:	7dfb      	ldrb	r3, [r7, #23]
 8016838:	3301      	adds	r3, #1
 801683a:	75fb      	strb	r3, [r7, #23]
 801683c:	7dfb      	ldrb	r3, [r7, #23]
 801683e:	2b09      	cmp	r3, #9
 8016840:	d9ca      	bls.n	80167d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016842:	68ba      	ldr	r2, [r7, #8]
 8016844:	69b9      	ldr	r1, [r7, #24]
 8016846:	68f8      	ldr	r0, [r7, #12]
 8016848:	f000 f822 	bl	8016890 <etharp_query>
 801684c:	4603      	mov	r3, r0
 801684e:	e00b      	b.n	8016868 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801685a:	9300      	str	r3, [sp, #0]
 801685c:	69fb      	ldr	r3, [r7, #28]
 801685e:	68b9      	ldr	r1, [r7, #8]
 8016860:	68f8      	ldr	r0, [r7, #12]
 8016862:	f001 fdc1 	bl	80183e8 <ethernet_output>
 8016866:	4603      	mov	r3, r0
}
 8016868:	4618      	mov	r0, r3
 801686a:	3720      	adds	r7, #32
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}
 8016870:	0801ec08 	.word	0x0801ec08
 8016874:	0801ed58 	.word	0x0801ed58
 8016878:	0801ec80 	.word	0x0801ec80
 801687c:	0801eda8 	.word	0x0801eda8
 8016880:	0801ed48 	.word	0x0801ed48
 8016884:	0801f640 	.word	0x0801f640
 8016888:	2001170c 	.word	0x2001170c
 801688c:	2001161c 	.word	0x2001161c

08016890 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b08c      	sub	sp, #48	; 0x30
 8016894:	af02      	add	r7, sp, #8
 8016896:	60f8      	str	r0, [r7, #12]
 8016898:	60b9      	str	r1, [r7, #8]
 801689a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	3326      	adds	r3, #38	; 0x26
 80168a0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80168a2:	23ff      	movs	r3, #255	; 0xff
 80168a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80168a8:	2300      	movs	r3, #0
 80168aa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	68f9      	ldr	r1, [r7, #12]
 80168b2:	4618      	mov	r0, r3
 80168b4:	f000 fe0e 	bl	80174d4 <ip4_addr_isbroadcast_u32>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d10c      	bne.n	80168d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80168be:	68bb      	ldr	r3, [r7, #8]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80168c6:	2be0      	cmp	r3, #224	; 0xe0
 80168c8:	d006      	beq.n	80168d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80168ca:	68bb      	ldr	r3, [r7, #8]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d003      	beq.n	80168d8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80168d0:	68bb      	ldr	r3, [r7, #8]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d102      	bne.n	80168de <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80168d8:	f06f 030f 	mvn.w	r3, #15
 80168dc:	e101      	b.n	8016ae2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80168de:	68fa      	ldr	r2, [r7, #12]
 80168e0:	2101      	movs	r1, #1
 80168e2:	68b8      	ldr	r0, [r7, #8]
 80168e4:	f7ff fb60 	bl	8015fa8 <etharp_find_entry>
 80168e8:	4603      	mov	r3, r0
 80168ea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80168ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	da02      	bge.n	80168fa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80168f4:	8a7b      	ldrh	r3, [r7, #18]
 80168f6:	b25b      	sxtb	r3, r3
 80168f8:	e0f3      	b.n	8016ae2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80168fa:	8a7b      	ldrh	r3, [r7, #18]
 80168fc:	2b7e      	cmp	r3, #126	; 0x7e
 80168fe:	d906      	bls.n	801690e <etharp_query+0x7e>
 8016900:	4b7a      	ldr	r3, [pc, #488]	; (8016aec <etharp_query+0x25c>)
 8016902:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016906:	497a      	ldr	r1, [pc, #488]	; (8016af0 <etharp_query+0x260>)
 8016908:	487a      	ldr	r0, [pc, #488]	; (8016af4 <etharp_query+0x264>)
 801690a:	f004 fa17 	bl	801ad3c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801690e:	8a7b      	ldrh	r3, [r7, #18]
 8016910:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016912:	7c7a      	ldrb	r2, [r7, #17]
 8016914:	4978      	ldr	r1, [pc, #480]	; (8016af8 <etharp_query+0x268>)
 8016916:	4613      	mov	r3, r2
 8016918:	005b      	lsls	r3, r3, #1
 801691a:	4413      	add	r3, r2
 801691c:	00db      	lsls	r3, r3, #3
 801691e:	440b      	add	r3, r1
 8016920:	3314      	adds	r3, #20
 8016922:	781b      	ldrb	r3, [r3, #0]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d115      	bne.n	8016954 <etharp_query+0xc4>
    is_new_entry = 1;
 8016928:	2301      	movs	r3, #1
 801692a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801692c:	7c7a      	ldrb	r2, [r7, #17]
 801692e:	4972      	ldr	r1, [pc, #456]	; (8016af8 <etharp_query+0x268>)
 8016930:	4613      	mov	r3, r2
 8016932:	005b      	lsls	r3, r3, #1
 8016934:	4413      	add	r3, r2
 8016936:	00db      	lsls	r3, r3, #3
 8016938:	440b      	add	r3, r1
 801693a:	3314      	adds	r3, #20
 801693c:	2201      	movs	r2, #1
 801693e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016940:	7c7a      	ldrb	r2, [r7, #17]
 8016942:	496d      	ldr	r1, [pc, #436]	; (8016af8 <etharp_query+0x268>)
 8016944:	4613      	mov	r3, r2
 8016946:	005b      	lsls	r3, r3, #1
 8016948:	4413      	add	r3, r2
 801694a:	00db      	lsls	r3, r3, #3
 801694c:	440b      	add	r3, r1
 801694e:	3308      	adds	r3, #8
 8016950:	68fa      	ldr	r2, [r7, #12]
 8016952:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016954:	7c7a      	ldrb	r2, [r7, #17]
 8016956:	4968      	ldr	r1, [pc, #416]	; (8016af8 <etharp_query+0x268>)
 8016958:	4613      	mov	r3, r2
 801695a:	005b      	lsls	r3, r3, #1
 801695c:	4413      	add	r3, r2
 801695e:	00db      	lsls	r3, r3, #3
 8016960:	440b      	add	r3, r1
 8016962:	3314      	adds	r3, #20
 8016964:	781b      	ldrb	r3, [r3, #0]
 8016966:	2b01      	cmp	r3, #1
 8016968:	d011      	beq.n	801698e <etharp_query+0xfe>
 801696a:	7c7a      	ldrb	r2, [r7, #17]
 801696c:	4962      	ldr	r1, [pc, #392]	; (8016af8 <etharp_query+0x268>)
 801696e:	4613      	mov	r3, r2
 8016970:	005b      	lsls	r3, r3, #1
 8016972:	4413      	add	r3, r2
 8016974:	00db      	lsls	r3, r3, #3
 8016976:	440b      	add	r3, r1
 8016978:	3314      	adds	r3, #20
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	2b01      	cmp	r3, #1
 801697e:	d806      	bhi.n	801698e <etharp_query+0xfe>
 8016980:	4b5a      	ldr	r3, [pc, #360]	; (8016aec <etharp_query+0x25c>)
 8016982:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016986:	495d      	ldr	r1, [pc, #372]	; (8016afc <etharp_query+0x26c>)
 8016988:	485a      	ldr	r0, [pc, #360]	; (8016af4 <etharp_query+0x264>)
 801698a:	f004 f9d7 	bl	801ad3c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801698e:	6a3b      	ldr	r3, [r7, #32]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d102      	bne.n	801699a <etharp_query+0x10a>
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d10c      	bne.n	80169b4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801699a:	68b9      	ldr	r1, [r7, #8]
 801699c:	68f8      	ldr	r0, [r7, #12]
 801699e:	f000 f963 	bl	8016c68 <etharp_request>
 80169a2:	4603      	mov	r3, r0
 80169a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d102      	bne.n	80169b4 <etharp_query+0x124>
      return result;
 80169ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80169b2:	e096      	b.n	8016ae2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d106      	bne.n	80169c8 <etharp_query+0x138>
 80169ba:	4b4c      	ldr	r3, [pc, #304]	; (8016aec <etharp_query+0x25c>)
 80169bc:	f240 32e1 	movw	r2, #993	; 0x3e1
 80169c0:	494f      	ldr	r1, [pc, #316]	; (8016b00 <etharp_query+0x270>)
 80169c2:	484c      	ldr	r0, [pc, #304]	; (8016af4 <etharp_query+0x264>)
 80169c4:	f004 f9ba 	bl	801ad3c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80169c8:	7c7a      	ldrb	r2, [r7, #17]
 80169ca:	494b      	ldr	r1, [pc, #300]	; (8016af8 <etharp_query+0x268>)
 80169cc:	4613      	mov	r3, r2
 80169ce:	005b      	lsls	r3, r3, #1
 80169d0:	4413      	add	r3, r2
 80169d2:	00db      	lsls	r3, r3, #3
 80169d4:	440b      	add	r3, r1
 80169d6:	3314      	adds	r3, #20
 80169d8:	781b      	ldrb	r3, [r3, #0]
 80169da:	2b01      	cmp	r3, #1
 80169dc:	d917      	bls.n	8016a0e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80169de:	4a49      	ldr	r2, [pc, #292]	; (8016b04 <etharp_query+0x274>)
 80169e0:	7c7b      	ldrb	r3, [r7, #17]
 80169e2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80169e4:	7c7a      	ldrb	r2, [r7, #17]
 80169e6:	4613      	mov	r3, r2
 80169e8:	005b      	lsls	r3, r3, #1
 80169ea:	4413      	add	r3, r2
 80169ec:	00db      	lsls	r3, r3, #3
 80169ee:	3308      	adds	r3, #8
 80169f0:	4a41      	ldr	r2, [pc, #260]	; (8016af8 <etharp_query+0x268>)
 80169f2:	4413      	add	r3, r2
 80169f4:	3304      	adds	r3, #4
 80169f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80169fa:	9200      	str	r2, [sp, #0]
 80169fc:	697a      	ldr	r2, [r7, #20]
 80169fe:	6879      	ldr	r1, [r7, #4]
 8016a00:	68f8      	ldr	r0, [r7, #12]
 8016a02:	f001 fcf1 	bl	80183e8 <ethernet_output>
 8016a06:	4603      	mov	r3, r0
 8016a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016a0c:	e067      	b.n	8016ade <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016a0e:	7c7a      	ldrb	r2, [r7, #17]
 8016a10:	4939      	ldr	r1, [pc, #228]	; (8016af8 <etharp_query+0x268>)
 8016a12:	4613      	mov	r3, r2
 8016a14:	005b      	lsls	r3, r3, #1
 8016a16:	4413      	add	r3, r2
 8016a18:	00db      	lsls	r3, r3, #3
 8016a1a:	440b      	add	r3, r1
 8016a1c:	3314      	adds	r3, #20
 8016a1e:	781b      	ldrb	r3, [r3, #0]
 8016a20:	2b01      	cmp	r3, #1
 8016a22:	d15c      	bne.n	8016ade <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016a24:	2300      	movs	r3, #0
 8016a26:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016a2c:	e01c      	b.n	8016a68 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016a2e:	69fb      	ldr	r3, [r7, #28]
 8016a30:	895a      	ldrh	r2, [r3, #10]
 8016a32:	69fb      	ldr	r3, [r7, #28]
 8016a34:	891b      	ldrh	r3, [r3, #8]
 8016a36:	429a      	cmp	r2, r3
 8016a38:	d10a      	bne.n	8016a50 <etharp_query+0x1c0>
 8016a3a:	69fb      	ldr	r3, [r7, #28]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d006      	beq.n	8016a50 <etharp_query+0x1c0>
 8016a42:	4b2a      	ldr	r3, [pc, #168]	; (8016aec <etharp_query+0x25c>)
 8016a44:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016a48:	492f      	ldr	r1, [pc, #188]	; (8016b08 <etharp_query+0x278>)
 8016a4a:	482a      	ldr	r0, [pc, #168]	; (8016af4 <etharp_query+0x264>)
 8016a4c:	f004 f976 	bl	801ad3c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016a50:	69fb      	ldr	r3, [r7, #28]
 8016a52:	7b1b      	ldrb	r3, [r3, #12]
 8016a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d002      	beq.n	8016a62 <etharp_query+0x1d2>
        copy_needed = 1;
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	61bb      	str	r3, [r7, #24]
        break;
 8016a60:	e005      	b.n	8016a6e <etharp_query+0x1de>
      }
      p = p->next;
 8016a62:	69fb      	ldr	r3, [r7, #28]
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016a68:	69fb      	ldr	r3, [r7, #28]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d1df      	bne.n	8016a2e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016a6e:	69bb      	ldr	r3, [r7, #24]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d007      	beq.n	8016a84 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016a74:	687a      	ldr	r2, [r7, #4]
 8016a76:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016a7a:	200e      	movs	r0, #14
 8016a7c:	f7f8 fa6e 	bl	800ef5c <pbuf_clone>
 8016a80:	61f8      	str	r0, [r7, #28]
 8016a82:	e004      	b.n	8016a8e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016a88:	69f8      	ldr	r0, [r7, #28]
 8016a8a:	f7f8 f895 	bl	800ebb8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016a8e:	69fb      	ldr	r3, [r7, #28]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d021      	beq.n	8016ad8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016a94:	7c7a      	ldrb	r2, [r7, #17]
 8016a96:	4918      	ldr	r1, [pc, #96]	; (8016af8 <etharp_query+0x268>)
 8016a98:	4613      	mov	r3, r2
 8016a9a:	005b      	lsls	r3, r3, #1
 8016a9c:	4413      	add	r3, r2
 8016a9e:	00db      	lsls	r3, r3, #3
 8016aa0:	440b      	add	r3, r1
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d00a      	beq.n	8016abe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016aa8:	7c7a      	ldrb	r2, [r7, #17]
 8016aaa:	4913      	ldr	r1, [pc, #76]	; (8016af8 <etharp_query+0x268>)
 8016aac:	4613      	mov	r3, r2
 8016aae:	005b      	lsls	r3, r3, #1
 8016ab0:	4413      	add	r3, r2
 8016ab2:	00db      	lsls	r3, r3, #3
 8016ab4:	440b      	add	r3, r1
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f7f7 ffd7 	bl	800ea6c <pbuf_free>
      }
      arp_table[i].q = p;
 8016abe:	7c7a      	ldrb	r2, [r7, #17]
 8016ac0:	490d      	ldr	r1, [pc, #52]	; (8016af8 <etharp_query+0x268>)
 8016ac2:	4613      	mov	r3, r2
 8016ac4:	005b      	lsls	r3, r3, #1
 8016ac6:	4413      	add	r3, r2
 8016ac8:	00db      	lsls	r3, r3, #3
 8016aca:	440b      	add	r3, r1
 8016acc:	69fa      	ldr	r2, [r7, #28]
 8016ace:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ad6:	e002      	b.n	8016ade <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016ad8:	23ff      	movs	r3, #255	; 0xff
 8016ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016ade:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	3728      	adds	r7, #40	; 0x28
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd80      	pop	{r7, pc}
 8016aea:	bf00      	nop
 8016aec:	0801ec08 	.word	0x0801ec08
 8016af0:	0801edb4 	.word	0x0801edb4
 8016af4:	0801ec80 	.word	0x0801ec80
 8016af8:	2001161c 	.word	0x2001161c
 8016afc:	0801edc4 	.word	0x0801edc4
 8016b00:	0801eda8 	.word	0x0801eda8
 8016b04:	2001170c 	.word	0x2001170c
 8016b08:	0801edec 	.word	0x0801edec

08016b0c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b08a      	sub	sp, #40	; 0x28
 8016b10:	af02      	add	r7, sp, #8
 8016b12:	60f8      	str	r0, [r7, #12]
 8016b14:	60b9      	str	r1, [r7, #8]
 8016b16:	607a      	str	r2, [r7, #4]
 8016b18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d106      	bne.n	8016b32 <etharp_raw+0x26>
 8016b24:	4b3a      	ldr	r3, [pc, #232]	; (8016c10 <etharp_raw+0x104>)
 8016b26:	f240 4257 	movw	r2, #1111	; 0x457
 8016b2a:	493a      	ldr	r1, [pc, #232]	; (8016c14 <etharp_raw+0x108>)
 8016b2c:	483a      	ldr	r0, [pc, #232]	; (8016c18 <etharp_raw+0x10c>)
 8016b2e:	f004 f905 	bl	801ad3c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016b32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b36:	211c      	movs	r1, #28
 8016b38:	200e      	movs	r0, #14
 8016b3a:	f7f7 fc81 	bl	800e440 <pbuf_alloc>
 8016b3e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016b40:	69bb      	ldr	r3, [r7, #24]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d102      	bne.n	8016b4c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016b46:	f04f 33ff 	mov.w	r3, #4294967295
 8016b4a:	e05d      	b.n	8016c08 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016b4c:	69bb      	ldr	r3, [r7, #24]
 8016b4e:	895b      	ldrh	r3, [r3, #10]
 8016b50:	2b1b      	cmp	r3, #27
 8016b52:	d806      	bhi.n	8016b62 <etharp_raw+0x56>
 8016b54:	4b2e      	ldr	r3, [pc, #184]	; (8016c10 <etharp_raw+0x104>)
 8016b56:	f240 4262 	movw	r2, #1122	; 0x462
 8016b5a:	4930      	ldr	r1, [pc, #192]	; (8016c1c <etharp_raw+0x110>)
 8016b5c:	482e      	ldr	r0, [pc, #184]	; (8016c18 <etharp_raw+0x10c>)
 8016b5e:	f004 f8ed 	bl	801ad3c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016b62:	69bb      	ldr	r3, [r7, #24]
 8016b64:	685b      	ldr	r3, [r3, #4]
 8016b66:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016b68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	f7f6 fb68 	bl	800d240 <lwip_htons>
 8016b70:	4603      	mov	r3, r0
 8016b72:	461a      	mov	r2, r3
 8016b74:	697b      	ldr	r3, [r7, #20]
 8016b76:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016b7e:	2b06      	cmp	r3, #6
 8016b80:	d006      	beq.n	8016b90 <etharp_raw+0x84>
 8016b82:	4b23      	ldr	r3, [pc, #140]	; (8016c10 <etharp_raw+0x104>)
 8016b84:	f240 4269 	movw	r2, #1129	; 0x469
 8016b88:	4925      	ldr	r1, [pc, #148]	; (8016c20 <etharp_raw+0x114>)
 8016b8a:	4823      	ldr	r0, [pc, #140]	; (8016c18 <etharp_raw+0x10c>)
 8016b8c:	f004 f8d6 	bl	801ad3c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016b90:	697b      	ldr	r3, [r7, #20]
 8016b92:	3308      	adds	r3, #8
 8016b94:	2206      	movs	r2, #6
 8016b96:	6839      	ldr	r1, [r7, #0]
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f003 fd07 	bl	801a5ac <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	3312      	adds	r3, #18
 8016ba2:	2206      	movs	r2, #6
 8016ba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ba6:	4618      	mov	r0, r3
 8016ba8:	f003 fd00 	bl	801a5ac <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016bac:	697b      	ldr	r3, [r7, #20]
 8016bae:	330e      	adds	r3, #14
 8016bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016bb2:	6812      	ldr	r2, [r2, #0]
 8016bb4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016bb6:	697b      	ldr	r3, [r7, #20]
 8016bb8:	3318      	adds	r3, #24
 8016bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016bbc:	6812      	ldr	r2, [r2, #0]
 8016bbe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016bc0:	697b      	ldr	r3, [r7, #20]
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	701a      	strb	r2, [r3, #0]
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	f042 0201 	orr.w	r2, r2, #1
 8016bcc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016bce:	697b      	ldr	r3, [r7, #20]
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	f042 0208 	orr.w	r2, r2, #8
 8016bd6:	709a      	strb	r2, [r3, #2]
 8016bd8:	2200      	movs	r2, #0
 8016bda:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	2206      	movs	r2, #6
 8016be0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016be2:	697b      	ldr	r3, [r7, #20]
 8016be4:	2204      	movs	r2, #4
 8016be6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016be8:	f640 0306 	movw	r3, #2054	; 0x806
 8016bec:	9300      	str	r3, [sp, #0]
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	68ba      	ldr	r2, [r7, #8]
 8016bf2:	69b9      	ldr	r1, [r7, #24]
 8016bf4:	68f8      	ldr	r0, [r7, #12]
 8016bf6:	f001 fbf7 	bl	80183e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016bfa:	69b8      	ldr	r0, [r7, #24]
 8016bfc:	f7f7 ff36 	bl	800ea6c <pbuf_free>
  p = NULL;
 8016c00:	2300      	movs	r3, #0
 8016c02:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016c04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3720      	adds	r7, #32
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}
 8016c10:	0801ec08 	.word	0x0801ec08
 8016c14:	0801ed58 	.word	0x0801ed58
 8016c18:	0801ec80 	.word	0x0801ec80
 8016c1c:	0801ee08 	.word	0x0801ee08
 8016c20:	0801ee3c 	.word	0x0801ee3c

08016c24 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b088      	sub	sp, #32
 8016c28:	af04      	add	r7, sp, #16
 8016c2a:	60f8      	str	r0, [r7, #12]
 8016c2c:	60b9      	str	r1, [r7, #8]
 8016c2e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016c40:	2201      	movs	r2, #1
 8016c42:	9203      	str	r2, [sp, #12]
 8016c44:	68ba      	ldr	r2, [r7, #8]
 8016c46:	9202      	str	r2, [sp, #8]
 8016c48:	4a06      	ldr	r2, [pc, #24]	; (8016c64 <etharp_request_dst+0x40>)
 8016c4a:	9201      	str	r2, [sp, #4]
 8016c4c:	9300      	str	r3, [sp, #0]
 8016c4e:	4603      	mov	r3, r0
 8016c50:	687a      	ldr	r2, [r7, #4]
 8016c52:	68f8      	ldr	r0, [r7, #12]
 8016c54:	f7ff ff5a 	bl	8016b0c <etharp_raw>
 8016c58:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3710      	adds	r7, #16
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	bf00      	nop
 8016c64:	0801f648 	.word	0x0801f648

08016c68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b082      	sub	sp, #8
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016c72:	4a05      	ldr	r2, [pc, #20]	; (8016c88 <etharp_request+0x20>)
 8016c74:	6839      	ldr	r1, [r7, #0]
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	f7ff ffd4 	bl	8016c24 <etharp_request_dst>
 8016c7c:	4603      	mov	r3, r0
}
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3708      	adds	r7, #8
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}
 8016c86:	bf00      	nop
 8016c88:	0801f640 	.word	0x0801f640

08016c8c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b08e      	sub	sp, #56	; 0x38
 8016c90:	af04      	add	r7, sp, #16
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016c96:	4b79      	ldr	r3, [pc, #484]	; (8016e7c <icmp_input+0x1f0>)
 8016c98:	689b      	ldr	r3, [r3, #8]
 8016c9a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c9e:	781b      	ldrb	r3, [r3, #0]
 8016ca0:	f003 030f 	and.w	r3, r3, #15
 8016ca4:	b2db      	uxtb	r3, r3
 8016ca6:	009b      	lsls	r3, r3, #2
 8016ca8:	b2db      	uxtb	r3, r3
 8016caa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016cac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016cae:	2b13      	cmp	r3, #19
 8016cb0:	f240 80cd 	bls.w	8016e4e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	895b      	ldrh	r3, [r3, #10]
 8016cb8:	2b03      	cmp	r3, #3
 8016cba:	f240 80ca 	bls.w	8016e52 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	781b      	ldrb	r3, [r3, #0]
 8016cc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016cc8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	f000 80b7 	beq.w	8016e40 <icmp_input+0x1b4>
 8016cd2:	2b08      	cmp	r3, #8
 8016cd4:	f040 80b7 	bne.w	8016e46 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016cd8:	4b69      	ldr	r3, [pc, #420]	; (8016e80 <icmp_input+0x1f4>)
 8016cda:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016cdc:	4b67      	ldr	r3, [pc, #412]	; (8016e7c <icmp_input+0x1f0>)
 8016cde:	695b      	ldr	r3, [r3, #20]
 8016ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ce4:	2be0      	cmp	r3, #224	; 0xe0
 8016ce6:	f000 80bb 	beq.w	8016e60 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016cea:	4b64      	ldr	r3, [pc, #400]	; (8016e7c <icmp_input+0x1f0>)
 8016cec:	695b      	ldr	r3, [r3, #20]
 8016cee:	4a63      	ldr	r2, [pc, #396]	; (8016e7c <icmp_input+0x1f0>)
 8016cf0:	6812      	ldr	r2, [r2, #0]
 8016cf2:	4611      	mov	r1, r2
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f000 fbed 	bl	80174d4 <ip4_addr_isbroadcast_u32>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	f040 80b1 	bne.w	8016e64 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	891b      	ldrh	r3, [r3, #8]
 8016d06:	2b07      	cmp	r3, #7
 8016d08:	f240 80a5 	bls.w	8016e56 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016d0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d0e:	330e      	adds	r3, #14
 8016d10:	4619      	mov	r1, r3
 8016d12:	6878      	ldr	r0, [r7, #4]
 8016d14:	f7f7 fde2 	bl	800e8dc <pbuf_add_header>
 8016d18:	4603      	mov	r3, r0
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d04b      	beq.n	8016db6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	891a      	ldrh	r2, [r3, #8]
 8016d22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d24:	4413      	add	r3, r2
 8016d26:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	891b      	ldrh	r3, [r3, #8]
 8016d2c:	8b7a      	ldrh	r2, [r7, #26]
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	f0c0 809a 	bcc.w	8016e68 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016d34:	8b7b      	ldrh	r3, [r7, #26]
 8016d36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	200e      	movs	r0, #14
 8016d3e:	f7f7 fb7f 	bl	800e440 <pbuf_alloc>
 8016d42:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016d44:	697b      	ldr	r3, [r7, #20]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	f000 8090 	beq.w	8016e6c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016d4c:	697b      	ldr	r3, [r7, #20]
 8016d4e:	895b      	ldrh	r3, [r3, #10]
 8016d50:	461a      	mov	r2, r3
 8016d52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d54:	3308      	adds	r3, #8
 8016d56:	429a      	cmp	r2, r3
 8016d58:	d203      	bcs.n	8016d62 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016d5a:	6978      	ldr	r0, [r7, #20]
 8016d5c:	f7f7 fe86 	bl	800ea6c <pbuf_free>
          goto icmperr;
 8016d60:	e085      	b.n	8016e6e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016d62:	697b      	ldr	r3, [r7, #20]
 8016d64:	685b      	ldr	r3, [r3, #4]
 8016d66:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f003 fc1e 	bl	801a5ac <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016d70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016d72:	4619      	mov	r1, r3
 8016d74:	6978      	ldr	r0, [r7, #20]
 8016d76:	f7f7 fdc1 	bl	800e8fc <pbuf_remove_header>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d009      	beq.n	8016d94 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016d80:	4b40      	ldr	r3, [pc, #256]	; (8016e84 <icmp_input+0x1f8>)
 8016d82:	22b6      	movs	r2, #182	; 0xb6
 8016d84:	4940      	ldr	r1, [pc, #256]	; (8016e88 <icmp_input+0x1fc>)
 8016d86:	4841      	ldr	r0, [pc, #260]	; (8016e8c <icmp_input+0x200>)
 8016d88:	f003 ffd8 	bl	801ad3c <iprintf>
          pbuf_free(r);
 8016d8c:	6978      	ldr	r0, [r7, #20]
 8016d8e:	f7f7 fe6d 	bl	800ea6c <pbuf_free>
          goto icmperr;
 8016d92:	e06c      	b.n	8016e6e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016d94:	6879      	ldr	r1, [r7, #4]
 8016d96:	6978      	ldr	r0, [r7, #20]
 8016d98:	f7f7 ff9c 	bl	800ecd4 <pbuf_copy>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d003      	beq.n	8016daa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016da2:	6978      	ldr	r0, [r7, #20]
 8016da4:	f7f7 fe62 	bl	800ea6c <pbuf_free>
          goto icmperr;
 8016da8:	e061      	b.n	8016e6e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016daa:	6878      	ldr	r0, [r7, #4]
 8016dac:	f7f7 fe5e 	bl	800ea6c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016db0:	697b      	ldr	r3, [r7, #20]
 8016db2:	607b      	str	r3, [r7, #4]
 8016db4:	e00f      	b.n	8016dd6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016db6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016db8:	330e      	adds	r3, #14
 8016dba:	4619      	mov	r1, r3
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f7f7 fd9d 	bl	800e8fc <pbuf_remove_header>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d006      	beq.n	8016dd6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016dc8:	4b2e      	ldr	r3, [pc, #184]	; (8016e84 <icmp_input+0x1f8>)
 8016dca:	22c7      	movs	r2, #199	; 0xc7
 8016dcc:	4930      	ldr	r1, [pc, #192]	; (8016e90 <icmp_input+0x204>)
 8016dce:	482f      	ldr	r0, [pc, #188]	; (8016e8c <icmp_input+0x200>)
 8016dd0:	f003 ffb4 	bl	801ad3c <iprintf>
          goto icmperr;
 8016dd4:	e04b      	b.n	8016e6e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	685b      	ldr	r3, [r3, #4]
 8016dda:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016ddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016dde:	4619      	mov	r1, r3
 8016de0:	6878      	ldr	r0, [r7, #4]
 8016de2:	f7f7 fd7b 	bl	800e8dc <pbuf_add_header>
 8016de6:	4603      	mov	r3, r0
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d12b      	bne.n	8016e44 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	685b      	ldr	r3, [r3, #4]
 8016df0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016df2:	69fb      	ldr	r3, [r7, #28]
 8016df4:	681a      	ldr	r2, [r3, #0]
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016dfa:	4b20      	ldr	r3, [pc, #128]	; (8016e7c <icmp_input+0x1f0>)
 8016dfc:	691a      	ldr	r2, [r3, #16]
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016e02:	693b      	ldr	r3, [r7, #16]
 8016e04:	2200      	movs	r2, #0
 8016e06:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016e08:	693b      	ldr	r3, [r7, #16]
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	709a      	strb	r2, [r3, #2]
 8016e0e:	2200      	movs	r2, #0
 8016e10:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	22ff      	movs	r2, #255	; 0xff
 8016e16:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	729a      	strb	r2, [r3, #10]
 8016e1e:	2200      	movs	r2, #0
 8016e20:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	9302      	str	r3, [sp, #8]
 8016e26:	2301      	movs	r3, #1
 8016e28:	9301      	str	r3, [sp, #4]
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	9300      	str	r3, [sp, #0]
 8016e2e:	23ff      	movs	r3, #255	; 0xff
 8016e30:	2200      	movs	r2, #0
 8016e32:	69f9      	ldr	r1, [r7, #28]
 8016e34:	6878      	ldr	r0, [r7, #4]
 8016e36:	f000 fa75 	bl	8017324 <ip4_output_if>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016e3e:	e001      	b.n	8016e44 <icmp_input+0x1b8>
      break;
 8016e40:	bf00      	nop
 8016e42:	e000      	b.n	8016e46 <icmp_input+0x1ba>
      break;
 8016e44:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016e46:	6878      	ldr	r0, [r7, #4]
 8016e48:	f7f7 fe10 	bl	800ea6c <pbuf_free>
  return;
 8016e4c:	e013      	b.n	8016e76 <icmp_input+0x1ea>
    goto lenerr;
 8016e4e:	bf00      	nop
 8016e50:	e002      	b.n	8016e58 <icmp_input+0x1cc>
    goto lenerr;
 8016e52:	bf00      	nop
 8016e54:	e000      	b.n	8016e58 <icmp_input+0x1cc>
        goto lenerr;
 8016e56:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016e58:	6878      	ldr	r0, [r7, #4]
 8016e5a:	f7f7 fe07 	bl	800ea6c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016e5e:	e00a      	b.n	8016e76 <icmp_input+0x1ea>
        goto icmperr;
 8016e60:	bf00      	nop
 8016e62:	e004      	b.n	8016e6e <icmp_input+0x1e2>
        goto icmperr;
 8016e64:	bf00      	nop
 8016e66:	e002      	b.n	8016e6e <icmp_input+0x1e2>
          goto icmperr;
 8016e68:	bf00      	nop
 8016e6a:	e000      	b.n	8016e6e <icmp_input+0x1e2>
          goto icmperr;
 8016e6c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016e6e:	6878      	ldr	r0, [r7, #4]
 8016e70:	f7f7 fdfc 	bl	800ea6c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016e74:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016e76:	3728      	adds	r7, #40	; 0x28
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}
 8016e7c:	20014e4c 	.word	0x20014e4c
 8016e80:	20014e60 	.word	0x20014e60
 8016e84:	0801ee80 	.word	0x0801ee80
 8016e88:	0801eeb8 	.word	0x0801eeb8
 8016e8c:	0801eef0 	.word	0x0801eef0
 8016e90:	0801ef18 	.word	0x0801ef18

08016e94 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b082      	sub	sp, #8
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	460b      	mov	r3, r1
 8016e9e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016ea0:	78fb      	ldrb	r3, [r7, #3]
 8016ea2:	461a      	mov	r2, r3
 8016ea4:	2103      	movs	r1, #3
 8016ea6:	6878      	ldr	r0, [r7, #4]
 8016ea8:	f000 f814 	bl	8016ed4 <icmp_send_response>
}
 8016eac:	bf00      	nop
 8016eae:	3708      	adds	r7, #8
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}

08016eb4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b082      	sub	sp, #8
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
 8016ebc:	460b      	mov	r3, r1
 8016ebe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016ec0:	78fb      	ldrb	r3, [r7, #3]
 8016ec2:	461a      	mov	r2, r3
 8016ec4:	210b      	movs	r1, #11
 8016ec6:	6878      	ldr	r0, [r7, #4]
 8016ec8:	f000 f804 	bl	8016ed4 <icmp_send_response>
}
 8016ecc:	bf00      	nop
 8016ece:	3708      	adds	r7, #8
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd80      	pop	{r7, pc}

08016ed4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b08c      	sub	sp, #48	; 0x30
 8016ed8:	af04      	add	r7, sp, #16
 8016eda:	6078      	str	r0, [r7, #4]
 8016edc:	460b      	mov	r3, r1
 8016ede:	70fb      	strb	r3, [r7, #3]
 8016ee0:	4613      	mov	r3, r2
 8016ee2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016ee4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ee8:	2124      	movs	r1, #36	; 0x24
 8016eea:	2022      	movs	r0, #34	; 0x22
 8016eec:	f7f7 faa8 	bl	800e440 <pbuf_alloc>
 8016ef0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016ef2:	69fb      	ldr	r3, [r7, #28]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d04c      	beq.n	8016f92 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016ef8:	69fb      	ldr	r3, [r7, #28]
 8016efa:	895b      	ldrh	r3, [r3, #10]
 8016efc:	2b23      	cmp	r3, #35	; 0x23
 8016efe:	d806      	bhi.n	8016f0e <icmp_send_response+0x3a>
 8016f00:	4b26      	ldr	r3, [pc, #152]	; (8016f9c <icmp_send_response+0xc8>)
 8016f02:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016f06:	4926      	ldr	r1, [pc, #152]	; (8016fa0 <icmp_send_response+0xcc>)
 8016f08:	4826      	ldr	r0, [pc, #152]	; (8016fa4 <icmp_send_response+0xd0>)
 8016f0a:	f003 ff17 	bl	801ad3c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	685b      	ldr	r3, [r3, #4]
 8016f12:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016f14:	69fb      	ldr	r3, [r7, #28]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016f1a:	697b      	ldr	r3, [r7, #20]
 8016f1c:	78fa      	ldrb	r2, [r7, #3]
 8016f1e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016f20:	697b      	ldr	r3, [r7, #20]
 8016f22:	78ba      	ldrb	r2, [r7, #2]
 8016f24:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016f26:	697b      	ldr	r3, [r7, #20]
 8016f28:	2200      	movs	r2, #0
 8016f2a:	711a      	strb	r2, [r3, #4]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016f30:	697b      	ldr	r3, [r7, #20]
 8016f32:	2200      	movs	r2, #0
 8016f34:	719a      	strb	r2, [r3, #6]
 8016f36:	2200      	movs	r2, #0
 8016f38:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016f3a:	69fb      	ldr	r3, [r7, #28]
 8016f3c:	685b      	ldr	r3, [r3, #4]
 8016f3e:	f103 0008 	add.w	r0, r3, #8
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	221c      	movs	r2, #28
 8016f48:	4619      	mov	r1, r3
 8016f4a:	f003 fb2f 	bl	801a5ac <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016f4e:	69bb      	ldr	r3, [r7, #24]
 8016f50:	68db      	ldr	r3, [r3, #12]
 8016f52:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016f54:	f107 030c 	add.w	r3, r7, #12
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f000 f825 	bl	8016fa8 <ip4_route>
 8016f5e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016f60:	693b      	ldr	r3, [r7, #16]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d011      	beq.n	8016f8a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016f66:	697b      	ldr	r3, [r7, #20]
 8016f68:	2200      	movs	r2, #0
 8016f6a:	709a      	strb	r2, [r3, #2]
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016f70:	f107 020c 	add.w	r2, r7, #12
 8016f74:	693b      	ldr	r3, [r7, #16]
 8016f76:	9302      	str	r3, [sp, #8]
 8016f78:	2301      	movs	r3, #1
 8016f7a:	9301      	str	r3, [sp, #4]
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	9300      	str	r3, [sp, #0]
 8016f80:	23ff      	movs	r3, #255	; 0xff
 8016f82:	2100      	movs	r1, #0
 8016f84:	69f8      	ldr	r0, [r7, #28]
 8016f86:	f000 f9cd 	bl	8017324 <ip4_output_if>
  }
  pbuf_free(q);
 8016f8a:	69f8      	ldr	r0, [r7, #28]
 8016f8c:	f7f7 fd6e 	bl	800ea6c <pbuf_free>
 8016f90:	e000      	b.n	8016f94 <icmp_send_response+0xc0>
    return;
 8016f92:	bf00      	nop
}
 8016f94:	3720      	adds	r7, #32
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bd80      	pop	{r7, pc}
 8016f9a:	bf00      	nop
 8016f9c:	0801ee80 	.word	0x0801ee80
 8016fa0:	0801ef4c 	.word	0x0801ef4c
 8016fa4:	0801eef0 	.word	0x0801eef0

08016fa8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016fa8:	b480      	push	{r7}
 8016faa:	b085      	sub	sp, #20
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016fb0:	4b33      	ldr	r3, [pc, #204]	; (8017080 <ip4_route+0xd8>)
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	60fb      	str	r3, [r7, #12]
 8016fb6:	e036      	b.n	8017026 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016fbe:	f003 0301 	and.w	r3, r3, #1
 8016fc2:	b2db      	uxtb	r3, r3
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d02b      	beq.n	8017020 <ip4_route+0x78>
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016fce:	089b      	lsrs	r3, r3, #2
 8016fd0:	f003 0301 	and.w	r3, r3, #1
 8016fd4:	b2db      	uxtb	r3, r3
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d022      	beq.n	8017020 <ip4_route+0x78>
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	3304      	adds	r3, #4
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d01d      	beq.n	8017020 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	681a      	ldr	r2, [r3, #0]
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	3304      	adds	r3, #4
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	405a      	eors	r2, r3
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	3308      	adds	r3, #8
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	4013      	ands	r3, r2
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d101      	bne.n	8017000 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	e038      	b.n	8017072 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017006:	f003 0302 	and.w	r3, r3, #2
 801700a:	2b00      	cmp	r3, #0
 801700c:	d108      	bne.n	8017020 <ip4_route+0x78>
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	681a      	ldr	r2, [r3, #0]
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	330c      	adds	r3, #12
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	429a      	cmp	r2, r3
 801701a:	d101      	bne.n	8017020 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	e028      	b.n	8017072 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	60fb      	str	r3, [r7, #12]
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	2b00      	cmp	r3, #0
 801702a:	d1c5      	bne.n	8016fb8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801702c:	4b15      	ldr	r3, [pc, #84]	; (8017084 <ip4_route+0xdc>)
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d01a      	beq.n	801706a <ip4_route+0xc2>
 8017034:	4b13      	ldr	r3, [pc, #76]	; (8017084 <ip4_route+0xdc>)
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801703c:	f003 0301 	and.w	r3, r3, #1
 8017040:	2b00      	cmp	r3, #0
 8017042:	d012      	beq.n	801706a <ip4_route+0xc2>
 8017044:	4b0f      	ldr	r3, [pc, #60]	; (8017084 <ip4_route+0xdc>)
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801704c:	f003 0304 	and.w	r3, r3, #4
 8017050:	2b00      	cmp	r3, #0
 8017052:	d00a      	beq.n	801706a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017054:	4b0b      	ldr	r3, [pc, #44]	; (8017084 <ip4_route+0xdc>)
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	3304      	adds	r3, #4
 801705a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801705c:	2b00      	cmp	r3, #0
 801705e:	d004      	beq.n	801706a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	b2db      	uxtb	r3, r3
 8017066:	2b7f      	cmp	r3, #127	; 0x7f
 8017068:	d101      	bne.n	801706e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801706a:	2300      	movs	r3, #0
 801706c:	e001      	b.n	8017072 <ip4_route+0xca>
  }

  return netif_default;
 801706e:	4b05      	ldr	r3, [pc, #20]	; (8017084 <ip4_route+0xdc>)
 8017070:	681b      	ldr	r3, [r3, #0]
}
 8017072:	4618      	mov	r0, r3
 8017074:	3714      	adds	r7, #20
 8017076:	46bd      	mov	sp, r7
 8017078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707c:	4770      	bx	lr
 801707e:	bf00      	nop
 8017080:	20018550 	.word	0x20018550
 8017084:	20018554 	.word	0x20018554

08017088 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b082      	sub	sp, #8
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017096:	f003 0301 	and.w	r3, r3, #1
 801709a:	b2db      	uxtb	r3, r3
 801709c:	2b00      	cmp	r3, #0
 801709e:	d016      	beq.n	80170ce <ip4_input_accept+0x46>
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	3304      	adds	r3, #4
 80170a4:	681b      	ldr	r3, [r3, #0]
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d011      	beq.n	80170ce <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80170aa:	4b0b      	ldr	r3, [pc, #44]	; (80170d8 <ip4_input_accept+0x50>)
 80170ac:	695a      	ldr	r2, [r3, #20]
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	3304      	adds	r3, #4
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	429a      	cmp	r2, r3
 80170b6:	d008      	beq.n	80170ca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80170b8:	4b07      	ldr	r3, [pc, #28]	; (80170d8 <ip4_input_accept+0x50>)
 80170ba:	695b      	ldr	r3, [r3, #20]
 80170bc:	6879      	ldr	r1, [r7, #4]
 80170be:	4618      	mov	r0, r3
 80170c0:	f000 fa08 	bl	80174d4 <ip4_addr_isbroadcast_u32>
 80170c4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d001      	beq.n	80170ce <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80170ca:	2301      	movs	r3, #1
 80170cc:	e000      	b.n	80170d0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80170ce:	2300      	movs	r3, #0
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	3708      	adds	r7, #8
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}
 80170d8:	20014e4c 	.word	0x20014e4c

080170dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b086      	sub	sp, #24
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
 80170e4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	685b      	ldr	r3, [r3, #4]
 80170ea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80170ec:	697b      	ldr	r3, [r7, #20]
 80170ee:	781b      	ldrb	r3, [r3, #0]
 80170f0:	091b      	lsrs	r3, r3, #4
 80170f2:	b2db      	uxtb	r3, r3
 80170f4:	2b04      	cmp	r3, #4
 80170f6:	d004      	beq.n	8017102 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80170f8:	6878      	ldr	r0, [r7, #4]
 80170fa:	f7f7 fcb7 	bl	800ea6c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80170fe:	2300      	movs	r3, #0
 8017100:	e107      	b.n	8017312 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	781b      	ldrb	r3, [r3, #0]
 8017106:	f003 030f 	and.w	r3, r3, #15
 801710a:	b2db      	uxtb	r3, r3
 801710c:	009b      	lsls	r3, r3, #2
 801710e:	b2db      	uxtb	r3, r3
 8017110:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	885b      	ldrh	r3, [r3, #2]
 8017116:	b29b      	uxth	r3, r3
 8017118:	4618      	mov	r0, r3
 801711a:	f7f6 f891 	bl	800d240 <lwip_htons>
 801711e:	4603      	mov	r3, r0
 8017120:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	891b      	ldrh	r3, [r3, #8]
 8017126:	89ba      	ldrh	r2, [r7, #12]
 8017128:	429a      	cmp	r2, r3
 801712a:	d204      	bcs.n	8017136 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801712c:	89bb      	ldrh	r3, [r7, #12]
 801712e:	4619      	mov	r1, r3
 8017130:	6878      	ldr	r0, [r7, #4]
 8017132:	f7f7 fae3 	bl	800e6fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	895b      	ldrh	r3, [r3, #10]
 801713a:	89fa      	ldrh	r2, [r7, #14]
 801713c:	429a      	cmp	r2, r3
 801713e:	d807      	bhi.n	8017150 <ip4_input+0x74>
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	891b      	ldrh	r3, [r3, #8]
 8017144:	89ba      	ldrh	r2, [r7, #12]
 8017146:	429a      	cmp	r2, r3
 8017148:	d802      	bhi.n	8017150 <ip4_input+0x74>
 801714a:	89fb      	ldrh	r3, [r7, #14]
 801714c:	2b13      	cmp	r3, #19
 801714e:	d804      	bhi.n	801715a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017150:	6878      	ldr	r0, [r7, #4]
 8017152:	f7f7 fc8b 	bl	800ea6c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017156:	2300      	movs	r3, #0
 8017158:	e0db      	b.n	8017312 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801715a:	697b      	ldr	r3, [r7, #20]
 801715c:	691b      	ldr	r3, [r3, #16]
 801715e:	4a6f      	ldr	r2, [pc, #444]	; (801731c <ip4_input+0x240>)
 8017160:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017162:	697b      	ldr	r3, [r7, #20]
 8017164:	68db      	ldr	r3, [r3, #12]
 8017166:	4a6d      	ldr	r2, [pc, #436]	; (801731c <ip4_input+0x240>)
 8017168:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801716a:	4b6c      	ldr	r3, [pc, #432]	; (801731c <ip4_input+0x240>)
 801716c:	695b      	ldr	r3, [r3, #20]
 801716e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017172:	2be0      	cmp	r3, #224	; 0xe0
 8017174:	d112      	bne.n	801719c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801717c:	f003 0301 	and.w	r3, r3, #1
 8017180:	b2db      	uxtb	r3, r3
 8017182:	2b00      	cmp	r3, #0
 8017184:	d007      	beq.n	8017196 <ip4_input+0xba>
 8017186:	683b      	ldr	r3, [r7, #0]
 8017188:	3304      	adds	r3, #4
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d002      	beq.n	8017196 <ip4_input+0xba>
      netif = inp;
 8017190:	683b      	ldr	r3, [r7, #0]
 8017192:	613b      	str	r3, [r7, #16]
 8017194:	e02a      	b.n	80171ec <ip4_input+0x110>
    } else {
      netif = NULL;
 8017196:	2300      	movs	r3, #0
 8017198:	613b      	str	r3, [r7, #16]
 801719a:	e027      	b.n	80171ec <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801719c:	6838      	ldr	r0, [r7, #0]
 801719e:	f7ff ff73 	bl	8017088 <ip4_input_accept>
 80171a2:	4603      	mov	r3, r0
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d002      	beq.n	80171ae <ip4_input+0xd2>
      netif = inp;
 80171a8:	683b      	ldr	r3, [r7, #0]
 80171aa:	613b      	str	r3, [r7, #16]
 80171ac:	e01e      	b.n	80171ec <ip4_input+0x110>
    } else {
      netif = NULL;
 80171ae:	2300      	movs	r3, #0
 80171b0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80171b2:	4b5a      	ldr	r3, [pc, #360]	; (801731c <ip4_input+0x240>)
 80171b4:	695b      	ldr	r3, [r3, #20]
 80171b6:	b2db      	uxtb	r3, r3
 80171b8:	2b7f      	cmp	r3, #127	; 0x7f
 80171ba:	d017      	beq.n	80171ec <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80171bc:	4b58      	ldr	r3, [pc, #352]	; (8017320 <ip4_input+0x244>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	613b      	str	r3, [r7, #16]
 80171c2:	e00e      	b.n	80171e2 <ip4_input+0x106>
          if (netif == inp) {
 80171c4:	693a      	ldr	r2, [r7, #16]
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	429a      	cmp	r2, r3
 80171ca:	d006      	beq.n	80171da <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80171cc:	6938      	ldr	r0, [r7, #16]
 80171ce:	f7ff ff5b 	bl	8017088 <ip4_input_accept>
 80171d2:	4603      	mov	r3, r0
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d108      	bne.n	80171ea <ip4_input+0x10e>
 80171d8:	e000      	b.n	80171dc <ip4_input+0x100>
            continue;
 80171da:	bf00      	nop
        NETIF_FOREACH(netif) {
 80171dc:	693b      	ldr	r3, [r7, #16]
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	613b      	str	r3, [r7, #16]
 80171e2:	693b      	ldr	r3, [r7, #16]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d1ed      	bne.n	80171c4 <ip4_input+0xe8>
 80171e8:	e000      	b.n	80171ec <ip4_input+0x110>
            break;
 80171ea:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80171ec:	4b4b      	ldr	r3, [pc, #300]	; (801731c <ip4_input+0x240>)
 80171ee:	691b      	ldr	r3, [r3, #16]
 80171f0:	6839      	ldr	r1, [r7, #0]
 80171f2:	4618      	mov	r0, r3
 80171f4:	f000 f96e 	bl	80174d4 <ip4_addr_isbroadcast_u32>
 80171f8:	4603      	mov	r3, r0
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d105      	bne.n	801720a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80171fe:	4b47      	ldr	r3, [pc, #284]	; (801731c <ip4_input+0x240>)
 8017200:	691b      	ldr	r3, [r3, #16]
 8017202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017206:	2be0      	cmp	r3, #224	; 0xe0
 8017208:	d104      	bne.n	8017214 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f7f7 fc2e 	bl	800ea6c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017210:	2300      	movs	r3, #0
 8017212:	e07e      	b.n	8017312 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017214:	693b      	ldr	r3, [r7, #16]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d104      	bne.n	8017224 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f7f7 fc26 	bl	800ea6c <pbuf_free>
    return ERR_OK;
 8017220:	2300      	movs	r3, #0
 8017222:	e076      	b.n	8017312 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017224:	697b      	ldr	r3, [r7, #20]
 8017226:	88db      	ldrh	r3, [r3, #6]
 8017228:	b29b      	uxth	r3, r3
 801722a:	461a      	mov	r2, r3
 801722c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017230:	4013      	ands	r3, r2
 8017232:	2b00      	cmp	r3, #0
 8017234:	d00b      	beq.n	801724e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017236:	6878      	ldr	r0, [r7, #4]
 8017238:	f000 fd14 	bl	8017c64 <ip4_reass>
 801723c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d101      	bne.n	8017248 <ip4_input+0x16c>
      return ERR_OK;
 8017244:	2300      	movs	r3, #0
 8017246:	e064      	b.n	8017312 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	685b      	ldr	r3, [r3, #4]
 801724c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801724e:	4a33      	ldr	r2, [pc, #204]	; (801731c <ip4_input+0x240>)
 8017250:	693b      	ldr	r3, [r7, #16]
 8017252:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017254:	4a31      	ldr	r2, [pc, #196]	; (801731c <ip4_input+0x240>)
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801725a:	4a30      	ldr	r2, [pc, #192]	; (801731c <ip4_input+0x240>)
 801725c:	697b      	ldr	r3, [r7, #20]
 801725e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017260:	697b      	ldr	r3, [r7, #20]
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	f003 030f 	and.w	r3, r3, #15
 8017268:	b2db      	uxtb	r3, r3
 801726a:	009b      	lsls	r3, r3, #2
 801726c:	b2db      	uxtb	r3, r3
 801726e:	b29a      	uxth	r2, r3
 8017270:	4b2a      	ldr	r3, [pc, #168]	; (801731c <ip4_input+0x240>)
 8017272:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017274:	89fb      	ldrh	r3, [r7, #14]
 8017276:	4619      	mov	r1, r3
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f7f7 fb3f 	bl	800e8fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801727e:	697b      	ldr	r3, [r7, #20]
 8017280:	7a5b      	ldrb	r3, [r3, #9]
 8017282:	2b11      	cmp	r3, #17
 8017284:	d006      	beq.n	8017294 <ip4_input+0x1b8>
 8017286:	2b11      	cmp	r3, #17
 8017288:	dc13      	bgt.n	80172b2 <ip4_input+0x1d6>
 801728a:	2b01      	cmp	r3, #1
 801728c:	d00c      	beq.n	80172a8 <ip4_input+0x1cc>
 801728e:	2b06      	cmp	r3, #6
 8017290:	d005      	beq.n	801729e <ip4_input+0x1c2>
 8017292:	e00e      	b.n	80172b2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017294:	6839      	ldr	r1, [r7, #0]
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f7fe f956 	bl	8015548 <udp_input>
        break;
 801729c:	e026      	b.n	80172ec <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801729e:	6839      	ldr	r1, [r7, #0]
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f7f9 fd13 	bl	8010ccc <tcp_input>
        break;
 80172a6:	e021      	b.n	80172ec <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80172a8:	6839      	ldr	r1, [r7, #0]
 80172aa:	6878      	ldr	r0, [r7, #4]
 80172ac:	f7ff fcee 	bl	8016c8c <icmp_input>
        break;
 80172b0:	e01c      	b.n	80172ec <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80172b2:	4b1a      	ldr	r3, [pc, #104]	; (801731c <ip4_input+0x240>)
 80172b4:	695b      	ldr	r3, [r3, #20]
 80172b6:	6939      	ldr	r1, [r7, #16]
 80172b8:	4618      	mov	r0, r3
 80172ba:	f000 f90b 	bl	80174d4 <ip4_addr_isbroadcast_u32>
 80172be:	4603      	mov	r3, r0
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d10f      	bne.n	80172e4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80172c4:	4b15      	ldr	r3, [pc, #84]	; (801731c <ip4_input+0x240>)
 80172c6:	695b      	ldr	r3, [r3, #20]
 80172c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80172cc:	2be0      	cmp	r3, #224	; 0xe0
 80172ce:	d009      	beq.n	80172e4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80172d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80172d4:	4619      	mov	r1, r3
 80172d6:	6878      	ldr	r0, [r7, #4]
 80172d8:	f7f7 fb83 	bl	800e9e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80172dc:	2102      	movs	r1, #2
 80172de:	6878      	ldr	r0, [r7, #4]
 80172e0:	f7ff fdd8 	bl	8016e94 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f7f7 fbc1 	bl	800ea6c <pbuf_free>
        break;
 80172ea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80172ec:	4b0b      	ldr	r3, [pc, #44]	; (801731c <ip4_input+0x240>)
 80172ee:	2200      	movs	r2, #0
 80172f0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80172f2:	4b0a      	ldr	r3, [pc, #40]	; (801731c <ip4_input+0x240>)
 80172f4:	2200      	movs	r2, #0
 80172f6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80172f8:	4b08      	ldr	r3, [pc, #32]	; (801731c <ip4_input+0x240>)
 80172fa:	2200      	movs	r2, #0
 80172fc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80172fe:	4b07      	ldr	r3, [pc, #28]	; (801731c <ip4_input+0x240>)
 8017300:	2200      	movs	r2, #0
 8017302:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017304:	4b05      	ldr	r3, [pc, #20]	; (801731c <ip4_input+0x240>)
 8017306:	2200      	movs	r2, #0
 8017308:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801730a:	4b04      	ldr	r3, [pc, #16]	; (801731c <ip4_input+0x240>)
 801730c:	2200      	movs	r2, #0
 801730e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017310:	2300      	movs	r3, #0
}
 8017312:	4618      	mov	r0, r3
 8017314:	3718      	adds	r7, #24
 8017316:	46bd      	mov	sp, r7
 8017318:	bd80      	pop	{r7, pc}
 801731a:	bf00      	nop
 801731c:	20014e4c 	.word	0x20014e4c
 8017320:	20018550 	.word	0x20018550

08017324 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b08a      	sub	sp, #40	; 0x28
 8017328:	af04      	add	r7, sp, #16
 801732a:	60f8      	str	r0, [r7, #12]
 801732c:	60b9      	str	r1, [r7, #8]
 801732e:	607a      	str	r2, [r7, #4]
 8017330:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017332:	68bb      	ldr	r3, [r7, #8]
 8017334:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d009      	beq.n	8017350 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801733c:	68bb      	ldr	r3, [r7, #8]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d003      	beq.n	801734a <ip4_output_if+0x26>
 8017342:	68bb      	ldr	r3, [r7, #8]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d102      	bne.n	8017350 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801734c:	3304      	adds	r3, #4
 801734e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017350:	78fa      	ldrb	r2, [r7, #3]
 8017352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017354:	9302      	str	r3, [sp, #8]
 8017356:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801735a:	9301      	str	r3, [sp, #4]
 801735c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017360:	9300      	str	r3, [sp, #0]
 8017362:	4613      	mov	r3, r2
 8017364:	687a      	ldr	r2, [r7, #4]
 8017366:	6979      	ldr	r1, [r7, #20]
 8017368:	68f8      	ldr	r0, [r7, #12]
 801736a:	f000 f805 	bl	8017378 <ip4_output_if_src>
 801736e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017370:	4618      	mov	r0, r3
 8017372:	3718      	adds	r7, #24
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}

08017378 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b088      	sub	sp, #32
 801737c:	af00      	add	r7, sp, #0
 801737e:	60f8      	str	r0, [r7, #12]
 8017380:	60b9      	str	r1, [r7, #8]
 8017382:	607a      	str	r2, [r7, #4]
 8017384:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	7b9b      	ldrb	r3, [r3, #14]
 801738a:	2b01      	cmp	r3, #1
 801738c:	d006      	beq.n	801739c <ip4_output_if_src+0x24>
 801738e:	4b4b      	ldr	r3, [pc, #300]	; (80174bc <ip4_output_if_src+0x144>)
 8017390:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017394:	494a      	ldr	r1, [pc, #296]	; (80174c0 <ip4_output_if_src+0x148>)
 8017396:	484b      	ldr	r0, [pc, #300]	; (80174c4 <ip4_output_if_src+0x14c>)
 8017398:	f003 fcd0 	bl	801ad3c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d060      	beq.n	8017464 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80173a2:	2314      	movs	r3, #20
 80173a4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80173a6:	2114      	movs	r1, #20
 80173a8:	68f8      	ldr	r0, [r7, #12]
 80173aa:	f7f7 fa97 	bl	800e8dc <pbuf_add_header>
 80173ae:	4603      	mov	r3, r0
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d002      	beq.n	80173ba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80173b4:	f06f 0301 	mvn.w	r3, #1
 80173b8:	e07c      	b.n	80174b4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	685b      	ldr	r3, [r3, #4]
 80173be:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	895b      	ldrh	r3, [r3, #10]
 80173c4:	2b13      	cmp	r3, #19
 80173c6:	d806      	bhi.n	80173d6 <ip4_output_if_src+0x5e>
 80173c8:	4b3c      	ldr	r3, [pc, #240]	; (80174bc <ip4_output_if_src+0x144>)
 80173ca:	f44f 7262 	mov.w	r2, #904	; 0x388
 80173ce:	493e      	ldr	r1, [pc, #248]	; (80174c8 <ip4_output_if_src+0x150>)
 80173d0:	483c      	ldr	r0, [pc, #240]	; (80174c4 <ip4_output_if_src+0x14c>)
 80173d2:	f003 fcb3 	bl	801ad3c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80173d6:	69fb      	ldr	r3, [r7, #28]
 80173d8:	78fa      	ldrb	r2, [r7, #3]
 80173da:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80173dc:	69fb      	ldr	r3, [r7, #28]
 80173de:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80173e2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	681a      	ldr	r2, [r3, #0]
 80173e8:	69fb      	ldr	r3, [r7, #28]
 80173ea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80173ec:	8b7b      	ldrh	r3, [r7, #26]
 80173ee:	089b      	lsrs	r3, r3, #2
 80173f0:	b29b      	uxth	r3, r3
 80173f2:	b2db      	uxtb	r3, r3
 80173f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173f8:	b2da      	uxtb	r2, r3
 80173fa:	69fb      	ldr	r3, [r7, #28]
 80173fc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80173fe:	69fb      	ldr	r3, [r7, #28]
 8017400:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017404:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	891b      	ldrh	r3, [r3, #8]
 801740a:	4618      	mov	r0, r3
 801740c:	f7f5 ff18 	bl	800d240 <lwip_htons>
 8017410:	4603      	mov	r3, r0
 8017412:	461a      	mov	r2, r3
 8017414:	69fb      	ldr	r3, [r7, #28]
 8017416:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017418:	69fb      	ldr	r3, [r7, #28]
 801741a:	2200      	movs	r2, #0
 801741c:	719a      	strb	r2, [r3, #6]
 801741e:	2200      	movs	r2, #0
 8017420:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017422:	4b2a      	ldr	r3, [pc, #168]	; (80174cc <ip4_output_if_src+0x154>)
 8017424:	881b      	ldrh	r3, [r3, #0]
 8017426:	4618      	mov	r0, r3
 8017428:	f7f5 ff0a 	bl	800d240 <lwip_htons>
 801742c:	4603      	mov	r3, r0
 801742e:	461a      	mov	r2, r3
 8017430:	69fb      	ldr	r3, [r7, #28]
 8017432:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017434:	4b25      	ldr	r3, [pc, #148]	; (80174cc <ip4_output_if_src+0x154>)
 8017436:	881b      	ldrh	r3, [r3, #0]
 8017438:	3301      	adds	r3, #1
 801743a:	b29a      	uxth	r2, r3
 801743c:	4b23      	ldr	r3, [pc, #140]	; (80174cc <ip4_output_if_src+0x154>)
 801743e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017440:	68bb      	ldr	r3, [r7, #8]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d104      	bne.n	8017450 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017446:	4b22      	ldr	r3, [pc, #136]	; (80174d0 <ip4_output_if_src+0x158>)
 8017448:	681a      	ldr	r2, [r3, #0]
 801744a:	69fb      	ldr	r3, [r7, #28]
 801744c:	60da      	str	r2, [r3, #12]
 801744e:	e003      	b.n	8017458 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017450:	68bb      	ldr	r3, [r7, #8]
 8017452:	681a      	ldr	r2, [r3, #0]
 8017454:	69fb      	ldr	r3, [r7, #28]
 8017456:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017458:	69fb      	ldr	r3, [r7, #28]
 801745a:	2200      	movs	r2, #0
 801745c:	729a      	strb	r2, [r3, #10]
 801745e:	2200      	movs	r2, #0
 8017460:	72da      	strb	r2, [r3, #11]
 8017462:	e00f      	b.n	8017484 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	895b      	ldrh	r3, [r3, #10]
 8017468:	2b13      	cmp	r3, #19
 801746a:	d802      	bhi.n	8017472 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801746c:	f06f 0301 	mvn.w	r3, #1
 8017470:	e020      	b.n	80174b4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017478:	69fb      	ldr	r3, [r7, #28]
 801747a:	691b      	ldr	r3, [r3, #16]
 801747c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801747e:	f107 0314 	add.w	r3, r7, #20
 8017482:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017486:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017488:	2b00      	cmp	r3, #0
 801748a:	d00c      	beq.n	80174a6 <ip4_output_if_src+0x12e>
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	891a      	ldrh	r2, [r3, #8]
 8017490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017492:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017494:	429a      	cmp	r2, r3
 8017496:	d906      	bls.n	80174a6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017498:	687a      	ldr	r2, [r7, #4]
 801749a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801749c:	68f8      	ldr	r0, [r7, #12]
 801749e:	f000 fdcf 	bl	8018040 <ip4_frag>
 80174a2:	4603      	mov	r3, r0
 80174a4:	e006      	b.n	80174b4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80174a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a8:	695b      	ldr	r3, [r3, #20]
 80174aa:	687a      	ldr	r2, [r7, #4]
 80174ac:	68f9      	ldr	r1, [r7, #12]
 80174ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80174b0:	4798      	blx	r3
 80174b2:	4603      	mov	r3, r0
}
 80174b4:	4618      	mov	r0, r3
 80174b6:	3720      	adds	r7, #32
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}
 80174bc:	0801ef78 	.word	0x0801ef78
 80174c0:	0801efac 	.word	0x0801efac
 80174c4:	0801efb8 	.word	0x0801efb8
 80174c8:	0801efe0 	.word	0x0801efe0
 80174cc:	2001170e 	.word	0x2001170e
 80174d0:	0801f63c 	.word	0x0801f63c

080174d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80174d4:	b480      	push	{r7}
 80174d6:	b085      	sub	sp, #20
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
 80174dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174e8:	d002      	beq.n	80174f0 <ip4_addr_isbroadcast_u32+0x1c>
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d101      	bne.n	80174f4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80174f0:	2301      	movs	r3, #1
 80174f2:	e02a      	b.n	801754a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174fa:	f003 0302 	and.w	r3, r3, #2
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d101      	bne.n	8017506 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017502:	2300      	movs	r3, #0
 8017504:	e021      	b.n	801754a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	3304      	adds	r3, #4
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	687a      	ldr	r2, [r7, #4]
 801750e:	429a      	cmp	r2, r3
 8017510:	d101      	bne.n	8017516 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017512:	2300      	movs	r3, #0
 8017514:	e019      	b.n	801754a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017516:	68fa      	ldr	r2, [r7, #12]
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	3304      	adds	r3, #4
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	405a      	eors	r2, r3
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	3308      	adds	r3, #8
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	4013      	ands	r3, r2
 8017528:	2b00      	cmp	r3, #0
 801752a:	d10d      	bne.n	8017548 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801752c:	683b      	ldr	r3, [r7, #0]
 801752e:	3308      	adds	r3, #8
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	43da      	mvns	r2, r3
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017538:	683b      	ldr	r3, [r7, #0]
 801753a:	3308      	adds	r3, #8
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017540:	429a      	cmp	r2, r3
 8017542:	d101      	bne.n	8017548 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017544:	2301      	movs	r3, #1
 8017546:	e000      	b.n	801754a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017548:	2300      	movs	r3, #0
  }
}
 801754a:	4618      	mov	r0, r3
 801754c:	3714      	adds	r7, #20
 801754e:	46bd      	mov	sp, r7
 8017550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017554:	4770      	bx	lr
	...

08017558 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017558:	b480      	push	{r7}
 801755a:	b08d      	sub	sp, #52	; 0x34
 801755c:	af00      	add	r7, sp, #0
 801755e:	60f8      	str	r0, [r7, #12]
 8017560:	60b9      	str	r1, [r7, #8]
 8017562:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8017564:	2300      	movs	r3, #0
 8017566:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801756e:	68bb      	ldr	r3, [r7, #8]
 8017570:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8017572:	f107 0318 	add.w	r3, r7, #24
 8017576:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017578:	2300      	movs	r3, #0
 801757a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801757e:	e059      	b.n	8017634 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8017580:	2300      	movs	r3, #0
 8017582:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8017586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017588:	781a      	ldrb	r2, [r3, #0]
 801758a:	4b33      	ldr	r3, [pc, #204]	; (8017658 <ip4addr_ntoa_r+0x100>)
 801758c:	fba3 1302 	umull	r1, r3, r3, r2
 8017590:	08d9      	lsrs	r1, r3, #3
 8017592:	460b      	mov	r3, r1
 8017594:	009b      	lsls	r3, r3, #2
 8017596:	440b      	add	r3, r1
 8017598:	005b      	lsls	r3, r3, #1
 801759a:	1ad3      	subs	r3, r2, r3
 801759c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	4a2d      	ldr	r2, [pc, #180]	; (8017658 <ip4addr_ntoa_r+0x100>)
 80175a4:	fba2 2303 	umull	r2, r3, r2, r3
 80175a8:	08db      	lsrs	r3, r3, #3
 80175aa:	b2da      	uxtb	r2, r3
 80175ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ae:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80175b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175b4:	1c5a      	adds	r2, r3, #1
 80175b6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80175ba:	4619      	mov	r1, r3
 80175bc:	7ffb      	ldrb	r3, [r7, #31]
 80175be:	3330      	adds	r3, #48	; 0x30
 80175c0:	b2da      	uxtb	r2, r3
 80175c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80175c6:	440b      	add	r3, r1
 80175c8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80175cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ce:	781b      	ldrb	r3, [r3, #0]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d1d8      	bne.n	8017586 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80175d4:	e012      	b.n	80175fc <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 80175d6:	6a3b      	ldr	r3, [r7, #32]
 80175d8:	1c5a      	adds	r2, r3, #1
 80175da:	623a      	str	r2, [r7, #32]
 80175dc:	687a      	ldr	r2, [r7, #4]
 80175de:	429a      	cmp	r2, r3
 80175e0:	dc01      	bgt.n	80175e6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 80175e2:	2300      	movs	r3, #0
 80175e4:	e031      	b.n	801764a <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 80175e6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80175ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ec:	1c59      	adds	r1, r3, #1
 80175ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80175f0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80175f4:	440a      	add	r2, r1
 80175f6:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80175fa:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80175fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017600:	1e5a      	subs	r2, r3, #1
 8017602:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8017606:	2b00      	cmp	r3, #0
 8017608:	d1e5      	bne.n	80175d6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801760a:	6a3b      	ldr	r3, [r7, #32]
 801760c:	1c5a      	adds	r2, r3, #1
 801760e:	623a      	str	r2, [r7, #32]
 8017610:	687a      	ldr	r2, [r7, #4]
 8017612:	429a      	cmp	r2, r3
 8017614:	dc01      	bgt.n	801761a <ip4addr_ntoa_r+0xc2>
      return NULL;
 8017616:	2300      	movs	r3, #0
 8017618:	e017      	b.n	801764a <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801761c:	1c5a      	adds	r2, r3, #1
 801761e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017620:	222e      	movs	r2, #46	; 0x2e
 8017622:	701a      	strb	r2, [r3, #0]
    ap++;
 8017624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017626:	3301      	adds	r3, #1
 8017628:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801762a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801762e:	3301      	adds	r3, #1
 8017630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017638:	2b03      	cmp	r3, #3
 801763a:	d9a1      	bls.n	8017580 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801763e:	3b01      	subs	r3, #1
 8017640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017644:	2200      	movs	r2, #0
 8017646:	701a      	strb	r2, [r3, #0]
  return buf;
 8017648:	68bb      	ldr	r3, [r7, #8]
}
 801764a:	4618      	mov	r0, r3
 801764c:	3734      	adds	r7, #52	; 0x34
 801764e:	46bd      	mov	sp, r7
 8017650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017654:	4770      	bx	lr
 8017656:	bf00      	nop
 8017658:	cccccccd 	.word	0xcccccccd

0801765c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b084      	sub	sp, #16
 8017660:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017662:	2300      	movs	r3, #0
 8017664:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017666:	4b12      	ldr	r3, [pc, #72]	; (80176b0 <ip_reass_tmr+0x54>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801766c:	e018      	b.n	80176a0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	7fdb      	ldrb	r3, [r3, #31]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d00b      	beq.n	801768e <ip_reass_tmr+0x32>
      r->timer--;
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	7fdb      	ldrb	r3, [r3, #31]
 801767a:	3b01      	subs	r3, #1
 801767c:	b2da      	uxtb	r2, r3
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	60fb      	str	r3, [r7, #12]
 801768c:	e008      	b.n	80176a0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017698:	68b9      	ldr	r1, [r7, #8]
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	f000 f80a 	bl	80176b4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d1e3      	bne.n	801766e <ip_reass_tmr+0x12>
    }
  }
}
 80176a6:	bf00      	nop
 80176a8:	bf00      	nop
 80176aa:	3710      	adds	r7, #16
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}
 80176b0:	20011710 	.word	0x20011710

080176b4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b088      	sub	sp, #32
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
 80176bc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80176be:	2300      	movs	r3, #0
 80176c0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80176c2:	683a      	ldr	r2, [r7, #0]
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	429a      	cmp	r2, r3
 80176c8:	d105      	bne.n	80176d6 <ip_reass_free_complete_datagram+0x22>
 80176ca:	4b45      	ldr	r3, [pc, #276]	; (80177e0 <ip_reass_free_complete_datagram+0x12c>)
 80176cc:	22ab      	movs	r2, #171	; 0xab
 80176ce:	4945      	ldr	r1, [pc, #276]	; (80177e4 <ip_reass_free_complete_datagram+0x130>)
 80176d0:	4845      	ldr	r0, [pc, #276]	; (80177e8 <ip_reass_free_complete_datagram+0x134>)
 80176d2:	f003 fb33 	bl	801ad3c <iprintf>
  if (prev != NULL) {
 80176d6:	683b      	ldr	r3, [r7, #0]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d00a      	beq.n	80176f2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80176dc:	683b      	ldr	r3, [r7, #0]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	687a      	ldr	r2, [r7, #4]
 80176e2:	429a      	cmp	r2, r3
 80176e4:	d005      	beq.n	80176f2 <ip_reass_free_complete_datagram+0x3e>
 80176e6:	4b3e      	ldr	r3, [pc, #248]	; (80177e0 <ip_reass_free_complete_datagram+0x12c>)
 80176e8:	22ad      	movs	r2, #173	; 0xad
 80176ea:	4940      	ldr	r1, [pc, #256]	; (80177ec <ip_reass_free_complete_datagram+0x138>)
 80176ec:	483e      	ldr	r0, [pc, #248]	; (80177e8 <ip_reass_free_complete_datagram+0x134>)
 80176ee:	f003 fb25 	bl	801ad3c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	685b      	ldr	r3, [r3, #4]
 80176f8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80176fa:	697b      	ldr	r3, [r7, #20]
 80176fc:	889b      	ldrh	r3, [r3, #4]
 80176fe:	b29b      	uxth	r3, r3
 8017700:	2b00      	cmp	r3, #0
 8017702:	d12a      	bne.n	801775a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	685b      	ldr	r3, [r3, #4]
 8017708:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801770a:	697b      	ldr	r3, [r7, #20]
 801770c:	681a      	ldr	r2, [r3, #0]
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017712:	69bb      	ldr	r3, [r7, #24]
 8017714:	6858      	ldr	r0, [r3, #4]
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	3308      	adds	r3, #8
 801771a:	2214      	movs	r2, #20
 801771c:	4619      	mov	r1, r3
 801771e:	f002 ff45 	bl	801a5ac <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017722:	2101      	movs	r1, #1
 8017724:	69b8      	ldr	r0, [r7, #24]
 8017726:	f7ff fbc5 	bl	8016eb4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801772a:	69b8      	ldr	r0, [r7, #24]
 801772c:	f7f7 fa2c 	bl	800eb88 <pbuf_clen>
 8017730:	4603      	mov	r3, r0
 8017732:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017734:	8bfa      	ldrh	r2, [r7, #30]
 8017736:	8a7b      	ldrh	r3, [r7, #18]
 8017738:	4413      	add	r3, r2
 801773a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801773e:	db05      	blt.n	801774c <ip_reass_free_complete_datagram+0x98>
 8017740:	4b27      	ldr	r3, [pc, #156]	; (80177e0 <ip_reass_free_complete_datagram+0x12c>)
 8017742:	22bc      	movs	r2, #188	; 0xbc
 8017744:	492a      	ldr	r1, [pc, #168]	; (80177f0 <ip_reass_free_complete_datagram+0x13c>)
 8017746:	4828      	ldr	r0, [pc, #160]	; (80177e8 <ip_reass_free_complete_datagram+0x134>)
 8017748:	f003 faf8 	bl	801ad3c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801774c:	8bfa      	ldrh	r2, [r7, #30]
 801774e:	8a7b      	ldrh	r3, [r7, #18]
 8017750:	4413      	add	r3, r2
 8017752:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017754:	69b8      	ldr	r0, [r7, #24]
 8017756:	f7f7 f989 	bl	800ea6c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	685b      	ldr	r3, [r3, #4]
 801775e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017760:	e01f      	b.n	80177a2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017762:	69bb      	ldr	r3, [r7, #24]
 8017764:	685b      	ldr	r3, [r3, #4]
 8017766:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017768:	69bb      	ldr	r3, [r7, #24]
 801776a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801776c:	697b      	ldr	r3, [r7, #20]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017772:	68f8      	ldr	r0, [r7, #12]
 8017774:	f7f7 fa08 	bl	800eb88 <pbuf_clen>
 8017778:	4603      	mov	r3, r0
 801777a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801777c:	8bfa      	ldrh	r2, [r7, #30]
 801777e:	8a7b      	ldrh	r3, [r7, #18]
 8017780:	4413      	add	r3, r2
 8017782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017786:	db05      	blt.n	8017794 <ip_reass_free_complete_datagram+0xe0>
 8017788:	4b15      	ldr	r3, [pc, #84]	; (80177e0 <ip_reass_free_complete_datagram+0x12c>)
 801778a:	22cc      	movs	r2, #204	; 0xcc
 801778c:	4918      	ldr	r1, [pc, #96]	; (80177f0 <ip_reass_free_complete_datagram+0x13c>)
 801778e:	4816      	ldr	r0, [pc, #88]	; (80177e8 <ip_reass_free_complete_datagram+0x134>)
 8017790:	f003 fad4 	bl	801ad3c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017794:	8bfa      	ldrh	r2, [r7, #30]
 8017796:	8a7b      	ldrh	r3, [r7, #18]
 8017798:	4413      	add	r3, r2
 801779a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801779c:	68f8      	ldr	r0, [r7, #12]
 801779e:	f7f7 f965 	bl	800ea6c <pbuf_free>
  while (p != NULL) {
 80177a2:	69bb      	ldr	r3, [r7, #24]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d1dc      	bne.n	8017762 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80177a8:	6839      	ldr	r1, [r7, #0]
 80177aa:	6878      	ldr	r0, [r7, #4]
 80177ac:	f000 f8c2 	bl	8017934 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80177b0:	4b10      	ldr	r3, [pc, #64]	; (80177f4 <ip_reass_free_complete_datagram+0x140>)
 80177b2:	881b      	ldrh	r3, [r3, #0]
 80177b4:	8bfa      	ldrh	r2, [r7, #30]
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d905      	bls.n	80177c6 <ip_reass_free_complete_datagram+0x112>
 80177ba:	4b09      	ldr	r3, [pc, #36]	; (80177e0 <ip_reass_free_complete_datagram+0x12c>)
 80177bc:	22d2      	movs	r2, #210	; 0xd2
 80177be:	490e      	ldr	r1, [pc, #56]	; (80177f8 <ip_reass_free_complete_datagram+0x144>)
 80177c0:	4809      	ldr	r0, [pc, #36]	; (80177e8 <ip_reass_free_complete_datagram+0x134>)
 80177c2:	f003 fabb 	bl	801ad3c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80177c6:	4b0b      	ldr	r3, [pc, #44]	; (80177f4 <ip_reass_free_complete_datagram+0x140>)
 80177c8:	881a      	ldrh	r2, [r3, #0]
 80177ca:	8bfb      	ldrh	r3, [r7, #30]
 80177cc:	1ad3      	subs	r3, r2, r3
 80177ce:	b29a      	uxth	r2, r3
 80177d0:	4b08      	ldr	r3, [pc, #32]	; (80177f4 <ip_reass_free_complete_datagram+0x140>)
 80177d2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80177d4:	8bfb      	ldrh	r3, [r7, #30]
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	3720      	adds	r7, #32
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}
 80177de:	bf00      	nop
 80177e0:	0801f010 	.word	0x0801f010
 80177e4:	0801f04c 	.word	0x0801f04c
 80177e8:	0801f058 	.word	0x0801f058
 80177ec:	0801f080 	.word	0x0801f080
 80177f0:	0801f094 	.word	0x0801f094
 80177f4:	20011714 	.word	0x20011714
 80177f8:	0801f0b4 	.word	0x0801f0b4

080177fc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b08a      	sub	sp, #40	; 0x28
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
 8017804:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017806:	2300      	movs	r3, #0
 8017808:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801780a:	2300      	movs	r3, #0
 801780c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801780e:	2300      	movs	r3, #0
 8017810:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017812:	2300      	movs	r3, #0
 8017814:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017816:	2300      	movs	r3, #0
 8017818:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801781a:	4b28      	ldr	r3, [pc, #160]	; (80178bc <ip_reass_remove_oldest_datagram+0xc0>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017820:	e030      	b.n	8017884 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017824:	695a      	ldr	r2, [r3, #20]
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	68db      	ldr	r3, [r3, #12]
 801782a:	429a      	cmp	r2, r3
 801782c:	d10c      	bne.n	8017848 <ip_reass_remove_oldest_datagram+0x4c>
 801782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017830:	699a      	ldr	r2, [r3, #24]
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	691b      	ldr	r3, [r3, #16]
 8017836:	429a      	cmp	r2, r3
 8017838:	d106      	bne.n	8017848 <ip_reass_remove_oldest_datagram+0x4c>
 801783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783c:	899a      	ldrh	r2, [r3, #12]
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	889b      	ldrh	r3, [r3, #4]
 8017842:	b29b      	uxth	r3, r3
 8017844:	429a      	cmp	r2, r3
 8017846:	d014      	beq.n	8017872 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017848:	693b      	ldr	r3, [r7, #16]
 801784a:	3301      	adds	r3, #1
 801784c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801784e:	6a3b      	ldr	r3, [r7, #32]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d104      	bne.n	801785e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017856:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017858:	69fb      	ldr	r3, [r7, #28]
 801785a:	61bb      	str	r3, [r7, #24]
 801785c:	e009      	b.n	8017872 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017860:	7fda      	ldrb	r2, [r3, #31]
 8017862:	6a3b      	ldr	r3, [r7, #32]
 8017864:	7fdb      	ldrb	r3, [r3, #31]
 8017866:	429a      	cmp	r2, r3
 8017868:	d803      	bhi.n	8017872 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801786c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801786e:	69fb      	ldr	r3, [r7, #28]
 8017870:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d001      	beq.n	801787e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801787c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017886:	2b00      	cmp	r3, #0
 8017888:	d1cb      	bne.n	8017822 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801788a:	6a3b      	ldr	r3, [r7, #32]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d008      	beq.n	80178a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017890:	69b9      	ldr	r1, [r7, #24]
 8017892:	6a38      	ldr	r0, [r7, #32]
 8017894:	f7ff ff0e 	bl	80176b4 <ip_reass_free_complete_datagram>
 8017898:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801789a:	697a      	ldr	r2, [r7, #20]
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	4413      	add	r3, r2
 80178a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80178a2:	697a      	ldr	r2, [r7, #20]
 80178a4:	683b      	ldr	r3, [r7, #0]
 80178a6:	429a      	cmp	r2, r3
 80178a8:	da02      	bge.n	80178b0 <ip_reass_remove_oldest_datagram+0xb4>
 80178aa:	693b      	ldr	r3, [r7, #16]
 80178ac:	2b01      	cmp	r3, #1
 80178ae:	dcac      	bgt.n	801780a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80178b0:	697b      	ldr	r3, [r7, #20]
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3728      	adds	r7, #40	; 0x28
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}
 80178ba:	bf00      	nop
 80178bc:	20011710 	.word	0x20011710

080178c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b084      	sub	sp, #16
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
 80178c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80178ca:	2004      	movs	r0, #4
 80178cc:	f7f6 f96e 	bl	800dbac <memp_malloc>
 80178d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d110      	bne.n	80178fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80178d8:	6839      	ldr	r1, [r7, #0]
 80178da:	6878      	ldr	r0, [r7, #4]
 80178dc:	f7ff ff8e 	bl	80177fc <ip_reass_remove_oldest_datagram>
 80178e0:	4602      	mov	r2, r0
 80178e2:	683b      	ldr	r3, [r7, #0]
 80178e4:	4293      	cmp	r3, r2
 80178e6:	dc03      	bgt.n	80178f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80178e8:	2004      	movs	r0, #4
 80178ea:	f7f6 f95f 	bl	800dbac <memp_malloc>
 80178ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d101      	bne.n	80178fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80178f6:	2300      	movs	r3, #0
 80178f8:	e016      	b.n	8017928 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80178fa:	2220      	movs	r2, #32
 80178fc:	2100      	movs	r1, #0
 80178fe:	68f8      	ldr	r0, [r7, #12]
 8017900:	f002 fe7c 	bl	801a5fc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	220f      	movs	r2, #15
 8017908:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801790a:	4b09      	ldr	r3, [pc, #36]	; (8017930 <ip_reass_enqueue_new_datagram+0x70>)
 801790c:	681a      	ldr	r2, [r3, #0]
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017912:	4a07      	ldr	r2, [pc, #28]	; (8017930 <ip_reass_enqueue_new_datagram+0x70>)
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	3308      	adds	r3, #8
 801791c:	2214      	movs	r2, #20
 801791e:	6879      	ldr	r1, [r7, #4]
 8017920:	4618      	mov	r0, r3
 8017922:	f002 fe43 	bl	801a5ac <memcpy>
  return ipr;
 8017926:	68fb      	ldr	r3, [r7, #12]
}
 8017928:	4618      	mov	r0, r3
 801792a:	3710      	adds	r7, #16
 801792c:	46bd      	mov	sp, r7
 801792e:	bd80      	pop	{r7, pc}
 8017930:	20011710 	.word	0x20011710

08017934 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b082      	sub	sp, #8
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
 801793c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801793e:	4b10      	ldr	r3, [pc, #64]	; (8017980 <ip_reass_dequeue_datagram+0x4c>)
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	687a      	ldr	r2, [r7, #4]
 8017944:	429a      	cmp	r2, r3
 8017946:	d104      	bne.n	8017952 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	4a0c      	ldr	r2, [pc, #48]	; (8017980 <ip_reass_dequeue_datagram+0x4c>)
 801794e:	6013      	str	r3, [r2, #0]
 8017950:	e00d      	b.n	801796e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d106      	bne.n	8017966 <ip_reass_dequeue_datagram+0x32>
 8017958:	4b0a      	ldr	r3, [pc, #40]	; (8017984 <ip_reass_dequeue_datagram+0x50>)
 801795a:	f240 1245 	movw	r2, #325	; 0x145
 801795e:	490a      	ldr	r1, [pc, #40]	; (8017988 <ip_reass_dequeue_datagram+0x54>)
 8017960:	480a      	ldr	r0, [pc, #40]	; (801798c <ip_reass_dequeue_datagram+0x58>)
 8017962:	f003 f9eb 	bl	801ad3c <iprintf>
    prev->next = ipr->next;
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	681a      	ldr	r2, [r3, #0]
 801796a:	683b      	ldr	r3, [r7, #0]
 801796c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801796e:	6879      	ldr	r1, [r7, #4]
 8017970:	2004      	movs	r0, #4
 8017972:	f7f6 f96d 	bl	800dc50 <memp_free>
}
 8017976:	bf00      	nop
 8017978:	3708      	adds	r7, #8
 801797a:	46bd      	mov	sp, r7
 801797c:	bd80      	pop	{r7, pc}
 801797e:	bf00      	nop
 8017980:	20011710 	.word	0x20011710
 8017984:	0801f010 	.word	0x0801f010
 8017988:	0801f0d8 	.word	0x0801f0d8
 801798c:	0801f058 	.word	0x0801f058

08017990 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b08c      	sub	sp, #48	; 0x30
 8017994:	af00      	add	r7, sp, #0
 8017996:	60f8      	str	r0, [r7, #12]
 8017998:	60b9      	str	r1, [r7, #8]
 801799a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801799c:	2300      	movs	r3, #0
 801799e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80179a0:	2301      	movs	r3, #1
 80179a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	685b      	ldr	r3, [r3, #4]
 80179a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80179aa:	69fb      	ldr	r3, [r7, #28]
 80179ac:	885b      	ldrh	r3, [r3, #2]
 80179ae:	b29b      	uxth	r3, r3
 80179b0:	4618      	mov	r0, r3
 80179b2:	f7f5 fc45 	bl	800d240 <lwip_htons>
 80179b6:	4603      	mov	r3, r0
 80179b8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80179ba:	69fb      	ldr	r3, [r7, #28]
 80179bc:	781b      	ldrb	r3, [r3, #0]
 80179be:	f003 030f 	and.w	r3, r3, #15
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	009b      	lsls	r3, r3, #2
 80179c6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80179c8:	7e7b      	ldrb	r3, [r7, #25]
 80179ca:	b29b      	uxth	r3, r3
 80179cc:	8b7a      	ldrh	r2, [r7, #26]
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d202      	bcs.n	80179d8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80179d2:	f04f 33ff 	mov.w	r3, #4294967295
 80179d6:	e135      	b.n	8017c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80179d8:	7e7b      	ldrb	r3, [r7, #25]
 80179da:	b29b      	uxth	r3, r3
 80179dc:	8b7a      	ldrh	r2, [r7, #26]
 80179de:	1ad3      	subs	r3, r2, r3
 80179e0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80179e2:	69fb      	ldr	r3, [r7, #28]
 80179e4:	88db      	ldrh	r3, [r3, #6]
 80179e6:	b29b      	uxth	r3, r3
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7f5 fc29 	bl	800d240 <lwip_htons>
 80179ee:	4603      	mov	r3, r0
 80179f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80179f4:	b29b      	uxth	r3, r3
 80179f6:	00db      	lsls	r3, r3, #3
 80179f8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80179fa:	68bb      	ldr	r3, [r7, #8]
 80179fc:	685b      	ldr	r3, [r3, #4]
 80179fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a02:	2200      	movs	r2, #0
 8017a04:	701a      	strb	r2, [r3, #0]
 8017a06:	2200      	movs	r2, #0
 8017a08:	705a      	strb	r2, [r3, #1]
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	709a      	strb	r2, [r3, #2]
 8017a0e:	2200      	movs	r2, #0
 8017a10:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a14:	8afa      	ldrh	r2, [r7, #22]
 8017a16:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017a18:	8afa      	ldrh	r2, [r7, #22]
 8017a1a:	8b7b      	ldrh	r3, [r7, #26]
 8017a1c:	4413      	add	r3, r2
 8017a1e:	b29a      	uxth	r2, r3
 8017a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a22:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a26:	88db      	ldrh	r3, [r3, #6]
 8017a28:	b29b      	uxth	r3, r3
 8017a2a:	8afa      	ldrh	r2, [r7, #22]
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	d902      	bls.n	8017a36 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a30:	f04f 33ff 	mov.w	r3, #4294967295
 8017a34:	e106      	b.n	8017c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8017a3c:	e068      	b.n	8017b10 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a40:	685b      	ldr	r3, [r3, #4]
 8017a42:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a46:	889b      	ldrh	r3, [r3, #4]
 8017a48:	b29a      	uxth	r2, r3
 8017a4a:	693b      	ldr	r3, [r7, #16]
 8017a4c:	889b      	ldrh	r3, [r3, #4]
 8017a4e:	b29b      	uxth	r3, r3
 8017a50:	429a      	cmp	r2, r3
 8017a52:	d235      	bcs.n	8017ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a58:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d020      	beq.n	8017aa2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a62:	889b      	ldrh	r3, [r3, #4]
 8017a64:	b29a      	uxth	r2, r3
 8017a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a68:	88db      	ldrh	r3, [r3, #6]
 8017a6a:	b29b      	uxth	r3, r3
 8017a6c:	429a      	cmp	r2, r3
 8017a6e:	d307      	bcc.n	8017a80 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a72:	88db      	ldrh	r3, [r3, #6]
 8017a74:	b29a      	uxth	r2, r3
 8017a76:	693b      	ldr	r3, [r7, #16]
 8017a78:	889b      	ldrh	r3, [r3, #4]
 8017a7a:	b29b      	uxth	r3, r3
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	d902      	bls.n	8017a86 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017a80:	f04f 33ff 	mov.w	r3, #4294967295
 8017a84:	e0de      	b.n	8017c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a88:	68ba      	ldr	r2, [r7, #8]
 8017a8a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a8e:	88db      	ldrh	r3, [r3, #6]
 8017a90:	b29a      	uxth	r2, r3
 8017a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a94:	889b      	ldrh	r3, [r3, #4]
 8017a96:	b29b      	uxth	r3, r3
 8017a98:	429a      	cmp	r2, r3
 8017a9a:	d03d      	beq.n	8017b18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017aa0:	e03a      	b.n	8017b18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017aa4:	88db      	ldrh	r3, [r3, #6]
 8017aa6:	b29a      	uxth	r2, r3
 8017aa8:	693b      	ldr	r3, [r7, #16]
 8017aaa:	889b      	ldrh	r3, [r3, #4]
 8017aac:	b29b      	uxth	r3, r3
 8017aae:	429a      	cmp	r2, r3
 8017ab0:	d902      	bls.n	8017ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8017ab6:	e0c5      	b.n	8017c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	68ba      	ldr	r2, [r7, #8]
 8017abc:	605a      	str	r2, [r3, #4]
      break;
 8017abe:	e02b      	b.n	8017b18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac2:	889b      	ldrh	r3, [r3, #4]
 8017ac4:	b29a      	uxth	r2, r3
 8017ac6:	693b      	ldr	r3, [r7, #16]
 8017ac8:	889b      	ldrh	r3, [r3, #4]
 8017aca:	b29b      	uxth	r3, r3
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d102      	bne.n	8017ad6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ad4:	e0b6      	b.n	8017c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ad8:	889b      	ldrh	r3, [r3, #4]
 8017ada:	b29a      	uxth	r2, r3
 8017adc:	693b      	ldr	r3, [r7, #16]
 8017ade:	88db      	ldrh	r3, [r3, #6]
 8017ae0:	b29b      	uxth	r3, r3
 8017ae2:	429a      	cmp	r2, r3
 8017ae4:	d202      	bcs.n	8017aec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8017aea:	e0ab      	b.n	8017c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d009      	beq.n	8017b06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017af4:	88db      	ldrh	r3, [r3, #6]
 8017af6:	b29a      	uxth	r2, r3
 8017af8:	693b      	ldr	r3, [r7, #16]
 8017afa:	889b      	ldrh	r3, [r3, #4]
 8017afc:	b29b      	uxth	r3, r3
 8017afe:	429a      	cmp	r2, r3
 8017b00:	d001      	beq.n	8017b06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017b02:	2300      	movs	r3, #0
 8017b04:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017b06:	693b      	ldr	r3, [r7, #16]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017b0c:	693b      	ldr	r3, [r7, #16]
 8017b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d193      	bne.n	8017a3e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017b16:	e000      	b.n	8017b1a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017b18:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d12d      	bne.n	8017b7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d01c      	beq.n	8017b60 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b28:	88db      	ldrh	r3, [r3, #6]
 8017b2a:	b29a      	uxth	r2, r3
 8017b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b2e:	889b      	ldrh	r3, [r3, #4]
 8017b30:	b29b      	uxth	r3, r3
 8017b32:	429a      	cmp	r2, r3
 8017b34:	d906      	bls.n	8017b44 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017b36:	4b45      	ldr	r3, [pc, #276]	; (8017c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017b38:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017b3c:	4944      	ldr	r1, [pc, #272]	; (8017c50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017b3e:	4845      	ldr	r0, [pc, #276]	; (8017c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017b40:	f003 f8fc 	bl	801ad3c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b46:	68ba      	ldr	r2, [r7, #8]
 8017b48:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b4c:	88db      	ldrh	r3, [r3, #6]
 8017b4e:	b29a      	uxth	r2, r3
 8017b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b52:	889b      	ldrh	r3, [r3, #4]
 8017b54:	b29b      	uxth	r3, r3
 8017b56:	429a      	cmp	r2, r3
 8017b58:	d010      	beq.n	8017b7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017b5a:	2300      	movs	r3, #0
 8017b5c:	623b      	str	r3, [r7, #32]
 8017b5e:	e00d      	b.n	8017b7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	685b      	ldr	r3, [r3, #4]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d006      	beq.n	8017b76 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017b68:	4b38      	ldr	r3, [pc, #224]	; (8017c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017b6a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017b6e:	493a      	ldr	r1, [pc, #232]	; (8017c58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017b70:	4838      	ldr	r0, [pc, #224]	; (8017c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017b72:	f003 f8e3 	bl	801ad3c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	68ba      	ldr	r2, [r7, #8]
 8017b7a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d105      	bne.n	8017b8e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	7f9b      	ldrb	r3, [r3, #30]
 8017b86:	f003 0301 	and.w	r3, r3, #1
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d059      	beq.n	8017c42 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017b8e:	6a3b      	ldr	r3, [r7, #32]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d04f      	beq.n	8017c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	685b      	ldr	r3, [r3, #4]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d006      	beq.n	8017baa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	685b      	ldr	r3, [r3, #4]
 8017ba0:	685b      	ldr	r3, [r3, #4]
 8017ba2:	889b      	ldrh	r3, [r3, #4]
 8017ba4:	b29b      	uxth	r3, r3
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d002      	beq.n	8017bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017baa:	2300      	movs	r3, #0
 8017bac:	623b      	str	r3, [r7, #32]
 8017bae:	e041      	b.n	8017c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017bba:	e012      	b.n	8017be2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bbe:	685b      	ldr	r3, [r3, #4]
 8017bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bc4:	88db      	ldrh	r3, [r3, #6]
 8017bc6:	b29a      	uxth	r2, r3
 8017bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bca:	889b      	ldrh	r3, [r3, #4]
 8017bcc:	b29b      	uxth	r3, r3
 8017bce:	429a      	cmp	r2, r3
 8017bd0:	d002      	beq.n	8017bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	623b      	str	r3, [r7, #32]
            break;
 8017bd6:	e007      	b.n	8017be8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bda:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d1e9      	bne.n	8017bbc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017be8:	6a3b      	ldr	r3, [r7, #32]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d022      	beq.n	8017c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	685b      	ldr	r3, [r3, #4]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d106      	bne.n	8017c04 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017bf6:	4b15      	ldr	r3, [pc, #84]	; (8017c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017bf8:	f240 12df 	movw	r2, #479	; 0x1df
 8017bfc:	4917      	ldr	r1, [pc, #92]	; (8017c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017bfe:	4815      	ldr	r0, [pc, #84]	; (8017c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c00:	f003 f89c 	bl	801ad3c <iprintf>
          LWIP_ASSERT("sanity check",
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	685b      	ldr	r3, [r3, #4]
 8017c08:	685b      	ldr	r3, [r3, #4]
 8017c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c0c:	429a      	cmp	r2, r3
 8017c0e:	d106      	bne.n	8017c1e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017c10:	4b0e      	ldr	r3, [pc, #56]	; (8017c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017c16:	4911      	ldr	r1, [pc, #68]	; (8017c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017c18:	480e      	ldr	r0, [pc, #56]	; (8017c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c1a:	f003 f88f 	bl	801ad3c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d006      	beq.n	8017c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017c26:	4b09      	ldr	r3, [pc, #36]	; (8017c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c28:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017c2c:	490c      	ldr	r1, [pc, #48]	; (8017c60 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017c2e:	4809      	ldr	r0, [pc, #36]	; (8017c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c30:	f003 f884 	bl	801ad3c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017c34:	6a3b      	ldr	r3, [r7, #32]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	bf14      	ite	ne
 8017c3a:	2301      	movne	r3, #1
 8017c3c:	2300      	moveq	r3, #0
 8017c3e:	b2db      	uxtb	r3, r3
 8017c40:	e000      	b.n	8017c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017c42:	2300      	movs	r3, #0
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3730      	adds	r7, #48	; 0x30
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	0801f010 	.word	0x0801f010
 8017c50:	0801f0f4 	.word	0x0801f0f4
 8017c54:	0801f058 	.word	0x0801f058
 8017c58:	0801f114 	.word	0x0801f114
 8017c5c:	0801f14c 	.word	0x0801f14c
 8017c60:	0801f15c 	.word	0x0801f15c

08017c64 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b08e      	sub	sp, #56	; 0x38
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	685b      	ldr	r3, [r3, #4]
 8017c70:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c74:	781b      	ldrb	r3, [r3, #0]
 8017c76:	f003 030f 	and.w	r3, r3, #15
 8017c7a:	b2db      	uxtb	r3, r3
 8017c7c:	009b      	lsls	r3, r3, #2
 8017c7e:	b2db      	uxtb	r3, r3
 8017c80:	2b14      	cmp	r3, #20
 8017c82:	f040 8167 	bne.w	8017f54 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c88:	88db      	ldrh	r3, [r3, #6]
 8017c8a:	b29b      	uxth	r3, r3
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	f7f5 fad7 	bl	800d240 <lwip_htons>
 8017c92:	4603      	mov	r3, r0
 8017c94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c98:	b29b      	uxth	r3, r3
 8017c9a:	00db      	lsls	r3, r3, #3
 8017c9c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca0:	885b      	ldrh	r3, [r3, #2]
 8017ca2:	b29b      	uxth	r3, r3
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f7f5 facb 	bl	800d240 <lwip_htons>
 8017caa:	4603      	mov	r3, r0
 8017cac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	f003 030f 	and.w	r3, r3, #15
 8017cb6:	b2db      	uxtb	r3, r3
 8017cb8:	009b      	lsls	r3, r3, #2
 8017cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017cc2:	b29b      	uxth	r3, r3
 8017cc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017cc6:	429a      	cmp	r2, r3
 8017cc8:	f0c0 8146 	bcc.w	8017f58 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017cd0:	b29b      	uxth	r3, r3
 8017cd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017cd4:	1ad3      	subs	r3, r2, r3
 8017cd6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017cd8:	6878      	ldr	r0, [r7, #4]
 8017cda:	f7f6 ff55 	bl	800eb88 <pbuf_clen>
 8017cde:	4603      	mov	r3, r0
 8017ce0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017ce2:	4b9f      	ldr	r3, [pc, #636]	; (8017f60 <ip4_reass+0x2fc>)
 8017ce4:	881b      	ldrh	r3, [r3, #0]
 8017ce6:	461a      	mov	r2, r3
 8017ce8:	8c3b      	ldrh	r3, [r7, #32]
 8017cea:	4413      	add	r3, r2
 8017cec:	2b0a      	cmp	r3, #10
 8017cee:	dd10      	ble.n	8017d12 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017cf0:	8c3b      	ldrh	r3, [r7, #32]
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cf6:	f7ff fd81 	bl	80177fc <ip_reass_remove_oldest_datagram>
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	f000 812d 	beq.w	8017f5c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017d02:	4b97      	ldr	r3, [pc, #604]	; (8017f60 <ip4_reass+0x2fc>)
 8017d04:	881b      	ldrh	r3, [r3, #0]
 8017d06:	461a      	mov	r2, r3
 8017d08:	8c3b      	ldrh	r3, [r7, #32]
 8017d0a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017d0c:	2b0a      	cmp	r3, #10
 8017d0e:	f300 8125 	bgt.w	8017f5c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017d12:	4b94      	ldr	r3, [pc, #592]	; (8017f64 <ip4_reass+0x300>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	633b      	str	r3, [r7, #48]	; 0x30
 8017d18:	e015      	b.n	8017d46 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d1c:	695a      	ldr	r2, [r3, #20]
 8017d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d20:	68db      	ldr	r3, [r3, #12]
 8017d22:	429a      	cmp	r2, r3
 8017d24:	d10c      	bne.n	8017d40 <ip4_reass+0xdc>
 8017d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d28:	699a      	ldr	r2, [r3, #24]
 8017d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d2c:	691b      	ldr	r3, [r3, #16]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d106      	bne.n	8017d40 <ip4_reass+0xdc>
 8017d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d34:	899a      	ldrh	r2, [r3, #12]
 8017d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d38:	889b      	ldrh	r3, [r3, #4]
 8017d3a:	b29b      	uxth	r3, r3
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d006      	beq.n	8017d4e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	633b      	str	r3, [r7, #48]	; 0x30
 8017d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d1e6      	bne.n	8017d1a <ip4_reass+0xb6>
 8017d4c:	e000      	b.n	8017d50 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017d4e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d109      	bne.n	8017d6a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017d56:	8c3b      	ldrh	r3, [r7, #32]
 8017d58:	4619      	mov	r1, r3
 8017d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d5c:	f7ff fdb0 	bl	80178c0 <ip_reass_enqueue_new_datagram>
 8017d60:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d11c      	bne.n	8017da2 <ip4_reass+0x13e>
      goto nullreturn;
 8017d68:	e109      	b.n	8017f7e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d6c:	88db      	ldrh	r3, [r3, #6]
 8017d6e:	b29b      	uxth	r3, r3
 8017d70:	4618      	mov	r0, r3
 8017d72:	f7f5 fa65 	bl	800d240 <lwip_htons>
 8017d76:	4603      	mov	r3, r0
 8017d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d110      	bne.n	8017da2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d82:	89db      	ldrh	r3, [r3, #14]
 8017d84:	4618      	mov	r0, r3
 8017d86:	f7f5 fa5b 	bl	800d240 <lwip_htons>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d006      	beq.n	8017da2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d96:	3308      	adds	r3, #8
 8017d98:	2214      	movs	r2, #20
 8017d9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	f002 fc05 	bl	801a5ac <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017da4:	88db      	ldrh	r3, [r3, #6]
 8017da6:	b29b      	uxth	r3, r3
 8017da8:	f003 0320 	and.w	r3, r3, #32
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	bf0c      	ite	eq
 8017db0:	2301      	moveq	r3, #1
 8017db2:	2300      	movne	r3, #0
 8017db4:	b2db      	uxtb	r3, r3
 8017db6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017db8:	69fb      	ldr	r3, [r7, #28]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d00e      	beq.n	8017ddc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017dbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017dc2:	4413      	add	r3, r2
 8017dc4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017dc6:	8b7a      	ldrh	r2, [r7, #26]
 8017dc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017dca:	429a      	cmp	r2, r3
 8017dcc:	f0c0 80a0 	bcc.w	8017f10 <ip4_reass+0x2ac>
 8017dd0:	8b7b      	ldrh	r3, [r7, #26]
 8017dd2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017dd6:	4293      	cmp	r3, r2
 8017dd8:	f200 809a 	bhi.w	8017f10 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017ddc:	69fa      	ldr	r2, [r7, #28]
 8017dde:	6879      	ldr	r1, [r7, #4]
 8017de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017de2:	f7ff fdd5 	bl	8017990 <ip_reass_chain_frag_into_datagram_and_validate>
 8017de6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017de8:	697b      	ldr	r3, [r7, #20]
 8017dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dee:	f000 8091 	beq.w	8017f14 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017df2:	4b5b      	ldr	r3, [pc, #364]	; (8017f60 <ip4_reass+0x2fc>)
 8017df4:	881a      	ldrh	r2, [r3, #0]
 8017df6:	8c3b      	ldrh	r3, [r7, #32]
 8017df8:	4413      	add	r3, r2
 8017dfa:	b29a      	uxth	r2, r3
 8017dfc:	4b58      	ldr	r3, [pc, #352]	; (8017f60 <ip4_reass+0x2fc>)
 8017dfe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017e00:	69fb      	ldr	r3, [r7, #28]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d00d      	beq.n	8017e22 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017e06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017e0a:	4413      	add	r3, r2
 8017e0c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e10:	8a7a      	ldrh	r2, [r7, #18]
 8017e12:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e16:	7f9b      	ldrb	r3, [r3, #30]
 8017e18:	f043 0301 	orr.w	r3, r3, #1
 8017e1c:	b2da      	uxtb	r2, r3
 8017e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e20:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017e22:	697b      	ldr	r3, [r7, #20]
 8017e24:	2b01      	cmp	r3, #1
 8017e26:	d171      	bne.n	8017f0c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e2a:	8b9b      	ldrh	r3, [r3, #28]
 8017e2c:	3314      	adds	r3, #20
 8017e2e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e32:	685b      	ldr	r3, [r3, #4]
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e3c:	685b      	ldr	r3, [r3, #4]
 8017e3e:	685b      	ldr	r3, [r3, #4]
 8017e40:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e44:	3308      	adds	r3, #8
 8017e46:	2214      	movs	r2, #20
 8017e48:	4619      	mov	r1, r3
 8017e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e4c:	f002 fbae 	bl	801a5ac <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017e50:	8a3b      	ldrh	r3, [r7, #16]
 8017e52:	4618      	mov	r0, r3
 8017e54:	f7f5 f9f4 	bl	800d240 <lwip_htons>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	461a      	mov	r2, r3
 8017e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e5e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e62:	2200      	movs	r2, #0
 8017e64:	719a      	strb	r2, [r3, #6]
 8017e66:	2200      	movs	r2, #0
 8017e68:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	729a      	strb	r2, [r3, #10]
 8017e70:	2200      	movs	r2, #0
 8017e72:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e76:	685b      	ldr	r3, [r3, #4]
 8017e78:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017e7a:	e00d      	b.n	8017e98 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e7e:	685b      	ldr	r3, [r3, #4]
 8017e80:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017e82:	2114      	movs	r1, #20
 8017e84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017e86:	f7f6 fd39 	bl	800e8fc <pbuf_remove_header>
      pbuf_cat(p, r);
 8017e8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f7f6 febb 	bl	800ec08 <pbuf_cat>
      r = iprh->next_pbuf;
 8017e92:	68fb      	ldr	r3, [r7, #12]
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d1ee      	bne.n	8017e7c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017e9e:	4b31      	ldr	r3, [pc, #196]	; (8017f64 <ip4_reass+0x300>)
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ea4:	429a      	cmp	r2, r3
 8017ea6:	d102      	bne.n	8017eae <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017eac:	e010      	b.n	8017ed0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017eae:	4b2d      	ldr	r3, [pc, #180]	; (8017f64 <ip4_reass+0x300>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017eb4:	e007      	b.n	8017ec6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	d006      	beq.n	8017ece <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d1f4      	bne.n	8017eb6 <ip4_reass+0x252>
 8017ecc:	e000      	b.n	8017ed0 <ip4_reass+0x26c>
          break;
 8017ece:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ed4:	f7ff fd2e 	bl	8017934 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017ed8:	6878      	ldr	r0, [r7, #4]
 8017eda:	f7f6 fe55 	bl	800eb88 <pbuf_clen>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017ee2:	4b1f      	ldr	r3, [pc, #124]	; (8017f60 <ip4_reass+0x2fc>)
 8017ee4:	881b      	ldrh	r3, [r3, #0]
 8017ee6:	8c3a      	ldrh	r2, [r7, #32]
 8017ee8:	429a      	cmp	r2, r3
 8017eea:	d906      	bls.n	8017efa <ip4_reass+0x296>
 8017eec:	4b1e      	ldr	r3, [pc, #120]	; (8017f68 <ip4_reass+0x304>)
 8017eee:	f240 229b 	movw	r2, #667	; 0x29b
 8017ef2:	491e      	ldr	r1, [pc, #120]	; (8017f6c <ip4_reass+0x308>)
 8017ef4:	481e      	ldr	r0, [pc, #120]	; (8017f70 <ip4_reass+0x30c>)
 8017ef6:	f002 ff21 	bl	801ad3c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017efa:	4b19      	ldr	r3, [pc, #100]	; (8017f60 <ip4_reass+0x2fc>)
 8017efc:	881a      	ldrh	r2, [r3, #0]
 8017efe:	8c3b      	ldrh	r3, [r7, #32]
 8017f00:	1ad3      	subs	r3, r2, r3
 8017f02:	b29a      	uxth	r2, r3
 8017f04:	4b16      	ldr	r3, [pc, #88]	; (8017f60 <ip4_reass+0x2fc>)
 8017f06:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	e03c      	b.n	8017f86 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	e03a      	b.n	8017f86 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017f10:	bf00      	nop
 8017f12:	e000      	b.n	8017f16 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017f14:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d106      	bne.n	8017f2a <ip4_reass+0x2c6>
 8017f1c:	4b12      	ldr	r3, [pc, #72]	; (8017f68 <ip4_reass+0x304>)
 8017f1e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017f22:	4914      	ldr	r1, [pc, #80]	; (8017f74 <ip4_reass+0x310>)
 8017f24:	4812      	ldr	r0, [pc, #72]	; (8017f70 <ip4_reass+0x30c>)
 8017f26:	f002 ff09 	bl	801ad3c <iprintf>
  if (ipr->p == NULL) {
 8017f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2c:	685b      	ldr	r3, [r3, #4]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d124      	bne.n	8017f7c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017f32:	4b0c      	ldr	r3, [pc, #48]	; (8017f64 <ip4_reass+0x300>)
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f38:	429a      	cmp	r2, r3
 8017f3a:	d006      	beq.n	8017f4a <ip4_reass+0x2e6>
 8017f3c:	4b0a      	ldr	r3, [pc, #40]	; (8017f68 <ip4_reass+0x304>)
 8017f3e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017f42:	490d      	ldr	r1, [pc, #52]	; (8017f78 <ip4_reass+0x314>)
 8017f44:	480a      	ldr	r0, [pc, #40]	; (8017f70 <ip4_reass+0x30c>)
 8017f46:	f002 fef9 	bl	801ad3c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017f4a:	2100      	movs	r1, #0
 8017f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f4e:	f7ff fcf1 	bl	8017934 <ip_reass_dequeue_datagram>
 8017f52:	e014      	b.n	8017f7e <ip4_reass+0x31a>
    goto nullreturn;
 8017f54:	bf00      	nop
 8017f56:	e012      	b.n	8017f7e <ip4_reass+0x31a>
    goto nullreturn;
 8017f58:	bf00      	nop
 8017f5a:	e010      	b.n	8017f7e <ip4_reass+0x31a>
      goto nullreturn;
 8017f5c:	bf00      	nop
 8017f5e:	e00e      	b.n	8017f7e <ip4_reass+0x31a>
 8017f60:	20011714 	.word	0x20011714
 8017f64:	20011710 	.word	0x20011710
 8017f68:	0801f010 	.word	0x0801f010
 8017f6c:	0801f180 	.word	0x0801f180
 8017f70:	0801f058 	.word	0x0801f058
 8017f74:	0801f19c 	.word	0x0801f19c
 8017f78:	0801f1a8 	.word	0x0801f1a8
  }

nullreturn:
 8017f7c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017f7e:	6878      	ldr	r0, [r7, #4]
 8017f80:	f7f6 fd74 	bl	800ea6c <pbuf_free>
  return NULL;
 8017f84:	2300      	movs	r3, #0
}
 8017f86:	4618      	mov	r0, r3
 8017f88:	3738      	adds	r7, #56	; 0x38
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	bd80      	pop	{r7, pc}
 8017f8e:	bf00      	nop

08017f90 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017f94:	2005      	movs	r0, #5
 8017f96:	f7f5 fe09 	bl	800dbac <memp_malloc>
 8017f9a:	4603      	mov	r3, r0
}
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	bd80      	pop	{r7, pc}

08017fa0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d106      	bne.n	8017fbc <ip_frag_free_pbuf_custom_ref+0x1c>
 8017fae:	4b07      	ldr	r3, [pc, #28]	; (8017fcc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017fb0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017fb4:	4906      	ldr	r1, [pc, #24]	; (8017fd0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017fb6:	4807      	ldr	r0, [pc, #28]	; (8017fd4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017fb8:	f002 fec0 	bl	801ad3c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017fbc:	6879      	ldr	r1, [r7, #4]
 8017fbe:	2005      	movs	r0, #5
 8017fc0:	f7f5 fe46 	bl	800dc50 <memp_free>
}
 8017fc4:	bf00      	nop
 8017fc6:	3708      	adds	r7, #8
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bd80      	pop	{r7, pc}
 8017fcc:	0801f010 	.word	0x0801f010
 8017fd0:	0801f1c8 	.word	0x0801f1c8
 8017fd4:	0801f058 	.word	0x0801f058

08017fd8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b084      	sub	sp, #16
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d106      	bne.n	8017ff8 <ipfrag_free_pbuf_custom+0x20>
 8017fea:	4b11      	ldr	r3, [pc, #68]	; (8018030 <ipfrag_free_pbuf_custom+0x58>)
 8017fec:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017ff0:	4910      	ldr	r1, [pc, #64]	; (8018034 <ipfrag_free_pbuf_custom+0x5c>)
 8017ff2:	4811      	ldr	r0, [pc, #68]	; (8018038 <ipfrag_free_pbuf_custom+0x60>)
 8017ff4:	f002 fea2 	bl	801ad3c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017ff8:	68fa      	ldr	r2, [r7, #12]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	429a      	cmp	r2, r3
 8017ffe:	d006      	beq.n	801800e <ipfrag_free_pbuf_custom+0x36>
 8018000:	4b0b      	ldr	r3, [pc, #44]	; (8018030 <ipfrag_free_pbuf_custom+0x58>)
 8018002:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018006:	490d      	ldr	r1, [pc, #52]	; (801803c <ipfrag_free_pbuf_custom+0x64>)
 8018008:	480b      	ldr	r0, [pc, #44]	; (8018038 <ipfrag_free_pbuf_custom+0x60>)
 801800a:	f002 fe97 	bl	801ad3c <iprintf>
  if (pcr->original != NULL) {
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	695b      	ldr	r3, [r3, #20]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d004      	beq.n	8018020 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	695b      	ldr	r3, [r3, #20]
 801801a:	4618      	mov	r0, r3
 801801c:	f7f6 fd26 	bl	800ea6c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018020:	68f8      	ldr	r0, [r7, #12]
 8018022:	f7ff ffbd 	bl	8017fa0 <ip_frag_free_pbuf_custom_ref>
}
 8018026:	bf00      	nop
 8018028:	3710      	adds	r7, #16
 801802a:	46bd      	mov	sp, r7
 801802c:	bd80      	pop	{r7, pc}
 801802e:	bf00      	nop
 8018030:	0801f010 	.word	0x0801f010
 8018034:	0801f1d4 	.word	0x0801f1d4
 8018038:	0801f058 	.word	0x0801f058
 801803c:	0801f1e0 	.word	0x0801f1e0

08018040 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b094      	sub	sp, #80	; 0x50
 8018044:	af02      	add	r7, sp, #8
 8018046:	60f8      	str	r0, [r7, #12]
 8018048:	60b9      	str	r1, [r7, #8]
 801804a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801804c:	2300      	movs	r3, #0
 801804e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018052:	68bb      	ldr	r3, [r7, #8]
 8018054:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018056:	3b14      	subs	r3, #20
 8018058:	2b00      	cmp	r3, #0
 801805a:	da00      	bge.n	801805e <ip4_frag+0x1e>
 801805c:	3307      	adds	r3, #7
 801805e:	10db      	asrs	r3, r3, #3
 8018060:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018062:	2314      	movs	r3, #20
 8018064:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801806c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801806e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018072:	781b      	ldrb	r3, [r3, #0]
 8018074:	f003 030f 	and.w	r3, r3, #15
 8018078:	b2db      	uxtb	r3, r3
 801807a:	009b      	lsls	r3, r3, #2
 801807c:	b2db      	uxtb	r3, r3
 801807e:	2b14      	cmp	r3, #20
 8018080:	d002      	beq.n	8018088 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018082:	f06f 0305 	mvn.w	r3, #5
 8018086:	e110      	b.n	80182aa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	895b      	ldrh	r3, [r3, #10]
 801808c:	2b13      	cmp	r3, #19
 801808e:	d809      	bhi.n	80180a4 <ip4_frag+0x64>
 8018090:	4b88      	ldr	r3, [pc, #544]	; (80182b4 <ip4_frag+0x274>)
 8018092:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018096:	4988      	ldr	r1, [pc, #544]	; (80182b8 <ip4_frag+0x278>)
 8018098:	4888      	ldr	r0, [pc, #544]	; (80182bc <ip4_frag+0x27c>)
 801809a:	f002 fe4f 	bl	801ad3c <iprintf>
 801809e:	f06f 0305 	mvn.w	r3, #5
 80180a2:	e102      	b.n	80182aa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80180a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180a6:	88db      	ldrh	r3, [r3, #6]
 80180a8:	b29b      	uxth	r3, r3
 80180aa:	4618      	mov	r0, r3
 80180ac:	f7f5 f8c8 	bl	800d240 <lwip_htons>
 80180b0:	4603      	mov	r3, r0
 80180b2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80180b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80180b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80180ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80180be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80180c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80180c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	891b      	ldrh	r3, [r3, #8]
 80180ca:	3b14      	subs	r3, #20
 80180cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80180d0:	e0e1      	b.n	8018296 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80180d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80180d4:	00db      	lsls	r3, r3, #3
 80180d6:	b29b      	uxth	r3, r3
 80180d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80180dc:	4293      	cmp	r3, r2
 80180de:	bf28      	it	cs
 80180e0:	4613      	movcs	r3, r2
 80180e2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80180e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80180e8:	2114      	movs	r1, #20
 80180ea:	200e      	movs	r0, #14
 80180ec:	f7f6 f9a8 	bl	800e440 <pbuf_alloc>
 80180f0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80180f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	f000 80d5 	beq.w	80182a4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80180fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fc:	895b      	ldrh	r3, [r3, #10]
 80180fe:	2b13      	cmp	r3, #19
 8018100:	d806      	bhi.n	8018110 <ip4_frag+0xd0>
 8018102:	4b6c      	ldr	r3, [pc, #432]	; (80182b4 <ip4_frag+0x274>)
 8018104:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018108:	496d      	ldr	r1, [pc, #436]	; (80182c0 <ip4_frag+0x280>)
 801810a:	486c      	ldr	r0, [pc, #432]	; (80182bc <ip4_frag+0x27c>)
 801810c:	f002 fe16 	bl	801ad3c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018112:	685b      	ldr	r3, [r3, #4]
 8018114:	2214      	movs	r2, #20
 8018116:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018118:	4618      	mov	r0, r3
 801811a:	f002 fa47 	bl	801a5ac <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018120:	685b      	ldr	r3, [r3, #4]
 8018122:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018124:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018126:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801812a:	e064      	b.n	80181f6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	895a      	ldrh	r2, [r3, #10]
 8018130:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018132:	1ad3      	subs	r3, r2, r3
 8018134:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	895b      	ldrh	r3, [r3, #10]
 801813a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801813c:	429a      	cmp	r2, r3
 801813e:	d906      	bls.n	801814e <ip4_frag+0x10e>
 8018140:	4b5c      	ldr	r3, [pc, #368]	; (80182b4 <ip4_frag+0x274>)
 8018142:	f240 322d 	movw	r2, #813	; 0x32d
 8018146:	495f      	ldr	r1, [pc, #380]	; (80182c4 <ip4_frag+0x284>)
 8018148:	485c      	ldr	r0, [pc, #368]	; (80182bc <ip4_frag+0x27c>)
 801814a:	f002 fdf7 	bl	801ad3c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801814e:	8bfa      	ldrh	r2, [r7, #30]
 8018150:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018154:	4293      	cmp	r3, r2
 8018156:	bf28      	it	cs
 8018158:	4613      	movcs	r3, r2
 801815a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801815e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018162:	2b00      	cmp	r3, #0
 8018164:	d105      	bne.n	8018172 <ip4_frag+0x132>
        poff = 0;
 8018166:	2300      	movs	r3, #0
 8018168:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	60fb      	str	r3, [r7, #12]
        continue;
 8018170:	e041      	b.n	80181f6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018172:	f7ff ff0d 	bl	8017f90 <ip_frag_alloc_pbuf_custom_ref>
 8018176:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018178:	69bb      	ldr	r3, [r7, #24]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d103      	bne.n	8018186 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801817e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018180:	f7f6 fc74 	bl	800ea6c <pbuf_free>
        goto memerr;
 8018184:	e08f      	b.n	80182a6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018186:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801818c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801818e:	4413      	add	r3, r2
 8018190:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018194:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018198:	9201      	str	r2, [sp, #4]
 801819a:	9300      	str	r3, [sp, #0]
 801819c:	4603      	mov	r3, r0
 801819e:	2241      	movs	r2, #65	; 0x41
 80181a0:	2000      	movs	r0, #0
 80181a2:	f7f6 fa77 	bl	800e694 <pbuf_alloced_custom>
 80181a6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80181a8:	697b      	ldr	r3, [r7, #20]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d106      	bne.n	80181bc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80181ae:	69b8      	ldr	r0, [r7, #24]
 80181b0:	f7ff fef6 	bl	8017fa0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80181b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181b6:	f7f6 fc59 	bl	800ea6c <pbuf_free>
        goto memerr;
 80181ba:	e074      	b.n	80182a6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80181bc:	68f8      	ldr	r0, [r7, #12]
 80181be:	f7f6 fcfb 	bl	800ebb8 <pbuf_ref>
      pcr->original = p;
 80181c2:	69bb      	ldr	r3, [r7, #24]
 80181c4:	68fa      	ldr	r2, [r7, #12]
 80181c6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80181c8:	69bb      	ldr	r3, [r7, #24]
 80181ca:	4a3f      	ldr	r2, [pc, #252]	; (80182c8 <ip4_frag+0x288>)
 80181cc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80181ce:	6979      	ldr	r1, [r7, #20]
 80181d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80181d2:	f7f6 fd19 	bl	800ec08 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80181d6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80181da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80181de:	1ad3      	subs	r3, r2, r3
 80181e0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80181e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d004      	beq.n	80181f6 <ip4_frag+0x1b6>
        poff = 0;
 80181ec:	2300      	movs	r3, #0
 80181ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80181f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d196      	bne.n	801812c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80181fe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018200:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018204:	4413      	add	r3, r2
 8018206:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801820c:	f1a3 0213 	sub.w	r2, r3, #19
 8018210:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018214:	429a      	cmp	r2, r3
 8018216:	bfcc      	ite	gt
 8018218:	2301      	movgt	r3, #1
 801821a:	2300      	movle	r3, #0
 801821c:	b2db      	uxtb	r3, r3
 801821e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018220:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018228:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801822a:	6a3b      	ldr	r3, [r7, #32]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d002      	beq.n	8018236 <ip4_frag+0x1f6>
 8018230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018232:	2b00      	cmp	r3, #0
 8018234:	d003      	beq.n	801823e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018236:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801823c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801823e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018240:	4618      	mov	r0, r3
 8018242:	f7f4 fffd 	bl	800d240 <lwip_htons>
 8018246:	4603      	mov	r3, r0
 8018248:	461a      	mov	r2, r3
 801824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801824c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801824e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018250:	3314      	adds	r3, #20
 8018252:	b29b      	uxth	r3, r3
 8018254:	4618      	mov	r0, r3
 8018256:	f7f4 fff3 	bl	800d240 <lwip_htons>
 801825a:	4603      	mov	r3, r0
 801825c:	461a      	mov	r2, r3
 801825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018260:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018264:	2200      	movs	r2, #0
 8018266:	729a      	strb	r2, [r3, #10]
 8018268:	2200      	movs	r2, #0
 801826a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	695b      	ldr	r3, [r3, #20]
 8018270:	687a      	ldr	r2, [r7, #4]
 8018272:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018274:	68b8      	ldr	r0, [r7, #8]
 8018276:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801827a:	f7f6 fbf7 	bl	800ea6c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801827e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018282:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018284:	1ad3      	subs	r3, r2, r3
 8018286:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801828a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801828e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018290:	4413      	add	r3, r2
 8018292:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018296:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801829a:	2b00      	cmp	r3, #0
 801829c:	f47f af19 	bne.w	80180d2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80182a0:	2300      	movs	r3, #0
 80182a2:	e002      	b.n	80182aa <ip4_frag+0x26a>
      goto memerr;
 80182a4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80182a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80182aa:	4618      	mov	r0, r3
 80182ac:	3748      	adds	r7, #72	; 0x48
 80182ae:	46bd      	mov	sp, r7
 80182b0:	bd80      	pop	{r7, pc}
 80182b2:	bf00      	nop
 80182b4:	0801f010 	.word	0x0801f010
 80182b8:	0801f1ec 	.word	0x0801f1ec
 80182bc:	0801f058 	.word	0x0801f058
 80182c0:	0801f208 	.word	0x0801f208
 80182c4:	0801f228 	.word	0x0801f228
 80182c8:	08017fd9 	.word	0x08017fd9

080182cc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80182cc:	b580      	push	{r7, lr}
 80182ce:	b086      	sub	sp, #24
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	6078      	str	r0, [r7, #4]
 80182d4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80182d6:	230e      	movs	r3, #14
 80182d8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	895b      	ldrh	r3, [r3, #10]
 80182de:	2b0e      	cmp	r3, #14
 80182e0:	d96e      	bls.n	80183c0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	7bdb      	ldrb	r3, [r3, #15]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d106      	bne.n	80182f8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80182f0:	3301      	adds	r3, #1
 80182f2:	b2da      	uxtb	r2, r3
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	685b      	ldr	r3, [r3, #4]
 80182fc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80182fe:	693b      	ldr	r3, [r7, #16]
 8018300:	7b1a      	ldrb	r2, [r3, #12]
 8018302:	7b5b      	ldrb	r3, [r3, #13]
 8018304:	021b      	lsls	r3, r3, #8
 8018306:	4313      	orrs	r3, r2
 8018308:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801830a:	693b      	ldr	r3, [r7, #16]
 801830c:	781b      	ldrb	r3, [r3, #0]
 801830e:	f003 0301 	and.w	r3, r3, #1
 8018312:	2b00      	cmp	r3, #0
 8018314:	d023      	beq.n	801835e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018316:	693b      	ldr	r3, [r7, #16]
 8018318:	781b      	ldrb	r3, [r3, #0]
 801831a:	2b01      	cmp	r3, #1
 801831c:	d10f      	bne.n	801833e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801831e:	693b      	ldr	r3, [r7, #16]
 8018320:	785b      	ldrb	r3, [r3, #1]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d11b      	bne.n	801835e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018326:	693b      	ldr	r3, [r7, #16]
 8018328:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801832a:	2b5e      	cmp	r3, #94	; 0x5e
 801832c:	d117      	bne.n	801835e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	7b5b      	ldrb	r3, [r3, #13]
 8018332:	f043 0310 	orr.w	r3, r3, #16
 8018336:	b2da      	uxtb	r2, r3
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	735a      	strb	r2, [r3, #13]
 801833c:	e00f      	b.n	801835e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801833e:	693b      	ldr	r3, [r7, #16]
 8018340:	2206      	movs	r2, #6
 8018342:	4928      	ldr	r1, [pc, #160]	; (80183e4 <ethernet_input+0x118>)
 8018344:	4618      	mov	r0, r3
 8018346:	f002 f923 	bl	801a590 <memcmp>
 801834a:	4603      	mov	r3, r0
 801834c:	2b00      	cmp	r3, #0
 801834e:	d106      	bne.n	801835e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	7b5b      	ldrb	r3, [r3, #13]
 8018354:	f043 0308 	orr.w	r3, r3, #8
 8018358:	b2da      	uxtb	r2, r3
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801835e:	89fb      	ldrh	r3, [r7, #14]
 8018360:	2b08      	cmp	r3, #8
 8018362:	d003      	beq.n	801836c <ethernet_input+0xa0>
 8018364:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018368:	d014      	beq.n	8018394 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801836a:	e032      	b.n	80183d2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801836c:	683b      	ldr	r3, [r7, #0]
 801836e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018372:	f003 0308 	and.w	r3, r3, #8
 8018376:	2b00      	cmp	r3, #0
 8018378:	d024      	beq.n	80183c4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801837a:	8afb      	ldrh	r3, [r7, #22]
 801837c:	4619      	mov	r1, r3
 801837e:	6878      	ldr	r0, [r7, #4]
 8018380:	f7f6 fabc 	bl	800e8fc <pbuf_remove_header>
 8018384:	4603      	mov	r3, r0
 8018386:	2b00      	cmp	r3, #0
 8018388:	d11e      	bne.n	80183c8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801838a:	6839      	ldr	r1, [r7, #0]
 801838c:	6878      	ldr	r0, [r7, #4]
 801838e:	f7fe fea5 	bl	80170dc <ip4_input>
      break;
 8018392:	e013      	b.n	80183bc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018394:	683b      	ldr	r3, [r7, #0]
 8018396:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801839a:	f003 0308 	and.w	r3, r3, #8
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d014      	beq.n	80183cc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80183a2:	8afb      	ldrh	r3, [r7, #22]
 80183a4:	4619      	mov	r1, r3
 80183a6:	6878      	ldr	r0, [r7, #4]
 80183a8:	f7f6 faa8 	bl	800e8fc <pbuf_remove_header>
 80183ac:	4603      	mov	r3, r0
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d10e      	bne.n	80183d0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80183b2:	6839      	ldr	r1, [r7, #0]
 80183b4:	6878      	ldr	r0, [r7, #4]
 80183b6:	f7fe f845 	bl	8016444 <etharp_input>
      break;
 80183ba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80183bc:	2300      	movs	r3, #0
 80183be:	e00c      	b.n	80183da <ethernet_input+0x10e>
    goto free_and_return;
 80183c0:	bf00      	nop
 80183c2:	e006      	b.n	80183d2 <ethernet_input+0x106>
        goto free_and_return;
 80183c4:	bf00      	nop
 80183c6:	e004      	b.n	80183d2 <ethernet_input+0x106>
        goto free_and_return;
 80183c8:	bf00      	nop
 80183ca:	e002      	b.n	80183d2 <ethernet_input+0x106>
        goto free_and_return;
 80183cc:	bf00      	nop
 80183ce:	e000      	b.n	80183d2 <ethernet_input+0x106>
        goto free_and_return;
 80183d0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80183d2:	6878      	ldr	r0, [r7, #4]
 80183d4:	f7f6 fb4a 	bl	800ea6c <pbuf_free>
  return ERR_OK;
 80183d8:	2300      	movs	r3, #0
}
 80183da:	4618      	mov	r0, r3
 80183dc:	3718      	adds	r7, #24
 80183de:	46bd      	mov	sp, r7
 80183e0:	bd80      	pop	{r7, pc}
 80183e2:	bf00      	nop
 80183e4:	0801f640 	.word	0x0801f640

080183e8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b086      	sub	sp, #24
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	60f8      	str	r0, [r7, #12]
 80183f0:	60b9      	str	r1, [r7, #8]
 80183f2:	607a      	str	r2, [r7, #4]
 80183f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80183f6:	8c3b      	ldrh	r3, [r7, #32]
 80183f8:	4618      	mov	r0, r3
 80183fa:	f7f4 ff21 	bl	800d240 <lwip_htons>
 80183fe:	4603      	mov	r3, r0
 8018400:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018402:	210e      	movs	r1, #14
 8018404:	68b8      	ldr	r0, [r7, #8]
 8018406:	f7f6 fa69 	bl	800e8dc <pbuf_add_header>
 801840a:	4603      	mov	r3, r0
 801840c:	2b00      	cmp	r3, #0
 801840e:	d125      	bne.n	801845c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018410:	68bb      	ldr	r3, [r7, #8]
 8018412:	685b      	ldr	r3, [r3, #4]
 8018414:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018416:	693b      	ldr	r3, [r7, #16]
 8018418:	8afa      	ldrh	r2, [r7, #22]
 801841a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801841c:	693b      	ldr	r3, [r7, #16]
 801841e:	2206      	movs	r2, #6
 8018420:	6839      	ldr	r1, [r7, #0]
 8018422:	4618      	mov	r0, r3
 8018424:	f002 f8c2 	bl	801a5ac <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018428:	693b      	ldr	r3, [r7, #16]
 801842a:	3306      	adds	r3, #6
 801842c:	2206      	movs	r2, #6
 801842e:	6879      	ldr	r1, [r7, #4]
 8018430:	4618      	mov	r0, r3
 8018432:	f002 f8bb 	bl	801a5ac <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801843c:	2b06      	cmp	r3, #6
 801843e:	d006      	beq.n	801844e <ethernet_output+0x66>
 8018440:	4b0a      	ldr	r3, [pc, #40]	; (801846c <ethernet_output+0x84>)
 8018442:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018446:	490a      	ldr	r1, [pc, #40]	; (8018470 <ethernet_output+0x88>)
 8018448:	480a      	ldr	r0, [pc, #40]	; (8018474 <ethernet_output+0x8c>)
 801844a:	f002 fc77 	bl	801ad3c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801844e:	68fb      	ldr	r3, [r7, #12]
 8018450:	699b      	ldr	r3, [r3, #24]
 8018452:	68b9      	ldr	r1, [r7, #8]
 8018454:	68f8      	ldr	r0, [r7, #12]
 8018456:	4798      	blx	r3
 8018458:	4603      	mov	r3, r0
 801845a:	e002      	b.n	8018462 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801845c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801845e:	f06f 0301 	mvn.w	r3, #1
}
 8018462:	4618      	mov	r0, r3
 8018464:	3718      	adds	r7, #24
 8018466:	46bd      	mov	sp, r7
 8018468:	bd80      	pop	{r7, pc}
 801846a:	bf00      	nop
 801846c:	0801f238 	.word	0x0801f238
 8018470:	0801f270 	.word	0x0801f270
 8018474:	0801f2a4 	.word	0x0801f2a4

08018478 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b082      	sub	sp, #8
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
 8018480:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018482:	683b      	ldr	r3, [r7, #0]
 8018484:	2200      	movs	r2, #0
 8018486:	2104      	movs	r1, #4
 8018488:	4618      	mov	r0, r3
 801848a:	f7ed fb2b 	bl	8005ae4 <osMessageQueueNew>
 801848e:	4602      	mov	r2, r0
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d102      	bne.n	80184a2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801849c:	f04f 33ff 	mov.w	r3, #4294967295
 80184a0:	e000      	b.n	80184a4 <sys_mbox_new+0x2c>

  return ERR_OK;
 80184a2:	2300      	movs	r3, #0
}
 80184a4:	4618      	mov	r0, r3
 80184a6:	3708      	adds	r7, #8
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd80      	pop	{r7, pc}

080184ac <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80184ac:	b580      	push	{r7, lr}
 80184ae:	b082      	sub	sp, #8
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	4618      	mov	r0, r3
 80184ba:	f7ed fc45 	bl	8005d48 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	4618      	mov	r0, r3
 80184c4:	f7ed fc60 	bl	8005d88 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80184c8:	bf00      	nop
 80184ca:	3708      	adds	r7, #8
 80184cc:	46bd      	mov	sp, r7
 80184ce:	bd80      	pop	{r7, pc}

080184d0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b084      	sub	sp, #16
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	6078      	str	r0, [r7, #4]
 80184d8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	6818      	ldr	r0, [r3, #0]
 80184de:	4639      	mov	r1, r7
 80184e0:	2300      	movs	r3, #0
 80184e2:	2200      	movs	r2, #0
 80184e4:	f7ed fb72 	bl	8005bcc <osMessageQueuePut>
 80184e8:	4603      	mov	r3, r0
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d102      	bne.n	80184f4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80184ee:	2300      	movs	r3, #0
 80184f0:	73fb      	strb	r3, [r7, #15]
 80184f2:	e001      	b.n	80184f8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80184f4:	23ff      	movs	r3, #255	; 0xff
 80184f6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80184f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80184fc:	4618      	mov	r0, r3
 80184fe:	3710      	adds	r7, #16
 8018500:	46bd      	mov	sp, r7
 8018502:	bd80      	pop	{r7, pc}

08018504 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b086      	sub	sp, #24
 8018508:	af00      	add	r7, sp, #0
 801850a:	60f8      	str	r0, [r7, #12]
 801850c:	60b9      	str	r1, [r7, #8]
 801850e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018510:	f7ec ffd4 	bl	80054bc <osKernelGetTickCount>
 8018514:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d013      	beq.n	8018544 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	6818      	ldr	r0, [r3, #0]
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	2200      	movs	r2, #0
 8018524:	68b9      	ldr	r1, [r7, #8]
 8018526:	f7ed fbb1 	bl	8005c8c <osMessageQueueGet>
 801852a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801852c:	693b      	ldr	r3, [r7, #16]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d105      	bne.n	801853e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018532:	f7ec ffc3 	bl	80054bc <osKernelGetTickCount>
 8018536:	4602      	mov	r2, r0
 8018538:	697b      	ldr	r3, [r7, #20]
 801853a:	1ad3      	subs	r3, r2, r3
 801853c:	e00f      	b.n	801855e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801853e:	f04f 33ff 	mov.w	r3, #4294967295
 8018542:	e00c      	b.n	801855e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	6818      	ldr	r0, [r3, #0]
 8018548:	f04f 33ff 	mov.w	r3, #4294967295
 801854c:	2200      	movs	r2, #0
 801854e:	68b9      	ldr	r1, [r7, #8]
 8018550:	f7ed fb9c 	bl	8005c8c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018554:	f7ec ffb2 	bl	80054bc <osKernelGetTickCount>
 8018558:	4602      	mov	r2, r0
 801855a:	697b      	ldr	r3, [r7, #20]
 801855c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801855e:	4618      	mov	r0, r3
 8018560:	3718      	adds	r7, #24
 8018562:	46bd      	mov	sp, r7
 8018564:	bd80      	pop	{r7, pc}

08018566 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018566:	b580      	push	{r7, lr}
 8018568:	b082      	sub	sp, #8
 801856a:	af00      	add	r7, sp, #0
 801856c:	6078      	str	r0, [r7, #4]
 801856e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	6818      	ldr	r0, [r3, #0]
 8018574:	2300      	movs	r3, #0
 8018576:	2200      	movs	r2, #0
 8018578:	6839      	ldr	r1, [r7, #0]
 801857a:	f7ed fb87 	bl	8005c8c <osMessageQueueGet>
 801857e:	4603      	mov	r3, r0
 8018580:	2b00      	cmp	r3, #0
 8018582:	d101      	bne.n	8018588 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018584:	2300      	movs	r3, #0
 8018586:	e001      	b.n	801858c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018588:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801858c:	4618      	mov	r0, r3
 801858e:	3708      	adds	r7, #8
 8018590:	46bd      	mov	sp, r7
 8018592:	bd80      	pop	{r7, pc}

08018594 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018594:	b480      	push	{r7}
 8018596:	b083      	sub	sp, #12
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d101      	bne.n	80185a8 <sys_mbox_valid+0x14>
    return 0;
 80185a4:	2300      	movs	r3, #0
 80185a6:	e000      	b.n	80185aa <sys_mbox_valid+0x16>
  else
    return 1;
 80185a8:	2301      	movs	r3, #1
}
 80185aa:	4618      	mov	r0, r3
 80185ac:	370c      	adds	r7, #12
 80185ae:	46bd      	mov	sp, r7
 80185b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b4:	4770      	bx	lr

080185b6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80185b6:	b480      	push	{r7}
 80185b8:	b083      	sub	sp, #12
 80185ba:	af00      	add	r7, sp, #0
 80185bc:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	2200      	movs	r2, #0
 80185c2:	601a      	str	r2, [r3, #0]
}
 80185c4:	bf00      	nop
 80185c6:	370c      	adds	r7, #12
 80185c8:	46bd      	mov	sp, r7
 80185ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ce:	4770      	bx	lr

080185d0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b082      	sub	sp, #8
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	6078      	str	r0, [r7, #4]
 80185d8:	460b      	mov	r3, r1
 80185da:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80185dc:	78fb      	ldrb	r3, [r7, #3]
 80185de:	2200      	movs	r2, #0
 80185e0:	4619      	mov	r1, r3
 80185e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80185e6:	f7ed f93a 	bl	800585e <osSemaphoreNew>
 80185ea:	4602      	mov	r2, r0
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d102      	bne.n	80185fe <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80185f8:	f04f 33ff 	mov.w	r3, #4294967295
 80185fc:	e009      	b.n	8018612 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80185fe:	78fb      	ldrb	r3, [r7, #3]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d105      	bne.n	8018610 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	2100      	movs	r1, #0
 801860a:	4618      	mov	r0, r3
 801860c:	f7ed f9b0 	bl	8005970 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018610:	2300      	movs	r3, #0
}
 8018612:	4618      	mov	r0, r3
 8018614:	3708      	adds	r7, #8
 8018616:	46bd      	mov	sp, r7
 8018618:	bd80      	pop	{r7, pc}

0801861a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801861a:	b580      	push	{r7, lr}
 801861c:	b084      	sub	sp, #16
 801861e:	af00      	add	r7, sp, #0
 8018620:	6078      	str	r0, [r7, #4]
 8018622:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8018624:	f7ec ff4a 	bl	80054bc <osKernelGetTickCount>
 8018628:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801862a:	683b      	ldr	r3, [r7, #0]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d011      	beq.n	8018654 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	6839      	ldr	r1, [r7, #0]
 8018636:	4618      	mov	r0, r3
 8018638:	f7ed f99a 	bl	8005970 <osSemaphoreAcquire>
 801863c:	4603      	mov	r3, r0
 801863e:	2b00      	cmp	r3, #0
 8018640:	d105      	bne.n	801864e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8018642:	f7ec ff3b 	bl	80054bc <osKernelGetTickCount>
 8018646:	4602      	mov	r2, r0
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	1ad3      	subs	r3, r2, r3
 801864c:	e012      	b.n	8018674 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801864e:	f04f 33ff 	mov.w	r3, #4294967295
 8018652:	e00f      	b.n	8018674 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8018654:	bf00      	nop
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	f04f 31ff 	mov.w	r1, #4294967295
 801865e:	4618      	mov	r0, r3
 8018660:	f7ed f986 	bl	8005970 <osSemaphoreAcquire>
 8018664:	4603      	mov	r3, r0
 8018666:	2b00      	cmp	r3, #0
 8018668:	d1f5      	bne.n	8018656 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801866a:	f7ec ff27 	bl	80054bc <osKernelGetTickCount>
 801866e:	4602      	mov	r2, r0
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018674:	4618      	mov	r0, r3
 8018676:	3710      	adds	r7, #16
 8018678:	46bd      	mov	sp, r7
 801867a:	bd80      	pop	{r7, pc}

0801867c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b082      	sub	sp, #8
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	4618      	mov	r0, r3
 801868a:	f7ed f9c3 	bl	8005a14 <osSemaphoreRelease>
}
 801868e:	bf00      	nop
 8018690:	3708      	adds	r7, #8
 8018692:	46bd      	mov	sp, r7
 8018694:	bd80      	pop	{r7, pc}

08018696 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018696:	b580      	push	{r7, lr}
 8018698:	b082      	sub	sp, #8
 801869a:	af00      	add	r7, sp, #0
 801869c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	4618      	mov	r0, r3
 80186a4:	f7ed f9fa 	bl	8005a9c <osSemaphoreDelete>
}
 80186a8:	bf00      	nop
 80186aa:	3708      	adds	r7, #8
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}

080186b0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80186b0:	b480      	push	{r7}
 80186b2:	b083      	sub	sp, #12
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d101      	bne.n	80186c4 <sys_sem_valid+0x14>
    return 0;
 80186c0:	2300      	movs	r3, #0
 80186c2:	e000      	b.n	80186c6 <sys_sem_valid+0x16>
  else
    return 1;
 80186c4:	2301      	movs	r3, #1
}
 80186c6:	4618      	mov	r0, r3
 80186c8:	370c      	adds	r7, #12
 80186ca:	46bd      	mov	sp, r7
 80186cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d0:	4770      	bx	lr

080186d2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 80186d2:	b480      	push	{r7}
 80186d4:	b083      	sub	sp, #12
 80186d6:	af00      	add	r7, sp, #0
 80186d8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	2200      	movs	r2, #0
 80186de:	601a      	str	r2, [r3, #0]
}
 80186e0:	bf00      	nop
 80186e2:	370c      	adds	r7, #12
 80186e4:	46bd      	mov	sp, r7
 80186e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ea:	4770      	bx	lr

080186ec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80186f0:	2000      	movs	r0, #0
 80186f2:	f7ec ffa6 	bl	8005642 <osMutexNew>
 80186f6:	4603      	mov	r3, r0
 80186f8:	4a01      	ldr	r2, [pc, #4]	; (8018700 <sys_init+0x14>)
 80186fa:	6013      	str	r3, [r2, #0]
#endif
}
 80186fc:	bf00      	nop
 80186fe:	bd80      	pop	{r7, pc}
 8018700:	20018580 	.word	0x20018580

08018704 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018704:	b580      	push	{r7, lr}
 8018706:	b082      	sub	sp, #8
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801870c:	2000      	movs	r0, #0
 801870e:	f7ec ff98 	bl	8005642 <osMutexNew>
 8018712:	4602      	mov	r2, r0
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d102      	bne.n	8018726 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018720:	f04f 33ff 	mov.w	r3, #4294967295
 8018724:	e000      	b.n	8018728 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018726:	2300      	movs	r3, #0
}
 8018728:	4618      	mov	r0, r3
 801872a:	3708      	adds	r7, #8
 801872c:	46bd      	mov	sp, r7
 801872e:	bd80      	pop	{r7, pc}

08018730 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018730:	b580      	push	{r7, lr}
 8018732:	b082      	sub	sp, #8
 8018734:	af00      	add	r7, sp, #0
 8018736:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	f04f 31ff 	mov.w	r1, #4294967295
 8018740:	4618      	mov	r0, r3
 8018742:	f7ed f804 	bl	800574e <osMutexAcquire>
#endif
}
 8018746:	bf00      	nop
 8018748:	3708      	adds	r7, #8
 801874a:	46bd      	mov	sp, r7
 801874c:	bd80      	pop	{r7, pc}

0801874e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801874e:	b580      	push	{r7, lr}
 8018750:	b082      	sub	sp, #8
 8018752:	af00      	add	r7, sp, #0
 8018754:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	4618      	mov	r0, r3
 801875c:	f7ed f842 	bl	80057e4 <osMutexRelease>
}
 8018760:	bf00      	nop
 8018762:	3708      	adds	r7, #8
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}

08018768 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018768:	b580      	push	{r7, lr}
 801876a:	b08e      	sub	sp, #56	; 0x38
 801876c:	af00      	add	r7, sp, #0
 801876e:	60f8      	str	r0, [r7, #12]
 8018770:	60b9      	str	r1, [r7, #8]
 8018772:	607a      	str	r2, [r7, #4]
 8018774:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018776:	f107 0314 	add.w	r3, r7, #20
 801877a:	2224      	movs	r2, #36	; 0x24
 801877c:	2100      	movs	r1, #0
 801877e:	4618      	mov	r0, r3
 8018780:	f001 ff3c 	bl	801a5fc <memset>
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	617b      	str	r3, [r7, #20]
 8018788:	683b      	ldr	r3, [r7, #0]
 801878a:	62bb      	str	r3, [r7, #40]	; 0x28
 801878c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801878e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018790:	f107 0314 	add.w	r3, r7, #20
 8018794:	461a      	mov	r2, r3
 8018796:	6879      	ldr	r1, [r7, #4]
 8018798:	68b8      	ldr	r0, [r7, #8]
 801879a:	f7ec fea4 	bl	80054e6 <osThreadNew>
 801879e:	4603      	mov	r3, r0
#endif
}
 80187a0:	4618      	mov	r0, r3
 80187a2:	3738      	adds	r7, #56	; 0x38
 80187a4:	46bd      	mov	sp, r7
 80187a6:	bd80      	pop	{r7, pc}

080187a8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80187ac:	4b04      	ldr	r3, [pc, #16]	; (80187c0 <sys_arch_protect+0x18>)
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	f04f 31ff 	mov.w	r1, #4294967295
 80187b4:	4618      	mov	r0, r3
 80187b6:	f7ec ffca 	bl	800574e <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80187ba:	2301      	movs	r3, #1
}
 80187bc:	4618      	mov	r0, r3
 80187be:	bd80      	pop	{r7, pc}
 80187c0:	20018580 	.word	0x20018580

080187c4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	b082      	sub	sp, #8
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80187cc:	4b04      	ldr	r3, [pc, #16]	; (80187e0 <sys_arch_unprotect+0x1c>)
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	4618      	mov	r0, r3
 80187d2:	f7ed f807 	bl	80057e4 <osMutexRelease>
}
 80187d6:	bf00      	nop
 80187d8:	3708      	adds	r7, #8
 80187da:	46bd      	mov	sp, r7
 80187dc:	bd80      	pop	{r7, pc}
 80187de:	bf00      	nop
 80187e0:	20018580 	.word	0x20018580

080187e4 <afe_app_init>:
AFE ltc2335_1 = {.busy = &adc_busy1,.cnv = &adc_cnv1,.p_driver = &spi1,.pd = &adc_rs1,.softSpan = _111};
AFE ltc2335_2 = {.busy = &adc_busy2,.cnv = &adc_cnv2,.p_driver = &spi2,.pd = &adc_rs2,.softSpan = _111};



void afe_app_init(){
 80187e4:	b580      	push	{r7, lr}
 80187e6:	af00      	add	r7, sp, #0
	afe_init(&ltc2335_1);
 80187e8:	4803      	ldr	r0, [pc, #12]	; (80187f8 <afe_app_init+0x14>)
 80187ea:	f000 fd44 	bl	8019276 <afe_init>
	afe_init(&ltc2335_2);
 80187ee:	4803      	ldr	r0, [pc, #12]	; (80187fc <afe_app_init+0x18>)
 80187f0:	f000 fd41 	bl	8019276 <afe_init>
}
 80187f4:	bf00      	nop
 80187f6:	bd80      	pop	{r7, pc}
 80187f8:	2000001c 	.word	0x2000001c
 80187fc:	20000060 	.word	0x20000060

08018800 <app_init>:

static void ev_read_sensor_task(void *arg);
static void ev_tcp_server_data_task(void* arg);
static void do_send_data(const int sock);

void app_init(void) {
 8018800:	b580      	push	{r7, lr}
 8018802:	b082      	sub	sp, #8
 8018804:	af02      	add	r7, sp, #8
	ev_data_queue_handle = xQueueCreate(1024,sizeof(float));
 8018806:	2200      	movs	r2, #0
 8018808:	2104      	movs	r1, #4
 801880a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801880e:	f7ed fca7 	bl	8006160 <xQueueGenericCreate>
 8018812:	4603      	mov	r3, r0
 8018814:	4a0e      	ldr	r2, [pc, #56]	; (8018850 <app_init+0x50>)
 8018816:	6013      	str	r3, [r2, #0]
	xTaskCreate(ev_read_sensor_task, "read sensor", 1024*2, NULL,
 8018818:	4b0e      	ldr	r3, [pc, #56]	; (8018854 <app_init+0x54>)
 801881a:	9301      	str	r3, [sp, #4]
 801881c:	2338      	movs	r3, #56	; 0x38
 801881e:	9300      	str	r3, [sp, #0]
 8018820:	2300      	movs	r3, #0
 8018822:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018826:	490c      	ldr	r1, [pc, #48]	; (8018858 <app_init+0x58>)
 8018828:	480c      	ldr	r0, [pc, #48]	; (801885c <app_init+0x5c>)
 801882a:	f7ee fd16 	bl	800725a <xTaskCreate>
			configMAX_PRIORITIES, &ev_read_sensor_handle);
	setting_app();
 801882e:	f000 fa57 	bl	8018ce0 <setting_app>
	xTaskCreate(ev_tcp_server_data_task, "tcp server_dt", 1024*2, NULL,
 8018832:	4b0b      	ldr	r3, [pc, #44]	; (8018860 <app_init+0x60>)
 8018834:	9301      	str	r3, [sp, #4]
 8018836:	2337      	movs	r3, #55	; 0x37
 8018838:	9300      	str	r3, [sp, #0]
 801883a:	2300      	movs	r3, #0
 801883c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018840:	4908      	ldr	r1, [pc, #32]	; (8018864 <app_init+0x64>)
 8018842:	4809      	ldr	r0, [pc, #36]	; (8018868 <app_init+0x68>)
 8018844:	f7ee fd09 	bl	800725a <xTaskCreate>
			configMAX_PRIORITIES - 1, &ev_tcp_server_data_handle);
}
 8018848:	bf00      	nop
 801884a:	46bd      	mov	sp, r7
 801884c:	bd80      	pop	{r7, pc}
 801884e:	bf00      	nop
 8018850:	20018584 	.word	0x20018584
 8018854:	2001858c 	.word	0x2001858c
 8018858:	0801f2cc 	.word	0x0801f2cc
 801885c:	080188c5 	.word	0x080188c5
 8018860:	20018588 	.word	0x20018588
 8018864:	0801f2d8 	.word	0x0801f2d8
 8018868:	08018981 	.word	0x08018981

0801886c <do_send_data>:
typedef union{
	uint8_t u8_t[4];
	float fl_t;
}Data_Type_t;

static void do_send_data(const int sock){
 801886c:	b580      	push	{r7, lr}
 801886e:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8018872:	af00      	add	r7, sp, #0
 8018874:	1d3b      	adds	r3, r7, #4
 8018876:	6018      	str	r0, [r3, #0]
	char buff[MAX_BUFF_LENGTH];
	uint16_t length = 0;
 8018878:	2300      	movs	r3, #0
 801887a:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
	Data_Type_t data_sensor;
	int byte_write = 0;
 801887e:	2300      	movs	r3, #0
 8018880:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	sprintf(buff,"Hello guy\r\n");
 8018884:	f107 0310 	add.w	r3, r7, #16
 8018888:	490d      	ldr	r1, [pc, #52]	; (80188c0 <do_send_data+0x54>)
 801888a:	4618      	mov	r0, r3
 801888c:	f002 fb28 	bl	801aee0 <siprintf>
	length = strlen(buff);
 8018890:	f107 0310 	add.w	r3, r7, #16
 8018894:	4618      	mov	r0, r3
 8018896:	f7e7 fc9b 	bl	80001d0 <strlen>
 801889a:	4603      	mov	r3, r0
 801889c:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
//		// Check connect
//		if(byte_write == -1){
//			break;
//		}
//	}
	byte_write = send(sock,(uint8_t*)buff,length,0);
 80188a0:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 80188a4:	f107 0110 	add.w	r1, r7, #16
 80188a8:	1d38      	adds	r0, r7, #4
 80188aa:	2300      	movs	r3, #0
 80188ac:	6800      	ldr	r0, [r0, #0]
 80188ae:	f7f3 fe05 	bl	800c4bc <lwip_send>
 80188b2:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
}
 80188b6:	bf00      	nop
 80188b8:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 80188bc:	46bd      	mov	sp, r7
 80188be:	bd80      	pop	{r7, pc}
 80188c0:	0801f2e8 	.word	0x0801f2e8

080188c4 <ev_read_sensor_task>:

#define NUM_MAX_SEND_QUEUE_FALSE 10
uint32_t tick_us = 0;
static void ev_read_sensor_task(void *arg) {
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b086      	sub	sp, #24
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	6078      	str	r0, [r7, #4]

	  afe_app_init();
 80188cc:	f7ff ff8a 	bl	80187e4 <afe_app_init>
	  HAL_TIM_Base_Start(&htim2);
 80188d0:	4826      	ldr	r0, [pc, #152]	; (801896c <ev_read_sensor_task+0xa8>)
 80188d2:	f7eb fb5d 	bl	8003f90 <HAL_TIM_Base_Start>
	  while(1){
		tick_us = __HAL_TIM_GET_COUNTER(&htim2);
 80188d6:	4b25      	ldr	r3, [pc, #148]	; (801896c <ev_read_sensor_task+0xa8>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188dc:	4a24      	ldr	r2, [pc, #144]	; (8018970 <ev_read_sensor_task+0xac>)
 80188de:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80188e0:	4b22      	ldr	r3, [pc, #136]	; (801896c <ev_read_sensor_task+0xa8>)
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	2200      	movs	r2, #0
 80188e6:	625a      	str	r2, [r3, #36]	; 0x24
		for (uint16_t i = 0; i < 300; i++) {
 80188e8:	2300      	movs	r3, #0
 80188ea:	82fb      	strh	r3, [r7, #22]
 80188ec:	e035      	b.n	801895a <ev_read_sensor_task+0x96>
			static uint8_t channel = 0;
			uint8_t data[4] = { 0 };
 80188ee:	2300      	movs	r3, #0
 80188f0:	613b      	str	r3, [r7, #16]
			uint8_t config = 0;
 80188f2:	2300      	movs	r3, #0
 80188f4:	73fb      	strb	r3, [r7, #15]
			afe_create_config_word(channel, _110, &config);
 80188f6:	4b1f      	ldr	r3, [pc, #124]	; (8018974 <ev_read_sensor_task+0xb0>)
 80188f8:	781b      	ldrb	r3, [r3, #0]
 80188fa:	f107 020f 	add.w	r2, r7, #15
 80188fe:	2106      	movs	r1, #6
 8018900:	4618      	mov	r0, r3
 8018902:	f000 fd3b 	bl	801937c <afe_create_config_word>
			afe_read(&ltc2335_1, config, data);
 8018906:	7bfb      	ldrb	r3, [r7, #15]
 8018908:	f107 0210 	add.w	r2, r7, #16
 801890c:	4619      	mov	r1, r3
 801890e:	481a      	ldr	r0, [pc, #104]	; (8018978 <ev_read_sensor_task+0xb4>)
 8018910:	f000 fd0d 	bl	801932e <afe_read>
			afe_convert(&ltc2335_1, data);
 8018914:	f107 0310 	add.w	r3, r7, #16
 8018918:	4619      	mov	r1, r3
 801891a:	4817      	ldr	r0, [pc, #92]	; (8018978 <ev_read_sensor_task+0xb4>)
 801891c:	f000 fd4b 	bl	80193b6 <afe_convert>
			afe_read(&ltc2335_2, config, data);
 8018920:	7bfb      	ldrb	r3, [r7, #15]
 8018922:	f107 0210 	add.w	r2, r7, #16
 8018926:	4619      	mov	r1, r3
 8018928:	4814      	ldr	r0, [pc, #80]	; (801897c <ev_read_sensor_task+0xb8>)
 801892a:	f000 fd00 	bl	801932e <afe_read>
			afe_convert(&ltc2335_2, data);
 801892e:	f107 0310 	add.w	r3, r7, #16
 8018932:	4619      	mov	r1, r3
 8018934:	4811      	ldr	r0, [pc, #68]	; (801897c <ev_read_sensor_task+0xb8>)
 8018936:	f000 fd3e 	bl	80193b6 <afe_convert>
			channel++;
 801893a:	4b0e      	ldr	r3, [pc, #56]	; (8018974 <ev_read_sensor_task+0xb0>)
 801893c:	781b      	ldrb	r3, [r3, #0]
 801893e:	3301      	adds	r3, #1
 8018940:	b2da      	uxtb	r2, r3
 8018942:	4b0c      	ldr	r3, [pc, #48]	; (8018974 <ev_read_sensor_task+0xb0>)
 8018944:	701a      	strb	r2, [r3, #0]
			if (channel > 2)
 8018946:	4b0b      	ldr	r3, [pc, #44]	; (8018974 <ev_read_sensor_task+0xb0>)
 8018948:	781b      	ldrb	r3, [r3, #0]
 801894a:	2b02      	cmp	r3, #2
 801894c:	d902      	bls.n	8018954 <ev_read_sensor_task+0x90>
				channel = 0;
 801894e:	4b09      	ldr	r3, [pc, #36]	; (8018974 <ev_read_sensor_task+0xb0>)
 8018950:	2200      	movs	r2, #0
 8018952:	701a      	strb	r2, [r3, #0]
		for (uint16_t i = 0; i < 300; i++) {
 8018954:	8afb      	ldrh	r3, [r7, #22]
 8018956:	3301      	adds	r3, #1
 8018958:	82fb      	strh	r3, [r7, #22]
 801895a:	8afb      	ldrh	r3, [r7, #22]
 801895c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018960:	d3c5      	bcc.n	80188ee <ev_read_sensor_task+0x2a>
		}
		vTaskDelay(1);
 8018962:	2001      	movs	r0, #1
 8018964:	f7ee fe46 	bl	80075f4 <vTaskDelay>
		tick_us = __HAL_TIM_GET_COUNTER(&htim2);
 8018968:	e7b5      	b.n	80188d6 <ev_read_sensor_task+0x12>
 801896a:	bf00      	nop
 801896c:	20011b54 	.word	0x20011b54
 8018970:	20011718 	.word	0x20011718
 8018974:	2001171c 	.word	0x2001171c
 8018978:	2000001c 	.word	0x2000001c
 801897c:	20000060 	.word	0x20000060

08018980 <ev_tcp_server_data_task>:
	  }
}


static void ev_tcp_server_data_task(void* arg){
 8018980:	b580      	push	{r7, lr}
 8018982:	b0b8      	sub	sp, #224	; 0xe0
 8018984:	af02      	add	r7, sp, #8
 8018986:	6078      	str	r0, [r7, #4]
    char addr_str[128];
    int addr_family = AF_INET;
 8018988:	2302      	movs	r3, #2
 801898a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int ip_protocol = 0;
 801898e:	2300      	movs	r3, #0
 8018990:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int keepAlive = 1;
 8018994:	2301      	movs	r3, #1
 8018996:	63fb      	str	r3, [r7, #60]	; 0x3c
    int keepIdle = KEEPALIVE_IDLE;
 8018998:	2305      	movs	r3, #5
 801899a:	63bb      	str	r3, [r7, #56]	; 0x38
    int keepInterval = KEEPALIVE_INTERVAL;
 801899c:	2305      	movs	r3, #5
 801899e:	637b      	str	r3, [r7, #52]	; 0x34
    int keepCount = KEEPALIVE_COUNT;
 80189a0:	2301      	movs	r3, #1
 80189a2:	633b      	str	r3, [r7, #48]	; 0x30
    struct sockaddr_storage dest_addr;

    if (addr_family == AF_INET) {
 80189a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80189a8:	2b02      	cmp	r3, #2
 80189aa:	d11a      	bne.n	80189e2 <ev_tcp_server_data_task+0x62>
        struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 80189ac:	f107 0320 	add.w	r3, r7, #32
 80189b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 80189b4:	2000      	movs	r0, #0
 80189b6:	f7f4 fc58 	bl	800d26a <lwip_htonl>
 80189ba:	4602      	mov	r2, r0
 80189bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80189c0:	605a      	str	r2, [r3, #4]
        dest_addr_ip4->sin_family = AF_INET;
 80189c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80189c6:	2202      	movs	r2, #2
 80189c8:	705a      	strb	r2, [r3, #1]
        dest_addr_ip4->sin_port = htons(PORT_DATA);
 80189ca:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80189ce:	f7f4 fc37 	bl	800d240 <lwip_htons>
 80189d2:	4603      	mov	r3, r0
 80189d4:	461a      	mov	r2, r3
 80189d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80189da:	805a      	strh	r2, [r3, #2]
        ip_protocol = IPPROTO_IP;
 80189dc:	2300      	movs	r3, #0
 80189de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 80189e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80189e6:	2101      	movs	r1, #1
 80189e8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80189ec:	f7f3 fe76 	bl	800c6dc <lwip_socket>
 80189f0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if (listen_sock < 0) {
 80189f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	da03      	bge.n	8018a04 <ev_tcp_server_data_task+0x84>
        //printf( "Unable to create socket: errno %d", errno);
        vTaskDelete(NULL);
 80189fc:	2000      	movs	r0, #0
 80189fe:	f7ee fd87 	bl	8007510 <vTaskDelete>
 8018a02:	e083      	b.n	8018b0c <ev_tcp_server_data_task+0x18c>
        return;
    }

    int opt = 1;
 8018a04:	2301      	movs	r3, #1
 8018a06:	61fb      	str	r3, [r7, #28]
    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 8018a08:	f107 031c 	add.w	r3, r7, #28
 8018a0c:	2204      	movs	r2, #4
 8018a0e:	9200      	str	r2, [sp, #0]
 8018a10:	2204      	movs	r2, #4
 8018a12:	f640 71ff 	movw	r1, #4095	; 0xfff
 8018a16:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018a1a:	f7f4 f86d 	bl	800caf8 <lwip_setsockopt>

    int err = bind(listen_sock, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
 8018a1e:	f107 0320 	add.w	r3, r7, #32
 8018a22:	2210      	movs	r2, #16
 8018a24:	4619      	mov	r1, r3
 8018a26:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018a2a:	f7f3 f903 	bl	800bc34 <lwip_bind>
 8018a2e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8018a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	d15c      	bne.n	8018af4 <ev_tcp_server_data_task+0x174>
        //printf( "IPPROTO: %d", addr_family);
        goto CLEAN_UP;
    }
    //printf( "Socket bound, port %d", PORT_SETTING);

    err = listen(listen_sock, 1);
 8018a3a:	2101      	movs	r1, #1
 8018a3c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018a40:	f7f3 f9bc 	bl	800bdbc <lwip_listen>
 8018a44:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8018a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d153      	bne.n	8018af8 <ev_tcp_server_data_task+0x178>
        goto CLEAN_UP;
    }
	for (;;) {
        //printf( "Socket listening");
        struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
        socklen_t addr_len = sizeof(source_addr);
 8018a50:	2310      	movs	r3, #16
 8018a52:	60bb      	str	r3, [r7, #8]
        int sock = accept(listen_sock, (struct sockaddr *)&source_addr, &addr_len);
 8018a54:	f107 0208 	add.w	r2, r7, #8
 8018a58:	f107 030c 	add.w	r3, r7, #12
 8018a5c:	4619      	mov	r1, r3
 8018a5e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018a62:	f7f2 ffc9 	bl	800b9f8 <lwip_accept>
 8018a66:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        if (sock < 0) {
 8018a6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	db44      	blt.n	8018afc <ev_tcp_server_data_task+0x17c>
            //printf( "Unable to accept connection: errno %d", errno);
            break;
        }
        // Set tcp keepalive option
        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 8018a72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018a76:	2204      	movs	r2, #4
 8018a78:	9200      	str	r2, [sp, #0]
 8018a7a:	2208      	movs	r2, #8
 8018a7c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8018a80:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018a84:	f7f4 f838 	bl	800caf8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 8018a88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018a8c:	2204      	movs	r2, #4
 8018a8e:	9200      	str	r2, [sp, #0]
 8018a90:	2203      	movs	r2, #3
 8018a92:	2106      	movs	r1, #6
 8018a94:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018a98:	f7f4 f82e 	bl	800caf8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval, sizeof(int));
 8018a9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018aa0:	2204      	movs	r2, #4
 8018aa2:	9200      	str	r2, [sp, #0]
 8018aa4:	2204      	movs	r2, #4
 8018aa6:	2106      	movs	r1, #6
 8018aa8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018aac:	f7f4 f824 	bl	800caf8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 8018ab0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018ab4:	2204      	movs	r2, #4
 8018ab6:	9200      	str	r2, [sp, #0]
 8018ab8:	2205      	movs	r2, #5
 8018aba:	2106      	movs	r1, #6
 8018abc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018ac0:	f7f4 f81a 	bl	800caf8 <lwip_setsockopt>
        // Convert ip address to string
        if (source_addr.ss_family == PF_INET) {
 8018ac4:	7b7b      	ldrb	r3, [r7, #13]
 8018ac6:	2b02      	cmp	r3, #2
 8018ac8:	d108      	bne.n	8018adc <ev_tcp_server_data_task+0x15c>
            inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr, addr_str, sizeof(addr_str) - 1);
 8018aca:	f107 030c 	add.w	r3, r7, #12
 8018ace:	3304      	adds	r3, #4
 8018ad0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018ad4:	227f      	movs	r2, #127	; 0x7f
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f7fe fd3e 	bl	8017558 <ip4addr_ntoa_r>
        }
        //printf( "Socket accepted ip address: %s", addr_str);
        do_send_data(sock);
 8018adc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018ae0:	f7ff fec4 	bl	801886c <do_send_data>
        close(sock);
 8018ae4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018ae8:	f7f3 f912 	bl	800bd10 <lwip_close>
		vTaskDelay(1);
 8018aec:	2001      	movs	r0, #1
 8018aee:	f7ee fd81 	bl	80075f4 <vTaskDelay>
	for (;;) {
 8018af2:	e7ad      	b.n	8018a50 <ev_tcp_server_data_task+0xd0>
        goto CLEAN_UP;
 8018af4:	bf00      	nop
 8018af6:	e002      	b.n	8018afe <ev_tcp_server_data_task+0x17e>
        goto CLEAN_UP;
 8018af8:	bf00      	nop
 8018afa:	e000      	b.n	8018afe <ev_tcp_server_data_task+0x17e>
            break;
 8018afc:	bf00      	nop
	}
CLEAN_UP:
    close(listen_sock);
 8018afe:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018b02:	f7f3 f905 	bl	800bd10 <lwip_close>
    vTaskDelete(NULL);
 8018b06:	2000      	movs	r0, #0
 8018b08:	f7ee fd02 	bl	8007510 <vTaskDelete>
}
 8018b0c:	37d8      	adds	r7, #216	; 0xd8
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}

08018b12 <app_read_sensor_task>:


void app_read_sensor_task(void *arg){
 8018b12:	b480      	push	{r7}
 8018b14:	b085      	sub	sp, #20
 8018b16:	af00      	add	r7, sp, #0
 8018b18:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef*)arg;
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	60fb      	str	r3, [r7, #12]
	if(htim->Instance == htim2.Instance){

	}

}
 8018b1e:	bf00      	nop
 8018b20:	3714      	adds	r7, #20
 8018b22:	46bd      	mov	sp, r7
 8018b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b28:	4770      	bx	lr
	...

08018b2c <__io_putchar>:

/********************** Exported Function Definitions *************************/

QueueHandle_t shell_queue_send;

uint8_t __io_putchar(uint8_t ch){
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b082      	sub	sp, #8
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	4603      	mov	r3, r0
 8018b34:	71fb      	strb	r3, [r7, #7]
	xQueueSend(shell_queue_send,&ch,(TickType_t)100);
 8018b36:	4b06      	ldr	r3, [pc, #24]	; (8018b50 <__io_putchar+0x24>)
 8018b38:	6818      	ldr	r0, [r3, #0]
 8018b3a:	1df9      	adds	r1, r7, #7
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	2264      	movs	r2, #100	; 0x64
 8018b40:	f7ed fc8c 	bl	800645c <xQueueGenericSend>
	return ch;
 8018b44:	79fb      	ldrb	r3, [r7, #7]
}
 8018b46:	4618      	mov	r0, r3
 8018b48:	3708      	adds	r7, #8
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	bd80      	pop	{r7, pc}
 8018b4e:	bf00      	nop
 8018b50:	20018594 	.word	0x20018594

08018b54 <shell_printf>:
#define default_buff_size 1024
int shell_printf(const char *format, ...){
 8018b54:	b40f      	push	{r0, r1, r2, r3}
 8018b56:	b580      	push	{r7, lr}
 8018b58:	b084      	sub	sp, #16
 8018b5a:	af00      	add	r7, sp, #0
	va_list args;
	char *buff = (char*) malloc(default_buff_size);
 8018b5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8018b60:	f001 fd06 	bl	801a570 <malloc>
 8018b64:	4603      	mov	r3, r0
 8018b66:	60bb      	str	r3, [r7, #8]
	memset(buff, 0, default_buff_size);
 8018b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018b6c:	2100      	movs	r1, #0
 8018b6e:	68b8      	ldr	r0, [r7, #8]
 8018b70:	f001 fd44 	bl	801a5fc <memset>
	va_start(args, format);
 8018b74:	f107 031c 	add.w	r3, r7, #28
 8018b78:	603b      	str	r3, [r7, #0]
	vsprintf(buff, format, args);
 8018b7a:	683a      	ldr	r2, [r7, #0]
 8018b7c:	69b9      	ldr	r1, [r7, #24]
 8018b7e:	68b8      	ldr	r0, [r7, #8]
 8018b80:	f002 fab6 	bl	801b0f0 <vsiprintf>

	int len = strlen(buff);
 8018b84:	68b8      	ldr	r0, [r7, #8]
 8018b86:	f7e7 fb23 	bl	80001d0 <strlen>
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	607b      	str	r3, [r7, #4]

	for(uint16_t i = 0;i<len;i++)
 8018b8e:	2300      	movs	r3, #0
 8018b90:	81fb      	strh	r3, [r7, #14]
 8018b92:	e009      	b.n	8018ba8 <shell_printf+0x54>
		__io_putchar(buff[i]);
 8018b94:	89fb      	ldrh	r3, [r7, #14]
 8018b96:	68ba      	ldr	r2, [r7, #8]
 8018b98:	4413      	add	r3, r2
 8018b9a:	781b      	ldrb	r3, [r3, #0]
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	f7ff ffc5 	bl	8018b2c <__io_putchar>
	for(uint16_t i = 0;i<len;i++)
 8018ba2:	89fb      	ldrh	r3, [r7, #14]
 8018ba4:	3301      	adds	r3, #1
 8018ba6:	81fb      	strh	r3, [r7, #14]
 8018ba8:	89fb      	ldrh	r3, [r7, #14]
 8018baa:	687a      	ldr	r2, [r7, #4]
 8018bac:	429a      	cmp	r2, r3
 8018bae:	dcf1      	bgt.n	8018b94 <shell_printf+0x40>
	free(buff);
 8018bb0:	68b8      	ldr	r0, [r7, #8]
 8018bb2:	f001 fce5 	bl	801a580 <free>
	return len;
 8018bb6:	687b      	ldr	r3, [r7, #4]
}
 8018bb8:	4618      	mov	r0, r3
 8018bba:	3710      	adds	r7, #16
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018bc2:	b004      	add	sp, #16
 8018bc4:	4770      	bx	lr

08018bc6 <user_put_char>:
int user_put_char(uint8_t *buf, uint32_t len) {
 8018bc6:	b580      	push	{r7, lr}
 8018bc8:	b082      	sub	sp, #8
 8018bca:	af00      	add	r7, sp, #0
 8018bcc:	6078      	str	r0, [r7, #4]
 8018bce:	6039      	str	r1, [r7, #0]
	return __io_putchar(*buf);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	781b      	ldrb	r3, [r3, #0]
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	f7ff ffa9 	bl	8018b2c <__io_putchar>
 8018bda:	4603      	mov	r3, r0
}
 8018bdc:	4618      	mov	r0, r3
 8018bde:	3708      	adds	r7, #8
 8018be0:	46bd      	mov	sp, r7
 8018be2:	bd80      	pop	{r7, pc}

08018be4 <user_get_char>:

int user_get_char(uint8_t *buf, uint32_t len) {
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b084      	sub	sp, #16
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
 8018bec:	6039      	str	r1, [r7, #0]
	uint8_t ch = __io_getchar();
 8018bee:	f000 fd2b 	bl	8019648 <__io_getchar>
 8018bf2:	4603      	mov	r3, r0
 8018bf4:	73fb      	strb	r3, [r7, #15]
	*buf = ch;
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	7bfa      	ldrb	r2, [r7, #15]
 8018bfa:	701a      	strb	r2, [r3, #0]
	return ch;
 8018bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8018bfe:	4618      	mov	r0, r3
 8018c00:	3710      	adds	r7, #16
 8018c02:	46bd      	mov	sp, r7
 8018c04:	bd80      	pop	{r7, pc}
	...

08018c08 <cli_app_start>:

void cli_app_start(void) {
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b084      	sub	sp, #16
 8018c0c:	af02      	add	r7, sp, #8
	retarget_init();
 8018c0e:	f000 fce7 	bl	80195e0 <retarget_init>
	shell_queue_send = xQueueCreate(1024,sizeof(uint8_t));
 8018c12:	2200      	movs	r2, #0
 8018c14:	2101      	movs	r1, #1
 8018c16:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8018c1a:	f7ed faa1 	bl	8006160 <xQueueGenericCreate>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	4a11      	ldr	r2, [pc, #68]	; (8018c68 <cli_app_start+0x60>)
 8018c22:	6013      	str	r3, [r2, #0]
	if(shell_queue_send == NULL) return;
 8018c24:	4b10      	ldr	r3, [pc, #64]	; (8018c68 <cli_app_start+0x60>)
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d018      	beq.n	8018c5e <cli_app_start+0x56>

	SHELL_Init(&user_context, user_put_char, user_get_char, shell_printf, ">");
 8018c2c:	4b0f      	ldr	r3, [pc, #60]	; (8018c6c <cli_app_start+0x64>)
 8018c2e:	9300      	str	r3, [sp, #0]
 8018c30:	4b0f      	ldr	r3, [pc, #60]	; (8018c70 <cli_app_start+0x68>)
 8018c32:	4a10      	ldr	r2, [pc, #64]	; (8018c74 <cli_app_start+0x6c>)
 8018c34:	4910      	ldr	r1, [pc, #64]	; (8018c78 <cli_app_start+0x70>)
 8018c36:	4811      	ldr	r0, [pc, #68]	; (8018c7c <cli_app_start+0x74>)
 8018c38:	f000 fd60 	bl	80196fc <SHELL_Init>

	/* Register CLI commands */
	for (int i = 0;
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	607b      	str	r3, [r7, #4]
 8018c40:	e009      	b.n	8018c56 <cli_app_start+0x4e>
			i < sizeof(cli_command_table) / sizeof(shell_command_context_t);
			i++) {
		SHELL_RegisterCommand(&cli_command_table[i]);
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	011b      	lsls	r3, r3, #4
 8018c46:	4a0e      	ldr	r2, [pc, #56]	; (8018c80 <cli_app_start+0x78>)
 8018c48:	4413      	add	r3, r2
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f001 fb08 	bl	801a260 <SHELL_RegisterCommand>
			i++) {
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	3301      	adds	r3, #1
 8018c54:	607b      	str	r3, [r7, #4]
	for (int i = 0;
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d0f2      	beq.n	8018c42 <cli_app_start+0x3a>
 8018c5c:	e000      	b.n	8018c60 <cli_app_start+0x58>
	if(shell_queue_send == NULL) return;
 8018c5e:	bf00      	nop
	}
}
 8018c60:	3708      	adds	r7, #8
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}
 8018c66:	bf00      	nop
 8018c68:	20018594 	.word	0x20018594
 8018c6c:	0801f314 	.word	0x0801f314
 8018c70:	08018b55 	.word	0x08018b55
 8018c74:	08018be5 	.word	0x08018be5
 8018c78:	08018bc7 	.word	0x08018bc7
 8018c7c:	20011720 	.word	0x20011720
 8018c80:	0801f650 	.word	0x0801f650

08018c84 <cli_app_main_loop>:

void cli_app_main_loop(void *pvParameters) {
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b082      	sub	sp, #8
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
	SHELL_Process(&user_context);
 8018c8c:	4803      	ldr	r0, [pc, #12]	; (8018c9c <cli_app_main_loop+0x18>)
 8018c8e:	f000 fd87 	bl	80197a0 <SHELL_Process>
}
 8018c92:	bf00      	nop
 8018c94:	3708      	adds	r7, #8
 8018c96:	46bd      	mov	sp, r7
 8018c98:	bd80      	pop	{r7, pc}
 8018c9a:	bf00      	nop
 8018c9c:	20011720 	.word	0x20011720

08018ca0 <cli_app_on_data_received>:

void cli_app_on_data_received(uint8_t ch) {
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b082      	sub	sp, #8
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	71fb      	strb	r3, [r7, #7]
	on_uart_data_received(ch);
 8018caa:	79fb      	ldrb	r3, [r7, #7]
 8018cac:	4618      	mov	r0, r3
 8018cae:	f000 fcdd 	bl	801966c <on_uart_data_received>
}
 8018cb2:	bf00      	nop
 8018cb4:	3708      	adds	r7, #8
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}

08018cba <cli_reset_system>:

/********************** Internal Function Definitions *************************/

/* Reset System */
static int32_t cli_reset_system(p_shell_context_t context, int32_t argc,
		char **argv) {
 8018cba:	b480      	push	{r7}
 8018cbc:	b085      	sub	sp, #20
 8018cbe:	af00      	add	r7, sp, #0
 8018cc0:	60f8      	str	r0, [r7, #12]
 8018cc2:	60b9      	str	r1, [r7, #8]
 8018cc4:	607a      	str	r2, [r7, #4]
	if (argc < 1) {
 8018cc6:	68bb      	ldr	r3, [r7, #8]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	dc02      	bgt.n	8018cd2 <cli_reset_system+0x18>
		//printf("Missing parameter\r\n");
		return -1;
 8018ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8018cd0:	e000      	b.n	8018cd4 <cli_reset_system+0x1a>
	}
	//printf("sys reset\r\n");
	return 0;
 8018cd2:	2300      	movs	r3, #0
}
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	3714      	adds	r7, #20
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cde:	4770      	bx	lr

08018ce0 <setting_app>:

static void ev_tcp_server_config_task(void *arg);
static void do_retransmit(const int sock);
static void transmit_data(void* arg);
static void send_tcp(const int sock,char* buff,uint16_t len);
void setting_app(){
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b082      	sub	sp, #8
 8018ce4:	af02      	add	r7, sp, #8

	tranmiter_semphr = xSemaphoreCreateMutex();
 8018ce6:	2001      	movs	r0, #1
 8018ce8:	f7ed fab1 	bl	800624e <xQueueCreateMutex>
 8018cec:	4603      	mov	r3, r0
 8018cee:	4a08      	ldr	r2, [pc, #32]	; (8018d10 <setting_app+0x30>)
 8018cf0:	6013      	str	r3, [r2, #0]

	xTaskCreate(ev_tcp_server_config_task, "tcp server_st", 1024, NULL,
 8018cf2:	4b08      	ldr	r3, [pc, #32]	; (8018d14 <setting_app+0x34>)
 8018cf4:	9301      	str	r3, [sp, #4]
 8018cf6:	2337      	movs	r3, #55	; 0x37
 8018cf8:	9300      	str	r3, [sp, #0]
 8018cfa:	2300      	movs	r3, #0
 8018cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018d00:	4905      	ldr	r1, [pc, #20]	; (8018d18 <setting_app+0x38>)
 8018d02:	4806      	ldr	r0, [pc, #24]	; (8018d1c <setting_app+0x3c>)
 8018d04:	f7ee faa9 	bl	800725a <xTaskCreate>
			configMAX_PRIORITIES - 1, &ev_tcp_server_setting_handle);
}
 8018d08:	bf00      	nop
 8018d0a:	46bd      	mov	sp, r7
 8018d0c:	bd80      	pop	{r7, pc}
 8018d0e:	bf00      	nop
 8018d10:	20018598 	.word	0x20018598
 8018d14:	2001859c 	.word	0x2001859c
 8018d18:	0801f318 	.word	0x0801f318
 8018d1c:	08018de5 	.word	0x08018de5

08018d20 <do_retransmit>:

static void do_retransmit(const int sock)
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b0a8      	sub	sp, #160	; 0xa0
 8018d24:	af02      	add	r7, sp, #8
 8018d26:	6078      	str	r0, [r7, #4]

    int len;
    char rx_buffer[128];
    int p_sock = sock;
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	60fb      	str	r3, [r7, #12]
    xTaskCreate(transmit_data,"transmit", 1024,(void*)&p_sock,configMAX_PRIORITIES, &tranmiter_handle);
 8018d2c:	f107 030c 	add.w	r3, r7, #12
 8018d30:	4a29      	ldr	r2, [pc, #164]	; (8018dd8 <do_retransmit+0xb8>)
 8018d32:	9201      	str	r2, [sp, #4]
 8018d34:	2238      	movs	r2, #56	; 0x38
 8018d36:	9200      	str	r2, [sp, #0]
 8018d38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018d3c:	4927      	ldr	r1, [pc, #156]	; (8018ddc <do_retransmit+0xbc>)
 8018d3e:	4828      	ldr	r0, [pc, #160]	; (8018de0 <do_retransmit+0xc0>)
 8018d40:	f7ee fa8b 	bl	800725a <xTaskCreate>
    do {
        len = recv(sock, rx_buffer, sizeof(rx_buffer) - 1, 0);
 8018d44:	f107 0110 	add.w	r1, r7, #16
 8018d48:	2300      	movs	r3, #0
 8018d4a:	227f      	movs	r2, #127	; 0x7f
 8018d4c:	6878      	ldr	r0, [r7, #4]
 8018d4e:	f7f3 fb9f 	bl	800c490 <lwip_recv>
 8018d52:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if (len < 0) {
 8018d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	db2f      	blt.n	8018dbe <do_retransmit+0x9e>
            //printf( "Error occurred during receiving: errno %d", errno);
        } else if (len == 0) {
 8018d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d02b      	beq.n	8018dbe <do_retransmit+0x9e>
            //printf( "Connection closed");
        } else {
            rx_buffer[len] = 0; // Null-terminate whatever is received and treat it like a string
 8018d66:	f107 0210 	add.w	r2, r7, #16
 8018d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d6e:	4413      	add	r3, r2
 8018d70:	2200      	movs	r2, #0
 8018d72:	701a      	strb	r2, [r3, #0]
            //printf( "Received %d bytes: %s", len, rx_buffer);
            // send() can return less bytes than supplied length.
            // Walk-around for robust implementation.
            send_tcp(sock, rx_buffer, len);
 8018d74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018d78:	b29a      	uxth	r2, r3
 8018d7a:	f107 0310 	add.w	r3, r7, #16
 8018d7e:	4619      	mov	r1, r3
 8018d80:	6878      	ldr	r0, [r7, #4]
 8018d82:	f000 f92d 	bl	8018fe0 <send_tcp>
            for(uint16_t i =0;i<len;i++){
 8018d86:	2300      	movs	r3, #0
 8018d88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8018d8c:	e011      	b.n	8018db2 <do_retransmit+0x92>
            	cli_app_on_data_received(rx_buffer[i]);
 8018d8e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018d92:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8018d96:	4413      	add	r3, r2
 8018d98:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f7ff ff7f 	bl	8018ca0 <cli_app_on_data_received>
            	cli_app_main_loop(NULL);
 8018da2:	2000      	movs	r0, #0
 8018da4:	f7ff ff6e 	bl	8018c84 <cli_app_main_loop>
            for(uint16_t i =0;i<len;i++){
 8018da8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018dac:	3301      	adds	r3, #1
 8018dae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8018db2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018db6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8018dba:	429a      	cmp	r2, r3
 8018dbc:	dce7      	bgt.n	8018d8e <do_retransmit+0x6e>
            }
        }
    } while (len > 0);
 8018dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	dcbe      	bgt.n	8018d44 <do_retransmit+0x24>
    vTaskDelete(tranmiter_handle);
 8018dc6:	4b04      	ldr	r3, [pc, #16]	; (8018dd8 <do_retransmit+0xb8>)
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	4618      	mov	r0, r3
 8018dcc:	f7ee fba0 	bl	8007510 <vTaskDelete>
}
 8018dd0:	bf00      	nop
 8018dd2:	3798      	adds	r7, #152	; 0x98
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	bd80      	pop	{r7, pc}
 8018dd8:	200185a0 	.word	0x200185a0
 8018ddc:	0801f328 	.word	0x0801f328
 8018de0:	08018f75 	.word	0x08018f75

08018de4 <ev_tcp_server_config_task>:

static void ev_tcp_server_config_task(void *arg) {
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b0b8      	sub	sp, #224	; 0xe0
 8018de8:	af02      	add	r7, sp, #8
 8018dea:	6078      	str	r0, [r7, #4]

	cli_app_start();
 8018dec:	f7ff ff0c 	bl	8018c08 <cli_app_start>
    char addr_str[128];
    int addr_family = (int)AF_INET;
 8018df0:	2302      	movs	r3, #2
 8018df2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    int ip_protocol = 0;
 8018df6:	2300      	movs	r3, #0
 8018df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    int keepAlive = 1;
 8018dfc:	2301      	movs	r3, #1
 8018dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    int keepIdle = KEEPALIVE_IDLE;
 8018e00:	2305      	movs	r3, #5
 8018e02:	63bb      	str	r3, [r7, #56]	; 0x38
    int keepInterval = KEEPALIVE_INTERVAL;
 8018e04:	2305      	movs	r3, #5
 8018e06:	637b      	str	r3, [r7, #52]	; 0x34
    int keepCount = KEEPALIVE_COUNT;
 8018e08:	2301      	movs	r3, #1
 8018e0a:	633b      	str	r3, [r7, #48]	; 0x30
    struct sockaddr_storage dest_addr;

    if (addr_family == AF_INET) {
 8018e0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018e10:	2b02      	cmp	r3, #2
 8018e12:	d11a      	bne.n	8018e4a <ev_tcp_server_config_task+0x66>
        struct sockaddr_in *dest_addr_ip4 = (struct sockaddr_in *)&dest_addr;
 8018e14:	f107 0320 	add.w	r3, r7, #32
 8018e18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        dest_addr_ip4->sin_addr.s_addr = htonl(INADDR_ANY);
 8018e1c:	2000      	movs	r0, #0
 8018e1e:	f7f4 fa24 	bl	800d26a <lwip_htonl>
 8018e22:	4602      	mov	r2, r0
 8018e24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018e28:	605a      	str	r2, [r3, #4]
        dest_addr_ip4->sin_family = AF_INET;
 8018e2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018e2e:	2202      	movs	r2, #2
 8018e30:	705a      	strb	r2, [r3, #1]
        dest_addr_ip4->sin_port = htons(PORT_SETTING);
 8018e32:	f240 40d2 	movw	r0, #1234	; 0x4d2
 8018e36:	f7f4 fa03 	bl	800d240 <lwip_htons>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	461a      	mov	r2, r3
 8018e3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018e42:	805a      	strh	r2, [r3, #2]
        ip_protocol = IPPROTO_IP;
 8018e44:	2300      	movs	r3, #0
 8018e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

    int listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);
 8018e4a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8018e4e:	2101      	movs	r1, #1
 8018e50:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8018e54:	f7f3 fc42 	bl	800c6dc <lwip_socket>
 8018e58:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if (listen_sock < 0) {
 8018e5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	da03      	bge.n	8018e6c <ev_tcp_server_config_task+0x88>
        //printf( "Unable to create socket: errno %d", errno);
        vTaskDelete(NULL);
 8018e64:	2000      	movs	r0, #0
 8018e66:	f7ee fb53 	bl	8007510 <vTaskDelete>
 8018e6a:	e07f      	b.n	8018f6c <ev_tcp_server_config_task+0x188>
        return;
    }

    int opt = 1;
 8018e6c:	2301      	movs	r3, #1
 8018e6e:	61fb      	str	r3, [r7, #28]
    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));
 8018e70:	f107 031c 	add.w	r3, r7, #28
 8018e74:	2204      	movs	r2, #4
 8018e76:	9200      	str	r2, [sp, #0]
 8018e78:	2204      	movs	r2, #4
 8018e7a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8018e7e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018e82:	f7f3 fe39 	bl	800caf8 <lwip_setsockopt>

    int err = bind(listen_sock, (struct sockaddr *)&dest_addr, sizeof(dest_addr));
 8018e86:	f107 0320 	add.w	r3, r7, #32
 8018e8a:	2210      	movs	r2, #16
 8018e8c:	4619      	mov	r1, r3
 8018e8e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018e92:	f7f2 fecf 	bl	800bc34 <lwip_bind>
 8018e96:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8018e9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d158      	bne.n	8018f54 <ev_tcp_server_config_task+0x170>
        //printf( "IPPROTO: %d", addr_family);
        goto CLEAN_UP;
    }
    //printf( "Socket bound, port %d", PORT_SETTING);

    err = listen(listen_sock, 1);
 8018ea2:	2101      	movs	r1, #1
 8018ea4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018ea8:	f7f2 ff88 	bl	800bdbc <lwip_listen>
 8018eac:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
    if (err != 0) {
 8018eb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d14f      	bne.n	8018f58 <ev_tcp_server_config_task+0x174>
        goto CLEAN_UP;
    }
	for (;;) {
        //printf( "Socket listening");
        struct sockaddr_storage source_addr; // Large enough for both IPv4 or IPv6
        socklen_t addr_len = sizeof(source_addr);
 8018eb8:	2310      	movs	r3, #16
 8018eba:	60bb      	str	r3, [r7, #8]
        int sock = accept(listen_sock, (struct sockaddr *)&source_addr, &addr_len);
 8018ebc:	f107 0208 	add.w	r2, r7, #8
 8018ec0:	f107 030c 	add.w	r3, r7, #12
 8018ec4:	4619      	mov	r1, r3
 8018ec6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018eca:	f7f2 fd95 	bl	800b9f8 <lwip_accept>
 8018ece:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
        if (sock < 0) {
 8018ed2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	db40      	blt.n	8018f5c <ev_tcp_server_config_task+0x178>
            //printf( "Unable to accept connection: errno %d", errno);
            break;
        }
        // Set tcp keepalive option
        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &keepAlive, sizeof(int));
 8018eda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018ede:	2204      	movs	r2, #4
 8018ee0:	9200      	str	r2, [sp, #0]
 8018ee2:	2208      	movs	r2, #8
 8018ee4:	f640 71ff 	movw	r1, #4095	; 0xfff
 8018ee8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018eec:	f7f3 fe04 	bl	800caf8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &keepIdle, sizeof(int));
 8018ef0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018ef4:	2204      	movs	r2, #4
 8018ef6:	9200      	str	r2, [sp, #0]
 8018ef8:	2203      	movs	r2, #3
 8018efa:	2106      	movs	r1, #6
 8018efc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018f00:	f7f3 fdfa 	bl	800caf8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &keepInterval, sizeof(int));
 8018f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018f08:	2204      	movs	r2, #4
 8018f0a:	9200      	str	r2, [sp, #0]
 8018f0c:	2204      	movs	r2, #4
 8018f0e:	2106      	movs	r1, #6
 8018f10:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018f14:	f7f3 fdf0 	bl	800caf8 <lwip_setsockopt>
        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &keepCount, sizeof(int));
 8018f18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018f1c:	2204      	movs	r2, #4
 8018f1e:	9200      	str	r2, [sp, #0]
 8018f20:	2205      	movs	r2, #5
 8018f22:	2106      	movs	r1, #6
 8018f24:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018f28:	f7f3 fde6 	bl	800caf8 <lwip_setsockopt>
        // Convert ip address to string
        if (source_addr.ss_family == PF_INET) {
 8018f2c:	7b7b      	ldrb	r3, [r7, #13]
 8018f2e:	2b02      	cmp	r3, #2
 8018f30:	d108      	bne.n	8018f44 <ev_tcp_server_config_task+0x160>
            inet_ntoa_r(((struct sockaddr_in *)&source_addr)->sin_addr, addr_str, sizeof(addr_str) - 1);
 8018f32:	f107 030c 	add.w	r3, r7, #12
 8018f36:	3304      	adds	r3, #4
 8018f38:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018f3c:	227f      	movs	r2, #127	; 0x7f
 8018f3e:	4618      	mov	r0, r3
 8018f40:	f7fe fb0a 	bl	8017558 <ip4addr_ntoa_r>
        }
        //printf( "Socket accepted ip address: %s", addr_str);
        do_retransmit(sock);
 8018f44:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8018f48:	f7ff feea 	bl	8018d20 <do_retransmit>
		vTaskDelay(1);
 8018f4c:	2001      	movs	r0, #1
 8018f4e:	f7ee fb51 	bl	80075f4 <vTaskDelay>
	for (;;) {
 8018f52:	e7b1      	b.n	8018eb8 <ev_tcp_server_config_task+0xd4>
        goto CLEAN_UP;
 8018f54:	bf00      	nop
 8018f56:	e002      	b.n	8018f5e <ev_tcp_server_config_task+0x17a>
        goto CLEAN_UP;
 8018f58:	bf00      	nop
 8018f5a:	e000      	b.n	8018f5e <ev_tcp_server_config_task+0x17a>
            break;
 8018f5c:	bf00      	nop
	}
CLEAN_UP:
    close(listen_sock);
 8018f5e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8018f62:	f7f2 fed5 	bl	800bd10 <lwip_close>
    vTaskDelete(NULL);
 8018f66:	2000      	movs	r0, #0
 8018f68:	f7ee fad2 	bl	8007510 <vTaskDelete>
}
 8018f6c:	37d8      	adds	r7, #216	; 0xd8
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bd80      	pop	{r7, pc}
	...

08018f74 <transmit_data>:
static void transmit_data(void* arg){
 8018f74:	b580      	push	{r7, lr}
 8018f76:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8018f7a:	af00      	add	r7, sp, #0
 8018f7c:	1d3b      	adds	r3, r7, #4
 8018f7e:	6018      	str	r0, [r3, #0]

	int* sock = (int*)arg;
 8018f80:	1d3b      	adds	r3, r7, #4
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	uint8_t buff[1024];
	uint16_t len = 0;
 8018f88:	2300      	movs	r3, #0
 8018f8a:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	for(;;){
		if(xQueueReceive(shell_queue_send,buff+len,(TickType_t)100) == pdPASS){
 8018f8e:	4b13      	ldr	r3, [pc, #76]	; (8018fdc <transmit_data+0x68>)
 8018f90:	6818      	ldr	r0, [r3, #0]
 8018f92:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8018f96:	f107 0208 	add.w	r2, r7, #8
 8018f9a:	4413      	add	r3, r2
 8018f9c:	2264      	movs	r2, #100	; 0x64
 8018f9e:	4619      	mov	r1, r3
 8018fa0:	f7ed fc82 	bl	80068a8 <xQueueReceive>
 8018fa4:	4603      	mov	r3, r0
 8018fa6:	2b01      	cmp	r3, #1
 8018fa8:	d105      	bne.n	8018fb6 <transmit_data+0x42>
			len++;
 8018faa:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8018fae:	3301      	adds	r3, #1
 8018fb0:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 8018fb4:	e7eb      	b.n	8018f8e <transmit_data+0x1a>
		}
		else{
			if(len>0){
 8018fb6:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d0e7      	beq.n	8018f8e <transmit_data+0x1a>
				send_tcp(*sock,(char*)buff,len);
 8018fbe:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8018fc8:	f107 0108 	add.w	r1, r7, #8
 8018fcc:	4618      	mov	r0, r3
 8018fce:	f000 f807 	bl	8018fe0 <send_tcp>
				len = 0;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
		if(xQueueReceive(shell_queue_send,buff+len,(TickType_t)100) == pdPASS){
 8018fd8:	e7d9      	b.n	8018f8e <transmit_data+0x1a>
 8018fda:	bf00      	nop
 8018fdc:	20018594 	.word	0x20018594

08018fe0 <send_tcp>:
			}
		}
	}
}
static void send_tcp(const int sock,char* buff,uint16_t len){
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b084      	sub	sp, #16
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	60f8      	str	r0, [r7, #12]
 8018fe8:	60b9      	str	r1, [r7, #8]
 8018fea:	4613      	mov	r3, r2
 8018fec:	80fb      	strh	r3, [r7, #6]
    xSemaphoreTake(tranmiter_semphr,portMAX_DELAY);
 8018fee:	4b0c      	ldr	r3, [pc, #48]	; (8019020 <send_tcp+0x40>)
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f7ed fd36 	bl	8006a68 <xQueueSemaphoreTake>
    send(sock, buff,len, 0);
 8018ffc:	88fa      	ldrh	r2, [r7, #6]
 8018ffe:	2300      	movs	r3, #0
 8019000:	68b9      	ldr	r1, [r7, #8]
 8019002:	68f8      	ldr	r0, [r7, #12]
 8019004:	f7f3 fa5a 	bl	800c4bc <lwip_send>
    xSemaphoreGive(tranmiter_semphr);
 8019008:	4b05      	ldr	r3, [pc, #20]	; (8019020 <send_tcp+0x40>)
 801900a:	6818      	ldr	r0, [r3, #0]
 801900c:	2300      	movs	r3, #0
 801900e:	2200      	movs	r2, #0
 8019010:	2100      	movs	r1, #0
 8019012:	f7ed fa23 	bl	800645c <xQueueGenericSend>
}
 8019016:	bf00      	nop
 8019018:	3710      	adds	r7, #16
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}
 801901e:	bf00      	nop
 8019020:	20018598 	.word	0x20018598

08019024 <board_init>:
BSP_GPIO mux_a[4];
BSP_GPIO mux_b[4];

extern SPI_HandleTypeDef hspi1;

void board_init(){
 8019024:	b580      	push	{r7, lr}
 8019026:	b082      	sub	sp, #8
 8019028:	af00      	add	r7, sp, #0
	gpio_init(&spi1_cs);
 801902a:	4839      	ldr	r0, [pc, #228]	; (8019110 <board_init+0xec>)
 801902c:	f000 f8a6 	bl	801917c <gpio_init>
	gpio_init(&spi2_cs);
 8019030:	4838      	ldr	r0, [pc, #224]	; (8019114 <board_init+0xf0>)
 8019032:	f000 f8a3 	bl	801917c <gpio_init>
	gpio_init(&adc_rs1);
 8019036:	4838      	ldr	r0, [pc, #224]	; (8019118 <board_init+0xf4>)
 8019038:	f000 f8a0 	bl	801917c <gpio_init>
	gpio_init(&adc_busy1);
 801903c:	4837      	ldr	r0, [pc, #220]	; (801911c <board_init+0xf8>)
 801903e:	f000 f89d 	bl	801917c <gpio_init>
	gpio_init(&adc_cnv1);
 8019042:	4837      	ldr	r0, [pc, #220]	; (8019120 <board_init+0xfc>)
 8019044:	f000 f89a 	bl	801917c <gpio_init>
	gpio_init(&adc_rs2);
 8019048:	4836      	ldr	r0, [pc, #216]	; (8019124 <board_init+0x100>)
 801904a:	f000 f897 	bl	801917c <gpio_init>
	gpio_init(&adc_busy2);
 801904e:	4836      	ldr	r0, [pc, #216]	; (8019128 <board_init+0x104>)
 8019050:	f000 f894 	bl	801917c <gpio_init>
	gpio_init(&adc_cnv2);
 8019054:	4835      	ldr	r0, [pc, #212]	; (801912c <board_init+0x108>)
 8019056:	f000 f891 	bl	801917c <gpio_init>
	spi_init(&spi1, &hspi1,&spi1_cs);
 801905a:	4a2d      	ldr	r2, [pc, #180]	; (8019110 <board_init+0xec>)
 801905c:	4934      	ldr	r1, [pc, #208]	; (8019130 <board_init+0x10c>)
 801905e:	4835      	ldr	r0, [pc, #212]	; (8019134 <board_init+0x110>)
 8019060:	f000 f8bd 	bl	80191de <spi_init>
	spi_init(&spi2, &hspi1,&spi2_cs);
 8019064:	4a2b      	ldr	r2, [pc, #172]	; (8019114 <board_init+0xf0>)
 8019066:	4932      	ldr	r1, [pc, #200]	; (8019130 <board_init+0x10c>)
 8019068:	4833      	ldr	r0, [pc, #204]	; (8019138 <board_init+0x114>)
 801906a:	f000 f8b8 	bl	80191de <spi_init>

	mux_a[0].p_driver = MUX_A1_GPIO_Port;
 801906e:	4b33      	ldr	r3, [pc, #204]	; (801913c <board_init+0x118>)
 8019070:	4a33      	ldr	r2, [pc, #204]	; (8019140 <board_init+0x11c>)
 8019072:	601a      	str	r2, [r3, #0]
	mux_a[0].pin = MUX_A1_Pin;
 8019074:	4b31      	ldr	r3, [pc, #196]	; (801913c <board_init+0x118>)
 8019076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801907a:	809a      	strh	r2, [r3, #4]

	mux_a[1].p_driver = MUX_A2_GPIO_Port;
 801907c:	4b2f      	ldr	r3, [pc, #188]	; (801913c <board_init+0x118>)
 801907e:	4a30      	ldr	r2, [pc, #192]	; (8019140 <board_init+0x11c>)
 8019080:	609a      	str	r2, [r3, #8]
	mux_a[1].pin = MUX_A2_Pin;
 8019082:	4b2e      	ldr	r3, [pc, #184]	; (801913c <board_init+0x118>)
 8019084:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019088:	819a      	strh	r2, [r3, #12]

	mux_a[2].p_driver = MUX_A3_GPIO_Port;
 801908a:	4b2c      	ldr	r3, [pc, #176]	; (801913c <board_init+0x118>)
 801908c:	4a2d      	ldr	r2, [pc, #180]	; (8019144 <board_init+0x120>)
 801908e:	611a      	str	r2, [r3, #16]
	mux_a[2].pin = MUX_A3_Pin;
 8019090:	4b2a      	ldr	r3, [pc, #168]	; (801913c <board_init+0x118>)
 8019092:	2202      	movs	r2, #2
 8019094:	829a      	strh	r2, [r3, #20]

	mux_a[3].p_driver = MUX_A4_GPIO_Port;
 8019096:	4b29      	ldr	r3, [pc, #164]	; (801913c <board_init+0x118>)
 8019098:	4a2b      	ldr	r2, [pc, #172]	; (8019148 <board_init+0x124>)
 801909a:	619a      	str	r2, [r3, #24]
	mux_a[3].pin = MUX_A4_Pin;
 801909c:	4b27      	ldr	r3, [pc, #156]	; (801913c <board_init+0x118>)
 801909e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80190a2:	839a      	strh	r2, [r3, #28]

	mux_b[0].p_driver = MUX_B1_GPIO_Port;
 80190a4:	4b29      	ldr	r3, [pc, #164]	; (801914c <board_init+0x128>)
 80190a6:	4a26      	ldr	r2, [pc, #152]	; (8019140 <board_init+0x11c>)
 80190a8:	601a      	str	r2, [r3, #0]
	mux_b[0].pin = MUX_B1_Pin;
 80190aa:	4b28      	ldr	r3, [pc, #160]	; (801914c <board_init+0x128>)
 80190ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80190b0:	809a      	strh	r2, [r3, #4]

	mux_b[1].p_driver = MUX_B2_GPIO_Port;
 80190b2:	4b26      	ldr	r3, [pc, #152]	; (801914c <board_init+0x128>)
 80190b4:	4a23      	ldr	r2, [pc, #140]	; (8019144 <board_init+0x120>)
 80190b6:	609a      	str	r2, [r3, #8]
	mux_b[1].pin = MUX_B2_Pin;
 80190b8:	4b24      	ldr	r3, [pc, #144]	; (801914c <board_init+0x128>)
 80190ba:	2201      	movs	r2, #1
 80190bc:	819a      	strh	r2, [r3, #12]

	mux_b[2].p_driver = MUX_B3_GPIO_Port;
 80190be:	4b23      	ldr	r3, [pc, #140]	; (801914c <board_init+0x128>)
 80190c0:	4a21      	ldr	r2, [pc, #132]	; (8019148 <board_init+0x124>)
 80190c2:	611a      	str	r2, [r3, #16]
	mux_b[2].pin = MUX_B3_Pin;
 80190c4:	4b21      	ldr	r3, [pc, #132]	; (801914c <board_init+0x128>)
 80190c6:	2280      	movs	r2, #128	; 0x80
 80190c8:	829a      	strh	r2, [r3, #20]

	mux_b[3].p_driver = MUX_B4_GPIO_Port;
 80190ca:	4b20      	ldr	r3, [pc, #128]	; (801914c <board_init+0x128>)
 80190cc:	4a1e      	ldr	r2, [pc, #120]	; (8019148 <board_init+0x124>)
 80190ce:	619a      	str	r2, [r3, #24]
	mux_b[3].pin = MUX_B4_Pin;
 80190d0:	4b1e      	ldr	r3, [pc, #120]	; (801914c <board_init+0x128>)
 80190d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80190d6:	839a      	strh	r2, [r3, #28]

	for(uint16_t i = 0;i<4;i++){
 80190d8:	2300      	movs	r3, #0
 80190da:	80fb      	strh	r3, [r7, #6]
 80190dc:	e010      	b.n	8019100 <board_init+0xdc>
		gpio_init(&mux_a[i]);
 80190de:	88fb      	ldrh	r3, [r7, #6]
 80190e0:	00db      	lsls	r3, r3, #3
 80190e2:	4a16      	ldr	r2, [pc, #88]	; (801913c <board_init+0x118>)
 80190e4:	4413      	add	r3, r2
 80190e6:	4618      	mov	r0, r3
 80190e8:	f000 f848 	bl	801917c <gpio_init>
		gpio_init(&mux_b[i]);
 80190ec:	88fb      	ldrh	r3, [r7, #6]
 80190ee:	00db      	lsls	r3, r3, #3
 80190f0:	4a16      	ldr	r2, [pc, #88]	; (801914c <board_init+0x128>)
 80190f2:	4413      	add	r3, r2
 80190f4:	4618      	mov	r0, r3
 80190f6:	f000 f841 	bl	801917c <gpio_init>
	for(uint16_t i = 0;i<4;i++){
 80190fa:	88fb      	ldrh	r3, [r7, #6]
 80190fc:	3301      	adds	r3, #1
 80190fe:	80fb      	strh	r3, [r7, #6]
 8019100:	88fb      	ldrh	r3, [r7, #6]
 8019102:	2b03      	cmp	r3, #3
 8019104:	d9eb      	bls.n	80190de <board_init+0xba>
	}
}
 8019106:	bf00      	nop
 8019108:	bf00      	nop
 801910a:	3708      	adds	r7, #8
 801910c:	46bd      	mov	sp, r7
 801910e:	bd80      	pop	{r7, pc}
 8019110:	200000a4 	.word	0x200000a4
 8019114:	200000ac 	.word	0x200000ac
 8019118:	200000b4 	.word	0x200000b4
 801911c:	200000bc 	.word	0x200000bc
 8019120:	200000c4 	.word	0x200000c4
 8019124:	200000cc 	.word	0x200000cc
 8019128:	200000d4 	.word	0x200000d4
 801912c:	200000dc 	.word	0x200000dc
 8019130:	20011afc 	.word	0x20011afc
 8019134:	200185ec 	.word	0x200185ec
 8019138:	200185c4 	.word	0x200185c4
 801913c:	200185a4 	.word	0x200185a4
 8019140:	40021400 	.word	0x40021400
 8019144:	40021800 	.word	0x40021800
 8019148:	40021000 	.word	0x40021000
 801914c:	200185cc 	.word	0x200185cc

08019150 <bsp_delay_ms>:
void board_deinit(){

}
void bsp_delay_ms(unsigned long ms){
 8019150:	b580      	push	{r7, lr}
 8019152:	b082      	sub	sp, #8
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
#if RTOS
	vTaskDelay(pdMS_TO_TICKS(ms));
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801915e:	fb02 f303 	mul.w	r3, r2, r3
 8019162:	4a05      	ldr	r2, [pc, #20]	; (8019178 <bsp_delay_ms+0x28>)
 8019164:	fba2 2303 	umull	r2, r3, r2, r3
 8019168:	099b      	lsrs	r3, r3, #6
 801916a:	4618      	mov	r0, r3
 801916c:	f7ee fa42 	bl	80075f4 <vTaskDelay>
#else
	__HAL_TIM_SET_COUNTER(&htim1,0);
	while(__HAL_TIM_GET_COUNTER(&htim1) < ms*1000);
#endif
}
 8019170:	bf00      	nop
 8019172:	3708      	adds	r7, #8
 8019174:	46bd      	mov	sp, r7
 8019176:	bd80      	pop	{r7, pc}
 8019178:	10624dd3 	.word	0x10624dd3

0801917c <gpio_init>:


#include "gpio.h"


int gpio_init(BSP_GPIO *p_gpio){
 801917c:	b480      	push	{r7}
 801917e:	b083      	sub	sp, #12
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
	return 0;
 8019184:	2300      	movs	r3, #0
}
 8019186:	4618      	mov	r0, r3
 8019188:	370c      	adds	r7, #12
 801918a:	46bd      	mov	sp, r7
 801918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019190:	4770      	bx	lr

08019192 <gpio_write_pin>:
int gpio_write_pin(BSP_GPIO *p_gpio,BSP_GPIO_STATE state){
 8019192:	b580      	push	{r7, lr}
 8019194:	b082      	sub	sp, #8
 8019196:	af00      	add	r7, sp, #0
 8019198:	6078      	str	r0, [r7, #4]
 801919a:	460b      	mov	r3, r1
 801919c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(p_gpio->p_driver,p_gpio->pin,(GPIO_PinState)state);
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	6818      	ldr	r0, [r3, #0]
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	889b      	ldrh	r3, [r3, #4]
 80191a6:	78fa      	ldrb	r2, [r7, #3]
 80191a8:	4619      	mov	r1, r3
 80191aa:	f7e9 feff 	bl	8002fac <HAL_GPIO_WritePin>
	return 0;
 80191ae:	2300      	movs	r3, #0
}
 80191b0:	4618      	mov	r0, r3
 80191b2:	3708      	adds	r7, #8
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}

080191b8 <gpio_read_pin>:
BSP_GPIO_STATE gpio_read_pin(BSP_GPIO *p_gpio){
 80191b8:	b580      	push	{r7, lr}
 80191ba:	b084      	sub	sp, #16
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
	BSP_GPIO_STATE state = (BSP_GPIO_STATE)HAL_GPIO_ReadPin(p_gpio->p_driver,p_gpio->pin);
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	681a      	ldr	r2, [r3, #0]
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	889b      	ldrh	r3, [r3, #4]
 80191c8:	4619      	mov	r1, r3
 80191ca:	4610      	mov	r0, r2
 80191cc:	f7e9 fed6 	bl	8002f7c <HAL_GPIO_ReadPin>
 80191d0:	4603      	mov	r3, r0
 80191d2:	73fb      	strb	r3, [r7, #15]
	return state;
 80191d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80191d6:	4618      	mov	r0, r3
 80191d8:	3710      	adds	r7, #16
 80191da:	46bd      	mov	sp, r7
 80191dc:	bd80      	pop	{r7, pc}

080191de <spi_init>:
 */
#include "spi.h"



void spi_init(BSP_SPI *spi, SPI_HandleTypeDef *driver,BSP_GPIO *cs_pin){
 80191de:	b480      	push	{r7}
 80191e0:	b085      	sub	sp, #20
 80191e2:	af00      	add	r7, sp, #0
 80191e4:	60f8      	str	r0, [r7, #12]
 80191e6:	60b9      	str	r1, [r7, #8]
 80191e8:	607a      	str	r2, [r7, #4]
	spi->p_driver = driver;
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	68ba      	ldr	r2, [r7, #8]
 80191ee:	601a      	str	r2, [r3, #0]
	spi->p_cs = cs_pin;
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	687a      	ldr	r2, [r7, #4]
 80191f4:	605a      	str	r2, [r3, #4]
}
 80191f6:	bf00      	nop
 80191f8:	3714      	adds	r7, #20
 80191fa:	46bd      	mov	sp, r7
 80191fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019200:	4770      	bx	lr

08019202 <spi_write_read>:
void spi_write(BSP_SPI *spi,uint8_t *data,uint16_t len){
	spi_cs_select(spi);
	HAL_SPI_Transmit(spi->p_driver,data, len,1000);
	spi_cs_deselect(spi);
}
uint16_t spi_write_read(BSP_SPI *spi,uint8_t *source,uint8_t *dest,uint16_t len){
 8019202:	b580      	push	{r7, lr}
 8019204:	b088      	sub	sp, #32
 8019206:	af02      	add	r7, sp, #8
 8019208:	60f8      	str	r0, [r7, #12]
 801920a:	60b9      	str	r1, [r7, #8]
 801920c:	607a      	str	r2, [r7, #4]
 801920e:	807b      	strh	r3, [r7, #2]
	spi_cs_select(spi);
 8019210:	68f8      	ldr	r0, [r7, #12]
 8019212:	f000 f814 	bl	801923e <spi_cs_select>
	uint16_t status = HAL_SPI_TransmitReceive(spi->p_driver,source,dest,len,1000);
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	6818      	ldr	r0, [r3, #0]
 801921a:	887b      	ldrh	r3, [r7, #2]
 801921c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019220:	9200      	str	r2, [sp, #0]
 8019222:	687a      	ldr	r2, [r7, #4]
 8019224:	68b9      	ldr	r1, [r7, #8]
 8019226:	f7ea fbf6 	bl	8003a16 <HAL_SPI_TransmitReceive>
 801922a:	4603      	mov	r3, r0
 801922c:	82fb      	strh	r3, [r7, #22]
	spi_cs_deselect(spi);
 801922e:	68f8      	ldr	r0, [r7, #12]
 8019230:	f000 f813 	bl	801925a <spi_cs_deselect>
	return status;
 8019234:	8afb      	ldrh	r3, [r7, #22]
}
 8019236:	4618      	mov	r0, r3
 8019238:	3718      	adds	r7, #24
 801923a:	46bd      	mov	sp, r7
 801923c:	bd80      	pop	{r7, pc}

0801923e <spi_cs_select>:

void spi_cs_select(BSP_SPI *spi){
 801923e:	b580      	push	{r7, lr}
 8019240:	b082      	sub	sp, #8
 8019242:	af00      	add	r7, sp, #0
 8019244:	6078      	str	r0, [r7, #4]
	gpio_write_pin(spi->p_cs,BSP_GPIO_LOW);
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	685b      	ldr	r3, [r3, #4]
 801924a:	2100      	movs	r1, #0
 801924c:	4618      	mov	r0, r3
 801924e:	f7ff ffa0 	bl	8019192 <gpio_write_pin>
}
 8019252:	bf00      	nop
 8019254:	3708      	adds	r7, #8
 8019256:	46bd      	mov	sp, r7
 8019258:	bd80      	pop	{r7, pc}

0801925a <spi_cs_deselect>:
void spi_cs_deselect(BSP_SPI *spi){
 801925a:	b580      	push	{r7, lr}
 801925c:	b082      	sub	sp, #8
 801925e:	af00      	add	r7, sp, #0
 8019260:	6078      	str	r0, [r7, #4]
	gpio_write_pin(spi->p_cs,BSP_GPIO_HIGH);
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	685b      	ldr	r3, [r3, #4]
 8019266:	2101      	movs	r1, #1
 8019268:	4618      	mov	r0, r3
 801926a:	f7ff ff92 	bl	8019192 <gpio_write_pin>
}
 801926e:	bf00      	nop
 8019270:	3708      	adds	r7, #8
 8019272:	46bd      	mov	sp, r7
 8019274:	bd80      	pop	{r7, pc}

08019276 <afe_init>:
#define SOFTSPAN_MASK 0b111 // 0x07
#define CHANNEL_MASK 0b111000 // 0x38
#define DATA_MASK 0b111111111111111111000000 // 0xFFFF00


int afe_init(AFE *afe){
 8019276:	b580      	push	{r7, lr}
 8019278:	b084      	sub	sp, #16
 801927a:	af00      	add	r7, sp, #0
 801927c:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0;i<8;i++){
 801927e:	2300      	movs	r3, #0
 8019280:	81fb      	strh	r3, [r7, #14]
 8019282:	e00e      	b.n	80192a2 <afe_init+0x2c>
		afe_create_config_word(i, afe->softSpan, &afe->config_word[i]);
 8019284:	89fb      	ldrh	r3, [r7, #14]
 8019286:	b2d8      	uxtb	r0, r3
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 801928e:	89fb      	ldrh	r3, [r7, #14]
 8019290:	3338      	adds	r3, #56	; 0x38
 8019292:	687a      	ldr	r2, [r7, #4]
 8019294:	4413      	add	r3, r2
 8019296:	461a      	mov	r2, r3
 8019298:	f000 f870 	bl	801937c <afe_create_config_word>
	for(uint16_t i = 0;i<8;i++){
 801929c:	89fb      	ldrh	r3, [r7, #14]
 801929e:	3301      	adds	r3, #1
 80192a0:	81fb      	strh	r3, [r7, #14]
 80192a2:	89fb      	ldrh	r3, [r7, #14]
 80192a4:	2b07      	cmp	r3, #7
 80192a6:	d9ed      	bls.n	8019284 <afe_init+0xe>
	}
	afe_reset(afe);
 80192a8:	6878      	ldr	r0, [r7, #4]
 80192aa:	f000 f81a 	bl	80192e2 <afe_reset>
	return 0;
 80192ae:	2300      	movs	r3, #0
}
 80192b0:	4618      	mov	r0, r3
 80192b2:	3710      	adds	r7, #16
 80192b4:	46bd      	mov	sp, r7
 80192b6:	bd80      	pop	{r7, pc}

080192b8 <afe_start_convert>:
int afe_start_convert(AFE *afe){
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b082      	sub	sp, #8
 80192bc:	af00      	add	r7, sp, #0
 80192be:	6078      	str	r0, [r7, #4]
	gpio_write_pin(afe->cnv,BSP_GPIO_HIGH);
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	689b      	ldr	r3, [r3, #8]
 80192c4:	2101      	movs	r1, #1
 80192c6:	4618      	mov	r0, r3
 80192c8:	f7ff ff63 	bl	8019192 <gpio_write_pin>
//	bsp_delay_us(1);
	gpio_write_pin(afe->cnv,BSP_GPIO_LOW);
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	689b      	ldr	r3, [r3, #8]
 80192d0:	2100      	movs	r1, #0
 80192d2:	4618      	mov	r0, r3
 80192d4:	f7ff ff5d 	bl	8019192 <gpio_write_pin>
	return 0;
 80192d8:	2300      	movs	r3, #0
}
 80192da:	4618      	mov	r0, r3
 80192dc:	3708      	adds	r7, #8
 80192de:	46bd      	mov	sp, r7
 80192e0:	bd80      	pop	{r7, pc}

080192e2 <afe_reset>:
int afe_reset(AFE *afe){
 80192e2:	b580      	push	{r7, lr}
 80192e4:	b082      	sub	sp, #8
 80192e6:	af00      	add	r7, sp, #0
 80192e8:	6078      	str	r0, [r7, #4]
	gpio_write_pin(afe->pd,BSP_GPIO_HIGH);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	685b      	ldr	r3, [r3, #4]
 80192ee:	2101      	movs	r1, #1
 80192f0:	4618      	mov	r0, r3
 80192f2:	f7ff ff4e 	bl	8019192 <gpio_write_pin>
	bsp_delay_ms(50);
 80192f6:	2032      	movs	r0, #50	; 0x32
 80192f8:	f7ff ff2a 	bl	8019150 <bsp_delay_ms>
	gpio_write_pin(afe->pd,BSP_GPIO_LOW);
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	685b      	ldr	r3, [r3, #4]
 8019300:	2100      	movs	r1, #0
 8019302:	4618      	mov	r0, r3
 8019304:	f7ff ff45 	bl	8019192 <gpio_write_pin>
	return 0;
 8019308:	2300      	movs	r3, #0
}
 801930a:	4618      	mov	r0, r3
 801930c:	3708      	adds	r7, #8
 801930e:	46bd      	mov	sp, r7
 8019310:	bd80      	pop	{r7, pc}

08019312 <afe_busy>:
int afe_power_down(AFE *afe){
	gpio_write_pin(afe->pd,BSP_GPIO_HIGH);
	return 0;
}
int afe_busy(AFE *afe){
 8019312:	b580      	push	{r7, lr}
 8019314:	b082      	sub	sp, #8
 8019316:	af00      	add	r7, sp, #0
 8019318:	6078      	str	r0, [r7, #4]
	return gpio_read_pin(afe->busy);
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	68db      	ldr	r3, [r3, #12]
 801931e:	4618      	mov	r0, r3
 8019320:	f7ff ff4a 	bl	80191b8 <gpio_read_pin>
 8019324:	4603      	mov	r3, r0
}
 8019326:	4618      	mov	r0, r3
 8019328:	3708      	adds	r7, #8
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}

0801932e <afe_read>:
int afe_read(AFE *afe,uint8_t config_word,uint8_t data_array[4]){
 801932e:	b580      	push	{r7, lr}
 8019330:	b086      	sub	sp, #24
 8019332:	af00      	add	r7, sp, #0
 8019334:	60f8      	str	r0, [r7, #12]
 8019336:	460b      	mov	r3, r1
 8019338:	607a      	str	r2, [r7, #4]
 801933a:	72fb      	strb	r3, [r7, #11]
	  uint8_t tx_array[4];
	  memset(tx_array,0,4);
 801933c:	f107 0314 	add.w	r3, r7, #20
 8019340:	2204      	movs	r2, #4
 8019342:	2100      	movs	r1, #0
 8019344:	4618      	mov	r0, r3
 8019346:	f001 f959 	bl	801a5fc <memset>
	  tx_array[3] = (uint8_t)(config_word);
 801934a:	7afb      	ldrb	r3, [r7, #11]
 801934c:	75fb      	strb	r3, [r7, #23]
	  afe_start_convert(afe);
 801934e:	68f8      	ldr	r0, [r7, #12]
 8019350:	f7ff ffb2 	bl	80192b8 <afe_start_convert>
	  while(afe_busy(afe));
 8019354:	bf00      	nop
 8019356:	68f8      	ldr	r0, [r7, #12]
 8019358:	f7ff ffdb 	bl	8019312 <afe_busy>
 801935c:	4603      	mov	r3, r0
 801935e:	2b00      	cmp	r3, #0
 8019360:	d1f9      	bne.n	8019356 <afe_read+0x28>
	  return spi_write_read(afe->p_driver,tx_array, data_array, 4);
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	6818      	ldr	r0, [r3, #0]
 8019366:	f107 0114 	add.w	r1, r7, #20
 801936a:	2304      	movs	r3, #4
 801936c:	687a      	ldr	r2, [r7, #4]
 801936e:	f7ff ff48 	bl	8019202 <spi_write_read>
 8019372:	4603      	mov	r3, r0
}
 8019374:	4618      	mov	r0, r3
 8019376:	3718      	adds	r7, #24
 8019378:	46bd      	mov	sp, r7
 801937a:	bd80      	pop	{r7, pc}

0801937c <afe_create_config_word>:
		  return 0;
	  }
	  return -1;
}

uint8_t afe_create_config_word(uint8_t channel,AFE_SoftSpan_Code_t softspan,uint8_t *configword){
 801937c:	b480      	push	{r7}
 801937e:	b085      	sub	sp, #20
 8019380:	af00      	add	r7, sp, #0
 8019382:	4603      	mov	r3, r0
 8019384:	603a      	str	r2, [r7, #0]
 8019386:	71fb      	strb	r3, [r7, #7]
 8019388:	460b      	mov	r3, r1
 801938a:	71bb      	strb	r3, [r7, #6]
	*configword = 1<<7  | 0<<6 | channel << 3 | softspan;// ((uint32_t)(config_number & 0x07) << (channel * 3));
 801938c:	79fb      	ldrb	r3, [r7, #7]
 801938e:	00db      	lsls	r3, r3, #3
 8019390:	b2da      	uxtb	r2, r3
 8019392:	79bb      	ldrb	r3, [r7, #6]
 8019394:	4313      	orrs	r3, r2
 8019396:	b2db      	uxtb	r3, r3
 8019398:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801939c:	b2da      	uxtb	r2, r3
 801939e:	683b      	ldr	r3, [r7, #0]
 80193a0:	701a      	strb	r2, [r3, #0]
	uint8_t res = *configword;
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	781b      	ldrb	r3, [r3, #0]
 80193a6:	73fb      	strb	r3, [r7, #15]
	return res;
 80193a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80193aa:	4618      	mov	r0, r3
 80193ac:	3714      	adds	r7, #20
 80193ae:	46bd      	mov	sp, r7
 80193b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b4:	4770      	bx	lr

080193b6 <afe_convert>:
int afe_convert(AFE *afe,uint8_t data[4]){
 80193b6:	b480      	push	{r7}
 80193b8:	b085      	sub	sp, #20
 80193ba:	af00      	add	r7, sp, #0
 80193bc:	6078      	str	r0, [r7, #4]
 80193be:	6039      	str	r1, [r7, #0]
	  uint32_t data32 = (uint32_t)data[0] << 16 | (uint32_t)data[1] << 8 | data[2];
 80193c0:	683b      	ldr	r3, [r7, #0]
 80193c2:	781b      	ldrb	r3, [r3, #0]
 80193c4:	041a      	lsls	r2, r3, #16
 80193c6:	683b      	ldr	r3, [r7, #0]
 80193c8:	3301      	adds	r3, #1
 80193ca:	781b      	ldrb	r3, [r3, #0]
 80193cc:	021b      	lsls	r3, r3, #8
 80193ce:	4313      	orrs	r3, r2
 80193d0:	683a      	ldr	r2, [r7, #0]
 80193d2:	3202      	adds	r2, #2
 80193d4:	7812      	ldrb	r2, [r2, #0]
 80193d6:	4313      	orrs	r3, r2
 80193d8:	60fb      	str	r3, [r7, #12]
	  afe->data_type.softSpan = data32 & SOFTSPAN_MASK;
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	b2db      	uxtb	r3, r3
 80193de:	f003 0307 	and.w	r3, r3, #7
 80193e2:	b2da      	uxtb	r2, r3
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	  afe->data_type.channel = (data32 & CHANNEL_MASK) >> 3;
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	08db      	lsrs	r3, r3, #3
 80193ee:	b2db      	uxtb	r3, r3
 80193f0:	f003 0307 	and.w	r3, r3, #7
 80193f4:	b2da      	uxtb	r2, r3
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  afe->data_type.value = (data32 & DATA_MASK) >> 6;
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	099b      	lsrs	r3, r3, #6
 8019400:	f3c3 0211 	ubfx	r2, r3, #0, #18
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	635a      	str	r2, [r3, #52]	; 0x34
	  afe->data_channel[afe->data_type.channel] = afe->data_type.value;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801940e:	461a      	mov	r2, r3
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	3204      	adds	r2, #4
 8019418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  return 0;
 801941c:	2300      	movs	r3, #0
}
 801941e:	4618      	mov	r0, r3
 8019420:	3714      	adds	r7, #20
 8019422:	46bd      	mov	sp, r7
 8019424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019428:	4770      	bx	lr

0801942a <fifo_create>:
/************************** Variable Definitions ******************************/

/********************* Exported Function Definitions **************************/

uint8_t fifo_create(fifo_t* p_fifo, void * buf, uint16_t count, size_t size)
{
 801942a:	b480      	push	{r7}
 801942c:	b085      	sub	sp, #20
 801942e:	af00      	add	r7, sp, #0
 8019430:	60f8      	str	r0, [r7, #12]
 8019432:	60b9      	str	r1, [r7, #8]
 8019434:	603b      	str	r3, [r7, #0]
 8019436:	4613      	mov	r3, r2
 8019438:	80fb      	strh	r3, [r7, #6]
    // Sanity check for memory and element sizes
    if (buf != NULL && p_fifo != NULL && count != 0) {
 801943a:	68bb      	ldr	r3, [r7, #8]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d01c      	beq.n	801947a <fifo_create+0x50>
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d019      	beq.n	801947a <fifo_create+0x50>
 8019446:	88fb      	ldrh	r3, [r7, #6]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d016      	beq.n	801947a <fifo_create+0x50>
        p_fifo->itemspace = buf;
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	68ba      	ldr	r2, [r7, #8]
 8019450:	601a      	str	r2, [r3, #0]
        p_fifo->itemsize = size;
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	683a      	ldr	r2, [r7, #0]
 8019456:	605a      	str	r2, [r3, #4]
        p_fifo->allocatedbytes = count * size;
 8019458:	88fb      	ldrh	r3, [r7, #6]
 801945a:	683a      	ldr	r2, [r7, #0]
 801945c:	fb02 f203 	mul.w	r2, r2, r3
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	609a      	str	r2, [r3, #8]
        p_fifo->readoffset = 0;
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	2200      	movs	r2, #0
 8019468:	819a      	strh	r2, [r3, #12]
        p_fifo->writeoffset = 0;
 801946a:	68fb      	ldr	r3, [r7, #12]
 801946c:	2200      	movs	r2, #0
 801946e:	81da      	strh	r2, [r3, #14]
        p_fifo->storedbytes = 0;
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	2200      	movs	r2, #0
 8019474:	611a      	str	r2, [r3, #16]
        return 1;
 8019476:	2301      	movs	r3, #1
 8019478:	e000      	b.n	801947c <fifo_create+0x52>
    }
    return 0;
 801947a:	2300      	movs	r3, #0
}
 801947c:	4618      	mov	r0, r3
 801947e:	3714      	adds	r7, #20
 8019480:	46bd      	mov	sp, r7
 8019482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019486:	4770      	bx	lr

08019488 <fifo_add>:

uint8_t fifo_add(fifo_t* p_fifo, const void * item)
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b082      	sub	sp, #8
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
 8019490:	6039      	str	r1, [r7, #0]
    if (!fifo_is_full(p_fifo)) {
 8019492:	6878      	ldr	r0, [r7, #4]
 8019494:	f000 f832 	bl	80194fc <fifo_is_full>
 8019498:	4603      	mov	r3, r0
 801949a:	2b00      	cmp	r3, #0
 801949c:	d10c      	bne.n	80194b8 <fifo_add+0x30>
        fifo_copy_to(p_fifo, item);
 801949e:	6839      	ldr	r1, [r7, #0]
 80194a0:	6878      	ldr	r0, [r7, #4]
 80194a2:	f000 f876 	bl	8019592 <fifo_copy_to>
        p_fifo->storedbytes += p_fifo->itemsize;
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	691a      	ldr	r2, [r3, #16]
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	685b      	ldr	r3, [r3, #4]
 80194ae:	441a      	add	r2, r3
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	611a      	str	r2, [r3, #16]
        return 1;
 80194b4:	2301      	movs	r3, #1
 80194b6:	e000      	b.n	80194ba <fifo_add+0x32>
    } else {
        return 0;
 80194b8:	2300      	movs	r3, #0
    }
}
 80194ba:	4618      	mov	r0, r3
 80194bc:	3708      	adds	r7, #8
 80194be:	46bd      	mov	sp, r7
 80194c0:	bd80      	pop	{r7, pc}

080194c2 <fifo_get>:

uint8_t fifo_get(fifo_t* p_fifo, void * item)
{
 80194c2:	b580      	push	{r7, lr}
 80194c4:	b082      	sub	sp, #8
 80194c6:	af00      	add	r7, sp, #0
 80194c8:	6078      	str	r0, [r7, #4]
 80194ca:	6039      	str	r1, [r7, #0]
    if (!fifo_is_empty(p_fifo)) {
 80194cc:	6878      	ldr	r0, [r7, #4]
 80194ce:	f000 f828 	bl	8019522 <fifo_is_empty>
 80194d2:	4603      	mov	r3, r0
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d10c      	bne.n	80194f2 <fifo_get+0x30>
        fifo_copy_from(p_fifo, item);
 80194d8:	6839      	ldr	r1, [r7, #0]
 80194da:	6878      	ldr	r0, [r7, #4]
 80194dc:	f000 f832 	bl	8019544 <fifo_copy_from>
        p_fifo->storedbytes -= p_fifo->itemsize;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	691a      	ldr	r2, [r3, #16]
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	685b      	ldr	r3, [r3, #4]
 80194e8:	1ad2      	subs	r2, r2, r3
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	611a      	str	r2, [r3, #16]
        return 1;
 80194ee:	2301      	movs	r3, #1
 80194f0:	e000      	b.n	80194f4 <fifo_get+0x32>
    } else {
        return 0;
 80194f2:	2300      	movs	r3, #0
    }
}
 80194f4:	4618      	mov	r0, r3
 80194f6:	3708      	adds	r7, #8
 80194f8:	46bd      	mov	sp, r7
 80194fa:	bd80      	pop	{r7, pc}

080194fc <fifo_is_full>:
    }

}

uint8_t fifo_is_full(fifo_t* p_fifo)
{
 80194fc:	b480      	push	{r7}
 80194fe:	b083      	sub	sp, #12
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes >= p_fifo->allocatedbytes)
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	691a      	ldr	r2, [r3, #16]
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	689b      	ldr	r3, [r3, #8]
 801950c:	429a      	cmp	r2, r3
 801950e:	d301      	bcc.n	8019514 <fifo_is_full+0x18>
        return 1;
 8019510:	2301      	movs	r3, #1
 8019512:	e000      	b.n	8019516 <fifo_is_full+0x1a>
    else
        return 0;
 8019514:	2300      	movs	r3, #0
}
 8019516:	4618      	mov	r0, r3
 8019518:	370c      	adds	r7, #12
 801951a:	46bd      	mov	sp, r7
 801951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019520:	4770      	bx	lr

08019522 <fifo_is_empty>:

uint8_t fifo_is_empty(fifo_t* p_fifo)
{
 8019522:	b480      	push	{r7}
 8019524:	b083      	sub	sp, #12
 8019526:	af00      	add	r7, sp, #0
 8019528:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes == 0)
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	691b      	ldr	r3, [r3, #16]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d101      	bne.n	8019536 <fifo_is_empty+0x14>
        return 1;
 8019532:	2301      	movs	r3, #1
 8019534:	e000      	b.n	8019538 <fifo_is_empty+0x16>
    else
        return 0;
 8019536:	2300      	movs	r3, #0
}
 8019538:	4618      	mov	r0, r3
 801953a:	370c      	adds	r7, #12
 801953c:	46bd      	mov	sp, r7
 801953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019542:	4770      	bx	lr

08019544 <fifo_copy_from>:
    return 0;
}

/********************* Internal Function Definitions *************************/
static void fifo_copy_from(fifo_t* p_fifo, void * item)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b082      	sub	sp, #8
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
 801954c:	6039      	str	r1, [r7, #0]
    memcpy(item, (uint8_t*)p_fifo->itemspace + p_fifo->readoffset, p_fifo->itemsize);
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	687a      	ldr	r2, [r7, #4]
 8019554:	8992      	ldrh	r2, [r2, #12]
 8019556:	1899      	adds	r1, r3, r2
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	685b      	ldr	r3, [r3, #4]
 801955c:	461a      	mov	r2, r3
 801955e:	6838      	ldr	r0, [r7, #0]
 8019560:	f001 f824 	bl	801a5ac <memcpy>
    p_fifo->readoffset += p_fifo->itemsize;
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	899a      	ldrh	r2, [r3, #12]
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	685b      	ldr	r3, [r3, #4]
 801956c:	b29b      	uxth	r3, r3
 801956e:	4413      	add	r3, r2
 8019570:	b29a      	uxth	r2, r3
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	819a      	strh	r2, [r3, #12]
    if (p_fifo->readoffset >= p_fifo->allocatedbytes) {
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	899b      	ldrh	r3, [r3, #12]
 801957a:	461a      	mov	r2, r3
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	689b      	ldr	r3, [r3, #8]
 8019580:	429a      	cmp	r2, r3
 8019582:	d302      	bcc.n	801958a <fifo_copy_from+0x46>
        p_fifo->readoffset = 0;
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	2200      	movs	r2, #0
 8019588:	819a      	strh	r2, [r3, #12]
    }
}
 801958a:	bf00      	nop
 801958c:	3708      	adds	r7, #8
 801958e:	46bd      	mov	sp, r7
 8019590:	bd80      	pop	{r7, pc}

08019592 <fifo_copy_to>:

static void fifo_copy_to(fifo_t* p_fifo, const void *item)
{
 8019592:	b580      	push	{r7, lr}
 8019594:	b082      	sub	sp, #8
 8019596:	af00      	add	r7, sp, #0
 8019598:	6078      	str	r0, [r7, #4]
 801959a:	6039      	str	r1, [r7, #0]
    memcpy((uint8_t*)p_fifo->itemspace + p_fifo->writeoffset, item, p_fifo->itemsize);
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	687a      	ldr	r2, [r7, #4]
 80195a2:	89d2      	ldrh	r2, [r2, #14]
 80195a4:	1898      	adds	r0, r3, r2
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	685b      	ldr	r3, [r3, #4]
 80195aa:	461a      	mov	r2, r3
 80195ac:	6839      	ldr	r1, [r7, #0]
 80195ae:	f000 fffd 	bl	801a5ac <memcpy>
    p_fifo->writeoffset += p_fifo->itemsize;
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	89da      	ldrh	r2, [r3, #14]
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	685b      	ldr	r3, [r3, #4]
 80195ba:	b29b      	uxth	r3, r3
 80195bc:	4413      	add	r3, r2
 80195be:	b29a      	uxth	r2, r3
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	81da      	strh	r2, [r3, #14]
    if (p_fifo->writeoffset >= p_fifo->allocatedbytes) {
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	89db      	ldrh	r3, [r3, #14]
 80195c8:	461a      	mov	r2, r3
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	689b      	ldr	r3, [r3, #8]
 80195ce:	429a      	cmp	r2, r3
 80195d0:	d302      	bcc.n	80195d8 <fifo_copy_to+0x46>
        p_fifo->writeoffset = 0;
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	2200      	movs	r2, #0
 80195d6:	81da      	strh	r2, [r3, #14]
    }
}
 80195d8:	bf00      	nop
 80195da:	3708      	adds	r7, #8
 80195dc:	46bd      	mov	sp, r7
 80195de:	bd80      	pop	{r7, pc}

080195e0 <retarget_init>:
/**
 * @brief      Initialize FIFO
 *
 * @return     { description_of_the_return_value }
 */
int retarget_init(void) {
 80195e0:	b580      	push	{r7, lr}
 80195e2:	af00      	add	r7, sp, #0
  fifo_create( &shell_fifo,
 80195e4:	2301      	movs	r3, #1
 80195e6:	2280      	movs	r2, #128	; 0x80
 80195e8:	4903      	ldr	r1, [pc, #12]	; (80195f8 <retarget_init+0x18>)
 80195ea:	4804      	ldr	r0, [pc, #16]	; (80195fc <retarget_init+0x1c>)
 80195ec:	f7ff ff1d 	bl	801942a <fifo_create>
               shell_rx_buffer,
               sizeof(shell_rx_buffer)/sizeof(uint8_t),
               sizeof(uint8_t)
             );

  return 0;
 80195f0:	2300      	movs	r3, #0
}
 80195f2:	4618      	mov	r0, r3
 80195f4:	bd80      	pop	{r7, pc}
 80195f6:	bf00      	nop
 80195f8:	2001183c 	.word	0x2001183c
 80195fc:	200186c4 	.word	0x200186c4

08019600 <serial_get_char>:


int serial_get_char(uint8_t *c) {
 8019600:	b580      	push	{r7, lr}
 8019602:	b084      	sub	sp, #16
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
  uint8_t item = 0;
 8019608:	2300      	movs	r3, #0
 801960a:	73fb      	strb	r3, [r7, #15]

  if (fifo_is_empty(&shell_fifo) == 1) {
 801960c:	480d      	ldr	r0, [pc, #52]	; (8019644 <serial_get_char+0x44>)
 801960e:	f7ff ff88 	bl	8019522 <fifo_is_empty>
 8019612:	4603      	mov	r3, r0
 8019614:	2b01      	cmp	r3, #1
 8019616:	d101      	bne.n	801961c <serial_get_char+0x1c>
    return 0;
 8019618:	2300      	movs	r3, #0
 801961a:	e00e      	b.n	801963a <serial_get_char+0x3a>
  }

  if(fifo_get(&shell_fifo, &item) == 1) {
 801961c:	f107 030f 	add.w	r3, r7, #15
 8019620:	4619      	mov	r1, r3
 8019622:	4808      	ldr	r0, [pc, #32]	; (8019644 <serial_get_char+0x44>)
 8019624:	f7ff ff4d 	bl	80194c2 <fifo_get>
 8019628:	4603      	mov	r3, r0
 801962a:	2b01      	cmp	r3, #1
 801962c:	d104      	bne.n	8019638 <serial_get_char+0x38>
    *c = item;
 801962e:	7bfa      	ldrb	r2, [r7, #15]
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	701a      	strb	r2, [r3, #0]
    return 1;
 8019634:	2301      	movs	r3, #1
 8019636:	e000      	b.n	801963a <serial_get_char+0x3a>
  }

  return 0;
 8019638:	2300      	movs	r3, #0
}
 801963a:	4618      	mov	r0, r3
 801963c:	3710      	adds	r7, #16
 801963e:	46bd      	mov	sp, r7
 8019640:	bd80      	pop	{r7, pc}
 8019642:	bf00      	nop
 8019644:	200186c4 	.word	0x200186c4

08019648 <__io_getchar>:
#endif
	return ch;
}

uint8_t __io_getchar(void)
{
 8019648:	b580      	push	{r7, lr}
 801964a:	b082      	sub	sp, #8
 801964c:	af00      	add	r7, sp, #0
	uint8_t ch;
  int ret = serial_get_char((uint8_t*)&ch);
 801964e:	1cfb      	adds	r3, r7, #3
 8019650:	4618      	mov	r0, r3
 8019652:	f7ff ffd5 	bl	8019600 <serial_get_char>
 8019656:	6078      	str	r0, [r7, #4]

  return (ret == 1) ? ch : 0;
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	2b01      	cmp	r3, #1
 801965c:	d101      	bne.n	8019662 <__io_getchar+0x1a>
 801965e:	78fb      	ldrb	r3, [r7, #3]
 8019660:	e000      	b.n	8019664 <__io_getchar+0x1c>
 8019662:	2300      	movs	r3, #0
}
 8019664:	4618      	mov	r0, r3
 8019666:	3708      	adds	r7, #8
 8019668:	46bd      	mov	sp, r7
 801966a:	bd80      	pop	{r7, pc}

0801966c <on_uart_data_received>:

void on_uart_data_received(uint8_t ch) {
 801966c:	b580      	push	{r7, lr}
 801966e:	b082      	sub	sp, #8
 8019670:	af00      	add	r7, sp, #0
 8019672:	4603      	mov	r3, r0
 8019674:	71fb      	strb	r3, [r7, #7]
  if(!fifo_add(&shell_fifo, (const void *)&ch)) {
 8019676:	1dfb      	adds	r3, r7, #7
 8019678:	4619      	mov	r1, r3
 801967a:	4803      	ldr	r0, [pc, #12]	; (8019688 <on_uart_data_received+0x1c>)
 801967c:	f7ff ff04 	bl	8019488 <fifo_add>
    //printf("err");
  }
}
 8019680:	bf00      	nop
 8019682:	3708      	adds	r7, #8
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}
 8019688:	200186c4 	.word	0x200186c4

0801968c <_read>:
    return ch;
}
#elif defined(__GNUC__)

int _read(int file, char *ptr, int len)
{
 801968c:	b590      	push	{r4, r7, lr}
 801968e:	b087      	sub	sp, #28
 8019690:	af00      	add	r7, sp, #0
 8019692:	60f8      	str	r0, [r7, #12]
 8019694:	60b9      	str	r1, [r7, #8]
 8019696:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8019698:	2300      	movs	r3, #0
 801969a:	617b      	str	r3, [r7, #20]
 801969c:	e009      	b.n	80196b2 <_read+0x26>
    *ptr++ = __io_getchar();
 801969e:	68bc      	ldr	r4, [r7, #8]
 80196a0:	1c63      	adds	r3, r4, #1
 80196a2:	60bb      	str	r3, [r7, #8]
 80196a4:	f7ff ffd0 	bl	8019648 <__io_getchar>
 80196a8:	4603      	mov	r3, r0
 80196aa:	7023      	strb	r3, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	3301      	adds	r3, #1
 80196b0:	617b      	str	r3, [r7, #20]
 80196b2:	697a      	ldr	r2, [r7, #20]
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	429a      	cmp	r2, r3
 80196b8:	dbf1      	blt.n	801969e <_read+0x12>
  }

  return len;
 80196ba:	687b      	ldr	r3, [r7, #4]
}
 80196bc:	4618      	mov	r0, r3
 80196be:	371c      	adds	r7, #28
 80196c0:	46bd      	mov	sp, r7
 80196c2:	bd90      	pop	{r4, r7, pc}

080196c4 <_write>:

int _write(int file, char *ptr, int len)
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b086      	sub	sp, #24
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	60f8      	str	r0, [r7, #12]
 80196cc:	60b9      	str	r1, [r7, #8]
 80196ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80196d0:	2300      	movs	r3, #0
 80196d2:	617b      	str	r3, [r7, #20]
 80196d4:	e009      	b.n	80196ea <_write+0x26>
	{
		__io_putchar(*ptr++);
 80196d6:	68bb      	ldr	r3, [r7, #8]
 80196d8:	1c5a      	adds	r2, r3, #1
 80196da:	60ba      	str	r2, [r7, #8]
 80196dc:	781b      	ldrb	r3, [r3, #0]
 80196de:	4618      	mov	r0, r3
 80196e0:	f7ff fa24 	bl	8018b2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80196e4:	697b      	ldr	r3, [r7, #20]
 80196e6:	3301      	adds	r3, #1
 80196e8:	617b      	str	r3, [r7, #20]
 80196ea:	697a      	ldr	r2, [r7, #20]
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	429a      	cmp	r2, r3
 80196f0:	dbf1      	blt.n	80196d6 <_write+0x12>
	}
  return len;
 80196f2:	687b      	ldr	r3, [r7, #4]
}
 80196f4:	4618      	mov	r0, r3
 80196f6:	3718      	adds	r7, #24
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}

080196fc <SHELL_Init>:
static char g_paramBuffer[SHELL_BUFFER_SIZE];

/********************** Exported Function Definitions *************************/
void SHELL_Init(
    p_shell_context_t context, send_data_cb_t send_cb, recv_data_cb_t recv_cb, printf_data_t shell_printf, char *prompt)
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b084      	sub	sp, #16
 8019700:	af00      	add	r7, sp, #0
 8019702:	60f8      	str	r0, [r7, #12]
 8019704:	60b9      	str	r1, [r7, #8]
 8019706:	607a      	str	r2, [r7, #4]
 8019708:	603b      	str	r3, [r7, #0]
    assert(send_cb != NULL);
 801970a:	68bb      	ldr	r3, [r7, #8]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d105      	bne.n	801971c <SHELL_Init+0x20>
 8019710:	4b1c      	ldr	r3, [pc, #112]	; (8019784 <SHELL_Init+0x88>)
 8019712:	4a1d      	ldr	r2, [pc, #116]	; (8019788 <SHELL_Init+0x8c>)
 8019714:	214d      	movs	r1, #77	; 0x4d
 8019716:	481d      	ldr	r0, [pc, #116]	; (801978c <SHELL_Init+0x90>)
 8019718:	f000 fdd8 	bl	801a2cc <__assert_func>
    assert(recv_cb != NULL);
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d105      	bne.n	801972e <SHELL_Init+0x32>
 8019722:	4b1b      	ldr	r3, [pc, #108]	; (8019790 <SHELL_Init+0x94>)
 8019724:	4a18      	ldr	r2, [pc, #96]	; (8019788 <SHELL_Init+0x8c>)
 8019726:	214e      	movs	r1, #78	; 0x4e
 8019728:	4818      	ldr	r0, [pc, #96]	; (801978c <SHELL_Init+0x90>)
 801972a:	f000 fdcf 	bl	801a2cc <__assert_func>
    assert(prompt != NULL);
 801972e:	69bb      	ldr	r3, [r7, #24]
 8019730:	2b00      	cmp	r3, #0
 8019732:	d105      	bne.n	8019740 <SHELL_Init+0x44>
 8019734:	4b17      	ldr	r3, [pc, #92]	; (8019794 <SHELL_Init+0x98>)
 8019736:	4a14      	ldr	r2, [pc, #80]	; (8019788 <SHELL_Init+0x8c>)
 8019738:	214f      	movs	r1, #79	; 0x4f
 801973a:	4814      	ldr	r0, [pc, #80]	; (801978c <SHELL_Init+0x90>)
 801973c:	f000 fdc6 	bl	801a2cc <__assert_func>
    assert(shell_printf != NULL);
 8019740:	683b      	ldr	r3, [r7, #0]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d105      	bne.n	8019752 <SHELL_Init+0x56>
 8019746:	4b14      	ldr	r3, [pc, #80]	; (8019798 <SHELL_Init+0x9c>)
 8019748:	4a0f      	ldr	r2, [pc, #60]	; (8019788 <SHELL_Init+0x8c>)
 801974a:	2150      	movs	r1, #80	; 0x50
 801974c:	480f      	ldr	r0, [pc, #60]	; (801978c <SHELL_Init+0x90>)
 801974e:	f000 fdbd 	bl	801a2cc <__assert_func>

    /* Memset for context */
    memset(context, 0, sizeof(shell_context_struct));
 8019752:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8019756:	2100      	movs	r1, #0
 8019758:	68f8      	ldr	r0, [r7, #12]
 801975a:	f000 ff4f 	bl	801a5fc <memset>
    context->send_data_func = send_cb;
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	68ba      	ldr	r2, [r7, #8]
 8019762:	649a      	str	r2, [r3, #72]	; 0x48
    context->recv_data_func = recv_cb;
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	687a      	ldr	r2, [r7, #4]
 8019768:	64da      	str	r2, [r3, #76]	; 0x4c
    context->printf_data_func = shell_printf;
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	683a      	ldr	r2, [r7, #0]
 801976e:	651a      	str	r2, [r3, #80]	; 0x50
    context->prompt = prompt;
 8019770:	68fb      	ldr	r3, [r7, #12]
 8019772:	69ba      	ldr	r2, [r7, #24]
 8019774:	601a      	str	r2, [r3, #0]

    SHELL_RegisterCommand(&xHelpCommand);
 8019776:	4809      	ldr	r0, [pc, #36]	; (801979c <SHELL_Init+0xa0>)
 8019778:	f000 fd72 	bl	801a260 <SHELL_RegisterCommand>
    // SHELL_RegisterCommand(&xExitCommand);
}
 801977c:	bf00      	nop
 801977e:	3710      	adds	r7, #16
 8019780:	46bd      	mov	sp, r7
 8019782:	bd80      	pop	{r7, pc}
 8019784:	0801f368 	.word	0x0801f368
 8019788:	0801f670 	.word	0x0801f670
 801978c:	0801f378 	.word	0x0801f378
 8019790:	0801f39c 	.word	0x0801f39c
 8019794:	0801f3ac 	.word	0x0801f3ac
 8019798:	0801f3bc 	.word	0x0801f3bc
 801979c:	0801f660 	.word	0x0801f660

080197a0 <SHELL_Process>:


void SHELL_Process(p_shell_context_t context)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b084      	sub	sp, #16
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]

//   static uint32_t tick = 0;
   static uint8_t first_run  = 1;


    if (!context) {
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	f000 8216 	beq.w	8019bdc <SHELL_Process+0x43c>
        return;
    }

    if(first_run == 1) {
 80197b0:	4bad      	ldr	r3, [pc, #692]	; (8019a68 <SHELL_Process+0x2c8>)
 80197b2:	781b      	ldrb	r3, [r3, #0]
 80197b4:	2b01      	cmp	r3, #1
 80197b6:	d115      	bne.n	80197e4 <SHELL_Process+0x44>
        context->exit = false;
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	2200      	movs	r2, #0
 80197bc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
        context->printf_data_func("\r\nSHELL (build: %s)\r\n", __DATE__);
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197c4:	49a9      	ldr	r1, [pc, #676]	; (8019a6c <SHELL_Process+0x2cc>)
 80197c6:	48aa      	ldr	r0, [pc, #680]	; (8019a70 <SHELL_Process+0x2d0>)
 80197c8:	4798      	blx	r3
        context->printf_data_func("Copyright (c) 2022 Technology\r\n");
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197ce:	48a9      	ldr	r0, [pc, #676]	; (8019a74 <SHELL_Process+0x2d4>)
 80197d0:	4798      	blx	r3
        context->printf_data_func(context->prompt);
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80197d6:	687a      	ldr	r2, [r7, #4]
 80197d8:	6812      	ldr	r2, [r2, #0]
 80197da:	4610      	mov	r0, r2
 80197dc:	4798      	blx	r3
        first_run = 0;
 80197de:	4ba2      	ldr	r3, [pc, #648]	; (8019a68 <SHELL_Process+0x2c8>)
 80197e0:	2200      	movs	r2, #0
 80197e2:	701a      	strb	r2, [r3, #0]
    }


     vTaskDelay( 20 / portTICK_PERIOD_MS );  /* sleep a while */
 80197e4:	2014      	movs	r0, #20
 80197e6:	f7ed ff05 	bl	80075f4 <vTaskDelay>
//        return;
//    }

//    tick = xTaskGetTickCount();

    if (context->exit) {
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	f040 81f5 	bne.w	8019be0 <SHELL_Process+0x440>
        return;
    }
    ch = GetChar(context);
 80197f6:	6878      	ldr	r0, [r7, #4]
 80197f8:	f000 fd58 	bl	801a2ac <GetChar>
 80197fc:	4603      	mov	r3, r0
 80197fe:	72fb      	strb	r3, [r7, #11]
    if(ch == 0) {
 8019800:	7afb      	ldrb	r3, [r7, #11]
 8019802:	2b00      	cmp	r3, #0
 8019804:	f000 81ee 	beq.w	8019be4 <SHELL_Process+0x444>
      return;
    }
    /* Special key */
    if (ch == KEY_ESC) {
 8019808:	7afb      	ldrb	r3, [r7, #11]
 801980a:	2b1b      	cmp	r3, #27
 801980c:	d103      	bne.n	8019816 <SHELL_Process+0x76>
        context->stat = kSHELL_Special;
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	2201      	movs	r2, #1
 8019812:	711a      	strb	r2, [r3, #4]
        return;
 8019814:	e1e9      	b.n	8019bea <SHELL_Process+0x44a>
    } else if (context->stat == kSHELL_Special) {
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	791b      	ldrb	r3, [r3, #4]
 801981a:	2b01      	cmp	r3, #1
 801981c:	d10a      	bne.n	8019834 <SHELL_Process+0x94>
        /* Function key */
        if (ch == '[') {
 801981e:	7afb      	ldrb	r3, [r7, #11]
 8019820:	2b5b      	cmp	r3, #91	; 0x5b
 8019822:	d103      	bne.n	801982c <SHELL_Process+0x8c>
            context->stat = kSHELL_Function;
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	2202      	movs	r2, #2
 8019828:	711a      	strb	r2, [r3, #4]
            return;
 801982a:	e1de      	b.n	8019bea <SHELL_Process+0x44a>
        }
        context->stat = kSHELL_Normal;
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	2200      	movs	r2, #0
 8019830:	711a      	strb	r2, [r3, #4]
 8019832:	e134      	b.n	8019a9e <SHELL_Process+0x2fe>
    } else if (context->stat == kSHELL_Function) {
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	791b      	ldrb	r3, [r3, #4]
 8019838:	2b02      	cmp	r3, #2
 801983a:	d17b      	bne.n	8019934 <SHELL_Process+0x194>
        context->stat = kSHELL_Normal;
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	2200      	movs	r2, #0
 8019840:	711a      	strb	r2, [r3, #4]

        switch ((uint8_t)ch) {
 8019842:	7afb      	ldrb	r3, [r7, #11]
 8019844:	3b41      	subs	r3, #65	; 0x41
 8019846:	2b03      	cmp	r3, #3
 8019848:	d86a      	bhi.n	8019920 <SHELL_Process+0x180>
 801984a:	a201      	add	r2, pc, #4	; (adr r2, 8019850 <SHELL_Process+0xb0>)
 801984c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019850:	08019861 	.word	0x08019861
 8019854:	08019897 	.word	0x08019897
 8019858:	080198e7 	.word	0x080198e7
 801985c:	080198c3 	.word	0x080198c3
            /* History operation here */
            case 'A': /* Up key */
                GetHistoryCommand(context, context->hist_current);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019866:	b2db      	uxtb	r3, r3
 8019868:	4619      	mov	r1, r3
 801986a:	6878      	ldr	r0, [r7, #4]
 801986c:	f000 fb2c 	bl	8019ec8 <GetHistoryCommand>
                if (context->hist_current < (context->hist_count - 1)) {
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8019876:	461a      	mov	r2, r3
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801987e:	3b01      	subs	r3, #1
 8019880:	429a      	cmp	r2, r3
 8019882:	da4f      	bge.n	8019924 <SHELL_Process+0x184>
                    context->hist_current++;
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801988a:	3301      	adds	r3, #1
 801988c:	b29a      	uxth	r2, r3
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 8019894:	e046      	b.n	8019924 <SHELL_Process+0x184>
            case 'B': /* Down key */
                GetHistoryCommand(context, context->hist_current);
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801989c:	b2db      	uxtb	r3, r3
 801989e:	4619      	mov	r1, r3
 80198a0:	6878      	ldr	r0, [r7, #4]
 80198a2:	f000 fb11 	bl	8019ec8 <GetHistoryCommand>
                if (context->hist_current > 0) {
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d03b      	beq.n	8019928 <SHELL_Process+0x188>
                    context->hist_current--;
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80198b6:	3b01      	subs	r3, #1
 80198b8:	b29a      	uxth	r2, r3
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                }
                break;
 80198c0:	e032      	b.n	8019928 <SHELL_Process+0x188>
            case 'D': /* Left key */
                if (context->c_pos) {
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d02f      	beq.n	801992c <SHELL_Process+0x18c>
                    context->printf_data_func("\b");
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80198d0:	4869      	ldr	r0, [pc, #420]	; (8019a78 <SHELL_Process+0x2d8>)
 80198d2:	4798      	blx	r3
                    context->c_pos--;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80198da:	3b01      	subs	r3, #1
 80198dc:	b2da      	uxtb	r2, r3
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 80198e4:	e022      	b.n	801992c <SHELL_Process+0x18c>
            case 'C': /* Right key */
                if (context->c_pos < context->l_pos) {
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d21c      	bcs.n	8019930 <SHELL_Process+0x190>
                    context->printf_data_func("%c", context->line[context->c_pos]);
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80198fa:	687a      	ldr	r2, [r7, #4]
 80198fc:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8019900:	4611      	mov	r1, r2
 8019902:	687a      	ldr	r2, [r7, #4]
 8019904:	440a      	add	r2, r1
 8019906:	7952      	ldrb	r2, [r2, #5]
 8019908:	4611      	mov	r1, r2
 801990a:	485c      	ldr	r0, [pc, #368]	; (8019a7c <SHELL_Process+0x2dc>)
 801990c:	4798      	blx	r3
                    context->c_pos++;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019914:	3301      	adds	r3, #1
 8019916:	b2da      	uxtb	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
                }
                break;
 801991e:	e007      	b.n	8019930 <SHELL_Process+0x190>
            default:
                break;
 8019920:	bf00      	nop
 8019922:	e162      	b.n	8019bea <SHELL_Process+0x44a>
                break;
 8019924:	bf00      	nop
 8019926:	e160      	b.n	8019bea <SHELL_Process+0x44a>
                break;
 8019928:	bf00      	nop
 801992a:	e15e      	b.n	8019bea <SHELL_Process+0x44a>
                break;
 801992c:	bf00      	nop
 801992e:	e15c      	b.n	8019bea <SHELL_Process+0x44a>
                break;
 8019930:	bf00      	nop
        }
        return;
 8019932:	e15a      	b.n	8019bea <SHELL_Process+0x44a>
    }
    /* Handle tab key */
    else if (ch == '\t') {
 8019934:	7afb      	ldrb	r3, [r7, #11]
 8019936:	2b09      	cmp	r3, #9
 8019938:	d124      	bne.n	8019984 <SHELL_Process+0x1e4>
#if SHELL_AUTO_COMPLETE
        /* Move the cursor to the beginning of line */
        for (i = 0; i < context->c_pos; i++) {
 801993a:	2300      	movs	r3, #0
 801993c:	60fb      	str	r3, [r7, #12]
 801993e:	e006      	b.n	801994e <SHELL_Process+0x1ae>
            context->printf_data_func("\b");
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019944:	484c      	ldr	r0, [pc, #304]	; (8019a78 <SHELL_Process+0x2d8>)
 8019946:	4798      	blx	r3
        for (i = 0; i < context->c_pos; i++) {
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	3301      	adds	r3, #1
 801994c:	60fb      	str	r3, [r7, #12]
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019954:	461a      	mov	r2, r3
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	4293      	cmp	r3, r2
 801995a:	dbf1      	blt.n	8019940 <SHELL_Process+0x1a0>
        }
        /* Do auto complete */
        AutoComplete(context);
 801995c:	6878      	ldr	r0, [r7, #4]
 801995e:	f000 fb15 	bl	8019f8c <AutoComplete>
        /* Move position to end */
        context->c_pos = context->l_pos = StrLen(context->line);
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	3305      	adds	r3, #5
 8019966:	4618      	mov	r0, r3
 8019968:	f000 fbbd 	bl	801a0e6 <StrLen>
 801996c:	4603      	mov	r3, r0
 801996e:	b2da      	uxtb	r2, r3
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
#endif
        return;
 8019982:	e132      	b.n	8019bea <SHELL_Process+0x44a>
    }
#if SHELL_SEARCH_IN_HIST
    /* Search command in history */
    else if ((ch == '`') && (context->l_pos == 0) && (context->line[0] == 0x00)) {
 8019984:	7afb      	ldrb	r3, [r7, #11]
 8019986:	2b60      	cmp	r3, #96	; 0x60
 8019988:	d109      	bne.n	801999e <SHELL_Process+0x1fe>
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019990:	2b00      	cmp	r3, #0
 8019992:	d104      	bne.n	801999e <SHELL_Process+0x1fe>
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	795b      	ldrb	r3, [r3, #5]
 8019998:	2b00      	cmp	r3, #0
 801999a:	f000 8080 	beq.w	8019a9e <SHELL_Process+0x2fe>
    }
#endif
    /* Handle backspace key */
    else if ((ch == KET_DEL) || (ch == '\b')) {
 801999e:	7afb      	ldrb	r3, [r7, #11]
 80199a0:	2b7f      	cmp	r3, #127	; 0x7f
 80199a2:	d002      	beq.n	80199aa <SHELL_Process+0x20a>
 80199a4:	7afb      	ldrb	r3, [r7, #11]
 80199a6:	2b08      	cmp	r3, #8
 80199a8:	d179      	bne.n	8019a9e <SHELL_Process+0x2fe>
        /* There must be at last one char */
        if (context->c_pos == 0) {
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	f000 8119 	beq.w	8019be8 <SHELL_Process+0x448>
            return;
        }

        context->l_pos--;
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80199bc:	3b01      	subs	r3, #1
 80199be:	b2da      	uxtb	r2, r3
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        context->c_pos--;
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80199cc:	3b01      	subs	r3, #1
 80199ce:	b2da      	uxtb	r2, r3
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

        if (context->l_pos > context->c_pos) {
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80199e2:	429a      	cmp	r2, r3
 80199e4:	d94e      	bls.n	8019a84 <SHELL_Process+0x2e4>
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80199ec:	461a      	mov	r2, r3
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	4413      	add	r3, r2
 80199f2:	1d58      	adds	r0, r3, #5
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80199fa:	3301      	adds	r3, #1
 80199fc:	687a      	ldr	r2, [r7, #4]
 80199fe:	4413      	add	r3, r2
 8019a00:	1d59      	adds	r1, r3, #5
                    context->l_pos - context->c_pos);
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019a08:	461a      	mov	r2, r3
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019a10:	1ad3      	subs	r3, r2, r3
            memmove(&context->line[context->c_pos], &context->line[context->c_pos + 1],
 8019a12:	461a      	mov	r2, r3
 8019a14:	f000 fdd8 	bl	801a5c8 <memmove>
            context->line[context->l_pos] = 0;
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019a1e:	461a      	mov	r2, r3
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	4413      	add	r3, r2
 8019a24:	2200      	movs	r2, #0
 8019a26:	715a      	strb	r2, [r3, #5]
            context->printf_data_func("\b%s  \b", &context->line[context->c_pos]);
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a2c:	687a      	ldr	r2, [r7, #4]
 8019a2e:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8019a32:	4611      	mov	r1, r2
 8019a34:	687a      	ldr	r2, [r7, #4]
 8019a36:	440a      	add	r2, r1
 8019a38:	3205      	adds	r2, #5
 8019a3a:	4611      	mov	r1, r2
 8019a3c:	4810      	ldr	r0, [pc, #64]	; (8019a80 <SHELL_Process+0x2e0>)
 8019a3e:	4798      	blx	r3

            /* Reset position */
            for (i = context->c_pos; i <= context->l_pos; i++) {
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019a46:	60fb      	str	r3, [r7, #12]
 8019a48:	e006      	b.n	8019a58 <SHELL_Process+0x2b8>
                context->printf_data_func("\b");
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a4e:	480a      	ldr	r0, [pc, #40]	; (8019a78 <SHELL_Process+0x2d8>)
 8019a50:	4798      	blx	r3
            for (i = context->c_pos; i <= context->l_pos; i++) {
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	3301      	adds	r3, #1
 8019a56:	60fb      	str	r3, [r7, #12]
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019a5e:	461a      	mov	r2, r3
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	4293      	cmp	r3, r2
 8019a64:	ddf1      	ble.n	8019a4a <SHELL_Process+0x2aa>
        }  else  {
            /* Normal backspace operation */
            context->printf_data_func("\b \b");
            context->line[context->l_pos] = 0;
        }
        return;
 8019a66:	e0c0      	b.n	8019bea <SHELL_Process+0x44a>
 8019a68:	200000e4 	.word	0x200000e4
 8019a6c:	0801f3d4 	.word	0x0801f3d4
 8019a70:	0801f3e0 	.word	0x0801f3e0
 8019a74:	0801f3f8 	.word	0x0801f3f8
 8019a78:	0801f418 	.word	0x0801f418
 8019a7c:	0801f41c 	.word	0x0801f41c
 8019a80:	0801f420 	.word	0x0801f420
            context->printf_data_func("\b \b");
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a88:	4859      	ldr	r0, [pc, #356]	; (8019bf0 <SHELL_Process+0x450>)
 8019a8a:	4798      	blx	r3
            context->line[context->l_pos] = 0;
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019a92:	461a      	mov	r2, r3
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	4413      	add	r3, r2
 8019a98:	2200      	movs	r2, #0
 8019a9a:	715a      	strb	r2, [r3, #5]
        return;
 8019a9c:	e0a5      	b.n	8019bea <SHELL_Process+0x44a>
    } else {
    }

    /* Input too long */
    if (context->l_pos >= (SHELL_BUFFER_SIZE - 1)) {
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019aa4:	2b3e      	cmp	r3, #62	; 0x3e
 8019aa6:	d903      	bls.n	8019ab0 <SHELL_Process+0x310>
        context->l_pos = 0;
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	2200      	movs	r2, #0
 8019aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }

    /* Handle end of line, break */
    if ((ch == '\r') || (ch == '\n')) {
 8019ab0:	7afb      	ldrb	r3, [r7, #11]
 8019ab2:	2b0d      	cmp	r3, #13
 8019ab4:	d002      	beq.n	8019abc <SHELL_Process+0x31c>
 8019ab6:	7afb      	ldrb	r3, [r7, #11]
 8019ab8:	2b0a      	cmp	r3, #10
 8019aba:	d125      	bne.n	8019b08 <SHELL_Process+0x368>
        context->printf_data_func("\r\n");
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019ac0:	484c      	ldr	r0, [pc, #304]	; (8019bf4 <SHELL_Process+0x454>)
 8019ac2:	4798      	blx	r3
        ProcessCommand(context, context->line);
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	3305      	adds	r3, #5
 8019ac8:	4619      	mov	r1, r3
 8019aca:	6878      	ldr	r0, [r7, #4]
 8019acc:	f000 f8be 	bl	8019c4c <ProcessCommand>
        /* Reset all params */
        context->c_pos = context->l_pos = 0;
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	2200      	movs	r2, #0
 8019ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        context->hist_current = 0;
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	2200      	movs	r2, #0
 8019ae8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        context->printf_data_func(context->prompt);
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019af0:	687a      	ldr	r2, [r7, #4]
 8019af2:	6812      	ldr	r2, [r2, #0]
 8019af4:	4610      	mov	r0, r2
 8019af6:	4798      	blx	r3
        memset(context->line, 0, sizeof(context->line));
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	3305      	adds	r3, #5
 8019afc:	2240      	movs	r2, #64	; 0x40
 8019afe:	2100      	movs	r1, #0
 8019b00:	4618      	mov	r0, r3
 8019b02:	f000 fd7b 	bl	801a5fc <memset>
        return;
 8019b06:	e070      	b.n	8019bea <SHELL_Process+0x44a>
    }

    /* Normal character */
    if (context->c_pos < context->l_pos) {
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019b14:	429a      	cmp	r2, r3
 8019b16:	d240      	bcs.n	8019b9a <SHELL_Process+0x3fa>
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019b1e:	3301      	adds	r3, #1
 8019b20:	687a      	ldr	r2, [r7, #4]
 8019b22:	4413      	add	r3, r2
 8019b24:	1d58      	adds	r0, r3, #5
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019b2c:	461a      	mov	r2, r3
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	4413      	add	r3, r2
 8019b32:	1d59      	adds	r1, r3, #5
                context->l_pos - context->c_pos);
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019b3a:	461a      	mov	r2, r3
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019b42:	1ad3      	subs	r3, r2, r3
        memmove(&context->line[context->c_pos + 1], &context->line[context->c_pos],
 8019b44:	461a      	mov	r2, r3
 8019b46:	f000 fd3f 	bl	801a5c8 <memmove>
        context->line[context->c_pos] = ch;
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019b50:	461a      	mov	r2, r3
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	4413      	add	r3, r2
 8019b56:	7afa      	ldrb	r2, [r7, #11]
 8019b58:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%s", &context->line[context->c_pos]);
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b5e:	687a      	ldr	r2, [r7, #4]
 8019b60:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 8019b64:	4611      	mov	r1, r2
 8019b66:	687a      	ldr	r2, [r7, #4]
 8019b68:	440a      	add	r2, r1
 8019b6a:	3205      	adds	r2, #5
 8019b6c:	4611      	mov	r1, r2
 8019b6e:	4822      	ldr	r0, [pc, #136]	; (8019bf8 <SHELL_Process+0x458>)
 8019b70:	4798      	blx	r3
        /* Move the cursor to new position */
        for (i = context->c_pos; i < context->l_pos; i++)
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019b78:	60fb      	str	r3, [r7, #12]
 8019b7a:	e006      	b.n	8019b8a <SHELL_Process+0x3ea>
        {
            context->printf_data_func("\b");
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b80:	481e      	ldr	r0, [pc, #120]	; (8019bfc <SHELL_Process+0x45c>)
 8019b82:	4798      	blx	r3
        for (i = context->c_pos; i < context->l_pos; i++)
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	3301      	adds	r3, #1
 8019b88:	60fb      	str	r3, [r7, #12]
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019b90:	461a      	mov	r2, r3
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	4293      	cmp	r3, r2
 8019b96:	dbf1      	blt.n	8019b7c <SHELL_Process+0x3dc>
 8019b98:	e00d      	b.n	8019bb6 <SHELL_Process+0x416>
        }
    } else {
        context->line[context->l_pos] = ch;
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019ba0:	461a      	mov	r2, r3
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	4413      	add	r3, r2
 8019ba6:	7afa      	ldrb	r2, [r7, #11]
 8019ba8:	715a      	strb	r2, [r3, #5]
        context->printf_data_func("%c", ch);
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019bae:	7afa      	ldrb	r2, [r7, #11]
 8019bb0:	4611      	mov	r1, r2
 8019bb2:	4813      	ldr	r0, [pc, #76]	; (8019c00 <SHELL_Process+0x460>)
 8019bb4:	4798      	blx	r3
    }

    ch = 0;
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	72fb      	strb	r3, [r7, #11]
    context->l_pos++;
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019bc0:	3301      	adds	r3, #1
 8019bc2:	b2da      	uxtb	r2, r3
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos++;
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8019bd0:	3301      	adds	r3, #1
 8019bd2:	b2da      	uxtb	r2, r3
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8019bda:	e006      	b.n	8019bea <SHELL_Process+0x44a>
        return;
 8019bdc:	bf00      	nop
 8019bde:	e004      	b.n	8019bea <SHELL_Process+0x44a>
        return;
 8019be0:	bf00      	nop
 8019be2:	e002      	b.n	8019bea <SHELL_Process+0x44a>
      return;
 8019be4:	bf00      	nop
 8019be6:	e000      	b.n	8019bea <SHELL_Process+0x44a>
            return;
 8019be8:	bf00      	nop
}
 8019bea:	3710      	adds	r7, #16
 8019bec:	46bd      	mov	sp, r7
 8019bee:	bd80      	pop	{r7, pc}
 8019bf0:	0801f428 	.word	0x0801f428
 8019bf4:	0801f42c 	.word	0x0801f42c
 8019bf8:	0801f430 	.word	0x0801f430
 8019bfc:	0801f418 	.word	0x0801f418
 8019c00:	0801f41c 	.word	0x0801f41c

08019c04 <HelpCommand>:

/********************** Internal Function Definitions *************************/
static int32_t HelpCommand(p_shell_context_t context, int32_t argc, char **argv)
{
 8019c04:	b580      	push	{r7, lr}
 8019c06:	b086      	sub	sp, #24
 8019c08:	af00      	add	r7, sp, #0
 8019c0a:	60f8      	str	r0, [r7, #12]
 8019c0c:	60b9      	str	r1, [r7, #8]
 8019c0e:	607a      	str	r2, [r7, #4]
    uint8_t i = 0;
 8019c10:	2300      	movs	r3, #0
 8019c12:	75fb      	strb	r3, [r7, #23]

    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 8019c14:	2300      	movs	r3, #0
 8019c16:	75fb      	strb	r3, [r7, #23]
 8019c18:	e00b      	b.n	8019c32 <HelpCommand+0x2e>
        context->printf_data_func(g_RegisteredCommands.CommandList[i]->pcHelpString);
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019c1e:	7dfa      	ldrb	r2, [r7, #23]
 8019c20:	4909      	ldr	r1, [pc, #36]	; (8019c48 <HelpCommand+0x44>)
 8019c22:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8019c26:	6852      	ldr	r2, [r2, #4]
 8019c28:	4610      	mov	r0, r2
 8019c2a:	4798      	blx	r3
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 8019c2c:	7dfb      	ldrb	r3, [r7, #23]
 8019c2e:	3301      	adds	r3, #1
 8019c30:	75fb      	strb	r3, [r7, #23]
 8019c32:	4b05      	ldr	r3, [pc, #20]	; (8019c48 <HelpCommand+0x44>)
 8019c34:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8019c38:	7dfa      	ldrb	r2, [r7, #23]
 8019c3a:	429a      	cmp	r2, r3
 8019c3c:	d3ed      	bcc.n	8019c1a <HelpCommand+0x16>
    }
    return 0;
 8019c3e:	2300      	movs	r3, #0
}
 8019c40:	4618      	mov	r0, r3
 8019c42:	3718      	adds	r7, #24
 8019c44:	46bd      	mov	sp, r7
 8019c46:	bd80      	pop	{r7, pc}
 8019c48:	200118bc 	.word	0x200118bc

08019c4c <ProcessCommand>:
//    context->exit = true;
//    return 0;
//}

static void ProcessCommand(p_shell_context_t context, const char *cmd)
{
 8019c4c:	b5b0      	push	{r4, r5, r7, lr}
 8019c4e:	b0c6      	sub	sp, #280	; 0x118
 8019c50:	af00      	add	r7, sp, #0
 8019c52:	1d3b      	adds	r3, r7, #4
 8019c54:	6018      	str	r0, [r3, #0]
 8019c56:	463b      	mov	r3, r7
 8019c58:	6019      	str	r1, [r3, #0]
    static const shell_command_context_t *tmpCommand = NULL;
    static const char *tmpCommandString;
    int32_t argc;
    char *argv[SHELL_BUFFER_SIZE];
    uint8_t flag = 1;
 8019c5a:	2301      	movs	r3, #1
 8019c5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    uint8_t tmpCommandLen;
    uint8_t tmpLen;
    uint8_t i = 0;
 8019c60:	2300      	movs	r3, #0
 8019c62:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

    tmpLen = StrLen(cmd);
 8019c66:	463b      	mov	r3, r7
 8019c68:	6818      	ldr	r0, [r3, #0]
 8019c6a:	f000 fa3c 	bl	801a0e6 <StrLen>
 8019c6e:	4603      	mov	r3, r0
 8019c70:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
    argc = ParseLine(cmd, tmpLen, argv);
 8019c74:	f897 1115 	ldrb.w	r1, [r7, #277]	; 0x115
 8019c78:	f107 020c 	add.w	r2, r7, #12
 8019c7c:	463b      	mov	r3, r7
 8019c7e:	6818      	ldr	r0, [r3, #0]
 8019c80:	f000 fa70 	bl	801a164 <ParseLine>
 8019c84:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    if ((tmpCommand == NULL) && (argc > 0)) {
 8019c88:	4b8b      	ldr	r3, [pc, #556]	; (8019eb8 <ProcessCommand+0x26c>)
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d168      	bne.n	8019d62 <ProcessCommand+0x116>
 8019c90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	dd64      	ble.n	8019d62 <ProcessCommand+0x116>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 8019c98:	2300      	movs	r3, #0
 8019c9a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8019c9e:	e057      	b.n	8019d50 <ProcessCommand+0x104>
            tmpCommand = g_RegisteredCommands.CommandList[i];
 8019ca0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019ca4:	4a85      	ldr	r2, [pc, #532]	; (8019ebc <ProcessCommand+0x270>)
 8019ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019caa:	4a83      	ldr	r2, [pc, #524]	; (8019eb8 <ProcessCommand+0x26c>)
 8019cac:	6013      	str	r3, [r2, #0]
            tmpCommandString = tmpCommand->pcCommand;
 8019cae:	4b82      	ldr	r3, [pc, #520]	; (8019eb8 <ProcessCommand+0x26c>)
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	4a82      	ldr	r2, [pc, #520]	; (8019ec0 <ProcessCommand+0x274>)
 8019cb6:	6013      	str	r3, [r2, #0]
            tmpCommandLen = StrLen(tmpCommandString);
 8019cb8:	4b81      	ldr	r3, [pc, #516]	; (8019ec0 <ProcessCommand+0x274>)
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	f000 fa12 	bl	801a0e6 <StrLen>
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            /* Compare with space or end of string */
            if ((cmd[tmpCommandLen] == ' ') || (cmd[tmpCommandLen] == 0x00)) {
 8019cc8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8019ccc:	463a      	mov	r2, r7
 8019cce:	6812      	ldr	r2, [r2, #0]
 8019cd0:	4413      	add	r3, r2
 8019cd2:	781b      	ldrb	r3, [r3, #0]
 8019cd4:	2b20      	cmp	r3, #32
 8019cd6:	d007      	beq.n	8019ce8 <ProcessCommand+0x9c>
 8019cd8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8019cdc:	463a      	mov	r2, r7
 8019cde:	6812      	ldr	r2, [r2, #0]
 8019ce0:	4413      	add	r3, r2
 8019ce2:	781b      	ldrb	r3, [r3, #0]
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d12e      	bne.n	8019d46 <ProcessCommand+0xfa>
                if (StrCompare(tmpCommandString, argv[0], tmpCommandLen) == 0) {
 8019ce8:	4b75      	ldr	r3, [pc, #468]	; (8019ec0 <ProcessCommand+0x274>)
 8019cea:	6818      	ldr	r0, [r3, #0]
 8019cec:	f107 030c 	add.w	r3, r7, #12
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8019cf6:	4619      	mov	r1, r3
 8019cf8:	f000 fa0d 	bl	801a116 <StrCompare>
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d121      	bne.n	8019d46 <ProcessCommand+0xfa>
                    if ((tmpCommand->cExpectedNumberOfParameters == 0) && (argc == 1)) {
 8019d02:	4b6d      	ldr	r3, [pc, #436]	; (8019eb8 <ProcessCommand+0x26c>)
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	7b1b      	ldrb	r3, [r3, #12]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d107      	bne.n	8019d1c <ProcessCommand+0xd0>
 8019d0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019d10:	2b01      	cmp	r3, #1
 8019d12:	d103      	bne.n	8019d1c <ProcessCommand+0xd0>
                        flag = 0;
 8019d14:	2300      	movs	r3, #0
 8019d16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                            flag = 0;
                        }
                    } else {
                        flag = 1;
                    }
                    break;
 8019d1a:	e021      	b.n	8019d60 <ProcessCommand+0x114>
                    } else if (tmpCommand->cExpectedNumberOfParameters > 0) {
 8019d1c:	4b66      	ldr	r3, [pc, #408]	; (8019eb8 <ProcessCommand+0x26c>)
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	7b1b      	ldrb	r3, [r3, #12]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d00b      	beq.n	8019d3e <ProcessCommand+0xf2>
                        if ((argc - 1) == tmpCommand->cExpectedNumberOfParameters) {
 8019d26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8019d2a:	3b01      	subs	r3, #1
 8019d2c:	4a62      	ldr	r2, [pc, #392]	; (8019eb8 <ProcessCommand+0x26c>)
 8019d2e:	6812      	ldr	r2, [r2, #0]
 8019d30:	7b12      	ldrb	r2, [r2, #12]
 8019d32:	4293      	cmp	r3, r2
 8019d34:	d114      	bne.n	8019d60 <ProcessCommand+0x114>
                            flag = 0;
 8019d36:	2300      	movs	r3, #0
 8019d38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 8019d3c:	e010      	b.n	8019d60 <ProcessCommand+0x114>
                        flag = 1;
 8019d3e:	2301      	movs	r3, #1
 8019d40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
                    break;
 8019d44:	e00c      	b.n	8019d60 <ProcessCommand+0x114>
        for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 8019d46:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019d4a:	3301      	adds	r3, #1
 8019d4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8019d50:	4b5a      	ldr	r3, [pc, #360]	; (8019ebc <ProcessCommand+0x270>)
 8019d52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8019d56:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8019d5a:	429a      	cmp	r2, r3
 8019d5c:	d3a0      	bcc.n	8019ca0 <ProcessCommand+0x54>
 8019d5e:	e000      	b.n	8019d62 <ProcessCommand+0x116>
                    break;
 8019d60:	bf00      	nop
                }
            }
        }
    }

    if ((tmpCommand != NULL) && (flag == 1U)) {
 8019d62:	4b55      	ldr	r3, [pc, #340]	; (8019eb8 <ProcessCommand+0x26c>)
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d00c      	beq.n	8019d84 <ProcessCommand+0x138>
 8019d6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8019d6e:	2b01      	cmp	r3, #1
 8019d70:	d108      	bne.n	8019d84 <ProcessCommand+0x138>
        context->printf_data_func(
 8019d72:	1d3b      	adds	r3, r7, #4
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019d78:	4852      	ldr	r0, [pc, #328]	; (8019ec4 <ProcessCommand+0x278>)
 8019d7a:	4798      	blx	r3
            "\r\nIncorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
 8019d7c:	4b4e      	ldr	r3, [pc, #312]	; (8019eb8 <ProcessCommand+0x26c>)
 8019d7e:	2200      	movs	r2, #0
 8019d80:	601a      	str	r2, [r3, #0]
    } else {
        // context->printf_data_func(
        //     "\r\nCommand not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n");
        tmpCommand = NULL;
    }
}
 8019d82:	e093      	b.n	8019eac <ProcessCommand+0x260>
    } else if (tmpCommand != NULL) {
 8019d84:	4b4c      	ldr	r3, [pc, #304]	; (8019eb8 <ProcessCommand+0x26c>)
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	f000 808c 	beq.w	8019ea6 <ProcessCommand+0x25a>
        tmpLen = StrLen(cmd);
 8019d8e:	463b      	mov	r3, r7
 8019d90:	6818      	ldr	r0, [r3, #0]
 8019d92:	f000 f9a8 	bl	801a0e6 <StrLen>
 8019d96:	4603      	mov	r3, r0
 8019d98:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        if (tmpLen != StrCompare(cmd, context->hist_buf[0], StrLen(cmd))) {
 8019d9c:	f897 4115 	ldrb.w	r4, [r7, #277]	; 0x115
 8019da0:	1d3b      	adds	r3, r7, #4
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	f103 0558 	add.w	r5, r3, #88	; 0x58
 8019da8:	463b      	mov	r3, r7
 8019daa:	6818      	ldr	r0, [r3, #0]
 8019dac:	f000 f99b 	bl	801a0e6 <StrLen>
 8019db0:	4602      	mov	r2, r0
 8019db2:	463b      	mov	r3, r7
 8019db4:	4629      	mov	r1, r5
 8019db6:	6818      	ldr	r0, [r3, #0]
 8019db8:	f000 f9ad 	bl	801a116 <StrCompare>
 8019dbc:	4603      	mov	r3, r0
 8019dbe:	429c      	cmp	r4, r3
 8019dc0:	d063      	beq.n	8019e8a <ProcessCommand+0x23e>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--) {
 8019dc2:	2302      	movs	r3, #2
 8019dc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8019dc8:	e032      	b.n	8019e30 <ProcessCommand+0x1e4>
                memset(context->hist_buf[i], '\0', SHELL_BUFFER_SIZE);
 8019dca:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019dce:	1d3a      	adds	r2, r7, #4
 8019dd0:	019b      	lsls	r3, r3, #6
 8019dd2:	3358      	adds	r3, #88	; 0x58
 8019dd4:	6812      	ldr	r2, [r2, #0]
 8019dd6:	4413      	add	r3, r2
 8019dd8:	2240      	movs	r2, #64	; 0x40
 8019dda:	2100      	movs	r1, #0
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f000 fc0d 	bl	801a5fc <memset>
                tmpLen = StrLen(context->hist_buf[i - 1]);
 8019de2:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019de6:	3b01      	subs	r3, #1
 8019de8:	1d3a      	adds	r2, r7, #4
 8019dea:	019b      	lsls	r3, r3, #6
 8019dec:	3358      	adds	r3, #88	; 0x58
 8019dee:	6812      	ldr	r2, [r2, #0]
 8019df0:	4413      	add	r3, r2
 8019df2:	4618      	mov	r0, r3
 8019df4:	f000 f977 	bl	801a0e6 <StrLen>
 8019df8:	4603      	mov	r3, r0
 8019dfa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
                StrCopy(context->hist_buf[i], context->hist_buf[i - 1], tmpLen);
 8019dfe:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019e02:	1d3a      	adds	r2, r7, #4
 8019e04:	019b      	lsls	r3, r3, #6
 8019e06:	3358      	adds	r3, #88	; 0x58
 8019e08:	6812      	ldr	r2, [r2, #0]
 8019e0a:	18d0      	adds	r0, r2, r3
 8019e0c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019e10:	3b01      	subs	r3, #1
 8019e12:	1d3a      	adds	r2, r7, #4
 8019e14:	019b      	lsls	r3, r3, #6
 8019e16:	3358      	adds	r3, #88	; 0x58
 8019e18:	6812      	ldr	r2, [r2, #0]
 8019e1a:	4413      	add	r3, r2
 8019e1c:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8019e20:	4619      	mov	r1, r3
 8019e22:	f000 f93d 	bl	801a0a0 <StrCopy>
            for (i = SHELL_HIST_MAX - 1; i > 0; i--) {
 8019e26:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019e2a:	3b01      	subs	r3, #1
 8019e2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8019e30:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d1c8      	bne.n	8019dca <ProcessCommand+0x17e>
            memset(context->hist_buf[0], '\0', SHELL_BUFFER_SIZE);
 8019e38:	1d3b      	adds	r3, r7, #4
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	3358      	adds	r3, #88	; 0x58
 8019e3e:	2240      	movs	r2, #64	; 0x40
 8019e40:	2100      	movs	r1, #0
 8019e42:	4618      	mov	r0, r3
 8019e44:	f000 fbda 	bl	801a5fc <memset>
            tmpLen = StrLen(cmd);
 8019e48:	463b      	mov	r3, r7
 8019e4a:	6818      	ldr	r0, [r3, #0]
 8019e4c:	f000 f94b 	bl	801a0e6 <StrLen>
 8019e50:	4603      	mov	r3, r0
 8019e52:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
            StrCopy(context->hist_buf[0], cmd, tmpLen);
 8019e56:	1d3b      	adds	r3, r7, #4
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8019e5e:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8019e62:	463b      	mov	r3, r7
 8019e64:	6819      	ldr	r1, [r3, #0]
 8019e66:	f000 f91b 	bl	801a0a0 <StrCopy>
            if (context->hist_count < SHELL_HIST_MAX) {
 8019e6a:	1d3b      	adds	r3, r7, #4
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8019e72:	2b02      	cmp	r3, #2
 8019e74:	d809      	bhi.n	8019e8a <ProcessCommand+0x23e>
                context->hist_count++;
 8019e76:	1d3b      	adds	r3, r7, #4
 8019e78:	681b      	ldr	r3, [r3, #0]
 8019e7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8019e7e:	3301      	adds	r3, #1
 8019e80:	b29a      	uxth	r2, r3
 8019e82:	1d3b      	adds	r3, r7, #4
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
        tmpCommand->pFuncCallBack(context, argc, argv);
 8019e8a:	4b0b      	ldr	r3, [pc, #44]	; (8019eb8 <ProcessCommand+0x26c>)
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	689b      	ldr	r3, [r3, #8]
 8019e90:	f107 020c 	add.w	r2, r7, #12
 8019e94:	1d38      	adds	r0, r7, #4
 8019e96:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8019e9a:	6800      	ldr	r0, [r0, #0]
 8019e9c:	4798      	blx	r3
        tmpCommand = NULL;
 8019e9e:	4b06      	ldr	r3, [pc, #24]	; (8019eb8 <ProcessCommand+0x26c>)
 8019ea0:	2200      	movs	r2, #0
 8019ea2:	601a      	str	r2, [r3, #0]
}
 8019ea4:	e002      	b.n	8019eac <ProcessCommand+0x260>
        tmpCommand = NULL;
 8019ea6:	4b04      	ldr	r3, [pc, #16]	; (8019eb8 <ProcessCommand+0x26c>)
 8019ea8:	2200      	movs	r2, #0
 8019eaa:	601a      	str	r2, [r3, #0]
}
 8019eac:	bf00      	nop
 8019eae:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8019eb2:	46bd      	mov	sp, r7
 8019eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8019eb6:	bf00      	nop
 8019eb8:	200119a0 	.word	0x200119a0
 8019ebc:	200118bc 	.word	0x200118bc
 8019ec0:	200119a4 	.word	0x200119a4
 8019ec4:	0801f434 	.word	0x0801f434

08019ec8 <GetHistoryCommand>:

static void GetHistoryCommand(p_shell_context_t context, uint8_t hist_pos)
{
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	b084      	sub	sp, #16
 8019ecc:	af00      	add	r7, sp, #0
 8019ece:	6078      	str	r0, [r7, #4]
 8019ed0:	460b      	mov	r3, r1
 8019ed2:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint32_t tmp;

    if (context->hist_buf[0][0] == '\0') {
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d104      	bne.n	8019ee8 <GetHistoryCommand+0x20>
        context->hist_current = 0;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	2200      	movs	r2, #0
 8019ee2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
        return;
 8019ee6:	e04c      	b.n	8019f82 <GetHistoryCommand+0xba>
    }

    if (hist_pos > SHELL_HIST_MAX) {
 8019ee8:	78fb      	ldrb	r3, [r7, #3]
 8019eea:	2b03      	cmp	r3, #3
 8019eec:	d901      	bls.n	8019ef2 <GetHistoryCommand+0x2a>
        hist_pos = SHELL_HIST_MAX - 1;
 8019eee:	2302      	movs	r3, #2
 8019ef0:	70fb      	strb	r3, [r7, #3]
    }
    tmp = StrLen(context->line);
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	3305      	adds	r3, #5
 8019ef6:	4618      	mov	r0, r3
 8019ef8:	f000 f8f5 	bl	801a0e6 <StrLen>
 8019efc:	4603      	mov	r3, r0
 8019efe:	60bb      	str	r3, [r7, #8]
    /* Clear current if have */
    if (tmp > 0) {
 8019f00:	68bb      	ldr	r3, [r7, #8]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d014      	beq.n	8019f30 <GetHistoryCommand+0x68>
        memset(context->line, '\0', tmp);
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	3305      	adds	r3, #5
 8019f0a:	68ba      	ldr	r2, [r7, #8]
 8019f0c:	2100      	movs	r1, #0
 8019f0e:	4618      	mov	r0, r3
 8019f10:	f000 fb74 	bl	801a5fc <memset>
        for (i = 0; i < tmp; i++) {
 8019f14:	2300      	movs	r3, #0
 8019f16:	73fb      	strb	r3, [r7, #15]
 8019f18:	e006      	b.n	8019f28 <GetHistoryCommand+0x60>
            context->printf_data_func("\b \b");
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f1e:	481a      	ldr	r0, [pc, #104]	; (8019f88 <GetHistoryCommand+0xc0>)
 8019f20:	4798      	blx	r3
        for (i = 0; i < tmp; i++) {
 8019f22:	7bfb      	ldrb	r3, [r7, #15]
 8019f24:	3301      	adds	r3, #1
 8019f26:	73fb      	strb	r3, [r7, #15]
 8019f28:	7bfb      	ldrb	r3, [r7, #15]
 8019f2a:	68ba      	ldr	r2, [r7, #8]
 8019f2c:	429a      	cmp	r2, r3
 8019f2e:	d8f4      	bhi.n	8019f1a <GetHistoryCommand+0x52>
        }
    }

    context->l_pos = StrLen(context->hist_buf[hist_pos]);
 8019f30:	78fb      	ldrb	r3, [r7, #3]
 8019f32:	019b      	lsls	r3, r3, #6
 8019f34:	3358      	adds	r3, #88	; 0x58
 8019f36:	687a      	ldr	r2, [r7, #4]
 8019f38:	4413      	add	r3, r2
 8019f3a:	4618      	mov	r0, r3
 8019f3c:	f000 f8d3 	bl	801a0e6 <StrLen>
 8019f40:	4603      	mov	r3, r0
 8019f42:	b2da      	uxtb	r2, r3
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    context->c_pos = context->l_pos;
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    StrCopy(context->line, context->hist_buf[hist_pos], context->l_pos);
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	1d58      	adds	r0, r3, #5
 8019f5a:	78fb      	ldrb	r3, [r7, #3]
 8019f5c:	019b      	lsls	r3, r3, #6
 8019f5e:	3358      	adds	r3, #88	; 0x58
 8019f60:	687a      	ldr	r2, [r7, #4]
 8019f62:	18d1      	adds	r1, r2, r3
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8019f6a:	461a      	mov	r2, r3
 8019f6c:	f000 f898 	bl	801a0a0 <StrCopy>
    context->printf_data_func(context->hist_buf[hist_pos]);
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019f74:	78fa      	ldrb	r2, [r7, #3]
 8019f76:	0192      	lsls	r2, r2, #6
 8019f78:	3258      	adds	r2, #88	; 0x58
 8019f7a:	6879      	ldr	r1, [r7, #4]
 8019f7c:	440a      	add	r2, r1
 8019f7e:	4610      	mov	r0, r2
 8019f80:	4798      	blx	r3
}
 8019f82:	3710      	adds	r7, #16
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bd80      	pop	{r7, pc}
 8019f88:	0801f428 	.word	0x0801f428

08019f8c <AutoComplete>:

static void AutoComplete(p_shell_context_t context)
{
 8019f8c:	b590      	push	{r4, r7, lr}
 8019f8e:	b089      	sub	sp, #36	; 0x24
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	6078      	str	r0, [r7, #4]
    int32_t len;
    int32_t minLen;
    uint8_t i = 0;
 8019f94:	2300      	movs	r3, #0
 8019f96:	75fb      	strb	r3, [r7, #23]
    const shell_command_context_t *tmpCommand = NULL;
 8019f98:	2300      	movs	r3, #0
 8019f9a:	60fb      	str	r3, [r7, #12]
    const char *namePtr;
    const char *cmdName;

    minLen = 0;
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	61bb      	str	r3, [r7, #24]
    namePtr = NULL;
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	613b      	str	r3, [r7, #16]

    if (!StrLen(context->line)) {
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	3305      	adds	r3, #5
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f000 f89c 	bl	801a0e6 <StrLen>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d069      	beq.n	801a088 <AutoComplete+0xfc>
        return;
    }
    context->printf_data_func("\r\n");
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019fb8:	4835      	ldr	r0, [pc, #212]	; (801a090 <AutoComplete+0x104>)
 8019fba:	4798      	blx	r3
    /* Empty tab, list all commands */
    if (context->line[0] == '\0') {
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	795b      	ldrb	r3, [r3, #5]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d105      	bne.n	8019fd0 <AutoComplete+0x44>
        HelpCommand(context, 0, NULL);
 8019fc4:	2200      	movs	r2, #0
 8019fc6:	2100      	movs	r1, #0
 8019fc8:	6878      	ldr	r0, [r7, #4]
 8019fca:	f7ff fe1b 	bl	8019c04 <HelpCommand>
        return;
 8019fce:	e05c      	b.n	801a08a <AutoComplete+0xfe>
    }
    /* Do auto complete */
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	75fb      	strb	r3, [r7, #23]
 8019fd4:	e03f      	b.n	801a056 <AutoComplete+0xca>
        tmpCommand = g_RegisteredCommands.CommandList[i];
 8019fd6:	7dfb      	ldrb	r3, [r7, #23]
 8019fd8:	4a2e      	ldr	r2, [pc, #184]	; (801a094 <AutoComplete+0x108>)
 8019fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019fde:	60fb      	str	r3, [r7, #12]
        cmdName = tmpCommand->pcCommand;
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	60bb      	str	r3, [r7, #8]
        if (StrCompare(context->line, cmdName, StrLen(context->line)) == 0) {
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	1d5c      	adds	r4, r3, #5
 8019fea:	687b      	ldr	r3, [r7, #4]
 8019fec:	3305      	adds	r3, #5
 8019fee:	4618      	mov	r0, r3
 8019ff0:	f000 f879 	bl	801a0e6 <StrLen>
 8019ff4:	4603      	mov	r3, r0
 8019ff6:	461a      	mov	r2, r3
 8019ff8:	68b9      	ldr	r1, [r7, #8]
 8019ffa:	4620      	mov	r0, r4
 8019ffc:	f000 f88b 	bl	801a116 <StrCompare>
 801a000:	4603      	mov	r3, r0
 801a002:	2b00      	cmp	r3, #0
 801a004:	d124      	bne.n	801a050 <AutoComplete+0xc4>
            if (minLen == 0) {
 801a006:	69bb      	ldr	r3, [r7, #24]
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d10b      	bne.n	801a024 <AutoComplete+0x98>
                namePtr = cmdName;
 801a00c:	68bb      	ldr	r3, [r7, #8]
 801a00e:	613b      	str	r3, [r7, #16]
                minLen = StrLen(namePtr);
 801a010:	6938      	ldr	r0, [r7, #16]
 801a012:	f000 f868 	bl	801a0e6 <StrLen>
 801a016:	61b8      	str	r0, [r7, #24]
                /* Show possible matches */
                context->printf_data_func("%s\r\n", cmdName);
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a01c:	68b9      	ldr	r1, [r7, #8]
 801a01e:	481e      	ldr	r0, [pc, #120]	; (801a098 <AutoComplete+0x10c>)
 801a020:	4798      	blx	r3
                continue;
 801a022:	e015      	b.n	801a050 <AutoComplete+0xc4>
            }
            len = StrCompare(namePtr, cmdName, StrLen(namePtr));
 801a024:	6938      	ldr	r0, [r7, #16]
 801a026:	f000 f85e 	bl	801a0e6 <StrLen>
 801a02a:	4603      	mov	r3, r0
 801a02c:	461a      	mov	r2, r3
 801a02e:	68b9      	ldr	r1, [r7, #8]
 801a030:	6938      	ldr	r0, [r7, #16]
 801a032:	f000 f870 	bl	801a116 <StrCompare>
 801a036:	61f8      	str	r0, [r7, #28]
            if (len < 0) {
 801a038:	69fb      	ldr	r3, [r7, #28]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	da02      	bge.n	801a044 <AutoComplete+0xb8>
                len = len * (-1);
 801a03e:	69fb      	ldr	r3, [r7, #28]
 801a040:	425b      	negs	r3, r3
 801a042:	61fb      	str	r3, [r7, #28]
            }
            if (len < minLen) {
 801a044:	69fa      	ldr	r2, [r7, #28]
 801a046:	69bb      	ldr	r3, [r7, #24]
 801a048:	429a      	cmp	r2, r3
 801a04a:	da01      	bge.n	801a050 <AutoComplete+0xc4>
                minLen = len;
 801a04c:	69fb      	ldr	r3, [r7, #28]
 801a04e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < g_RegisteredCommands.numberOfCommandInList; i++) {
 801a050:	7dfb      	ldrb	r3, [r7, #23]
 801a052:	3301      	adds	r3, #1
 801a054:	75fb      	strb	r3, [r7, #23]
 801a056:	4b0f      	ldr	r3, [pc, #60]	; (801a094 <AutoComplete+0x108>)
 801a058:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a05c:	7dfa      	ldrb	r2, [r7, #23]
 801a05e:	429a      	cmp	r2, r3
 801a060:	d3b9      	bcc.n	8019fd6 <AutoComplete+0x4a>
            }
        }
    }
    /* Auto complete string */
    if (namePtr) {
 801a062:	693b      	ldr	r3, [r7, #16]
 801a064:	2b00      	cmp	r3, #0
 801a066:	d006      	beq.n	801a076 <AutoComplete+0xea>
        StrCopy(context->line, namePtr, minLen);
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	3305      	adds	r3, #5
 801a06c:	69ba      	ldr	r2, [r7, #24]
 801a06e:	6939      	ldr	r1, [r7, #16]
 801a070:	4618      	mov	r0, r3
 801a072:	f000 f815 	bl	801a0a0 <StrCopy>
    }
    context->printf_data_func("%s%s", context->prompt, context->line);
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a07a:	687a      	ldr	r2, [r7, #4]
 801a07c:	6811      	ldr	r1, [r2, #0]
 801a07e:	687a      	ldr	r2, [r7, #4]
 801a080:	3205      	adds	r2, #5
 801a082:	4806      	ldr	r0, [pc, #24]	; (801a09c <AutoComplete+0x110>)
 801a084:	4798      	blx	r3
    return;
 801a086:	e000      	b.n	801a08a <AutoComplete+0xfe>
        return;
 801a088:	bf00      	nop
}
 801a08a:	3724      	adds	r7, #36	; 0x24
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd90      	pop	{r4, r7, pc}
 801a090:	0801f42c 	.word	0x0801f42c
 801a094:	200118bc 	.word	0x200118bc
 801a098:	0801f490 	.word	0x0801f490
 801a09c:	0801f498 	.word	0x0801f498

0801a0a0 <StrCopy>:

static char *StrCopy(char *dest, const char *src, int32_t count)
{
 801a0a0:	b480      	push	{r7}
 801a0a2:	b087      	sub	sp, #28
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	60f8      	str	r0, [r7, #12]
 801a0a8:	60b9      	str	r1, [r7, #8]
 801a0aa:	607a      	str	r2, [r7, #4]
    char *ret = dest;
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	613b      	str	r3, [r7, #16]
    int32_t i = 0;
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	617b      	str	r3, [r7, #20]

    for (i = 0; i < count; i++) {
 801a0b4:	2300      	movs	r3, #0
 801a0b6:	617b      	str	r3, [r7, #20]
 801a0b8:	e00a      	b.n	801a0d0 <StrCopy+0x30>
        dest[i] = src[i];
 801a0ba:	697b      	ldr	r3, [r7, #20]
 801a0bc:	68ba      	ldr	r2, [r7, #8]
 801a0be:	441a      	add	r2, r3
 801a0c0:	697b      	ldr	r3, [r7, #20]
 801a0c2:	68f9      	ldr	r1, [r7, #12]
 801a0c4:	440b      	add	r3, r1
 801a0c6:	7812      	ldrb	r2, [r2, #0]
 801a0c8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++) {
 801a0ca:	697b      	ldr	r3, [r7, #20]
 801a0cc:	3301      	adds	r3, #1
 801a0ce:	617b      	str	r3, [r7, #20]
 801a0d0:	697a      	ldr	r2, [r7, #20]
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	429a      	cmp	r2, r3
 801a0d6:	dbf0      	blt.n	801a0ba <StrCopy+0x1a>
    }

    return ret;
 801a0d8:	693b      	ldr	r3, [r7, #16]
}
 801a0da:	4618      	mov	r0, r3
 801a0dc:	371c      	adds	r7, #28
 801a0de:	46bd      	mov	sp, r7
 801a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e4:	4770      	bx	lr

0801a0e6 <StrLen>:

static int32_t StrLen(const char *str)
{
 801a0e6:	b480      	push	{r7}
 801a0e8:	b085      	sub	sp, #20
 801a0ea:	af00      	add	r7, sp, #0
 801a0ec:	6078      	str	r0, [r7, #4]
    int32_t i = 0;
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	60fb      	str	r3, [r7, #12]

    while (*str) {
 801a0f2:	e005      	b.n	801a100 <StrLen+0x1a>
        str++;
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	3301      	adds	r3, #1
 801a0f8:	607b      	str	r3, [r7, #4]
        i++;
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	3301      	adds	r3, #1
 801a0fe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	781b      	ldrb	r3, [r3, #0]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d1f5      	bne.n	801a0f4 <StrLen+0xe>
    }
    return i;
 801a108:	68fb      	ldr	r3, [r7, #12]
}
 801a10a:	4618      	mov	r0, r3
 801a10c:	3714      	adds	r7, #20
 801a10e:	46bd      	mov	sp, r7
 801a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a114:	4770      	bx	lr

0801a116 <StrCompare>:

static int32_t StrCompare(const char *str1, const char *str2, int32_t count)
{
 801a116:	b480      	push	{r7}
 801a118:	b085      	sub	sp, #20
 801a11a:	af00      	add	r7, sp, #0
 801a11c:	60f8      	str	r0, [r7, #12]
 801a11e:	60b9      	str	r1, [r7, #8]
 801a120:	607a      	str	r2, [r7, #4]
    while (count--) {
 801a122:	e012      	b.n	801a14a <StrCompare+0x34>
        if (*str1++ != *str2++) {
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	1c5a      	adds	r2, r3, #1
 801a128:	60fa      	str	r2, [r7, #12]
 801a12a:	781a      	ldrb	r2, [r3, #0]
 801a12c:	68bb      	ldr	r3, [r7, #8]
 801a12e:	1c59      	adds	r1, r3, #1
 801a130:	60b9      	str	r1, [r7, #8]
 801a132:	781b      	ldrb	r3, [r3, #0]
 801a134:	429a      	cmp	r2, r3
 801a136:	d008      	beq.n	801a14a <StrCompare+0x34>
            return *(unsigned char *)(str1 - 1) - *(unsigned char *)(str2 - 1);
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	3b01      	subs	r3, #1
 801a13c:	781b      	ldrb	r3, [r3, #0]
 801a13e:	461a      	mov	r2, r3
 801a140:	68bb      	ldr	r3, [r7, #8]
 801a142:	3b01      	subs	r3, #1
 801a144:	781b      	ldrb	r3, [r3, #0]
 801a146:	1ad3      	subs	r3, r2, r3
 801a148:	e005      	b.n	801a156 <StrCompare+0x40>
    while (count--) {
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	1e5a      	subs	r2, r3, #1
 801a14e:	607a      	str	r2, [r7, #4]
 801a150:	2b00      	cmp	r3, #0
 801a152:	d1e7      	bne.n	801a124 <StrCompare+0xe>
        }
    }
    return 0;
 801a154:	2300      	movs	r3, #0
}
 801a156:	4618      	mov	r0, r3
 801a158:	3714      	adds	r7, #20
 801a15a:	46bd      	mov	sp, r7
 801a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a160:	4770      	bx	lr
	...

0801a164 <ParseLine>:

static int32_t ParseLine(const char *cmd, uint32_t len, char *argv[SHELL_MAX_ARGS])
{
 801a164:	b580      	push	{r7, lr}
 801a166:	b088      	sub	sp, #32
 801a168:	af00      	add	r7, sp, #0
 801a16a:	60f8      	str	r0, [r7, #12]
 801a16c:	60b9      	str	r1, [r7, #8]
 801a16e:	607a      	str	r2, [r7, #4]
    uint32_t argc;
    char *p;
    uint32_t position;

    /* Init params */
    memset(g_paramBuffer, '\0', len + 1);
 801a170:	68bb      	ldr	r3, [r7, #8]
 801a172:	3301      	adds	r3, #1
 801a174:	461a      	mov	r2, r3
 801a176:	2100      	movs	r1, #0
 801a178:	4838      	ldr	r0, [pc, #224]	; (801a25c <ParseLine+0xf8>)
 801a17a:	f000 fa3f 	bl	801a5fc <memset>
    StrCopy(g_paramBuffer, cmd, len);
 801a17e:	68bb      	ldr	r3, [r7, #8]
 801a180:	461a      	mov	r2, r3
 801a182:	68f9      	ldr	r1, [r7, #12]
 801a184:	4835      	ldr	r0, [pc, #212]	; (801a25c <ParseLine+0xf8>)
 801a186:	f7ff ff8b 	bl	801a0a0 <StrCopy>

    p = g_paramBuffer;
 801a18a:	4b34      	ldr	r3, [pc, #208]	; (801a25c <ParseLine+0xf8>)
 801a18c:	61bb      	str	r3, [r7, #24]
    position = 0;
 801a18e:	2300      	movs	r3, #0
 801a190:	617b      	str	r3, [r7, #20]
    argc = 0;
 801a192:	2300      	movs	r3, #0
 801a194:	61fb      	str	r3, [r7, #28]

    while (position < len) {
 801a196:	e058      	b.n	801a24a <ParseLine+0xe6>
        /* Skip all blanks */
        while (((char)(*p) == ' ') && (position < len)) {
            *p = '\0';
 801a198:	69bb      	ldr	r3, [r7, #24]
 801a19a:	2200      	movs	r2, #0
 801a19c:	701a      	strb	r2, [r3, #0]
            p++;
 801a19e:	69bb      	ldr	r3, [r7, #24]
 801a1a0:	3301      	adds	r3, #1
 801a1a2:	61bb      	str	r3, [r7, #24]
            position++;
 801a1a4:	697b      	ldr	r3, [r7, #20]
 801a1a6:	3301      	adds	r3, #1
 801a1a8:	617b      	str	r3, [r7, #20]
        while (((char)(*p) == ' ') && (position < len)) {
 801a1aa:	69bb      	ldr	r3, [r7, #24]
 801a1ac:	781b      	ldrb	r3, [r3, #0]
 801a1ae:	2b20      	cmp	r3, #32
 801a1b0:	d103      	bne.n	801a1ba <ParseLine+0x56>
 801a1b2:	697a      	ldr	r2, [r7, #20]
 801a1b4:	68bb      	ldr	r3, [r7, #8]
 801a1b6:	429a      	cmp	r2, r3
 801a1b8:	d3ee      	bcc.n	801a198 <ParseLine+0x34>
        }
        /* Process begin of a string */
        if (*p == '"') {
 801a1ba:	69bb      	ldr	r3, [r7, #24]
 801a1bc:	781b      	ldrb	r3, [r3, #0]
 801a1be:	2b22      	cmp	r3, #34	; 0x22
 801a1c0:	d127      	bne.n	801a212 <ParseLine+0xae>
            p++;
 801a1c2:	69bb      	ldr	r3, [r7, #24]
 801a1c4:	3301      	adds	r3, #1
 801a1c6:	61bb      	str	r3, [r7, #24]
            position++;
 801a1c8:	697b      	ldr	r3, [r7, #20]
 801a1ca:	3301      	adds	r3, #1
 801a1cc:	617b      	str	r3, [r7, #20]
            argv[argc] = p;
 801a1ce:	69fb      	ldr	r3, [r7, #28]
 801a1d0:	009b      	lsls	r3, r3, #2
 801a1d2:	687a      	ldr	r2, [r7, #4]
 801a1d4:	4413      	add	r3, r2
 801a1d6:	69ba      	ldr	r2, [r7, #24]
 801a1d8:	601a      	str	r2, [r3, #0]
            argc++;
 801a1da:	69fb      	ldr	r3, [r7, #28]
 801a1dc:	3301      	adds	r3, #1
 801a1de:	61fb      	str	r3, [r7, #28]
            /* Skip this string */
            while ((*p != '"') && (position < len)) {
 801a1e0:	e005      	b.n	801a1ee <ParseLine+0x8a>
                p++;
 801a1e2:	69bb      	ldr	r3, [r7, #24]
 801a1e4:	3301      	adds	r3, #1
 801a1e6:	61bb      	str	r3, [r7, #24]
                position++;
 801a1e8:	697b      	ldr	r3, [r7, #20]
 801a1ea:	3301      	adds	r3, #1
 801a1ec:	617b      	str	r3, [r7, #20]
            while ((*p != '"') && (position < len)) {
 801a1ee:	69bb      	ldr	r3, [r7, #24]
 801a1f0:	781b      	ldrb	r3, [r3, #0]
 801a1f2:	2b22      	cmp	r3, #34	; 0x22
 801a1f4:	d003      	beq.n	801a1fe <ParseLine+0x9a>
 801a1f6:	697a      	ldr	r2, [r7, #20]
 801a1f8:	68bb      	ldr	r3, [r7, #8]
 801a1fa:	429a      	cmp	r2, r3
 801a1fc:	d3f1      	bcc.n	801a1e2 <ParseLine+0x7e>
            }
            /* Skip '"' */
            *p = '\0';
 801a1fe:	69bb      	ldr	r3, [r7, #24]
 801a200:	2200      	movs	r2, #0
 801a202:	701a      	strb	r2, [r3, #0]
            p++;
 801a204:	69bb      	ldr	r3, [r7, #24]
 801a206:	3301      	adds	r3, #1
 801a208:	61bb      	str	r3, [r7, #24]
            position++;
 801a20a:	697b      	ldr	r3, [r7, #20]
 801a20c:	3301      	adds	r3, #1
 801a20e:	617b      	str	r3, [r7, #20]
 801a210:	e01b      	b.n	801a24a <ParseLine+0xe6>
        } else /* Normal char */ {
            argv[argc] = p;
 801a212:	69fb      	ldr	r3, [r7, #28]
 801a214:	009b      	lsls	r3, r3, #2
 801a216:	687a      	ldr	r2, [r7, #4]
 801a218:	4413      	add	r3, r2
 801a21a:	69ba      	ldr	r2, [r7, #24]
 801a21c:	601a      	str	r2, [r3, #0]
            argc++;
 801a21e:	69fb      	ldr	r3, [r7, #28]
 801a220:	3301      	adds	r3, #1
 801a222:	61fb      	str	r3, [r7, #28]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len)) {
 801a224:	e005      	b.n	801a232 <ParseLine+0xce>
                p++;
 801a226:	69bb      	ldr	r3, [r7, #24]
 801a228:	3301      	adds	r3, #1
 801a22a:	61bb      	str	r3, [r7, #24]
                position++;
 801a22c:	697b      	ldr	r3, [r7, #20]
 801a22e:	3301      	adds	r3, #1
 801a230:	617b      	str	r3, [r7, #20]
            while (((char)*p != ' ') && ((char)*p != '\t') && (position < len)) {
 801a232:	69bb      	ldr	r3, [r7, #24]
 801a234:	781b      	ldrb	r3, [r3, #0]
 801a236:	2b20      	cmp	r3, #32
 801a238:	d007      	beq.n	801a24a <ParseLine+0xe6>
 801a23a:	69bb      	ldr	r3, [r7, #24]
 801a23c:	781b      	ldrb	r3, [r3, #0]
 801a23e:	2b09      	cmp	r3, #9
 801a240:	d003      	beq.n	801a24a <ParseLine+0xe6>
 801a242:	697a      	ldr	r2, [r7, #20]
 801a244:	68bb      	ldr	r3, [r7, #8]
 801a246:	429a      	cmp	r2, r3
 801a248:	d3ed      	bcc.n	801a226 <ParseLine+0xc2>
    while (position < len) {
 801a24a:	697a      	ldr	r2, [r7, #20]
 801a24c:	68bb      	ldr	r3, [r7, #8]
 801a24e:	429a      	cmp	r2, r3
 801a250:	d3ab      	bcc.n	801a1aa <ParseLine+0x46>
            }
        }
    }
    return argc;
 801a252:	69fb      	ldr	r3, [r7, #28]
}
 801a254:	4618      	mov	r0, r3
 801a256:	3720      	adds	r7, #32
 801a258:	46bd      	mov	sp, r7
 801a25a:	bd80      	pop	{r7, pc}
 801a25c:	20011960 	.word	0x20011960

0801a260 <SHELL_RegisterCommand>:

int32_t SHELL_RegisterCommand(const shell_command_context_t *command_context)
{
 801a260:	b480      	push	{r7}
 801a262:	b085      	sub	sp, #20
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
    int32_t result = 0;
 801a268:	2300      	movs	r3, #0
 801a26a:	60fb      	str	r3, [r7, #12]

    /* If have room  in command list */
    if (g_RegisteredCommands.numberOfCommandInList < SHELL_MAX_CMD) {
 801a26c:	4b0e      	ldr	r3, [pc, #56]	; (801a2a8 <SHELL_RegisterCommand+0x48>)
 801a26e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a272:	2b27      	cmp	r3, #39	; 0x27
 801a274:	d80d      	bhi.n	801a292 <SHELL_RegisterCommand+0x32>
        g_RegisteredCommands.CommandList[g_RegisteredCommands.numberOfCommandInList++] = command_context;
 801a276:	4b0c      	ldr	r3, [pc, #48]	; (801a2a8 <SHELL_RegisterCommand+0x48>)
 801a278:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 801a27c:	1c5a      	adds	r2, r3, #1
 801a27e:	b2d1      	uxtb	r1, r2
 801a280:	4a09      	ldr	r2, [pc, #36]	; (801a2a8 <SHELL_RegisterCommand+0x48>)
 801a282:	f882 10a0 	strb.w	r1, [r2, #160]	; 0xa0
 801a286:	4619      	mov	r1, r3
 801a288:	4a07      	ldr	r2, [pc, #28]	; (801a2a8 <SHELL_RegisterCommand+0x48>)
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a290:	e002      	b.n	801a298 <SHELL_RegisterCommand+0x38>
    } else {
        result = -1;
 801a292:	f04f 33ff 	mov.w	r3, #4294967295
 801a296:	60fb      	str	r3, [r7, #12]
    }
    return result;
 801a298:	68fb      	ldr	r3, [r7, #12]
}
 801a29a:	4618      	mov	r0, r3
 801a29c:	3714      	adds	r7, #20
 801a29e:	46bd      	mov	sp, r7
 801a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2a4:	4770      	bx	lr
 801a2a6:	bf00      	nop
 801a2a8:	200118bc 	.word	0x200118bc

0801a2ac <GetChar>:

static uint8_t GetChar(p_shell_context_t context)
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b084      	sub	sp, #16
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	6078      	str	r0, [r7, #4]
    uint8_t ch;

#if SHELL_USE_FILE_STREAM
    ch = fgetc(context->STDIN);
#else
    context->recv_data_func(&ch, 1U);
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a2b8:	f107 020f 	add.w	r2, r7, #15
 801a2bc:	2101      	movs	r1, #1
 801a2be:	4610      	mov	r0, r2
 801a2c0:	4798      	blx	r3
#endif
    return ch;
 801a2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a2c4:	4618      	mov	r0, r3
 801a2c6:	3710      	adds	r7, #16
 801a2c8:	46bd      	mov	sp, r7
 801a2ca:	bd80      	pop	{r7, pc}

0801a2cc <__assert_func>:
 801a2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a2ce:	4614      	mov	r4, r2
 801a2d0:	461a      	mov	r2, r3
 801a2d2:	4b09      	ldr	r3, [pc, #36]	; (801a2f8 <__assert_func+0x2c>)
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	4605      	mov	r5, r0
 801a2d8:	68d8      	ldr	r0, [r3, #12]
 801a2da:	b14c      	cbz	r4, 801a2f0 <__assert_func+0x24>
 801a2dc:	4b07      	ldr	r3, [pc, #28]	; (801a2fc <__assert_func+0x30>)
 801a2de:	9100      	str	r1, [sp, #0]
 801a2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a2e4:	4906      	ldr	r1, [pc, #24]	; (801a300 <__assert_func+0x34>)
 801a2e6:	462b      	mov	r3, r5
 801a2e8:	f000 f8e8 	bl	801a4bc <fiprintf>
 801a2ec:	f000 ffdc 	bl	801b2a8 <abort>
 801a2f0:	4b04      	ldr	r3, [pc, #16]	; (801a304 <__assert_func+0x38>)
 801a2f2:	461c      	mov	r4, r3
 801a2f4:	e7f3      	b.n	801a2de <__assert_func+0x12>
 801a2f6:	bf00      	nop
 801a2f8:	200000e8 	.word	0x200000e8
 801a2fc:	0801f67b 	.word	0x0801f67b
 801a300:	0801f688 	.word	0x0801f688
 801a304:	0801f6b6 	.word	0x0801f6b6

0801a308 <atoi>:
 801a308:	220a      	movs	r2, #10
 801a30a:	2100      	movs	r1, #0
 801a30c:	f000 bed0 	b.w	801b0b0 <strtol>

0801a310 <std>:
 801a310:	2300      	movs	r3, #0
 801a312:	b510      	push	{r4, lr}
 801a314:	4604      	mov	r4, r0
 801a316:	e9c0 3300 	strd	r3, r3, [r0]
 801a31a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a31e:	6083      	str	r3, [r0, #8]
 801a320:	8181      	strh	r1, [r0, #12]
 801a322:	6643      	str	r3, [r0, #100]	; 0x64
 801a324:	81c2      	strh	r2, [r0, #14]
 801a326:	6183      	str	r3, [r0, #24]
 801a328:	4619      	mov	r1, r3
 801a32a:	2208      	movs	r2, #8
 801a32c:	305c      	adds	r0, #92	; 0x5c
 801a32e:	f000 f965 	bl	801a5fc <memset>
 801a332:	4b05      	ldr	r3, [pc, #20]	; (801a348 <std+0x38>)
 801a334:	6263      	str	r3, [r4, #36]	; 0x24
 801a336:	4b05      	ldr	r3, [pc, #20]	; (801a34c <std+0x3c>)
 801a338:	62a3      	str	r3, [r4, #40]	; 0x28
 801a33a:	4b05      	ldr	r3, [pc, #20]	; (801a350 <std+0x40>)
 801a33c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a33e:	4b05      	ldr	r3, [pc, #20]	; (801a354 <std+0x44>)
 801a340:	6224      	str	r4, [r4, #32]
 801a342:	6323      	str	r3, [r4, #48]	; 0x30
 801a344:	bd10      	pop	{r4, pc}
 801a346:	bf00      	nop
 801a348:	0801af21 	.word	0x0801af21
 801a34c:	0801af43 	.word	0x0801af43
 801a350:	0801af7b 	.word	0x0801af7b
 801a354:	0801af9f 	.word	0x0801af9f

0801a358 <_cleanup_r>:
 801a358:	4901      	ldr	r1, [pc, #4]	; (801a360 <_cleanup_r+0x8>)
 801a35a:	f000 b8c1 	b.w	801a4e0 <_fwalk_reent>
 801a35e:	bf00      	nop
 801a360:	0801b3f1 	.word	0x0801b3f1

0801a364 <__sfmoreglue>:
 801a364:	b570      	push	{r4, r5, r6, lr}
 801a366:	1e4a      	subs	r2, r1, #1
 801a368:	2568      	movs	r5, #104	; 0x68
 801a36a:	4355      	muls	r5, r2
 801a36c:	460e      	mov	r6, r1
 801a36e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a372:	f000 f99b 	bl	801a6ac <_malloc_r>
 801a376:	4604      	mov	r4, r0
 801a378:	b140      	cbz	r0, 801a38c <__sfmoreglue+0x28>
 801a37a:	2100      	movs	r1, #0
 801a37c:	e9c0 1600 	strd	r1, r6, [r0]
 801a380:	300c      	adds	r0, #12
 801a382:	60a0      	str	r0, [r4, #8]
 801a384:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a388:	f000 f938 	bl	801a5fc <memset>
 801a38c:	4620      	mov	r0, r4
 801a38e:	bd70      	pop	{r4, r5, r6, pc}

0801a390 <__sfp_lock_acquire>:
 801a390:	4801      	ldr	r0, [pc, #4]	; (801a398 <__sfp_lock_acquire+0x8>)
 801a392:	f000 b8ea 	b.w	801a56a <__retarget_lock_acquire_recursive>
 801a396:	bf00      	nop
 801a398:	200186e0 	.word	0x200186e0

0801a39c <__sfp_lock_release>:
 801a39c:	4801      	ldr	r0, [pc, #4]	; (801a3a4 <__sfp_lock_release+0x8>)
 801a39e:	f000 b8e5 	b.w	801a56c <__retarget_lock_release_recursive>
 801a3a2:	bf00      	nop
 801a3a4:	200186e0 	.word	0x200186e0

0801a3a8 <__sinit_lock_acquire>:
 801a3a8:	4801      	ldr	r0, [pc, #4]	; (801a3b0 <__sinit_lock_acquire+0x8>)
 801a3aa:	f000 b8de 	b.w	801a56a <__retarget_lock_acquire_recursive>
 801a3ae:	bf00      	nop
 801a3b0:	200186db 	.word	0x200186db

0801a3b4 <__sinit_lock_release>:
 801a3b4:	4801      	ldr	r0, [pc, #4]	; (801a3bc <__sinit_lock_release+0x8>)
 801a3b6:	f000 b8d9 	b.w	801a56c <__retarget_lock_release_recursive>
 801a3ba:	bf00      	nop
 801a3bc:	200186db 	.word	0x200186db

0801a3c0 <__sinit>:
 801a3c0:	b510      	push	{r4, lr}
 801a3c2:	4604      	mov	r4, r0
 801a3c4:	f7ff fff0 	bl	801a3a8 <__sinit_lock_acquire>
 801a3c8:	69a3      	ldr	r3, [r4, #24]
 801a3ca:	b11b      	cbz	r3, 801a3d4 <__sinit+0x14>
 801a3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3d0:	f7ff bff0 	b.w	801a3b4 <__sinit_lock_release>
 801a3d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a3d8:	6523      	str	r3, [r4, #80]	; 0x50
 801a3da:	4b13      	ldr	r3, [pc, #76]	; (801a428 <__sinit+0x68>)
 801a3dc:	4a13      	ldr	r2, [pc, #76]	; (801a42c <__sinit+0x6c>)
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	62a2      	str	r2, [r4, #40]	; 0x28
 801a3e2:	42a3      	cmp	r3, r4
 801a3e4:	bf04      	itt	eq
 801a3e6:	2301      	moveq	r3, #1
 801a3e8:	61a3      	streq	r3, [r4, #24]
 801a3ea:	4620      	mov	r0, r4
 801a3ec:	f000 f820 	bl	801a430 <__sfp>
 801a3f0:	6060      	str	r0, [r4, #4]
 801a3f2:	4620      	mov	r0, r4
 801a3f4:	f000 f81c 	bl	801a430 <__sfp>
 801a3f8:	60a0      	str	r0, [r4, #8]
 801a3fa:	4620      	mov	r0, r4
 801a3fc:	f000 f818 	bl	801a430 <__sfp>
 801a400:	2200      	movs	r2, #0
 801a402:	60e0      	str	r0, [r4, #12]
 801a404:	2104      	movs	r1, #4
 801a406:	6860      	ldr	r0, [r4, #4]
 801a408:	f7ff ff82 	bl	801a310 <std>
 801a40c:	68a0      	ldr	r0, [r4, #8]
 801a40e:	2201      	movs	r2, #1
 801a410:	2109      	movs	r1, #9
 801a412:	f7ff ff7d 	bl	801a310 <std>
 801a416:	68e0      	ldr	r0, [r4, #12]
 801a418:	2202      	movs	r2, #2
 801a41a:	2112      	movs	r1, #18
 801a41c:	f7ff ff78 	bl	801a310 <std>
 801a420:	2301      	movs	r3, #1
 801a422:	61a3      	str	r3, [r4, #24]
 801a424:	e7d2      	b.n	801a3cc <__sinit+0xc>
 801a426:	bf00      	nop
 801a428:	0801f818 	.word	0x0801f818
 801a42c:	0801a359 	.word	0x0801a359

0801a430 <__sfp>:
 801a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a432:	4607      	mov	r7, r0
 801a434:	f7ff ffac 	bl	801a390 <__sfp_lock_acquire>
 801a438:	4b1e      	ldr	r3, [pc, #120]	; (801a4b4 <__sfp+0x84>)
 801a43a:	681e      	ldr	r6, [r3, #0]
 801a43c:	69b3      	ldr	r3, [r6, #24]
 801a43e:	b913      	cbnz	r3, 801a446 <__sfp+0x16>
 801a440:	4630      	mov	r0, r6
 801a442:	f7ff ffbd 	bl	801a3c0 <__sinit>
 801a446:	3648      	adds	r6, #72	; 0x48
 801a448:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a44c:	3b01      	subs	r3, #1
 801a44e:	d503      	bpl.n	801a458 <__sfp+0x28>
 801a450:	6833      	ldr	r3, [r6, #0]
 801a452:	b30b      	cbz	r3, 801a498 <__sfp+0x68>
 801a454:	6836      	ldr	r6, [r6, #0]
 801a456:	e7f7      	b.n	801a448 <__sfp+0x18>
 801a458:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a45c:	b9d5      	cbnz	r5, 801a494 <__sfp+0x64>
 801a45e:	4b16      	ldr	r3, [pc, #88]	; (801a4b8 <__sfp+0x88>)
 801a460:	60e3      	str	r3, [r4, #12]
 801a462:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a466:	6665      	str	r5, [r4, #100]	; 0x64
 801a468:	f000 f87e 	bl	801a568 <__retarget_lock_init_recursive>
 801a46c:	f7ff ff96 	bl	801a39c <__sfp_lock_release>
 801a470:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a474:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a478:	6025      	str	r5, [r4, #0]
 801a47a:	61a5      	str	r5, [r4, #24]
 801a47c:	2208      	movs	r2, #8
 801a47e:	4629      	mov	r1, r5
 801a480:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a484:	f000 f8ba 	bl	801a5fc <memset>
 801a488:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a48c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a490:	4620      	mov	r0, r4
 801a492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a494:	3468      	adds	r4, #104	; 0x68
 801a496:	e7d9      	b.n	801a44c <__sfp+0x1c>
 801a498:	2104      	movs	r1, #4
 801a49a:	4638      	mov	r0, r7
 801a49c:	f7ff ff62 	bl	801a364 <__sfmoreglue>
 801a4a0:	4604      	mov	r4, r0
 801a4a2:	6030      	str	r0, [r6, #0]
 801a4a4:	2800      	cmp	r0, #0
 801a4a6:	d1d5      	bne.n	801a454 <__sfp+0x24>
 801a4a8:	f7ff ff78 	bl	801a39c <__sfp_lock_release>
 801a4ac:	230c      	movs	r3, #12
 801a4ae:	603b      	str	r3, [r7, #0]
 801a4b0:	e7ee      	b.n	801a490 <__sfp+0x60>
 801a4b2:	bf00      	nop
 801a4b4:	0801f818 	.word	0x0801f818
 801a4b8:	ffff0001 	.word	0xffff0001

0801a4bc <fiprintf>:
 801a4bc:	b40e      	push	{r1, r2, r3}
 801a4be:	b503      	push	{r0, r1, lr}
 801a4c0:	4601      	mov	r1, r0
 801a4c2:	ab03      	add	r3, sp, #12
 801a4c4:	4805      	ldr	r0, [pc, #20]	; (801a4dc <fiprintf+0x20>)
 801a4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4ca:	6800      	ldr	r0, [r0, #0]
 801a4cc:	9301      	str	r3, [sp, #4]
 801a4ce:	f000 f971 	bl	801a7b4 <_vfiprintf_r>
 801a4d2:	b002      	add	sp, #8
 801a4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a4d8:	b003      	add	sp, #12
 801a4da:	4770      	bx	lr
 801a4dc:	200000e8 	.word	0x200000e8

0801a4e0 <_fwalk_reent>:
 801a4e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a4e4:	4606      	mov	r6, r0
 801a4e6:	4688      	mov	r8, r1
 801a4e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a4ec:	2700      	movs	r7, #0
 801a4ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a4f2:	f1b9 0901 	subs.w	r9, r9, #1
 801a4f6:	d505      	bpl.n	801a504 <_fwalk_reent+0x24>
 801a4f8:	6824      	ldr	r4, [r4, #0]
 801a4fa:	2c00      	cmp	r4, #0
 801a4fc:	d1f7      	bne.n	801a4ee <_fwalk_reent+0xe>
 801a4fe:	4638      	mov	r0, r7
 801a500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a504:	89ab      	ldrh	r3, [r5, #12]
 801a506:	2b01      	cmp	r3, #1
 801a508:	d907      	bls.n	801a51a <_fwalk_reent+0x3a>
 801a50a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a50e:	3301      	adds	r3, #1
 801a510:	d003      	beq.n	801a51a <_fwalk_reent+0x3a>
 801a512:	4629      	mov	r1, r5
 801a514:	4630      	mov	r0, r6
 801a516:	47c0      	blx	r8
 801a518:	4307      	orrs	r7, r0
 801a51a:	3568      	adds	r5, #104	; 0x68
 801a51c:	e7e9      	b.n	801a4f2 <_fwalk_reent+0x12>
	...

0801a520 <__libc_init_array>:
 801a520:	b570      	push	{r4, r5, r6, lr}
 801a522:	4d0d      	ldr	r5, [pc, #52]	; (801a558 <__libc_init_array+0x38>)
 801a524:	4c0d      	ldr	r4, [pc, #52]	; (801a55c <__libc_init_array+0x3c>)
 801a526:	1b64      	subs	r4, r4, r5
 801a528:	10a4      	asrs	r4, r4, #2
 801a52a:	2600      	movs	r6, #0
 801a52c:	42a6      	cmp	r6, r4
 801a52e:	d109      	bne.n	801a544 <__libc_init_array+0x24>
 801a530:	4d0b      	ldr	r5, [pc, #44]	; (801a560 <__libc_init_array+0x40>)
 801a532:	4c0c      	ldr	r4, [pc, #48]	; (801a564 <__libc_init_array+0x44>)
 801a534:	f001 fa1c 	bl	801b970 <_init>
 801a538:	1b64      	subs	r4, r4, r5
 801a53a:	10a4      	asrs	r4, r4, #2
 801a53c:	2600      	movs	r6, #0
 801a53e:	42a6      	cmp	r6, r4
 801a540:	d105      	bne.n	801a54e <__libc_init_array+0x2e>
 801a542:	bd70      	pop	{r4, r5, r6, pc}
 801a544:	f855 3b04 	ldr.w	r3, [r5], #4
 801a548:	4798      	blx	r3
 801a54a:	3601      	adds	r6, #1
 801a54c:	e7ee      	b.n	801a52c <__libc_init_array+0xc>
 801a54e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a552:	4798      	blx	r3
 801a554:	3601      	adds	r6, #1
 801a556:	e7f2      	b.n	801a53e <__libc_init_array+0x1e>
 801a558:	0801f8d0 	.word	0x0801f8d0
 801a55c:	0801f8d0 	.word	0x0801f8d0
 801a560:	0801f8d0 	.word	0x0801f8d0
 801a564:	0801f8d4 	.word	0x0801f8d4

0801a568 <__retarget_lock_init_recursive>:
 801a568:	4770      	bx	lr

0801a56a <__retarget_lock_acquire_recursive>:
 801a56a:	4770      	bx	lr

0801a56c <__retarget_lock_release_recursive>:
 801a56c:	4770      	bx	lr
	...

0801a570 <malloc>:
 801a570:	4b02      	ldr	r3, [pc, #8]	; (801a57c <malloc+0xc>)
 801a572:	4601      	mov	r1, r0
 801a574:	6818      	ldr	r0, [r3, #0]
 801a576:	f000 b899 	b.w	801a6ac <_malloc_r>
 801a57a:	bf00      	nop
 801a57c:	200000e8 	.word	0x200000e8

0801a580 <free>:
 801a580:	4b02      	ldr	r3, [pc, #8]	; (801a58c <free+0xc>)
 801a582:	4601      	mov	r1, r0
 801a584:	6818      	ldr	r0, [r3, #0]
 801a586:	f000 b841 	b.w	801a60c <_free_r>
 801a58a:	bf00      	nop
 801a58c:	200000e8 	.word	0x200000e8

0801a590 <memcmp>:
 801a590:	b530      	push	{r4, r5, lr}
 801a592:	3901      	subs	r1, #1
 801a594:	2400      	movs	r4, #0
 801a596:	42a2      	cmp	r2, r4
 801a598:	d101      	bne.n	801a59e <memcmp+0xe>
 801a59a:	2000      	movs	r0, #0
 801a59c:	e005      	b.n	801a5aa <memcmp+0x1a>
 801a59e:	5d03      	ldrb	r3, [r0, r4]
 801a5a0:	3401      	adds	r4, #1
 801a5a2:	5d0d      	ldrb	r5, [r1, r4]
 801a5a4:	42ab      	cmp	r3, r5
 801a5a6:	d0f6      	beq.n	801a596 <memcmp+0x6>
 801a5a8:	1b58      	subs	r0, r3, r5
 801a5aa:	bd30      	pop	{r4, r5, pc}

0801a5ac <memcpy>:
 801a5ac:	440a      	add	r2, r1
 801a5ae:	4291      	cmp	r1, r2
 801a5b0:	f100 33ff 	add.w	r3, r0, #4294967295
 801a5b4:	d100      	bne.n	801a5b8 <memcpy+0xc>
 801a5b6:	4770      	bx	lr
 801a5b8:	b510      	push	{r4, lr}
 801a5ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a5be:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a5c2:	4291      	cmp	r1, r2
 801a5c4:	d1f9      	bne.n	801a5ba <memcpy+0xe>
 801a5c6:	bd10      	pop	{r4, pc}

0801a5c8 <memmove>:
 801a5c8:	4288      	cmp	r0, r1
 801a5ca:	b510      	push	{r4, lr}
 801a5cc:	eb01 0402 	add.w	r4, r1, r2
 801a5d0:	d902      	bls.n	801a5d8 <memmove+0x10>
 801a5d2:	4284      	cmp	r4, r0
 801a5d4:	4623      	mov	r3, r4
 801a5d6:	d807      	bhi.n	801a5e8 <memmove+0x20>
 801a5d8:	1e43      	subs	r3, r0, #1
 801a5da:	42a1      	cmp	r1, r4
 801a5dc:	d008      	beq.n	801a5f0 <memmove+0x28>
 801a5de:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a5e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a5e6:	e7f8      	b.n	801a5da <memmove+0x12>
 801a5e8:	4402      	add	r2, r0
 801a5ea:	4601      	mov	r1, r0
 801a5ec:	428a      	cmp	r2, r1
 801a5ee:	d100      	bne.n	801a5f2 <memmove+0x2a>
 801a5f0:	bd10      	pop	{r4, pc}
 801a5f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a5f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a5fa:	e7f7      	b.n	801a5ec <memmove+0x24>

0801a5fc <memset>:
 801a5fc:	4402      	add	r2, r0
 801a5fe:	4603      	mov	r3, r0
 801a600:	4293      	cmp	r3, r2
 801a602:	d100      	bne.n	801a606 <memset+0xa>
 801a604:	4770      	bx	lr
 801a606:	f803 1b01 	strb.w	r1, [r3], #1
 801a60a:	e7f9      	b.n	801a600 <memset+0x4>

0801a60c <_free_r>:
 801a60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a60e:	2900      	cmp	r1, #0
 801a610:	d048      	beq.n	801a6a4 <_free_r+0x98>
 801a612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a616:	9001      	str	r0, [sp, #4]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	f1a1 0404 	sub.w	r4, r1, #4
 801a61e:	bfb8      	it	lt
 801a620:	18e4      	addlt	r4, r4, r3
 801a622:	f000 ff97 	bl	801b554 <__malloc_lock>
 801a626:	4a20      	ldr	r2, [pc, #128]	; (801a6a8 <_free_r+0x9c>)
 801a628:	9801      	ldr	r0, [sp, #4]
 801a62a:	6813      	ldr	r3, [r2, #0]
 801a62c:	4615      	mov	r5, r2
 801a62e:	b933      	cbnz	r3, 801a63e <_free_r+0x32>
 801a630:	6063      	str	r3, [r4, #4]
 801a632:	6014      	str	r4, [r2, #0]
 801a634:	b003      	add	sp, #12
 801a636:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a63a:	f000 bf91 	b.w	801b560 <__malloc_unlock>
 801a63e:	42a3      	cmp	r3, r4
 801a640:	d90b      	bls.n	801a65a <_free_r+0x4e>
 801a642:	6821      	ldr	r1, [r4, #0]
 801a644:	1862      	adds	r2, r4, r1
 801a646:	4293      	cmp	r3, r2
 801a648:	bf04      	itt	eq
 801a64a:	681a      	ldreq	r2, [r3, #0]
 801a64c:	685b      	ldreq	r3, [r3, #4]
 801a64e:	6063      	str	r3, [r4, #4]
 801a650:	bf04      	itt	eq
 801a652:	1852      	addeq	r2, r2, r1
 801a654:	6022      	streq	r2, [r4, #0]
 801a656:	602c      	str	r4, [r5, #0]
 801a658:	e7ec      	b.n	801a634 <_free_r+0x28>
 801a65a:	461a      	mov	r2, r3
 801a65c:	685b      	ldr	r3, [r3, #4]
 801a65e:	b10b      	cbz	r3, 801a664 <_free_r+0x58>
 801a660:	42a3      	cmp	r3, r4
 801a662:	d9fa      	bls.n	801a65a <_free_r+0x4e>
 801a664:	6811      	ldr	r1, [r2, #0]
 801a666:	1855      	adds	r5, r2, r1
 801a668:	42a5      	cmp	r5, r4
 801a66a:	d10b      	bne.n	801a684 <_free_r+0x78>
 801a66c:	6824      	ldr	r4, [r4, #0]
 801a66e:	4421      	add	r1, r4
 801a670:	1854      	adds	r4, r2, r1
 801a672:	42a3      	cmp	r3, r4
 801a674:	6011      	str	r1, [r2, #0]
 801a676:	d1dd      	bne.n	801a634 <_free_r+0x28>
 801a678:	681c      	ldr	r4, [r3, #0]
 801a67a:	685b      	ldr	r3, [r3, #4]
 801a67c:	6053      	str	r3, [r2, #4]
 801a67e:	4421      	add	r1, r4
 801a680:	6011      	str	r1, [r2, #0]
 801a682:	e7d7      	b.n	801a634 <_free_r+0x28>
 801a684:	d902      	bls.n	801a68c <_free_r+0x80>
 801a686:	230c      	movs	r3, #12
 801a688:	6003      	str	r3, [r0, #0]
 801a68a:	e7d3      	b.n	801a634 <_free_r+0x28>
 801a68c:	6825      	ldr	r5, [r4, #0]
 801a68e:	1961      	adds	r1, r4, r5
 801a690:	428b      	cmp	r3, r1
 801a692:	bf04      	itt	eq
 801a694:	6819      	ldreq	r1, [r3, #0]
 801a696:	685b      	ldreq	r3, [r3, #4]
 801a698:	6063      	str	r3, [r4, #4]
 801a69a:	bf04      	itt	eq
 801a69c:	1949      	addeq	r1, r1, r5
 801a69e:	6021      	streq	r1, [r4, #0]
 801a6a0:	6054      	str	r4, [r2, #4]
 801a6a2:	e7c7      	b.n	801a634 <_free_r+0x28>
 801a6a4:	b003      	add	sp, #12
 801a6a6:	bd30      	pop	{r4, r5, pc}
 801a6a8:	200119a8 	.word	0x200119a8

0801a6ac <_malloc_r>:
 801a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ae:	1ccd      	adds	r5, r1, #3
 801a6b0:	f025 0503 	bic.w	r5, r5, #3
 801a6b4:	3508      	adds	r5, #8
 801a6b6:	2d0c      	cmp	r5, #12
 801a6b8:	bf38      	it	cc
 801a6ba:	250c      	movcc	r5, #12
 801a6bc:	2d00      	cmp	r5, #0
 801a6be:	4606      	mov	r6, r0
 801a6c0:	db01      	blt.n	801a6c6 <_malloc_r+0x1a>
 801a6c2:	42a9      	cmp	r1, r5
 801a6c4:	d903      	bls.n	801a6ce <_malloc_r+0x22>
 801a6c6:	230c      	movs	r3, #12
 801a6c8:	6033      	str	r3, [r6, #0]
 801a6ca:	2000      	movs	r0, #0
 801a6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6ce:	f000 ff41 	bl	801b554 <__malloc_lock>
 801a6d2:	4921      	ldr	r1, [pc, #132]	; (801a758 <_malloc_r+0xac>)
 801a6d4:	680a      	ldr	r2, [r1, #0]
 801a6d6:	4614      	mov	r4, r2
 801a6d8:	b99c      	cbnz	r4, 801a702 <_malloc_r+0x56>
 801a6da:	4f20      	ldr	r7, [pc, #128]	; (801a75c <_malloc_r+0xb0>)
 801a6dc:	683b      	ldr	r3, [r7, #0]
 801a6de:	b923      	cbnz	r3, 801a6ea <_malloc_r+0x3e>
 801a6e0:	4621      	mov	r1, r4
 801a6e2:	4630      	mov	r0, r6
 801a6e4:	f000 fbec 	bl	801aec0 <_sbrk_r>
 801a6e8:	6038      	str	r0, [r7, #0]
 801a6ea:	4629      	mov	r1, r5
 801a6ec:	4630      	mov	r0, r6
 801a6ee:	f000 fbe7 	bl	801aec0 <_sbrk_r>
 801a6f2:	1c43      	adds	r3, r0, #1
 801a6f4:	d123      	bne.n	801a73e <_malloc_r+0x92>
 801a6f6:	230c      	movs	r3, #12
 801a6f8:	6033      	str	r3, [r6, #0]
 801a6fa:	4630      	mov	r0, r6
 801a6fc:	f000 ff30 	bl	801b560 <__malloc_unlock>
 801a700:	e7e3      	b.n	801a6ca <_malloc_r+0x1e>
 801a702:	6823      	ldr	r3, [r4, #0]
 801a704:	1b5b      	subs	r3, r3, r5
 801a706:	d417      	bmi.n	801a738 <_malloc_r+0x8c>
 801a708:	2b0b      	cmp	r3, #11
 801a70a:	d903      	bls.n	801a714 <_malloc_r+0x68>
 801a70c:	6023      	str	r3, [r4, #0]
 801a70e:	441c      	add	r4, r3
 801a710:	6025      	str	r5, [r4, #0]
 801a712:	e004      	b.n	801a71e <_malloc_r+0x72>
 801a714:	6863      	ldr	r3, [r4, #4]
 801a716:	42a2      	cmp	r2, r4
 801a718:	bf0c      	ite	eq
 801a71a:	600b      	streq	r3, [r1, #0]
 801a71c:	6053      	strne	r3, [r2, #4]
 801a71e:	4630      	mov	r0, r6
 801a720:	f000 ff1e 	bl	801b560 <__malloc_unlock>
 801a724:	f104 000b 	add.w	r0, r4, #11
 801a728:	1d23      	adds	r3, r4, #4
 801a72a:	f020 0007 	bic.w	r0, r0, #7
 801a72e:	1ac2      	subs	r2, r0, r3
 801a730:	d0cc      	beq.n	801a6cc <_malloc_r+0x20>
 801a732:	1a1b      	subs	r3, r3, r0
 801a734:	50a3      	str	r3, [r4, r2]
 801a736:	e7c9      	b.n	801a6cc <_malloc_r+0x20>
 801a738:	4622      	mov	r2, r4
 801a73a:	6864      	ldr	r4, [r4, #4]
 801a73c:	e7cc      	b.n	801a6d8 <_malloc_r+0x2c>
 801a73e:	1cc4      	adds	r4, r0, #3
 801a740:	f024 0403 	bic.w	r4, r4, #3
 801a744:	42a0      	cmp	r0, r4
 801a746:	d0e3      	beq.n	801a710 <_malloc_r+0x64>
 801a748:	1a21      	subs	r1, r4, r0
 801a74a:	4630      	mov	r0, r6
 801a74c:	f000 fbb8 	bl	801aec0 <_sbrk_r>
 801a750:	3001      	adds	r0, #1
 801a752:	d1dd      	bne.n	801a710 <_malloc_r+0x64>
 801a754:	e7cf      	b.n	801a6f6 <_malloc_r+0x4a>
 801a756:	bf00      	nop
 801a758:	200119a8 	.word	0x200119a8
 801a75c:	200119ac 	.word	0x200119ac

0801a760 <__sfputc_r>:
 801a760:	6893      	ldr	r3, [r2, #8]
 801a762:	3b01      	subs	r3, #1
 801a764:	2b00      	cmp	r3, #0
 801a766:	b410      	push	{r4}
 801a768:	6093      	str	r3, [r2, #8]
 801a76a:	da08      	bge.n	801a77e <__sfputc_r+0x1e>
 801a76c:	6994      	ldr	r4, [r2, #24]
 801a76e:	42a3      	cmp	r3, r4
 801a770:	db01      	blt.n	801a776 <__sfputc_r+0x16>
 801a772:	290a      	cmp	r1, #10
 801a774:	d103      	bne.n	801a77e <__sfputc_r+0x1e>
 801a776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a77a:	f000 bcc3 	b.w	801b104 <__swbuf_r>
 801a77e:	6813      	ldr	r3, [r2, #0]
 801a780:	1c58      	adds	r0, r3, #1
 801a782:	6010      	str	r0, [r2, #0]
 801a784:	7019      	strb	r1, [r3, #0]
 801a786:	4608      	mov	r0, r1
 801a788:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a78c:	4770      	bx	lr

0801a78e <__sfputs_r>:
 801a78e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a790:	4606      	mov	r6, r0
 801a792:	460f      	mov	r7, r1
 801a794:	4614      	mov	r4, r2
 801a796:	18d5      	adds	r5, r2, r3
 801a798:	42ac      	cmp	r4, r5
 801a79a:	d101      	bne.n	801a7a0 <__sfputs_r+0x12>
 801a79c:	2000      	movs	r0, #0
 801a79e:	e007      	b.n	801a7b0 <__sfputs_r+0x22>
 801a7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7a4:	463a      	mov	r2, r7
 801a7a6:	4630      	mov	r0, r6
 801a7a8:	f7ff ffda 	bl	801a760 <__sfputc_r>
 801a7ac:	1c43      	adds	r3, r0, #1
 801a7ae:	d1f3      	bne.n	801a798 <__sfputs_r+0xa>
 801a7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a7b4 <_vfiprintf_r>:
 801a7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7b8:	460d      	mov	r5, r1
 801a7ba:	b09d      	sub	sp, #116	; 0x74
 801a7bc:	4614      	mov	r4, r2
 801a7be:	4698      	mov	r8, r3
 801a7c0:	4606      	mov	r6, r0
 801a7c2:	b118      	cbz	r0, 801a7cc <_vfiprintf_r+0x18>
 801a7c4:	6983      	ldr	r3, [r0, #24]
 801a7c6:	b90b      	cbnz	r3, 801a7cc <_vfiprintf_r+0x18>
 801a7c8:	f7ff fdfa 	bl	801a3c0 <__sinit>
 801a7cc:	4b89      	ldr	r3, [pc, #548]	; (801a9f4 <_vfiprintf_r+0x240>)
 801a7ce:	429d      	cmp	r5, r3
 801a7d0:	d11b      	bne.n	801a80a <_vfiprintf_r+0x56>
 801a7d2:	6875      	ldr	r5, [r6, #4]
 801a7d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7d6:	07d9      	lsls	r1, r3, #31
 801a7d8:	d405      	bmi.n	801a7e6 <_vfiprintf_r+0x32>
 801a7da:	89ab      	ldrh	r3, [r5, #12]
 801a7dc:	059a      	lsls	r2, r3, #22
 801a7de:	d402      	bmi.n	801a7e6 <_vfiprintf_r+0x32>
 801a7e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7e2:	f7ff fec2 	bl	801a56a <__retarget_lock_acquire_recursive>
 801a7e6:	89ab      	ldrh	r3, [r5, #12]
 801a7e8:	071b      	lsls	r3, r3, #28
 801a7ea:	d501      	bpl.n	801a7f0 <_vfiprintf_r+0x3c>
 801a7ec:	692b      	ldr	r3, [r5, #16]
 801a7ee:	b9eb      	cbnz	r3, 801a82c <_vfiprintf_r+0x78>
 801a7f0:	4629      	mov	r1, r5
 801a7f2:	4630      	mov	r0, r6
 801a7f4:	f000 fcea 	bl	801b1cc <__swsetup_r>
 801a7f8:	b1c0      	cbz	r0, 801a82c <_vfiprintf_r+0x78>
 801a7fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7fc:	07dc      	lsls	r4, r3, #31
 801a7fe:	d50e      	bpl.n	801a81e <_vfiprintf_r+0x6a>
 801a800:	f04f 30ff 	mov.w	r0, #4294967295
 801a804:	b01d      	add	sp, #116	; 0x74
 801a806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a80a:	4b7b      	ldr	r3, [pc, #492]	; (801a9f8 <_vfiprintf_r+0x244>)
 801a80c:	429d      	cmp	r5, r3
 801a80e:	d101      	bne.n	801a814 <_vfiprintf_r+0x60>
 801a810:	68b5      	ldr	r5, [r6, #8]
 801a812:	e7df      	b.n	801a7d4 <_vfiprintf_r+0x20>
 801a814:	4b79      	ldr	r3, [pc, #484]	; (801a9fc <_vfiprintf_r+0x248>)
 801a816:	429d      	cmp	r5, r3
 801a818:	bf08      	it	eq
 801a81a:	68f5      	ldreq	r5, [r6, #12]
 801a81c:	e7da      	b.n	801a7d4 <_vfiprintf_r+0x20>
 801a81e:	89ab      	ldrh	r3, [r5, #12]
 801a820:	0598      	lsls	r0, r3, #22
 801a822:	d4ed      	bmi.n	801a800 <_vfiprintf_r+0x4c>
 801a824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a826:	f7ff fea1 	bl	801a56c <__retarget_lock_release_recursive>
 801a82a:	e7e9      	b.n	801a800 <_vfiprintf_r+0x4c>
 801a82c:	2300      	movs	r3, #0
 801a82e:	9309      	str	r3, [sp, #36]	; 0x24
 801a830:	2320      	movs	r3, #32
 801a832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a836:	f8cd 800c 	str.w	r8, [sp, #12]
 801a83a:	2330      	movs	r3, #48	; 0x30
 801a83c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801aa00 <_vfiprintf_r+0x24c>
 801a840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a844:	f04f 0901 	mov.w	r9, #1
 801a848:	4623      	mov	r3, r4
 801a84a:	469a      	mov	sl, r3
 801a84c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a850:	b10a      	cbz	r2, 801a856 <_vfiprintf_r+0xa2>
 801a852:	2a25      	cmp	r2, #37	; 0x25
 801a854:	d1f9      	bne.n	801a84a <_vfiprintf_r+0x96>
 801a856:	ebba 0b04 	subs.w	fp, sl, r4
 801a85a:	d00b      	beq.n	801a874 <_vfiprintf_r+0xc0>
 801a85c:	465b      	mov	r3, fp
 801a85e:	4622      	mov	r2, r4
 801a860:	4629      	mov	r1, r5
 801a862:	4630      	mov	r0, r6
 801a864:	f7ff ff93 	bl	801a78e <__sfputs_r>
 801a868:	3001      	adds	r0, #1
 801a86a:	f000 80aa 	beq.w	801a9c2 <_vfiprintf_r+0x20e>
 801a86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a870:	445a      	add	r2, fp
 801a872:	9209      	str	r2, [sp, #36]	; 0x24
 801a874:	f89a 3000 	ldrb.w	r3, [sl]
 801a878:	2b00      	cmp	r3, #0
 801a87a:	f000 80a2 	beq.w	801a9c2 <_vfiprintf_r+0x20e>
 801a87e:	2300      	movs	r3, #0
 801a880:	f04f 32ff 	mov.w	r2, #4294967295
 801a884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a888:	f10a 0a01 	add.w	sl, sl, #1
 801a88c:	9304      	str	r3, [sp, #16]
 801a88e:	9307      	str	r3, [sp, #28]
 801a890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a894:	931a      	str	r3, [sp, #104]	; 0x68
 801a896:	4654      	mov	r4, sl
 801a898:	2205      	movs	r2, #5
 801a89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a89e:	4858      	ldr	r0, [pc, #352]	; (801aa00 <_vfiprintf_r+0x24c>)
 801a8a0:	f7e5 fc9e 	bl	80001e0 <memchr>
 801a8a4:	9a04      	ldr	r2, [sp, #16]
 801a8a6:	b9d8      	cbnz	r0, 801a8e0 <_vfiprintf_r+0x12c>
 801a8a8:	06d1      	lsls	r1, r2, #27
 801a8aa:	bf44      	itt	mi
 801a8ac:	2320      	movmi	r3, #32
 801a8ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a8b2:	0713      	lsls	r3, r2, #28
 801a8b4:	bf44      	itt	mi
 801a8b6:	232b      	movmi	r3, #43	; 0x2b
 801a8b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a8bc:	f89a 3000 	ldrb.w	r3, [sl]
 801a8c0:	2b2a      	cmp	r3, #42	; 0x2a
 801a8c2:	d015      	beq.n	801a8f0 <_vfiprintf_r+0x13c>
 801a8c4:	9a07      	ldr	r2, [sp, #28]
 801a8c6:	4654      	mov	r4, sl
 801a8c8:	2000      	movs	r0, #0
 801a8ca:	f04f 0c0a 	mov.w	ip, #10
 801a8ce:	4621      	mov	r1, r4
 801a8d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a8d4:	3b30      	subs	r3, #48	; 0x30
 801a8d6:	2b09      	cmp	r3, #9
 801a8d8:	d94e      	bls.n	801a978 <_vfiprintf_r+0x1c4>
 801a8da:	b1b0      	cbz	r0, 801a90a <_vfiprintf_r+0x156>
 801a8dc:	9207      	str	r2, [sp, #28]
 801a8de:	e014      	b.n	801a90a <_vfiprintf_r+0x156>
 801a8e0:	eba0 0308 	sub.w	r3, r0, r8
 801a8e4:	fa09 f303 	lsl.w	r3, r9, r3
 801a8e8:	4313      	orrs	r3, r2
 801a8ea:	9304      	str	r3, [sp, #16]
 801a8ec:	46a2      	mov	sl, r4
 801a8ee:	e7d2      	b.n	801a896 <_vfiprintf_r+0xe2>
 801a8f0:	9b03      	ldr	r3, [sp, #12]
 801a8f2:	1d19      	adds	r1, r3, #4
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	9103      	str	r1, [sp, #12]
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	bfbb      	ittet	lt
 801a8fc:	425b      	neglt	r3, r3
 801a8fe:	f042 0202 	orrlt.w	r2, r2, #2
 801a902:	9307      	strge	r3, [sp, #28]
 801a904:	9307      	strlt	r3, [sp, #28]
 801a906:	bfb8      	it	lt
 801a908:	9204      	strlt	r2, [sp, #16]
 801a90a:	7823      	ldrb	r3, [r4, #0]
 801a90c:	2b2e      	cmp	r3, #46	; 0x2e
 801a90e:	d10c      	bne.n	801a92a <_vfiprintf_r+0x176>
 801a910:	7863      	ldrb	r3, [r4, #1]
 801a912:	2b2a      	cmp	r3, #42	; 0x2a
 801a914:	d135      	bne.n	801a982 <_vfiprintf_r+0x1ce>
 801a916:	9b03      	ldr	r3, [sp, #12]
 801a918:	1d1a      	adds	r2, r3, #4
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	9203      	str	r2, [sp, #12]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	bfb8      	it	lt
 801a922:	f04f 33ff 	movlt.w	r3, #4294967295
 801a926:	3402      	adds	r4, #2
 801a928:	9305      	str	r3, [sp, #20]
 801a92a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801aa10 <_vfiprintf_r+0x25c>
 801a92e:	7821      	ldrb	r1, [r4, #0]
 801a930:	2203      	movs	r2, #3
 801a932:	4650      	mov	r0, sl
 801a934:	f7e5 fc54 	bl	80001e0 <memchr>
 801a938:	b140      	cbz	r0, 801a94c <_vfiprintf_r+0x198>
 801a93a:	2340      	movs	r3, #64	; 0x40
 801a93c:	eba0 000a 	sub.w	r0, r0, sl
 801a940:	fa03 f000 	lsl.w	r0, r3, r0
 801a944:	9b04      	ldr	r3, [sp, #16]
 801a946:	4303      	orrs	r3, r0
 801a948:	3401      	adds	r4, #1
 801a94a:	9304      	str	r3, [sp, #16]
 801a94c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a950:	482c      	ldr	r0, [pc, #176]	; (801aa04 <_vfiprintf_r+0x250>)
 801a952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a956:	2206      	movs	r2, #6
 801a958:	f7e5 fc42 	bl	80001e0 <memchr>
 801a95c:	2800      	cmp	r0, #0
 801a95e:	d03f      	beq.n	801a9e0 <_vfiprintf_r+0x22c>
 801a960:	4b29      	ldr	r3, [pc, #164]	; (801aa08 <_vfiprintf_r+0x254>)
 801a962:	bb1b      	cbnz	r3, 801a9ac <_vfiprintf_r+0x1f8>
 801a964:	9b03      	ldr	r3, [sp, #12]
 801a966:	3307      	adds	r3, #7
 801a968:	f023 0307 	bic.w	r3, r3, #7
 801a96c:	3308      	adds	r3, #8
 801a96e:	9303      	str	r3, [sp, #12]
 801a970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a972:	443b      	add	r3, r7
 801a974:	9309      	str	r3, [sp, #36]	; 0x24
 801a976:	e767      	b.n	801a848 <_vfiprintf_r+0x94>
 801a978:	fb0c 3202 	mla	r2, ip, r2, r3
 801a97c:	460c      	mov	r4, r1
 801a97e:	2001      	movs	r0, #1
 801a980:	e7a5      	b.n	801a8ce <_vfiprintf_r+0x11a>
 801a982:	2300      	movs	r3, #0
 801a984:	3401      	adds	r4, #1
 801a986:	9305      	str	r3, [sp, #20]
 801a988:	4619      	mov	r1, r3
 801a98a:	f04f 0c0a 	mov.w	ip, #10
 801a98e:	4620      	mov	r0, r4
 801a990:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a994:	3a30      	subs	r2, #48	; 0x30
 801a996:	2a09      	cmp	r2, #9
 801a998:	d903      	bls.n	801a9a2 <_vfiprintf_r+0x1ee>
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d0c5      	beq.n	801a92a <_vfiprintf_r+0x176>
 801a99e:	9105      	str	r1, [sp, #20]
 801a9a0:	e7c3      	b.n	801a92a <_vfiprintf_r+0x176>
 801a9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 801a9a6:	4604      	mov	r4, r0
 801a9a8:	2301      	movs	r3, #1
 801a9aa:	e7f0      	b.n	801a98e <_vfiprintf_r+0x1da>
 801a9ac:	ab03      	add	r3, sp, #12
 801a9ae:	9300      	str	r3, [sp, #0]
 801a9b0:	462a      	mov	r2, r5
 801a9b2:	4b16      	ldr	r3, [pc, #88]	; (801aa0c <_vfiprintf_r+0x258>)
 801a9b4:	a904      	add	r1, sp, #16
 801a9b6:	4630      	mov	r0, r6
 801a9b8:	f3af 8000 	nop.w
 801a9bc:	4607      	mov	r7, r0
 801a9be:	1c78      	adds	r0, r7, #1
 801a9c0:	d1d6      	bne.n	801a970 <_vfiprintf_r+0x1bc>
 801a9c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a9c4:	07d9      	lsls	r1, r3, #31
 801a9c6:	d405      	bmi.n	801a9d4 <_vfiprintf_r+0x220>
 801a9c8:	89ab      	ldrh	r3, [r5, #12]
 801a9ca:	059a      	lsls	r2, r3, #22
 801a9cc:	d402      	bmi.n	801a9d4 <_vfiprintf_r+0x220>
 801a9ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a9d0:	f7ff fdcc 	bl	801a56c <__retarget_lock_release_recursive>
 801a9d4:	89ab      	ldrh	r3, [r5, #12]
 801a9d6:	065b      	lsls	r3, r3, #25
 801a9d8:	f53f af12 	bmi.w	801a800 <_vfiprintf_r+0x4c>
 801a9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a9de:	e711      	b.n	801a804 <_vfiprintf_r+0x50>
 801a9e0:	ab03      	add	r3, sp, #12
 801a9e2:	9300      	str	r3, [sp, #0]
 801a9e4:	462a      	mov	r2, r5
 801a9e6:	4b09      	ldr	r3, [pc, #36]	; (801aa0c <_vfiprintf_r+0x258>)
 801a9e8:	a904      	add	r1, sp, #16
 801a9ea:	4630      	mov	r0, r6
 801a9ec:	f000 f880 	bl	801aaf0 <_printf_i>
 801a9f0:	e7e4      	b.n	801a9bc <_vfiprintf_r+0x208>
 801a9f2:	bf00      	nop
 801a9f4:	0801f7d8 	.word	0x0801f7d8
 801a9f8:	0801f7f8 	.word	0x0801f7f8
 801a9fc:	0801f7b8 	.word	0x0801f7b8
 801aa00:	0801f81c 	.word	0x0801f81c
 801aa04:	0801f826 	.word	0x0801f826
 801aa08:	00000000 	.word	0x00000000
 801aa0c:	0801a78f 	.word	0x0801a78f
 801aa10:	0801f822 	.word	0x0801f822

0801aa14 <_printf_common>:
 801aa14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa18:	4616      	mov	r6, r2
 801aa1a:	4699      	mov	r9, r3
 801aa1c:	688a      	ldr	r2, [r1, #8]
 801aa1e:	690b      	ldr	r3, [r1, #16]
 801aa20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aa24:	4293      	cmp	r3, r2
 801aa26:	bfb8      	it	lt
 801aa28:	4613      	movlt	r3, r2
 801aa2a:	6033      	str	r3, [r6, #0]
 801aa2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aa30:	4607      	mov	r7, r0
 801aa32:	460c      	mov	r4, r1
 801aa34:	b10a      	cbz	r2, 801aa3a <_printf_common+0x26>
 801aa36:	3301      	adds	r3, #1
 801aa38:	6033      	str	r3, [r6, #0]
 801aa3a:	6823      	ldr	r3, [r4, #0]
 801aa3c:	0699      	lsls	r1, r3, #26
 801aa3e:	bf42      	ittt	mi
 801aa40:	6833      	ldrmi	r3, [r6, #0]
 801aa42:	3302      	addmi	r3, #2
 801aa44:	6033      	strmi	r3, [r6, #0]
 801aa46:	6825      	ldr	r5, [r4, #0]
 801aa48:	f015 0506 	ands.w	r5, r5, #6
 801aa4c:	d106      	bne.n	801aa5c <_printf_common+0x48>
 801aa4e:	f104 0a19 	add.w	sl, r4, #25
 801aa52:	68e3      	ldr	r3, [r4, #12]
 801aa54:	6832      	ldr	r2, [r6, #0]
 801aa56:	1a9b      	subs	r3, r3, r2
 801aa58:	42ab      	cmp	r3, r5
 801aa5a:	dc26      	bgt.n	801aaaa <_printf_common+0x96>
 801aa5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aa60:	1e13      	subs	r3, r2, #0
 801aa62:	6822      	ldr	r2, [r4, #0]
 801aa64:	bf18      	it	ne
 801aa66:	2301      	movne	r3, #1
 801aa68:	0692      	lsls	r2, r2, #26
 801aa6a:	d42b      	bmi.n	801aac4 <_printf_common+0xb0>
 801aa6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aa70:	4649      	mov	r1, r9
 801aa72:	4638      	mov	r0, r7
 801aa74:	47c0      	blx	r8
 801aa76:	3001      	adds	r0, #1
 801aa78:	d01e      	beq.n	801aab8 <_printf_common+0xa4>
 801aa7a:	6823      	ldr	r3, [r4, #0]
 801aa7c:	68e5      	ldr	r5, [r4, #12]
 801aa7e:	6832      	ldr	r2, [r6, #0]
 801aa80:	f003 0306 	and.w	r3, r3, #6
 801aa84:	2b04      	cmp	r3, #4
 801aa86:	bf08      	it	eq
 801aa88:	1aad      	subeq	r5, r5, r2
 801aa8a:	68a3      	ldr	r3, [r4, #8]
 801aa8c:	6922      	ldr	r2, [r4, #16]
 801aa8e:	bf0c      	ite	eq
 801aa90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aa94:	2500      	movne	r5, #0
 801aa96:	4293      	cmp	r3, r2
 801aa98:	bfc4      	itt	gt
 801aa9a:	1a9b      	subgt	r3, r3, r2
 801aa9c:	18ed      	addgt	r5, r5, r3
 801aa9e:	2600      	movs	r6, #0
 801aaa0:	341a      	adds	r4, #26
 801aaa2:	42b5      	cmp	r5, r6
 801aaa4:	d11a      	bne.n	801aadc <_printf_common+0xc8>
 801aaa6:	2000      	movs	r0, #0
 801aaa8:	e008      	b.n	801aabc <_printf_common+0xa8>
 801aaaa:	2301      	movs	r3, #1
 801aaac:	4652      	mov	r2, sl
 801aaae:	4649      	mov	r1, r9
 801aab0:	4638      	mov	r0, r7
 801aab2:	47c0      	blx	r8
 801aab4:	3001      	adds	r0, #1
 801aab6:	d103      	bne.n	801aac0 <_printf_common+0xac>
 801aab8:	f04f 30ff 	mov.w	r0, #4294967295
 801aabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aac0:	3501      	adds	r5, #1
 801aac2:	e7c6      	b.n	801aa52 <_printf_common+0x3e>
 801aac4:	18e1      	adds	r1, r4, r3
 801aac6:	1c5a      	adds	r2, r3, #1
 801aac8:	2030      	movs	r0, #48	; 0x30
 801aaca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aace:	4422      	add	r2, r4
 801aad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aad8:	3302      	adds	r3, #2
 801aada:	e7c7      	b.n	801aa6c <_printf_common+0x58>
 801aadc:	2301      	movs	r3, #1
 801aade:	4622      	mov	r2, r4
 801aae0:	4649      	mov	r1, r9
 801aae2:	4638      	mov	r0, r7
 801aae4:	47c0      	blx	r8
 801aae6:	3001      	adds	r0, #1
 801aae8:	d0e6      	beq.n	801aab8 <_printf_common+0xa4>
 801aaea:	3601      	adds	r6, #1
 801aaec:	e7d9      	b.n	801aaa2 <_printf_common+0x8e>
	...

0801aaf0 <_printf_i>:
 801aaf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aaf4:	460c      	mov	r4, r1
 801aaf6:	4691      	mov	r9, r2
 801aaf8:	7e27      	ldrb	r7, [r4, #24]
 801aafa:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aafc:	2f78      	cmp	r7, #120	; 0x78
 801aafe:	4680      	mov	r8, r0
 801ab00:	469a      	mov	sl, r3
 801ab02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab06:	d807      	bhi.n	801ab18 <_printf_i+0x28>
 801ab08:	2f62      	cmp	r7, #98	; 0x62
 801ab0a:	d80a      	bhi.n	801ab22 <_printf_i+0x32>
 801ab0c:	2f00      	cmp	r7, #0
 801ab0e:	f000 80d8 	beq.w	801acc2 <_printf_i+0x1d2>
 801ab12:	2f58      	cmp	r7, #88	; 0x58
 801ab14:	f000 80a3 	beq.w	801ac5e <_printf_i+0x16e>
 801ab18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ab1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ab20:	e03a      	b.n	801ab98 <_printf_i+0xa8>
 801ab22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ab26:	2b15      	cmp	r3, #21
 801ab28:	d8f6      	bhi.n	801ab18 <_printf_i+0x28>
 801ab2a:	a001      	add	r0, pc, #4	; (adr r0, 801ab30 <_printf_i+0x40>)
 801ab2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ab30:	0801ab89 	.word	0x0801ab89
 801ab34:	0801ab9d 	.word	0x0801ab9d
 801ab38:	0801ab19 	.word	0x0801ab19
 801ab3c:	0801ab19 	.word	0x0801ab19
 801ab40:	0801ab19 	.word	0x0801ab19
 801ab44:	0801ab19 	.word	0x0801ab19
 801ab48:	0801ab9d 	.word	0x0801ab9d
 801ab4c:	0801ab19 	.word	0x0801ab19
 801ab50:	0801ab19 	.word	0x0801ab19
 801ab54:	0801ab19 	.word	0x0801ab19
 801ab58:	0801ab19 	.word	0x0801ab19
 801ab5c:	0801aca9 	.word	0x0801aca9
 801ab60:	0801abcd 	.word	0x0801abcd
 801ab64:	0801ac8b 	.word	0x0801ac8b
 801ab68:	0801ab19 	.word	0x0801ab19
 801ab6c:	0801ab19 	.word	0x0801ab19
 801ab70:	0801accb 	.word	0x0801accb
 801ab74:	0801ab19 	.word	0x0801ab19
 801ab78:	0801abcd 	.word	0x0801abcd
 801ab7c:	0801ab19 	.word	0x0801ab19
 801ab80:	0801ab19 	.word	0x0801ab19
 801ab84:	0801ac93 	.word	0x0801ac93
 801ab88:	680b      	ldr	r3, [r1, #0]
 801ab8a:	1d1a      	adds	r2, r3, #4
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	600a      	str	r2, [r1, #0]
 801ab90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ab94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ab98:	2301      	movs	r3, #1
 801ab9a:	e0a3      	b.n	801ace4 <_printf_i+0x1f4>
 801ab9c:	6825      	ldr	r5, [r4, #0]
 801ab9e:	6808      	ldr	r0, [r1, #0]
 801aba0:	062e      	lsls	r6, r5, #24
 801aba2:	f100 0304 	add.w	r3, r0, #4
 801aba6:	d50a      	bpl.n	801abbe <_printf_i+0xce>
 801aba8:	6805      	ldr	r5, [r0, #0]
 801abaa:	600b      	str	r3, [r1, #0]
 801abac:	2d00      	cmp	r5, #0
 801abae:	da03      	bge.n	801abb8 <_printf_i+0xc8>
 801abb0:	232d      	movs	r3, #45	; 0x2d
 801abb2:	426d      	negs	r5, r5
 801abb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801abb8:	485e      	ldr	r0, [pc, #376]	; (801ad34 <_printf_i+0x244>)
 801abba:	230a      	movs	r3, #10
 801abbc:	e019      	b.n	801abf2 <_printf_i+0x102>
 801abbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 801abc2:	6805      	ldr	r5, [r0, #0]
 801abc4:	600b      	str	r3, [r1, #0]
 801abc6:	bf18      	it	ne
 801abc8:	b22d      	sxthne	r5, r5
 801abca:	e7ef      	b.n	801abac <_printf_i+0xbc>
 801abcc:	680b      	ldr	r3, [r1, #0]
 801abce:	6825      	ldr	r5, [r4, #0]
 801abd0:	1d18      	adds	r0, r3, #4
 801abd2:	6008      	str	r0, [r1, #0]
 801abd4:	0628      	lsls	r0, r5, #24
 801abd6:	d501      	bpl.n	801abdc <_printf_i+0xec>
 801abd8:	681d      	ldr	r5, [r3, #0]
 801abda:	e002      	b.n	801abe2 <_printf_i+0xf2>
 801abdc:	0669      	lsls	r1, r5, #25
 801abde:	d5fb      	bpl.n	801abd8 <_printf_i+0xe8>
 801abe0:	881d      	ldrh	r5, [r3, #0]
 801abe2:	4854      	ldr	r0, [pc, #336]	; (801ad34 <_printf_i+0x244>)
 801abe4:	2f6f      	cmp	r7, #111	; 0x6f
 801abe6:	bf0c      	ite	eq
 801abe8:	2308      	moveq	r3, #8
 801abea:	230a      	movne	r3, #10
 801abec:	2100      	movs	r1, #0
 801abee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801abf2:	6866      	ldr	r6, [r4, #4]
 801abf4:	60a6      	str	r6, [r4, #8]
 801abf6:	2e00      	cmp	r6, #0
 801abf8:	bfa2      	ittt	ge
 801abfa:	6821      	ldrge	r1, [r4, #0]
 801abfc:	f021 0104 	bicge.w	r1, r1, #4
 801ac00:	6021      	strge	r1, [r4, #0]
 801ac02:	b90d      	cbnz	r5, 801ac08 <_printf_i+0x118>
 801ac04:	2e00      	cmp	r6, #0
 801ac06:	d04d      	beq.n	801aca4 <_printf_i+0x1b4>
 801ac08:	4616      	mov	r6, r2
 801ac0a:	fbb5 f1f3 	udiv	r1, r5, r3
 801ac0e:	fb03 5711 	mls	r7, r3, r1, r5
 801ac12:	5dc7      	ldrb	r7, [r0, r7]
 801ac14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ac18:	462f      	mov	r7, r5
 801ac1a:	42bb      	cmp	r3, r7
 801ac1c:	460d      	mov	r5, r1
 801ac1e:	d9f4      	bls.n	801ac0a <_printf_i+0x11a>
 801ac20:	2b08      	cmp	r3, #8
 801ac22:	d10b      	bne.n	801ac3c <_printf_i+0x14c>
 801ac24:	6823      	ldr	r3, [r4, #0]
 801ac26:	07df      	lsls	r7, r3, #31
 801ac28:	d508      	bpl.n	801ac3c <_printf_i+0x14c>
 801ac2a:	6923      	ldr	r3, [r4, #16]
 801ac2c:	6861      	ldr	r1, [r4, #4]
 801ac2e:	4299      	cmp	r1, r3
 801ac30:	bfde      	ittt	le
 801ac32:	2330      	movle	r3, #48	; 0x30
 801ac34:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ac38:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ac3c:	1b92      	subs	r2, r2, r6
 801ac3e:	6122      	str	r2, [r4, #16]
 801ac40:	f8cd a000 	str.w	sl, [sp]
 801ac44:	464b      	mov	r3, r9
 801ac46:	aa03      	add	r2, sp, #12
 801ac48:	4621      	mov	r1, r4
 801ac4a:	4640      	mov	r0, r8
 801ac4c:	f7ff fee2 	bl	801aa14 <_printf_common>
 801ac50:	3001      	adds	r0, #1
 801ac52:	d14c      	bne.n	801acee <_printf_i+0x1fe>
 801ac54:	f04f 30ff 	mov.w	r0, #4294967295
 801ac58:	b004      	add	sp, #16
 801ac5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac5e:	4835      	ldr	r0, [pc, #212]	; (801ad34 <_printf_i+0x244>)
 801ac60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ac64:	6823      	ldr	r3, [r4, #0]
 801ac66:	680e      	ldr	r6, [r1, #0]
 801ac68:	061f      	lsls	r7, r3, #24
 801ac6a:	f856 5b04 	ldr.w	r5, [r6], #4
 801ac6e:	600e      	str	r6, [r1, #0]
 801ac70:	d514      	bpl.n	801ac9c <_printf_i+0x1ac>
 801ac72:	07d9      	lsls	r1, r3, #31
 801ac74:	bf44      	itt	mi
 801ac76:	f043 0320 	orrmi.w	r3, r3, #32
 801ac7a:	6023      	strmi	r3, [r4, #0]
 801ac7c:	b91d      	cbnz	r5, 801ac86 <_printf_i+0x196>
 801ac7e:	6823      	ldr	r3, [r4, #0]
 801ac80:	f023 0320 	bic.w	r3, r3, #32
 801ac84:	6023      	str	r3, [r4, #0]
 801ac86:	2310      	movs	r3, #16
 801ac88:	e7b0      	b.n	801abec <_printf_i+0xfc>
 801ac8a:	6823      	ldr	r3, [r4, #0]
 801ac8c:	f043 0320 	orr.w	r3, r3, #32
 801ac90:	6023      	str	r3, [r4, #0]
 801ac92:	2378      	movs	r3, #120	; 0x78
 801ac94:	4828      	ldr	r0, [pc, #160]	; (801ad38 <_printf_i+0x248>)
 801ac96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ac9a:	e7e3      	b.n	801ac64 <_printf_i+0x174>
 801ac9c:	065e      	lsls	r6, r3, #25
 801ac9e:	bf48      	it	mi
 801aca0:	b2ad      	uxthmi	r5, r5
 801aca2:	e7e6      	b.n	801ac72 <_printf_i+0x182>
 801aca4:	4616      	mov	r6, r2
 801aca6:	e7bb      	b.n	801ac20 <_printf_i+0x130>
 801aca8:	680b      	ldr	r3, [r1, #0]
 801acaa:	6826      	ldr	r6, [r4, #0]
 801acac:	6960      	ldr	r0, [r4, #20]
 801acae:	1d1d      	adds	r5, r3, #4
 801acb0:	600d      	str	r5, [r1, #0]
 801acb2:	0635      	lsls	r5, r6, #24
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	d501      	bpl.n	801acbc <_printf_i+0x1cc>
 801acb8:	6018      	str	r0, [r3, #0]
 801acba:	e002      	b.n	801acc2 <_printf_i+0x1d2>
 801acbc:	0671      	lsls	r1, r6, #25
 801acbe:	d5fb      	bpl.n	801acb8 <_printf_i+0x1c8>
 801acc0:	8018      	strh	r0, [r3, #0]
 801acc2:	2300      	movs	r3, #0
 801acc4:	6123      	str	r3, [r4, #16]
 801acc6:	4616      	mov	r6, r2
 801acc8:	e7ba      	b.n	801ac40 <_printf_i+0x150>
 801acca:	680b      	ldr	r3, [r1, #0]
 801accc:	1d1a      	adds	r2, r3, #4
 801acce:	600a      	str	r2, [r1, #0]
 801acd0:	681e      	ldr	r6, [r3, #0]
 801acd2:	6862      	ldr	r2, [r4, #4]
 801acd4:	2100      	movs	r1, #0
 801acd6:	4630      	mov	r0, r6
 801acd8:	f7e5 fa82 	bl	80001e0 <memchr>
 801acdc:	b108      	cbz	r0, 801ace2 <_printf_i+0x1f2>
 801acde:	1b80      	subs	r0, r0, r6
 801ace0:	6060      	str	r0, [r4, #4]
 801ace2:	6863      	ldr	r3, [r4, #4]
 801ace4:	6123      	str	r3, [r4, #16]
 801ace6:	2300      	movs	r3, #0
 801ace8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801acec:	e7a8      	b.n	801ac40 <_printf_i+0x150>
 801acee:	6923      	ldr	r3, [r4, #16]
 801acf0:	4632      	mov	r2, r6
 801acf2:	4649      	mov	r1, r9
 801acf4:	4640      	mov	r0, r8
 801acf6:	47d0      	blx	sl
 801acf8:	3001      	adds	r0, #1
 801acfa:	d0ab      	beq.n	801ac54 <_printf_i+0x164>
 801acfc:	6823      	ldr	r3, [r4, #0]
 801acfe:	079b      	lsls	r3, r3, #30
 801ad00:	d413      	bmi.n	801ad2a <_printf_i+0x23a>
 801ad02:	68e0      	ldr	r0, [r4, #12]
 801ad04:	9b03      	ldr	r3, [sp, #12]
 801ad06:	4298      	cmp	r0, r3
 801ad08:	bfb8      	it	lt
 801ad0a:	4618      	movlt	r0, r3
 801ad0c:	e7a4      	b.n	801ac58 <_printf_i+0x168>
 801ad0e:	2301      	movs	r3, #1
 801ad10:	4632      	mov	r2, r6
 801ad12:	4649      	mov	r1, r9
 801ad14:	4640      	mov	r0, r8
 801ad16:	47d0      	blx	sl
 801ad18:	3001      	adds	r0, #1
 801ad1a:	d09b      	beq.n	801ac54 <_printf_i+0x164>
 801ad1c:	3501      	adds	r5, #1
 801ad1e:	68e3      	ldr	r3, [r4, #12]
 801ad20:	9903      	ldr	r1, [sp, #12]
 801ad22:	1a5b      	subs	r3, r3, r1
 801ad24:	42ab      	cmp	r3, r5
 801ad26:	dcf2      	bgt.n	801ad0e <_printf_i+0x21e>
 801ad28:	e7eb      	b.n	801ad02 <_printf_i+0x212>
 801ad2a:	2500      	movs	r5, #0
 801ad2c:	f104 0619 	add.w	r6, r4, #25
 801ad30:	e7f5      	b.n	801ad1e <_printf_i+0x22e>
 801ad32:	bf00      	nop
 801ad34:	0801f82d 	.word	0x0801f82d
 801ad38:	0801f83e 	.word	0x0801f83e

0801ad3c <iprintf>:
 801ad3c:	b40f      	push	{r0, r1, r2, r3}
 801ad3e:	4b0a      	ldr	r3, [pc, #40]	; (801ad68 <iprintf+0x2c>)
 801ad40:	b513      	push	{r0, r1, r4, lr}
 801ad42:	681c      	ldr	r4, [r3, #0]
 801ad44:	b124      	cbz	r4, 801ad50 <iprintf+0x14>
 801ad46:	69a3      	ldr	r3, [r4, #24]
 801ad48:	b913      	cbnz	r3, 801ad50 <iprintf+0x14>
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	f7ff fb38 	bl	801a3c0 <__sinit>
 801ad50:	ab05      	add	r3, sp, #20
 801ad52:	9a04      	ldr	r2, [sp, #16]
 801ad54:	68a1      	ldr	r1, [r4, #8]
 801ad56:	9301      	str	r3, [sp, #4]
 801ad58:	4620      	mov	r0, r4
 801ad5a:	f7ff fd2b 	bl	801a7b4 <_vfiprintf_r>
 801ad5e:	b002      	add	sp, #8
 801ad60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad64:	b004      	add	sp, #16
 801ad66:	4770      	bx	lr
 801ad68:	200000e8 	.word	0x200000e8

0801ad6c <rand>:
 801ad6c:	4b17      	ldr	r3, [pc, #92]	; (801adcc <rand+0x60>)
 801ad6e:	b510      	push	{r4, lr}
 801ad70:	681c      	ldr	r4, [r3, #0]
 801ad72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ad74:	b9b3      	cbnz	r3, 801ada4 <rand+0x38>
 801ad76:	2018      	movs	r0, #24
 801ad78:	f7ff fbfa 	bl	801a570 <malloc>
 801ad7c:	63a0      	str	r0, [r4, #56]	; 0x38
 801ad7e:	b928      	cbnz	r0, 801ad8c <rand+0x20>
 801ad80:	4602      	mov	r2, r0
 801ad82:	4b13      	ldr	r3, [pc, #76]	; (801add0 <rand+0x64>)
 801ad84:	4813      	ldr	r0, [pc, #76]	; (801add4 <rand+0x68>)
 801ad86:	214e      	movs	r1, #78	; 0x4e
 801ad88:	f7ff faa0 	bl	801a2cc <__assert_func>
 801ad8c:	4a12      	ldr	r2, [pc, #72]	; (801add8 <rand+0x6c>)
 801ad8e:	4b13      	ldr	r3, [pc, #76]	; (801addc <rand+0x70>)
 801ad90:	e9c0 2300 	strd	r2, r3, [r0]
 801ad94:	4b12      	ldr	r3, [pc, #72]	; (801ade0 <rand+0x74>)
 801ad96:	6083      	str	r3, [r0, #8]
 801ad98:	230b      	movs	r3, #11
 801ad9a:	8183      	strh	r3, [r0, #12]
 801ad9c:	2201      	movs	r2, #1
 801ad9e:	2300      	movs	r3, #0
 801ada0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ada4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ada6:	480f      	ldr	r0, [pc, #60]	; (801ade4 <rand+0x78>)
 801ada8:	690a      	ldr	r2, [r1, #16]
 801adaa:	694b      	ldr	r3, [r1, #20]
 801adac:	4c0e      	ldr	r4, [pc, #56]	; (801ade8 <rand+0x7c>)
 801adae:	4350      	muls	r0, r2
 801adb0:	fb04 0003 	mla	r0, r4, r3, r0
 801adb4:	fba2 3404 	umull	r3, r4, r2, r4
 801adb8:	1c5a      	adds	r2, r3, #1
 801adba:	4404      	add	r4, r0
 801adbc:	f144 0000 	adc.w	r0, r4, #0
 801adc0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801adc4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801adc8:	bd10      	pop	{r4, pc}
 801adca:	bf00      	nop
 801adcc:	200000e8 	.word	0x200000e8
 801add0:	0801f84f 	.word	0x0801f84f
 801add4:	0801f866 	.word	0x0801f866
 801add8:	abcd330e 	.word	0xabcd330e
 801addc:	e66d1234 	.word	0xe66d1234
 801ade0:	0005deec 	.word	0x0005deec
 801ade4:	5851f42d 	.word	0x5851f42d
 801ade8:	4c957f2d 	.word	0x4c957f2d

0801adec <cleanup_glue>:
 801adec:	b538      	push	{r3, r4, r5, lr}
 801adee:	460c      	mov	r4, r1
 801adf0:	6809      	ldr	r1, [r1, #0]
 801adf2:	4605      	mov	r5, r0
 801adf4:	b109      	cbz	r1, 801adfa <cleanup_glue+0xe>
 801adf6:	f7ff fff9 	bl	801adec <cleanup_glue>
 801adfa:	4621      	mov	r1, r4
 801adfc:	4628      	mov	r0, r5
 801adfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae02:	f7ff bc03 	b.w	801a60c <_free_r>
	...

0801ae08 <_reclaim_reent>:
 801ae08:	4b2c      	ldr	r3, [pc, #176]	; (801aebc <_reclaim_reent+0xb4>)
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	4283      	cmp	r3, r0
 801ae0e:	b570      	push	{r4, r5, r6, lr}
 801ae10:	4604      	mov	r4, r0
 801ae12:	d051      	beq.n	801aeb8 <_reclaim_reent+0xb0>
 801ae14:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ae16:	b143      	cbz	r3, 801ae2a <_reclaim_reent+0x22>
 801ae18:	68db      	ldr	r3, [r3, #12]
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	d14a      	bne.n	801aeb4 <_reclaim_reent+0xac>
 801ae1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae20:	6819      	ldr	r1, [r3, #0]
 801ae22:	b111      	cbz	r1, 801ae2a <_reclaim_reent+0x22>
 801ae24:	4620      	mov	r0, r4
 801ae26:	f7ff fbf1 	bl	801a60c <_free_r>
 801ae2a:	6961      	ldr	r1, [r4, #20]
 801ae2c:	b111      	cbz	r1, 801ae34 <_reclaim_reent+0x2c>
 801ae2e:	4620      	mov	r0, r4
 801ae30:	f7ff fbec 	bl	801a60c <_free_r>
 801ae34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ae36:	b111      	cbz	r1, 801ae3e <_reclaim_reent+0x36>
 801ae38:	4620      	mov	r0, r4
 801ae3a:	f7ff fbe7 	bl	801a60c <_free_r>
 801ae3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ae40:	b111      	cbz	r1, 801ae48 <_reclaim_reent+0x40>
 801ae42:	4620      	mov	r0, r4
 801ae44:	f7ff fbe2 	bl	801a60c <_free_r>
 801ae48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ae4a:	b111      	cbz	r1, 801ae52 <_reclaim_reent+0x4a>
 801ae4c:	4620      	mov	r0, r4
 801ae4e:	f7ff fbdd 	bl	801a60c <_free_r>
 801ae52:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ae54:	b111      	cbz	r1, 801ae5c <_reclaim_reent+0x54>
 801ae56:	4620      	mov	r0, r4
 801ae58:	f7ff fbd8 	bl	801a60c <_free_r>
 801ae5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ae5e:	b111      	cbz	r1, 801ae66 <_reclaim_reent+0x5e>
 801ae60:	4620      	mov	r0, r4
 801ae62:	f7ff fbd3 	bl	801a60c <_free_r>
 801ae66:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ae68:	b111      	cbz	r1, 801ae70 <_reclaim_reent+0x68>
 801ae6a:	4620      	mov	r0, r4
 801ae6c:	f7ff fbce 	bl	801a60c <_free_r>
 801ae70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ae72:	b111      	cbz	r1, 801ae7a <_reclaim_reent+0x72>
 801ae74:	4620      	mov	r0, r4
 801ae76:	f7ff fbc9 	bl	801a60c <_free_r>
 801ae7a:	69a3      	ldr	r3, [r4, #24]
 801ae7c:	b1e3      	cbz	r3, 801aeb8 <_reclaim_reent+0xb0>
 801ae7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ae80:	4620      	mov	r0, r4
 801ae82:	4798      	blx	r3
 801ae84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ae86:	b1b9      	cbz	r1, 801aeb8 <_reclaim_reent+0xb0>
 801ae88:	4620      	mov	r0, r4
 801ae8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ae8e:	f7ff bfad 	b.w	801adec <cleanup_glue>
 801ae92:	5949      	ldr	r1, [r1, r5]
 801ae94:	b941      	cbnz	r1, 801aea8 <_reclaim_reent+0xa0>
 801ae96:	3504      	adds	r5, #4
 801ae98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae9a:	2d80      	cmp	r5, #128	; 0x80
 801ae9c:	68d9      	ldr	r1, [r3, #12]
 801ae9e:	d1f8      	bne.n	801ae92 <_reclaim_reent+0x8a>
 801aea0:	4620      	mov	r0, r4
 801aea2:	f7ff fbb3 	bl	801a60c <_free_r>
 801aea6:	e7ba      	b.n	801ae1e <_reclaim_reent+0x16>
 801aea8:	680e      	ldr	r6, [r1, #0]
 801aeaa:	4620      	mov	r0, r4
 801aeac:	f7ff fbae 	bl	801a60c <_free_r>
 801aeb0:	4631      	mov	r1, r6
 801aeb2:	e7ef      	b.n	801ae94 <_reclaim_reent+0x8c>
 801aeb4:	2500      	movs	r5, #0
 801aeb6:	e7ef      	b.n	801ae98 <_reclaim_reent+0x90>
 801aeb8:	bd70      	pop	{r4, r5, r6, pc}
 801aeba:	bf00      	nop
 801aebc:	200000e8 	.word	0x200000e8

0801aec0 <_sbrk_r>:
 801aec0:	b538      	push	{r3, r4, r5, lr}
 801aec2:	4d06      	ldr	r5, [pc, #24]	; (801aedc <_sbrk_r+0x1c>)
 801aec4:	2300      	movs	r3, #0
 801aec6:	4604      	mov	r4, r0
 801aec8:	4608      	mov	r0, r1
 801aeca:	602b      	str	r3, [r5, #0]
 801aecc:	f7e6 f86e 	bl	8000fac <_sbrk>
 801aed0:	1c43      	adds	r3, r0, #1
 801aed2:	d102      	bne.n	801aeda <_sbrk_r+0x1a>
 801aed4:	682b      	ldr	r3, [r5, #0]
 801aed6:	b103      	cbz	r3, 801aeda <_sbrk_r+0x1a>
 801aed8:	6023      	str	r3, [r4, #0]
 801aeda:	bd38      	pop	{r3, r4, r5, pc}
 801aedc:	2001857c 	.word	0x2001857c

0801aee0 <siprintf>:
 801aee0:	b40e      	push	{r1, r2, r3}
 801aee2:	b500      	push	{lr}
 801aee4:	b09c      	sub	sp, #112	; 0x70
 801aee6:	ab1d      	add	r3, sp, #116	; 0x74
 801aee8:	9002      	str	r0, [sp, #8]
 801aeea:	9006      	str	r0, [sp, #24]
 801aeec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801aef0:	4809      	ldr	r0, [pc, #36]	; (801af18 <siprintf+0x38>)
 801aef2:	9107      	str	r1, [sp, #28]
 801aef4:	9104      	str	r1, [sp, #16]
 801aef6:	4909      	ldr	r1, [pc, #36]	; (801af1c <siprintf+0x3c>)
 801aef8:	f853 2b04 	ldr.w	r2, [r3], #4
 801aefc:	9105      	str	r1, [sp, #20]
 801aefe:	6800      	ldr	r0, [r0, #0]
 801af00:	9301      	str	r3, [sp, #4]
 801af02:	a902      	add	r1, sp, #8
 801af04:	f000 fbb4 	bl	801b670 <_svfiprintf_r>
 801af08:	9b02      	ldr	r3, [sp, #8]
 801af0a:	2200      	movs	r2, #0
 801af0c:	701a      	strb	r2, [r3, #0]
 801af0e:	b01c      	add	sp, #112	; 0x70
 801af10:	f85d eb04 	ldr.w	lr, [sp], #4
 801af14:	b003      	add	sp, #12
 801af16:	4770      	bx	lr
 801af18:	200000e8 	.word	0x200000e8
 801af1c:	ffff0208 	.word	0xffff0208

0801af20 <__sread>:
 801af20:	b510      	push	{r4, lr}
 801af22:	460c      	mov	r4, r1
 801af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af28:	f000 fca2 	bl	801b870 <_read_r>
 801af2c:	2800      	cmp	r0, #0
 801af2e:	bfab      	itete	ge
 801af30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801af32:	89a3      	ldrhlt	r3, [r4, #12]
 801af34:	181b      	addge	r3, r3, r0
 801af36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801af3a:	bfac      	ite	ge
 801af3c:	6563      	strge	r3, [r4, #84]	; 0x54
 801af3e:	81a3      	strhlt	r3, [r4, #12]
 801af40:	bd10      	pop	{r4, pc}

0801af42 <__swrite>:
 801af42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af46:	461f      	mov	r7, r3
 801af48:	898b      	ldrh	r3, [r1, #12]
 801af4a:	05db      	lsls	r3, r3, #23
 801af4c:	4605      	mov	r5, r0
 801af4e:	460c      	mov	r4, r1
 801af50:	4616      	mov	r6, r2
 801af52:	d505      	bpl.n	801af60 <__swrite+0x1e>
 801af54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af58:	2302      	movs	r3, #2
 801af5a:	2200      	movs	r2, #0
 801af5c:	f000 fa84 	bl	801b468 <_lseek_r>
 801af60:	89a3      	ldrh	r3, [r4, #12]
 801af62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801af6a:	81a3      	strh	r3, [r4, #12]
 801af6c:	4632      	mov	r2, r6
 801af6e:	463b      	mov	r3, r7
 801af70:	4628      	mov	r0, r5
 801af72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af76:	f000 b917 	b.w	801b1a8 <_write_r>

0801af7a <__sseek>:
 801af7a:	b510      	push	{r4, lr}
 801af7c:	460c      	mov	r4, r1
 801af7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af82:	f000 fa71 	bl	801b468 <_lseek_r>
 801af86:	1c43      	adds	r3, r0, #1
 801af88:	89a3      	ldrh	r3, [r4, #12]
 801af8a:	bf15      	itete	ne
 801af8c:	6560      	strne	r0, [r4, #84]	; 0x54
 801af8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801af92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801af96:	81a3      	strheq	r3, [r4, #12]
 801af98:	bf18      	it	ne
 801af9a:	81a3      	strhne	r3, [r4, #12]
 801af9c:	bd10      	pop	{r4, pc}

0801af9e <__sclose>:
 801af9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afa2:	f000 b989 	b.w	801b2b8 <_close_r>
	...

0801afa8 <_strtol_l.isra.0>:
 801afa8:	2b01      	cmp	r3, #1
 801afaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801afae:	d001      	beq.n	801afb4 <_strtol_l.isra.0+0xc>
 801afb0:	2b24      	cmp	r3, #36	; 0x24
 801afb2:	d906      	bls.n	801afc2 <_strtol_l.isra.0+0x1a>
 801afb4:	f000 f990 	bl	801b2d8 <__errno>
 801afb8:	2316      	movs	r3, #22
 801afba:	6003      	str	r3, [r0, #0]
 801afbc:	2000      	movs	r0, #0
 801afbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801afc2:	4f3a      	ldr	r7, [pc, #232]	; (801b0ac <_strtol_l.isra.0+0x104>)
 801afc4:	468e      	mov	lr, r1
 801afc6:	4676      	mov	r6, lr
 801afc8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801afcc:	5de5      	ldrb	r5, [r4, r7]
 801afce:	f015 0508 	ands.w	r5, r5, #8
 801afd2:	d1f8      	bne.n	801afc6 <_strtol_l.isra.0+0x1e>
 801afd4:	2c2d      	cmp	r4, #45	; 0x2d
 801afd6:	d134      	bne.n	801b042 <_strtol_l.isra.0+0x9a>
 801afd8:	f89e 4000 	ldrb.w	r4, [lr]
 801afdc:	f04f 0801 	mov.w	r8, #1
 801afe0:	f106 0e02 	add.w	lr, r6, #2
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d05c      	beq.n	801b0a2 <_strtol_l.isra.0+0xfa>
 801afe8:	2b10      	cmp	r3, #16
 801afea:	d10c      	bne.n	801b006 <_strtol_l.isra.0+0x5e>
 801afec:	2c30      	cmp	r4, #48	; 0x30
 801afee:	d10a      	bne.n	801b006 <_strtol_l.isra.0+0x5e>
 801aff0:	f89e 4000 	ldrb.w	r4, [lr]
 801aff4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801aff8:	2c58      	cmp	r4, #88	; 0x58
 801affa:	d14d      	bne.n	801b098 <_strtol_l.isra.0+0xf0>
 801affc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b000:	2310      	movs	r3, #16
 801b002:	f10e 0e02 	add.w	lr, lr, #2
 801b006:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b00a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b00e:	2600      	movs	r6, #0
 801b010:	fbbc f9f3 	udiv	r9, ip, r3
 801b014:	4635      	mov	r5, r6
 801b016:	fb03 ca19 	mls	sl, r3, r9, ip
 801b01a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b01e:	2f09      	cmp	r7, #9
 801b020:	d818      	bhi.n	801b054 <_strtol_l.isra.0+0xac>
 801b022:	463c      	mov	r4, r7
 801b024:	42a3      	cmp	r3, r4
 801b026:	dd24      	ble.n	801b072 <_strtol_l.isra.0+0xca>
 801b028:	2e00      	cmp	r6, #0
 801b02a:	db1f      	blt.n	801b06c <_strtol_l.isra.0+0xc4>
 801b02c:	45a9      	cmp	r9, r5
 801b02e:	d31d      	bcc.n	801b06c <_strtol_l.isra.0+0xc4>
 801b030:	d101      	bne.n	801b036 <_strtol_l.isra.0+0x8e>
 801b032:	45a2      	cmp	sl, r4
 801b034:	db1a      	blt.n	801b06c <_strtol_l.isra.0+0xc4>
 801b036:	fb05 4503 	mla	r5, r5, r3, r4
 801b03a:	2601      	movs	r6, #1
 801b03c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b040:	e7eb      	b.n	801b01a <_strtol_l.isra.0+0x72>
 801b042:	2c2b      	cmp	r4, #43	; 0x2b
 801b044:	bf08      	it	eq
 801b046:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b04a:	46a8      	mov	r8, r5
 801b04c:	bf08      	it	eq
 801b04e:	f106 0e02 	addeq.w	lr, r6, #2
 801b052:	e7c7      	b.n	801afe4 <_strtol_l.isra.0+0x3c>
 801b054:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b058:	2f19      	cmp	r7, #25
 801b05a:	d801      	bhi.n	801b060 <_strtol_l.isra.0+0xb8>
 801b05c:	3c37      	subs	r4, #55	; 0x37
 801b05e:	e7e1      	b.n	801b024 <_strtol_l.isra.0+0x7c>
 801b060:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b064:	2f19      	cmp	r7, #25
 801b066:	d804      	bhi.n	801b072 <_strtol_l.isra.0+0xca>
 801b068:	3c57      	subs	r4, #87	; 0x57
 801b06a:	e7db      	b.n	801b024 <_strtol_l.isra.0+0x7c>
 801b06c:	f04f 36ff 	mov.w	r6, #4294967295
 801b070:	e7e4      	b.n	801b03c <_strtol_l.isra.0+0x94>
 801b072:	2e00      	cmp	r6, #0
 801b074:	da05      	bge.n	801b082 <_strtol_l.isra.0+0xda>
 801b076:	2322      	movs	r3, #34	; 0x22
 801b078:	6003      	str	r3, [r0, #0]
 801b07a:	4665      	mov	r5, ip
 801b07c:	b942      	cbnz	r2, 801b090 <_strtol_l.isra.0+0xe8>
 801b07e:	4628      	mov	r0, r5
 801b080:	e79d      	b.n	801afbe <_strtol_l.isra.0+0x16>
 801b082:	f1b8 0f00 	cmp.w	r8, #0
 801b086:	d000      	beq.n	801b08a <_strtol_l.isra.0+0xe2>
 801b088:	426d      	negs	r5, r5
 801b08a:	2a00      	cmp	r2, #0
 801b08c:	d0f7      	beq.n	801b07e <_strtol_l.isra.0+0xd6>
 801b08e:	b10e      	cbz	r6, 801b094 <_strtol_l.isra.0+0xec>
 801b090:	f10e 31ff 	add.w	r1, lr, #4294967295
 801b094:	6011      	str	r1, [r2, #0]
 801b096:	e7f2      	b.n	801b07e <_strtol_l.isra.0+0xd6>
 801b098:	2430      	movs	r4, #48	; 0x30
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d1b3      	bne.n	801b006 <_strtol_l.isra.0+0x5e>
 801b09e:	2308      	movs	r3, #8
 801b0a0:	e7b1      	b.n	801b006 <_strtol_l.isra.0+0x5e>
 801b0a2:	2c30      	cmp	r4, #48	; 0x30
 801b0a4:	d0a4      	beq.n	801aff0 <_strtol_l.isra.0+0x48>
 801b0a6:	230a      	movs	r3, #10
 801b0a8:	e7ad      	b.n	801b006 <_strtol_l.isra.0+0x5e>
 801b0aa:	bf00      	nop
 801b0ac:	0801f6b8 	.word	0x0801f6b8

0801b0b0 <strtol>:
 801b0b0:	4613      	mov	r3, r2
 801b0b2:	460a      	mov	r2, r1
 801b0b4:	4601      	mov	r1, r0
 801b0b6:	4802      	ldr	r0, [pc, #8]	; (801b0c0 <strtol+0x10>)
 801b0b8:	6800      	ldr	r0, [r0, #0]
 801b0ba:	f7ff bf75 	b.w	801afa8 <_strtol_l.isra.0>
 801b0be:	bf00      	nop
 801b0c0:	200000e8 	.word	0x200000e8

0801b0c4 <_vsiprintf_r>:
 801b0c4:	b500      	push	{lr}
 801b0c6:	b09b      	sub	sp, #108	; 0x6c
 801b0c8:	9100      	str	r1, [sp, #0]
 801b0ca:	9104      	str	r1, [sp, #16]
 801b0cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b0d0:	9105      	str	r1, [sp, #20]
 801b0d2:	9102      	str	r1, [sp, #8]
 801b0d4:	4905      	ldr	r1, [pc, #20]	; (801b0ec <_vsiprintf_r+0x28>)
 801b0d6:	9103      	str	r1, [sp, #12]
 801b0d8:	4669      	mov	r1, sp
 801b0da:	f000 fac9 	bl	801b670 <_svfiprintf_r>
 801b0de:	9b00      	ldr	r3, [sp, #0]
 801b0e0:	2200      	movs	r2, #0
 801b0e2:	701a      	strb	r2, [r3, #0]
 801b0e4:	b01b      	add	sp, #108	; 0x6c
 801b0e6:	f85d fb04 	ldr.w	pc, [sp], #4
 801b0ea:	bf00      	nop
 801b0ec:	ffff0208 	.word	0xffff0208

0801b0f0 <vsiprintf>:
 801b0f0:	4613      	mov	r3, r2
 801b0f2:	460a      	mov	r2, r1
 801b0f4:	4601      	mov	r1, r0
 801b0f6:	4802      	ldr	r0, [pc, #8]	; (801b100 <vsiprintf+0x10>)
 801b0f8:	6800      	ldr	r0, [r0, #0]
 801b0fa:	f7ff bfe3 	b.w	801b0c4 <_vsiprintf_r>
 801b0fe:	bf00      	nop
 801b100:	200000e8 	.word	0x200000e8

0801b104 <__swbuf_r>:
 801b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b106:	460e      	mov	r6, r1
 801b108:	4614      	mov	r4, r2
 801b10a:	4605      	mov	r5, r0
 801b10c:	b118      	cbz	r0, 801b116 <__swbuf_r+0x12>
 801b10e:	6983      	ldr	r3, [r0, #24]
 801b110:	b90b      	cbnz	r3, 801b116 <__swbuf_r+0x12>
 801b112:	f7ff f955 	bl	801a3c0 <__sinit>
 801b116:	4b21      	ldr	r3, [pc, #132]	; (801b19c <__swbuf_r+0x98>)
 801b118:	429c      	cmp	r4, r3
 801b11a:	d12b      	bne.n	801b174 <__swbuf_r+0x70>
 801b11c:	686c      	ldr	r4, [r5, #4]
 801b11e:	69a3      	ldr	r3, [r4, #24]
 801b120:	60a3      	str	r3, [r4, #8]
 801b122:	89a3      	ldrh	r3, [r4, #12]
 801b124:	071a      	lsls	r2, r3, #28
 801b126:	d52f      	bpl.n	801b188 <__swbuf_r+0x84>
 801b128:	6923      	ldr	r3, [r4, #16]
 801b12a:	b36b      	cbz	r3, 801b188 <__swbuf_r+0x84>
 801b12c:	6923      	ldr	r3, [r4, #16]
 801b12e:	6820      	ldr	r0, [r4, #0]
 801b130:	1ac0      	subs	r0, r0, r3
 801b132:	6963      	ldr	r3, [r4, #20]
 801b134:	b2f6      	uxtb	r6, r6
 801b136:	4283      	cmp	r3, r0
 801b138:	4637      	mov	r7, r6
 801b13a:	dc04      	bgt.n	801b146 <__swbuf_r+0x42>
 801b13c:	4621      	mov	r1, r4
 801b13e:	4628      	mov	r0, r5
 801b140:	f000 f956 	bl	801b3f0 <_fflush_r>
 801b144:	bb30      	cbnz	r0, 801b194 <__swbuf_r+0x90>
 801b146:	68a3      	ldr	r3, [r4, #8]
 801b148:	3b01      	subs	r3, #1
 801b14a:	60a3      	str	r3, [r4, #8]
 801b14c:	6823      	ldr	r3, [r4, #0]
 801b14e:	1c5a      	adds	r2, r3, #1
 801b150:	6022      	str	r2, [r4, #0]
 801b152:	701e      	strb	r6, [r3, #0]
 801b154:	6963      	ldr	r3, [r4, #20]
 801b156:	3001      	adds	r0, #1
 801b158:	4283      	cmp	r3, r0
 801b15a:	d004      	beq.n	801b166 <__swbuf_r+0x62>
 801b15c:	89a3      	ldrh	r3, [r4, #12]
 801b15e:	07db      	lsls	r3, r3, #31
 801b160:	d506      	bpl.n	801b170 <__swbuf_r+0x6c>
 801b162:	2e0a      	cmp	r6, #10
 801b164:	d104      	bne.n	801b170 <__swbuf_r+0x6c>
 801b166:	4621      	mov	r1, r4
 801b168:	4628      	mov	r0, r5
 801b16a:	f000 f941 	bl	801b3f0 <_fflush_r>
 801b16e:	b988      	cbnz	r0, 801b194 <__swbuf_r+0x90>
 801b170:	4638      	mov	r0, r7
 801b172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b174:	4b0a      	ldr	r3, [pc, #40]	; (801b1a0 <__swbuf_r+0x9c>)
 801b176:	429c      	cmp	r4, r3
 801b178:	d101      	bne.n	801b17e <__swbuf_r+0x7a>
 801b17a:	68ac      	ldr	r4, [r5, #8]
 801b17c:	e7cf      	b.n	801b11e <__swbuf_r+0x1a>
 801b17e:	4b09      	ldr	r3, [pc, #36]	; (801b1a4 <__swbuf_r+0xa0>)
 801b180:	429c      	cmp	r4, r3
 801b182:	bf08      	it	eq
 801b184:	68ec      	ldreq	r4, [r5, #12]
 801b186:	e7ca      	b.n	801b11e <__swbuf_r+0x1a>
 801b188:	4621      	mov	r1, r4
 801b18a:	4628      	mov	r0, r5
 801b18c:	f000 f81e 	bl	801b1cc <__swsetup_r>
 801b190:	2800      	cmp	r0, #0
 801b192:	d0cb      	beq.n	801b12c <__swbuf_r+0x28>
 801b194:	f04f 37ff 	mov.w	r7, #4294967295
 801b198:	e7ea      	b.n	801b170 <__swbuf_r+0x6c>
 801b19a:	bf00      	nop
 801b19c:	0801f7d8 	.word	0x0801f7d8
 801b1a0:	0801f7f8 	.word	0x0801f7f8
 801b1a4:	0801f7b8 	.word	0x0801f7b8

0801b1a8 <_write_r>:
 801b1a8:	b538      	push	{r3, r4, r5, lr}
 801b1aa:	4d07      	ldr	r5, [pc, #28]	; (801b1c8 <_write_r+0x20>)
 801b1ac:	4604      	mov	r4, r0
 801b1ae:	4608      	mov	r0, r1
 801b1b0:	4611      	mov	r1, r2
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	602a      	str	r2, [r5, #0]
 801b1b6:	461a      	mov	r2, r3
 801b1b8:	f7fe fa84 	bl	80196c4 <_write>
 801b1bc:	1c43      	adds	r3, r0, #1
 801b1be:	d102      	bne.n	801b1c6 <_write_r+0x1e>
 801b1c0:	682b      	ldr	r3, [r5, #0]
 801b1c2:	b103      	cbz	r3, 801b1c6 <_write_r+0x1e>
 801b1c4:	6023      	str	r3, [r4, #0]
 801b1c6:	bd38      	pop	{r3, r4, r5, pc}
 801b1c8:	2001857c 	.word	0x2001857c

0801b1cc <__swsetup_r>:
 801b1cc:	4b32      	ldr	r3, [pc, #200]	; (801b298 <__swsetup_r+0xcc>)
 801b1ce:	b570      	push	{r4, r5, r6, lr}
 801b1d0:	681d      	ldr	r5, [r3, #0]
 801b1d2:	4606      	mov	r6, r0
 801b1d4:	460c      	mov	r4, r1
 801b1d6:	b125      	cbz	r5, 801b1e2 <__swsetup_r+0x16>
 801b1d8:	69ab      	ldr	r3, [r5, #24]
 801b1da:	b913      	cbnz	r3, 801b1e2 <__swsetup_r+0x16>
 801b1dc:	4628      	mov	r0, r5
 801b1de:	f7ff f8ef 	bl	801a3c0 <__sinit>
 801b1e2:	4b2e      	ldr	r3, [pc, #184]	; (801b29c <__swsetup_r+0xd0>)
 801b1e4:	429c      	cmp	r4, r3
 801b1e6:	d10f      	bne.n	801b208 <__swsetup_r+0x3c>
 801b1e8:	686c      	ldr	r4, [r5, #4]
 801b1ea:	89a3      	ldrh	r3, [r4, #12]
 801b1ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b1f0:	0719      	lsls	r1, r3, #28
 801b1f2:	d42c      	bmi.n	801b24e <__swsetup_r+0x82>
 801b1f4:	06dd      	lsls	r5, r3, #27
 801b1f6:	d411      	bmi.n	801b21c <__swsetup_r+0x50>
 801b1f8:	2309      	movs	r3, #9
 801b1fa:	6033      	str	r3, [r6, #0]
 801b1fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b200:	81a3      	strh	r3, [r4, #12]
 801b202:	f04f 30ff 	mov.w	r0, #4294967295
 801b206:	e03e      	b.n	801b286 <__swsetup_r+0xba>
 801b208:	4b25      	ldr	r3, [pc, #148]	; (801b2a0 <__swsetup_r+0xd4>)
 801b20a:	429c      	cmp	r4, r3
 801b20c:	d101      	bne.n	801b212 <__swsetup_r+0x46>
 801b20e:	68ac      	ldr	r4, [r5, #8]
 801b210:	e7eb      	b.n	801b1ea <__swsetup_r+0x1e>
 801b212:	4b24      	ldr	r3, [pc, #144]	; (801b2a4 <__swsetup_r+0xd8>)
 801b214:	429c      	cmp	r4, r3
 801b216:	bf08      	it	eq
 801b218:	68ec      	ldreq	r4, [r5, #12]
 801b21a:	e7e6      	b.n	801b1ea <__swsetup_r+0x1e>
 801b21c:	0758      	lsls	r0, r3, #29
 801b21e:	d512      	bpl.n	801b246 <__swsetup_r+0x7a>
 801b220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b222:	b141      	cbz	r1, 801b236 <__swsetup_r+0x6a>
 801b224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b228:	4299      	cmp	r1, r3
 801b22a:	d002      	beq.n	801b232 <__swsetup_r+0x66>
 801b22c:	4630      	mov	r0, r6
 801b22e:	f7ff f9ed 	bl	801a60c <_free_r>
 801b232:	2300      	movs	r3, #0
 801b234:	6363      	str	r3, [r4, #52]	; 0x34
 801b236:	89a3      	ldrh	r3, [r4, #12]
 801b238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b23c:	81a3      	strh	r3, [r4, #12]
 801b23e:	2300      	movs	r3, #0
 801b240:	6063      	str	r3, [r4, #4]
 801b242:	6923      	ldr	r3, [r4, #16]
 801b244:	6023      	str	r3, [r4, #0]
 801b246:	89a3      	ldrh	r3, [r4, #12]
 801b248:	f043 0308 	orr.w	r3, r3, #8
 801b24c:	81a3      	strh	r3, [r4, #12]
 801b24e:	6923      	ldr	r3, [r4, #16]
 801b250:	b94b      	cbnz	r3, 801b266 <__swsetup_r+0x9a>
 801b252:	89a3      	ldrh	r3, [r4, #12]
 801b254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b25c:	d003      	beq.n	801b266 <__swsetup_r+0x9a>
 801b25e:	4621      	mov	r1, r4
 801b260:	4630      	mov	r0, r6
 801b262:	f000 f937 	bl	801b4d4 <__smakebuf_r>
 801b266:	89a0      	ldrh	r0, [r4, #12]
 801b268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b26c:	f010 0301 	ands.w	r3, r0, #1
 801b270:	d00a      	beq.n	801b288 <__swsetup_r+0xbc>
 801b272:	2300      	movs	r3, #0
 801b274:	60a3      	str	r3, [r4, #8]
 801b276:	6963      	ldr	r3, [r4, #20]
 801b278:	425b      	negs	r3, r3
 801b27a:	61a3      	str	r3, [r4, #24]
 801b27c:	6923      	ldr	r3, [r4, #16]
 801b27e:	b943      	cbnz	r3, 801b292 <__swsetup_r+0xc6>
 801b280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b284:	d1ba      	bne.n	801b1fc <__swsetup_r+0x30>
 801b286:	bd70      	pop	{r4, r5, r6, pc}
 801b288:	0781      	lsls	r1, r0, #30
 801b28a:	bf58      	it	pl
 801b28c:	6963      	ldrpl	r3, [r4, #20]
 801b28e:	60a3      	str	r3, [r4, #8]
 801b290:	e7f4      	b.n	801b27c <__swsetup_r+0xb0>
 801b292:	2000      	movs	r0, #0
 801b294:	e7f7      	b.n	801b286 <__swsetup_r+0xba>
 801b296:	bf00      	nop
 801b298:	200000e8 	.word	0x200000e8
 801b29c:	0801f7d8 	.word	0x0801f7d8
 801b2a0:	0801f7f8 	.word	0x0801f7f8
 801b2a4:	0801f7b8 	.word	0x0801f7b8

0801b2a8 <abort>:
 801b2a8:	b508      	push	{r3, lr}
 801b2aa:	2006      	movs	r0, #6
 801b2ac:	f000 fb1a 	bl	801b8e4 <raise>
 801b2b0:	2001      	movs	r0, #1
 801b2b2:	f7e5 fe3d 	bl	8000f30 <_exit>
	...

0801b2b8 <_close_r>:
 801b2b8:	b538      	push	{r3, r4, r5, lr}
 801b2ba:	4d06      	ldr	r5, [pc, #24]	; (801b2d4 <_close_r+0x1c>)
 801b2bc:	2300      	movs	r3, #0
 801b2be:	4604      	mov	r4, r0
 801b2c0:	4608      	mov	r0, r1
 801b2c2:	602b      	str	r3, [r5, #0]
 801b2c4:	f7e5 fe3e 	bl	8000f44 <_close>
 801b2c8:	1c43      	adds	r3, r0, #1
 801b2ca:	d102      	bne.n	801b2d2 <_close_r+0x1a>
 801b2cc:	682b      	ldr	r3, [r5, #0]
 801b2ce:	b103      	cbz	r3, 801b2d2 <_close_r+0x1a>
 801b2d0:	6023      	str	r3, [r4, #0]
 801b2d2:	bd38      	pop	{r3, r4, r5, pc}
 801b2d4:	2001857c 	.word	0x2001857c

0801b2d8 <__errno>:
 801b2d8:	4b01      	ldr	r3, [pc, #4]	; (801b2e0 <__errno+0x8>)
 801b2da:	6818      	ldr	r0, [r3, #0]
 801b2dc:	4770      	bx	lr
 801b2de:	bf00      	nop
 801b2e0:	200000e8 	.word	0x200000e8

0801b2e4 <__sflush_r>:
 801b2e4:	898a      	ldrh	r2, [r1, #12]
 801b2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2ea:	4605      	mov	r5, r0
 801b2ec:	0710      	lsls	r0, r2, #28
 801b2ee:	460c      	mov	r4, r1
 801b2f0:	d458      	bmi.n	801b3a4 <__sflush_r+0xc0>
 801b2f2:	684b      	ldr	r3, [r1, #4]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	dc05      	bgt.n	801b304 <__sflush_r+0x20>
 801b2f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	dc02      	bgt.n	801b304 <__sflush_r+0x20>
 801b2fe:	2000      	movs	r0, #0
 801b300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b306:	2e00      	cmp	r6, #0
 801b308:	d0f9      	beq.n	801b2fe <__sflush_r+0x1a>
 801b30a:	2300      	movs	r3, #0
 801b30c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b310:	682f      	ldr	r7, [r5, #0]
 801b312:	602b      	str	r3, [r5, #0]
 801b314:	d032      	beq.n	801b37c <__sflush_r+0x98>
 801b316:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b318:	89a3      	ldrh	r3, [r4, #12]
 801b31a:	075a      	lsls	r2, r3, #29
 801b31c:	d505      	bpl.n	801b32a <__sflush_r+0x46>
 801b31e:	6863      	ldr	r3, [r4, #4]
 801b320:	1ac0      	subs	r0, r0, r3
 801b322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b324:	b10b      	cbz	r3, 801b32a <__sflush_r+0x46>
 801b326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b328:	1ac0      	subs	r0, r0, r3
 801b32a:	2300      	movs	r3, #0
 801b32c:	4602      	mov	r2, r0
 801b32e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b330:	6a21      	ldr	r1, [r4, #32]
 801b332:	4628      	mov	r0, r5
 801b334:	47b0      	blx	r6
 801b336:	1c43      	adds	r3, r0, #1
 801b338:	89a3      	ldrh	r3, [r4, #12]
 801b33a:	d106      	bne.n	801b34a <__sflush_r+0x66>
 801b33c:	6829      	ldr	r1, [r5, #0]
 801b33e:	291d      	cmp	r1, #29
 801b340:	d82c      	bhi.n	801b39c <__sflush_r+0xb8>
 801b342:	4a2a      	ldr	r2, [pc, #168]	; (801b3ec <__sflush_r+0x108>)
 801b344:	40ca      	lsrs	r2, r1
 801b346:	07d6      	lsls	r6, r2, #31
 801b348:	d528      	bpl.n	801b39c <__sflush_r+0xb8>
 801b34a:	2200      	movs	r2, #0
 801b34c:	6062      	str	r2, [r4, #4]
 801b34e:	04d9      	lsls	r1, r3, #19
 801b350:	6922      	ldr	r2, [r4, #16]
 801b352:	6022      	str	r2, [r4, #0]
 801b354:	d504      	bpl.n	801b360 <__sflush_r+0x7c>
 801b356:	1c42      	adds	r2, r0, #1
 801b358:	d101      	bne.n	801b35e <__sflush_r+0x7a>
 801b35a:	682b      	ldr	r3, [r5, #0]
 801b35c:	b903      	cbnz	r3, 801b360 <__sflush_r+0x7c>
 801b35e:	6560      	str	r0, [r4, #84]	; 0x54
 801b360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b362:	602f      	str	r7, [r5, #0]
 801b364:	2900      	cmp	r1, #0
 801b366:	d0ca      	beq.n	801b2fe <__sflush_r+0x1a>
 801b368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b36c:	4299      	cmp	r1, r3
 801b36e:	d002      	beq.n	801b376 <__sflush_r+0x92>
 801b370:	4628      	mov	r0, r5
 801b372:	f7ff f94b 	bl	801a60c <_free_r>
 801b376:	2000      	movs	r0, #0
 801b378:	6360      	str	r0, [r4, #52]	; 0x34
 801b37a:	e7c1      	b.n	801b300 <__sflush_r+0x1c>
 801b37c:	6a21      	ldr	r1, [r4, #32]
 801b37e:	2301      	movs	r3, #1
 801b380:	4628      	mov	r0, r5
 801b382:	47b0      	blx	r6
 801b384:	1c41      	adds	r1, r0, #1
 801b386:	d1c7      	bne.n	801b318 <__sflush_r+0x34>
 801b388:	682b      	ldr	r3, [r5, #0]
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d0c4      	beq.n	801b318 <__sflush_r+0x34>
 801b38e:	2b1d      	cmp	r3, #29
 801b390:	d001      	beq.n	801b396 <__sflush_r+0xb2>
 801b392:	2b16      	cmp	r3, #22
 801b394:	d101      	bne.n	801b39a <__sflush_r+0xb6>
 801b396:	602f      	str	r7, [r5, #0]
 801b398:	e7b1      	b.n	801b2fe <__sflush_r+0x1a>
 801b39a:	89a3      	ldrh	r3, [r4, #12]
 801b39c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b3a0:	81a3      	strh	r3, [r4, #12]
 801b3a2:	e7ad      	b.n	801b300 <__sflush_r+0x1c>
 801b3a4:	690f      	ldr	r7, [r1, #16]
 801b3a6:	2f00      	cmp	r7, #0
 801b3a8:	d0a9      	beq.n	801b2fe <__sflush_r+0x1a>
 801b3aa:	0793      	lsls	r3, r2, #30
 801b3ac:	680e      	ldr	r6, [r1, #0]
 801b3ae:	bf08      	it	eq
 801b3b0:	694b      	ldreq	r3, [r1, #20]
 801b3b2:	600f      	str	r7, [r1, #0]
 801b3b4:	bf18      	it	ne
 801b3b6:	2300      	movne	r3, #0
 801b3b8:	eba6 0807 	sub.w	r8, r6, r7
 801b3bc:	608b      	str	r3, [r1, #8]
 801b3be:	f1b8 0f00 	cmp.w	r8, #0
 801b3c2:	dd9c      	ble.n	801b2fe <__sflush_r+0x1a>
 801b3c4:	6a21      	ldr	r1, [r4, #32]
 801b3c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b3c8:	4643      	mov	r3, r8
 801b3ca:	463a      	mov	r2, r7
 801b3cc:	4628      	mov	r0, r5
 801b3ce:	47b0      	blx	r6
 801b3d0:	2800      	cmp	r0, #0
 801b3d2:	dc06      	bgt.n	801b3e2 <__sflush_r+0xfe>
 801b3d4:	89a3      	ldrh	r3, [r4, #12]
 801b3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b3da:	81a3      	strh	r3, [r4, #12]
 801b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 801b3e0:	e78e      	b.n	801b300 <__sflush_r+0x1c>
 801b3e2:	4407      	add	r7, r0
 801b3e4:	eba8 0800 	sub.w	r8, r8, r0
 801b3e8:	e7e9      	b.n	801b3be <__sflush_r+0xda>
 801b3ea:	bf00      	nop
 801b3ec:	20400001 	.word	0x20400001

0801b3f0 <_fflush_r>:
 801b3f0:	b538      	push	{r3, r4, r5, lr}
 801b3f2:	690b      	ldr	r3, [r1, #16]
 801b3f4:	4605      	mov	r5, r0
 801b3f6:	460c      	mov	r4, r1
 801b3f8:	b913      	cbnz	r3, 801b400 <_fflush_r+0x10>
 801b3fa:	2500      	movs	r5, #0
 801b3fc:	4628      	mov	r0, r5
 801b3fe:	bd38      	pop	{r3, r4, r5, pc}
 801b400:	b118      	cbz	r0, 801b40a <_fflush_r+0x1a>
 801b402:	6983      	ldr	r3, [r0, #24]
 801b404:	b90b      	cbnz	r3, 801b40a <_fflush_r+0x1a>
 801b406:	f7fe ffdb 	bl	801a3c0 <__sinit>
 801b40a:	4b14      	ldr	r3, [pc, #80]	; (801b45c <_fflush_r+0x6c>)
 801b40c:	429c      	cmp	r4, r3
 801b40e:	d11b      	bne.n	801b448 <_fflush_r+0x58>
 801b410:	686c      	ldr	r4, [r5, #4]
 801b412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b416:	2b00      	cmp	r3, #0
 801b418:	d0ef      	beq.n	801b3fa <_fflush_r+0xa>
 801b41a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b41c:	07d0      	lsls	r0, r2, #31
 801b41e:	d404      	bmi.n	801b42a <_fflush_r+0x3a>
 801b420:	0599      	lsls	r1, r3, #22
 801b422:	d402      	bmi.n	801b42a <_fflush_r+0x3a>
 801b424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b426:	f7ff f8a0 	bl	801a56a <__retarget_lock_acquire_recursive>
 801b42a:	4628      	mov	r0, r5
 801b42c:	4621      	mov	r1, r4
 801b42e:	f7ff ff59 	bl	801b2e4 <__sflush_r>
 801b432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b434:	07da      	lsls	r2, r3, #31
 801b436:	4605      	mov	r5, r0
 801b438:	d4e0      	bmi.n	801b3fc <_fflush_r+0xc>
 801b43a:	89a3      	ldrh	r3, [r4, #12]
 801b43c:	059b      	lsls	r3, r3, #22
 801b43e:	d4dd      	bmi.n	801b3fc <_fflush_r+0xc>
 801b440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b442:	f7ff f893 	bl	801a56c <__retarget_lock_release_recursive>
 801b446:	e7d9      	b.n	801b3fc <_fflush_r+0xc>
 801b448:	4b05      	ldr	r3, [pc, #20]	; (801b460 <_fflush_r+0x70>)
 801b44a:	429c      	cmp	r4, r3
 801b44c:	d101      	bne.n	801b452 <_fflush_r+0x62>
 801b44e:	68ac      	ldr	r4, [r5, #8]
 801b450:	e7df      	b.n	801b412 <_fflush_r+0x22>
 801b452:	4b04      	ldr	r3, [pc, #16]	; (801b464 <_fflush_r+0x74>)
 801b454:	429c      	cmp	r4, r3
 801b456:	bf08      	it	eq
 801b458:	68ec      	ldreq	r4, [r5, #12]
 801b45a:	e7da      	b.n	801b412 <_fflush_r+0x22>
 801b45c:	0801f7d8 	.word	0x0801f7d8
 801b460:	0801f7f8 	.word	0x0801f7f8
 801b464:	0801f7b8 	.word	0x0801f7b8

0801b468 <_lseek_r>:
 801b468:	b538      	push	{r3, r4, r5, lr}
 801b46a:	4d07      	ldr	r5, [pc, #28]	; (801b488 <_lseek_r+0x20>)
 801b46c:	4604      	mov	r4, r0
 801b46e:	4608      	mov	r0, r1
 801b470:	4611      	mov	r1, r2
 801b472:	2200      	movs	r2, #0
 801b474:	602a      	str	r2, [r5, #0]
 801b476:	461a      	mov	r2, r3
 801b478:	f7e5 fd8b 	bl	8000f92 <_lseek>
 801b47c:	1c43      	adds	r3, r0, #1
 801b47e:	d102      	bne.n	801b486 <_lseek_r+0x1e>
 801b480:	682b      	ldr	r3, [r5, #0]
 801b482:	b103      	cbz	r3, 801b486 <_lseek_r+0x1e>
 801b484:	6023      	str	r3, [r4, #0]
 801b486:	bd38      	pop	{r3, r4, r5, pc}
 801b488:	2001857c 	.word	0x2001857c

0801b48c <__swhatbuf_r>:
 801b48c:	b570      	push	{r4, r5, r6, lr}
 801b48e:	460e      	mov	r6, r1
 801b490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b494:	2900      	cmp	r1, #0
 801b496:	b096      	sub	sp, #88	; 0x58
 801b498:	4614      	mov	r4, r2
 801b49a:	461d      	mov	r5, r3
 801b49c:	da07      	bge.n	801b4ae <__swhatbuf_r+0x22>
 801b49e:	2300      	movs	r3, #0
 801b4a0:	602b      	str	r3, [r5, #0]
 801b4a2:	89b3      	ldrh	r3, [r6, #12]
 801b4a4:	061a      	lsls	r2, r3, #24
 801b4a6:	d410      	bmi.n	801b4ca <__swhatbuf_r+0x3e>
 801b4a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b4ac:	e00e      	b.n	801b4cc <__swhatbuf_r+0x40>
 801b4ae:	466a      	mov	r2, sp
 801b4b0:	f000 fa34 	bl	801b91c <_fstat_r>
 801b4b4:	2800      	cmp	r0, #0
 801b4b6:	dbf2      	blt.n	801b49e <__swhatbuf_r+0x12>
 801b4b8:	9a01      	ldr	r2, [sp, #4]
 801b4ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b4be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b4c2:	425a      	negs	r2, r3
 801b4c4:	415a      	adcs	r2, r3
 801b4c6:	602a      	str	r2, [r5, #0]
 801b4c8:	e7ee      	b.n	801b4a8 <__swhatbuf_r+0x1c>
 801b4ca:	2340      	movs	r3, #64	; 0x40
 801b4cc:	2000      	movs	r0, #0
 801b4ce:	6023      	str	r3, [r4, #0]
 801b4d0:	b016      	add	sp, #88	; 0x58
 801b4d2:	bd70      	pop	{r4, r5, r6, pc}

0801b4d4 <__smakebuf_r>:
 801b4d4:	898b      	ldrh	r3, [r1, #12]
 801b4d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b4d8:	079d      	lsls	r5, r3, #30
 801b4da:	4606      	mov	r6, r0
 801b4dc:	460c      	mov	r4, r1
 801b4de:	d507      	bpl.n	801b4f0 <__smakebuf_r+0x1c>
 801b4e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b4e4:	6023      	str	r3, [r4, #0]
 801b4e6:	6123      	str	r3, [r4, #16]
 801b4e8:	2301      	movs	r3, #1
 801b4ea:	6163      	str	r3, [r4, #20]
 801b4ec:	b002      	add	sp, #8
 801b4ee:	bd70      	pop	{r4, r5, r6, pc}
 801b4f0:	ab01      	add	r3, sp, #4
 801b4f2:	466a      	mov	r2, sp
 801b4f4:	f7ff ffca 	bl	801b48c <__swhatbuf_r>
 801b4f8:	9900      	ldr	r1, [sp, #0]
 801b4fa:	4605      	mov	r5, r0
 801b4fc:	4630      	mov	r0, r6
 801b4fe:	f7ff f8d5 	bl	801a6ac <_malloc_r>
 801b502:	b948      	cbnz	r0, 801b518 <__smakebuf_r+0x44>
 801b504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b508:	059a      	lsls	r2, r3, #22
 801b50a:	d4ef      	bmi.n	801b4ec <__smakebuf_r+0x18>
 801b50c:	f023 0303 	bic.w	r3, r3, #3
 801b510:	f043 0302 	orr.w	r3, r3, #2
 801b514:	81a3      	strh	r3, [r4, #12]
 801b516:	e7e3      	b.n	801b4e0 <__smakebuf_r+0xc>
 801b518:	4b0d      	ldr	r3, [pc, #52]	; (801b550 <__smakebuf_r+0x7c>)
 801b51a:	62b3      	str	r3, [r6, #40]	; 0x28
 801b51c:	89a3      	ldrh	r3, [r4, #12]
 801b51e:	6020      	str	r0, [r4, #0]
 801b520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b524:	81a3      	strh	r3, [r4, #12]
 801b526:	9b00      	ldr	r3, [sp, #0]
 801b528:	6163      	str	r3, [r4, #20]
 801b52a:	9b01      	ldr	r3, [sp, #4]
 801b52c:	6120      	str	r0, [r4, #16]
 801b52e:	b15b      	cbz	r3, 801b548 <__smakebuf_r+0x74>
 801b530:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b534:	4630      	mov	r0, r6
 801b536:	f000 fa03 	bl	801b940 <_isatty_r>
 801b53a:	b128      	cbz	r0, 801b548 <__smakebuf_r+0x74>
 801b53c:	89a3      	ldrh	r3, [r4, #12]
 801b53e:	f023 0303 	bic.w	r3, r3, #3
 801b542:	f043 0301 	orr.w	r3, r3, #1
 801b546:	81a3      	strh	r3, [r4, #12]
 801b548:	89a0      	ldrh	r0, [r4, #12]
 801b54a:	4305      	orrs	r5, r0
 801b54c:	81a5      	strh	r5, [r4, #12]
 801b54e:	e7cd      	b.n	801b4ec <__smakebuf_r+0x18>
 801b550:	0801a359 	.word	0x0801a359

0801b554 <__malloc_lock>:
 801b554:	4801      	ldr	r0, [pc, #4]	; (801b55c <__malloc_lock+0x8>)
 801b556:	f7ff b808 	b.w	801a56a <__retarget_lock_acquire_recursive>
 801b55a:	bf00      	nop
 801b55c:	200186dc 	.word	0x200186dc

0801b560 <__malloc_unlock>:
 801b560:	4801      	ldr	r0, [pc, #4]	; (801b568 <__malloc_unlock+0x8>)
 801b562:	f7ff b803 	b.w	801a56c <__retarget_lock_release_recursive>
 801b566:	bf00      	nop
 801b568:	200186dc 	.word	0x200186dc

0801b56c <_realloc_r>:
 801b56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b56e:	4607      	mov	r7, r0
 801b570:	4614      	mov	r4, r2
 801b572:	460e      	mov	r6, r1
 801b574:	b921      	cbnz	r1, 801b580 <_realloc_r+0x14>
 801b576:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b57a:	4611      	mov	r1, r2
 801b57c:	f7ff b896 	b.w	801a6ac <_malloc_r>
 801b580:	b922      	cbnz	r2, 801b58c <_realloc_r+0x20>
 801b582:	f7ff f843 	bl	801a60c <_free_r>
 801b586:	4625      	mov	r5, r4
 801b588:	4628      	mov	r0, r5
 801b58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b58c:	f000 f9e8 	bl	801b960 <_malloc_usable_size_r>
 801b590:	42a0      	cmp	r0, r4
 801b592:	d20f      	bcs.n	801b5b4 <_realloc_r+0x48>
 801b594:	4621      	mov	r1, r4
 801b596:	4638      	mov	r0, r7
 801b598:	f7ff f888 	bl	801a6ac <_malloc_r>
 801b59c:	4605      	mov	r5, r0
 801b59e:	2800      	cmp	r0, #0
 801b5a0:	d0f2      	beq.n	801b588 <_realloc_r+0x1c>
 801b5a2:	4631      	mov	r1, r6
 801b5a4:	4622      	mov	r2, r4
 801b5a6:	f7ff f801 	bl	801a5ac <memcpy>
 801b5aa:	4631      	mov	r1, r6
 801b5ac:	4638      	mov	r0, r7
 801b5ae:	f7ff f82d 	bl	801a60c <_free_r>
 801b5b2:	e7e9      	b.n	801b588 <_realloc_r+0x1c>
 801b5b4:	4635      	mov	r5, r6
 801b5b6:	e7e7      	b.n	801b588 <_realloc_r+0x1c>

0801b5b8 <__ssputs_r>:
 801b5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5bc:	688e      	ldr	r6, [r1, #8]
 801b5be:	429e      	cmp	r6, r3
 801b5c0:	4682      	mov	sl, r0
 801b5c2:	460c      	mov	r4, r1
 801b5c4:	4690      	mov	r8, r2
 801b5c6:	461f      	mov	r7, r3
 801b5c8:	d838      	bhi.n	801b63c <__ssputs_r+0x84>
 801b5ca:	898a      	ldrh	r2, [r1, #12]
 801b5cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b5d0:	d032      	beq.n	801b638 <__ssputs_r+0x80>
 801b5d2:	6825      	ldr	r5, [r4, #0]
 801b5d4:	6909      	ldr	r1, [r1, #16]
 801b5d6:	eba5 0901 	sub.w	r9, r5, r1
 801b5da:	6965      	ldr	r5, [r4, #20]
 801b5dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b5e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b5e4:	3301      	adds	r3, #1
 801b5e6:	444b      	add	r3, r9
 801b5e8:	106d      	asrs	r5, r5, #1
 801b5ea:	429d      	cmp	r5, r3
 801b5ec:	bf38      	it	cc
 801b5ee:	461d      	movcc	r5, r3
 801b5f0:	0553      	lsls	r3, r2, #21
 801b5f2:	d531      	bpl.n	801b658 <__ssputs_r+0xa0>
 801b5f4:	4629      	mov	r1, r5
 801b5f6:	f7ff f859 	bl	801a6ac <_malloc_r>
 801b5fa:	4606      	mov	r6, r0
 801b5fc:	b950      	cbnz	r0, 801b614 <__ssputs_r+0x5c>
 801b5fe:	230c      	movs	r3, #12
 801b600:	f8ca 3000 	str.w	r3, [sl]
 801b604:	89a3      	ldrh	r3, [r4, #12]
 801b606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b60a:	81a3      	strh	r3, [r4, #12]
 801b60c:	f04f 30ff 	mov.w	r0, #4294967295
 801b610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b614:	6921      	ldr	r1, [r4, #16]
 801b616:	464a      	mov	r2, r9
 801b618:	f7fe ffc8 	bl	801a5ac <memcpy>
 801b61c:	89a3      	ldrh	r3, [r4, #12]
 801b61e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b626:	81a3      	strh	r3, [r4, #12]
 801b628:	6126      	str	r6, [r4, #16]
 801b62a:	6165      	str	r5, [r4, #20]
 801b62c:	444e      	add	r6, r9
 801b62e:	eba5 0509 	sub.w	r5, r5, r9
 801b632:	6026      	str	r6, [r4, #0]
 801b634:	60a5      	str	r5, [r4, #8]
 801b636:	463e      	mov	r6, r7
 801b638:	42be      	cmp	r6, r7
 801b63a:	d900      	bls.n	801b63e <__ssputs_r+0x86>
 801b63c:	463e      	mov	r6, r7
 801b63e:	4632      	mov	r2, r6
 801b640:	6820      	ldr	r0, [r4, #0]
 801b642:	4641      	mov	r1, r8
 801b644:	f7fe ffc0 	bl	801a5c8 <memmove>
 801b648:	68a3      	ldr	r3, [r4, #8]
 801b64a:	6822      	ldr	r2, [r4, #0]
 801b64c:	1b9b      	subs	r3, r3, r6
 801b64e:	4432      	add	r2, r6
 801b650:	60a3      	str	r3, [r4, #8]
 801b652:	6022      	str	r2, [r4, #0]
 801b654:	2000      	movs	r0, #0
 801b656:	e7db      	b.n	801b610 <__ssputs_r+0x58>
 801b658:	462a      	mov	r2, r5
 801b65a:	f7ff ff87 	bl	801b56c <_realloc_r>
 801b65e:	4606      	mov	r6, r0
 801b660:	2800      	cmp	r0, #0
 801b662:	d1e1      	bne.n	801b628 <__ssputs_r+0x70>
 801b664:	6921      	ldr	r1, [r4, #16]
 801b666:	4650      	mov	r0, sl
 801b668:	f7fe ffd0 	bl	801a60c <_free_r>
 801b66c:	e7c7      	b.n	801b5fe <__ssputs_r+0x46>
	...

0801b670 <_svfiprintf_r>:
 801b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b674:	4698      	mov	r8, r3
 801b676:	898b      	ldrh	r3, [r1, #12]
 801b678:	061b      	lsls	r3, r3, #24
 801b67a:	b09d      	sub	sp, #116	; 0x74
 801b67c:	4607      	mov	r7, r0
 801b67e:	460d      	mov	r5, r1
 801b680:	4614      	mov	r4, r2
 801b682:	d50e      	bpl.n	801b6a2 <_svfiprintf_r+0x32>
 801b684:	690b      	ldr	r3, [r1, #16]
 801b686:	b963      	cbnz	r3, 801b6a2 <_svfiprintf_r+0x32>
 801b688:	2140      	movs	r1, #64	; 0x40
 801b68a:	f7ff f80f 	bl	801a6ac <_malloc_r>
 801b68e:	6028      	str	r0, [r5, #0]
 801b690:	6128      	str	r0, [r5, #16]
 801b692:	b920      	cbnz	r0, 801b69e <_svfiprintf_r+0x2e>
 801b694:	230c      	movs	r3, #12
 801b696:	603b      	str	r3, [r7, #0]
 801b698:	f04f 30ff 	mov.w	r0, #4294967295
 801b69c:	e0d1      	b.n	801b842 <_svfiprintf_r+0x1d2>
 801b69e:	2340      	movs	r3, #64	; 0x40
 801b6a0:	616b      	str	r3, [r5, #20]
 801b6a2:	2300      	movs	r3, #0
 801b6a4:	9309      	str	r3, [sp, #36]	; 0x24
 801b6a6:	2320      	movs	r3, #32
 801b6a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 801b6b0:	2330      	movs	r3, #48	; 0x30
 801b6b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b85c <_svfiprintf_r+0x1ec>
 801b6b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b6ba:	f04f 0901 	mov.w	r9, #1
 801b6be:	4623      	mov	r3, r4
 801b6c0:	469a      	mov	sl, r3
 801b6c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b6c6:	b10a      	cbz	r2, 801b6cc <_svfiprintf_r+0x5c>
 801b6c8:	2a25      	cmp	r2, #37	; 0x25
 801b6ca:	d1f9      	bne.n	801b6c0 <_svfiprintf_r+0x50>
 801b6cc:	ebba 0b04 	subs.w	fp, sl, r4
 801b6d0:	d00b      	beq.n	801b6ea <_svfiprintf_r+0x7a>
 801b6d2:	465b      	mov	r3, fp
 801b6d4:	4622      	mov	r2, r4
 801b6d6:	4629      	mov	r1, r5
 801b6d8:	4638      	mov	r0, r7
 801b6da:	f7ff ff6d 	bl	801b5b8 <__ssputs_r>
 801b6de:	3001      	adds	r0, #1
 801b6e0:	f000 80aa 	beq.w	801b838 <_svfiprintf_r+0x1c8>
 801b6e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b6e6:	445a      	add	r2, fp
 801b6e8:	9209      	str	r2, [sp, #36]	; 0x24
 801b6ea:	f89a 3000 	ldrb.w	r3, [sl]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	f000 80a2 	beq.w	801b838 <_svfiprintf_r+0x1c8>
 801b6f4:	2300      	movs	r3, #0
 801b6f6:	f04f 32ff 	mov.w	r2, #4294967295
 801b6fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b6fe:	f10a 0a01 	add.w	sl, sl, #1
 801b702:	9304      	str	r3, [sp, #16]
 801b704:	9307      	str	r3, [sp, #28]
 801b706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b70a:	931a      	str	r3, [sp, #104]	; 0x68
 801b70c:	4654      	mov	r4, sl
 801b70e:	2205      	movs	r2, #5
 801b710:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b714:	4851      	ldr	r0, [pc, #324]	; (801b85c <_svfiprintf_r+0x1ec>)
 801b716:	f7e4 fd63 	bl	80001e0 <memchr>
 801b71a:	9a04      	ldr	r2, [sp, #16]
 801b71c:	b9d8      	cbnz	r0, 801b756 <_svfiprintf_r+0xe6>
 801b71e:	06d0      	lsls	r0, r2, #27
 801b720:	bf44      	itt	mi
 801b722:	2320      	movmi	r3, #32
 801b724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b728:	0711      	lsls	r1, r2, #28
 801b72a:	bf44      	itt	mi
 801b72c:	232b      	movmi	r3, #43	; 0x2b
 801b72e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b732:	f89a 3000 	ldrb.w	r3, [sl]
 801b736:	2b2a      	cmp	r3, #42	; 0x2a
 801b738:	d015      	beq.n	801b766 <_svfiprintf_r+0xf6>
 801b73a:	9a07      	ldr	r2, [sp, #28]
 801b73c:	4654      	mov	r4, sl
 801b73e:	2000      	movs	r0, #0
 801b740:	f04f 0c0a 	mov.w	ip, #10
 801b744:	4621      	mov	r1, r4
 801b746:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b74a:	3b30      	subs	r3, #48	; 0x30
 801b74c:	2b09      	cmp	r3, #9
 801b74e:	d94e      	bls.n	801b7ee <_svfiprintf_r+0x17e>
 801b750:	b1b0      	cbz	r0, 801b780 <_svfiprintf_r+0x110>
 801b752:	9207      	str	r2, [sp, #28]
 801b754:	e014      	b.n	801b780 <_svfiprintf_r+0x110>
 801b756:	eba0 0308 	sub.w	r3, r0, r8
 801b75a:	fa09 f303 	lsl.w	r3, r9, r3
 801b75e:	4313      	orrs	r3, r2
 801b760:	9304      	str	r3, [sp, #16]
 801b762:	46a2      	mov	sl, r4
 801b764:	e7d2      	b.n	801b70c <_svfiprintf_r+0x9c>
 801b766:	9b03      	ldr	r3, [sp, #12]
 801b768:	1d19      	adds	r1, r3, #4
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	9103      	str	r1, [sp, #12]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	bfbb      	ittet	lt
 801b772:	425b      	neglt	r3, r3
 801b774:	f042 0202 	orrlt.w	r2, r2, #2
 801b778:	9307      	strge	r3, [sp, #28]
 801b77a:	9307      	strlt	r3, [sp, #28]
 801b77c:	bfb8      	it	lt
 801b77e:	9204      	strlt	r2, [sp, #16]
 801b780:	7823      	ldrb	r3, [r4, #0]
 801b782:	2b2e      	cmp	r3, #46	; 0x2e
 801b784:	d10c      	bne.n	801b7a0 <_svfiprintf_r+0x130>
 801b786:	7863      	ldrb	r3, [r4, #1]
 801b788:	2b2a      	cmp	r3, #42	; 0x2a
 801b78a:	d135      	bne.n	801b7f8 <_svfiprintf_r+0x188>
 801b78c:	9b03      	ldr	r3, [sp, #12]
 801b78e:	1d1a      	adds	r2, r3, #4
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	9203      	str	r2, [sp, #12]
 801b794:	2b00      	cmp	r3, #0
 801b796:	bfb8      	it	lt
 801b798:	f04f 33ff 	movlt.w	r3, #4294967295
 801b79c:	3402      	adds	r4, #2
 801b79e:	9305      	str	r3, [sp, #20]
 801b7a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b86c <_svfiprintf_r+0x1fc>
 801b7a4:	7821      	ldrb	r1, [r4, #0]
 801b7a6:	2203      	movs	r2, #3
 801b7a8:	4650      	mov	r0, sl
 801b7aa:	f7e4 fd19 	bl	80001e0 <memchr>
 801b7ae:	b140      	cbz	r0, 801b7c2 <_svfiprintf_r+0x152>
 801b7b0:	2340      	movs	r3, #64	; 0x40
 801b7b2:	eba0 000a 	sub.w	r0, r0, sl
 801b7b6:	fa03 f000 	lsl.w	r0, r3, r0
 801b7ba:	9b04      	ldr	r3, [sp, #16]
 801b7bc:	4303      	orrs	r3, r0
 801b7be:	3401      	adds	r4, #1
 801b7c0:	9304      	str	r3, [sp, #16]
 801b7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7c6:	4826      	ldr	r0, [pc, #152]	; (801b860 <_svfiprintf_r+0x1f0>)
 801b7c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b7cc:	2206      	movs	r2, #6
 801b7ce:	f7e4 fd07 	bl	80001e0 <memchr>
 801b7d2:	2800      	cmp	r0, #0
 801b7d4:	d038      	beq.n	801b848 <_svfiprintf_r+0x1d8>
 801b7d6:	4b23      	ldr	r3, [pc, #140]	; (801b864 <_svfiprintf_r+0x1f4>)
 801b7d8:	bb1b      	cbnz	r3, 801b822 <_svfiprintf_r+0x1b2>
 801b7da:	9b03      	ldr	r3, [sp, #12]
 801b7dc:	3307      	adds	r3, #7
 801b7de:	f023 0307 	bic.w	r3, r3, #7
 801b7e2:	3308      	adds	r3, #8
 801b7e4:	9303      	str	r3, [sp, #12]
 801b7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7e8:	4433      	add	r3, r6
 801b7ea:	9309      	str	r3, [sp, #36]	; 0x24
 801b7ec:	e767      	b.n	801b6be <_svfiprintf_r+0x4e>
 801b7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 801b7f2:	460c      	mov	r4, r1
 801b7f4:	2001      	movs	r0, #1
 801b7f6:	e7a5      	b.n	801b744 <_svfiprintf_r+0xd4>
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	3401      	adds	r4, #1
 801b7fc:	9305      	str	r3, [sp, #20]
 801b7fe:	4619      	mov	r1, r3
 801b800:	f04f 0c0a 	mov.w	ip, #10
 801b804:	4620      	mov	r0, r4
 801b806:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b80a:	3a30      	subs	r2, #48	; 0x30
 801b80c:	2a09      	cmp	r2, #9
 801b80e:	d903      	bls.n	801b818 <_svfiprintf_r+0x1a8>
 801b810:	2b00      	cmp	r3, #0
 801b812:	d0c5      	beq.n	801b7a0 <_svfiprintf_r+0x130>
 801b814:	9105      	str	r1, [sp, #20]
 801b816:	e7c3      	b.n	801b7a0 <_svfiprintf_r+0x130>
 801b818:	fb0c 2101 	mla	r1, ip, r1, r2
 801b81c:	4604      	mov	r4, r0
 801b81e:	2301      	movs	r3, #1
 801b820:	e7f0      	b.n	801b804 <_svfiprintf_r+0x194>
 801b822:	ab03      	add	r3, sp, #12
 801b824:	9300      	str	r3, [sp, #0]
 801b826:	462a      	mov	r2, r5
 801b828:	4b0f      	ldr	r3, [pc, #60]	; (801b868 <_svfiprintf_r+0x1f8>)
 801b82a:	a904      	add	r1, sp, #16
 801b82c:	4638      	mov	r0, r7
 801b82e:	f3af 8000 	nop.w
 801b832:	1c42      	adds	r2, r0, #1
 801b834:	4606      	mov	r6, r0
 801b836:	d1d6      	bne.n	801b7e6 <_svfiprintf_r+0x176>
 801b838:	89ab      	ldrh	r3, [r5, #12]
 801b83a:	065b      	lsls	r3, r3, #25
 801b83c:	f53f af2c 	bmi.w	801b698 <_svfiprintf_r+0x28>
 801b840:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b842:	b01d      	add	sp, #116	; 0x74
 801b844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b848:	ab03      	add	r3, sp, #12
 801b84a:	9300      	str	r3, [sp, #0]
 801b84c:	462a      	mov	r2, r5
 801b84e:	4b06      	ldr	r3, [pc, #24]	; (801b868 <_svfiprintf_r+0x1f8>)
 801b850:	a904      	add	r1, sp, #16
 801b852:	4638      	mov	r0, r7
 801b854:	f7ff f94c 	bl	801aaf0 <_printf_i>
 801b858:	e7eb      	b.n	801b832 <_svfiprintf_r+0x1c2>
 801b85a:	bf00      	nop
 801b85c:	0801f81c 	.word	0x0801f81c
 801b860:	0801f826 	.word	0x0801f826
 801b864:	00000000 	.word	0x00000000
 801b868:	0801b5b9 	.word	0x0801b5b9
 801b86c:	0801f822 	.word	0x0801f822

0801b870 <_read_r>:
 801b870:	b538      	push	{r3, r4, r5, lr}
 801b872:	4d07      	ldr	r5, [pc, #28]	; (801b890 <_read_r+0x20>)
 801b874:	4604      	mov	r4, r0
 801b876:	4608      	mov	r0, r1
 801b878:	4611      	mov	r1, r2
 801b87a:	2200      	movs	r2, #0
 801b87c:	602a      	str	r2, [r5, #0]
 801b87e:	461a      	mov	r2, r3
 801b880:	f7fd ff04 	bl	801968c <_read>
 801b884:	1c43      	adds	r3, r0, #1
 801b886:	d102      	bne.n	801b88e <_read_r+0x1e>
 801b888:	682b      	ldr	r3, [r5, #0]
 801b88a:	b103      	cbz	r3, 801b88e <_read_r+0x1e>
 801b88c:	6023      	str	r3, [r4, #0]
 801b88e:	bd38      	pop	{r3, r4, r5, pc}
 801b890:	2001857c 	.word	0x2001857c

0801b894 <_raise_r>:
 801b894:	291f      	cmp	r1, #31
 801b896:	b538      	push	{r3, r4, r5, lr}
 801b898:	4604      	mov	r4, r0
 801b89a:	460d      	mov	r5, r1
 801b89c:	d904      	bls.n	801b8a8 <_raise_r+0x14>
 801b89e:	2316      	movs	r3, #22
 801b8a0:	6003      	str	r3, [r0, #0]
 801b8a2:	f04f 30ff 	mov.w	r0, #4294967295
 801b8a6:	bd38      	pop	{r3, r4, r5, pc}
 801b8a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b8aa:	b112      	cbz	r2, 801b8b2 <_raise_r+0x1e>
 801b8ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b8b0:	b94b      	cbnz	r3, 801b8c6 <_raise_r+0x32>
 801b8b2:	4620      	mov	r0, r4
 801b8b4:	f000 f830 	bl	801b918 <_getpid_r>
 801b8b8:	462a      	mov	r2, r5
 801b8ba:	4601      	mov	r1, r0
 801b8bc:	4620      	mov	r0, r4
 801b8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b8c2:	f000 b817 	b.w	801b8f4 <_kill_r>
 801b8c6:	2b01      	cmp	r3, #1
 801b8c8:	d00a      	beq.n	801b8e0 <_raise_r+0x4c>
 801b8ca:	1c59      	adds	r1, r3, #1
 801b8cc:	d103      	bne.n	801b8d6 <_raise_r+0x42>
 801b8ce:	2316      	movs	r3, #22
 801b8d0:	6003      	str	r3, [r0, #0]
 801b8d2:	2001      	movs	r0, #1
 801b8d4:	e7e7      	b.n	801b8a6 <_raise_r+0x12>
 801b8d6:	2400      	movs	r4, #0
 801b8d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b8dc:	4628      	mov	r0, r5
 801b8de:	4798      	blx	r3
 801b8e0:	2000      	movs	r0, #0
 801b8e2:	e7e0      	b.n	801b8a6 <_raise_r+0x12>

0801b8e4 <raise>:
 801b8e4:	4b02      	ldr	r3, [pc, #8]	; (801b8f0 <raise+0xc>)
 801b8e6:	4601      	mov	r1, r0
 801b8e8:	6818      	ldr	r0, [r3, #0]
 801b8ea:	f7ff bfd3 	b.w	801b894 <_raise_r>
 801b8ee:	bf00      	nop
 801b8f0:	200000e8 	.word	0x200000e8

0801b8f4 <_kill_r>:
 801b8f4:	b538      	push	{r3, r4, r5, lr}
 801b8f6:	4d07      	ldr	r5, [pc, #28]	; (801b914 <_kill_r+0x20>)
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	4604      	mov	r4, r0
 801b8fc:	4608      	mov	r0, r1
 801b8fe:	4611      	mov	r1, r2
 801b900:	602b      	str	r3, [r5, #0]
 801b902:	f7e5 fb03 	bl	8000f0c <_kill>
 801b906:	1c43      	adds	r3, r0, #1
 801b908:	d102      	bne.n	801b910 <_kill_r+0x1c>
 801b90a:	682b      	ldr	r3, [r5, #0]
 801b90c:	b103      	cbz	r3, 801b910 <_kill_r+0x1c>
 801b90e:	6023      	str	r3, [r4, #0]
 801b910:	bd38      	pop	{r3, r4, r5, pc}
 801b912:	bf00      	nop
 801b914:	2001857c 	.word	0x2001857c

0801b918 <_getpid_r>:
 801b918:	f7e5 baf0 	b.w	8000efc <_getpid>

0801b91c <_fstat_r>:
 801b91c:	b538      	push	{r3, r4, r5, lr}
 801b91e:	4d07      	ldr	r5, [pc, #28]	; (801b93c <_fstat_r+0x20>)
 801b920:	2300      	movs	r3, #0
 801b922:	4604      	mov	r4, r0
 801b924:	4608      	mov	r0, r1
 801b926:	4611      	mov	r1, r2
 801b928:	602b      	str	r3, [r5, #0]
 801b92a:	f7e5 fb17 	bl	8000f5c <_fstat>
 801b92e:	1c43      	adds	r3, r0, #1
 801b930:	d102      	bne.n	801b938 <_fstat_r+0x1c>
 801b932:	682b      	ldr	r3, [r5, #0]
 801b934:	b103      	cbz	r3, 801b938 <_fstat_r+0x1c>
 801b936:	6023      	str	r3, [r4, #0]
 801b938:	bd38      	pop	{r3, r4, r5, pc}
 801b93a:	bf00      	nop
 801b93c:	2001857c 	.word	0x2001857c

0801b940 <_isatty_r>:
 801b940:	b538      	push	{r3, r4, r5, lr}
 801b942:	4d06      	ldr	r5, [pc, #24]	; (801b95c <_isatty_r+0x1c>)
 801b944:	2300      	movs	r3, #0
 801b946:	4604      	mov	r4, r0
 801b948:	4608      	mov	r0, r1
 801b94a:	602b      	str	r3, [r5, #0]
 801b94c:	f7e5 fb16 	bl	8000f7c <_isatty>
 801b950:	1c43      	adds	r3, r0, #1
 801b952:	d102      	bne.n	801b95a <_isatty_r+0x1a>
 801b954:	682b      	ldr	r3, [r5, #0]
 801b956:	b103      	cbz	r3, 801b95a <_isatty_r+0x1a>
 801b958:	6023      	str	r3, [r4, #0]
 801b95a:	bd38      	pop	{r3, r4, r5, pc}
 801b95c:	2001857c 	.word	0x2001857c

0801b960 <_malloc_usable_size_r>:
 801b960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b964:	1f18      	subs	r0, r3, #4
 801b966:	2b00      	cmp	r3, #0
 801b968:	bfbc      	itt	lt
 801b96a:	580b      	ldrlt	r3, [r1, r0]
 801b96c:	18c0      	addlt	r0, r0, r3
 801b96e:	4770      	bx	lr

0801b970 <_init>:
 801b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b972:	bf00      	nop
 801b974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b976:	bc08      	pop	{r3}
 801b978:	469e      	mov	lr, r3
 801b97a:	4770      	bx	lr

0801b97c <_fini>:
 801b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b97e:	bf00      	nop
 801b980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b982:	bc08      	pop	{r3}
 801b984:	469e      	mov	lr, r3
 801b986:	4770      	bx	lr
