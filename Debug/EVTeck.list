
EVTeck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015054  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031a4  080151e4  080151e4  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018388  08018388  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08018388  08018388  00028388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018390  08018390  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018390  08018390  00028390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018394  08018394  00028394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08018398  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          00018de4  20000098  20000098  00030098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20018e7c  20018e7c  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000458ba  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008379  00000000  00000000  00075982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002288  00000000  00000000  0007dd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020e8  00000000  00000000  0007ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000324e2  00000000  00000000  00082070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034158  00000000  00000000  000b4552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0a36  00000000  00000000  000e86aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d90e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000096c0  00000000  00000000  001d9134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080151cc 	.word	0x080151cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	080151cc 	.word	0x080151cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4a07      	ldr	r2, [pc, #28]	; (8000594 <vApplicationGetIdleTaskMemory+0x2c>)
 8000578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <vApplicationGetIdleTaskMemory+0x30>)
 800057e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000586:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000588:	bf00      	nop
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	200000b4 	.word	0x200000b4
 8000598:	20000168 	.word	0x20000168

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fec1 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f823 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f9ab 	bl	8000904 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005ae:	f000 f889 	bl	80006c4 <MX_SPI1_Init>
  MX_TIM1_Init();
 80005b2:	f000 f8bd 	bl	8000730 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005b6:	f000 f90b 	bl	80007d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ba:	f000 f955 	bl	8000868 <MX_TIM3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <main+0x4c>)
 80005c0:	1d3c      	adds	r4, r7, #4
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f004 fb31 	bl	8004c3c <osThreadCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a03      	ldr	r2, [pc, #12]	; (80005ec <main+0x50>)
 80005de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f004 fb15 	bl	8004c0e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x48>
 80005e6:	bf00      	nop
 80005e8:	080151f0 	.word	0x080151f0
 80005ec:	20010874 	.word	0x20010874

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f013 fe88 	bl	8014314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000660:	2319      	movs	r3, #25
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000664:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800066e:	2304      	movs	r3, #4
 8000670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0320 	add.w	r3, r7, #32
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fc28 	bl	8002ecc <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000682:	f000 fa4f 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000692:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2105      	movs	r1, #5
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fe89 	bl	80033bc <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006b0:	f000 fa38 	bl	8000b24 <Error_Handler>
  }
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	; 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_SPI1_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d6:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_SPI1_Init+0x64>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_SPI1_Init+0x64>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_SPI1_Init+0x64>)
 8000710:	220a      	movs	r2, #10
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_SPI1_Init+0x64>)
 8000716:	f003 f83f 	bl	8003798 <HAL_SPI_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 fa00 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20010908 	.word	0x20010908
 800072c:	40013000 	.word	0x40013000

08000730 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000744:	463b      	mov	r3, r7
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_TIM1_Init+0x98>)
 800074e:	4a1f      	ldr	r2, [pc, #124]	; (80007cc <MX_TIM1_Init+0x9c>)
 8000750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <MX_TIM1_Init+0x98>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_TIM1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_TIM1_Init+0x98>)
 8000760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_TIM1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076c:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_TIM1_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_TIM1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000778:	4813      	ldr	r0, [pc, #76]	; (80007c8 <MX_TIM1_Init+0x98>)
 800077a:	f003 f896 	bl	80038aa <HAL_TIM_Base_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000784:	f000 f9ce 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	4619      	mov	r1, r3
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <MX_TIM1_Init+0x98>)
 8000796:	f003 fa4f 	bl	8003c38 <HAL_TIM_ConfigClockSource>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007a0:	f000 f9c0 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_TIM1_Init+0x98>)
 80007b2:	f003 fc6b 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007bc:	f000 f9b2 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200108c0 	.word	0x200108c0
 80007cc:	40010000 	.word	0x40010000

080007d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_TIM2_Init+0x94>)
 80007ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <MX_TIM2_Init+0x94>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_TIM2_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000800:	4b18      	ldr	r3, [pc, #96]	; (8000864 <MX_TIM2_Init+0x94>)
 8000802:	f04f 32ff 	mov.w	r2, #4294967295
 8000806:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_TIM2_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <MX_TIM2_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000814:	4813      	ldr	r0, [pc, #76]	; (8000864 <MX_TIM2_Init+0x94>)
 8000816:	f003 f848 	bl	80038aa <HAL_TIM_Base_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000820:	f000 f980 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	4619      	mov	r1, r3
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_TIM2_Init+0x94>)
 8000832:	f003 fa01 	bl	8003c38 <HAL_TIM_ConfigClockSource>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800083c:	f000 f972 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_TIM2_Init+0x94>)
 800084e:	f003 fc1d 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000858:	f000 f964 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20010960 	.word	0x20010960

08000868 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_TIM3_Init+0x94>)
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <MX_TIM3_Init+0x98>)
 8000888:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_TIM3_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_TIM3_Init+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_TIM3_Init+0x94>)
 8000898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800089c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_TIM3_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_TIM3_Init+0x94>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_TIM3_Init+0x94>)
 80008ac:	f002 fffd 	bl	80038aa <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f935 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_TIM3_Init+0x94>)
 80008c8:	f003 f9b6 	bl	8003c38 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 f927 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_TIM3_Init+0x94>)
 80008e4:	f003 fbd2 	bl	800408c <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008ee:	f000 f919 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20010878 	.word	0x20010878
 8000900:	40000400 	.word	0x40000400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
 800091e:	4b6e      	ldr	r3, [pc, #440]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a6d      	ldr	r2, [pc, #436]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b6b      	ldr	r3, [pc, #428]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	623b      	str	r3, [r7, #32]
 8000934:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
 800093a:	4b67      	ldr	r3, [pc, #412]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a66      	ldr	r2, [pc, #408]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b64      	ldr	r3, [pc, #400]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	61fb      	str	r3, [r7, #28]
 8000950:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b60      	ldr	r3, [pc, #384]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a5f      	ldr	r2, [pc, #380]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b5d      	ldr	r3, [pc, #372]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b59      	ldr	r3, [pc, #356]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a58      	ldr	r2, [pc, #352]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b56      	ldr	r3, [pc, #344]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b52      	ldr	r3, [pc, #328]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a51      	ldr	r2, [pc, #324]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0320 	and.w	r3, r3, #32
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b4b      	ldr	r3, [pc, #300]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a4a      	ldr	r2, [pc, #296]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 80009b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b48      	ldr	r3, [pc, #288]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a43      	ldr	r2, [pc, #268]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b41      	ldr	r3, [pc, #260]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b3d      	ldr	r3, [pc, #244]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a3c      	ldr	r2, [pc, #240]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b3a      	ldr	r3, [pc, #232]	; (8000ad8 <MX_GPIO_Init+0x1d4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 7163 	mov.w	r1, #908	; 0x38c
 8000a00:	4836      	ldr	r0, [pc, #216]	; (8000adc <MX_GPIO_Init+0x1d8>)
 8000a02:	f002 fa49 	bl	8002e98 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a0c:	4834      	ldr	r0, [pc, #208]	; (8000ae0 <MX_GPIO_Init+0x1dc>)
 8000a0e:	f002 fa43 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2133      	movs	r1, #51	; 0x33
 8000a16:	4833      	ldr	r0, [pc, #204]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000a18:	f002 fa3e 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000a22:	4831      	ldr	r0, [pc, #196]	; (8000ae8 <MX_GPIO_Init+0x1e4>)
 8000a24:	f002 fa38 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE7 PE8
                           PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8
 8000a28:	f44f 7363 	mov.w	r3, #908	; 0x38c
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4826      	ldr	r0, [pc, #152]	; (8000adc <MX_GPIO_Init+0x1d8>)
 8000a42:	f002 f88d 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4820      	ldr	r0, [pc, #128]	; (8000ae0 <MX_GPIO_Init+0x1dc>)
 8000a60:	f002 f87e 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG4 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a64:	2333      	movs	r3, #51	; 0x33
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000a7c:	f002 f870 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <MX_GPIO_Init+0x1e4>)
 8000a96:	f002 f863 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <MX_GPIO_Init+0x1e4>)
 8000ab4:	f002 f854 	bl	8002b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_GPIO_Init+0x1e0>)
 8000acc:	f002 f848 	bl	8002b60 <HAL_GPIO_Init>

}
 8000ad0:	bf00      	nop
 8000ad2:	3738      	adds	r7, #56	; 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	40020c00 	.word	0x40020c00

08000aec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000af4:	f003 fb5a 	bl	80041ac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f004 f8eb 	bl	8004cd4 <osDelay>
 8000afe:	e7fb      	b.n	8000af8 <StartDefaultTask+0xc>

08000b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b12:	f000 fc2b 	bl	800136c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40001000 	.word	0x40001000

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_MspInit+0x54>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <HAL_MspInit+0x54>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_MspInit+0x54>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_MspInit+0x54>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_MspInit+0x54>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_MspInit+0x54>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	210f      	movs	r1, #15
 8000b72:	f06f 0001 	mvn.w	r0, #1
 8000b76:	f000 fcf5 	bl	8001564 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <HAL_SPI_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12b      	bne.n	8000c02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_SPI_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000be2:	2338      	movs	r3, #56	; 0x38
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_SPI_MspInit+0x8c>)
 8000bfe:	f001 ffaf 	bl	8002b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40013000 	.word	0x40013000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400

08000c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a36      	ldr	r2, [pc, #216]	; (8000d00 <HAL_TIM_Base_MspInit+0xe8>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12e      	bne.n	8000c88 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <HAL_TIM_Base_MspInit+0xec>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a34      	ldr	r2, [pc, #208]	; (8000d04 <HAL_TIM_Base_MspInit+0xec>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b32      	ldr	r3, [pc, #200]	; (8000d04 <HAL_TIM_Base_MspInit+0xec>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2105      	movs	r1, #5
 8000c4a:	2018      	movs	r0, #24
 8000c4c:	f000 fc8a 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000c50:	2018      	movs	r0, #24
 8000c52:	f000 fca3 	bl	800159c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2105      	movs	r1, #5
 8000c5a:	2019      	movs	r0, #25
 8000c5c:	f000 fc82 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c60:	2019      	movs	r0, #25
 8000c62:	f000 fc9b 	bl	800159c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2105      	movs	r1, #5
 8000c6a:	201a      	movs	r0, #26
 8000c6c:	f000 fc7a 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c70:	201a      	movs	r0, #26
 8000c72:	f000 fc93 	bl	800159c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2105      	movs	r1, #5
 8000c7a:	201b      	movs	r0, #27
 8000c7c:	f000 fc72 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c80:	201b      	movs	r0, #27
 8000c82:	f000 fc8b 	bl	800159c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c86:	e036      	b.n	8000cf6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c90:	d116      	bne.n	8000cc0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <HAL_TIM_Base_MspInit+0xec>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a1a      	ldr	r2, [pc, #104]	; (8000d04 <HAL_TIM_Base_MspInit+0xec>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_TIM_Base_MspInit+0xec>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	201c      	movs	r0, #28
 8000cb4:	f000 fc56 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cb8:	201c      	movs	r0, #28
 8000cba:	f000 fc6f 	bl	800159c <HAL_NVIC_EnableIRQ>
}
 8000cbe:	e01a      	b.n	8000cf6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_TIM_Base_MspInit+0xf0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d115      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <HAL_TIM_Base_MspInit+0xec>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <HAL_TIM_Base_MspInit+0xec>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_TIM_Base_MspInit+0xec>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2105      	movs	r1, #5
 8000cea:	201d      	movs	r0, #29
 8000cec:	f000 fc3a 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cf0:	201d      	movs	r0, #29
 8000cf2:	f000 fc53 	bl	800159c <HAL_NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010000 	.word	0x40010000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40000400 	.word	0x40000400

08000d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <HAL_InitTick+0xe4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a32      	ldr	r2, [pc, #200]	; (8000df0 <HAL_InitTick+0xe4>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <HAL_InitTick+0xe4>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d38:	f107 0210 	add.w	r2, r7, #16
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 fcf6 	bl	8003734 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d48:	6a3b      	ldr	r3, [r7, #32]
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d52:	f002 fcdb 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8000d56:	6378      	str	r0, [r7, #52]	; 0x34
 8000d58:	e004      	b.n	8000d64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d5a:	f002 fcd7 	bl	800370c <HAL_RCC_GetPCLK1Freq>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d66:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <HAL_InitTick+0xe8>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	0c9b      	lsrs	r3, r3, #18
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_InitTick+0xec>)
 8000d74:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <HAL_InitTick+0xf0>)
 8000d76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <HAL_InitTick+0xec>)
 8000d7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_InitTick+0xec>)
 8000d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_InitTick+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HAL_InitTick+0xec>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_InitTick+0xec>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <HAL_InitTick+0xec>)
 8000d9a:	f002 fd86 	bl	80038aa <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000da4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d11b      	bne.n	8000de4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dac:	4812      	ldr	r0, [pc, #72]	; (8000df8 <HAL_InitTick+0xec>)
 8000dae:	f002 fdcb 	bl	8003948 <HAL_TIM_Base_Start_IT>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000db8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d111      	bne.n	8000de4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc0:	2036      	movs	r0, #54	; 0x36
 8000dc2:	f000 fbeb 	bl	800159c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d808      	bhi.n	8000dde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	2036      	movs	r0, #54	; 0x36
 8000dd2:	f000 fbc7 	bl	8001564 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_InitTick+0xf4>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e002      	b.n	8000de4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000de4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3738      	adds	r7, #56	; 0x38
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	200109a8 	.word	0x200109a8
 8000dfc:	40001000 	.word	0x40001000
 8000e00:	20000004 	.word	0x20000004

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e36:	f002 fdf7 	bl	8003a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200108c0 	.word	0x200108c0

08000e44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e4a:	f002 fded 	bl	8003a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200108c0 	.word	0x200108c0

08000e58 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e5e:	f002 fde3 	bl	8003a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200108c0 	.word	0x200108c0

08000e6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <TIM1_CC_IRQHandler+0x10>)
 8000e72:	f002 fdd9 	bl	8003a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	200108c0 	.word	0x200108c0

08000e80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <TIM2_IRQHandler+0x10>)
 8000e86:	f002 fdcf 	bl	8003a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20010960 	.word	0x20010960

08000e94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM3_IRQHandler+0x10>)
 8000e9a:	f002 fdc5 	bl	8003a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20010878 	.word	0x20010878

08000ea8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eac:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM6_DAC_IRQHandler+0x10>)
 8000eae:	f002 fdbb 	bl	8003a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200109a8 	.word	0x200109a8

08000ebc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <ETH_IRQHandler+0x10>)
 8000ec2:	f000 ff65 	bl	8001d90 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	2001551c 	.word	0x2001551c

08000ed0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
	return 1;
 8000ed4:	2301      	movs	r3, #1
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <_kill>:

int _kill(int pid, int sig)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <_kill+0x20>)
 8000eec:	2216      	movs	r2, #22
 8000eee:	601a      	str	r2, [r3, #0]
	return -1;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	20018e78 	.word	0x20018e78

08000f04 <_exit>:

void _exit (int status)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ffe5 	bl	8000ee0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f16:	e7fe      	b.n	8000f16 <_exit+0x12>

08000f18 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	return -1;
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f40:	605a      	str	r2, [r3, #4]
	return 0;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_isatty>:

int _isatty(int file)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	return 1;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
	return 0;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d205      	bcs.n	8000fbc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <_sbrk+0x6c>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	371c      	adds	r7, #28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	20020000 	.word	0x20020000
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	20000568 	.word	0x20000568
 8000fe8:	20018e80 	.word	0x20018e80
 8000fec:	20018e78 	.word	0x20018e78

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001030:	4c0b      	ldr	r4, [pc, #44]	; (8001060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800103e:	f7ff ffd7 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f013 f91b 	bl	801427c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff faa9 	bl	800059c <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001058:	08018398 	.word	0x08018398
  ldr r2, =_sbss
 800105c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001060:	20018e7c 	.word	0x20018e7c

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>

08001066 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
 800106e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <DP83848_RegisterBusIO+0x28>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d007      	beq.n	800108e <DP83848_RegisterBusIO+0x28>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <DP83848_RegisterBusIO+0x28>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e014      	b.n	80010be <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d17c      	bne.n	80011e4 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e01c      	b.n	800113e <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	f107 0208 	add.w	r2, r7, #8
 800110c:	2119      	movs	r1, #25
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	4798      	blx	r3
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	da03      	bge.n	8001120 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001118:	f06f 0304 	mvn.w	r3, #4
 800111c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800111e:	e00b      	b.n	8001138 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	d105      	bne.n	8001138 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
         break;
 8001136:	e005      	b.n	8001144 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	2b1f      	cmp	r3, #31
 8001142:	d9df      	bls.n	8001104 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b1f      	cmp	r3, #31
 800114a:	d902      	bls.n	8001152 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 800114c:	f06f 0302 	mvn.w	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d145      	bne.n	80011e4 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	6810      	ldr	r0, [r2, #0]
 8001160:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001164:	2100      	movs	r1, #0
 8001166:	4798      	blx	r3
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	db37      	blt.n	80011de <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6810      	ldr	r0, [r2, #0]
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	2100      	movs	r1, #0
 800117c:	4798      	blx	r3
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	db28      	blt.n	80011d6 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4798      	blx	r3
 800118a:	4603      	mov	r3, r0
 800118c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800118e:	e01c      	b.n	80011ca <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4798      	blx	r3
 8001196:	4603      	mov	r3, r0
 8001198:	461a      	mov	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011a2:	d80e      	bhi.n	80011c2 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6810      	ldr	r0, [r2, #0]
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	2100      	movs	r1, #0
 80011b2:	4798      	blx	r3
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da07      	bge.n	80011ca <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 80011ba:	f06f 0304 	mvn.w	r3, #4
 80011be:	613b      	str	r3, [r7, #16]
                 break;
 80011c0:	e010      	b.n	80011e4 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 80011c2:	f06f 0301 	mvn.w	r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
               break;
 80011c8:	e00c      	b.n	80011e4 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1dd      	bne.n	8001190 <DP83848_Init+0xc6>
 80011d4:	e006      	b.n	80011e4 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80011d6:	f06f 0304 	mvn.w	r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	e002      	b.n	80011e4 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80011de:	f06f 0303 	mvn.w	r3, #3
 80011e2:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d112      	bne.n	8001210 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4798      	blx	r3
 80011f0:	4603      	mov	r3, r0
 80011f2:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 80011f4:	bf00      	nop
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4798      	blx	r3
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001208:	d9f5      	bls.n	80011f6 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001210:	693b      	ldr	r3, [r7, #16]
 }
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6810      	ldr	r0, [r2, #0]
 800122e:	f107 020c 	add.w	r2, r7, #12
 8001232:	2101      	movs	r1, #1
 8001234:	4798      	blx	r3
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	da02      	bge.n	8001242 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 800123c:	f06f 0304 	mvn.w	r3, #4
 8001240:	e06e      	b.n	8001320 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6810      	ldr	r0, [r2, #0]
 800124a:	f107 020c 	add.w	r2, r7, #12
 800124e:	2101      	movs	r1, #1
 8001250:	4798      	blx	r3
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	da02      	bge.n	800125e <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001258:	f06f 0304 	mvn.w	r3, #4
 800125c:	e060      	b.n	8001320 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001268:	2301      	movs	r3, #1
 800126a:	e059      	b.n	8001320 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6810      	ldr	r0, [r2, #0]
 8001274:	f107 020c 	add.w	r2, r7, #12
 8001278:	2100      	movs	r1, #0
 800127a:	4798      	blx	r3
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	da02      	bge.n	8001288 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001282:	f06f 0304 	mvn.w	r3, #4
 8001286:	e04b      	b.n	8001320 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d11b      	bne.n	80012ca <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <DP83848_GetLinkState+0x90>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80012a6:	2302      	movs	r3, #2
 80012a8:	e03a      	b.n	8001320 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e033      	b.n	8001320 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80012c2:	2304      	movs	r3, #4
 80012c4:	e02c      	b.n	8001320 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80012c6:	2305      	movs	r3, #5
 80012c8:	e02a      	b.n	8001320 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6810      	ldr	r0, [r2, #0]
 80012d2:	f107 020c 	add.w	r2, r7, #12
 80012d6:	2110      	movs	r1, #16
 80012d8:	4798      	blx	r3
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da02      	bge.n	80012e6 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80012e0:	f06f 0304 	mvn.w	r3, #4
 80012e4:	e01c      	b.n	8001320 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80012f0:	2306      	movs	r3, #6
 80012f2:	e015      	b.n	8001320 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0306 	and.w	r3, r3, #6
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d101      	bne.n	8001302 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80012fe:	2302      	movs	r3, #2
 8001300:	e00e      	b.n	8001320 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f003 0306 	and.w	r3, r3, #6
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800130c:	2303      	movs	r3, #3
 800130e:	e007      	b.n	8001320 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0306 	and.w	r3, r3, #6
 8001316:	2b06      	cmp	r3, #6
 8001318:	d101      	bne.n	800131e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800131a:	2304      	movs	r3, #4
 800131c:	e000      	b.n	8001320 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800131e:	2305      	movs	r3, #5
    }
  }
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <HAL_Init+0x40>)
 8001332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001336:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <HAL_Init+0x40>)
 800133e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001342:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_Init+0x40>)
 800134a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f8fc 	bl	800154e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001356:	200f      	movs	r0, #15
 8001358:	f7ff fcd8 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800135c:	f7ff fbe8 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023c00 	.word	0x40023c00

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008
 8001390:	200109f0 	.word	0x200109f0

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	200109f0 	.word	0x200109f0

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff ffee 	bl	8001394 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffde 	bl	8001394 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800141c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	60d3      	str	r3, [r2, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	; (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <__NVIC_EnableIRQ+0x38>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff4c 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001576:	f7ff ff61 	bl	800143c <__NVIC_GetPriorityGrouping>
 800157a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	6978      	ldr	r0, [r7, #20]
 8001582:	f7ff ffb1 	bl	80014e8 <NVIC_EncodePriority>
 8001586:	4602      	mov	r2, r0
 8001588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff80 	bl	8001494 <__NVIC_SetPriority>
}
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff54 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e06c      	b.n	80016a4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d106      	bne.n	80015e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2223      	movs	r2, #35	; 0x23
 80015d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f003 f8e7 	bl	80047b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_ETH_Init+0xf4>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a30      	ldr	r2, [pc, #192]	; (80016ac <HAL_ETH_Init+0xf4>)
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <HAL_ETH_Init+0xf4>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <HAL_ETH_Init+0xf8>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a2b      	ldr	r2, [pc, #172]	; (80016b0 <HAL_ETH_Init+0xf8>)
 8001604:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001608:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800160a:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <HAL_ETH_Init+0xf8>)
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	4927      	ldr	r1, [pc, #156]	; (80016b0 <HAL_ETH_Init+0xf8>)
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001618:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_ETH_Init+0xf8>)
 800161a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff feae 	bl	8001394 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800163a:	e011      	b.n	8001660 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800163c:	f7ff feaa 	bl	8001394 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800164a:	d909      	bls.n	8001660 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2204      	movs	r2, #4
 8001650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	22e0      	movs	r2, #224	; 0xe0
 8001658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e021      	b.n	80016a4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1e4      	bne.n	800163c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 ffcc 	bl	8002610 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f001 f873 	bl	8002764 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f001 f8ca 	bl	8002818 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	461a      	mov	r2, r3
 800168a:	2100      	movs	r1, #0
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f001 f831 	bl	80026f4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2210      	movs	r2, #16
 800169e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40013800 	.word	0x40013800

080016b4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c2:	2b10      	cmp	r3, #16
 80016c4:	d154      	bne.n	8001770 <HAL_ETH_Start+0xbc>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2223      	movs	r2, #35	; 0x23
 80016ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2204      	movs	r2, #4
 80016d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fa8b 	bl	8001bf0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0208 	orr.w	r2, r2, #8
 80016e8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff fe5a 	bl	80013ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f042 0204 	orr.w	r2, r2, #4
 800170e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fe47 	bl	80013ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fe0d 	bl	8002346 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	3318      	adds	r3, #24
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001744:	3318      	adds	r3, #24
 8001746:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001750:	3318      	adds	r3, #24
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f042 0202 	orr.w	r2, r2, #2
 800175c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001760:	3318      	adds	r3, #24
 8001762:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2223      	movs	r2, #35	; 0x23
 8001768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	e000      	b.n	8001772 <HAL_ETH_Start+0xbe>
  }
  else
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
  }
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001788:	2b10      	cmp	r3, #16
 800178a:	f040 8086 	bne.w	800189a <HAL_ETH_Start_IT+0x120>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2223      	movs	r2, #35	; 0x23
 8001792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017c0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80017d4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2204      	movs	r2, #4
 80017dc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fa06 	bl	8001bf0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0208 	orr.w	r2, r2, #8
 80017f2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017fc:	2001      	movs	r0, #1
 80017fe:	f7ff fdd5 	bl	80013ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0204 	orr.w	r2, r2, #4
 8001818:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001822:	2001      	movs	r0, #1
 8001824:	f7ff fdc2 	bl	80013ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 fd88 	bl	8002346 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183e:	3318      	adds	r3, #24
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800184a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184e:	3318      	adds	r3, #24
 8001850:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800185a:	3318      	adds	r3, #24
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0202 	orr.w	r2, r2, #2
 8001866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186a:	3318      	adds	r3, #24
 800186c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001876:	331c      	adds	r3, #28
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 32d0 	orr.w	r2, r2, #106496	; 0x1a000
 8001882:	f042 02c1 	orr.w	r2, r2, #193	; 0xc1
 8001886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188a:	331c      	adds	r3, #28
 800188c:	601a      	str	r2, [r3, #0]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2223      	movs	r2, #35	; 0x23
 8001892:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_ETH_Start_IT+0x122>
  }
  else
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
  }
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b2:	2b23      	cmp	r3, #35	; 0x23
 80018b4:	d176      	bne.n	80019a4 <HAL_ETH_Stop_IT+0x100>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2223      	movs	r2, #35	; 0x23
 80018ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c6:	331c      	adds	r3, #28
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 32d0 	bic.w	r2, r2, #106496	; 0x1a000
 80018d2:	f022 02c1 	bic.w	r2, r2, #193	; 0xc1
 80018d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018da:	331c      	adds	r3, #28
 80018dc:	601a      	str	r2, [r3, #0]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e6:	3318      	adds	r3, #24
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f6:	3318      	adds	r3, #24
 80018f8:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001902:	3318      	adds	r3, #24
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0202 	bic.w	r2, r2, #2
 800190e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001912:	3318      	adds	r3, #24
 8001914:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0204 	bic.w	r2, r2, #4
 8001924:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff fd3c 	bl	80013ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 fd02 	bl	8002346 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0208 	bic.w	r2, r2, #8
 8001950:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff fd26 	bl	80013ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e00e      	b.n	800198c <HAL_ETH_Stop_IT+0xe8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	3212      	adds	r2, #18
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d9ed      	bls.n	800196e <HAL_ETH_Stop_IT+0xca>
    }

    heth->RxDescList.ItMode = 0U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2210      	movs	r2, #16
 800199c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	e000      	b.n	80019a6 <HAL_ETH_Stop_IT+0x102>
  }
  else
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
  }
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d109      	bne.n	80019d2 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e046      	b.n	8001a60 <HAL_ETH_Transmit_IT+0xb2>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d8:	2b23      	cmp	r3, #35	; 0x23
 80019da:	d140      	bne.n	8001a5e <HAL_ETH_Transmit_IT+0xb0>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80019e4:	2201      	movs	r2, #1
 80019e6:	6839      	ldr	r1, [r7, #0]
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 ff83 	bl	80028f4 <ETH_Prepare_Tx_Descriptors>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d009      	beq.n	8001a08 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	f043 0202 	orr.w	r2, r3, #2
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e02b      	b.n	8001a60 <HAL_ETH_Transmit_IT+0xb2>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a08:	f3bf 8f4f 	dsb	sy
}
 8001a0c:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d904      	bls.n	8001a2a <HAL_ETH_Transmit_IT+0x7c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	1f1a      	subs	r2, r3, #4
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a32:	3314      	adds	r3, #20
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00d      	beq.n	8001a5a <HAL_ETH_Transmit_IT+0xac>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a46:	3314      	adds	r3, #20
 8001a48:	2204      	movs	r2, #4
 8001a4a:	601a      	str	r2, [r3, #0]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a54:	3304      	adds	r3, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_ETH_Transmit_IT+0xb2>

  }
  else
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
  }
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d109      	bne.n	8001a94 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a86:	f043 0201 	orr.w	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0a8      	b.n	8001be6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a9a:	2b23      	cmp	r3, #35	; 0x23
 8001a9c:	d001      	beq.n	8001aa2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0a1      	b.n	8001be6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	3212      	adds	r2, #18
 8001aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ab8:	f1c3 0304 	rsb	r3, r3, #4
 8001abc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001abe:	e06a      	b.n	8001b96 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d007      	beq.n	8001adc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	699a      	ldr	r2, [r3, #24]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d103      	bne.n	8001af0 <HAL_ETH_ReadData+0x88>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d040      	beq.n	8001b72 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00c      	beq.n	8001b34 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0c1b      	lsrs	r3, r3, #16
 8001b20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b24:	3b04      	subs	r3, #4
 8001b26:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f002 ffe7 	bl	8004b24 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	441a      	add	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d902      	bls.n	8001b84 <HAL_ETH_ReadData+0x11c>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b04      	subs	r3, #4
 8001b82:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	3212      	adds	r2, #18
 8001b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db06      	blt.n	8001bac <HAL_ETH_ReadData+0x144>
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d202      	bcs.n	8001bac <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d089      	beq.n	8001ac0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f815 	bl	8001bf0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d108      	bne.n	8001be4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e000      	b.n	8001be6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c04:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69fa      	ldr	r2, [r7, #28]
 8001c0a:	3212      	adds	r2, #18
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c16:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c18:	e040      	b.n	8001c9c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d112      	bne.n	8001c48 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	4618      	mov	r0, r3
 8001c28:	f002 ff4c 	bl	8004ac4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	74fb      	strb	r3, [r7, #19]
 8001c36:	e007      	b.n	8001c48 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	461a      	mov	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001c48:	7cfb      	ldrb	r3, [r7, #19]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d026      	beq.n	8001c9c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d103      	bne.n	8001c5e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <ETH_UpdateDescriptor+0xe4>)
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	e003      	b.n	8001c66 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001c64:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c66:	f3bf 8f5f 	dmb	sy
}
 8001c6a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d902      	bls.n	8001c8a <ETH_UpdateDescriptor+0x9a>
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	3b04      	subs	r3, #4
 8001c88:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	3212      	adds	r2, #18
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <ETH_UpdateDescriptor+0xb8>
 8001ca2:	7cfb      	ldrb	r3, [r7, #19]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1b8      	bne.n	8001c1a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d00c      	beq.n	8001ccc <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cba:	3308      	adds	r3, #8
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	800045f8 	.word	0x800045f8

08001cd8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3318      	adds	r3, #24
 8001ce4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001cf6:	e03f      	b.n	8001d78 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	3304      	adds	r3, #4
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	3301      	adds	r3, #1
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001d20:	7bbb      	ldrb	r3, [r7, #14]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d028      	beq.n	8001d78 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68d9      	ldr	r1, [r3, #12]
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db1b      	blt.n	8001d74 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	3304      	adds	r3, #4
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 ff2b 	bl	8004ba4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	3304      	adds	r3, #4
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	2200      	movs	r2, #0
 8001d5a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d72:	e001      	b.n	8001d78 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_ETH_ReleaseTxPacket+0xac>
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1b9      	bne.n	8001cf8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da0:	3314      	adds	r3, #20
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da8:	2b40      	cmp	r3, #64	; 0x40
 8001daa:	d113      	bne.n	8001dd4 <HAL_ETH_IRQHandler+0x44>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db4:	331c      	adds	r3, #28
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbc:	2b40      	cmp	r3, #64	; 0x40
 8001dbe:	d109      	bne.n	8001dd4 <HAL_ETH_IRQHandler+0x44>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc8:	3314      	adds	r3, #20
 8001dca:	4a54      	ldr	r2, [pc, #336]	; (8001f1c <HAL_ETH_IRQHandler+0x18c>)
 8001dcc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f002 fa4e 	bl	8004270 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ddc:	3314      	adds	r3, #20
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d114      	bne.n	8001e12 <HAL_ETH_IRQHandler+0x82>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df0:	331c      	adds	r3, #28
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d10a      	bne.n	8001e12 <HAL_ETH_IRQHandler+0x82>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e04:	3314      	adds	r3, #20
 8001e06:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001e0a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f002 fa3f 	bl	8004290 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e1a:	3314      	adds	r3, #20
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e26:	d152      	bne.n	8001ece <HAL_ETH_IRQHandler+0x13e>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e30:	331c      	adds	r3, #28
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e3c:	d147      	bne.n	8001ece <HAL_ETH_IRQHandler+0x13e>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e44:	f043 0208 	orr.w	r2, r3, #8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e56:	3314      	adds	r3, #20
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e62:	d11d      	bne.n	8001ea0 <HAL_ETH_IRQHandler+0x110>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_ETH_IRQHandler+0x190>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e82:	331c      	adds	r3, #28
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e92:	331c      	adds	r3, #28
 8001e94:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	22e0      	movs	r2, #224	; 0xe0
 8001e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001e9e:	e013      	b.n	8001ec8 <HAL_ETH_IRQHandler+0x138>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea8:	3314      	adds	r3, #20
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f248 6380 	movw	r3, #34432	; 0x8680
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec0:	3314      	adds	r3, #20
 8001ec2:	f248 6280 	movw	r2, #34432	; 0x8680
 8001ec6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f002 f9f1 	bl	80042b0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d10e      	bne.n	8001efa <HAL_ETH_IRQHandler+0x16a>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f81b 	bl	8001f28 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001efa:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_ETH_IRQHandler+0x194>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d006      	beq.n	8001f14 <HAL_ETH_IRQHandler+0x184>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f06:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <HAL_ETH_IRQHandler+0x194>)
 8001f08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f0c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f814 	bl	8001f3c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	00010040 	.word	0x00010040
 8001f20:	007e2000 	.word	0x007e2000
 8001f24:	40013c00 	.word	0x40013c00

08001f28 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 031c 	and.w	r3, r3, #28
 8001f6c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	02db      	lsls	r3, r3, #11
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f023 0302 	bic.w	r3, r3, #2
 8001f8e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001fa0:	f7ff f9f8 	bl	8001394 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fa6:	e00d      	b.n	8001fc4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001fa8:	f7ff f9f4 	bl	8001394 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb6:	d301      	bcc.n	8001fbc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e010      	b.n	8001fde <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ec      	bne.n	8001fa8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 031c 	and.w	r3, r3, #28
 8002002:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	02db      	lsls	r3, r3, #11
 8002008:	b29b      	uxth	r3, r3
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4313      	orrs	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	019b      	lsls	r3, r3, #6
 8002014:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	4313      	orrs	r3, r2
 800201c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff f9a8 	bl	8001394 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002046:	e00d      	b.n	8002064 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002048:	f7ff f9a4 	bl	8001394 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002056:	d301      	bcc.n	800205c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e009      	b.n	8002070 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ec      	bne.n	8002048 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0d9      	b.n	8002240 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0310 	and.w	r3, r3, #16
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	461a      	mov	r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf14      	ite	ne
 8002114:	2301      	movne	r3, #1
 8002116:	2300      	moveq	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	461a      	mov	r2, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b00      	cmp	r3, #0
 800217c:	bf14      	ite	ne
 800217e:	2301      	movne	r3, #1
 8002180:	2300      	moveq	r3, #0
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	0c1b      	lsrs	r3, r3, #16
 8002200:	b29a      	uxth	r2, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e00b      	b.n	8002278 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002266:	2b10      	cmp	r3, #16
 8002268:	d105      	bne.n	8002276 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f893 	bl	8002398 <ETH_SetMACConfig>

    return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
  }
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 031c 	bic.w	r3, r3, #28
 8002296:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002298:	f001 fa2c 	bl	80036f4 <HAL_RCC_GetHCLKFreq>
 800229c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <HAL_ETH_SetMDIOClockRange+0x98>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d908      	bls.n	80022b8 <HAL_ETH_SetMDIOClockRange+0x38>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	; (800231c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d804      	bhi.n	80022b8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e027      	b.n	8002308 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4a18      	ldr	r2, [pc, #96]	; (800231c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d908      	bls.n	80022d2 <HAL_ETH_SetMDIOClockRange+0x52>
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4a17      	ldr	r2, [pc, #92]	; (8002320 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d204      	bcs.n	80022d2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f043 030c 	orr.w	r3, r3, #12
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	e01a      	b.n	8002308 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4a12      	ldr	r2, [pc, #72]	; (8002320 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d303      	bcc.n	80022e2 <HAL_ETH_SetMDIOClockRange+0x62>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	4a11      	ldr	r2, [pc, #68]	; (8002324 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d911      	bls.n	8002306 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d908      	bls.n	80022fc <HAL_ETH_SetMDIOClockRange+0x7c>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d804      	bhi.n	80022fc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e005      	b.n	8002308 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f043 0310 	orr.w	r3, r3, #16
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	e000      	b.n	8002308 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002306:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	611a      	str	r2, [r3, #16]
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	01312cff 	.word	0x01312cff
 800231c:	02160ebf 	.word	0x02160ebf
 8002320:	03938700 	.word	0x03938700
 8002324:	05f5e0ff 	.word	0x05f5e0ff
 8002328:	08f0d17f 	.word	0x08f0d17f

0800232c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235a:	3318      	adds	r3, #24
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236a:	3318      	adds	r3, #24
 800236c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002376:	3318      	adds	r3, #24
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800237c:	2001      	movs	r0, #1
 800237e:	f7ff f815 	bl	80013ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238c:	3318      	adds	r3, #24
 800238e:	601a      	str	r2, [r3, #0]
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4b51      	ldr	r3, [pc, #324]	; (80024f4 <ETH_SetMACConfig+0x15c>)
 80023ae:	4013      	ands	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	7c1b      	ldrb	r3, [r3, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <ETH_SetMACConfig+0x28>
 80023ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023be:	e000      	b.n	80023c2 <ETH_SetMACConfig+0x2a>
 80023c0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	7c5b      	ldrb	r3, [r3, #17]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <ETH_SetMACConfig+0x38>
 80023ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ce:	e000      	b.n	80023d2 <ETH_SetMACConfig+0x3a>
 80023d0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023d2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	7fdb      	ldrb	r3, [r3, #31]
 80023de:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023e0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	7f92      	ldrb	r2, [r2, #30]
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d102      	bne.n	80023f6 <ETH_SetMACConfig+0x5e>
 80023f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f4:	e000      	b.n	80023f8 <ETH_SetMACConfig+0x60>
 80023f6:	2200      	movs	r2, #0
                        macconf->Speed |
 80023f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7f1b      	ldrb	r3, [r3, #28]
 80023fe:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002400:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002406:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	791b      	ldrb	r3, [r3, #4]
 800240c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800240e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002416:	2a00      	cmp	r2, #0
 8002418:	d102      	bne.n	8002420 <ETH_SetMACConfig+0x88>
 800241a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241e:	e000      	b.n	8002422 <ETH_SetMACConfig+0x8a>
 8002420:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002422:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	7bdb      	ldrb	r3, [r3, #15]
 8002428:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800242a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002430:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002438:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800243a:	4313      	orrs	r3, r2
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002452:	2001      	movs	r0, #1
 8002454:	f7fe ffaa 	bl	80013ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800246e:	4013      	ands	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002476:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800247e:	2a00      	cmp	r2, #0
 8002480:	d101      	bne.n	8002486 <ETH_SetMACConfig+0xee>
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	e000      	b.n	8002488 <ETH_SetMACConfig+0xf0>
 8002486:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002488:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800248e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002496:	2a01      	cmp	r2, #1
 8002498:	d101      	bne.n	800249e <ETH_SetMACConfig+0x106>
 800249a:	2208      	movs	r2, #8
 800249c:	e000      	b.n	80024a0 <ETH_SetMACConfig+0x108>
 800249e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024a8:	2a01      	cmp	r2, #1
 80024aa:	d101      	bne.n	80024b0 <ETH_SetMACConfig+0x118>
 80024ac:	2204      	movs	r2, #4
 80024ae:	e000      	b.n	80024b2 <ETH_SetMACConfig+0x11a>
 80024b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024ba:	2a01      	cmp	r2, #1
 80024bc:	d101      	bne.n	80024c2 <ETH_SetMACConfig+0x12a>
 80024be:	2202      	movs	r2, #2
 80024c0:	e000      	b.n	80024c4 <ETH_SetMACConfig+0x12c>
 80024c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024c4:	4313      	orrs	r3, r2
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024dc:	2001      	movs	r0, #1
 80024de:	f7fe ff65 	bl	80013ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	619a      	str	r2, [r3, #24]
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	ff20810f 	.word	0xff20810f

080024f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250a:	3318      	adds	r3, #24
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4b3e      	ldr	r3, [pc, #248]	; (800260c <ETH_SetDMAConfig+0x114>)
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	7b1b      	ldrb	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <ETH_SetDMAConfig+0x2e>
 8002520:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002524:	e000      	b.n	8002528 <ETH_SetDMAConfig+0x30>
 8002526:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	7b5b      	ldrb	r3, [r3, #13]
 800252c:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800252e:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	7f52      	ldrb	r2, [r2, #29]
 8002534:	2a00      	cmp	r2, #0
 8002536:	d102      	bne.n	800253e <ETH_SetDMAConfig+0x46>
 8002538:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800253c:	e000      	b.n	8002540 <ETH_SetDMAConfig+0x48>
 800253e:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002540:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	7b9b      	ldrb	r3, [r3, #14]
 8002546:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002548:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800254e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	7f1b      	ldrb	r3, [r3, #28]
 8002554:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002556:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	7f9b      	ldrb	r3, [r3, #30]
 800255c:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800255e:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002564:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256c:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800256e:	4313      	orrs	r3, r2
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800257e:	3318      	adds	r3, #24
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258c:	3318      	adds	r3, #24
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002592:	2001      	movs	r0, #1
 8002594:	f7fe ff0a 	bl	80013ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a0:	3318      	adds	r3, #24
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	791b      	ldrb	r3, [r3, #4]
 80025aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025d4:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e2:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7fe fedb 	bl	80013ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	601a      	str	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	f8de3f23 	.word	0xf8de3f23

08002610 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0a6      	sub	sp, #152	; 0x98
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002618:	2301      	movs	r3, #1
 800261a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002624:	2300      	movs	r3, #0
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800264c:	2300      	movs	r3, #0
 800264e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002656:	2300      	movs	r3, #0
 8002658:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002672:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002676:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002678:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800267c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002684:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff fe84 	bl	8002398 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002690:	2301      	movs	r3, #1
 8002692:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002694:	2301      	movs	r3, #1
 8002696:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002698:	2301      	movs	r3, #1
 800269a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800269e:	2301      	movs	r3, #1
 80026a0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026bc:	2301      	movs	r3, #1
 80026be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026d0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026e0:	f107 0308 	add.w	r3, r7, #8
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ff06 	bl	80024f8 <ETH_SetDMAConfig>
}
 80026ec:	bf00      	nop
 80026ee:	3798      	adds	r7, #152	; 0x98
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3305      	adds	r3, #5
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	021b      	lsls	r3, r3, #8
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	3204      	adds	r2, #4
 800270c:	7812      	ldrb	r2, [r2, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <ETH_MACAddressConfig+0x68>)
 8002716:	4413      	add	r3, r2
 8002718:	461a      	mov	r2, r3
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3303      	adds	r3, #3
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	061a      	lsls	r2, r3, #24
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3302      	adds	r3, #2
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3301      	adds	r3, #1
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	4313      	orrs	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <ETH_MACAddressConfig+0x6c>)
 8002746:	4413      	add	r3, r2
 8002748:	461a      	mov	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	6013      	str	r3, [r2, #0]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40028040 	.word	0x40028040
 8002760:	40028044 	.word	0x40028044

08002764 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800276c:	2300      	movs	r3, #0
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e03e      	b.n	80027f0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68d9      	ldr	r1, [r3, #12]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	3206      	adds	r2, #6
 80027a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d80c      	bhi.n	80027d4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	e004      	b.n	80027de <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	461a      	mov	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	3301      	adds	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d9bd      	bls.n	8002772 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002808:	3310      	adds	r3, #16
 800280a:	601a      	str	r2, [r3, #0]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e046      	b.n	80028b4 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6919      	ldr	r1, [r3, #16]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2200      	movs	r2, #0
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002862:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800286a:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002878:	68b9      	ldr	r1, [r7, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	3212      	adds	r2, #18
 8002880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d80c      	bhi.n	80028a4 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6919      	ldr	r1, [r3, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	461a      	mov	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	e004      	b.n	80028ae <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3301      	adds	r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d9b5      	bls.n	8002826 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e4:	330c      	adds	r3, #12
 80028e6:	601a      	str	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b08d      	sub	sp, #52	; 0x34
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3318      	adds	r3, #24
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002932:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002936:	d007      	beq.n	8002948 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293c:	3304      	adds	r3, #4
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002948:	2302      	movs	r3, #2
 800294a:	e103      	b.n	8002b54 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	3301      	adds	r3, #1
 8002950:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002964:	f023 031f 	bic.w	r3, r3, #31
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	6852      	ldr	r2, [r2, #4]
 800296c:	431a      	orrs	r2, r3
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	431a      	orrs	r2, r3
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80029d2:	f3bf 8f5f 	dmb	sy
}
 80029d6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80029e4:	e084      	b.n	8002af0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e005      	b.n	8002a12 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	3301      	adds	r3, #1
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d902      	bls.n	8002a24 <ETH_Prepare_Tx_Descriptors+0x130>
 8002a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a20:	3b04      	subs	r3, #4
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a2c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a46:	d007      	beq.n	8002a58 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d029      	beq.n	8002aac <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a64:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6a:	e019      	b.n	8002aa0 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002a6c:	f3bf 8f5f 	dmb	sy
}
 8002a70:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a80:	3301      	adds	r3, #1
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d902      	bls.n	8002a90 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	3b04      	subs	r3, #4
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d3e1      	bcc.n	8002a6c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e053      	b.n	8002b54 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	3301      	adds	r3, #1
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	461a      	mov	r2, r3
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002aca:	f023 031f 	bic.w	r3, r3, #31
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	6852      	ldr	r2, [r2, #4]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	3301      	adds	r3, #1
 8002adc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ade:	f3bf 8f5f 	dmb	sy
}
 8002ae2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f47f af76 	bne.w	80029e6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e005      	b.n	8002b1a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2a:	6979      	ldr	r1, [r7, #20]
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	3304      	adds	r3, #4
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b3c:	b672      	cpsid	i
}
 8002b3e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002b4e:	b662      	cpsie	i
}
 8002b50:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3734      	adds	r7, #52	; 0x34
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	e16b      	b.n	8002e54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	f040 815a 	bne.w	8002e4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d005      	beq.n	8002bb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d130      	bne.n	8002c14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be8:	2201      	movs	r2, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0201 	and.w	r2, r3, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d017      	beq.n	8002c50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d123      	bne.n	8002ca4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	08da      	lsrs	r2, r3, #3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3208      	adds	r2, #8
 8002c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	220f      	movs	r2, #15
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	08da      	lsrs	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3208      	adds	r2, #8
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	2203      	movs	r2, #3
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0203 	and.w	r2, r3, #3
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80b4 	beq.w	8002e4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b60      	ldr	r3, [pc, #384]	; (8002e6c <HAL_GPIO_Init+0x30c>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	4a5f      	ldr	r2, [pc, #380]	; (8002e6c <HAL_GPIO_Init+0x30c>)
 8002cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf6:	4b5d      	ldr	r3, [pc, #372]	; (8002e6c <HAL_GPIO_Init+0x30c>)
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d02:	4a5b      	ldr	r2, [pc, #364]	; (8002e70 <HAL_GPIO_Init+0x310>)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <HAL_GPIO_Init+0x314>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d02b      	beq.n	8002d86 <HAL_GPIO_Init+0x226>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a51      	ldr	r2, [pc, #324]	; (8002e78 <HAL_GPIO_Init+0x318>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d025      	beq.n	8002d82 <HAL_GPIO_Init+0x222>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a50      	ldr	r2, [pc, #320]	; (8002e7c <HAL_GPIO_Init+0x31c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <HAL_GPIO_Init+0x21e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4f      	ldr	r2, [pc, #316]	; (8002e80 <HAL_GPIO_Init+0x320>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x21a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4e      	ldr	r2, [pc, #312]	; (8002e84 <HAL_GPIO_Init+0x324>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x216>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4d      	ldr	r2, [pc, #308]	; (8002e88 <HAL_GPIO_Init+0x328>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x212>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4c      	ldr	r2, [pc, #304]	; (8002e8c <HAL_GPIO_Init+0x32c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x20e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4b      	ldr	r2, [pc, #300]	; (8002e90 <HAL_GPIO_Init+0x330>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x20a>
 8002d66:	2307      	movs	r3, #7
 8002d68:	e00e      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	e00c      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d6e:	2306      	movs	r3, #6
 8002d70:	e00a      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d72:	2305      	movs	r3, #5
 8002d74:	e008      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d76:	2304      	movs	r3, #4
 8002d78:	e006      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e004      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e002      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x228>
 8002d86:	2300      	movs	r3, #0
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	f002 0203 	and.w	r2, r2, #3
 8002d8e:	0092      	lsls	r2, r2, #2
 8002d90:	4093      	lsls	r3, r2
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d98:	4935      	ldr	r1, [pc, #212]	; (8002e70 <HAL_GPIO_Init+0x310>)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dca:	4a32      	ldr	r2, [pc, #200]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd0:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df4:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dfa:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e1e:	4a1d      	ldr	r2, [pc, #116]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e48:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <HAL_GPIO_Init+0x334>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	3301      	adds	r3, #1
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	f67f ae90 	bls.w	8002b7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3724      	adds	r7, #36	; 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	40013800 	.word	0x40013800
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40020400 	.word	0x40020400
 8002e7c:	40020800 	.word	0x40020800
 8002e80:	40020c00 	.word	0x40020c00
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40021400 	.word	0x40021400
 8002e8c:	40021800 	.word	0x40021800
 8002e90:	40021c00 	.word	0x40021c00
 8002e94:	40013c00 	.word	0x40013c00

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb4:	e003      	b.n	8002ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	041a      	lsls	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e264      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d075      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eea:	4ba3      	ldr	r3, [pc, #652]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d00c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4ba0      	ldr	r3, [pc, #640]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d112      	bne.n	8002f28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f02:	4b9d      	ldr	r3, [pc, #628]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	4b99      	ldr	r3, [pc, #612]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d05b      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x108>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d157      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e23f      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_OscConfig+0x74>
 8002f32:	4b91      	ldr	r3, [pc, #580]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a90      	ldr	r2, [pc, #576]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xb0>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x98>
 8002f4a:	4b8b      	ldr	r3, [pc, #556]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a8a      	ldr	r2, [pc, #552]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a87      	ldr	r2, [pc, #540]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xb0>
 8002f64:	4b84      	ldr	r3, [pc, #528]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a83      	ldr	r2, [pc, #524]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b81      	ldr	r3, [pc, #516]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a80      	ldr	r2, [pc, #512]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fa06 	bl	8001394 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fa02 	bl	8001394 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	; 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e204      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xc0>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe f9f2 	bl	8001394 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe f9ee 	bl	8001394 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	; 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1f0      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0xe8>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d063      	beq.n	80030aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe2:	4b65      	ldr	r3, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fee:	4b62      	ldr	r3, [pc, #392]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d11c      	bne.n	8003034 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffa:	4b5f      	ldr	r3, [pc, #380]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	4b5c      	ldr	r3, [pc, #368]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x152>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1c4      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b56      	ldr	r3, [pc, #344]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4952      	ldr	r1, [pc, #328]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	e03a      	b.n	80030aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303c:	4b4f      	ldr	r3, [pc, #316]	; (800317c <HAL_RCC_OscConfig+0x2b0>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7fe f9a7 	bl	8001394 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304a:	f7fe f9a3 	bl	8001394 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e1a5      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	4b46      	ldr	r3, [pc, #280]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4940      	ldr	r1, [pc, #256]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	4b3f      	ldr	r3, [pc, #252]	; (800317c <HAL_RCC_OscConfig+0x2b0>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7fe f986 	bl	8001394 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308c:	f7fe f982 	bl	8001394 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e184      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	4b36      	ldr	r3, [pc, #216]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d030      	beq.n	8003118 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d016      	beq.n	80030ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	4b30      	ldr	r3, [pc, #192]	; (8003180 <HAL_RCC_OscConfig+0x2b4>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c4:	f7fe f966 	bl	8001394 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe f962 	bl	8001394 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e164      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	4b26      	ldr	r3, [pc, #152]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x200>
 80030ea:	e015      	b.n	8003118 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ec:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCC_OscConfig+0x2b4>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f2:	f7fe f94f 	bl	8001394 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fa:	f7fe f94b 	bl	8001394 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e14d      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80a0 	beq.w	8003266 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312a:	4b13      	ldr	r3, [pc, #76]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10f      	bne.n	8003156 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a0e      	ldr	r2, [pc, #56]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <HAL_RCC_OscConfig+0x2ac>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003152:	2301      	movs	r3, #1
 8003154:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_OscConfig+0x2b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d121      	bne.n	80031a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <HAL_RCC_OscConfig+0x2b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a07      	ldr	r2, [pc, #28]	; (8003184 <HAL_RCC_OscConfig+0x2b8>)
 8003168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800316e:	f7fe f911 	bl	8001394 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	e011      	b.n	800319a <HAL_RCC_OscConfig+0x2ce>
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800
 800317c:	42470000 	.word	0x42470000
 8003180:	42470e80 	.word	0x42470e80
 8003184:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003188:	f7fe f904 	bl	8001394 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e106      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	4b85      	ldr	r3, [pc, #532]	; (80033b0 <HAL_RCC_OscConfig+0x4e4>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d106      	bne.n	80031bc <HAL_RCC_OscConfig+0x2f0>
 80031ae:	4b81      	ldr	r3, [pc, #516]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	4a80      	ldr	r2, [pc, #512]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ba:	e01c      	b.n	80031f6 <HAL_RCC_OscConfig+0x32a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d10c      	bne.n	80031de <HAL_RCC_OscConfig+0x312>
 80031c4:	4b7b      	ldr	r3, [pc, #492]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a7a      	ldr	r2, [pc, #488]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031ca:	f043 0304 	orr.w	r3, r3, #4
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
 80031d0:	4b78      	ldr	r3, [pc, #480]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	4a77      	ldr	r2, [pc, #476]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6713      	str	r3, [r2, #112]	; 0x70
 80031dc:	e00b      	b.n	80031f6 <HAL_RCC_OscConfig+0x32a>
 80031de:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a74      	ldr	r2, [pc, #464]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	4b72      	ldr	r3, [pc, #456]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a71      	ldr	r2, [pc, #452]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80031f0:	f023 0304 	bic.w	r3, r3, #4
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d015      	beq.n	800322a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fe f8c9 	bl	8001394 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	e00a      	b.n	800321c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003206:	f7fe f8c5 	bl	8001394 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	4293      	cmp	r3, r2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e0c5      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321c:	4b65      	ldr	r3, [pc, #404]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800321e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ee      	beq.n	8003206 <HAL_RCC_OscConfig+0x33a>
 8003228:	e014      	b.n	8003254 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe f8b3 	bl	8001394 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe f8af 	bl	8001394 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0af      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003248:	4b5a      	ldr	r3, [pc, #360]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ee      	bne.n	8003232 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800325a:	4b56      	ldr	r3, [pc, #344]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	4a55      	ldr	r2, [pc, #340]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 809b 	beq.w	80033a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003270:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 030c 	and.w	r3, r3, #12
 8003278:	2b08      	cmp	r3, #8
 800327a:	d05c      	beq.n	8003336 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d141      	bne.n	8003308 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003284:	4b4c      	ldr	r3, [pc, #304]	; (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe f883 	bl	8001394 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe f87f 	bl	8001394 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e081      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a4:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	019b      	lsls	r3, r3, #6
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	085b      	lsrs	r3, r3, #1
 80032c8:	3b01      	subs	r3, #1
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	061b      	lsls	r3, r3, #24
 80032d4:	4937      	ldr	r1, [pc, #220]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032da:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe f858 	bl	8001394 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe f854 	bl	8001394 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e056      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x41c>
 8003306:	e04e      	b.n	80033a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <HAL_RCC_OscConfig+0x4ec>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7fe f841 	bl	8001394 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003316:	f7fe f83d 	bl	8001394 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e03f      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003328:	4b22      	ldr	r3, [pc, #136]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x44a>
 8003334:	e037      	b.n	80033a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e032      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <HAL_RCC_OscConfig+0x4e8>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d028      	beq.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d121      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003368:	429a      	cmp	r2, r3
 800336a:	d11a      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003372:	4013      	ands	r3, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003378:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800337a:	4293      	cmp	r3, r2
 800337c:	d111      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	3b01      	subs	r3, #1
 800338c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d107      	bne.n	80033a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d001      	beq.n	80033a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40007000 	.word	0x40007000
 80033b4:	40023800 	.word	0x40023800
 80033b8:	42470060 	.word	0x42470060

080033bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0cc      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d90c      	bls.n	80033f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033de:	4b65      	ldr	r3, [pc, #404]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e6:	4b63      	ldr	r3, [pc, #396]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0b8      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003410:	4b59      	ldr	r3, [pc, #356]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a58      	ldr	r2, [pc, #352]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003428:	4b53      	ldr	r3, [pc, #332]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4a52      	ldr	r2, [pc, #328]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003432:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003434:	4b50      	ldr	r3, [pc, #320]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	494d      	ldr	r1, [pc, #308]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d044      	beq.n	80034dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b47      	ldr	r3, [pc, #284]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d119      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d003      	beq.n	800347a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003476:	2b03      	cmp	r3, #3
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347a:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e06f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348a:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e067      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349a:	4b37      	ldr	r3, [pc, #220]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f023 0203 	bic.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4934      	ldr	r1, [pc, #208]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034ac:	f7fd ff72 	bl	8001394 <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	f7fd ff6e 	bl	8001394 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e04f      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ca:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 020c 	and.w	r2, r3, #12
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	429a      	cmp	r2, r3
 80034da:	d1eb      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034dc:	4b25      	ldr	r3, [pc, #148]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d20c      	bcs.n	8003504 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e032      	b.n	800356a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003510:	4b19      	ldr	r3, [pc, #100]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4916      	ldr	r1, [pc, #88]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	490e      	ldr	r1, [pc, #56]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003542:	f000 f821 	bl	8003588 <HAL_RCC_GetSysClockFreq>
 8003546:	4602      	mov	r2, r0
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	490a      	ldr	r1, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	5ccb      	ldrb	r3, [r1, r3]
 8003556:	fa22 f303 	lsr.w	r3, r2, r3
 800355a:	4a09      	ldr	r2, [pc, #36]	; (8003580 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd fbd2 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023c00 	.word	0x40023c00
 8003578:	40023800 	.word	0x40023800
 800357c:	080180d8 	.word	0x080180d8
 8003580:	20000000 	.word	0x20000000
 8003584:	20000004 	.word	0x20000004

08003588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003588:	b5b0      	push	{r4, r5, r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800358e:	2100      	movs	r1, #0
 8003590:	6079      	str	r1, [r7, #4]
 8003592:	2100      	movs	r1, #0
 8003594:	60f9      	str	r1, [r7, #12]
 8003596:	2100      	movs	r1, #0
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800359a:	2100      	movs	r1, #0
 800359c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800359e:	4952      	ldr	r1, [pc, #328]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035a0:	6889      	ldr	r1, [r1, #8]
 80035a2:	f001 010c 	and.w	r1, r1, #12
 80035a6:	2908      	cmp	r1, #8
 80035a8:	d00d      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80035aa:	2908      	cmp	r1, #8
 80035ac:	f200 8094 	bhi.w	80036d8 <HAL_RCC_GetSysClockFreq+0x150>
 80035b0:	2900      	cmp	r1, #0
 80035b2:	d002      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x32>
 80035b4:	2904      	cmp	r1, #4
 80035b6:	d003      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x38>
 80035b8:	e08e      	b.n	80036d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035ba:	4b4c      	ldr	r3, [pc, #304]	; (80036ec <HAL_RCC_GetSysClockFreq+0x164>)
 80035bc:	60bb      	str	r3, [r7, #8]
       break;
 80035be:	e08e      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035c2:	60bb      	str	r3, [r7, #8]
      break;
 80035c4:	e08b      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c6:	4948      	ldr	r1, [pc, #288]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035c8:	6849      	ldr	r1, [r1, #4]
 80035ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035ce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d0:	4945      	ldr	r1, [pc, #276]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035d2:	6849      	ldr	r1, [r1, #4]
 80035d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80035d8:	2900      	cmp	r1, #0
 80035da:	d024      	beq.n	8003626 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035dc:	4942      	ldr	r1, [pc, #264]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80035de:	6849      	ldr	r1, [r1, #4]
 80035e0:	0989      	lsrs	r1, r1, #6
 80035e2:	4608      	mov	r0, r1
 80035e4:	f04f 0100 	mov.w	r1, #0
 80035e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035ec:	f04f 0500 	mov.w	r5, #0
 80035f0:	ea00 0204 	and.w	r2, r0, r4
 80035f4:	ea01 0305 	and.w	r3, r1, r5
 80035f8:	493d      	ldr	r1, [pc, #244]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80035fa:	fb01 f003 	mul.w	r0, r1, r3
 80035fe:	2100      	movs	r1, #0
 8003600:	fb01 f102 	mul.w	r1, r1, r2
 8003604:	1844      	adds	r4, r0, r1
 8003606:	493a      	ldr	r1, [pc, #232]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8003608:	fba2 0101 	umull	r0, r1, r2, r1
 800360c:	1863      	adds	r3, r4, r1
 800360e:	4619      	mov	r1, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	461a      	mov	r2, r3
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	f7fc fe2a 	bl	8000270 <__aeabi_uldivmod>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4613      	mov	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e04a      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003626:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	099b      	lsrs	r3, r3, #6
 800362c:	461a      	mov	r2, r3
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003636:	f04f 0100 	mov.w	r1, #0
 800363a:	ea02 0400 	and.w	r4, r2, r0
 800363e:	ea03 0501 	and.w	r5, r3, r1
 8003642:	4620      	mov	r0, r4
 8003644:	4629      	mov	r1, r5
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	014b      	lsls	r3, r1, #5
 8003650:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003654:	0142      	lsls	r2, r0, #5
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	1b00      	subs	r0, r0, r4
 800365c:	eb61 0105 	sbc.w	r1, r1, r5
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	018b      	lsls	r3, r1, #6
 800366a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800366e:	0182      	lsls	r2, r0, #6
 8003670:	1a12      	subs	r2, r2, r0
 8003672:	eb63 0301 	sbc.w	r3, r3, r1
 8003676:	f04f 0000 	mov.w	r0, #0
 800367a:	f04f 0100 	mov.w	r1, #0
 800367e:	00d9      	lsls	r1, r3, #3
 8003680:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003684:	00d0      	lsls	r0, r2, #3
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	1912      	adds	r2, r2, r4
 800368c:	eb45 0303 	adc.w	r3, r5, r3
 8003690:	f04f 0000 	mov.w	r0, #0
 8003694:	f04f 0100 	mov.w	r1, #0
 8003698:	0299      	lsls	r1, r3, #10
 800369a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800369e:	0290      	lsls	r0, r2, #10
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	f7fc fdde 	bl	8000270 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4613      	mov	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	0c1b      	lsrs	r3, r3, #16
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	3301      	adds	r3, #1
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	60bb      	str	r3, [r7, #8]
      break;
 80036d6:	e002      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <HAL_RCC_GetSysClockFreq+0x164>)
 80036da:	60bb      	str	r3, [r7, #8]
      break;
 80036dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036de:	68bb      	ldr	r3, [r7, #8]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bdb0      	pop	{r4, r5, r7, pc}
 80036e8:	40023800 	.word	0x40023800
 80036ec:	00f42400 	.word	0x00f42400
 80036f0:	017d7840 	.word	0x017d7840

080036f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_RCC_GetHCLKFreq+0x14>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000000 	.word	0x20000000

0800370c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003710:	f7ff fff0 	bl	80036f4 <HAL_RCC_GetHCLKFreq>
 8003714:	4602      	mov	r2, r0
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	0a9b      	lsrs	r3, r3, #10
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	4903      	ldr	r1, [pc, #12]	; (8003730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40023800 	.word	0x40023800
 8003730:	080180e8 	.word	0x080180e8

08003734 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	220f      	movs	r2, #15
 8003742:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0203 	and.w	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	08db      	lsrs	r3, r3, #3
 800376e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_RCC_GetClockConfig+0x60>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0207 	and.w	r2, r3, #7
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	601a      	str	r2, [r3, #0]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40023c00 	.word	0x40023c00

08003798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07b      	b.n	80038a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d108      	bne.n	80037c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ba:	d009      	beq.n	80037d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	61da      	str	r2, [r3, #28]
 80037c2:	e005      	b.n	80037d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd f9cc 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003806:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	ea42 0103 	orr.w	r1, r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	f003 0104 	and.w	r1, r3, #4
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f003 0210 	and.w	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003890:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e041      	b.n	8003940 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7fd f9a1 	bl	8000c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f000 fa95 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d001      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e04e      	b.n	80039fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a23      	ldr	r2, [pc, #140]	; (8003a0c <HAL_TIM_Base_Start_IT+0xc4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d022      	beq.n	80039c8 <HAL_TIM_Base_Start_IT+0x80>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398a:	d01d      	beq.n	80039c8 <HAL_TIM_Base_Start_IT+0x80>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <HAL_TIM_Base_Start_IT+0xc8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d018      	beq.n	80039c8 <HAL_TIM_Base_Start_IT+0x80>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a1e      	ldr	r2, [pc, #120]	; (8003a14 <HAL_TIM_Base_Start_IT+0xcc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d013      	beq.n	80039c8 <HAL_TIM_Base_Start_IT+0x80>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1c      	ldr	r2, [pc, #112]	; (8003a18 <HAL_TIM_Base_Start_IT+0xd0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00e      	beq.n	80039c8 <HAL_TIM_Base_Start_IT+0x80>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1b      	ldr	r2, [pc, #108]	; (8003a1c <HAL_TIM_Base_Start_IT+0xd4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d009      	beq.n	80039c8 <HAL_TIM_Base_Start_IT+0x80>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <HAL_TIM_Base_Start_IT+0xd8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d004      	beq.n	80039c8 <HAL_TIM_Base_Start_IT+0x80>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a18      	ldr	r2, [pc, #96]	; (8003a24 <HAL_TIM_Base_Start_IT+0xdc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d111      	bne.n	80039ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d010      	beq.n	80039fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0201 	orr.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ea:	e007      	b.n	80039fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40010000 	.word	0x40010000
 8003a10:	40000400 	.word	0x40000400
 8003a14:	40000800 	.word	0x40000800
 8003a18:	40000c00 	.word	0x40000c00
 8003a1c:	40010400 	.word	0x40010400
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40001800 	.word	0x40001800

08003a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d122      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d11b      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0202 	mvn.w	r2, #2
 8003a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f9b5 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f9a7 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f9b8 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0204 	mvn.w	r2, #4
 8003aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f98b 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f97d 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f98e 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0208 	mvn.w	r2, #8
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2204      	movs	r2, #4
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f961 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f953 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f964 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0210 	mvn.w	r2, #16
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2208      	movs	r2, #8
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f937 	bl	8003dda <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f929 	bl	8003dc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f93a 	bl	8003dee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d10e      	bne.n	8003bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d107      	bne.n	8003bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0201 	mvn.w	r2, #1
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fc ffaa 	bl	8000b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b80      	cmp	r3, #128	; 0x80
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b80      	cmp	r3, #128	; 0x80
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fae0 	bl	8004198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8ff 	bl	8003e02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0220 	mvn.w	r2, #32
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 faaa 	bl	8004184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_TIM_ConfigClockSource+0x1c>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0b4      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x186>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8c:	d03e      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0xd4>
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c92:	f200 8087 	bhi.w	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9a:	f000 8086 	beq.w	8003daa <HAL_TIM_ConfigClockSource+0x172>
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca2:	d87f      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b70      	cmp	r3, #112	; 0x70
 8003ca6:	d01a      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0xa6>
 8003ca8:	2b70      	cmp	r3, #112	; 0x70
 8003caa:	d87b      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b60      	cmp	r3, #96	; 0x60
 8003cae:	d050      	beq.n	8003d52 <HAL_TIM_ConfigClockSource+0x11a>
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
 8003cb2:	d877      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d03c      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0xfa>
 8003cb8:	2b50      	cmp	r3, #80	; 0x50
 8003cba:	d873      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d058      	beq.n	8003d72 <HAL_TIM_ConfigClockSource+0x13a>
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d86f      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d064      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	2b30      	cmp	r3, #48	; 0x30
 8003cca:	d86b      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d060      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d867      	bhi.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d05c      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d05a      	beq.n	8003d92 <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	e062      	b.n	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6899      	ldr	r1, [r3, #8]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f000 f9ad 	bl	800404c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	609a      	str	r2, [r3, #8]
      break;
 8003d0a:	e04f      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6899      	ldr	r1, [r3, #8]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f000 f996 	bl	800404c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2e:	609a      	str	r2, [r3, #8]
      break;
 8003d30:	e03c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f000 f90a 	bl	8003f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2150      	movs	r1, #80	; 0x50
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f963 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d50:	e02c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	6859      	ldr	r1, [r3, #4]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f000 f929 	bl	8003fb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2160      	movs	r1, #96	; 0x60
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f953 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d70:	e01c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6818      	ldr	r0, [r3, #0]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	6859      	ldr	r1, [r3, #4]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f000 f8ea 	bl	8003f58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2140      	movs	r1, #64	; 0x40
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f943 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003d90:	e00c      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f000 f93a 	bl	8004016 <TIM_ITRx_SetConfig>
      break;
 8003da2:	e003      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      break;
 8003da8:	e000      	b.n	8003dac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003daa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
	...

08003e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3d      	ldr	r2, [pc, #244]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2f      	ldr	r2, [pc, #188]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d027      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2c      	ldr	r2, [pc, #176]	; (8003f30 <TIM_Base_SetConfig+0x118>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d023      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0x11c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a29      	ldr	r2, [pc, #164]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d017      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <TIM_Base_SetConfig+0x128>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <TIM_Base_SetConfig+0x130>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a25      	ldr	r2, [pc, #148]	; (8003f4c <TIM_Base_SetConfig+0x134>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <TIM_Base_SetConfig+0x138>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <TIM_Base_SetConfig+0x13c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <TIM_Base_SetConfig+0x114>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0xf8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a0c      	ldr	r2, [pc, #48]	; (8003f3c <TIM_Base_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d103      	bne.n	8003f18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	615a      	str	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40000400 	.word	0x40000400
 8003f34:	40000800 	.word	0x40000800
 8003f38:	40000c00 	.word	0x40000c00
 8003f3c:	40010400 	.word	0x40010400
 8003f40:	40014000 	.word	0x40014000
 8003f44:	40014400 	.word	0x40014400
 8003f48:	40014800 	.word	0x40014800
 8003f4c:	40001800 	.word	0x40001800
 8003f50:	40001c00 	.word	0x40001c00
 8003f54:	40002000 	.word	0x40002000

08003f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	f023 0201 	bic.w	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	011b      	lsls	r3, r3, #4
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 030a 	bic.w	r3, r3, #10
 8003f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	621a      	str	r2, [r3, #32]
}
 8003faa:	bf00      	nop
 8003fac:	371c      	adds	r7, #28
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b087      	sub	sp, #28
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0210 	bic.w	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fe0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	031b      	lsls	r3, r3, #12
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ff2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	f043 0307 	orr.w	r3, r3, #7
 8004038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	021a      	lsls	r2, r3, #8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	431a      	orrs	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	609a      	str	r2, [r3, #8]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e05a      	b.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a21      	ldr	r2, [pc, #132]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d022      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f0:	d01d      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1d      	ldr	r2, [pc, #116]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d018      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1b      	ldr	r2, [pc, #108]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d013      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1a      	ldr	r2, [pc, #104]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00e      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a18      	ldr	r2, [pc, #96]	; (8004178 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d009      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a15      	ldr	r2, [pc, #84]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d10c      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4313      	orrs	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40010000 	.word	0x40010000
 800416c:	40000400 	.word	0x40000400
 8004170:	40000800 	.word	0x40000800
 8004174:	40000c00 	.word	0x40000c00
 8004178:	40010400 	.word	0x40010400
 800417c:	40014000 	.word	0x40014000
 8004180:	40001800 	.word	0x40001800

08004184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80041ac:	b5b0      	push	{r4, r5, r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80041b2:	2100      	movs	r1, #0
 80041b4:	2000      	movs	r0, #0
 80041b6:	f003 fd59 	bl	8007c6c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <MX_LWIP_Init+0x90>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80041c0:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <MX_LWIP_Init+0x94>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80041c6:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <MX_LWIP_Init+0x98>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80041cc:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <MX_LWIP_Init+0x9c>)
 80041ce:	9302      	str	r3, [sp, #8]
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <MX_LWIP_Init+0xa0>)
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	2300      	movs	r3, #0
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <MX_LWIP_Init+0x98>)
 80041da:	4a19      	ldr	r2, [pc, #100]	; (8004240 <MX_LWIP_Init+0x94>)
 80041dc:	4917      	ldr	r1, [pc, #92]	; (800423c <MX_LWIP_Init+0x90>)
 80041de:	481c      	ldr	r0, [pc, #112]	; (8004250 <MX_LWIP_Init+0xa4>)
 80041e0:	f004 fb0e 	bl	8008800 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80041e4:	481a      	ldr	r0, [pc, #104]	; (8004250 <MX_LWIP_Init+0xa4>)
 80041e6:	f004 fcc5 	bl	8008b74 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80041ea:	4b19      	ldr	r3, [pc, #100]	; (8004250 <MX_LWIP_Init+0xa4>)
 80041ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041f0:	089b      	lsrs	r3, r3, #2
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80041fc:	4814      	ldr	r0, [pc, #80]	; (8004250 <MX_LWIP_Init+0xa4>)
 80041fe:	f004 fcc9 	bl	8008b94 <netif_set_up>
 8004202:	e002      	b.n	800420a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004204:	4812      	ldr	r0, [pc, #72]	; (8004250 <MX_LWIP_Init+0xa4>)
 8004206:	f004 fd31 	bl	8008c6c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800420a:	4912      	ldr	r1, [pc, #72]	; (8004254 <MX_LWIP_Init+0xa8>)
 800420c:	4810      	ldr	r0, [pc, #64]	; (8004250 <MX_LWIP_Init+0xa4>)
 800420e:	f004 fdc7 	bl	8008da0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004212:	4b11      	ldr	r3, [pc, #68]	; (8004258 <MX_LWIP_Init+0xac>)
 8004214:	1d3c      	adds	r4, r7, #4
 8004216:	461d      	mov	r5, r3
 8004218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800421a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800421c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004224:	1d3b      	adds	r3, r7, #4
 8004226:	490a      	ldr	r1, [pc, #40]	; (8004250 <MX_LWIP_Init+0xa4>)
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fd07 	bl	8004c3c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800422e:	4808      	ldr	r0, [pc, #32]	; (8004250 <MX_LWIP_Init+0xa4>)
 8004230:	f00b ff18 	bl	8010064 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004234:	bf00      	nop
 8004236:	3720      	adds	r7, #32
 8004238:	46bd      	mov	sp, r7
 800423a:	bdb0      	pop	{r4, r5, r7, pc}
 800423c:	20010a2c 	.word	0x20010a2c
 8004240:	20010a30 	.word	0x20010a30
 8004244:	20010a34 	.word	0x20010a34
 8004248:	08007ba9 	.word	0x08007ba9
 800424c:	08004705 	.word	0x08004705
 8004250:	200109f4 	.word	0x200109f4
 8004254:	0800425d 	.word	0x0800425d
 8004258:	08015214 	.word	0x08015214

0800425c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_ETH_RxCpltCallback+0x1c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fe27 	bl	8004ed0 <osSemaphoreRelease>
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000574 	.word	0x20000574

08004290 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <HAL_ETH_TxCpltCallback+0x1c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fe17 	bl	8004ed0 <osSemaphoreRelease>
}
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20000578 	.word	0x20000578

080042b0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fe f837 	bl	800232c <HAL_ETH_GetDMAError>
 80042be:	4603      	mov	r3, r0
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d104      	bne.n	80042d2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <HAL_ETH_ErrorCallback+0x2c>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fdff 	bl	8004ed0 <osSemaphoreRelease>
  }
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000574 	.word	0x20000574

080042e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b0a8      	sub	sp, #160	; 0xa0
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80042fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042fe:	2264      	movs	r2, #100	; 0x64
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f010 f806 	bl	8014314 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004308:	4b85      	ldr	r3, [pc, #532]	; (8004520 <low_level_init+0x240>)
 800430a:	4a86      	ldr	r2, [pc, #536]	; (8004524 <low_level_init+0x244>)
 800430c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800430e:	2300      	movs	r3, #0
 8004310:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800431a:	23e1      	movs	r3, #225	; 0xe1
 800431c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 800432c:	2300      	movs	r3, #0
 800432e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8004332:	4a7b      	ldr	r2, [pc, #492]	; (8004520 <low_level_init+0x240>)
 8004334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004338:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800433a:	4b79      	ldr	r3, [pc, #484]	; (8004520 <low_level_init+0x240>)
 800433c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004340:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004342:	4b77      	ldr	r3, [pc, #476]	; (8004520 <low_level_init+0x240>)
 8004344:	4a78      	ldr	r2, [pc, #480]	; (8004528 <low_level_init+0x248>)
 8004346:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004348:	4b75      	ldr	r3, [pc, #468]	; (8004520 <low_level_init+0x240>)
 800434a:	4a78      	ldr	r2, [pc, #480]	; (800452c <low_level_init+0x24c>)
 800434c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800434e:	4b74      	ldr	r3, [pc, #464]	; (8004520 <low_level_init+0x240>)
 8004350:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004354:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004356:	4872      	ldr	r0, [pc, #456]	; (8004520 <low_level_init+0x240>)
 8004358:	f7fd f92e 	bl	80015b8 <HAL_ETH_Init>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004362:	2238      	movs	r2, #56	; 0x38
 8004364:	2100      	movs	r1, #0
 8004366:	4872      	ldr	r0, [pc, #456]	; (8004530 <low_level_init+0x250>)
 8004368:	f00f ffd4 	bl	8014314 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800436c:	4b70      	ldr	r3, [pc, #448]	; (8004530 <low_level_init+0x250>)
 800436e:	2221      	movs	r2, #33	; 0x21
 8004370:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004372:	4b6f      	ldr	r3, [pc, #444]	; (8004530 <low_level_init+0x250>)
 8004374:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004378:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800437a:	4b6d      	ldr	r3, [pc, #436]	; (8004530 <low_level_init+0x250>)
 800437c:	2200      	movs	r2, #0
 800437e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004380:	486c      	ldr	r0, [pc, #432]	; (8004534 <low_level_init+0x254>)
 8004382:	f004 f8f7 	bl	8008574 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2206      	movs	r2, #6
 800438a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800438e:	4b64      	ldr	r3, [pc, #400]	; (8004520 <low_level_init+0x240>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800439a:	4b61      	ldr	r3, [pc, #388]	; (8004520 <low_level_init+0x240>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	785a      	ldrb	r2, [r3, #1]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80043a6:	4b5e      	ldr	r3, [pc, #376]	; (8004520 <low_level_init+0x240>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	789a      	ldrb	r2, [r3, #2]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80043b2:	4b5b      	ldr	r3, [pc, #364]	; (8004520 <low_level_init+0x240>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	78da      	ldrb	r2, [r3, #3]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80043be:	4b58      	ldr	r3, [pc, #352]	; (8004520 <low_level_init+0x240>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	791a      	ldrb	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80043ca:	4b55      	ldr	r3, [pc, #340]	; (8004520 <low_level_init+0x240>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	795a      	ldrb	r2, [r3, #5]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80043dc:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043e4:	f043 030a 	orr.w	r3, r3, #10
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80043f0:	2203      	movs	r2, #3
 80043f2:	2100      	movs	r1, #0
 80043f4:	2001      	movs	r0, #1
 80043f6:	f001 f811 	bl	800541c <xQueueGenericCreate>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4a4e      	ldr	r2, [pc, #312]	; (8004538 <low_level_init+0x258>)
 80043fe:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8004400:	2203      	movs	r2, #3
 8004402:	2100      	movs	r1, #0
 8004404:	2001      	movs	r0, #1
 8004406:	f001 f809 	bl	800541c <xQueueGenericCreate>
 800440a:	4603      	mov	r3, r0
 800440c:	4a4b      	ldr	r2, [pc, #300]	; (800453c <low_level_init+0x25c>)
 800440e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004410:	4b4b      	ldr	r3, [pc, #300]	; (8004540 <low_level_init+0x260>)
 8004412:	f107 0408 	add.w	r4, r7, #8
 8004416:	461d      	mov	r5, r3
 8004418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800441a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800441c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004420:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004424:	f107 0308 	add.w	r3, r7, #8
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fc06 	bl	8004c3c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8004430:	4944      	ldr	r1, [pc, #272]	; (8004544 <low_level_init+0x264>)
 8004432:	4845      	ldr	r0, [pc, #276]	; (8004548 <low_level_init+0x268>)
 8004434:	f7fc fe17 	bl	8001066 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8004438:	4843      	ldr	r0, [pc, #268]	; (8004548 <low_level_init+0x268>)
 800443a:	f7fc fe46 	bl	80010ca <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 800443e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004442:	2b00      	cmp	r3, #0
 8004444:	d165      	bne.n	8004512 <low_level_init+0x232>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004446:	4840      	ldr	r0, [pc, #256]	; (8004548 <low_level_init+0x268>)
 8004448:	f7fc fee7 	bl	800121a <DP83848_GetLinkState>
 800444c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8004450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004454:	2b01      	cmp	r3, #1
 8004456:	dc06      	bgt.n	8004466 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f004 fc71 	bl	8008d40 <netif_set_link_down>
      netif_set_down(netif);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f004 fc04 	bl	8008c6c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004464:	e057      	b.n	8004516 <low_level_init+0x236>
 8004466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800446a:	3b02      	subs	r3, #2
 800446c:	2b03      	cmp	r3, #3
 800446e:	d82b      	bhi.n	80044c8 <low_level_init+0x1e8>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <low_level_init+0x198>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	08004489 	.word	0x08004489
 800447c:	0800449b 	.word	0x0800449b
 8004480:	080044ab 	.word	0x080044ab
 8004484:	080044bb 	.word	0x080044bb
        duplex = ETH_FULLDUPLEX_MODE;
 8004488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800448c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8004490:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8004498:	e01f      	b.n	80044da <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800449a:	2300      	movs	r3, #0
 800449c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80044a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80044a8:	e017      	b.n	80044da <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80044aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80044b8:	e00f      	b.n	80044da <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80044c6:	e008      	b.n	80044da <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80044c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80044d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80044d8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80044da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044de:	4619      	mov	r1, r3
 80044e0:	480f      	ldr	r0, [pc, #60]	; (8004520 <low_level_init+0x240>)
 80044e2:	f7fd fdc9 	bl	8002078 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80044e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044ea:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 80044ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044f0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80044f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044f6:	4619      	mov	r1, r3
 80044f8:	4809      	ldr	r0, [pc, #36]	; (8004520 <low_level_init+0x240>)
 80044fa:	f7fd fea7 	bl	800224c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80044fe:	4808      	ldr	r0, [pc, #32]	; (8004520 <low_level_init+0x240>)
 8004500:	f7fd f93b 	bl	800177a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f004 fb45 	bl	8008b94 <netif_set_up>
    netif_set_link_up(netif);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f004 fbe0 	bl	8008cd0 <netif_set_link_up>
}
 8004510:	e001      	b.n	8004516 <low_level_init+0x236>
    Error_Handler();
 8004512:	f7fc fb07 	bl	8000b24 <Error_Handler>
}
 8004516:	bf00      	nop
 8004518:	37a0      	adds	r7, #160	; 0xa0
 800451a:	46bd      	mov	sp, r7
 800451c:	bdb0      	pop	{r4, r5, r7, pc}
 800451e:	bf00      	nop
 8004520:	2001551c 	.word	0x2001551c
 8004524:	40028000 	.word	0x40028000
 8004528:	20010a38 	.word	0x20010a38
 800452c:	2001547c 	.word	0x2001547c
 8004530:	200155cc 	.word	0x200155cc
 8004534:	080180f0 	.word	0x080180f0
 8004538:	20000574 	.word	0x20000574
 800453c:	20000578 	.word	0x20000578
 8004540:	08015238 	.word	0x08015238
 8004544:	2000000c 	.word	0x2000000c
 8004548:	2001545c 	.word	0x2001545c

0800454c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b092      	sub	sp, #72	; 0x48
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800455a:	2300      	movs	r3, #0
 800455c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004564:	f107 030c 	add.w	r3, r7, #12
 8004568:	2230      	movs	r2, #48	; 0x30
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f00f fed1 	bl	8014314 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004572:	f107 030c 	add.w	r3, r7, #12
 8004576:	2230      	movs	r2, #48	; 0x30
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f00f feca 	bl	8014314 <memset>

  for(q = p; q != NULL; q = q->next)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	643b      	str	r3, [r7, #64]	; 0x40
 8004584:	e049      	b.n	800461a <low_level_output+0xce>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004588:	2b03      	cmp	r3, #3
 800458a:	d902      	bls.n	8004592 <low_level_output+0x46>
      return ERR_IF;
 800458c:	f06f 030b 	mvn.w	r3, #11
 8004590:	e069      	b.n	8004666 <low_level_output+0x11a>

    Txbuffer[i].buffer = q->payload;
 8004592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004594:	6859      	ldr	r1, [r3, #4]
 8004596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004598:	4613      	mov	r3, r2
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045a4:	4413      	add	r3, r2
 80045a6:	3b3c      	subs	r3, #60	; 0x3c
 80045a8:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80045aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ac:	895b      	ldrh	r3, [r3, #10]
 80045ae:	4619      	mov	r1, r3
 80045b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045b2:	4613      	mov	r3, r2
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045be:	4413      	add	r3, r2
 80045c0:	3b38      	subs	r3, #56	; 0x38
 80045c2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80045c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d012      	beq.n	80045f0 <low_level_output+0xa4>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80045ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045cc:	1e5a      	subs	r2, r3, #1
 80045ce:	f107 000c 	add.w	r0, r7, #12
 80045d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045d4:	460b      	mov	r3, r1
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	440b      	add	r3, r1
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	18c1      	adds	r1, r0, r3
 80045de:	4613      	mov	r3, r2
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045ea:	4413      	add	r3, r2
 80045ec:	3b34      	subs	r3, #52	; 0x34
 80045ee:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80045f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <low_level_output+0xc2>
    {
      Txbuffer[i].next = NULL;
 80045f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004606:	4413      	add	r3, r2
 8004608:	3b34      	subs	r3, #52	; 0x34
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800460e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004610:	3301      	adds	r3, #1
 8004612:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	643b      	str	r3, [r7, #64]	; 0x40
 800461a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1b2      	bne.n	8004586 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	891b      	ldrh	r3, [r3, #8]
 8004624:	461a      	mov	r2, r3
 8004626:	4b12      	ldr	r3, [pc, #72]	; (8004670 <low_level_output+0x124>)
 8004628:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800462a:	4a11      	ldr	r2, [pc, #68]	; (8004670 <low_level_output+0x124>)
 800462c:	f107 030c 	add.w	r3, r7, #12
 8004630:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004632:	4a0f      	ldr	r2, [pc, #60]	; (8004670 <low_level_output+0x124>)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004638:	6838      	ldr	r0, [r7, #0]
 800463a:	f005 f805 	bl	8009648 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800463e:	490c      	ldr	r1, [pc, #48]	; (8004670 <low_level_output+0x124>)
 8004640:	480c      	ldr	r0, [pc, #48]	; (8004674 <low_level_output+0x128>)
 8004642:	f7fd f9b4 	bl	80019ae <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004646:	bf00      	nop
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <low_level_output+0x12c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f04f 31ff 	mov.w	r1, #4294967295
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fbef 	bl	8004e34 <osSemaphoreWait>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f5      	bne.n	8004648 <low_level_output+0xfc>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800465c:	4805      	ldr	r0, [pc, #20]	; (8004674 <low_level_output+0x128>)
 800465e:	f7fd fb3b 	bl	8001cd8 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004662:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004666:	4618      	mov	r0, r3
 8004668:	3748      	adds	r7, #72	; 0x48
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	200155cc 	.word	0x200155cc
 8004674:	2001551c 	.word	0x2001551c
 8004678:	20000578 	.word	0x20000578

0800467c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <low_level_input+0x2c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	4619      	mov	r1, r3
 8004696:	4805      	ldr	r0, [pc, #20]	; (80046ac <low_level_input+0x30>)
 8004698:	f7fd f9e6 	bl	8001a68 <HAL_ETH_ReadData>
  }

  return p;
 800469c:	68fb      	ldr	r3, [r7, #12]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000570 	.word	0x20000570
 80046ac:	2001551c 	.word	0x2001551c

080046b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80046c0:	4b0f      	ldr	r3, [pc, #60]	; (8004700 <ethernetif_input+0x50>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f04f 31ff 	mov.w	r1, #4294967295
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fbb3 	bl	8004e34 <osSemaphoreWait>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f5      	bne.n	80046c0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80046d4:	68b8      	ldr	r0, [r7, #8]
 80046d6:	f7ff ffd1 	bl	800467c <low_level_input>
 80046da:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	4798      	blx	r3
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f004 ff02 	bl	80094fc <pbuf_free>
          }
        }
      } while(p!=NULL);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1ea      	bne.n	80046d4 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80046fe:	e7df      	b.n	80046c0 <ethernetif_input+0x10>
 8004700:	20000574 	.word	0x20000574

08004704 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <ethernetif_init+0x1c>
 8004712:	4b0e      	ldr	r3, [pc, #56]	; (800474c <ethernetif_init+0x48>)
 8004714:	f240 12df 	movw	r2, #479	; 0x1df
 8004718:	490d      	ldr	r1, [pc, #52]	; (8004750 <ethernetif_init+0x4c>)
 800471a:	480e      	ldr	r0, [pc, #56]	; (8004754 <ethernetif_init+0x50>)
 800471c:	f010 f99a 	bl	8014a54 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2273      	movs	r2, #115	; 0x73
 8004724:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2274      	movs	r2, #116	; 0x74
 800472c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a09      	ldr	r2, [pc, #36]	; (8004758 <ethernetif_init+0x54>)
 8004734:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a08      	ldr	r2, [pc, #32]	; (800475c <ethernetif_init+0x58>)
 800473a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff fdcf 	bl	80042e0 <low_level_init>

  return ERR_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	08015254 	.word	0x08015254
 8004750:	08015270 	.word	0x08015270
 8004754:	08015280 	.word	0x08015280
 8004758:	08011f31 	.word	0x08011f31
 800475c:	0800454d 	.word	0x0800454d

08004760 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800476c:	68f9      	ldr	r1, [r7, #12]
 800476e:	4809      	ldr	r0, [pc, #36]	; (8004794 <pbuf_free_custom+0x34>)
 8004770:	f003 fff0 	bl	8008754 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004774:	4b08      	ldr	r3, [pc, #32]	; (8004798 <pbuf_free_custom+0x38>)
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800477c:	4b06      	ldr	r3, [pc, #24]	; (8004798 <pbuf_free_custom+0x38>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004782:	4b06      	ldr	r3, [pc, #24]	; (800479c <pbuf_free_custom+0x3c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fba2 	bl	8004ed0 <osSemaphoreRelease>
  }
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	080180f0 	.word	0x080180f0
 8004798:	20000570 	.word	0x20000570
 800479c:	20000574 	.word	0x20000574

080047a0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047a4:	f7fc fdf6 	bl	8001394 <HAL_GetTick>
 80047a8:	4603      	mov	r3, r0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08e      	sub	sp, #56	; 0x38
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a4a      	ldr	r2, [pc, #296]	; (80048f8 <HAL_ETH_MspInit+0x148>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	f040 808d 	bne.w	80048ee <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80047d4:	2300      	movs	r3, #0
 80047d6:	623b      	str	r3, [r7, #32]
 80047d8:	4b48      	ldr	r3, [pc, #288]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	4a47      	ldr	r2, [pc, #284]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 80047de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047e2:	6313      	str	r3, [r2, #48]	; 0x30
 80047e4:	4b45      	ldr	r3, [pc, #276]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	2300      	movs	r3, #0
 80047f2:	61fb      	str	r3, [r7, #28]
 80047f4:	4b41      	ldr	r3, [pc, #260]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	4a40      	ldr	r2, [pc, #256]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 80047fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004800:	4b3e      	ldr	r3, [pc, #248]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	2300      	movs	r3, #0
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	4b3a      	ldr	r3, [pc, #232]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	4a39      	ldr	r2, [pc, #228]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 8004816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800481a:	6313      	str	r3, [r2, #48]	; 0x30
 800481c:	4b37      	ldr	r3, [pc, #220]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	4b33      	ldr	r3, [pc, #204]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004830:	4a32      	ldr	r2, [pc, #200]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	6313      	str	r3, [r2, #48]	; 0x30
 8004838:	4b30      	ldr	r3, [pc, #192]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	f003 0304 	and.w	r3, r3, #4
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	4b2c      	ldr	r3, [pc, #176]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484c:	4a2b      	ldr	r2, [pc, #172]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6313      	str	r3, [r2, #48]	; 0x30
 8004854:	4b29      	ldr	r3, [pc, #164]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 8004856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004860:	2300      	movs	r3, #0
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 8004866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004868:	4a24      	ldr	r2, [pc, #144]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 800486a:	f043 0302 	orr.w	r3, r3, #2
 800486e:	6313      	str	r3, [r2, #48]	; 0x30
 8004870:	4b22      	ldr	r3, [pc, #136]	; (80048fc <HAL_ETH_MspInit+0x14c>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800487c:	2332      	movs	r3, #50	; 0x32
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004880:	2302      	movs	r3, #2
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004888:	2303      	movs	r3, #3
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800488c:	230b      	movs	r3, #11
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004894:	4619      	mov	r1, r3
 8004896:	481a      	ldr	r0, [pc, #104]	; (8004900 <HAL_ETH_MspInit+0x150>)
 8004898:	f7fe f962 	bl	8002b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800489c:	2386      	movs	r3, #134	; 0x86
 800489e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a0:	2302      	movs	r3, #2
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048a8:	2303      	movs	r3, #3
 80048aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048ac:	230b      	movs	r3, #11
 80048ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048b4:	4619      	mov	r1, r3
 80048b6:	4813      	ldr	r0, [pc, #76]	; (8004904 <HAL_ETH_MspInit+0x154>)
 80048b8:	f7fe f952 	bl	8002b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80048bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c2:	2302      	movs	r3, #2
 80048c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ca:	2303      	movs	r3, #3
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80048ce:	230b      	movs	r3, #11
 80048d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048d6:	4619      	mov	r1, r3
 80048d8:	480b      	ldr	r0, [pc, #44]	; (8004908 <HAL_ETH_MspInit+0x158>)
 80048da:	f7fe f941 	bl	8002b60 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80048de:	2200      	movs	r2, #0
 80048e0:	2105      	movs	r1, #5
 80048e2:	203d      	movs	r0, #61	; 0x3d
 80048e4:	f7fc fe3e 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80048e8:	203d      	movs	r0, #61	; 0x3d
 80048ea:	f7fc fe57 	bl	800159c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80048ee:	bf00      	nop
 80048f0:	3738      	adds	r7, #56	; 0x38
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40028000 	.word	0x40028000
 80048fc:	40023800 	.word	0x40023800
 8004900:	40020800 	.word	0x40020800
 8004904:	40020000 	.word	0x40020000
 8004908:	40020400 	.word	0x40020400

0800490c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004910:	4802      	ldr	r0, [pc, #8]	; (800491c <ETH_PHY_IO_Init+0x10>)
 8004912:	f7fd fcb5 	bl	8002280 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	2001551c 	.word	0x2001551c

08004920 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return 0;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	4807      	ldr	r0, [pc, #28]	; (8004960 <ETH_PHY_IO_ReadReg+0x30>)
 8004944:	f7fd fb04 	bl	8001f50 <HAL_ETH_ReadPHYRegister>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800494e:	f04f 33ff 	mov.w	r3, #4294967295
 8004952:	e000      	b.n	8004956 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	2001551c 	.word	0x2001551c

08004964 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	4807      	ldr	r0, [pc, #28]	; (8004994 <ETH_PHY_IO_WriteReg+0x30>)
 8004978:	f7fd fb35 	bl	8001fe6 <HAL_ETH_WritePHYRegister>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	e000      	b.n	800498a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	2001551c 	.word	0x2001551c

08004998 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800499c:	f7fc fcfa 	bl	8001394 <HAL_GetTick>
 80049a0:	4603      	mov	r3, r0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b0a0      	sub	sp, #128	; 0x80
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80049b0:	f107 0308 	add.w	r3, r7, #8
 80049b4:	2264      	movs	r2, #100	; 0x64
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f00f fcab 	bl	8014314 <memset>
  int32_t PHYLinkState = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80049c6:	2300      	movs	r3, #0
 80049c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80049ca:	2300      	movs	r3, #0
 80049cc:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80049d2:	483a      	ldr	r0, [pc, #232]	; (8004abc <ethernet_link_thread+0x114>)
 80049d4:	f7fc fc21 	bl	800121a <DP83848_GetLinkState>
 80049d8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80049da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049e0:	089b      	lsrs	r3, r3, #2
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00c      	beq.n	8004a06 <ethernet_link_thread+0x5e>
 80049ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	dc09      	bgt.n	8004a06 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80049f2:	4833      	ldr	r0, [pc, #204]	; (8004ac0 <ethernet_link_thread+0x118>)
 80049f4:	f7fc ff56 	bl	80018a4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80049f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80049fa:	f004 f937 	bl	8008c6c <netif_set_down>
    netif_set_link_down(netif);
 80049fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004a00:	f004 f99e 	bl	8008d40 <netif_set_link_down>
 8004a04:	e055      	b.n	8004ab2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d14e      	bne.n	8004ab2 <ethernet_link_thread+0x10a>
 8004a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	dd4b      	ble.n	8004ab2 <ethernet_link_thread+0x10a>
 8004a1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a1c:	3b02      	subs	r3, #2
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d82a      	bhi.n	8004a78 <ethernet_link_thread+0xd0>
 8004a22:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <ethernet_link_thread+0x80>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a39 	.word	0x08004a39
 8004a2c:	08004a4b 	.word	0x08004a4b
 8004a30:	08004a5b 	.word	0x08004a5b
 8004a34:	08004a6b 	.word	0x08004a6b
  {
    switch (PHYLinkState)
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a3c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a42:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a44:	2301      	movs	r3, #1
 8004a46:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a48:	e017      	b.n	8004a7a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004a4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a52:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a54:	2301      	movs	r3, #1
 8004a56:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a58:	e00f      	b.n	8004a7a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a5e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004a60:	2300      	movs	r3, #0
 8004a62:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a64:	2301      	movs	r3, #1
 8004a66:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a68:	e007      	b.n	8004a7a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004a72:	2301      	movs	r3, #1
 8004a74:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004a76:	e000      	b.n	8004a7a <ethernet_link_thread+0xd2>
    default:
      break;
 8004a78:	bf00      	nop
    }

    if(linkchanged)
 8004a7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d018      	beq.n	8004ab2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004a80:	f107 0308 	add.w	r3, r7, #8
 8004a84:	4619      	mov	r1, r3
 8004a86:	480e      	ldr	r0, [pc, #56]	; (8004ac0 <ethernet_link_thread+0x118>)
 8004a88:	f7fd faf6 	bl	8002078 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a8e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a92:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004a94:	f107 0308 	add.w	r3, r7, #8
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4809      	ldr	r0, [pc, #36]	; (8004ac0 <ethernet_link_thread+0x118>)
 8004a9c:	f7fd fbd6 	bl	800224c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004aa0:	4807      	ldr	r0, [pc, #28]	; (8004ac0 <ethernet_link_thread+0x118>)
 8004aa2:	f7fc fe07 	bl	80016b4 <HAL_ETH_Start>
      netif_set_up(netif);
 8004aa6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004aa8:	f004 f874 	bl	8008b94 <netif_set_up>
      netif_set_link_up(netif);
 8004aac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004aae:	f004 f90f 	bl	8008cd0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004ab2:	2064      	movs	r0, #100	; 0x64
 8004ab4:	f000 f90e 	bl	8004cd4 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8004ab8:	e78b      	b.n	80049d2 <ethernet_link_thread+0x2a>
 8004aba:	bf00      	nop
 8004abc:	2001545c 	.word	0x2001545c
 8004ac0:	2001551c 	.word	0x2001551c

08004ac4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004acc:	4812      	ldr	r0, [pc, #72]	; (8004b18 <HAL_ETH_RxAllocateCallback+0x54>)
 8004ace:	f003 fdcd 	bl	800866c <memp_malloc_pool>
 8004ad2:	60f8      	str	r0, [r7, #12]
  if (p)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d014      	beq.n	8004b04 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f103 0220 	add.w	r2, r3, #32
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <HAL_ETH_RxAllocateCallback+0x58>)
 8004ae8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004af2:	9201      	str	r2, [sp, #4]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2241      	movs	r2, #65	; 0x41
 8004afa:	2100      	movs	r1, #0
 8004afc:	2000      	movs	r0, #0
 8004afe:	f004 fb43 	bl	8009188 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004b02:	e005      	b.n	8004b10 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	080180f0 	.word	0x080180f0
 8004b1c:	08004761 	.word	0x08004761
 8004b20:	20000570 	.word	0x20000570

08004b24 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b089      	sub	sp, #36	; 0x24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3b20      	subs	r3, #32
 8004b42:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	887a      	ldrh	r2, [r7, #2]
 8004b54:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e003      	b.n	8004b6e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	e009      	b.n	8004b90 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	891a      	ldrh	r2, [r3, #8]
 8004b80:	887b      	ldrh	r3, [r7, #2]
 8004b82:	4413      	add	r3, r2
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	61fb      	str	r3, [r7, #28]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f2      	bne.n	8004b7c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004b96:	bf00      	nop
 8004b98:	bf00      	nop
 8004b9a:	3724      	adds	r7, #36	; 0x24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f004 fca5 	bl	80094fc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b085      	sub	sp, #20
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bcc:	2b84      	cmp	r3, #132	; 0x84
 8004bce:	d005      	beq.n	8004bdc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004bd0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3303      	adds	r3, #3
 8004bda:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bf0:	f3ef 8305 	mrs	r3, IPSR
 8004bf4:	607b      	str	r3, [r7, #4]
  return(result);
 8004bf6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c12:	f001 fc41 	bl	8006498 <vTaskStartScheduler>
  
  return osOK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004c20:	f7ff ffe3 	bl	8004bea <inHandlerMode>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004c2a:	f001 fd59 	bl	80066e0 <xTaskGetTickCountFromISR>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	e002      	b.n	8004c38 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004c32:	f001 fd45 	bl	80066c0 <xTaskGetTickCount>
 8004c36:	4603      	mov	r3, r0
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c3e:	b089      	sub	sp, #36	; 0x24
 8004c40:	af04      	add	r7, sp, #16
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d020      	beq.n	8004c90 <osThreadCreate+0x54>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01c      	beq.n	8004c90 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685c      	ldr	r4, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681d      	ldr	r5, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691e      	ldr	r6, [r3, #16]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ffa6 	bl	8004bba <makeFreeRtosPriority>
 8004c6e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c78:	9202      	str	r2, [sp, #8]
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	9100      	str	r1, [sp, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	4632      	mov	r2, r6
 8004c82:	4629      	mov	r1, r5
 8004c84:	4620      	mov	r0, r4
 8004c86:	f001 fa29 	bl	80060dc <xTaskCreateStatic>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	e01c      	b.n	8004cca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685c      	ldr	r4, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c9c:	b29e      	uxth	r6, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff ff88 	bl	8004bba <makeFreeRtosPriority>
 8004caa:	4602      	mov	r2, r0
 8004cac:	f107 030c 	add.w	r3, r7, #12
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	9200      	str	r2, [sp, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	4632      	mov	r2, r6
 8004cb8:	4629      	mov	r1, r5
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f001 fa6b 	bl	8006196 <xTaskCreate>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d001      	beq.n	8004cca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e000      	b.n	8004ccc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004cca:	68fb      	ldr	r3, [r7, #12]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cd4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <osDelay+0x16>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	e000      	b.n	8004cec <osDelay+0x18>
 8004cea:	2301      	movs	r3, #1
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 fb9f 	bl	8006430 <vTaskDelay>
  
  return osOK;
 8004cf2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4619      	mov	r1, r3
 8004d12:	2001      	movs	r0, #1
 8004d14:	f000 fc0d 	bl	8005532 <xQueueCreateMutexStatic>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	e003      	b.n	8004d24 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	f000 fbf0 	bl	8005502 <xQueueCreateMutex>
 8004d22:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <osMutexWait+0x18>
    return osErrorParameter;
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	e03a      	b.n	8004dba <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d103      	bne.n	8004d58 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004d50:	f04f 33ff 	mov.w	r3, #4294967295
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e009      	b.n	8004d6c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d006      	beq.n	8004d6c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <osMutexWait+0x40>
      ticks = 1;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004d6c:	f7ff ff3d 	bl	8004bea <inHandlerMode>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d017      	beq.n	8004da6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004d76:	f107 0308 	add.w	r3, r7, #8
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 f804 	bl	8005d8c <xQueueReceiveFromISR>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d001      	beq.n	8004d8e <osMutexWait+0x62>
      return osErrorOS;
 8004d8a:	23ff      	movs	r3, #255	; 0xff
 8004d8c:	e015      	b.n	8004dba <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d011      	beq.n	8004db8 <osMutexWait+0x8c>
 8004d94:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <osMutexWait+0x98>)
 8004d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	e008      	b.n	8004db8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fee3 	bl	8005b74 <xQueueSemaphoreTake>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d001      	beq.n	8004db8 <osMutexWait+0x8c>
    return osErrorOS;
 8004db4:	23ff      	movs	r3, #255	; 0xff
 8004db6:	e000      	b.n	8004dba <osMutexWait+0x8e>
  }
  
  return osOK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	e000ed04 	.word	0xe000ed04

08004dc8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004dd8:	f7ff ff07 	bl	8004bea <inHandlerMode>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d016      	beq.n	8004e10 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004de2:	f107 0308 	add.w	r3, r7, #8
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fd56 	bl	800589a <xQueueGiveFromISR>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d001      	beq.n	8004df8 <osMutexRelease+0x30>
      return osErrorOS;
 8004df4:	23ff      	movs	r3, #255	; 0xff
 8004df6:	e017      	b.n	8004e28 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d013      	beq.n	8004e26 <osMutexRelease+0x5e>
 8004dfe:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <osMutexRelease+0x68>)
 8004e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	e00a      	b.n	8004e26 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004e10:	2300      	movs	r3, #0
 8004e12:	2200      	movs	r2, #0
 8004e14:	2100      	movs	r1, #0
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fba6 	bl	8005568 <xQueueGenericSend>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d001      	beq.n	8004e26 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004e22:	23ff      	movs	r3, #255	; 0xff
 8004e24:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	e03a      	b.n	8004ec2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e56:	d103      	bne.n	8004e60 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004e58:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e009      	b.n	8004e74 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d006      	beq.n	8004e74 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <osSemaphoreWait+0x40>
      ticks = 1;
 8004e70:	2301      	movs	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004e74:	f7ff feb9 	bl	8004bea <inHandlerMode>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d017      	beq.n	8004eae <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004e7e:	f107 0308 	add.w	r3, r7, #8
 8004e82:	461a      	mov	r2, r3
 8004e84:	2100      	movs	r1, #0
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 ff80 	bl	8005d8c <xQueueReceiveFromISR>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d001      	beq.n	8004e96 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004e92:	23ff      	movs	r3, #255	; 0xff
 8004e94:	e015      	b.n	8004ec2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d011      	beq.n	8004ec0 <osSemaphoreWait+0x8c>
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <osSemaphoreWait+0x98>)
 8004e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	e008      	b.n	8004ec0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004eae:	68f9      	ldr	r1, [r7, #12]
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fe5f 	bl	8005b74 <xQueueSemaphoreTake>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004ebc:	23ff      	movs	r3, #255	; 0xff
 8004ebe:	e000      	b.n	8004ec2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	e000ed04 	.word	0xe000ed04

08004ed0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004ee0:	f7ff fe83 	bl	8004bea <inHandlerMode>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d016      	beq.n	8004f18 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004eea:	f107 0308 	add.w	r3, r7, #8
 8004eee:	4619      	mov	r1, r3
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fcd2 	bl	800589a <xQueueGiveFromISR>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d001      	beq.n	8004f00 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004efc:	23ff      	movs	r3, #255	; 0xff
 8004efe:	e017      	b.n	8004f30 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d013      	beq.n	8004f2e <osSemaphoreRelease+0x5e>
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <osSemaphoreRelease+0x68>)
 8004f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	e00a      	b.n	8004f2e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fb22 	bl	8005568 <xQueueGenericSend>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d001      	beq.n	8004f2e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004f2a:	23ff      	movs	r3, #255	; 0xff
 8004f2c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004f3c:	b590      	push	{r4, r7, lr}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d011      	beq.n	8004f72 <osMessageCreate+0x36>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00d      	beq.n	8004f72 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6859      	ldr	r1, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689a      	ldr	r2, [r3, #8]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2400      	movs	r4, #0
 8004f68:	9400      	str	r4, [sp, #0]
 8004f6a:	f000 f9df 	bl	800532c <xQueueGenericCreateStatic>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	e008      	b.n	8004f84 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	f000 fa4d 	bl	800541c <xQueueGenericCreate>
 8004f82:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd90      	pop	{r4, r7, pc}

08004f8c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <osMessagePut+0x1e>
    ticks = 1;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004faa:	f7ff fe1e 	bl	8004bea <inHandlerMode>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d018      	beq.n	8004fe6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004fb4:	f107 0210 	add.w	r2, r7, #16
 8004fb8:	f107 0108 	add.w	r1, r7, #8
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 fbd0 	bl	8005764 <xQueueGenericSendFromISR>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d001      	beq.n	8004fce <osMessagePut+0x42>
      return osErrorOS;
 8004fca:	23ff      	movs	r3, #255	; 0xff
 8004fcc:	e018      	b.n	8005000 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d014      	beq.n	8004ffe <osMessagePut+0x72>
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <osMessagePut+0x7c>)
 8004fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	e00b      	b.n	8004ffe <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004fe6:	f107 0108 	add.w	r1, r7, #8
 8004fea:	2300      	movs	r3, #0
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 faba 	bl	8005568 <xQueueGenericSend>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d001      	beq.n	8004ffe <osMessagePut+0x72>
      return osErrorOS;
 8004ffa:	23ff      	movs	r3, #255	; 0xff
 8004ffc:	e000      	b.n	8005000 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	e000ed04 	.word	0xe000ed04

0800500c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800500c:	b590      	push	{r4, r7, lr}
 800500e:	b08b      	sub	sp, #44	; 0x2c
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005026:	2380      	movs	r3, #128	; 0x80
 8005028:	617b      	str	r3, [r7, #20]
    return event;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	461c      	mov	r4, r3
 800502e:	f107 0314 	add.w	r3, r7, #20
 8005032:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005036:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800503a:	e054      	b.n	80050e6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d103      	bne.n	8005054 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800504c:	f04f 33ff 	mov.w	r3, #4294967295
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
 8005052:	e009      	b.n	8005068 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d006      	beq.n	8005068 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <osMessageGet+0x5c>
      ticks = 1;
 8005064:	2301      	movs	r3, #1
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005068:	f7ff fdbf 	bl	8004bea <inHandlerMode>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01c      	beq.n	80050ac <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005072:	f107 0220 	add.w	r2, r7, #32
 8005076:	f107 0314 	add.w	r3, r7, #20
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	68b8      	ldr	r0, [r7, #8]
 8005080:	f000 fe84 	bl	8005d8c <xQueueReceiveFromISR>
 8005084:	4603      	mov	r3, r0
 8005086:	2b01      	cmp	r3, #1
 8005088:	d102      	bne.n	8005090 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800508a:	2310      	movs	r3, #16
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e001      	b.n	8005094 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01d      	beq.n	80050d6 <osMessageGet+0xca>
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <osMessageGet+0xe4>)
 800509c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	e014      	b.n	80050d6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80050ac:	f107 0314 	add.w	r3, r7, #20
 80050b0:	3304      	adds	r3, #4
 80050b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b4:	4619      	mov	r1, r3
 80050b6:	68b8      	ldr	r0, [r7, #8]
 80050b8:	f000 fc7c 	bl	80059b4 <xQueueReceive>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d102      	bne.n	80050c8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80050c2:	2310      	movs	r3, #16
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	e006      	b.n	80050d6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <osMessageGet+0xc6>
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <osMessageGet+0xc8>
 80050d2:	2340      	movs	r3, #64	; 0x40
 80050d4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	461c      	mov	r4, r3
 80050da:	f107 0314 	add.w	r3, r7, #20
 80050de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	372c      	adds	r7, #44	; 0x2c
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd90      	pop	{r4, r7, pc}
 80050ee:	bf00      	nop
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f103 0208 	add.w	r2, r3, #8
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f04f 32ff 	mov.w	r2, #4294967295
 800510c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f103 0208 	add.w	r2, r3, #8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f103 0208 	add.w	r2, r3, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]
}
 800518a:	bf00      	nop
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005196:	b480      	push	{r7}
 8005198:	b085      	sub	sp, #20
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d103      	bne.n	80051b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	e00c      	b.n	80051d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3308      	adds	r3, #8
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	e002      	b.n	80051c4 <vListInsert+0x2e>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d2f6      	bcs.n	80051be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	1c5a      	adds	r2, r3, #1
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	601a      	str	r2, [r3, #0]
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6892      	ldr	r2, [r2, #8]
 800521e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6852      	ldr	r2, [r2, #4]
 8005228:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	429a      	cmp	r2, r3
 8005232:	d103      	bne.n	800523c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	1e5a      	subs	r2, r3, #1
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005286:	f002 f88d 	bl	80073a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005296:	fb01 f303 	mul.w	r3, r1, r3
 800529a:	441a      	add	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	3b01      	subs	r3, #1
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052bc:	fb01 f303 	mul.w	r3, r1, r3
 80052c0:	441a      	add	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	22ff      	movs	r2, #255	; 0xff
 80052ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	22ff      	movs	r2, #255	; 0xff
 80052d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d114      	bne.n	8005306 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01a      	beq.n	800531a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3310      	adds	r3, #16
 80052e8:	4618      	mov	r0, r3
 80052ea:	f001 fb49 	bl	8006980 <xTaskRemoveFromEventList>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d012      	beq.n	800531a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <xQueueGenericReset+0xcc>)
 80052f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	e009      	b.n	800531a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3310      	adds	r3, #16
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff fef2 	bl	80050f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3324      	adds	r3, #36	; 0x24
 8005314:	4618      	mov	r0, r3
 8005316:	f7ff feed 	bl	80050f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800531a:	f002 f873 	bl	8007404 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800531e:	2301      	movs	r3, #1
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08e      	sub	sp, #56	; 0x38
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <xQueueGenericCreateStatic+0x52>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <xQueueGenericCreateStatic+0x56>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <xQueueGenericCreateStatic+0x58>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	623b      	str	r3, [r7, #32]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <xQueueGenericCreateStatic+0x7e>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <xQueueGenericCreateStatic+0x82>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <xQueueGenericCreateStatic+0x84>
 80053ae:	2300      	movs	r3, #0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10a      	bne.n	80053ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	61fb      	str	r3, [r7, #28]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053ca:	2348      	movs	r3, #72	; 0x48
 80053cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b48      	cmp	r3, #72	; 0x48
 80053d2:	d00a      	beq.n	80053ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	61bb      	str	r3, [r7, #24]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f83f 	bl	8005490 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005414:	4618      	mov	r0, r3
 8005416:	3730      	adds	r7, #48	; 0x30
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	613b      	str	r3, [r7, #16]
}
 8005442:	bf00      	nop
 8005444:	e7fe      	b.n	8005444 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3348      	adds	r3, #72	; 0x48
 8005454:	4618      	mov	r0, r3
 8005456:	f002 f8c7 	bl	80075e8 <pvPortMalloc>
 800545a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d011      	beq.n	8005486 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	3348      	adds	r3, #72	; 0x48
 800546a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005474:	79fa      	ldrb	r2, [r7, #7]
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	4613      	mov	r3, r2
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f805 	bl	8005490 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005486:	69bb      	ldr	r3, [r7, #24]
	}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d103      	bne.n	80054ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e002      	b.n	80054b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80054be:	2101      	movs	r1, #1
 80054c0:	69b8      	ldr	r0, [r7, #24]
 80054c2:	f7ff fecb 	bl	800525c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054c6:	bf00      	nop
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b082      	sub	sp, #8
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00e      	beq.n	80054fa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80054ee:	2300      	movs	r3, #0
 80054f0:	2200      	movs	r2, #0
 80054f2:	2100      	movs	r1, #0
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f837 	bl	8005568 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005502:	b580      	push	{r7, lr}
 8005504:	b086      	sub	sp, #24
 8005506:	af00      	add	r7, sp, #0
 8005508:	4603      	mov	r3, r0
 800550a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800550c:	2301      	movs	r3, #1
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	2300      	movs	r3, #0
 8005512:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005514:	79fb      	ldrb	r3, [r7, #7]
 8005516:	461a      	mov	r2, r3
 8005518:	6939      	ldr	r1, [r7, #16]
 800551a:	6978      	ldr	r0, [r7, #20]
 800551c:	f7ff ff7e 	bl	800541c <xQueueGenericCreate>
 8005520:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f7ff ffd3 	bl	80054ce <prvInitialiseMutex>

		return xNewQueue;
 8005528:	68fb      	ldr	r3, [r7, #12]
	}
 800552a:	4618      	mov	r0, r3
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005532:	b580      	push	{r7, lr}
 8005534:	b088      	sub	sp, #32
 8005536:	af02      	add	r7, sp, #8
 8005538:	4603      	mov	r3, r0
 800553a:	6039      	str	r1, [r7, #0]
 800553c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800553e:	2301      	movs	r3, #1
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	2300      	movs	r3, #0
 8005544:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2200      	movs	r2, #0
 800554e:	6939      	ldr	r1, [r7, #16]
 8005550:	6978      	ldr	r0, [r7, #20]
 8005552:	f7ff feeb 	bl	800532c <xQueueGenericCreateStatic>
 8005556:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff ffb8 	bl	80054ce <prvInitialiseMutex>

		return xNewQueue;
 800555e:	68fb      	ldr	r3, [r7, #12]
	}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08e      	sub	sp, #56	; 0x38
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005576:	2300      	movs	r3, #0
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <xQueueGenericSend+0x32>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d103      	bne.n	80055a8 <xQueueGenericSend+0x40>
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <xQueueGenericSend+0x44>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <xQueueGenericSend+0x46>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <xQueueGenericSend+0x60>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d103      	bne.n	80055d6 <xQueueGenericSend+0x6e>
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <xQueueGenericSend+0x72>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <xQueueGenericSend+0x74>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	623b      	str	r3, [r7, #32]
}
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055f6:	f001 fb83 	bl	8006d00 <xTaskGetSchedulerState>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <xQueueGenericSend+0x9e>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <xQueueGenericSend+0xa2>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <xQueueGenericSend+0xa4>
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10a      	bne.n	8005626 <xQueueGenericSend+0xbe>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	61fb      	str	r3, [r7, #28]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005626:	f001 febd 	bl	80073a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	429a      	cmp	r2, r3
 8005634:	d302      	bcc.n	800563c <xQueueGenericSend+0xd4>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d129      	bne.n	8005690 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005642:	f000 fc3b 	bl	8005ebc <prvCopyDataToQueue>
 8005646:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d010      	beq.n	8005672 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	3324      	adds	r3, #36	; 0x24
 8005654:	4618      	mov	r0, r3
 8005656:	f001 f993 	bl	8006980 <xTaskRemoveFromEventList>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d013      	beq.n	8005688 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005660:	4b3f      	ldr	r3, [pc, #252]	; (8005760 <xQueueGenericSend+0x1f8>)
 8005662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	e00a      	b.n	8005688 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d007      	beq.n	8005688 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005678:	4b39      	ldr	r3, [pc, #228]	; (8005760 <xQueueGenericSend+0x1f8>)
 800567a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005688:	f001 febc 	bl	8007404 <vPortExitCritical>
				return pdPASS;
 800568c:	2301      	movs	r3, #1
 800568e:	e063      	b.n	8005758 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005696:	f001 feb5 	bl	8007404 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800569a:	2300      	movs	r3, #0
 800569c:	e05c      	b.n	8005758 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d106      	bne.n	80056b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056a4:	f107 0314 	add.w	r3, r7, #20
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 f9cb 	bl	8006a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056ae:	2301      	movs	r3, #1
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056b2:	f001 fea7 	bl	8007404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056b6:	f000 ff59 	bl	800656c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056ba:	f001 fe73 	bl	80073a4 <vPortEnterCritical>
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056c4:	b25b      	sxtb	r3, r3
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d103      	bne.n	80056d4 <xQueueGenericSend+0x16c>
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056da:	b25b      	sxtb	r3, r3
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d103      	bne.n	80056ea <xQueueGenericSend+0x182>
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ea:	f001 fe8b 	bl	8007404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056ee:	1d3a      	adds	r2, r7, #4
 80056f0:	f107 0314 	add.w	r3, r7, #20
 80056f4:	4611      	mov	r1, r2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f001 f9ba 	bl	8006a70 <xTaskCheckForTimeOut>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d124      	bne.n	800574c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005704:	f000 fcd2 	bl	80060ac <prvIsQueueFull>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d018      	beq.n	8005740 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	3310      	adds	r3, #16
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4611      	mov	r1, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f001 f90e 	bl	8006938 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800571c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800571e:	f000 fc5d 	bl	8005fdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005722:	f000 ff31 	bl	8006588 <xTaskResumeAll>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	f47f af7c 	bne.w	8005626 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800572e:	4b0c      	ldr	r3, [pc, #48]	; (8005760 <xQueueGenericSend+0x1f8>)
 8005730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	e772      	b.n	8005626 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005742:	f000 fc4b 	bl	8005fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005746:	f000 ff1f 	bl	8006588 <xTaskResumeAll>
 800574a:	e76c      	b.n	8005626 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800574c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800574e:	f000 fc45 	bl	8005fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005752:	f000 ff19 	bl	8006588 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005756:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005758:	4618      	mov	r0, r3
 800575a:	3738      	adds	r7, #56	; 0x38
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b090      	sub	sp, #64	; 0x40
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005780:	f383 8811 	msr	BASEPRI, r3
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <xQueueGenericSendFromISR+0x3c>
 8005798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <xQueueGenericSendFromISR+0x40>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <xQueueGenericSendFromISR+0x42>
 80057a4:	2300      	movs	r3, #0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80057bc:	bf00      	nop
 80057be:	e7fe      	b.n	80057be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d103      	bne.n	80057ce <xQueueGenericSendFromISR+0x6a>
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <xQueueGenericSendFromISR+0x6e>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <xQueueGenericSendFromISR+0x70>
 80057d2:	2300      	movs	r3, #0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	623b      	str	r3, [r7, #32]
}
 80057ea:	bf00      	nop
 80057ec:	e7fe      	b.n	80057ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057ee:	f001 febb 	bl	8007568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057f2:	f3ef 8211 	mrs	r2, BASEPRI
 80057f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	61fa      	str	r2, [r7, #28]
 8005808:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800580a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <xQueueGenericSendFromISR+0xbc>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d12f      	bne.n	8005880 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005836:	f000 fb41 	bl	8005ebc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800583a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d112      	bne.n	800586a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2b00      	cmp	r3, #0
 800584a:	d016      	beq.n	800587a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	3324      	adds	r3, #36	; 0x24
 8005850:	4618      	mov	r0, r3
 8005852:	f001 f895 	bl	8006980 <xTaskRemoveFromEventList>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00e      	beq.n	800587a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2201      	movs	r2, #1
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	e007      	b.n	800587a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800586a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800586e:	3301      	adds	r3, #1
 8005870:	b2db      	uxtb	r3, r3
 8005872:	b25a      	sxtb	r2, r3
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800587a:	2301      	movs	r3, #1
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800587e:	e001      	b.n	8005884 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005880:	2300      	movs	r3, #0
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005886:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800588e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005892:	4618      	mov	r0, r3
 8005894:	3740      	adds	r7, #64	; 0x40
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b08e      	sub	sp, #56	; 0x38
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	623b      	str	r3, [r7, #32]
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d0:	f383 8811 	msr	BASEPRI, r3
 80058d4:	f3bf 8f6f 	isb	sy
 80058d8:	f3bf 8f4f 	dsb	sy
 80058dc:	61fb      	str	r3, [r7, #28]
}
 80058de:	bf00      	nop
 80058e0:	e7fe      	b.n	80058e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d103      	bne.n	80058f2 <xQueueGiveFromISR+0x58>
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <xQueueGiveFromISR+0x5c>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <xQueueGiveFromISR+0x5e>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <xQueueGiveFromISR+0x78>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	61bb      	str	r3, [r7, #24]
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005912:	f001 fe29 	bl	8007568 <vPortValidateInterruptPriority>
	__asm volatile
 8005916:	f3ef 8211 	mrs	r2, BASEPRI
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	617a      	str	r2, [r7, #20]
 800592c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800592e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800593e:	429a      	cmp	r2, r3
 8005940:	d22b      	bcs.n	800599a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005954:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d112      	bne.n	8005984 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2b00      	cmp	r3, #0
 8005964:	d016      	beq.n	8005994 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	3324      	adds	r3, #36	; 0x24
 800596a:	4618      	mov	r0, r3
 800596c:	f001 f808 	bl	8006980 <xTaskRemoveFromEventList>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00e      	beq.n	8005994 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00b      	beq.n	8005994 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e007      	b.n	8005994 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005988:	3301      	adds	r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	b25a      	sxtb	r2, r3
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005994:	2301      	movs	r3, #1
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
 8005998:	e001      	b.n	800599e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800599a:	2300      	movs	r3, #0
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f383 8811 	msr	BASEPRI, r3
}
 80059a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3738      	adds	r7, #56	; 0x38
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	; 0x30
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <xQueueReceive+0x30>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	623b      	str	r3, [r7, #32]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d103      	bne.n	80059f2 <xQueueReceive+0x3e>
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <xQueueReceive+0x42>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <xQueueReceive+0x44>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <xQueueReceive+0x5e>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	61fb      	str	r3, [r7, #28]
}
 8005a0e:	bf00      	nop
 8005a10:	e7fe      	b.n	8005a10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a12:	f001 f975 	bl	8006d00 <xTaskGetSchedulerState>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d102      	bne.n	8005a22 <xQueueReceive+0x6e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <xQueueReceive+0x72>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <xQueueReceive+0x74>
 8005a26:	2300      	movs	r3, #0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xQueueReceive+0x8e>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	61bb      	str	r3, [r7, #24]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a42:	f001 fcaf 	bl	80073a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d01f      	beq.n	8005a92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a56:	f000 fa9b 	bl	8005f90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	1e5a      	subs	r2, r3, #1
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00f      	beq.n	8005a8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6c:	3310      	adds	r3, #16
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 ff86 	bl	8006980 <xTaskRemoveFromEventList>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a7a:	4b3d      	ldr	r3, [pc, #244]	; (8005b70 <xQueueReceive+0x1bc>)
 8005a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a8a:	f001 fcbb 	bl	8007404 <vPortExitCritical>
				return pdPASS;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e069      	b.n	8005b66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d103      	bne.n	8005aa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a98:	f001 fcb4 	bl	8007404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e062      	b.n	8005b66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aa6:	f107 0310 	add.w	r3, r7, #16
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 ffca 	bl	8006a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ab4:	f001 fca6 	bl	8007404 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ab8:	f000 fd58 	bl	800656c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005abc:	f001 fc72 	bl	80073a4 <vPortEnterCritical>
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ac6:	b25b      	sxtb	r3, r3
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d103      	bne.n	8005ad6 <xQueueReceive+0x122>
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005adc:	b25b      	sxtb	r3, r3
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d103      	bne.n	8005aec <xQueueReceive+0x138>
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aec:	f001 fc8a 	bl	8007404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005af0:	1d3a      	adds	r2, r7, #4
 8005af2:	f107 0310 	add.w	r3, r7, #16
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 ffb9 	bl	8006a70 <xTaskCheckForTimeOut>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d123      	bne.n	8005b4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b06:	f000 fabb 	bl	8006080 <prvIsQueueEmpty>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b12:	3324      	adds	r3, #36	; 0x24
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	4611      	mov	r1, r2
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 ff0d 	bl	8006938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b20:	f000 fa5c 	bl	8005fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b24:	f000 fd30 	bl	8006588 <xTaskResumeAll>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d189      	bne.n	8005a42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <xQueueReceive+0x1bc>)
 8005b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	e780      	b.n	8005a42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b42:	f000 fa4b 	bl	8005fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b46:	f000 fd1f 	bl	8006588 <xTaskResumeAll>
 8005b4a:	e77a      	b.n	8005a42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b4e:	f000 fa45 	bl	8005fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b52:	f000 fd19 	bl	8006588 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b58:	f000 fa92 	bl	8006080 <prvIsQueueEmpty>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f43f af6f 	beq.w	8005a42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3730      	adds	r7, #48	; 0x30
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08e      	sub	sp, #56	; 0x38
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10a      	bne.n	8005ba6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	623b      	str	r3, [r7, #32]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	61fb      	str	r3, [r7, #28]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bc4:	f001 f89c 	bl	8006d00 <xTaskGetSchedulerState>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <xQueueSemaphoreTake+0x60>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <xQueueSemaphoreTake+0x64>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <xQueueSemaphoreTake+0x66>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10a      	bne.n	8005bf4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	61bb      	str	r3, [r7, #24]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bf4:	f001 fbd6 	bl	80073a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d024      	beq.n	8005c4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	1e5a      	subs	r2, r3, #1
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c14:	f001 fa1c 	bl	8007050 <pvTaskIncrementMutexHeldCount>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00f      	beq.n	8005c46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	3310      	adds	r3, #16
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fea8 	bl	8006980 <xTaskRemoveFromEventList>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c36:	4b54      	ldr	r3, [pc, #336]	; (8005d88 <xQueueSemaphoreTake+0x214>)
 8005c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c46:	f001 fbdd 	bl	8007404 <vPortExitCritical>
				return pdPASS;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e097      	b.n	8005d7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d111      	bne.n	8005c78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	617b      	str	r3, [r7, #20]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c70:	f001 fbc8 	bl	8007404 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e082      	b.n	8005d7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d106      	bne.n	8005c8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c7e:	f107 030c 	add.w	r3, r7, #12
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 fede 	bl	8006a44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c8c:	f001 fbba 	bl	8007404 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c90:	f000 fc6c 	bl	800656c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c94:	f001 fb86 	bl	80073a4 <vPortEnterCritical>
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c9e:	b25b      	sxtb	r3, r3
 8005ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca4:	d103      	bne.n	8005cae <xQueueSemaphoreTake+0x13a>
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cb4:	b25b      	sxtb	r3, r3
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d103      	bne.n	8005cc4 <xQueueSemaphoreTake+0x150>
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cc4:	f001 fb9e 	bl	8007404 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cc8:	463a      	mov	r2, r7
 8005cca:	f107 030c 	add.w	r3, r7, #12
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 fecd 	bl	8006a70 <xTaskCheckForTimeOut>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d132      	bne.n	8005d42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cde:	f000 f9cf 	bl	8006080 <prvIsQueueEmpty>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d026      	beq.n	8005d36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d109      	bne.n	8005d04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005cf0:	f001 fb58 	bl	80073a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f001 f81f 	bl	8006d3c <xTaskPriorityInherit>
 8005cfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005d00:	f001 fb80 	bl	8007404 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d06:	3324      	adds	r3, #36	; 0x24
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fe13 	bl	8006938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d14:	f000 f962 	bl	8005fdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d18:	f000 fc36 	bl	8006588 <xTaskResumeAll>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f47f af68 	bne.w	8005bf4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005d24:	4b18      	ldr	r3, [pc, #96]	; (8005d88 <xQueueSemaphoreTake+0x214>)
 8005d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	e75e      	b.n	8005bf4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d38:	f000 f950 	bl	8005fdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d3c:	f000 fc24 	bl	8006588 <xTaskResumeAll>
 8005d40:	e758      	b.n	8005bf4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005d42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d44:	f000 f94a 	bl	8005fdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d48:	f000 fc1e 	bl	8006588 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d4e:	f000 f997 	bl	8006080 <prvIsQueueEmpty>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f43f af4d 	beq.w	8005bf4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00d      	beq.n	8005d7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005d60:	f001 fb20 	bl	80073a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d66:	f000 f891 	bl	8005e8c <prvGetDisinheritPriorityAfterTimeout>
 8005d6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f8de 	bl	8006f34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d78:	f001 fb44 	bl	8007404 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3738      	adds	r7, #56	; 0x38
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	e000ed04 	.word	0xe000ed04

08005d8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08e      	sub	sp, #56	; 0x38
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10a      	bne.n	8005db8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	623b      	str	r3, [r7, #32]
}
 8005db4:	bf00      	nop
 8005db6:	e7fe      	b.n	8005db6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d103      	bne.n	8005dc6 <xQueueReceiveFromISR+0x3a>
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <xQueueReceiveFromISR+0x3e>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <xQueueReceiveFromISR+0x40>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	61fb      	str	r3, [r7, #28]
}
 8005de2:	bf00      	nop
 8005de4:	e7fe      	b.n	8005de4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005de6:	f001 fbbf 	bl	8007568 <vPortValidateInterruptPriority>
	__asm volatile
 8005dea:	f3ef 8211 	mrs	r2, BASEPRI
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	61ba      	str	r2, [r7, #24]
 8005e00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005e02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d02f      	beq.n	8005e72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e20:	f000 f8b6 	bl	8005f90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	1e5a      	subs	r2, r3, #1
 8005e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005e2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e34:	d112      	bne.n	8005e5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d016      	beq.n	8005e6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e40:	3310      	adds	r3, #16
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fd9c 	bl	8006980 <xTaskRemoveFromEventList>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00e      	beq.n	8005e6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e007      	b.n	8005e6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e60:	3301      	adds	r3, #1
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	b25a      	sxtb	r2, r3
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e70:	e001      	b.n	8005e76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	637b      	str	r3, [r7, #52]	; 0x34
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f383 8811 	msr	BASEPRI, r3
}
 8005e80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3738      	adds	r7, #56	; 0x38
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d006      	beq.n	8005eaa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1c3 0307 	rsb	r3, r3, #7
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	e001      	b.n	8005eae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005eae:	68fb      	ldr	r3, [r7, #12]
	}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d10d      	bne.n	8005ef6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d14d      	bne.n	8005f7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 ff9e 	bl	8006e28 <xTaskPriorityDisinherit>
 8005eec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	609a      	str	r2, [r3, #8]
 8005ef4:	e043      	b.n	8005f7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d119      	bne.n	8005f30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6858      	ldr	r0, [r3, #4]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	461a      	mov	r2, r3
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	f00e f9f6 	bl	80142f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	441a      	add	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d32b      	bcc.n	8005f7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	e026      	b.n	8005f7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	68d8      	ldr	r0, [r3, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	461a      	mov	r2, r3
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	f00e f9dc 	bl	80142f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	425b      	negs	r3, r3
 8005f4a:	441a      	add	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d207      	bcs.n	8005f6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	425b      	negs	r3, r3
 8005f66:	441a      	add	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d105      	bne.n	8005f7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f86:	697b      	ldr	r3, [r7, #20]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d018      	beq.n	8005fd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	441a      	add	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d303      	bcc.n	8005fc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68d9      	ldr	r1, [r3, #12]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6838      	ldr	r0, [r7, #0]
 8005fd0:	f00e f992 	bl	80142f8 <memcpy>
	}
}
 8005fd4:	bf00      	nop
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fe4:	f001 f9de 	bl	80073a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ff0:	e011      	b.n	8006016 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d012      	beq.n	8006020 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3324      	adds	r3, #36	; 0x24
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fcbe 	bl	8006980 <xTaskRemoveFromEventList>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800600a:	f000 fd93 	bl	8006b34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	3b01      	subs	r3, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800601a:	2b00      	cmp	r3, #0
 800601c:	dce9      	bgt.n	8005ff2 <prvUnlockQueue+0x16>
 800601e:	e000      	b.n	8006022 <prvUnlockQueue+0x46>
					break;
 8006020:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	22ff      	movs	r2, #255	; 0xff
 8006026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800602a:	f001 f9eb 	bl	8007404 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800602e:	f001 f9b9 	bl	80073a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006038:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800603a:	e011      	b.n	8006060 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d012      	beq.n	800606a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3310      	adds	r3, #16
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fc99 	bl	8006980 <xTaskRemoveFromEventList>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006054:	f000 fd6e 	bl	8006b34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	3b01      	subs	r3, #1
 800605c:	b2db      	uxtb	r3, r3
 800605e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006060:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006064:	2b00      	cmp	r3, #0
 8006066:	dce9      	bgt.n	800603c <prvUnlockQueue+0x60>
 8006068:	e000      	b.n	800606c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800606a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	22ff      	movs	r2, #255	; 0xff
 8006070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006074:	f001 f9c6 	bl	8007404 <vPortExitCritical>
}
 8006078:	bf00      	nop
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006088:	f001 f98c 	bl	80073a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	2b00      	cmp	r3, #0
 8006092:	d102      	bne.n	800609a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006094:	2301      	movs	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	e001      	b.n	800609e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800609e:	f001 f9b1 	bl	8007404 <vPortExitCritical>

	return xReturn;
 80060a2:	68fb      	ldr	r3, [r7, #12]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060b4:	f001 f976 	bl	80073a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d102      	bne.n	80060ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060c4:	2301      	movs	r3, #1
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e001      	b.n	80060ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060ce:	f001 f999 	bl	8007404 <vPortExitCritical>

	return xReturn;
 80060d2:	68fb      	ldr	r3, [r7, #12]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08e      	sub	sp, #56	; 0x38
 80060e0:	af04      	add	r7, sp, #16
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10a      	bne.n	8006106 <xTaskCreateStatic+0x2a>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	623b      	str	r3, [r7, #32]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xTaskCreateStatic+0x46>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	61fb      	str	r3, [r7, #28]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006122:	23b4      	movs	r3, #180	; 0xb4
 8006124:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2bb4      	cmp	r3, #180	; 0xb4
 800612a:	d00a      	beq.n	8006142 <xTaskCreateStatic+0x66>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	61bb      	str	r3, [r7, #24]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006142:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01e      	beq.n	8006188 <xTaskCreateStatic+0xac>
 800614a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01b      	beq.n	8006188 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006158:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	2202      	movs	r2, #2
 800615e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006162:	2300      	movs	r3, #0
 8006164:	9303      	str	r3, [sp, #12]
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	9302      	str	r3, [sp, #8]
 800616a:	f107 0314 	add.w	r3, r7, #20
 800616e:	9301      	str	r3, [sp, #4]
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f850 	bl	8006220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006182:	f000 f8eb 	bl	800635c <prvAddNewTaskToReadyList>
 8006186:	e001      	b.n	800618c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800618c:	697b      	ldr	r3, [r7, #20]
	}
 800618e:	4618      	mov	r0, r3
 8006190:	3728      	adds	r7, #40	; 0x28
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006196:	b580      	push	{r7, lr}
 8006198:	b08c      	sub	sp, #48	; 0x30
 800619a:	af04      	add	r7, sp, #16
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	603b      	str	r3, [r7, #0]
 80061a2:	4613      	mov	r3, r2
 80061a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 fa1c 	bl	80075e8 <pvPortMalloc>
 80061b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00e      	beq.n	80061d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061b8:	20b4      	movs	r0, #180	; 0xb4
 80061ba:	f001 fa15 	bl	80075e8 <pvPortMalloc>
 80061be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
 80061cc:	e005      	b.n	80061da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80061ce:	6978      	ldr	r0, [r7, #20]
 80061d0:	f001 fad6 	bl	8007780 <vPortFree>
 80061d4:	e001      	b.n	80061da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80061d6:	2300      	movs	r3, #0
 80061d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d017      	beq.n	8006210 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80061e8:	88fa      	ldrh	r2, [r7, #6]
 80061ea:	2300      	movs	r3, #0
 80061ec:	9303      	str	r3, [sp, #12]
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	9302      	str	r3, [sp, #8]
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f80e 	bl	8006220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006204:	69f8      	ldr	r0, [r7, #28]
 8006206:	f000 f8a9 	bl	800635c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800620a:	2301      	movs	r3, #1
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	e002      	b.n	8006216 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006210:	f04f 33ff 	mov.w	r3, #4294967295
 8006214:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006216:	69bb      	ldr	r3, [r7, #24]
	}
 8006218:	4618      	mov	r0, r3
 800621a:	3720      	adds	r7, #32
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006238:	3b01      	subs	r3, #1
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f023 0307 	bic.w	r3, r3, #7
 8006246:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	617b      	str	r3, [r7, #20]
}
 8006264:	bf00      	nop
 8006266:	e7fe      	b.n	8006266 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01f      	beq.n	80062ae <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	e012      	b.n	800629a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	4413      	add	r3, r2
 800627a:	7819      	ldrb	r1, [r3, #0]
 800627c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	4413      	add	r3, r2
 8006282:	3334      	adds	r3, #52	; 0x34
 8006284:	460a      	mov	r2, r1
 8006286:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d006      	beq.n	80062a2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	3301      	adds	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	2b0f      	cmp	r3, #15
 800629e:	d9e9      	bls.n	8006274 <prvInitialiseNewTask+0x54>
 80062a0:	e000      	b.n	80062a4 <prvInitialiseNewTask+0x84>
			{
				break;
 80062a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062ac:	e003      	b.n	80062b6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	2b06      	cmp	r3, #6
 80062ba:	d901      	bls.n	80062c0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062bc:	2306      	movs	r3, #6
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	2200      	movs	r2, #0
 80062d0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	3304      	adds	r3, #4
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe ff2c 	bl	8005134 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	3318      	adds	r3, #24
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe ff27 	bl	8005134 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	f1c3 0207 	rsb	r2, r3, #7
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	2200      	movs	r2, #0
 8006308:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	334c      	adds	r3, #76	; 0x4c
 8006310:	2260      	movs	r2, #96	; 0x60
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f00d fffd 	bl	8014314 <memset>
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	4a0c      	ldr	r2, [pc, #48]	; (8006350 <prvInitialiseNewTask+0x130>)
 800631e:	651a      	str	r2, [r3, #80]	; 0x50
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	4a0c      	ldr	r2, [pc, #48]	; (8006354 <prvInitialiseNewTask+0x134>)
 8006324:	655a      	str	r2, [r3, #84]	; 0x54
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	4a0b      	ldr	r2, [pc, #44]	; (8006358 <prvInitialiseNewTask+0x138>)
 800632a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	69b8      	ldr	r0, [r7, #24]
 8006332:	f000 ff07 	bl	8007144 <pxPortInitialiseStack>
 8006336:	4602      	mov	r2, r0
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006346:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006348:	bf00      	nop
 800634a:	3720      	adds	r7, #32
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	08018298 	.word	0x08018298
 8006354:	080182b8 	.word	0x080182b8
 8006358:	08018278 	.word	0x08018278

0800635c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006364:	f001 f81e 	bl	80073a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006368:	4b2a      	ldr	r3, [pc, #168]	; (8006414 <prvAddNewTaskToReadyList+0xb8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3301      	adds	r3, #1
 800636e:	4a29      	ldr	r2, [pc, #164]	; (8006414 <prvAddNewTaskToReadyList+0xb8>)
 8006370:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006372:	4b29      	ldr	r3, [pc, #164]	; (8006418 <prvAddNewTaskToReadyList+0xbc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d109      	bne.n	800638e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800637a:	4a27      	ldr	r2, [pc, #156]	; (8006418 <prvAddNewTaskToReadyList+0xbc>)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006380:	4b24      	ldr	r3, [pc, #144]	; (8006414 <prvAddNewTaskToReadyList+0xb8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d110      	bne.n	80063aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006388:	f000 fbf8 	bl	8006b7c <prvInitialiseTaskLists>
 800638c:	e00d      	b.n	80063aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800638e:	4b23      	ldr	r3, [pc, #140]	; (800641c <prvAddNewTaskToReadyList+0xc0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006396:	4b20      	ldr	r3, [pc, #128]	; (8006418 <prvAddNewTaskToReadyList+0xbc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d802      	bhi.n	80063aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063a4:	4a1c      	ldr	r2, [pc, #112]	; (8006418 <prvAddNewTaskToReadyList+0xbc>)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063aa:	4b1d      	ldr	r3, [pc, #116]	; (8006420 <prvAddNewTaskToReadyList+0xc4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3301      	adds	r3, #1
 80063b0:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <prvAddNewTaskToReadyList+0xc4>)
 80063b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	2201      	movs	r2, #1
 80063ba:	409a      	lsls	r2, r3
 80063bc:	4b19      	ldr	r3, [pc, #100]	; (8006424 <prvAddNewTaskToReadyList+0xc8>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	4a18      	ldr	r2, [pc, #96]	; (8006424 <prvAddNewTaskToReadyList+0xc8>)
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ca:	4613      	mov	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4413      	add	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4a15      	ldr	r2, [pc, #84]	; (8006428 <prvAddNewTaskToReadyList+0xcc>)
 80063d4:	441a      	add	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3304      	adds	r3, #4
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f7fe feb6 	bl	800514e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80063e2:	f001 f80f 	bl	8007404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80063e6:	4b0d      	ldr	r3, [pc, #52]	; (800641c <prvAddNewTaskToReadyList+0xc0>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00e      	beq.n	800640c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80063ee:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <prvAddNewTaskToReadyList+0xbc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d207      	bcs.n	800640c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063fc:	4b0b      	ldr	r3, [pc, #44]	; (800642c <prvAddNewTaskToReadyList+0xd0>)
 80063fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800640c:	bf00      	nop
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	2000067c 	.word	0x2000067c
 8006418:	2000057c 	.word	0x2000057c
 800641c:	20000688 	.word	0x20000688
 8006420:	20000698 	.word	0x20000698
 8006424:	20000684 	.word	0x20000684
 8006428:	20000580 	.word	0x20000580
 800642c:	e000ed04 	.word	0xe000ed04

08006430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d017      	beq.n	8006472 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006442:	4b13      	ldr	r3, [pc, #76]	; (8006490 <vTaskDelay+0x60>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00a      	beq.n	8006460 <vTaskDelay+0x30>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	60bb      	str	r3, [r7, #8]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006460:	f000 f884 	bl	800656c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006464:	2100      	movs	r1, #0
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fe06 	bl	8007078 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800646c:	f000 f88c 	bl	8006588 <xTaskResumeAll>
 8006470:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d107      	bne.n	8006488 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <vTaskDelay+0x64>)
 800647a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006488:	bf00      	nop
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	200006a4 	.word	0x200006a4
 8006494:	e000ed04 	.word	0xe000ed04

08006498 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064a6:	463a      	mov	r2, r7
 80064a8:	1d39      	adds	r1, r7, #4
 80064aa:	f107 0308 	add.w	r3, r7, #8
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fa f85a 	bl	8000568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064b4:	6839      	ldr	r1, [r7, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	9202      	str	r2, [sp, #8]
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	2300      	movs	r3, #0
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	2300      	movs	r3, #0
 80064c4:	460a      	mov	r2, r1
 80064c6:	4921      	ldr	r1, [pc, #132]	; (800654c <vTaskStartScheduler+0xb4>)
 80064c8:	4821      	ldr	r0, [pc, #132]	; (8006550 <vTaskStartScheduler+0xb8>)
 80064ca:	f7ff fe07 	bl	80060dc <xTaskCreateStatic>
 80064ce:	4603      	mov	r3, r0
 80064d0:	4a20      	ldr	r2, [pc, #128]	; (8006554 <vTaskStartScheduler+0xbc>)
 80064d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064d4:	4b1f      	ldr	r3, [pc, #124]	; (8006554 <vTaskStartScheduler+0xbc>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064dc:	2301      	movs	r3, #1
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e001      	b.n	80064e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d11b      	bne.n	8006524 <vTaskStartScheduler+0x8c>
	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	f383 8811 	msr	BASEPRI, r3
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	f3bf 8f4f 	dsb	sy
 80064fc:	613b      	str	r3, [r7, #16]
}
 80064fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006500:	4b15      	ldr	r3, [pc, #84]	; (8006558 <vTaskStartScheduler+0xc0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	334c      	adds	r3, #76	; 0x4c
 8006506:	4a15      	ldr	r2, [pc, #84]	; (800655c <vTaskStartScheduler+0xc4>)
 8006508:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <vTaskStartScheduler+0xc8>)
 800650c:	f04f 32ff 	mov.w	r2, #4294967295
 8006510:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <vTaskStartScheduler+0xcc>)
 8006514:	2201      	movs	r2, #1
 8006516:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006518:	4b13      	ldr	r3, [pc, #76]	; (8006568 <vTaskStartScheduler+0xd0>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800651e:	f000 fe9f 	bl	8007260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006522:	e00e      	b.n	8006542 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d10a      	bne.n	8006542 <vTaskStartScheduler+0xaa>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60fb      	str	r3, [r7, #12]
}
 800653e:	bf00      	nop
 8006540:	e7fe      	b.n	8006540 <vTaskStartScheduler+0xa8>
}
 8006542:	bf00      	nop
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	080152a8 	.word	0x080152a8
 8006550:	08006b4d 	.word	0x08006b4d
 8006554:	200006a0 	.word	0x200006a0
 8006558:	2000057c 	.word	0x2000057c
 800655c:	20000034 	.word	0x20000034
 8006560:	2000069c 	.word	0x2000069c
 8006564:	20000688 	.word	0x20000688
 8006568:	20000680 	.word	0x20000680

0800656c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006570:	4b04      	ldr	r3, [pc, #16]	; (8006584 <vTaskSuspendAll+0x18>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a03      	ldr	r2, [pc, #12]	; (8006584 <vTaskSuspendAll+0x18>)
 8006578:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	200006a4 	.word	0x200006a4

08006588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006592:	2300      	movs	r3, #0
 8006594:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006596:	4b41      	ldr	r3, [pc, #260]	; (800669c <xTaskResumeAll+0x114>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	603b      	str	r3, [r7, #0]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065b4:	f000 fef6 	bl	80073a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065b8:	4b38      	ldr	r3, [pc, #224]	; (800669c <xTaskResumeAll+0x114>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3b01      	subs	r3, #1
 80065be:	4a37      	ldr	r2, [pc, #220]	; (800669c <xTaskResumeAll+0x114>)
 80065c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c2:	4b36      	ldr	r3, [pc, #216]	; (800669c <xTaskResumeAll+0x114>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d161      	bne.n	800668e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065ca:	4b35      	ldr	r3, [pc, #212]	; (80066a0 <xTaskResumeAll+0x118>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d05d      	beq.n	800668e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065d2:	e02e      	b.n	8006632 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d4:	4b33      	ldr	r3, [pc, #204]	; (80066a4 <xTaskResumeAll+0x11c>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3318      	adds	r3, #24
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe fe11 	bl	8005208 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3304      	adds	r3, #4
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fe0c 	bl	8005208 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	2201      	movs	r2, #1
 80065f6:	409a      	lsls	r2, r3
 80065f8:	4b2b      	ldr	r3, [pc, #172]	; (80066a8 <xTaskResumeAll+0x120>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	4a2a      	ldr	r2, [pc, #168]	; (80066a8 <xTaskResumeAll+0x120>)
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4a27      	ldr	r2, [pc, #156]	; (80066ac <xTaskResumeAll+0x124>)
 8006610:	441a      	add	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7fe fd98 	bl	800514e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006622:	4b23      	ldr	r3, [pc, #140]	; (80066b0 <xTaskResumeAll+0x128>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800662c:	4b21      	ldr	r3, [pc, #132]	; (80066b4 <xTaskResumeAll+0x12c>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <xTaskResumeAll+0x11c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1cc      	bne.n	80065d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006640:	f000 fb3e 	bl	8006cc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006644:	4b1c      	ldr	r3, [pc, #112]	; (80066b8 <xTaskResumeAll+0x130>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d010      	beq.n	8006672 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006650:	f000 f858 	bl	8006704 <xTaskIncrementTick>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800665a:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <xTaskResumeAll+0x12c>)
 800665c:	2201      	movs	r2, #1
 800665e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3b01      	subs	r3, #1
 8006664:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1f1      	bne.n	8006650 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800666c:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <xTaskResumeAll+0x130>)
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006672:	4b10      	ldr	r3, [pc, #64]	; (80066b4 <xTaskResumeAll+0x12c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800667a:	2301      	movs	r3, #1
 800667c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800667e:	4b0f      	ldr	r3, [pc, #60]	; (80066bc <xTaskResumeAll+0x134>)
 8006680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800668e:	f000 feb9 	bl	8007404 <vPortExitCritical>

	return xAlreadyYielded;
 8006692:	68bb      	ldr	r3, [r7, #8]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	200006a4 	.word	0x200006a4
 80066a0:	2000067c 	.word	0x2000067c
 80066a4:	2000063c 	.word	0x2000063c
 80066a8:	20000684 	.word	0x20000684
 80066ac:	20000580 	.word	0x20000580
 80066b0:	2000057c 	.word	0x2000057c
 80066b4:	20000690 	.word	0x20000690
 80066b8:	2000068c 	.word	0x2000068c
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066c6:	4b05      	ldr	r3, [pc, #20]	; (80066dc <xTaskGetTickCount+0x1c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066cc:	687b      	ldr	r3, [r7, #4]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000680 	.word	0x20000680

080066e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066e6:	f000 ff3f 	bl	8007568 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80066ea:	2300      	movs	r3, #0
 80066ec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80066ee:	4b04      	ldr	r3, [pc, #16]	; (8006700 <xTaskGetTickCountFromISR+0x20>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066f4:	683b      	ldr	r3, [r7, #0]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000680 	.word	0x20000680

08006704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800670e:	4b4e      	ldr	r3, [pc, #312]	; (8006848 <xTaskIncrementTick+0x144>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 808e 	bne.w	8006834 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006718:	4b4c      	ldr	r3, [pc, #304]	; (800684c <xTaskIncrementTick+0x148>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3301      	adds	r3, #1
 800671e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006720:	4a4a      	ldr	r2, [pc, #296]	; (800684c <xTaskIncrementTick+0x148>)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d120      	bne.n	800676e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800672c:	4b48      	ldr	r3, [pc, #288]	; (8006850 <xTaskIncrementTick+0x14c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <xTaskIncrementTick+0x48>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	603b      	str	r3, [r7, #0]
}
 8006748:	bf00      	nop
 800674a:	e7fe      	b.n	800674a <xTaskIncrementTick+0x46>
 800674c:	4b40      	ldr	r3, [pc, #256]	; (8006850 <xTaskIncrementTick+0x14c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	4b40      	ldr	r3, [pc, #256]	; (8006854 <xTaskIncrementTick+0x150>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a3e      	ldr	r2, [pc, #248]	; (8006850 <xTaskIncrementTick+0x14c>)
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	4a3e      	ldr	r2, [pc, #248]	; (8006854 <xTaskIncrementTick+0x150>)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	4b3d      	ldr	r3, [pc, #244]	; (8006858 <xTaskIncrementTick+0x154>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3301      	adds	r3, #1
 8006766:	4a3c      	ldr	r2, [pc, #240]	; (8006858 <xTaskIncrementTick+0x154>)
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	f000 faa9 	bl	8006cc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800676e:	4b3b      	ldr	r3, [pc, #236]	; (800685c <xTaskIncrementTick+0x158>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	429a      	cmp	r2, r3
 8006776:	d348      	bcc.n	800680a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006778:	4b35      	ldr	r3, [pc, #212]	; (8006850 <xTaskIncrementTick+0x14c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d104      	bne.n	800678c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006782:	4b36      	ldr	r3, [pc, #216]	; (800685c <xTaskIncrementTick+0x158>)
 8006784:	f04f 32ff 	mov.w	r2, #4294967295
 8006788:	601a      	str	r2, [r3, #0]
					break;
 800678a:	e03e      	b.n	800680a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678c:	4b30      	ldr	r3, [pc, #192]	; (8006850 <xTaskIncrementTick+0x14c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d203      	bcs.n	80067ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067a4:	4a2d      	ldr	r2, [pc, #180]	; (800685c <xTaskIncrementTick+0x158>)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067aa:	e02e      	b.n	800680a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	3304      	adds	r3, #4
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fe fd29 	bl	8005208 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	3318      	adds	r3, #24
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fd20 	bl	8005208 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	2201      	movs	r2, #1
 80067ce:	409a      	lsls	r2, r3
 80067d0:	4b23      	ldr	r3, [pc, #140]	; (8006860 <xTaskIncrementTick+0x15c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	4a22      	ldr	r2, [pc, #136]	; (8006860 <xTaskIncrementTick+0x15c>)
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	4a1f      	ldr	r2, [pc, #124]	; (8006864 <xTaskIncrementTick+0x160>)
 80067e8:	441a      	add	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f7fe fcac 	bl	800514e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fa:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <xTaskIncrementTick+0x164>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	429a      	cmp	r2, r3
 8006802:	d3b9      	bcc.n	8006778 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006804:	2301      	movs	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006808:	e7b6      	b.n	8006778 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800680a:	4b17      	ldr	r3, [pc, #92]	; (8006868 <xTaskIncrementTick+0x164>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006810:	4914      	ldr	r1, [pc, #80]	; (8006864 <xTaskIncrementTick+0x160>)
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d901      	bls.n	8006826 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006822:	2301      	movs	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006826:	4b11      	ldr	r3, [pc, #68]	; (800686c <xTaskIncrementTick+0x168>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d007      	beq.n	800683e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800682e:	2301      	movs	r3, #1
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	e004      	b.n	800683e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006834:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <xTaskIncrementTick+0x16c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3301      	adds	r3, #1
 800683a:	4a0d      	ldr	r2, [pc, #52]	; (8006870 <xTaskIncrementTick+0x16c>)
 800683c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800683e:	697b      	ldr	r3, [r7, #20]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	200006a4 	.word	0x200006a4
 800684c:	20000680 	.word	0x20000680
 8006850:	20000634 	.word	0x20000634
 8006854:	20000638 	.word	0x20000638
 8006858:	20000694 	.word	0x20000694
 800685c:	2000069c 	.word	0x2000069c
 8006860:	20000684 	.word	0x20000684
 8006864:	20000580 	.word	0x20000580
 8006868:	2000057c 	.word	0x2000057c
 800686c:	20000690 	.word	0x20000690
 8006870:	2000068c 	.word	0x2000068c

08006874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800687a:	4b29      	ldr	r3, [pc, #164]	; (8006920 <vTaskSwitchContext+0xac>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006882:	4b28      	ldr	r3, [pc, #160]	; (8006924 <vTaskSwitchContext+0xb0>)
 8006884:	2201      	movs	r2, #1
 8006886:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006888:	e044      	b.n	8006914 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800688a:	4b26      	ldr	r3, [pc, #152]	; (8006924 <vTaskSwitchContext+0xb0>)
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006890:	4b25      	ldr	r3, [pc, #148]	; (8006928 <vTaskSwitchContext+0xb4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	fab3 f383 	clz	r3, r3
 800689c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800689e:	7afb      	ldrb	r3, [r7, #11]
 80068a0:	f1c3 031f 	rsb	r3, r3, #31
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	4921      	ldr	r1, [pc, #132]	; (800692c <vTaskSwitchContext+0xb8>)
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	607b      	str	r3, [r7, #4]
}
 80068cc:	bf00      	nop
 80068ce:	e7fe      	b.n	80068ce <vTaskSwitchContext+0x5a>
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4a14      	ldr	r2, [pc, #80]	; (800692c <vTaskSwitchContext+0xb8>)
 80068dc:	4413      	add	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	605a      	str	r2, [r3, #4]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	3308      	adds	r3, #8
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d104      	bne.n	8006900 <vTaskSwitchContext+0x8c>
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	605a      	str	r2, [r3, #4]
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	4a0a      	ldr	r2, [pc, #40]	; (8006930 <vTaskSwitchContext+0xbc>)
 8006908:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800690a:	4b09      	ldr	r3, [pc, #36]	; (8006930 <vTaskSwitchContext+0xbc>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	334c      	adds	r3, #76	; 0x4c
 8006910:	4a08      	ldr	r2, [pc, #32]	; (8006934 <vTaskSwitchContext+0xc0>)
 8006912:	6013      	str	r3, [r2, #0]
}
 8006914:	bf00      	nop
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	200006a4 	.word	0x200006a4
 8006924:	20000690 	.word	0x20000690
 8006928:	20000684 	.word	0x20000684
 800692c:	20000580 	.word	0x20000580
 8006930:	2000057c 	.word	0x2000057c
 8006934:	20000034 	.word	0x20000034

08006938 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	60fb      	str	r3, [r7, #12]
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800695e:	4b07      	ldr	r3, [pc, #28]	; (800697c <vTaskPlaceOnEventList+0x44>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3318      	adds	r3, #24
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fe fc15 	bl	8005196 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800696c:	2101      	movs	r1, #1
 800696e:	6838      	ldr	r0, [r7, #0]
 8006970:	f000 fb82 	bl	8007078 <prvAddCurrentTaskToDelayedList>
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	2000057c 	.word	0x2000057c

08006980 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	60fb      	str	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	3318      	adds	r3, #24
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe fc29 	bl	8005208 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b6:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <xTaskRemoveFromEventList+0xac>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d11c      	bne.n	80069f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fe fc20 	bl	8005208 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069cc:	2201      	movs	r2, #1
 80069ce:	409a      	lsls	r2, r3
 80069d0:	4b17      	ldr	r3, [pc, #92]	; (8006a30 <xTaskRemoveFromEventList+0xb0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <xTaskRemoveFromEventList+0xb0>)
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4a13      	ldr	r2, [pc, #76]	; (8006a34 <xTaskRemoveFromEventList+0xb4>)
 80069e8:	441a      	add	r2, r3
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	3304      	adds	r3, #4
 80069ee:	4619      	mov	r1, r3
 80069f0:	4610      	mov	r0, r2
 80069f2:	f7fe fbac 	bl	800514e <vListInsertEnd>
 80069f6:	e005      	b.n	8006a04 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	3318      	adds	r3, #24
 80069fc:	4619      	mov	r1, r3
 80069fe:	480e      	ldr	r0, [pc, #56]	; (8006a38 <xTaskRemoveFromEventList+0xb8>)
 8006a00:	f7fe fba5 	bl	800514e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <xTaskRemoveFromEventList+0xbc>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d905      	bls.n	8006a1e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a12:	2301      	movs	r3, #1
 8006a14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a16:	4b0a      	ldr	r3, [pc, #40]	; (8006a40 <xTaskRemoveFromEventList+0xc0>)
 8006a18:	2201      	movs	r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	e001      	b.n	8006a22 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a22:	697b      	ldr	r3, [r7, #20]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	200006a4 	.word	0x200006a4
 8006a30:	20000684 	.word	0x20000684
 8006a34:	20000580 	.word	0x20000580
 8006a38:	2000063c 	.word	0x2000063c
 8006a3c:	2000057c 	.word	0x2000057c
 8006a40:	20000690 	.word	0x20000690

08006a44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <vTaskInternalSetTimeOutState+0x24>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <vTaskInternalSetTimeOutState+0x28>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	605a      	str	r2, [r3, #4]
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	20000694 	.word	0x20000694
 8006a6c:	20000680 	.word	0x20000680

08006a70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	613b      	str	r3, [r7, #16]
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	60fb      	str	r3, [r7, #12]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006ab2:	f000 fc77 	bl	80073a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ab6:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <xTaskCheckForTimeOut+0xbc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ace:	d102      	bne.n	8006ad6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	e023      	b.n	8006b1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b15      	ldr	r3, [pc, #84]	; (8006b30 <xTaskCheckForTimeOut+0xc0>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d007      	beq.n	8006af2 <xTaskCheckForTimeOut+0x82>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d302      	bcc.n	8006af2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006aec:	2301      	movs	r3, #1
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	e015      	b.n	8006b1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d20b      	bcs.n	8006b14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	1ad2      	subs	r2, r2, r3
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ff9b 	bl	8006a44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	e004      	b.n	8006b1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b1e:	f000 fc71 	bl	8007404 <vPortExitCritical>

	return xReturn;
 8006b22:	69fb      	ldr	r3, [r7, #28]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3720      	adds	r7, #32
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20000680 	.word	0x20000680
 8006b30:	20000694 	.word	0x20000694

08006b34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b38:	4b03      	ldr	r3, [pc, #12]	; (8006b48 <vTaskMissedYield+0x14>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	20000690 	.word	0x20000690

08006b4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b54:	f000 f852 	bl	8006bfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b58:	4b06      	ldr	r3, [pc, #24]	; (8006b74 <prvIdleTask+0x28>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d9f9      	bls.n	8006b54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <prvIdleTask+0x2c>)
 8006b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006b70:	e7f0      	b.n	8006b54 <prvIdleTask+0x8>
 8006b72:	bf00      	nop
 8006b74:	20000580 	.word	0x20000580
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b82:	2300      	movs	r3, #0
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	e00c      	b.n	8006ba2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4a12      	ldr	r2, [pc, #72]	; (8006bdc <prvInitialiseTaskLists+0x60>)
 8006b94:	4413      	add	r3, r2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe faac 	bl	80050f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	607b      	str	r3, [r7, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b06      	cmp	r3, #6
 8006ba6:	d9ef      	bls.n	8006b88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006ba8:	480d      	ldr	r0, [pc, #52]	; (8006be0 <prvInitialiseTaskLists+0x64>)
 8006baa:	f7fe faa3 	bl	80050f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bae:	480d      	ldr	r0, [pc, #52]	; (8006be4 <prvInitialiseTaskLists+0x68>)
 8006bb0:	f7fe faa0 	bl	80050f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bb4:	480c      	ldr	r0, [pc, #48]	; (8006be8 <prvInitialiseTaskLists+0x6c>)
 8006bb6:	f7fe fa9d 	bl	80050f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bba:	480c      	ldr	r0, [pc, #48]	; (8006bec <prvInitialiseTaskLists+0x70>)
 8006bbc:	f7fe fa9a 	bl	80050f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006bc0:	480b      	ldr	r0, [pc, #44]	; (8006bf0 <prvInitialiseTaskLists+0x74>)
 8006bc2:	f7fe fa97 	bl	80050f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	; (8006bf4 <prvInitialiseTaskLists+0x78>)
 8006bc8:	4a05      	ldr	r2, [pc, #20]	; (8006be0 <prvInitialiseTaskLists+0x64>)
 8006bca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <prvInitialiseTaskLists+0x7c>)
 8006bce:	4a05      	ldr	r2, [pc, #20]	; (8006be4 <prvInitialiseTaskLists+0x68>)
 8006bd0:	601a      	str	r2, [r3, #0]
}
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000580 	.word	0x20000580
 8006be0:	2000060c 	.word	0x2000060c
 8006be4:	20000620 	.word	0x20000620
 8006be8:	2000063c 	.word	0x2000063c
 8006bec:	20000650 	.word	0x20000650
 8006bf0:	20000668 	.word	0x20000668
 8006bf4:	20000634 	.word	0x20000634
 8006bf8:	20000638 	.word	0x20000638

08006bfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c02:	e019      	b.n	8006c38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c04:	f000 fbce 	bl	80073a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c08:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <prvCheckTasksWaitingTermination+0x50>)
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fe faf7 	bl	8005208 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <prvCheckTasksWaitingTermination+0x54>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	4a0b      	ldr	r2, [pc, #44]	; (8006c50 <prvCheckTasksWaitingTermination+0x54>)
 8006c22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c24:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <prvCheckTasksWaitingTermination+0x58>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	; (8006c54 <prvCheckTasksWaitingTermination+0x58>)
 8006c2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c2e:	f000 fbe9 	bl	8007404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f810 	bl	8006c58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c38:	4b06      	ldr	r3, [pc, #24]	; (8006c54 <prvCheckTasksWaitingTermination+0x58>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e1      	bne.n	8006c04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c40:	bf00      	nop
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000650 	.word	0x20000650
 8006c50:	2000067c 	.word	0x2000067c
 8006c54:	20000664 	.word	0x20000664

08006c58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	334c      	adds	r3, #76	; 0x4c
 8006c64:	4618      	mov	r0, r3
 8006c66:	f00d ff5b 	bl	8014b20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d108      	bne.n	8006c86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fd81 	bl	8007780 <vPortFree>
				vPortFree( pxTCB );
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fd7e 	bl	8007780 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c84:	e018      	b.n	8006cb8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d103      	bne.n	8006c98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fd75 	bl	8007780 <vPortFree>
	}
 8006c96:	e00f      	b.n	8006cb8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d00a      	beq.n	8006cb8 <prvDeleteTCB+0x60>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	60fb      	str	r3, [r7, #12]
}
 8006cb4:	bf00      	nop
 8006cb6:	e7fe      	b.n	8006cb6 <prvDeleteTCB+0x5e>
	}
 8006cb8:	bf00      	nop
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cc6:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <prvResetNextTaskUnblockTime+0x38>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <prvResetNextTaskUnblockTime+0x3c>)
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006cd8:	e008      	b.n	8006cec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cda:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <prvResetNextTaskUnblockTime+0x38>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	4a04      	ldr	r2, [pc, #16]	; (8006cfc <prvResetNextTaskUnblockTime+0x3c>)
 8006cea:	6013      	str	r3, [r2, #0]
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	20000634 	.word	0x20000634
 8006cfc:	2000069c 	.word	0x2000069c

08006d00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d06:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <xTaskGetSchedulerState+0x34>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d102      	bne.n	8006d14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	607b      	str	r3, [r7, #4]
 8006d12:	e008      	b.n	8006d26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d14:	4b08      	ldr	r3, [pc, #32]	; (8006d38 <xTaskGetSchedulerState+0x38>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	607b      	str	r3, [r7, #4]
 8006d20:	e001      	b.n	8006d26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d22:	2300      	movs	r3, #0
 8006d24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d26:	687b      	ldr	r3, [r7, #4]
	}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	20000688 	.word	0x20000688
 8006d38:	200006a4 	.word	0x200006a4

08006d3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d05e      	beq.n	8006e10 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d56:	4b31      	ldr	r3, [pc, #196]	; (8006e1c <xTaskPriorityInherit+0xe0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d24e      	bcs.n	8006dfe <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	db06      	blt.n	8006d76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d68:	4b2c      	ldr	r3, [pc, #176]	; (8006e1c <xTaskPriorityInherit+0xe0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6e:	f1c3 0207 	rsb	r2, r3, #7
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	6959      	ldr	r1, [r3, #20]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4a26      	ldr	r2, [pc, #152]	; (8006e20 <xTaskPriorityInherit+0xe4>)
 8006d88:	4413      	add	r3, r2
 8006d8a:	4299      	cmp	r1, r3
 8006d8c:	d12f      	bne.n	8006dee <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	3304      	adds	r3, #4
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fe fa38 	bl	8005208 <uxListRemove>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	2201      	movs	r2, #1
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	43da      	mvns	r2, r3
 8006daa:	4b1e      	ldr	r3, [pc, #120]	; (8006e24 <xTaskPriorityInherit+0xe8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4013      	ands	r3, r2
 8006db0:	4a1c      	ldr	r2, [pc, #112]	; (8006e24 <xTaskPriorityInherit+0xe8>)
 8006db2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006db4:	4b19      	ldr	r3, [pc, #100]	; (8006e1c <xTaskPriorityInherit+0xe0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	409a      	lsls	r2, r3
 8006dc6:	4b17      	ldr	r3, [pc, #92]	; (8006e24 <xTaskPriorityInherit+0xe8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	4a15      	ldr	r2, [pc, #84]	; (8006e24 <xTaskPriorityInherit+0xe8>)
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4a10      	ldr	r2, [pc, #64]	; (8006e20 <xTaskPriorityInherit+0xe4>)
 8006dde:	441a      	add	r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4619      	mov	r1, r3
 8006de6:	4610      	mov	r0, r2
 8006de8:	f7fe f9b1 	bl	800514e <vListInsertEnd>
 8006dec:	e004      	b.n	8006df8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006dee:	4b0b      	ldr	r3, [pc, #44]	; (8006e1c <xTaskPriorityInherit+0xe0>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	e008      	b.n	8006e10 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e02:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <xTaskPriorityInherit+0xe0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d201      	bcs.n	8006e10 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e10:	68fb      	ldr	r3, [r7, #12]
	}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	2000057c 	.word	0x2000057c
 8006e20:	20000580 	.word	0x20000580
 8006e24:	20000684 	.word	0x20000684

08006e28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e34:	2300      	movs	r3, #0
 8006e36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d06e      	beq.n	8006f1c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e3e:	4b3a      	ldr	r3, [pc, #232]	; (8006f28 <xTaskPriorityDisinherit+0x100>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d00a      	beq.n	8006e5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60fb      	str	r3, [r7, #12]
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60bb      	str	r3, [r7, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e80:	1e5a      	subs	r2, r3, #1
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d044      	beq.n	8006f1c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d140      	bne.n	8006f1c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe f9b2 	bl	8005208 <uxListRemove>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d115      	bne.n	8006ed6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eae:	491f      	ldr	r1, [pc, #124]	; (8006f2c <xTaskPriorityDisinherit+0x104>)
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	4413      	add	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10a      	bne.n	8006ed6 <xTaskPriorityDisinherit+0xae>
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8006eca:	43da      	mvns	r2, r3
 8006ecc:	4b18      	ldr	r3, [pc, #96]	; (8006f30 <xTaskPriorityDisinherit+0x108>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	4a17      	ldr	r2, [pc, #92]	; (8006f30 <xTaskPriorityDisinherit+0x108>)
 8006ed4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	f1c3 0207 	rsb	r2, r3, #7
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eee:	2201      	movs	r2, #1
 8006ef0:	409a      	lsls	r2, r3
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <xTaskPriorityDisinherit+0x108>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	4a0d      	ldr	r2, [pc, #52]	; (8006f30 <xTaskPriorityDisinherit+0x108>)
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4a08      	ldr	r2, [pc, #32]	; (8006f2c <xTaskPriorityDisinherit+0x104>)
 8006f0a:	441a      	add	r2, r3
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f7fe f91b 	bl	800514e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f1c:	697b      	ldr	r3, [r7, #20]
	}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	2000057c 	.word	0x2000057c
 8006f2c:	20000580 	.word	0x20000580
 8006f30:	20000684 	.word	0x20000684

08006f34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d077      	beq.n	800703c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	60fb      	str	r3, [r7, #12]
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d902      	bls.n	8006f7a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	e002      	b.n	8006f80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f7e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	69fa      	ldr	r2, [r7, #28]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d058      	beq.n	800703c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d153      	bne.n	800703c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f94:	4b2b      	ldr	r3, [pc, #172]	; (8007044 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d10a      	bne.n	8006fb4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	60bb      	str	r3, [r7, #8]
}
 8006fb0:	bf00      	nop
 8006fb2:	e7fe      	b.n	8006fb2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	db04      	blt.n	8006fd2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f1c3 0207 	rsb	r2, r3, #7
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	6959      	ldr	r1, [r3, #20]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4a19      	ldr	r2, [pc, #100]	; (8007048 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006fe2:	4413      	add	r3, r2
 8006fe4:	4299      	cmp	r1, r3
 8006fe6:	d129      	bne.n	800703c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	3304      	adds	r3, #4
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe f90b 	bl	8005208 <uxListRemove>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43da      	mvns	r2, r3
 8007004:	4b11      	ldr	r3, [pc, #68]	; (800704c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4013      	ands	r3, r2
 800700a:	4a10      	ldr	r2, [pc, #64]	; (800704c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800700c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	2201      	movs	r2, #1
 8007014:	409a      	lsls	r2, r3
 8007016:	4b0d      	ldr	r3, [pc, #52]	; (800704c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4313      	orrs	r3, r2
 800701c:	4a0b      	ldr	r2, [pc, #44]	; (800704c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4a06      	ldr	r2, [pc, #24]	; (8007048 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800702e:	441a      	add	r2, r3
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	4610      	mov	r0, r2
 8007038:	f7fe f889 	bl	800514e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800703c:	bf00      	nop
 800703e:	3720      	adds	r7, #32
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	2000057c 	.word	0x2000057c
 8007048:	20000580 	.word	0x20000580
 800704c:	20000684 	.word	0x20000684

08007050 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007050:	b480      	push	{r7}
 8007052:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <pvTaskIncrementMutexHeldCount+0x24>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d004      	beq.n	8007066 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800705c:	4b05      	ldr	r3, [pc, #20]	; (8007074 <pvTaskIncrementMutexHeldCount+0x24>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007062:	3201      	adds	r2, #1
 8007064:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007066:	4b03      	ldr	r3, [pc, #12]	; (8007074 <pvTaskIncrementMutexHeldCount+0x24>)
 8007068:	681b      	ldr	r3, [r3, #0]
	}
 800706a:	4618      	mov	r0, r3
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	2000057c 	.word	0x2000057c

08007078 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007082:	4b29      	ldr	r3, [pc, #164]	; (8007128 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007088:	4b28      	ldr	r3, [pc, #160]	; (800712c <prvAddCurrentTaskToDelayedList+0xb4>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3304      	adds	r3, #4
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe f8ba 	bl	8005208 <uxListRemove>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10b      	bne.n	80070b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800709a:	4b24      	ldr	r3, [pc, #144]	; (800712c <prvAddCurrentTaskToDelayedList+0xb4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	2201      	movs	r2, #1
 80070a2:	fa02 f303 	lsl.w	r3, r2, r3
 80070a6:	43da      	mvns	r2, r3
 80070a8:	4b21      	ldr	r3, [pc, #132]	; (8007130 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4013      	ands	r3, r2
 80070ae:	4a20      	ldr	r2, [pc, #128]	; (8007130 <prvAddCurrentTaskToDelayedList+0xb8>)
 80070b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b8:	d10a      	bne.n	80070d0 <prvAddCurrentTaskToDelayedList+0x58>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070c0:	4b1a      	ldr	r3, [pc, #104]	; (800712c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3304      	adds	r3, #4
 80070c6:	4619      	mov	r1, r3
 80070c8:	481a      	ldr	r0, [pc, #104]	; (8007134 <prvAddCurrentTaskToDelayedList+0xbc>)
 80070ca:	f7fe f840 	bl	800514e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070ce:	e026      	b.n	800711e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4413      	add	r3, r2
 80070d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070d8:	4b14      	ldr	r3, [pc, #80]	; (800712c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d209      	bcs.n	80070fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e8:	4b13      	ldr	r3, [pc, #76]	; (8007138 <prvAddCurrentTaskToDelayedList+0xc0>)
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	4b0f      	ldr	r3, [pc, #60]	; (800712c <prvAddCurrentTaskToDelayedList+0xb4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7fe f84e 	bl	8005196 <vListInsert>
}
 80070fa:	e010      	b.n	800711e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070fc:	4b0f      	ldr	r3, [pc, #60]	; (800713c <prvAddCurrentTaskToDelayedList+0xc4>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	4b0a      	ldr	r3, [pc, #40]	; (800712c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3304      	adds	r3, #4
 8007106:	4619      	mov	r1, r3
 8007108:	4610      	mov	r0, r2
 800710a:	f7fe f844 	bl	8005196 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800710e:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	429a      	cmp	r2, r3
 8007116:	d202      	bcs.n	800711e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007118:	4a09      	ldr	r2, [pc, #36]	; (8007140 <prvAddCurrentTaskToDelayedList+0xc8>)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6013      	str	r3, [r2, #0]
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000680 	.word	0x20000680
 800712c:	2000057c 	.word	0x2000057c
 8007130:	20000684 	.word	0x20000684
 8007134:	20000668 	.word	0x20000668
 8007138:	20000638 	.word	0x20000638
 800713c:	20000634 	.word	0x20000634
 8007140:	2000069c 	.word	0x2000069c

08007144 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3b04      	subs	r3, #4
 8007154:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800715c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3b04      	subs	r3, #4
 8007162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f023 0201 	bic.w	r2, r3, #1
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3b04      	subs	r3, #4
 8007172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007174:	4a0c      	ldr	r2, [pc, #48]	; (80071a8 <pxPortInitialiseStack+0x64>)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3b14      	subs	r3, #20
 800717e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3b04      	subs	r3, #4
 800718a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f06f 0202 	mvn.w	r2, #2
 8007192:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3b20      	subs	r3, #32
 8007198:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800719a:	68fb      	ldr	r3, [r7, #12]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	080071ad 	.word	0x080071ad

080071ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80071b6:	4b12      	ldr	r3, [pc, #72]	; (8007200 <prvTaskExitError+0x54>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071be:	d00a      	beq.n	80071d6 <prvTaskExitError+0x2a>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	60fb      	str	r3, [r7, #12]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <prvTaskExitError+0x28>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	60bb      	str	r3, [r7, #8]
}
 80071e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071ea:	bf00      	nop
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0fc      	beq.n	80071ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	20000020 	.word	0x20000020
	...

08007210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007210:	4b07      	ldr	r3, [pc, #28]	; (8007230 <pxCurrentTCBConst2>)
 8007212:	6819      	ldr	r1, [r3, #0]
 8007214:	6808      	ldr	r0, [r1, #0]
 8007216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	f380 8809 	msr	PSP, r0
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f04f 0000 	mov.w	r0, #0
 8007226:	f380 8811 	msr	BASEPRI, r0
 800722a:	4770      	bx	lr
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst2>:
 8007230:	2000057c 	.word	0x2000057c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007238:	4808      	ldr	r0, [pc, #32]	; (800725c <prvPortStartFirstTask+0x24>)
 800723a:	6800      	ldr	r0, [r0, #0]
 800723c:	6800      	ldr	r0, [r0, #0]
 800723e:	f380 8808 	msr	MSP, r0
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8814 	msr	CONTROL, r0
 800724a:	b662      	cpsie	i
 800724c:	b661      	cpsie	f
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	df00      	svc	0
 8007258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800725a:	bf00      	nop
 800725c:	e000ed08 	.word	0xe000ed08

08007260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007266:	4b46      	ldr	r3, [pc, #280]	; (8007380 <xPortStartScheduler+0x120>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a46      	ldr	r2, [pc, #280]	; (8007384 <xPortStartScheduler+0x124>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10a      	bne.n	8007286 <xPortStartScheduler+0x26>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	613b      	str	r3, [r7, #16]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007286:	4b3e      	ldr	r3, [pc, #248]	; (8007380 <xPortStartScheduler+0x120>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a3f      	ldr	r2, [pc, #252]	; (8007388 <xPortStartScheduler+0x128>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d10a      	bne.n	80072a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	60fb      	str	r3, [r7, #12]
}
 80072a2:	bf00      	nop
 80072a4:	e7fe      	b.n	80072a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072a6:	4b39      	ldr	r3, [pc, #228]	; (800738c <xPortStartScheduler+0x12c>)
 80072a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	22ff      	movs	r2, #255	; 0xff
 80072b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	4b31      	ldr	r3, [pc, #196]	; (8007390 <xPortStartScheduler+0x130>)
 80072cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072ce:	4b31      	ldr	r3, [pc, #196]	; (8007394 <xPortStartScheduler+0x134>)
 80072d0:	2207      	movs	r2, #7
 80072d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072d4:	e009      	b.n	80072ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80072d6:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <xPortStartScheduler+0x134>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3b01      	subs	r3, #1
 80072dc:	4a2d      	ldr	r2, [pc, #180]	; (8007394 <xPortStartScheduler+0x134>)
 80072de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f2:	2b80      	cmp	r3, #128	; 0x80
 80072f4:	d0ef      	beq.n	80072d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072f6:	4b27      	ldr	r3, [pc, #156]	; (8007394 <xPortStartScheduler+0x134>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f1c3 0307 	rsb	r3, r3, #7
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d00a      	beq.n	8007318 <xPortStartScheduler+0xb8>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	60bb      	str	r3, [r7, #8]
}
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007318:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <xPortStartScheduler+0x134>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	4a1d      	ldr	r2, [pc, #116]	; (8007394 <xPortStartScheduler+0x134>)
 8007320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007322:	4b1c      	ldr	r3, [pc, #112]	; (8007394 <xPortStartScheduler+0x134>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800732a:	4a1a      	ldr	r2, [pc, #104]	; (8007394 <xPortStartScheduler+0x134>)
 800732c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	b2da      	uxtb	r2, r3
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007336:	4b18      	ldr	r3, [pc, #96]	; (8007398 <xPortStartScheduler+0x138>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a17      	ldr	r2, [pc, #92]	; (8007398 <xPortStartScheduler+0x138>)
 800733c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <xPortStartScheduler+0x138>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a14      	ldr	r2, [pc, #80]	; (8007398 <xPortStartScheduler+0x138>)
 8007348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800734c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800734e:	f000 f8dd 	bl	800750c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007352:	4b12      	ldr	r3, [pc, #72]	; (800739c <xPortStartScheduler+0x13c>)
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007358:	f000 f8fc 	bl	8007554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800735c:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <xPortStartScheduler+0x140>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a0f      	ldr	r2, [pc, #60]	; (80073a0 <xPortStartScheduler+0x140>)
 8007362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007368:	f7ff ff66 	bl	8007238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800736c:	f7ff fa82 	bl	8006874 <vTaskSwitchContext>
	prvTaskExitError();
 8007370:	f7ff ff1c 	bl	80071ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	e000ed00 	.word	0xe000ed00
 8007384:	410fc271 	.word	0x410fc271
 8007388:	410fc270 	.word	0x410fc270
 800738c:	e000e400 	.word	0xe000e400
 8007390:	200006a8 	.word	0x200006a8
 8007394:	200006ac 	.word	0x200006ac
 8007398:	e000ed20 	.word	0xe000ed20
 800739c:	20000020 	.word	0x20000020
 80073a0:	e000ef34 	.word	0xe000ef34

080073a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	607b      	str	r3, [r7, #4]
}
 80073bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80073be:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <vPortEnterCritical+0x58>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3301      	adds	r3, #1
 80073c4:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <vPortEnterCritical+0x58>)
 80073c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80073c8:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <vPortEnterCritical+0x58>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d10f      	bne.n	80073f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <vPortEnterCritical+0x5c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	603b      	str	r3, [r7, #0]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <vPortEnterCritical+0x4a>
	}
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	20000020 	.word	0x20000020
 8007400:	e000ed04 	.word	0xe000ed04

08007404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <vPortExitCritical+0x50>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <vPortExitCritical+0x24>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	607b      	str	r3, [r7, #4]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <vPortExitCritical+0x50>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3b01      	subs	r3, #1
 800742e:	4a09      	ldr	r2, [pc, #36]	; (8007454 <vPortExitCritical+0x50>)
 8007430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007432:	4b08      	ldr	r3, [pc, #32]	; (8007454 <vPortExitCritical+0x50>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d105      	bne.n	8007446 <vPortExitCritical+0x42>
 800743a:	2300      	movs	r3, #0
 800743c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	f383 8811 	msr	BASEPRI, r3
}
 8007444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007446:	bf00      	nop
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20000020 	.word	0x20000020
	...

08007460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007460:	f3ef 8009 	mrs	r0, PSP
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <pxCurrentTCBConst>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	f01e 0f10 	tst.w	lr, #16
 8007470:	bf08      	it	eq
 8007472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747a:	6010      	str	r0, [r2, #0]
 800747c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007484:	f380 8811 	msr	BASEPRI, r0
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f7ff f9f0 	bl	8006874 <vTaskSwitchContext>
 8007494:	f04f 0000 	mov.w	r0, #0
 8007498:	f380 8811 	msr	BASEPRI, r0
 800749c:	bc09      	pop	{r0, r3}
 800749e:	6819      	ldr	r1, [r3, #0]
 80074a0:	6808      	ldr	r0, [r1, #0]
 80074a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a6:	f01e 0f10 	tst.w	lr, #16
 80074aa:	bf08      	it	eq
 80074ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074b0:	f380 8809 	msr	PSP, r0
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	f3af 8000 	nop.w

080074c0 <pxCurrentTCBConst>:
 80074c0:	2000057c 	.word	0x2000057c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop

080074c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	607b      	str	r3, [r7, #4]
}
 80074e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074e2:	f7ff f90f 	bl	8006704 <xTaskIncrementTick>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <SysTick_Handler+0x40>)
 80074ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	2300      	movs	r3, #0
 80074f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	f383 8811 	msr	BASEPRI, r3
}
 80074fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <vPortSetupTimerInterrupt+0x34>)
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <vPortSetupTimerInterrupt+0x38>)
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800751c:	4b0a      	ldr	r3, [pc, #40]	; (8007548 <vPortSetupTimerInterrupt+0x3c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a0a      	ldr	r2, [pc, #40]	; (800754c <vPortSetupTimerInterrupt+0x40>)
 8007522:	fba2 2303 	umull	r2, r3, r2, r3
 8007526:	099b      	lsrs	r3, r3, #6
 8007528:	4a09      	ldr	r2, [pc, #36]	; (8007550 <vPortSetupTimerInterrupt+0x44>)
 800752a:	3b01      	subs	r3, #1
 800752c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800752e:	4b04      	ldr	r3, [pc, #16]	; (8007540 <vPortSetupTimerInterrupt+0x34>)
 8007530:	2207      	movs	r2, #7
 8007532:	601a      	str	r2, [r3, #0]
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	e000e010 	.word	0xe000e010
 8007544:	e000e018 	.word	0xe000e018
 8007548:	20000000 	.word	0x20000000
 800754c:	10624dd3 	.word	0x10624dd3
 8007550:	e000e014 	.word	0xe000e014

08007554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007564 <vPortEnableVFP+0x10>
 8007558:	6801      	ldr	r1, [r0, #0]
 800755a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800755e:	6001      	str	r1, [r0, #0]
 8007560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007562:	bf00      	nop
 8007564:	e000ed88 	.word	0xe000ed88

08007568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800756e:	f3ef 8305 	mrs	r3, IPSR
 8007572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b0f      	cmp	r3, #15
 8007578:	d914      	bls.n	80075a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800757a:	4a17      	ldr	r2, [pc, #92]	; (80075d8 <vPortValidateInterruptPriority+0x70>)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007584:	4b15      	ldr	r3, [pc, #84]	; (80075dc <vPortValidateInterruptPriority+0x74>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	7afa      	ldrb	r2, [r7, #11]
 800758a:	429a      	cmp	r2, r3
 800758c:	d20a      	bcs.n	80075a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	607b      	str	r3, [r7, #4]
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075a4:	4b0e      	ldr	r3, [pc, #56]	; (80075e0 <vPortValidateInterruptPriority+0x78>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075ac:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <vPortValidateInterruptPriority+0x7c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d90a      	bls.n	80075ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	603b      	str	r3, [r7, #0]
}
 80075c6:	bf00      	nop
 80075c8:	e7fe      	b.n	80075c8 <vPortValidateInterruptPriority+0x60>
	}
 80075ca:	bf00      	nop
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	e000e3f0 	.word	0xe000e3f0
 80075dc:	200006a8 	.word	0x200006a8
 80075e0:	e000ed0c 	.word	0xe000ed0c
 80075e4:	200006ac 	.word	0x200006ac

080075e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b08a      	sub	sp, #40	; 0x28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075f4:	f7fe ffba 	bl	800656c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075f8:	4b5b      	ldr	r3, [pc, #364]	; (8007768 <pvPortMalloc+0x180>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007600:	f000 f920 	bl	8007844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007604:	4b59      	ldr	r3, [pc, #356]	; (800776c <pvPortMalloc+0x184>)
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 8093 	bne.w	8007738 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01d      	beq.n	8007654 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007618:	2208      	movs	r2, #8
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4413      	add	r3, r2
 800761e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	2b00      	cmp	r3, #0
 8007628:	d014      	beq.n	8007654 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f023 0307 	bic.w	r3, r3, #7
 8007630:	3308      	adds	r3, #8
 8007632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <pvPortMalloc+0x6c>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	617b      	str	r3, [r7, #20]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d06e      	beq.n	8007738 <pvPortMalloc+0x150>
 800765a:	4b45      	ldr	r3, [pc, #276]	; (8007770 <pvPortMalloc+0x188>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	d869      	bhi.n	8007738 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007664:	4b43      	ldr	r3, [pc, #268]	; (8007774 <pvPortMalloc+0x18c>)
 8007666:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007668:	4b42      	ldr	r3, [pc, #264]	; (8007774 <pvPortMalloc+0x18c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800766e:	e004      	b.n	800767a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d903      	bls.n	800768c <pvPortMalloc+0xa4>
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1f1      	bne.n	8007670 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800768c:	4b36      	ldr	r3, [pc, #216]	; (8007768 <pvPortMalloc+0x180>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007692:	429a      	cmp	r2, r3
 8007694:	d050      	beq.n	8007738 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2208      	movs	r2, #8
 800769c:	4413      	add	r3, r2
 800769e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	1ad2      	subs	r2, r2, r3
 80076b0:	2308      	movs	r3, #8
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d91f      	bls.n	80076f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4413      	add	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	f003 0307 	and.w	r3, r3, #7
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <pvPortMalloc+0xf8>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	613b      	str	r3, [r7, #16]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	1ad2      	subs	r2, r2, r3
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076f2:	69b8      	ldr	r0, [r7, #24]
 80076f4:	f000 f908 	bl	8007908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076f8:	4b1d      	ldr	r3, [pc, #116]	; (8007770 <pvPortMalloc+0x188>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	4a1b      	ldr	r2, [pc, #108]	; (8007770 <pvPortMalloc+0x188>)
 8007704:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007706:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <pvPortMalloc+0x188>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	4b1b      	ldr	r3, [pc, #108]	; (8007778 <pvPortMalloc+0x190>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	429a      	cmp	r2, r3
 8007710:	d203      	bcs.n	800771a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007712:	4b17      	ldr	r3, [pc, #92]	; (8007770 <pvPortMalloc+0x188>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a18      	ldr	r2, [pc, #96]	; (8007778 <pvPortMalloc+0x190>)
 8007718:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	4b13      	ldr	r3, [pc, #76]	; (800776c <pvPortMalloc+0x184>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	431a      	orrs	r2, r3
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800772e:	4b13      	ldr	r3, [pc, #76]	; (800777c <pvPortMalloc+0x194>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3301      	adds	r3, #1
 8007734:	4a11      	ldr	r2, [pc, #68]	; (800777c <pvPortMalloc+0x194>)
 8007736:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007738:	f7fe ff26 	bl	8006588 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <pvPortMalloc+0x174>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	60fb      	str	r3, [r7, #12]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <pvPortMalloc+0x172>
	return pvReturn;
 800775c:	69fb      	ldr	r3, [r7, #28]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3728      	adds	r7, #40	; 0x28
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	200106b8 	.word	0x200106b8
 800776c:	200106cc 	.word	0x200106cc
 8007770:	200106bc 	.word	0x200106bc
 8007774:	200106b0 	.word	0x200106b0
 8007778:	200106c0 	.word	0x200106c0
 800777c:	200106c4 	.word	0x200106c4

08007780 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d04d      	beq.n	800782e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007792:	2308      	movs	r3, #8
 8007794:	425b      	negs	r3, r3
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4413      	add	r3, r2
 800779a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	4b24      	ldr	r3, [pc, #144]	; (8007838 <vPortFree+0xb8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4013      	ands	r3, r2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <vPortFree+0x44>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	60fb      	str	r3, [r7, #12]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00a      	beq.n	80077e2 <vPortFree+0x62>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	60bb      	str	r3, [r7, #8]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	4b14      	ldr	r3, [pc, #80]	; (8007838 <vPortFree+0xb8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01e      	beq.n	800782e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d11a      	bne.n	800782e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	4b0e      	ldr	r3, [pc, #56]	; (8007838 <vPortFree+0xb8>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	43db      	mvns	r3, r3
 8007802:	401a      	ands	r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007808:	f7fe feb0 	bl	800656c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <vPortFree+0xbc>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4413      	add	r3, r2
 8007816:	4a09      	ldr	r2, [pc, #36]	; (800783c <vPortFree+0xbc>)
 8007818:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800781a:	6938      	ldr	r0, [r7, #16]
 800781c:	f000 f874 	bl	8007908 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007820:	4b07      	ldr	r3, [pc, #28]	; (8007840 <vPortFree+0xc0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3301      	adds	r3, #1
 8007826:	4a06      	ldr	r2, [pc, #24]	; (8007840 <vPortFree+0xc0>)
 8007828:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800782a:	f7fe fead 	bl	8006588 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800782e:	bf00      	nop
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200106cc 	.word	0x200106cc
 800783c:	200106bc 	.word	0x200106bc
 8007840:	200106c8 	.word	0x200106c8

08007844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800784a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800784e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007850:	4b27      	ldr	r3, [pc, #156]	; (80078f0 <prvHeapInit+0xac>)
 8007852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00c      	beq.n	8007878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3307      	adds	r3, #7
 8007862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 0307 	bic.w	r3, r3, #7
 800786a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	4a1f      	ldr	r2, [pc, #124]	; (80078f0 <prvHeapInit+0xac>)
 8007874:	4413      	add	r3, r2
 8007876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800787c:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <prvHeapInit+0xb0>)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007882:	4b1c      	ldr	r3, [pc, #112]	; (80078f4 <prvHeapInit+0xb0>)
 8007884:	2200      	movs	r2, #0
 8007886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	4413      	add	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007890:	2208      	movs	r2, #8
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	1a9b      	subs	r3, r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0307 	bic.w	r3, r3, #7
 800789e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <prvHeapInit+0xb4>)
 80078a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078a6:	4b14      	ldr	r3, [pc, #80]	; (80078f8 <prvHeapInit+0xb4>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2200      	movs	r2, #0
 80078ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078ae:	4b12      	ldr	r3, [pc, #72]	; (80078f8 <prvHeapInit+0xb4>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2200      	movs	r2, #0
 80078b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	1ad2      	subs	r2, r2, r3
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078c4:	4b0c      	ldr	r3, [pc, #48]	; (80078f8 <prvHeapInit+0xb4>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <prvHeapInit+0xb8>)
 80078d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	4a09      	ldr	r2, [pc, #36]	; (8007900 <prvHeapInit+0xbc>)
 80078da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <prvHeapInit+0xc0>)
 80078de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	200006b0 	.word	0x200006b0
 80078f4:	200106b0 	.word	0x200106b0
 80078f8:	200106b8 	.word	0x200106b8
 80078fc:	200106c0 	.word	0x200106c0
 8007900:	200106bc 	.word	0x200106bc
 8007904:	200106cc 	.word	0x200106cc

08007908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007910:	4b28      	ldr	r3, [pc, #160]	; (80079b4 <prvInsertBlockIntoFreeList+0xac>)
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	e002      	b.n	800791c <prvInsertBlockIntoFreeList+0x14>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	429a      	cmp	r2, r3
 8007924:	d8f7      	bhi.n	8007916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	4413      	add	r3, r2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d108      	bne.n	800794a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	441a      	add	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	441a      	add	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d118      	bne.n	8007990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	4b15      	ldr	r3, [pc, #84]	; (80079b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d00d      	beq.n	8007986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	441a      	add	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	e008      	b.n	8007998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007986:	4b0c      	ldr	r3, [pc, #48]	; (80079b8 <prvInsertBlockIntoFreeList+0xb0>)
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e003      	b.n	8007998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	429a      	cmp	r2, r3
 800799e:	d002      	beq.n	80079a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079a6:	bf00      	nop
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	200106b0 	.word	0x200106b0
 80079b8:	200106b8 	.word	0x200106b8

080079bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80079c6:	f007 fadd 	bl	800ef84 <sys_timeouts_sleeptime>
 80079ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d2:	d10b      	bne.n	80079ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80079d4:	4813      	ldr	r0, [pc, #76]	; (8007a24 <tcpip_timeouts_mbox_fetch+0x68>)
 80079d6:	f00c fa02 	bl	8013dde <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80079da:	2200      	movs	r2, #0
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f00c f974 	bl	8013ccc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80079e4:	480f      	ldr	r0, [pc, #60]	; (8007a24 <tcpip_timeouts_mbox_fetch+0x68>)
 80079e6:	f00c f9eb 	bl	8013dc0 <sys_mutex_lock>
    return;
 80079ea:	e018      	b.n	8007a1e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d102      	bne.n	80079f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80079f2:	f007 fa8d 	bl	800ef10 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80079f6:	e7e6      	b.n	80079c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80079f8:	480a      	ldr	r0, [pc, #40]	; (8007a24 <tcpip_timeouts_mbox_fetch+0x68>)
 80079fa:	f00c f9f0 	bl	8013dde <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f00c f962 	bl	8013ccc <sys_arch_mbox_fetch>
 8007a08:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8007a0a:	4806      	ldr	r0, [pc, #24]	; (8007a24 <tcpip_timeouts_mbox_fetch+0x68>)
 8007a0c:	f00c f9d8 	bl	8013dc0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a16:	d102      	bne.n	8007a1e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8007a18:	f007 fa7a 	bl	800ef10 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007a1c:	e7d3      	b.n	80079c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20015604 	.word	0x20015604

08007a28 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007a30:	4810      	ldr	r0, [pc, #64]	; (8007a74 <tcpip_thread+0x4c>)
 8007a32:	f00c f9c5 	bl	8013dc0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007a36:	4b10      	ldr	r3, [pc, #64]	; (8007a78 <tcpip_thread+0x50>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d005      	beq.n	8007a4a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8007a3e:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <tcpip_thread+0x50>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a0e      	ldr	r2, [pc, #56]	; (8007a7c <tcpip_thread+0x54>)
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	4610      	mov	r0, r2
 8007a48:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007a4a:	f107 030c 	add.w	r3, r7, #12
 8007a4e:	4619      	mov	r1, r3
 8007a50:	480b      	ldr	r0, [pc, #44]	; (8007a80 <tcpip_thread+0x58>)
 8007a52:	f7ff ffb3 	bl	80079bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d106      	bne.n	8007a6a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007a5c:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <tcpip_thread+0x5c>)
 8007a5e:	2291      	movs	r2, #145	; 0x91
 8007a60:	4909      	ldr	r1, [pc, #36]	; (8007a88 <tcpip_thread+0x60>)
 8007a62:	480a      	ldr	r0, [pc, #40]	; (8007a8c <tcpip_thread+0x64>)
 8007a64:	f00c fff6 	bl	8014a54 <iprintf>
      continue;
 8007a68:	e003      	b.n	8007a72 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f000 f80f 	bl	8007a90 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007a72:	e7ea      	b.n	8007a4a <tcpip_thread+0x22>
 8007a74:	20015604 	.word	0x20015604
 8007a78:	200106d0 	.word	0x200106d0
 8007a7c:	200106d4 	.word	0x200106d4
 8007a80:	200106d8 	.word	0x200106d8
 8007a84:	080152b0 	.word	0x080152b0
 8007a88:	080152e0 	.word	0x080152e0
 8007a8c:	08015300 	.word	0x08015300

08007a90 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d026      	beq.n	8007aee <tcpip_thread_handle_msg+0x5e>
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	dc2b      	bgt.n	8007afc <tcpip_thread_handle_msg+0x6c>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <tcpip_thread_handle_msg+0x1e>
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d015      	beq.n	8007ad8 <tcpip_thread_handle_msg+0x48>
 8007aac:	e026      	b.n	8007afc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6850      	ldr	r0, [r2, #4]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6892      	ldr	r2, [r2, #8]
 8007aba:	4611      	mov	r1, r2
 8007abc:	4798      	blx	r3
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f001 fd17 	bl	80094fc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007ace:	6879      	ldr	r1, [r7, #4]
 8007ad0:	2009      	movs	r0, #9
 8007ad2:	f000 fe63 	bl	800879c <memp_free>
      break;
 8007ad6:	e018      	b.n	8007b0a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6892      	ldr	r2, [r2, #8]
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007ae4:	6879      	ldr	r1, [r7, #4]
 8007ae6:	2008      	movs	r0, #8
 8007ae8:	f000 fe58 	bl	800879c <memp_free>
      break;
 8007aec:	e00d      	b.n	8007b0a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6892      	ldr	r2, [r2, #8]
 8007af6:	4610      	mov	r0, r2
 8007af8:	4798      	blx	r3
      break;
 8007afa:	e006      	b.n	8007b0a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007afc:	4b05      	ldr	r3, [pc, #20]	; (8007b14 <tcpip_thread_handle_msg+0x84>)
 8007afe:	22cf      	movs	r2, #207	; 0xcf
 8007b00:	4905      	ldr	r1, [pc, #20]	; (8007b18 <tcpip_thread_handle_msg+0x88>)
 8007b02:	4806      	ldr	r0, [pc, #24]	; (8007b1c <tcpip_thread_handle_msg+0x8c>)
 8007b04:	f00c ffa6 	bl	8014a54 <iprintf>
      break;
 8007b08:	bf00      	nop
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	080152b0 	.word	0x080152b0
 8007b18:	080152e0 	.word	0x080152e0
 8007b1c:	08015300 	.word	0x08015300

08007b20 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007b2c:	481a      	ldr	r0, [pc, #104]	; (8007b98 <tcpip_inpkt+0x78>)
 8007b2e:	f00c f90c 	bl	8013d4a <sys_mbox_valid>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d105      	bne.n	8007b44 <tcpip_inpkt+0x24>
 8007b38:	4b18      	ldr	r3, [pc, #96]	; (8007b9c <tcpip_inpkt+0x7c>)
 8007b3a:	22fc      	movs	r2, #252	; 0xfc
 8007b3c:	4918      	ldr	r1, [pc, #96]	; (8007ba0 <tcpip_inpkt+0x80>)
 8007b3e:	4819      	ldr	r0, [pc, #100]	; (8007ba4 <tcpip_inpkt+0x84>)
 8007b40:	f00c ff88 	bl	8014a54 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007b44:	2009      	movs	r0, #9
 8007b46:	f000 fdb3 	bl	80086b0 <memp_malloc>
 8007b4a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d102      	bne.n	8007b58 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007b52:	f04f 33ff 	mov.w	r3, #4294967295
 8007b56:	e01a      	b.n	8007b8e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007b70:	6979      	ldr	r1, [r7, #20]
 8007b72:	4809      	ldr	r0, [pc, #36]	; (8007b98 <tcpip_inpkt+0x78>)
 8007b74:	f00c f890 	bl	8013c98 <sys_mbox_trypost>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d006      	beq.n	8007b8c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007b7e:	6979      	ldr	r1, [r7, #20]
 8007b80:	2009      	movs	r0, #9
 8007b82:	f000 fe0b 	bl	800879c <memp_free>
    return ERR_MEM;
 8007b86:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8a:	e000      	b.n	8007b8e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8007b8c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3718      	adds	r7, #24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	200106d8 	.word	0x200106d8
 8007b9c:	080152b0 	.word	0x080152b0
 8007ba0:	08015328 	.word	0x08015328
 8007ba4:	08015300 	.word	0x08015300

08007ba8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007bb8:	f003 0318 	and.w	r3, r3, #24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d006      	beq.n	8007bce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007bc0:	4a08      	ldr	r2, [pc, #32]	; (8007be4 <tcpip_input+0x3c>)
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff ffab 	bl	8007b20 <tcpip_inpkt>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	e005      	b.n	8007bda <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007bce:	4a06      	ldr	r2, [pc, #24]	; (8007be8 <tcpip_input+0x40>)
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff ffa4 	bl	8007b20 <tcpip_inpkt>
 8007bd8:	4603      	mov	r3, r0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	08013aa9 	.word	0x08013aa9
 8007be8:	08012981 	.word	0x08012981

08007bec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007bf6:	4819      	ldr	r0, [pc, #100]	; (8007c5c <tcpip_try_callback+0x70>)
 8007bf8:	f00c f8a7 	bl	8013d4a <sys_mbox_valid>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <tcpip_try_callback+0x24>
 8007c02:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <tcpip_try_callback+0x74>)
 8007c04:	f240 125d 	movw	r2, #349	; 0x15d
 8007c08:	4916      	ldr	r1, [pc, #88]	; (8007c64 <tcpip_try_callback+0x78>)
 8007c0a:	4817      	ldr	r0, [pc, #92]	; (8007c68 <tcpip_try_callback+0x7c>)
 8007c0c:	f00c ff22 	bl	8014a54 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007c10:	2008      	movs	r0, #8
 8007c12:	f000 fd4d 	bl	80086b0 <memp_malloc>
 8007c16:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d102      	bne.n	8007c24 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c22:	e017      	b.n	8007c54 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2201      	movs	r2, #1
 8007c28:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	4808      	ldr	r0, [pc, #32]	; (8007c5c <tcpip_try_callback+0x70>)
 8007c3a:	f00c f82d 	bl	8013c98 <sys_mbox_trypost>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d006      	beq.n	8007c52 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007c44:	68f9      	ldr	r1, [r7, #12]
 8007c46:	2008      	movs	r0, #8
 8007c48:	f000 fda8 	bl	800879c <memp_free>
    return ERR_MEM;
 8007c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c50:	e000      	b.n	8007c54 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	200106d8 	.word	0x200106d8
 8007c60:	080152b0 	.word	0x080152b0
 8007c64:	08015328 	.word	0x08015328
 8007c68:	08015300 	.word	0x08015300

08007c6c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007c76:	f000 f871 	bl	8007d5c <lwip_init>

  tcpip_init_done = initfunc;
 8007c7a:	4a17      	ldr	r2, [pc, #92]	; (8007cd8 <tcpip_init+0x6c>)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007c80:	4a16      	ldr	r2, [pc, #88]	; (8007cdc <tcpip_init+0x70>)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007c86:	2106      	movs	r1, #6
 8007c88:	4815      	ldr	r0, [pc, #84]	; (8007ce0 <tcpip_init+0x74>)
 8007c8a:	f00b ffe3 	bl	8013c54 <sys_mbox_new>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d006      	beq.n	8007ca2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007c94:	4b13      	ldr	r3, [pc, #76]	; (8007ce4 <tcpip_init+0x78>)
 8007c96:	f240 2261 	movw	r2, #609	; 0x261
 8007c9a:	4913      	ldr	r1, [pc, #76]	; (8007ce8 <tcpip_init+0x7c>)
 8007c9c:	4813      	ldr	r0, [pc, #76]	; (8007cec <tcpip_init+0x80>)
 8007c9e:	f00c fed9 	bl	8014a54 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007ca2:	4813      	ldr	r0, [pc, #76]	; (8007cf0 <tcpip_init+0x84>)
 8007ca4:	f00c f870 	bl	8013d88 <sys_mutex_new>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d006      	beq.n	8007cbc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007cae:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <tcpip_init+0x78>)
 8007cb0:	f240 2265 	movw	r2, #613	; 0x265
 8007cb4:	490f      	ldr	r1, [pc, #60]	; (8007cf4 <tcpip_init+0x88>)
 8007cb6:	480d      	ldr	r0, [pc, #52]	; (8007cec <tcpip_init+0x80>)
 8007cb8:	f00c fecc 	bl	8014a54 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	490c      	ldr	r1, [pc, #48]	; (8007cf8 <tcpip_init+0x8c>)
 8007cc8:	480c      	ldr	r0, [pc, #48]	; (8007cfc <tcpip_init+0x90>)
 8007cca:	f00c f895 	bl	8013df8 <sys_thread_new>
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	200106d0 	.word	0x200106d0
 8007cdc:	200106d4 	.word	0x200106d4
 8007ce0:	200106d8 	.word	0x200106d8
 8007ce4:	080152b0 	.word	0x080152b0
 8007ce8:	08015338 	.word	0x08015338
 8007cec:	08015300 	.word	0x08015300
 8007cf0:	20015604 	.word	0x20015604
 8007cf4:	0801535c 	.word	0x0801535c
 8007cf8:	08007a29 	.word	0x08007a29
 8007cfc:	08015380 	.word	0x08015380

08007d00 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	b21a      	sxth	r2, r3
 8007d10:	88fb      	ldrh	r3, [r7, #6]
 8007d12:	0a1b      	lsrs	r3, r3, #8
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	b21b      	sxth	r3, r3
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	b21b      	sxth	r3, r3
 8007d1c:	b29b      	uxth	r3, r3
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b083      	sub	sp, #12
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	061a      	lsls	r2, r3, #24
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	0a1b      	lsrs	r3, r3, #8
 8007d44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	0e1b      	lsrs	r3, r3, #24
 8007d4e:	4313      	orrs	r3, r2
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007d66:	f00c f801 	bl	8013d6c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007d6a:	f000 f8d5 	bl	8007f18 <mem_init>
  memp_init();
 8007d6e:	f000 fc31 	bl	80085d4 <memp_init>
  pbuf_init();
  netif_init();
 8007d72:	f000 fd3d 	bl	80087f0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007d76:	f007 f93d 	bl	800eff4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007d7a:	f001 fe69 	bl	8009a50 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007d7e:	f007 f87f 	bl	800ee80 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007d96:	4b05      	ldr	r3, [pc, #20]	; (8007dac <ptr_to_mem+0x20>)
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	4413      	add	r3, r2
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	200106dc 	.word	0x200106dc

08007db0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007db8:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <mem_to_ptr+0x20>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	b29b      	uxth	r3, r3
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	200106dc 	.word	0x200106dc

08007dd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007dd4:	b590      	push	{r4, r7, lr}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007ddc:	4b45      	ldr	r3, [pc, #276]	; (8007ef4 <plug_holes+0x120>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d206      	bcs.n	8007df4 <plug_holes+0x20>
 8007de6:	4b44      	ldr	r3, [pc, #272]	; (8007ef8 <plug_holes+0x124>)
 8007de8:	f240 12df 	movw	r2, #479	; 0x1df
 8007dec:	4943      	ldr	r1, [pc, #268]	; (8007efc <plug_holes+0x128>)
 8007dee:	4844      	ldr	r0, [pc, #272]	; (8007f00 <plug_holes+0x12c>)
 8007df0:	f00c fe30 	bl	8014a54 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007df4:	4b43      	ldr	r3, [pc, #268]	; (8007f04 <plug_holes+0x130>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d306      	bcc.n	8007e0c <plug_holes+0x38>
 8007dfe:	4b3e      	ldr	r3, [pc, #248]	; (8007ef8 <plug_holes+0x124>)
 8007e00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007e04:	4940      	ldr	r1, [pc, #256]	; (8007f08 <plug_holes+0x134>)
 8007e06:	483e      	ldr	r0, [pc, #248]	; (8007f00 <plug_holes+0x12c>)
 8007e08:	f00c fe24 	bl	8014a54 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	791b      	ldrb	r3, [r3, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d006      	beq.n	8007e22 <plug_holes+0x4e>
 8007e14:	4b38      	ldr	r3, [pc, #224]	; (8007ef8 <plug_holes+0x124>)
 8007e16:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007e1a:	493c      	ldr	r1, [pc, #240]	; (8007f0c <plug_holes+0x138>)
 8007e1c:	4838      	ldr	r0, [pc, #224]	; (8007f00 <plug_holes+0x12c>)
 8007e1e:	f00c fe19 	bl	8014a54 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e2a:	d906      	bls.n	8007e3a <plug_holes+0x66>
 8007e2c:	4b32      	ldr	r3, [pc, #200]	; (8007ef8 <plug_holes+0x124>)
 8007e2e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007e32:	4937      	ldr	r1, [pc, #220]	; (8007f10 <plug_holes+0x13c>)
 8007e34:	4832      	ldr	r0, [pc, #200]	; (8007f00 <plug_holes+0x12c>)
 8007e36:	f00c fe0d 	bl	8014a54 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff ffa4 	bl	8007d8c <ptr_to_mem>
 8007e44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d024      	beq.n	8007e98 <plug_holes+0xc4>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	791b      	ldrb	r3, [r3, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d120      	bne.n	8007e98 <plug_holes+0xc4>
 8007e56:	4b2b      	ldr	r3, [pc, #172]	; (8007f04 <plug_holes+0x130>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d01b      	beq.n	8007e98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007e60:	4b2c      	ldr	r3, [pc, #176]	; (8007f14 <plug_holes+0x140>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d102      	bne.n	8007e70 <plug_holes+0x9c>
      lfree = mem;
 8007e6a:	4a2a      	ldr	r2, [pc, #168]	; (8007f14 <plug_holes+0x140>)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	881a      	ldrh	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007e80:	d00a      	beq.n	8007e98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff ff80 	bl	8007d8c <ptr_to_mem>
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff ff8e 	bl	8007db0 <mem_to_ptr>
 8007e94:	4603      	mov	r3, r0
 8007e96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	885b      	ldrh	r3, [r3, #2]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff ff75 	bl	8007d8c <ptr_to_mem>
 8007ea2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d01f      	beq.n	8007eec <plug_holes+0x118>
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	791b      	ldrb	r3, [r3, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d11b      	bne.n	8007eec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <plug_holes+0x140>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d102      	bne.n	8007ec4 <plug_holes+0xf0>
      lfree = pmem;
 8007ebe:	4a15      	ldr	r2, [pc, #84]	; (8007f14 <plug_holes+0x140>)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	881a      	ldrh	r2, [r3, #0]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ed4:	d00a      	beq.n	8007eec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff ff56 	bl	8007d8c <ptr_to_mem>
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	68b8      	ldr	r0, [r7, #8]
 8007ee4:	f7ff ff64 	bl	8007db0 <mem_to_ptr>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007eec:	bf00      	nop
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd90      	pop	{r4, r7, pc}
 8007ef4:	200106dc 	.word	0x200106dc
 8007ef8:	08015390 	.word	0x08015390
 8007efc:	080153c0 	.word	0x080153c0
 8007f00:	080153d8 	.word	0x080153d8
 8007f04:	200106e0 	.word	0x200106e0
 8007f08:	08015400 	.word	0x08015400
 8007f0c:	0801541c 	.word	0x0801541c
 8007f10:	08015438 	.word	0x08015438
 8007f14:	200106e8 	.word	0x200106e8

08007f18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007f1e:	4b1f      	ldr	r3, [pc, #124]	; (8007f9c <mem_init+0x84>)
 8007f20:	3303      	adds	r3, #3
 8007f22:	f023 0303 	bic.w	r3, r3, #3
 8007f26:	461a      	mov	r2, r3
 8007f28:	4b1d      	ldr	r3, [pc, #116]	; (8007fa0 <mem_init+0x88>)
 8007f2a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007f2c:	4b1c      	ldr	r3, [pc, #112]	; (8007fa0 <mem_init+0x88>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007f38:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007f46:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007f4a:	f7ff ff1f 	bl	8007d8c <ptr_to_mem>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	4a14      	ldr	r2, [pc, #80]	; (8007fa4 <mem_init+0x8c>)
 8007f52:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007f54:	4b13      	ldr	r3, [pc, #76]	; (8007fa4 <mem_init+0x8c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007f5c:	4b11      	ldr	r3, [pc, #68]	; (8007fa4 <mem_init+0x8c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007f64:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007f66:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <mem_init+0x8c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007f6e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007f70:	4b0b      	ldr	r3, [pc, #44]	; (8007fa0 <mem_init+0x88>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a0c      	ldr	r2, [pc, #48]	; (8007fa8 <mem_init+0x90>)
 8007f76:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007f78:	480c      	ldr	r0, [pc, #48]	; (8007fac <mem_init+0x94>)
 8007f7a:	f00b ff05 	bl	8013d88 <sys_mutex_new>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d006      	beq.n	8007f92 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007f84:	4b0a      	ldr	r3, [pc, #40]	; (8007fb0 <mem_init+0x98>)
 8007f86:	f240 221f 	movw	r2, #543	; 0x21f
 8007f8a:	490a      	ldr	r1, [pc, #40]	; (8007fb4 <mem_init+0x9c>)
 8007f8c:	480a      	ldr	r0, [pc, #40]	; (8007fb8 <mem_init+0xa0>)
 8007f8e:	f00c fd61 	bl	8014a54 <iprintf>
  }
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20015620 	.word	0x20015620
 8007fa0:	200106dc 	.word	0x200106dc
 8007fa4:	200106e0 	.word	0x200106e0
 8007fa8:	200106e8 	.word	0x200106e8
 8007fac:	200106e4 	.word	0x200106e4
 8007fb0:	08015390 	.word	0x08015390
 8007fb4:	08015464 	.word	0x08015464
 8007fb8:	080153d8 	.word	0x080153d8

08007fbc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7ff fef3 	bl	8007db0 <mem_to_ptr>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff feda 	bl	8007d8c <ptr_to_mem>
 8007fd8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	885b      	ldrh	r3, [r3, #2]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fed4 	bl	8007d8c <ptr_to_mem>
 8007fe4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007fee:	d818      	bhi.n	8008022 <mem_link_valid+0x66>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	885b      	ldrh	r3, [r3, #2]
 8007ff4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ff8:	d813      	bhi.n	8008022 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007ffe:	8afa      	ldrh	r2, [r7, #22]
 8008000:	429a      	cmp	r2, r3
 8008002:	d004      	beq.n	800800e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	8afa      	ldrh	r2, [r7, #22]
 800800a:	429a      	cmp	r2, r3
 800800c:	d109      	bne.n	8008022 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800800e:	4b08      	ldr	r3, [pc, #32]	; (8008030 <mem_link_valid+0x74>)
 8008010:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	429a      	cmp	r2, r3
 8008016:	d006      	beq.n	8008026 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	885b      	ldrh	r3, [r3, #2]
 800801c:	8afa      	ldrh	r2, [r7, #22]
 800801e:	429a      	cmp	r2, r3
 8008020:	d001      	beq.n	8008026 <mem_link_valid+0x6a>
    return 0;
 8008022:	2300      	movs	r3, #0
 8008024:	e000      	b.n	8008028 <mem_link_valid+0x6c>
  }
  return 1;
 8008026:	2301      	movs	r3, #1
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	200106e0 	.word	0x200106e0

08008034 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b088      	sub	sp, #32
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d070      	beq.n	8008124 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f003 0303 	and.w	r3, r3, #3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00d      	beq.n	8008068 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800804c:	4b37      	ldr	r3, [pc, #220]	; (800812c <mem_free+0xf8>)
 800804e:	f240 2273 	movw	r2, #627	; 0x273
 8008052:	4937      	ldr	r1, [pc, #220]	; (8008130 <mem_free+0xfc>)
 8008054:	4837      	ldr	r0, [pc, #220]	; (8008134 <mem_free+0x100>)
 8008056:	f00c fcfd 	bl	8014a54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800805a:	f00b fef3 	bl	8013e44 <sys_arch_protect>
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f00b fefd 	bl	8013e60 <sys_arch_unprotect>
    return;
 8008066:	e05e      	b.n	8008126 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3b08      	subs	r3, #8
 800806c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800806e:	4b32      	ldr	r3, [pc, #200]	; (8008138 <mem_free+0x104>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	69fa      	ldr	r2, [r7, #28]
 8008074:	429a      	cmp	r2, r3
 8008076:	d306      	bcc.n	8008086 <mem_free+0x52>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f103 020c 	add.w	r2, r3, #12
 800807e:	4b2f      	ldr	r3, [pc, #188]	; (800813c <mem_free+0x108>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	429a      	cmp	r2, r3
 8008084:	d90d      	bls.n	80080a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008086:	4b29      	ldr	r3, [pc, #164]	; (800812c <mem_free+0xf8>)
 8008088:	f240 227f 	movw	r2, #639	; 0x27f
 800808c:	492c      	ldr	r1, [pc, #176]	; (8008140 <mem_free+0x10c>)
 800808e:	4829      	ldr	r0, [pc, #164]	; (8008134 <mem_free+0x100>)
 8008090:	f00c fce0 	bl	8014a54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008094:	f00b fed6 	bl	8013e44 <sys_arch_protect>
 8008098:	6138      	str	r0, [r7, #16]
 800809a:	6938      	ldr	r0, [r7, #16]
 800809c:	f00b fee0 	bl	8013e60 <sys_arch_unprotect>
    return;
 80080a0:	e041      	b.n	8008126 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80080a2:	4828      	ldr	r0, [pc, #160]	; (8008144 <mem_free+0x110>)
 80080a4:	f00b fe8c 	bl	8013dc0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	791b      	ldrb	r3, [r3, #4]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d110      	bne.n	80080d2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80080b0:	4b1e      	ldr	r3, [pc, #120]	; (800812c <mem_free+0xf8>)
 80080b2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80080b6:	4924      	ldr	r1, [pc, #144]	; (8008148 <mem_free+0x114>)
 80080b8:	481e      	ldr	r0, [pc, #120]	; (8008134 <mem_free+0x100>)
 80080ba:	f00c fccb 	bl	8014a54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80080be:	4821      	ldr	r0, [pc, #132]	; (8008144 <mem_free+0x110>)
 80080c0:	f00b fe8d 	bl	8013dde <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80080c4:	f00b febe 	bl	8013e44 <sys_arch_protect>
 80080c8:	6178      	str	r0, [r7, #20]
 80080ca:	6978      	ldr	r0, [r7, #20]
 80080cc:	f00b fec8 	bl	8013e60 <sys_arch_unprotect>
    return;
 80080d0:	e029      	b.n	8008126 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80080d2:	69f8      	ldr	r0, [r7, #28]
 80080d4:	f7ff ff72 	bl	8007fbc <mem_link_valid>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d110      	bne.n	8008100 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80080de:	4b13      	ldr	r3, [pc, #76]	; (800812c <mem_free+0xf8>)
 80080e0:	f240 2295 	movw	r2, #661	; 0x295
 80080e4:	4919      	ldr	r1, [pc, #100]	; (800814c <mem_free+0x118>)
 80080e6:	4813      	ldr	r0, [pc, #76]	; (8008134 <mem_free+0x100>)
 80080e8:	f00c fcb4 	bl	8014a54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80080ec:	4815      	ldr	r0, [pc, #84]	; (8008144 <mem_free+0x110>)
 80080ee:	f00b fe76 	bl	8013dde <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80080f2:	f00b fea7 	bl	8013e44 <sys_arch_protect>
 80080f6:	61b8      	str	r0, [r7, #24]
 80080f8:	69b8      	ldr	r0, [r7, #24]
 80080fa:	f00b feb1 	bl	8013e60 <sys_arch_unprotect>
    return;
 80080fe:	e012      	b.n	8008126 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	2200      	movs	r2, #0
 8008104:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8008106:	4b12      	ldr	r3, [pc, #72]	; (8008150 <mem_free+0x11c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	429a      	cmp	r2, r3
 800810e:	d202      	bcs.n	8008116 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008110:	4a0f      	ldr	r2, [pc, #60]	; (8008150 <mem_free+0x11c>)
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8008116:	69f8      	ldr	r0, [r7, #28]
 8008118:	f7ff fe5c 	bl	8007dd4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800811c:	4809      	ldr	r0, [pc, #36]	; (8008144 <mem_free+0x110>)
 800811e:	f00b fe5e 	bl	8013dde <sys_mutex_unlock>
 8008122:	e000      	b.n	8008126 <mem_free+0xf2>
    return;
 8008124:	bf00      	nop
}
 8008126:	3720      	adds	r7, #32
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	08015390 	.word	0x08015390
 8008130:	08015480 	.word	0x08015480
 8008134:	080153d8 	.word	0x080153d8
 8008138:	200106dc 	.word	0x200106dc
 800813c:	200106e0 	.word	0x200106e0
 8008140:	080154a4 	.word	0x080154a4
 8008144:	200106e4 	.word	0x200106e4
 8008148:	080154c0 	.word	0x080154c0
 800814c:	080154e8 	.word	0x080154e8
 8008150:	200106e8 	.word	0x200106e8

08008154 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8008160:	887b      	ldrh	r3, [r7, #2]
 8008162:	3303      	adds	r3, #3
 8008164:	b29b      	uxth	r3, r3
 8008166:	f023 0303 	bic.w	r3, r3, #3
 800816a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800816c:	8bfb      	ldrh	r3, [r7, #30]
 800816e:	2b0b      	cmp	r3, #11
 8008170:	d801      	bhi.n	8008176 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8008172:	230c      	movs	r3, #12
 8008174:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8008176:	8bfb      	ldrh	r3, [r7, #30]
 8008178:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800817c:	d803      	bhi.n	8008186 <mem_trim+0x32>
 800817e:	8bfa      	ldrh	r2, [r7, #30]
 8008180:	887b      	ldrh	r3, [r7, #2]
 8008182:	429a      	cmp	r2, r3
 8008184:	d201      	bcs.n	800818a <mem_trim+0x36>
    return NULL;
 8008186:	2300      	movs	r3, #0
 8008188:	e0d8      	b.n	800833c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800818a:	4b6e      	ldr	r3, [pc, #440]	; (8008344 <mem_trim+0x1f0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	429a      	cmp	r2, r3
 8008192:	d304      	bcc.n	800819e <mem_trim+0x4a>
 8008194:	4b6c      	ldr	r3, [pc, #432]	; (8008348 <mem_trim+0x1f4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d306      	bcc.n	80081ac <mem_trim+0x58>
 800819e:	4b6b      	ldr	r3, [pc, #428]	; (800834c <mem_trim+0x1f8>)
 80081a0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80081a4:	496a      	ldr	r1, [pc, #424]	; (8008350 <mem_trim+0x1fc>)
 80081a6:	486b      	ldr	r0, [pc, #428]	; (8008354 <mem_trim+0x200>)
 80081a8:	f00c fc54 	bl	8014a54 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80081ac:	4b65      	ldr	r3, [pc, #404]	; (8008344 <mem_trim+0x1f0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d304      	bcc.n	80081c0 <mem_trim+0x6c>
 80081b6:	4b64      	ldr	r3, [pc, #400]	; (8008348 <mem_trim+0x1f4>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d307      	bcc.n	80081d0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80081c0:	f00b fe40 	bl	8013e44 <sys_arch_protect>
 80081c4:	60b8      	str	r0, [r7, #8]
 80081c6:	68b8      	ldr	r0, [r7, #8]
 80081c8:	f00b fe4a 	bl	8013e60 <sys_arch_unprotect>
    return rmem;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	e0b5      	b.n	800833c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3b08      	subs	r3, #8
 80081d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80081d6:	69b8      	ldr	r0, [r7, #24]
 80081d8:	f7ff fdea 	bl	8007db0 <mem_to_ptr>
 80081dc:	4603      	mov	r3, r0
 80081de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	881a      	ldrh	r2, [r3, #0]
 80081e4:	8afb      	ldrh	r3, [r7, #22]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b08      	subs	r3, #8
 80081ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80081ee:	8bfa      	ldrh	r2, [r7, #30]
 80081f0:	8abb      	ldrh	r3, [r7, #20]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d906      	bls.n	8008204 <mem_trim+0xb0>
 80081f6:	4b55      	ldr	r3, [pc, #340]	; (800834c <mem_trim+0x1f8>)
 80081f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80081fc:	4956      	ldr	r1, [pc, #344]	; (8008358 <mem_trim+0x204>)
 80081fe:	4855      	ldr	r0, [pc, #340]	; (8008354 <mem_trim+0x200>)
 8008200:	f00c fc28 	bl	8014a54 <iprintf>
  if (newsize > size) {
 8008204:	8bfa      	ldrh	r2, [r7, #30]
 8008206:	8abb      	ldrh	r3, [r7, #20]
 8008208:	429a      	cmp	r2, r3
 800820a:	d901      	bls.n	8008210 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	e095      	b.n	800833c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8008210:	8bfa      	ldrh	r2, [r7, #30]
 8008212:	8abb      	ldrh	r3, [r7, #20]
 8008214:	429a      	cmp	r2, r3
 8008216:	d101      	bne.n	800821c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	e08f      	b.n	800833c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800821c:	484f      	ldr	r0, [pc, #316]	; (800835c <mem_trim+0x208>)
 800821e:	f00b fdcf 	bl	8013dc0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	881b      	ldrh	r3, [r3, #0]
 8008226:	4618      	mov	r0, r3
 8008228:	f7ff fdb0 	bl	8007d8c <ptr_to_mem>
 800822c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	791b      	ldrb	r3, [r3, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d13f      	bne.n	80082b6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800823e:	d106      	bne.n	800824e <mem_trim+0xfa>
 8008240:	4b42      	ldr	r3, [pc, #264]	; (800834c <mem_trim+0x1f8>)
 8008242:	f240 22f5 	movw	r2, #757	; 0x2f5
 8008246:	4946      	ldr	r1, [pc, #280]	; (8008360 <mem_trim+0x20c>)
 8008248:	4842      	ldr	r0, [pc, #264]	; (8008354 <mem_trim+0x200>)
 800824a:	f00c fc03 	bl	8014a54 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008254:	8afa      	ldrh	r2, [r7, #22]
 8008256:	8bfb      	ldrh	r3, [r7, #30]
 8008258:	4413      	add	r3, r2
 800825a:	b29b      	uxth	r3, r3
 800825c:	3308      	adds	r3, #8
 800825e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008260:	4b40      	ldr	r3, [pc, #256]	; (8008364 <mem_trim+0x210>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	429a      	cmp	r2, r3
 8008268:	d106      	bne.n	8008278 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800826a:	89fb      	ldrh	r3, [r7, #14]
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff fd8d 	bl	8007d8c <ptr_to_mem>
 8008272:	4603      	mov	r3, r0
 8008274:	4a3b      	ldr	r2, [pc, #236]	; (8008364 <mem_trim+0x210>)
 8008276:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008278:	89fb      	ldrh	r3, [r7, #14]
 800827a:	4618      	mov	r0, r3
 800827c:	f7ff fd86 	bl	8007d8c <ptr_to_mem>
 8008280:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	2200      	movs	r2, #0
 8008286:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	89ba      	ldrh	r2, [r7, #12]
 800828c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	8afa      	ldrh	r2, [r7, #22]
 8008292:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	89fa      	ldrh	r2, [r7, #14]
 8008298:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082a2:	d047      	beq.n	8008334 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fd6f 	bl	8007d8c <ptr_to_mem>
 80082ae:	4602      	mov	r2, r0
 80082b0:	89fb      	ldrh	r3, [r7, #14]
 80082b2:	8053      	strh	r3, [r2, #2]
 80082b4:	e03e      	b.n	8008334 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80082b6:	8bfb      	ldrh	r3, [r7, #30]
 80082b8:	f103 0214 	add.w	r2, r3, #20
 80082bc:	8abb      	ldrh	r3, [r7, #20]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d838      	bhi.n	8008334 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80082c2:	8afa      	ldrh	r2, [r7, #22]
 80082c4:	8bfb      	ldrh	r3, [r7, #30]
 80082c6:	4413      	add	r3, r2
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	3308      	adds	r3, #8
 80082cc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80082d6:	d106      	bne.n	80082e6 <mem_trim+0x192>
 80082d8:	4b1c      	ldr	r3, [pc, #112]	; (800834c <mem_trim+0x1f8>)
 80082da:	f240 3216 	movw	r2, #790	; 0x316
 80082de:	4920      	ldr	r1, [pc, #128]	; (8008360 <mem_trim+0x20c>)
 80082e0:	481c      	ldr	r0, [pc, #112]	; (8008354 <mem_trim+0x200>)
 80082e2:	f00c fbb7 	bl	8014a54 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80082e6:	89fb      	ldrh	r3, [r7, #14]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff fd4f 	bl	8007d8c <ptr_to_mem>
 80082ee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80082f0:	4b1c      	ldr	r3, [pc, #112]	; (8008364 <mem_trim+0x210>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d202      	bcs.n	8008300 <mem_trim+0x1ac>
      lfree = mem2;
 80082fa:	4a1a      	ldr	r2, [pc, #104]	; (8008364 <mem_trim+0x210>)
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	2200      	movs	r2, #0
 8008304:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	881a      	ldrh	r2, [r3, #0]
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	8afa      	ldrh	r2, [r7, #22]
 8008312:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	89fa      	ldrh	r2, [r7, #14]
 8008318:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008322:	d007      	beq.n	8008334 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff fd2f 	bl	8007d8c <ptr_to_mem>
 800832e:	4602      	mov	r2, r0
 8008330:	89fb      	ldrh	r3, [r7, #14]
 8008332:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008334:	4809      	ldr	r0, [pc, #36]	; (800835c <mem_trim+0x208>)
 8008336:	f00b fd52 	bl	8013dde <sys_mutex_unlock>
  return rmem;
 800833a:	687b      	ldr	r3, [r7, #4]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3720      	adds	r7, #32
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	200106dc 	.word	0x200106dc
 8008348:	200106e0 	.word	0x200106e0
 800834c:	08015390 	.word	0x08015390
 8008350:	0801551c 	.word	0x0801551c
 8008354:	080153d8 	.word	0x080153d8
 8008358:	08015534 	.word	0x08015534
 800835c:	200106e4 	.word	0x200106e4
 8008360:	08015554 	.word	0x08015554
 8008364:	200106e8 	.word	0x200106e8

08008368 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d101      	bne.n	800837c <mem_malloc+0x14>
    return NULL;
 8008378:	2300      	movs	r3, #0
 800837a:	e0e2      	b.n	8008542 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800837c:	88fb      	ldrh	r3, [r7, #6]
 800837e:	3303      	adds	r3, #3
 8008380:	b29b      	uxth	r3, r3
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008388:	8bbb      	ldrh	r3, [r7, #28]
 800838a:	2b0b      	cmp	r3, #11
 800838c:	d801      	bhi.n	8008392 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800838e:	230c      	movs	r3, #12
 8008390:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008392:	8bbb      	ldrh	r3, [r7, #28]
 8008394:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008398:	d803      	bhi.n	80083a2 <mem_malloc+0x3a>
 800839a:	8bba      	ldrh	r2, [r7, #28]
 800839c:	88fb      	ldrh	r3, [r7, #6]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d201      	bcs.n	80083a6 <mem_malloc+0x3e>
    return NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	e0cd      	b.n	8008542 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80083a6:	4869      	ldr	r0, [pc, #420]	; (800854c <mem_malloc+0x1e4>)
 80083a8:	f00b fd0a 	bl	8013dc0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80083ac:	4b68      	ldr	r3, [pc, #416]	; (8008550 <mem_malloc+0x1e8>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff fcfd 	bl	8007db0 <mem_to_ptr>
 80083b6:	4603      	mov	r3, r0
 80083b8:	83fb      	strh	r3, [r7, #30]
 80083ba:	e0b7      	b.n	800852c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80083bc:	8bfb      	ldrh	r3, [r7, #30]
 80083be:	4618      	mov	r0, r3
 80083c0:	f7ff fce4 	bl	8007d8c <ptr_to_mem>
 80083c4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	791b      	ldrb	r3, [r3, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f040 80a7 	bne.w	800851e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	8bfb      	ldrh	r3, [r7, #30]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	f1a3 0208 	sub.w	r2, r3, #8
 80083de:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80083e0:	429a      	cmp	r2, r3
 80083e2:	f0c0 809c 	bcc.w	800851e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	881b      	ldrh	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	8bfb      	ldrh	r3, [r7, #30]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	f1a3 0208 	sub.w	r2, r3, #8
 80083f4:	8bbb      	ldrh	r3, [r7, #28]
 80083f6:	3314      	adds	r3, #20
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d333      	bcc.n	8008464 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80083fc:	8bfa      	ldrh	r2, [r7, #30]
 80083fe:	8bbb      	ldrh	r3, [r7, #28]
 8008400:	4413      	add	r3, r2
 8008402:	b29b      	uxth	r3, r3
 8008404:	3308      	adds	r3, #8
 8008406:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008408:	8a7b      	ldrh	r3, [r7, #18]
 800840a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800840e:	d106      	bne.n	800841e <mem_malloc+0xb6>
 8008410:	4b50      	ldr	r3, [pc, #320]	; (8008554 <mem_malloc+0x1ec>)
 8008412:	f240 3287 	movw	r2, #903	; 0x387
 8008416:	4950      	ldr	r1, [pc, #320]	; (8008558 <mem_malloc+0x1f0>)
 8008418:	4850      	ldr	r0, [pc, #320]	; (800855c <mem_malloc+0x1f4>)
 800841a:	f00c fb1b 	bl	8014a54 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800841e:	8a7b      	ldrh	r3, [r7, #18]
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff fcb3 	bl	8007d8c <ptr_to_mem>
 8008426:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	881a      	ldrh	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	8bfa      	ldrh	r2, [r7, #30]
 800843a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	8a7a      	ldrh	r2, [r7, #18]
 8008440:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2201      	movs	r2, #1
 8008446:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008450:	d00b      	beq.n	800846a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff fc98 	bl	8007d8c <ptr_to_mem>
 800845c:	4602      	mov	r2, r0
 800845e:	8a7b      	ldrh	r3, [r7, #18]
 8008460:	8053      	strh	r3, [r2, #2]
 8008462:	e002      	b.n	800846a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2201      	movs	r2, #1
 8008468:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800846a:	4b39      	ldr	r3, [pc, #228]	; (8008550 <mem_malloc+0x1e8>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	429a      	cmp	r2, r3
 8008472:	d127      	bne.n	80084c4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8008474:	4b36      	ldr	r3, [pc, #216]	; (8008550 <mem_malloc+0x1e8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800847a:	e005      	b.n	8008488 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff fc83 	bl	8007d8c <ptr_to_mem>
 8008486:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	791b      	ldrb	r3, [r3, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <mem_malloc+0x132>
 8008490:	4b33      	ldr	r3, [pc, #204]	; (8008560 <mem_malloc+0x1f8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69ba      	ldr	r2, [r7, #24]
 8008496:	429a      	cmp	r2, r3
 8008498:	d1f0      	bne.n	800847c <mem_malloc+0x114>
          }
          lfree = cur;
 800849a:	4a2d      	ldr	r2, [pc, #180]	; (8008550 <mem_malloc+0x1e8>)
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80084a0:	4b2b      	ldr	r3, [pc, #172]	; (8008550 <mem_malloc+0x1e8>)
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	4b2e      	ldr	r3, [pc, #184]	; (8008560 <mem_malloc+0x1f8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d00b      	beq.n	80084c4 <mem_malloc+0x15c>
 80084ac:	4b28      	ldr	r3, [pc, #160]	; (8008550 <mem_malloc+0x1e8>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	791b      	ldrb	r3, [r3, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d006      	beq.n	80084c4 <mem_malloc+0x15c>
 80084b6:	4b27      	ldr	r3, [pc, #156]	; (8008554 <mem_malloc+0x1ec>)
 80084b8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80084bc:	4929      	ldr	r1, [pc, #164]	; (8008564 <mem_malloc+0x1fc>)
 80084be:	4827      	ldr	r0, [pc, #156]	; (800855c <mem_malloc+0x1f4>)
 80084c0:	f00c fac8 	bl	8014a54 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80084c4:	4821      	ldr	r0, [pc, #132]	; (800854c <mem_malloc+0x1e4>)
 80084c6:	f00b fc8a 	bl	8013dde <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80084ca:	8bba      	ldrh	r2, [r7, #28]
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	4413      	add	r3, r2
 80084d0:	3308      	adds	r3, #8
 80084d2:	4a23      	ldr	r2, [pc, #140]	; (8008560 <mem_malloc+0x1f8>)
 80084d4:	6812      	ldr	r2, [r2, #0]
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d906      	bls.n	80084e8 <mem_malloc+0x180>
 80084da:	4b1e      	ldr	r3, [pc, #120]	; (8008554 <mem_malloc+0x1ec>)
 80084dc:	f240 32b9 	movw	r2, #953	; 0x3b9
 80084e0:	4921      	ldr	r1, [pc, #132]	; (8008568 <mem_malloc+0x200>)
 80084e2:	481e      	ldr	r0, [pc, #120]	; (800855c <mem_malloc+0x1f4>)
 80084e4:	f00c fab6 	bl	8014a54 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d006      	beq.n	8008500 <mem_malloc+0x198>
 80084f2:	4b18      	ldr	r3, [pc, #96]	; (8008554 <mem_malloc+0x1ec>)
 80084f4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80084f8:	491c      	ldr	r1, [pc, #112]	; (800856c <mem_malloc+0x204>)
 80084fa:	4818      	ldr	r0, [pc, #96]	; (800855c <mem_malloc+0x1f4>)
 80084fc:	f00c faaa 	bl	8014a54 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f003 0303 	and.w	r3, r3, #3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d006      	beq.n	8008518 <mem_malloc+0x1b0>
 800850a:	4b12      	ldr	r3, [pc, #72]	; (8008554 <mem_malloc+0x1ec>)
 800850c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008510:	4917      	ldr	r1, [pc, #92]	; (8008570 <mem_malloc+0x208>)
 8008512:	4812      	ldr	r0, [pc, #72]	; (800855c <mem_malloc+0x1f4>)
 8008514:	f00c fa9e 	bl	8014a54 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	3308      	adds	r3, #8
 800851c:	e011      	b.n	8008542 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800851e:	8bfb      	ldrh	r3, [r7, #30]
 8008520:	4618      	mov	r0, r3
 8008522:	f7ff fc33 	bl	8007d8c <ptr_to_mem>
 8008526:	4603      	mov	r3, r0
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800852c:	8bfa      	ldrh	r2, [r7, #30]
 800852e:	8bbb      	ldrh	r3, [r7, #28]
 8008530:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008534:	429a      	cmp	r2, r3
 8008536:	f4ff af41 	bcc.w	80083bc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800853a:	4804      	ldr	r0, [pc, #16]	; (800854c <mem_malloc+0x1e4>)
 800853c:	f00b fc4f 	bl	8013dde <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3720      	adds	r7, #32
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	200106e4 	.word	0x200106e4
 8008550:	200106e8 	.word	0x200106e8
 8008554:	08015390 	.word	0x08015390
 8008558:	08015554 	.word	0x08015554
 800855c:	080153d8 	.word	0x080153d8
 8008560:	200106e0 	.word	0x200106e0
 8008564:	08015568 	.word	0x08015568
 8008568:	08015584 	.word	0x08015584
 800856c:	080155b4 	.word	0x080155b4
 8008570:	080155e4 	.word	0x080155e4

08008574 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	3303      	adds	r3, #3
 800858a:	f023 0303 	bic.w	r3, r3, #3
 800858e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e011      	b.n	80085ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	4413      	add	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3301      	adds	r3, #1
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	885b      	ldrh	r3, [r3, #2]
 80085be:	461a      	mov	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	4293      	cmp	r3, r2
 80085c4:	dbe7      	blt.n	8008596 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80085c6:	bf00      	nop
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80085da:	2300      	movs	r3, #0
 80085dc:	80fb      	strh	r3, [r7, #6]
 80085de:	e009      	b.n	80085f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80085e0:	88fb      	ldrh	r3, [r7, #6]
 80085e2:	4a08      	ldr	r2, [pc, #32]	; (8008604 <memp_init+0x30>)
 80085e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff ffc3 	bl	8008574 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	3301      	adds	r3, #1
 80085f2:	80fb      	strh	r3, [r7, #6]
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	2b0c      	cmp	r3, #12
 80085f8:	d9f2      	bls.n	80085e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	08018198 	.word	0x08018198

08008608 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008610:	f00b fc18 	bl	8013e44 <sys_arch_protect>
 8008614:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d015      	beq.n	8008650 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	6812      	ldr	r2, [r2, #0]
 800862c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f003 0303 	and.w	r3, r3, #3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d006      	beq.n	8008646 <do_memp_malloc_pool+0x3e>
 8008638:	4b09      	ldr	r3, [pc, #36]	; (8008660 <do_memp_malloc_pool+0x58>)
 800863a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800863e:	4909      	ldr	r1, [pc, #36]	; (8008664 <do_memp_malloc_pool+0x5c>)
 8008640:	4809      	ldr	r0, [pc, #36]	; (8008668 <do_memp_malloc_pool+0x60>)
 8008642:	f00c fa07 	bl	8014a54 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f00b fc0a 	bl	8013e60 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	e003      	b.n	8008658 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f00b fc05 	bl	8013e60 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	08015608 	.word	0x08015608
 8008664:	08015638 	.word	0x08015638
 8008668:	0801565c 	.word	0x0801565c

0800866c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <memp_malloc_pool+0x1c>
 800867a:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <memp_malloc_pool+0x38>)
 800867c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8008680:	4909      	ldr	r1, [pc, #36]	; (80086a8 <memp_malloc_pool+0x3c>)
 8008682:	480a      	ldr	r0, [pc, #40]	; (80086ac <memp_malloc_pool+0x40>)
 8008684:	f00c f9e6 	bl	8014a54 <iprintf>
  if (desc == NULL) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d101      	bne.n	8008692 <memp_malloc_pool+0x26>
    return NULL;
 800868e:	2300      	movs	r3, #0
 8008690:	e003      	b.n	800869a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f7ff ffb8 	bl	8008608 <do_memp_malloc_pool>
 8008698:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	08015608 	.word	0x08015608
 80086a8:	08015684 	.word	0x08015684
 80086ac:	0801565c 	.word	0x0801565c

080086b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80086ba:	79fb      	ldrb	r3, [r7, #7]
 80086bc:	2b0c      	cmp	r3, #12
 80086be:	d908      	bls.n	80086d2 <memp_malloc+0x22>
 80086c0:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <memp_malloc+0x3c>)
 80086c2:	f240 1257 	movw	r2, #343	; 0x157
 80086c6:	490a      	ldr	r1, [pc, #40]	; (80086f0 <memp_malloc+0x40>)
 80086c8:	480a      	ldr	r0, [pc, #40]	; (80086f4 <memp_malloc+0x44>)
 80086ca:	f00c f9c3 	bl	8014a54 <iprintf>
 80086ce:	2300      	movs	r3, #0
 80086d0:	e008      	b.n	80086e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	4a08      	ldr	r2, [pc, #32]	; (80086f8 <memp_malloc+0x48>)
 80086d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff ff94 	bl	8008608 <do_memp_malloc_pool>
 80086e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80086e2:	68fb      	ldr	r3, [r7, #12]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	08015608 	.word	0x08015608
 80086f0:	08015698 	.word	0x08015698
 80086f4:	0801565c 	.word	0x0801565c
 80086f8:	08018198 	.word	0x08018198

080086fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	f003 0303 	and.w	r3, r3, #3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d006      	beq.n	800871e <do_memp_free_pool+0x22>
 8008710:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <do_memp_free_pool+0x4c>)
 8008712:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008716:	490d      	ldr	r1, [pc, #52]	; (800874c <do_memp_free_pool+0x50>)
 8008718:	480d      	ldr	r0, [pc, #52]	; (8008750 <do_memp_free_pool+0x54>)
 800871a:	f00c f99b 	bl	8014a54 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008722:	f00b fb8f 	bl	8013e44 <sys_arch_protect>
 8008726:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800873a:	68b8      	ldr	r0, [r7, #8]
 800873c:	f00b fb90 	bl	8013e60 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008740:	bf00      	nop
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	08015608 	.word	0x08015608
 800874c:	080156b8 	.word	0x080156b8
 8008750:	0801565c 	.word	0x0801565c

08008754 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d106      	bne.n	8008772 <memp_free_pool+0x1e>
 8008764:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <memp_free_pool+0x3c>)
 8008766:	f240 1295 	movw	r2, #405	; 0x195
 800876a:	490a      	ldr	r1, [pc, #40]	; (8008794 <memp_free_pool+0x40>)
 800876c:	480a      	ldr	r0, [pc, #40]	; (8008798 <memp_free_pool+0x44>)
 800876e:	f00c f971 	bl	8014a54 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <memp_free_pool+0x34>
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d004      	beq.n	8008788 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff ffbb 	bl	80086fc <do_memp_free_pool>
 8008786:	e000      	b.n	800878a <memp_free_pool+0x36>
    return;
 8008788:	bf00      	nop
}
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	08015608 	.word	0x08015608
 8008794:	08015684 	.word	0x08015684
 8008798:	0801565c 	.word	0x0801565c

0800879c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	6039      	str	r1, [r7, #0]
 80087a6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	2b0c      	cmp	r3, #12
 80087ac:	d907      	bls.n	80087be <memp_free+0x22>
 80087ae:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <memp_free+0x44>)
 80087b0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80087b4:	490b      	ldr	r1, [pc, #44]	; (80087e4 <memp_free+0x48>)
 80087b6:	480c      	ldr	r0, [pc, #48]	; (80087e8 <memp_free+0x4c>)
 80087b8:	f00c f94c 	bl	8014a54 <iprintf>
 80087bc:	e00c      	b.n	80087d8 <memp_free+0x3c>

  if (mem == NULL) {
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80087c4:	79fb      	ldrb	r3, [r7, #7]
 80087c6:	4a09      	ldr	r2, [pc, #36]	; (80087ec <memp_free+0x50>)
 80087c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff ff94 	bl	80086fc <do_memp_free_pool>
 80087d4:	e000      	b.n	80087d8 <memp_free+0x3c>
    return;
 80087d6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	08015608 	.word	0x08015608
 80087e4:	080156d8 	.word	0x080156d8
 80087e8:	0801565c 	.word	0x0801565c
 80087ec:	08018198 	.word	0x08018198

080087f0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80087f4:	bf00      	nop
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
	...

08008800 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d108      	bne.n	8008826 <netif_add+0x26>
 8008814:	4b5b      	ldr	r3, [pc, #364]	; (8008984 <netif_add+0x184>)
 8008816:	f240 1227 	movw	r2, #295	; 0x127
 800881a:	495b      	ldr	r1, [pc, #364]	; (8008988 <netif_add+0x188>)
 800881c:	485b      	ldr	r0, [pc, #364]	; (800898c <netif_add+0x18c>)
 800881e:	f00c f919 	bl	8014a54 <iprintf>
 8008822:	2300      	movs	r3, #0
 8008824:	e0a9      	b.n	800897a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d108      	bne.n	800883e <netif_add+0x3e>
 800882c:	4b55      	ldr	r3, [pc, #340]	; (8008984 <netif_add+0x184>)
 800882e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008832:	4957      	ldr	r1, [pc, #348]	; (8008990 <netif_add+0x190>)
 8008834:	4855      	ldr	r0, [pc, #340]	; (800898c <netif_add+0x18c>)
 8008836:	f00c f90d 	bl	8014a54 <iprintf>
 800883a:	2300      	movs	r3, #0
 800883c:	e09d      	b.n	800897a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008844:	4b53      	ldr	r3, [pc, #332]	; (8008994 <netif_add+0x194>)
 8008846:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800884e:	4b51      	ldr	r3, [pc, #324]	; (8008994 <netif_add+0x194>)
 8008850:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008858:	4b4e      	ldr	r3, [pc, #312]	; (8008994 <netif_add+0x194>)
 800885a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4a49      	ldr	r2, [pc, #292]	; (8008998 <netif_add+0x198>)
 8008872:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3324      	adds	r3, #36	; 0x24
 8008886:	2204      	movs	r2, #4
 8008888:	2100      	movs	r1, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f00b fd42 	bl	8014314 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a3a      	ldr	r2, [r7, #32]
 800889a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800889c:	4b3f      	ldr	r3, [pc, #252]	; (800899c <netif_add+0x19c>)
 800889e:	781a      	ldrb	r2, [r3, #0]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088aa:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 f914 	bl	8008ae0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	4798      	blx	r3
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <netif_add+0xc8>
    return NULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	e058      	b.n	800897a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088ce:	2bff      	cmp	r3, #255	; 0xff
 80088d0:	d103      	bne.n	80088da <netif_add+0xda>
        netif->num = 0;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80088de:	4b30      	ldr	r3, [pc, #192]	; (80089a0 <netif_add+0x1a0>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	e02b      	b.n	800893e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d106      	bne.n	80088fc <netif_add+0xfc>
 80088ee:	4b25      	ldr	r3, [pc, #148]	; (8008984 <netif_add+0x184>)
 80088f0:	f240 128b 	movw	r2, #395	; 0x18b
 80088f4:	492b      	ldr	r1, [pc, #172]	; (80089a4 <netif_add+0x1a4>)
 80088f6:	4825      	ldr	r0, [pc, #148]	; (800898c <netif_add+0x18c>)
 80088f8:	f00c f8ac 	bl	8014a54 <iprintf>
        num_netifs++;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	3301      	adds	r3, #1
 8008900:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	2bff      	cmp	r3, #255	; 0xff
 8008906:	dd06      	ble.n	8008916 <netif_add+0x116>
 8008908:	4b1e      	ldr	r3, [pc, #120]	; (8008984 <netif_add+0x184>)
 800890a:	f240 128d 	movw	r2, #397	; 0x18d
 800890e:	4926      	ldr	r1, [pc, #152]	; (80089a8 <netif_add+0x1a8>)
 8008910:	481e      	ldr	r0, [pc, #120]	; (800898c <netif_add+0x18c>)
 8008912:	f00c f89f 	bl	8014a54 <iprintf>
        if (netif2->num == netif->num) {
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008922:	429a      	cmp	r2, r3
 8008924:	d108      	bne.n	8008938 <netif_add+0x138>
          netif->num++;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800892c:	3301      	adds	r3, #1
 800892e:	b2da      	uxtb	r2, r3
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8008936:	e005      	b.n	8008944 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	617b      	str	r3, [r7, #20]
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1d0      	bne.n	80088e6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1be      	bne.n	80088c8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008950:	2bfe      	cmp	r3, #254	; 0xfe
 8008952:	d103      	bne.n	800895c <netif_add+0x15c>
    netif_num = 0;
 8008954:	4b11      	ldr	r3, [pc, #68]	; (800899c <netif_add+0x19c>)
 8008956:	2200      	movs	r2, #0
 8008958:	701a      	strb	r2, [r3, #0]
 800895a:	e006      	b.n	800896a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008962:	3301      	adds	r3, #1
 8008964:	b2da      	uxtb	r2, r3
 8008966:	4b0d      	ldr	r3, [pc, #52]	; (800899c <netif_add+0x19c>)
 8008968:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800896a:	4b0d      	ldr	r3, [pc, #52]	; (80089a0 <netif_add+0x1a0>)
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008972:	4a0b      	ldr	r2, [pc, #44]	; (80089a0 <netif_add+0x1a0>)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008978:	68fb      	ldr	r3, [r7, #12]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	080156f4 	.word	0x080156f4
 8008988:	08015788 	.word	0x08015788
 800898c:	08015744 	.word	0x08015744
 8008990:	080157a4 	.word	0x080157a4
 8008994:	0801821c 	.word	0x0801821c
 8008998:	08008dc3 	.word	0x08008dc3
 800899c:	20010720 	.word	0x20010720
 80089a0:	20018d2c 	.word	0x20018d2c
 80089a4:	080157c8 	.word	0x080157c8
 80089a8:	080157dc 	.word	0x080157dc

080089ac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80089b6:	6839      	ldr	r1, [r7, #0]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f002 fb91 	bl	800b0e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f006 ffa3 	bl	800f90c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80089c6:	bf00      	nop
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
	...

080089d0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d106      	bne.n	80089f0 <netif_do_set_ipaddr+0x20>
 80089e2:	4b1d      	ldr	r3, [pc, #116]	; (8008a58 <netif_do_set_ipaddr+0x88>)
 80089e4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80089e8:	491c      	ldr	r1, [pc, #112]	; (8008a5c <netif_do_set_ipaddr+0x8c>)
 80089ea:	481d      	ldr	r0, [pc, #116]	; (8008a60 <netif_do_set_ipaddr+0x90>)
 80089ec:	f00c f832 	bl	8014a54 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <netif_do_set_ipaddr+0x34>
 80089f6:	4b18      	ldr	r3, [pc, #96]	; (8008a58 <netif_do_set_ipaddr+0x88>)
 80089f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80089fc:	4917      	ldr	r1, [pc, #92]	; (8008a5c <netif_do_set_ipaddr+0x8c>)
 80089fe:	4818      	ldr	r0, [pc, #96]	; (8008a60 <netif_do_set_ipaddr+0x90>)
 8008a00:	f00c f828 	bl	8014a54 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d01c      	beq.n	8008a4c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008a22:	f107 0314 	add.w	r3, r7, #20
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff ffbf 	bl	80089ac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <netif_do_set_ipaddr+0x6a>
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	e000      	b.n	8008a3c <netif_do_set_ipaddr+0x6c>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008a40:	2101      	movs	r1, #1
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 f8d2 	bl	8008bec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e000      	b.n	8008a4e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	080156f4 	.word	0x080156f4
 8008a5c:	0801580c 	.word	0x0801580c
 8008a60:	08015744 	.word	0x08015744

08008a64 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3308      	adds	r3, #8
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d00a      	beq.n	8008a94 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <netif_do_set_netmask+0x26>
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	e000      	b.n	8008a8c <netif_do_set_netmask+0x28>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008a90:	2301      	movs	r3, #1
 8008a92:	e000      	b.n	8008a96 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr

08008aa2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008aa2:	b480      	push	{r7}
 8008aa4:	b085      	sub	sp, #20
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	330c      	adds	r3, #12
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d00a      	beq.n	8008ad2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <netif_do_set_gw+0x26>
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	e000      	b.n	8008aca <netif_do_set_gw+0x28>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b088      	sub	sp, #32
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008aee:	2300      	movs	r3, #0
 8008af0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008afc:	4b1c      	ldr	r3, [pc, #112]	; (8008b70 <netif_set_addr+0x90>)
 8008afe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008b06:	4b1a      	ldr	r3, [pc, #104]	; (8008b70 <netif_set_addr+0x90>)
 8008b08:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008b10:	4b17      	ldr	r3, [pc, #92]	; (8008b70 <netif_set_addr+0x90>)
 8008b12:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <netif_set_addr+0x42>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <netif_set_addr+0x46>
 8008b22:	2301      	movs	r3, #1
 8008b24:	e000      	b.n	8008b28 <netif_set_addr+0x48>
 8008b26:	2300      	movs	r3, #0
 8008b28:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d006      	beq.n	8008b3e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008b30:	f107 0310 	add.w	r3, r7, #16
 8008b34:	461a      	mov	r2, r3
 8008b36:	68b9      	ldr	r1, [r7, #8]
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f7ff ff49 	bl	80089d0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008b3e:	69fa      	ldr	r2, [r7, #28]
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7ff ff8e 	bl	8008a64 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f7ff ffa8 	bl	8008aa2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008b58:	f107 0310 	add.w	r3, r7, #16
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	68b9      	ldr	r1, [r7, #8]
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff ff35 	bl	80089d0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008b66:	bf00      	nop
 8008b68:	3720      	adds	r7, #32
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	0801821c 	.word	0x0801821c

08008b74 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008b7c:	4a04      	ldr	r2, [pc, #16]	; (8008b90 <netif_set_default+0x1c>)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20018d30 	.word	0x20018d30

08008b94 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d107      	bne.n	8008bb2 <netif_set_up+0x1e>
 8008ba2:	4b0f      	ldr	r3, [pc, #60]	; (8008be0 <netif_set_up+0x4c>)
 8008ba4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008ba8:	490e      	ldr	r1, [pc, #56]	; (8008be4 <netif_set_up+0x50>)
 8008baa:	480f      	ldr	r0, [pc, #60]	; (8008be8 <netif_set_up+0x54>)
 8008bac:	f00b ff52 	bl	8014a54 <iprintf>
 8008bb0:	e013      	b.n	8008bda <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10c      	bne.n	8008bda <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008bc6:	f043 0301 	orr.w	r3, r3, #1
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008bd2:	2103      	movs	r1, #3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f809 	bl	8008bec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	080156f4 	.word	0x080156f4
 8008be4:	0801587c 	.word	0x0801587c
 8008be8:	08015744 	.word	0x08015744

08008bec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <netif_issue_reports+0x20>
 8008bfe:	4b18      	ldr	r3, [pc, #96]	; (8008c60 <netif_issue_reports+0x74>)
 8008c00:	f240 326d 	movw	r2, #877	; 0x36d
 8008c04:	4917      	ldr	r1, [pc, #92]	; (8008c64 <netif_issue_reports+0x78>)
 8008c06:	4818      	ldr	r0, [pc, #96]	; (8008c68 <netif_issue_reports+0x7c>)
 8008c08:	f00b ff24 	bl	8014a54 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d01e      	beq.n	8008c58 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c20:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d017      	beq.n	8008c58 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	f003 0301 	and.w	r3, r3, #1
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d013      	beq.n	8008c5a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	3304      	adds	r3, #4
 8008c36:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00e      	beq.n	8008c5a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d007      	beq.n	8008c5a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	3304      	adds	r3, #4
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f009 fc5b 	bl	801250c <etharp_request>
 8008c56:	e000      	b.n	8008c5a <netif_issue_reports+0x6e>
    return;
 8008c58:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	080156f4 	.word	0x080156f4
 8008c64:	08015898 	.word	0x08015898
 8008c68:	08015744 	.word	0x08015744

08008c6c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d107      	bne.n	8008c8a <netif_set_down+0x1e>
 8008c7a:	4b12      	ldr	r3, [pc, #72]	; (8008cc4 <netif_set_down+0x58>)
 8008c7c:	f240 329b 	movw	r2, #923	; 0x39b
 8008c80:	4911      	ldr	r1, [pc, #68]	; (8008cc8 <netif_set_down+0x5c>)
 8008c82:	4812      	ldr	r0, [pc, #72]	; (8008ccc <netif_set_down+0x60>)
 8008c84:	f00b fee6 	bl	8014a54 <iprintf>
 8008c88:	e019      	b.n	8008cbe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d012      	beq.n	8008cbe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008cb0:	f003 0308 	and.w	r3, r3, #8
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f008 ffe1 	bl	8011c80 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	080156f4 	.word	0x080156f4
 8008cc8:	080158bc 	.word	0x080158bc
 8008ccc:	08015744 	.word	0x08015744

08008cd0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d107      	bne.n	8008cee <netif_set_link_up+0x1e>
 8008cde:	4b15      	ldr	r3, [pc, #84]	; (8008d34 <netif_set_link_up+0x64>)
 8008ce0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008ce4:	4914      	ldr	r1, [pc, #80]	; (8008d38 <netif_set_link_up+0x68>)
 8008ce6:	4815      	ldr	r0, [pc, #84]	; (8008d3c <netif_set_link_up+0x6c>)
 8008ce8:	f00b feb4 	bl	8014a54 <iprintf>
 8008cec:	e01e      	b.n	8008d2c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008cf4:	f003 0304 	and.w	r3, r3, #4
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d117      	bne.n	8008d2c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d02:	f043 0304 	orr.w	r3, r3, #4
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f007 fa26 	bl	8010160 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008d14:	2103      	movs	r1, #3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f7ff ff68 	bl	8008bec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <netif_set_link_up+0x5c>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	080156f4 	.word	0x080156f4
 8008d38:	080158dc 	.word	0x080158dc
 8008d3c:	08015744 	.word	0x08015744

08008d40 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d107      	bne.n	8008d5e <netif_set_link_down+0x1e>
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <netif_set_link_down+0x54>)
 8008d50:	f240 4206 	movw	r2, #1030	; 0x406
 8008d54:	4910      	ldr	r1, [pc, #64]	; (8008d98 <netif_set_link_down+0x58>)
 8008d56:	4811      	ldr	r0, [pc, #68]	; (8008d9c <netif_set_link_down+0x5c>)
 8008d58:	f00b fe7c 	bl	8014a54 <iprintf>
 8008d5c:	e017      	b.n	8008d8e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d010      	beq.n	8008d8e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008d72:	f023 0304 	bic.w	r3, r3, #4
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <netif_set_link_down+0x4e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	080156f4 	.word	0x080156f4
 8008d98:	08015900 	.word	0x08015900
 8008d9c:	08015744 	.word	0x08015744

08008da0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	61da      	str	r2, [r3, #28]
  }
}
 8008db6:	bf00      	nop
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b085      	sub	sp, #20
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	60b9      	str	r1, [r7, #8]
 8008dcc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008dce:	f06f 030b 	mvn.w	r3, #11
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	4603      	mov	r3, r0
 8008de8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008dea:	79fb      	ldrb	r3, [r7, #7]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d013      	beq.n	8008e18 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008df0:	4b0d      	ldr	r3, [pc, #52]	; (8008e28 <netif_get_by_index+0x48>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	60fb      	str	r3, [r7, #12]
 8008df6:	e00c      	b.n	8008e12 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dfe:	3301      	adds	r3, #1
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	79fa      	ldrb	r2, [r7, #7]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d101      	bne.n	8008e0c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	e006      	b.n	8008e1a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1ef      	bne.n	8008df8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	20018d2c 	.word	0x20018d2c

08008e2c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008e32:	f00b f807 	bl	8013e44 <sys_arch_protect>
 8008e36:	6038      	str	r0, [r7, #0]
 8008e38:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <pbuf_free_ooseq+0x44>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	6838      	ldr	r0, [r7, #0]
 8008e40:	f00b f80e 	bl	8013e60 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008e44:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <pbuf_free_ooseq+0x48>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	607b      	str	r3, [r7, #4]
 8008e4a:	e00a      	b.n	8008e62 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f002 f981 	bl	800b15c <tcp_free_ooseq>
      return;
 8008e5a:	e005      	b.n	8008e68 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	607b      	str	r3, [r7, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1f1      	bne.n	8008e4c <pbuf_free_ooseq+0x20>
    }
  }
}
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20018d34 	.word	0x20018d34
 8008e74:	20018d3c 	.word	0x20018d3c

08008e78 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008e80:	f7ff ffd4 	bl	8008e2c <pbuf_free_ooseq>
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008e92:	f00a ffd7 	bl	8013e44 <sys_arch_protect>
 8008e96:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008e98:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <pbuf_pool_is_empty+0x4c>)
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <pbuf_pool_is_empty+0x4c>)
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f00a ffdb 	bl	8013e60 <sys_arch_unprotect>

  if (!queued) {
 8008eaa:	78fb      	ldrb	r3, [r7, #3]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10f      	bne.n	8008ed0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	480a      	ldr	r0, [pc, #40]	; (8008edc <pbuf_pool_is_empty+0x50>)
 8008eb4:	f7fe fe9a 	bl	8007bec <tcpip_try_callback>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d008      	beq.n	8008ed0 <pbuf_pool_is_empty+0x44>
 8008ebe:	f00a ffc1 	bl	8013e44 <sys_arch_protect>
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	4b04      	ldr	r3, [pc, #16]	; (8008ed8 <pbuf_pool_is_empty+0x4c>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f00a ffc8 	bl	8013e60 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20018d34 	.word	0x20018d34
 8008edc:	08008e79 	.word	0x08008e79

08008ee0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4611      	mov	r1, r2
 8008eec:	461a      	mov	r2, r3
 8008eee:	460b      	mov	r3, r1
 8008ef0:	80fb      	strh	r3, [r7, #6]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	88fa      	ldrh	r2, [r7, #6]
 8008f06:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	88ba      	ldrh	r2, [r7, #4]
 8008f0c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008f0e:	8b3b      	ldrh	r3, [r7, #24]
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	7f3a      	ldrb	r2, [r7, #28]
 8008f1a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	73da      	strb	r2, [r3, #15]
}
 8008f28:	bf00      	nop
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08c      	sub	sp, #48	; 0x30
 8008f38:	af02      	add	r7, sp, #8
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	71fb      	strb	r3, [r7, #7]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	80bb      	strh	r3, [r7, #4]
 8008f42:	4613      	mov	r3, r2
 8008f44:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008f46:	79fb      	ldrb	r3, [r7, #7]
 8008f48:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008f4a:	887b      	ldrh	r3, [r7, #2]
 8008f4c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008f50:	d07f      	beq.n	8009052 <pbuf_alloc+0x11e>
 8008f52:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008f56:	f300 80c8 	bgt.w	80090ea <pbuf_alloc+0x1b6>
 8008f5a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008f5e:	d010      	beq.n	8008f82 <pbuf_alloc+0x4e>
 8008f60:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008f64:	f300 80c1 	bgt.w	80090ea <pbuf_alloc+0x1b6>
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d002      	beq.n	8008f72 <pbuf_alloc+0x3e>
 8008f6c:	2b41      	cmp	r3, #65	; 0x41
 8008f6e:	f040 80bc 	bne.w	80090ea <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008f72:	887a      	ldrh	r2, [r7, #2]
 8008f74:	88bb      	ldrh	r3, [r7, #4]
 8008f76:	4619      	mov	r1, r3
 8008f78:	2000      	movs	r0, #0
 8008f7a:	f000 f8d1 	bl	8009120 <pbuf_alloc_reference>
 8008f7e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008f80:	e0bd      	b.n	80090fe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008f8a:	88bb      	ldrh	r3, [r7, #4]
 8008f8c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008f8e:	200c      	movs	r0, #12
 8008f90:	f7ff fb8e 	bl	80086b0 <memp_malloc>
 8008f94:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d109      	bne.n	8008fb0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008f9c:	f7ff ff76 	bl	8008e8c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <pbuf_alloc+0x78>
            pbuf_free(p);
 8008fa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fa8:	f000 faa8 	bl	80094fc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008fac:	2300      	movs	r3, #0
 8008fae:	e0a7      	b.n	8009100 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008fb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008fb2:	3303      	adds	r3, #3
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	f023 0303 	bic.w	r3, r3, #3
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	8b7a      	ldrh	r2, [r7, #26]
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	bf28      	it	cs
 8008fc8:	4613      	movcs	r3, r2
 8008fca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008fcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008fce:	3310      	adds	r3, #16
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	3303      	adds	r3, #3
 8008fd6:	f023 0303 	bic.w	r3, r3, #3
 8008fda:	4618      	mov	r0, r3
 8008fdc:	89f9      	ldrh	r1, [r7, #14]
 8008fde:	8b7a      	ldrh	r2, [r7, #26]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	9301      	str	r3, [sp, #4]
 8008fe4:	887b      	ldrh	r3, [r7, #2]
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4601      	mov	r1, r0
 8008fec:	6938      	ldr	r0, [r7, #16]
 8008fee:	f7ff ff77 	bl	8008ee0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d006      	beq.n	800900c <pbuf_alloc+0xd8>
 8008ffe:	4b42      	ldr	r3, [pc, #264]	; (8009108 <pbuf_alloc+0x1d4>)
 8009000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009004:	4941      	ldr	r1, [pc, #260]	; (800910c <pbuf_alloc+0x1d8>)
 8009006:	4842      	ldr	r0, [pc, #264]	; (8009110 <pbuf_alloc+0x1dc>)
 8009008:	f00b fd24 	bl	8014a54 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800900c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800900e:	3303      	adds	r3, #3
 8009010:	f023 0303 	bic.w	r3, r3, #3
 8009014:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009018:	d106      	bne.n	8009028 <pbuf_alloc+0xf4>
 800901a:	4b3b      	ldr	r3, [pc, #236]	; (8009108 <pbuf_alloc+0x1d4>)
 800901c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8009020:	493c      	ldr	r1, [pc, #240]	; (8009114 <pbuf_alloc+0x1e0>)
 8009022:	483b      	ldr	r0, [pc, #236]	; (8009110 <pbuf_alloc+0x1dc>)
 8009024:	f00b fd16 	bl	8014a54 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	2b00      	cmp	r3, #0
 800902c:	d102      	bne.n	8009034 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
 8009032:	e002      	b.n	800903a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800903e:	8b7a      	ldrh	r2, [r7, #26]
 8009040:	89fb      	ldrh	r3, [r7, #14]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800904a:	8b7b      	ldrh	r3, [r7, #26]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d19e      	bne.n	8008f8e <pbuf_alloc+0x5a>
      break;
 8009050:	e055      	b.n	80090fe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009052:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009054:	3303      	adds	r3, #3
 8009056:	b29b      	uxth	r3, r3
 8009058:	f023 0303 	bic.w	r3, r3, #3
 800905c:	b29a      	uxth	r2, r3
 800905e:	88bb      	ldrh	r3, [r7, #4]
 8009060:	3303      	adds	r3, #3
 8009062:	b29b      	uxth	r3, r3
 8009064:	f023 0303 	bic.w	r3, r3, #3
 8009068:	b29b      	uxth	r3, r3
 800906a:	4413      	add	r3, r2
 800906c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800906e:	8b3b      	ldrh	r3, [r7, #24]
 8009070:	3310      	adds	r3, #16
 8009072:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009074:	8b3a      	ldrh	r2, [r7, #24]
 8009076:	88bb      	ldrh	r3, [r7, #4]
 8009078:	3303      	adds	r3, #3
 800907a:	f023 0303 	bic.w	r3, r3, #3
 800907e:	429a      	cmp	r2, r3
 8009080:	d306      	bcc.n	8009090 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009082:	8afa      	ldrh	r2, [r7, #22]
 8009084:	88bb      	ldrh	r3, [r7, #4]
 8009086:	3303      	adds	r3, #3
 8009088:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800908c:	429a      	cmp	r2, r3
 800908e:	d201      	bcs.n	8009094 <pbuf_alloc+0x160>
        return NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	e035      	b.n	8009100 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009094:	8afb      	ldrh	r3, [r7, #22]
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff f966 	bl	8008368 <mem_malloc>
 800909c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <pbuf_alloc+0x174>
        return NULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	e02b      	b.n	8009100 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80090a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090aa:	3310      	adds	r3, #16
 80090ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ae:	4413      	add	r3, r2
 80090b0:	3303      	adds	r3, #3
 80090b2:	f023 0303 	bic.w	r3, r3, #3
 80090b6:	4618      	mov	r0, r3
 80090b8:	88b9      	ldrh	r1, [r7, #4]
 80090ba:	88ba      	ldrh	r2, [r7, #4]
 80090bc:	2300      	movs	r3, #0
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	887b      	ldrh	r3, [r7, #2]
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	460b      	mov	r3, r1
 80090c6:	4601      	mov	r1, r0
 80090c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090ca:	f7ff ff09 	bl	8008ee0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f003 0303 	and.w	r3, r3, #3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d010      	beq.n	80090fc <pbuf_alloc+0x1c8>
 80090da:	4b0b      	ldr	r3, [pc, #44]	; (8009108 <pbuf_alloc+0x1d4>)
 80090dc:	f44f 7291 	mov.w	r2, #290	; 0x122
 80090e0:	490d      	ldr	r1, [pc, #52]	; (8009118 <pbuf_alloc+0x1e4>)
 80090e2:	480b      	ldr	r0, [pc, #44]	; (8009110 <pbuf_alloc+0x1dc>)
 80090e4:	f00b fcb6 	bl	8014a54 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80090e8:	e008      	b.n	80090fc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80090ea:	4b07      	ldr	r3, [pc, #28]	; (8009108 <pbuf_alloc+0x1d4>)
 80090ec:	f240 1227 	movw	r2, #295	; 0x127
 80090f0:	490a      	ldr	r1, [pc, #40]	; (800911c <pbuf_alloc+0x1e8>)
 80090f2:	4807      	ldr	r0, [pc, #28]	; (8009110 <pbuf_alloc+0x1dc>)
 80090f4:	f00b fcae 	bl	8014a54 <iprintf>
      return NULL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	e001      	b.n	8009100 <pbuf_alloc+0x1cc>
      break;
 80090fc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009100:	4618      	mov	r0, r3
 8009102:	3728      	adds	r7, #40	; 0x28
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	08015924 	.word	0x08015924
 800910c:	08015954 	.word	0x08015954
 8009110:	08015984 	.word	0x08015984
 8009114:	080159ac 	.word	0x080159ac
 8009118:	080159e0 	.word	0x080159e0
 800911c:	08015a0c 	.word	0x08015a0c

08009120 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af02      	add	r7, sp, #8
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	807b      	strh	r3, [r7, #2]
 800912c:	4613      	mov	r3, r2
 800912e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009130:	883b      	ldrh	r3, [r7, #0]
 8009132:	2b41      	cmp	r3, #65	; 0x41
 8009134:	d009      	beq.n	800914a <pbuf_alloc_reference+0x2a>
 8009136:	883b      	ldrh	r3, [r7, #0]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d006      	beq.n	800914a <pbuf_alloc_reference+0x2a>
 800913c:	4b0f      	ldr	r3, [pc, #60]	; (800917c <pbuf_alloc_reference+0x5c>)
 800913e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009142:	490f      	ldr	r1, [pc, #60]	; (8009180 <pbuf_alloc_reference+0x60>)
 8009144:	480f      	ldr	r0, [pc, #60]	; (8009184 <pbuf_alloc_reference+0x64>)
 8009146:	f00b fc85 	bl	8014a54 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800914a:	200b      	movs	r0, #11
 800914c:	f7ff fab0 	bl	80086b0 <memp_malloc>
 8009150:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d101      	bne.n	800915c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009158:	2300      	movs	r3, #0
 800915a:	e00b      	b.n	8009174 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800915c:	8879      	ldrh	r1, [r7, #2]
 800915e:	887a      	ldrh	r2, [r7, #2]
 8009160:	2300      	movs	r3, #0
 8009162:	9301      	str	r3, [sp, #4]
 8009164:	883b      	ldrh	r3, [r7, #0]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	460b      	mov	r3, r1
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff feb7 	bl	8008ee0 <pbuf_init_alloced_pbuf>
  return p;
 8009172:	68fb      	ldr	r3, [r7, #12]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	08015924 	.word	0x08015924
 8009180:	08015a28 	.word	0x08015a28
 8009184:	08015984 	.word	0x08015984

08009188 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af02      	add	r7, sp, #8
 800918e:	607b      	str	r3, [r7, #4]
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
 8009194:	460b      	mov	r3, r1
 8009196:	81bb      	strh	r3, [r7, #12]
 8009198:	4613      	mov	r3, r2
 800919a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
 800919e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80091a0:	8a7b      	ldrh	r3, [r7, #18]
 80091a2:	3303      	adds	r3, #3
 80091a4:	f023 0203 	bic.w	r2, r3, #3
 80091a8:	89bb      	ldrh	r3, [r7, #12]
 80091aa:	441a      	add	r2, r3
 80091ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d901      	bls.n	80091b6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	e018      	b.n	80091e8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d007      	beq.n	80091cc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80091bc:	8a7b      	ldrh	r3, [r7, #18]
 80091be:	3303      	adds	r3, #3
 80091c0:	f023 0303 	bic.w	r3, r3, #3
 80091c4:	6a3a      	ldr	r2, [r7, #32]
 80091c6:	4413      	add	r3, r2
 80091c8:	617b      	str	r3, [r7, #20]
 80091ca:	e001      	b.n	80091d0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80091cc:	2300      	movs	r3, #0
 80091ce:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	89b9      	ldrh	r1, [r7, #12]
 80091d4:	89ba      	ldrh	r2, [r7, #12]
 80091d6:	2302      	movs	r3, #2
 80091d8:	9301      	str	r3, [sp, #4]
 80091da:	897b      	ldrh	r3, [r7, #10]
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	460b      	mov	r3, r1
 80091e0:	6979      	ldr	r1, [r7, #20]
 80091e2:	f7ff fe7d 	bl	8008ee0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80091e6:	687b      	ldr	r3, [r7, #4]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <pbuf_realloc+0x20>
 8009202:	4b3a      	ldr	r3, [pc, #232]	; (80092ec <pbuf_realloc+0xfc>)
 8009204:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8009208:	4939      	ldr	r1, [pc, #228]	; (80092f0 <pbuf_realloc+0x100>)
 800920a:	483a      	ldr	r0, [pc, #232]	; (80092f4 <pbuf_realloc+0x104>)
 800920c:	f00b fc22 	bl	8014a54 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	891b      	ldrh	r3, [r3, #8]
 8009214:	887a      	ldrh	r2, [r7, #2]
 8009216:	429a      	cmp	r2, r3
 8009218:	d263      	bcs.n	80092e2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	891a      	ldrh	r2, [r3, #8]
 800921e:	887b      	ldrh	r3, [r7, #2]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009224:	887b      	ldrh	r3, [r7, #2]
 8009226:	817b      	strh	r3, [r7, #10]
  q = p;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800922c:	e018      	b.n	8009260 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	895b      	ldrh	r3, [r3, #10]
 8009232:	897a      	ldrh	r2, [r7, #10]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	891a      	ldrh	r2, [r3, #8]
 800923c:	893b      	ldrh	r3, [r7, #8]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	b29a      	uxth	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d106      	bne.n	8009260 <pbuf_realloc+0x70>
 8009252:	4b26      	ldr	r3, [pc, #152]	; (80092ec <pbuf_realloc+0xfc>)
 8009254:	f240 12af 	movw	r2, #431	; 0x1af
 8009258:	4927      	ldr	r1, [pc, #156]	; (80092f8 <pbuf_realloc+0x108>)
 800925a:	4826      	ldr	r0, [pc, #152]	; (80092f4 <pbuf_realloc+0x104>)
 800925c:	f00b fbfa 	bl	8014a54 <iprintf>
  while (rem_len > q->len) {
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	895b      	ldrh	r3, [r3, #10]
 8009264:	897a      	ldrh	r2, [r7, #10]
 8009266:	429a      	cmp	r2, r3
 8009268:	d8e1      	bhi.n	800922e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	7b1b      	ldrb	r3, [r3, #12]
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	2b00      	cmp	r3, #0
 8009274:	d121      	bne.n	80092ba <pbuf_realloc+0xca>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	895b      	ldrh	r3, [r3, #10]
 800927a:	897a      	ldrh	r2, [r7, #10]
 800927c:	429a      	cmp	r2, r3
 800927e:	d01c      	beq.n	80092ba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	7b5b      	ldrb	r3, [r3, #13]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d116      	bne.n	80092ba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	b29a      	uxth	r2, r3
 8009296:	897b      	ldrh	r3, [r7, #10]
 8009298:	4413      	add	r3, r2
 800929a:	b29b      	uxth	r3, r3
 800929c:	4619      	mov	r1, r3
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f7fe ff58 	bl	8008154 <mem_trim>
 80092a4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d106      	bne.n	80092ba <pbuf_realloc+0xca>
 80092ac:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <pbuf_realloc+0xfc>)
 80092ae:	f240 12bd 	movw	r2, #445	; 0x1bd
 80092b2:	4912      	ldr	r1, [pc, #72]	; (80092fc <pbuf_realloc+0x10c>)
 80092b4:	480f      	ldr	r0, [pc, #60]	; (80092f4 <pbuf_realloc+0x104>)
 80092b6:	f00b fbcd 	bl	8014a54 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	897a      	ldrh	r2, [r7, #10]
 80092be:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	895a      	ldrh	r2, [r3, #10]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4618      	mov	r0, r3
 80092d6:	f000 f911 	bl	80094fc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	601a      	str	r2, [r3, #0]
 80092e0:	e000      	b.n	80092e4 <pbuf_realloc+0xf4>
    return;
 80092e2:	bf00      	nop

}
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	08015924 	.word	0x08015924
 80092f0:	08015a3c 	.word	0x08015a3c
 80092f4:	08015984 	.word	0x08015984
 80092f8:	08015a54 	.word	0x08015a54
 80092fc:	08015a6c 	.word	0x08015a6c

08009300 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4613      	mov	r3, r2
 800930c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <pbuf_add_header_impl+0x22>
 8009314:	4b2b      	ldr	r3, [pc, #172]	; (80093c4 <pbuf_add_header_impl+0xc4>)
 8009316:	f240 12df 	movw	r2, #479	; 0x1df
 800931a:	492b      	ldr	r1, [pc, #172]	; (80093c8 <pbuf_add_header_impl+0xc8>)
 800931c:	482b      	ldr	r0, [pc, #172]	; (80093cc <pbuf_add_header_impl+0xcc>)
 800931e:	f00b fb99 	bl	8014a54 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d003      	beq.n	8009330 <pbuf_add_header_impl+0x30>
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800932e:	d301      	bcc.n	8009334 <pbuf_add_header_impl+0x34>
    return 1;
 8009330:	2301      	movs	r3, #1
 8009332:	e043      	b.n	80093bc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <pbuf_add_header_impl+0x3e>
    return 0;
 800933a:	2300      	movs	r3, #0
 800933c:	e03e      	b.n	80093bc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	891a      	ldrh	r2, [r3, #8]
 8009346:	8a7b      	ldrh	r3, [r7, #18]
 8009348:	4413      	add	r3, r2
 800934a:	b29b      	uxth	r3, r3
 800934c:	8a7a      	ldrh	r2, [r7, #18]
 800934e:	429a      	cmp	r2, r3
 8009350:	d901      	bls.n	8009356 <pbuf_add_header_impl+0x56>
    return 1;
 8009352:	2301      	movs	r3, #1
 8009354:	e032      	b.n	80093bc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	7b1b      	ldrb	r3, [r3, #12]
 800935a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800935c:	8a3b      	ldrh	r3, [r7, #16]
 800935e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00c      	beq.n	8009380 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	425b      	negs	r3, r3
 800936e:	4413      	add	r3, r2
 8009370:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3310      	adds	r3, #16
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	429a      	cmp	r2, r3
 800937a:	d20d      	bcs.n	8009398 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800937c:	2301      	movs	r3, #1
 800937e:	e01d      	b.n	80093bc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d006      	beq.n	8009394 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	425b      	negs	r3, r3
 800938e:	4413      	add	r3, r2
 8009390:	617b      	str	r3, [r7, #20]
 8009392:	e001      	b.n	8009398 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009394:	2301      	movs	r3, #1
 8009396:	e011      	b.n	80093bc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	895a      	ldrh	r2, [r3, #10]
 80093a2:	8a7b      	ldrh	r3, [r7, #18]
 80093a4:	4413      	add	r3, r2
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	891a      	ldrh	r2, [r3, #8]
 80093b0:	8a7b      	ldrh	r3, [r7, #18]
 80093b2:	4413      	add	r3, r2
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	811a      	strh	r2, [r3, #8]


  return 0;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	08015924 	.word	0x08015924
 80093c8:	08015a88 	.word	0x08015a88
 80093cc:	08015984 	.word	0x08015984

080093d0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80093da:	2200      	movs	r2, #0
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff ff8e 	bl	8009300 <pbuf_add_header_impl>
 80093e4:	4603      	mov	r3, r0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d106      	bne.n	800940e <pbuf_remove_header+0x1e>
 8009400:	4b20      	ldr	r3, [pc, #128]	; (8009484 <pbuf_remove_header+0x94>)
 8009402:	f240 224b 	movw	r2, #587	; 0x24b
 8009406:	4920      	ldr	r1, [pc, #128]	; (8009488 <pbuf_remove_header+0x98>)
 8009408:	4820      	ldr	r0, [pc, #128]	; (800948c <pbuf_remove_header+0x9c>)
 800940a:	f00b fb23 	bl	8014a54 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <pbuf_remove_header+0x2c>
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800941a:	d301      	bcc.n	8009420 <pbuf_remove_header+0x30>
    return 1;
 800941c:	2301      	movs	r3, #1
 800941e:	e02c      	b.n	800947a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <pbuf_remove_header+0x3a>
    return 0;
 8009426:	2300      	movs	r3, #0
 8009428:	e027      	b.n	800947a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	895b      	ldrh	r3, [r3, #10]
 8009432:	89fa      	ldrh	r2, [r7, #14]
 8009434:	429a      	cmp	r2, r3
 8009436:	d908      	bls.n	800944a <pbuf_remove_header+0x5a>
 8009438:	4b12      	ldr	r3, [pc, #72]	; (8009484 <pbuf_remove_header+0x94>)
 800943a:	f240 2255 	movw	r2, #597	; 0x255
 800943e:	4914      	ldr	r1, [pc, #80]	; (8009490 <pbuf_remove_header+0xa0>)
 8009440:	4812      	ldr	r0, [pc, #72]	; (800948c <pbuf_remove_header+0x9c>)
 8009442:	f00b fb07 	bl	8014a54 <iprintf>
 8009446:	2301      	movs	r3, #1
 8009448:	e017      	b.n	800947a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685a      	ldr	r2, [r3, #4]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	441a      	add	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	895a      	ldrh	r2, [r3, #10]
 8009460:	89fb      	ldrh	r3, [r7, #14]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	891a      	ldrh	r2, [r3, #8]
 800946e:	89fb      	ldrh	r3, [r7, #14]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	b29a      	uxth	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	08015924 	.word	0x08015924
 8009488:	08015a88 	.word	0x08015a88
 800948c:	08015984 	.word	0x08015984
 8009490:	08015a94 	.word	0x08015a94

08009494 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	460b      	mov	r3, r1
 800949e:	807b      	strh	r3, [r7, #2]
 80094a0:	4613      	mov	r3, r2
 80094a2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80094a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	da08      	bge.n	80094be <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80094ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80094b0:	425b      	negs	r3, r3
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7ff ff9b 	bl	80093f0 <pbuf_remove_header>
 80094ba:	4603      	mov	r3, r0
 80094bc:	e007      	b.n	80094ce <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80094be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80094c2:	787a      	ldrb	r2, [r7, #1]
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff ff1a 	bl	8009300 <pbuf_add_header_impl>
 80094cc:	4603      	mov	r3, r0
  }
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80094e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80094e6:	2201      	movs	r2, #1
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7ff ffd2 	bl	8009494 <pbuf_header_impl>
 80094f0:	4603      	mov	r3, r0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10b      	bne.n	8009522 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d106      	bne.n	800951e <pbuf_free+0x22>
 8009510:	4b3b      	ldr	r3, [pc, #236]	; (8009600 <pbuf_free+0x104>)
 8009512:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009516:	493b      	ldr	r1, [pc, #236]	; (8009604 <pbuf_free+0x108>)
 8009518:	483b      	ldr	r0, [pc, #236]	; (8009608 <pbuf_free+0x10c>)
 800951a:	f00b fa9b 	bl	8014a54 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800951e:	2300      	movs	r3, #0
 8009520:	e069      	b.n	80095f6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009526:	e062      	b.n	80095ee <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009528:	f00a fc8c 	bl	8013e44 <sys_arch_protect>
 800952c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	7b9b      	ldrb	r3, [r3, #14]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d106      	bne.n	8009544 <pbuf_free+0x48>
 8009536:	4b32      	ldr	r3, [pc, #200]	; (8009600 <pbuf_free+0x104>)
 8009538:	f240 22f1 	movw	r2, #753	; 0x2f1
 800953c:	4933      	ldr	r1, [pc, #204]	; (800960c <pbuf_free+0x110>)
 800953e:	4832      	ldr	r0, [pc, #200]	; (8009608 <pbuf_free+0x10c>)
 8009540:	f00b fa88 	bl	8014a54 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	7b9b      	ldrb	r3, [r3, #14]
 8009548:	3b01      	subs	r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	739a      	strb	r2, [r3, #14]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	7b9b      	ldrb	r3, [r3, #14]
 8009554:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8009556:	69b8      	ldr	r0, [r7, #24]
 8009558:	f00a fc82 	bl	8013e60 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d143      	bne.n	80095ea <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	7b1b      	ldrb	r3, [r3, #12]
 800956c:	f003 030f 	and.w	r3, r3, #15
 8009570:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	7b5b      	ldrb	r3, [r3, #13]
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d011      	beq.n	80095a2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d106      	bne.n	8009598 <pbuf_free+0x9c>
 800958a:	4b1d      	ldr	r3, [pc, #116]	; (8009600 <pbuf_free+0x104>)
 800958c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009590:	491f      	ldr	r1, [pc, #124]	; (8009610 <pbuf_free+0x114>)
 8009592:	481d      	ldr	r0, [pc, #116]	; (8009608 <pbuf_free+0x10c>)
 8009594:	f00b fa5e 	bl	8014a54 <iprintf>
        pc->custom_free_function(p);
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	4798      	blx	r3
 80095a0:	e01d      	b.n	80095de <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d104      	bne.n	80095b2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80095a8:	6879      	ldr	r1, [r7, #4]
 80095aa:	200c      	movs	r0, #12
 80095ac:	f7ff f8f6 	bl	800879c <memp_free>
 80095b0:	e015      	b.n	80095de <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d104      	bne.n	80095c2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80095b8:	6879      	ldr	r1, [r7, #4]
 80095ba:	200b      	movs	r0, #11
 80095bc:	f7ff f8ee 	bl	800879c <memp_free>
 80095c0:	e00d      	b.n	80095de <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d103      	bne.n	80095d0 <pbuf_free+0xd4>
          mem_free(p);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7fe fd33 	bl	8008034 <mem_free>
 80095ce:	e006      	b.n	80095de <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80095d0:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <pbuf_free+0x104>)
 80095d2:	f240 320f 	movw	r2, #783	; 0x30f
 80095d6:	490f      	ldr	r1, [pc, #60]	; (8009614 <pbuf_free+0x118>)
 80095d8:	480b      	ldr	r0, [pc, #44]	; (8009608 <pbuf_free+0x10c>)
 80095da:	f00b fa3b 	bl	8014a54 <iprintf>
        }
      }
      count++;
 80095de:	7ffb      	ldrb	r3, [r7, #31]
 80095e0:	3301      	adds	r3, #1
 80095e2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	607b      	str	r3, [r7, #4]
 80095e8:	e001      	b.n	80095ee <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d199      	bne.n	8009528 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80095f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3720      	adds	r7, #32
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	08015924 	.word	0x08015924
 8009604:	08015a88 	.word	0x08015a88
 8009608:	08015984 	.word	0x08015984
 800960c:	08015ab4 	.word	0x08015ab4
 8009610:	08015acc 	.word	0x08015acc
 8009614:	08015af0 	.word	0x08015af0

08009618 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009624:	e005      	b.n	8009632 <pbuf_clen+0x1a>
    ++len;
 8009626:	89fb      	ldrh	r3, [r7, #14]
 8009628:	3301      	adds	r3, #1
 800962a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1f6      	bne.n	8009626 <pbuf_clen+0xe>
  }
  return len;
 8009638:	89fb      	ldrh	r3, [r7, #14]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
	...

08009648 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d016      	beq.n	8009684 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009656:	f00a fbf5 	bl	8013e44 <sys_arch_protect>
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	7b9b      	ldrb	r3, [r3, #14]
 8009660:	3301      	adds	r3, #1
 8009662:	b2da      	uxtb	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	739a      	strb	r2, [r3, #14]
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f00a fbf9 	bl	8013e60 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	7b9b      	ldrb	r3, [r3, #14]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d106      	bne.n	8009684 <pbuf_ref+0x3c>
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <pbuf_ref+0x44>)
 8009678:	f240 3242 	movw	r2, #834	; 0x342
 800967c:	4904      	ldr	r1, [pc, #16]	; (8009690 <pbuf_ref+0x48>)
 800967e:	4805      	ldr	r0, [pc, #20]	; (8009694 <pbuf_ref+0x4c>)
 8009680:	f00b f9e8 	bl	8014a54 <iprintf>
  }
}
 8009684:	bf00      	nop
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	08015924 	.word	0x08015924
 8009690:	08015b04 	.word	0x08015b04
 8009694:	08015984 	.word	0x08015984

08009698 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <pbuf_cat+0x16>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d107      	bne.n	80096be <pbuf_cat+0x26>
 80096ae:	4b20      	ldr	r3, [pc, #128]	; (8009730 <pbuf_cat+0x98>)
 80096b0:	f240 3259 	movw	r2, #857	; 0x359
 80096b4:	491f      	ldr	r1, [pc, #124]	; (8009734 <pbuf_cat+0x9c>)
 80096b6:	4820      	ldr	r0, [pc, #128]	; (8009738 <pbuf_cat+0xa0>)
 80096b8:	f00b f9cc 	bl	8014a54 <iprintf>
 80096bc:	e034      	b.n	8009728 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60fb      	str	r3, [r7, #12]
 80096c2:	e00a      	b.n	80096da <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	891a      	ldrh	r2, [r3, #8]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	891b      	ldrh	r3, [r3, #8]
 80096cc:	4413      	add	r3, r2
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1f0      	bne.n	80096c4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	891a      	ldrh	r2, [r3, #8]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	895b      	ldrh	r3, [r3, #10]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d006      	beq.n	80096fc <pbuf_cat+0x64>
 80096ee:	4b10      	ldr	r3, [pc, #64]	; (8009730 <pbuf_cat+0x98>)
 80096f0:	f240 3262 	movw	r2, #866	; 0x362
 80096f4:	4911      	ldr	r1, [pc, #68]	; (800973c <pbuf_cat+0xa4>)
 80096f6:	4810      	ldr	r0, [pc, #64]	; (8009738 <pbuf_cat+0xa0>)
 80096f8:	f00b f9ac 	bl	8014a54 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d006      	beq.n	8009712 <pbuf_cat+0x7a>
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <pbuf_cat+0x98>)
 8009706:	f240 3263 	movw	r2, #867	; 0x363
 800970a:	490d      	ldr	r1, [pc, #52]	; (8009740 <pbuf_cat+0xa8>)
 800970c:	480a      	ldr	r0, [pc, #40]	; (8009738 <pbuf_cat+0xa0>)
 800970e:	f00b f9a1 	bl	8014a54 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	891a      	ldrh	r2, [r3, #8]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	891b      	ldrh	r3, [r3, #8]
 800971a:	4413      	add	r3, r2
 800971c:	b29a      	uxth	r2, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	08015924 	.word	0x08015924
 8009734:	08015b18 	.word	0x08015b18
 8009738:	08015984 	.word	0x08015984
 800973c:	08015b50 	.word	0x08015b50
 8009740:	08015b80 	.word	0x08015b80

08009744 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff ffa1 	bl	8009698 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009756:	6838      	ldr	r0, [r7, #0]
 8009758:	f7ff ff76 	bl	8009648 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800975c:	bf00      	nop
 800975e:	3708      	adds	r7, #8
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d008      	beq.n	800978e <pbuf_copy+0x2a>
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d005      	beq.n	800978e <pbuf_copy+0x2a>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	891a      	ldrh	r2, [r3, #8]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	891b      	ldrh	r3, [r3, #8]
 800978a:	429a      	cmp	r2, r3
 800978c:	d209      	bcs.n	80097a2 <pbuf_copy+0x3e>
 800978e:	4b57      	ldr	r3, [pc, #348]	; (80098ec <pbuf_copy+0x188>)
 8009790:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009794:	4956      	ldr	r1, [pc, #344]	; (80098f0 <pbuf_copy+0x18c>)
 8009796:	4857      	ldr	r0, [pc, #348]	; (80098f4 <pbuf_copy+0x190>)
 8009798:	f00b f95c 	bl	8014a54 <iprintf>
 800979c:	f06f 030f 	mvn.w	r3, #15
 80097a0:	e09f      	b.n	80098e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	895b      	ldrh	r3, [r3, #10]
 80097a6:	461a      	mov	r2, r3
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	1ad2      	subs	r2, r2, r3
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	895b      	ldrh	r3, [r3, #10]
 80097b0:	4619      	mov	r1, r3
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	1acb      	subs	r3, r1, r3
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d306      	bcc.n	80097c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	895b      	ldrh	r3, [r3, #10]
 80097be:	461a      	mov	r2, r3
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	60fb      	str	r3, [r7, #12]
 80097c6:	e005      	b.n	80097d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	895b      	ldrh	r3, [r3, #10]
 80097cc:	461a      	mov	r2, r3
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685a      	ldr	r2, [r3, #4]
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	18d0      	adds	r0, r2, r3
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	4413      	add	r3, r2
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	4619      	mov	r1, r3
 80097e8:	f00a fd86 	bl	80142f8 <memcpy>
    offset_to += len;
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	4413      	add	r3, r2
 80097f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4413      	add	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	895b      	ldrh	r3, [r3, #10]
 8009800:	461a      	mov	r2, r3
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	4293      	cmp	r3, r2
 8009806:	d906      	bls.n	8009816 <pbuf_copy+0xb2>
 8009808:	4b38      	ldr	r3, [pc, #224]	; (80098ec <pbuf_copy+0x188>)
 800980a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800980e:	493a      	ldr	r1, [pc, #232]	; (80098f8 <pbuf_copy+0x194>)
 8009810:	4838      	ldr	r0, [pc, #224]	; (80098f4 <pbuf_copy+0x190>)
 8009812:	f00b f91f 	bl	8014a54 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	895b      	ldrh	r3, [r3, #10]
 800981a:	461a      	mov	r2, r3
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	4293      	cmp	r3, r2
 8009820:	d906      	bls.n	8009830 <pbuf_copy+0xcc>
 8009822:	4b32      	ldr	r3, [pc, #200]	; (80098ec <pbuf_copy+0x188>)
 8009824:	f240 32da 	movw	r2, #986	; 0x3da
 8009828:	4934      	ldr	r1, [pc, #208]	; (80098fc <pbuf_copy+0x198>)
 800982a:	4832      	ldr	r0, [pc, #200]	; (80098f4 <pbuf_copy+0x190>)
 800982c:	f00b f912 	bl	8014a54 <iprintf>
    if (offset_from >= p_from->len) {
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	895b      	ldrh	r3, [r3, #10]
 8009834:	461a      	mov	r2, r3
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	4293      	cmp	r3, r2
 800983a:	d304      	bcc.n	8009846 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	895b      	ldrh	r3, [r3, #10]
 800984a:	461a      	mov	r2, r3
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	4293      	cmp	r3, r2
 8009850:	d114      	bne.n	800987c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009852:	2300      	movs	r3, #0
 8009854:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10c      	bne.n	800987c <pbuf_copy+0x118>
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d009      	beq.n	800987c <pbuf_copy+0x118>
 8009868:	4b20      	ldr	r3, [pc, #128]	; (80098ec <pbuf_copy+0x188>)
 800986a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800986e:	4924      	ldr	r1, [pc, #144]	; (8009900 <pbuf_copy+0x19c>)
 8009870:	4820      	ldr	r0, [pc, #128]	; (80098f4 <pbuf_copy+0x190>)
 8009872:	f00b f8ef 	bl	8014a54 <iprintf>
 8009876:	f06f 030f 	mvn.w	r3, #15
 800987a:	e032      	b.n	80098e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d013      	beq.n	80098aa <pbuf_copy+0x146>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	895a      	ldrh	r2, [r3, #10]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	891b      	ldrh	r3, [r3, #8]
 800988a:	429a      	cmp	r2, r3
 800988c:	d10d      	bne.n	80098aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <pbuf_copy+0x146>
 8009896:	4b15      	ldr	r3, [pc, #84]	; (80098ec <pbuf_copy+0x188>)
 8009898:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800989c:	4919      	ldr	r1, [pc, #100]	; (8009904 <pbuf_copy+0x1a0>)
 800989e:	4815      	ldr	r0, [pc, #84]	; (80098f4 <pbuf_copy+0x190>)
 80098a0:	f00b f8d8 	bl	8014a54 <iprintf>
 80098a4:	f06f 0305 	mvn.w	r3, #5
 80098a8:	e01b      	b.n	80098e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d013      	beq.n	80098d8 <pbuf_copy+0x174>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	895a      	ldrh	r2, [r3, #10]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	891b      	ldrh	r3, [r3, #8]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d10d      	bne.n	80098d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <pbuf_copy+0x174>
 80098c4:	4b09      	ldr	r3, [pc, #36]	; (80098ec <pbuf_copy+0x188>)
 80098c6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80098ca:	490e      	ldr	r1, [pc, #56]	; (8009904 <pbuf_copy+0x1a0>)
 80098cc:	4809      	ldr	r0, [pc, #36]	; (80098f4 <pbuf_copy+0x190>)
 80098ce:	f00b f8c1 	bl	8014a54 <iprintf>
 80098d2:	f06f 0305 	mvn.w	r3, #5
 80098d6:	e004      	b.n	80098e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f47f af61 	bne.w	80097a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3718      	adds	r7, #24
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	08015924 	.word	0x08015924
 80098f0:	08015bcc 	.word	0x08015bcc
 80098f4:	08015984 	.word	0x08015984
 80098f8:	08015bfc 	.word	0x08015bfc
 80098fc:	08015c14 	.word	0x08015c14
 8009900:	08015c30 	.word	0x08015c30
 8009904:	08015c40 	.word	0x08015c40

08009908 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	4611      	mov	r1, r2
 8009914:	461a      	mov	r2, r3
 8009916:	460b      	mov	r3, r1
 8009918:	80fb      	strh	r3, [r7, #6]
 800991a:	4613      	mov	r3, r2
 800991c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d108      	bne.n	800993e <pbuf_copy_partial+0x36>
 800992c:	4b2b      	ldr	r3, [pc, #172]	; (80099dc <pbuf_copy_partial+0xd4>)
 800992e:	f240 420a 	movw	r2, #1034	; 0x40a
 8009932:	492b      	ldr	r1, [pc, #172]	; (80099e0 <pbuf_copy_partial+0xd8>)
 8009934:	482b      	ldr	r0, [pc, #172]	; (80099e4 <pbuf_copy_partial+0xdc>)
 8009936:	f00b f88d 	bl	8014a54 <iprintf>
 800993a:	2300      	movs	r3, #0
 800993c:	e04a      	b.n	80099d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d108      	bne.n	8009956 <pbuf_copy_partial+0x4e>
 8009944:	4b25      	ldr	r3, [pc, #148]	; (80099dc <pbuf_copy_partial+0xd4>)
 8009946:	f240 420b 	movw	r2, #1035	; 0x40b
 800994a:	4927      	ldr	r1, [pc, #156]	; (80099e8 <pbuf_copy_partial+0xe0>)
 800994c:	4825      	ldr	r0, [pc, #148]	; (80099e4 <pbuf_copy_partial+0xdc>)
 800994e:	f00b f881 	bl	8014a54 <iprintf>
 8009952:	2300      	movs	r3, #0
 8009954:	e03e      	b.n	80099d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	e034      	b.n	80099c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800995c:	88bb      	ldrh	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00a      	beq.n	8009978 <pbuf_copy_partial+0x70>
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	895b      	ldrh	r3, [r3, #10]
 8009966:	88ba      	ldrh	r2, [r7, #4]
 8009968:	429a      	cmp	r2, r3
 800996a:	d305      	bcc.n	8009978 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	895b      	ldrh	r3, [r3, #10]
 8009970:	88ba      	ldrh	r2, [r7, #4]
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	80bb      	strh	r3, [r7, #4]
 8009976:	e023      	b.n	80099c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	895a      	ldrh	r2, [r3, #10]
 800997c:	88bb      	ldrh	r3, [r7, #4]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009982:	8b3a      	ldrh	r2, [r7, #24]
 8009984:	88fb      	ldrh	r3, [r7, #6]
 8009986:	429a      	cmp	r2, r3
 8009988:	d901      	bls.n	800998e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800998a:	88fb      	ldrh	r3, [r7, #6]
 800998c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800998e:	8b7b      	ldrh	r3, [r7, #26]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	18d0      	adds	r0, r2, r3
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	685a      	ldr	r2, [r3, #4]
 8009998:	88bb      	ldrh	r3, [r7, #4]
 800999a:	4413      	add	r3, r2
 800999c:	8b3a      	ldrh	r2, [r7, #24]
 800999e:	4619      	mov	r1, r3
 80099a0:	f00a fcaa 	bl	80142f8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80099a4:	8afa      	ldrh	r2, [r7, #22]
 80099a6:	8b3b      	ldrh	r3, [r7, #24]
 80099a8:	4413      	add	r3, r2
 80099aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80099ac:	8b7a      	ldrh	r2, [r7, #26]
 80099ae:	8b3b      	ldrh	r3, [r7, #24]
 80099b0:	4413      	add	r3, r2
 80099b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80099b4:	88fa      	ldrh	r2, [r7, #6]
 80099b6:	8b3b      	ldrh	r3, [r7, #24]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	61fb      	str	r3, [r7, #28]
 80099c6:	88fb      	ldrh	r3, [r7, #6]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <pbuf_copy_partial+0xca>
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1c4      	bne.n	800995c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80099d2:	8afb      	ldrh	r3, [r7, #22]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3720      	adds	r7, #32
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	08015924 	.word	0x08015924
 80099e0:	08015c6c 	.word	0x08015c6c
 80099e4:	08015984 	.word	0x08015984
 80099e8:	08015c8c 	.word	0x08015c8c

080099ec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	603a      	str	r2, [r7, #0]
 80099f6:	71fb      	strb	r3, [r7, #7]
 80099f8:	460b      	mov	r3, r1
 80099fa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	8919      	ldrh	r1, [r3, #8]
 8009a00:	88ba      	ldrh	r2, [r7, #4]
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7ff fa95 	bl	8008f34 <pbuf_alloc>
 8009a0a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d101      	bne.n	8009a16 <pbuf_clone+0x2a>
    return NULL;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e011      	b.n	8009a3a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f7ff fea3 	bl	8009764 <pbuf_copy>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009a22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d006      	beq.n	8009a38 <pbuf_clone+0x4c>
 8009a2a:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <pbuf_clone+0x58>)
 8009a2c:	f240 5224 	movw	r2, #1316	; 0x524
 8009a30:	4905      	ldr	r1, [pc, #20]	; (8009a48 <pbuf_clone+0x5c>)
 8009a32:	4806      	ldr	r0, [pc, #24]	; (8009a4c <pbuf_clone+0x60>)
 8009a34:	f00b f80e 	bl	8014a54 <iprintf>
  return q;
 8009a38:	68fb      	ldr	r3, [r7, #12]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3710      	adds	r7, #16
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	08015924 	.word	0x08015924
 8009a48:	08015d98 	.word	0x08015d98
 8009a4c:	08015984 	.word	0x08015984

08009a50 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009a54:	f00b f816 	bl	8014a84 <rand>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	4b01      	ldr	r3, [pc, #4]	; (8009a70 <tcp_init+0x20>)
 8009a6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009a6c:	bf00      	nop
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	20000024 	.word	0x20000024

08009a74 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	7d1b      	ldrb	r3, [r3, #20]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d105      	bne.n	8009a90 <tcp_free+0x1c>
 8009a84:	4b06      	ldr	r3, [pc, #24]	; (8009aa0 <tcp_free+0x2c>)
 8009a86:	22d4      	movs	r2, #212	; 0xd4
 8009a88:	4906      	ldr	r1, [pc, #24]	; (8009aa4 <tcp_free+0x30>)
 8009a8a:	4807      	ldr	r0, [pc, #28]	; (8009aa8 <tcp_free+0x34>)
 8009a8c:	f00a ffe2 	bl	8014a54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	2001      	movs	r0, #1
 8009a94:	f7fe fe82 	bl	800879c <memp_free>
}
 8009a98:	bf00      	nop
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	08015e24 	.word	0x08015e24
 8009aa4:	08015e54 	.word	0x08015e54
 8009aa8:	08015e68 	.word	0x08015e68

08009aac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	7d1b      	ldrb	r3, [r3, #20]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d105      	bne.n	8009ac8 <tcp_free_listen+0x1c>
 8009abc:	4b06      	ldr	r3, [pc, #24]	; (8009ad8 <tcp_free_listen+0x2c>)
 8009abe:	22df      	movs	r2, #223	; 0xdf
 8009ac0:	4906      	ldr	r1, [pc, #24]	; (8009adc <tcp_free_listen+0x30>)
 8009ac2:	4807      	ldr	r0, [pc, #28]	; (8009ae0 <tcp_free_listen+0x34>)
 8009ac4:	f00a ffc6 	bl	8014a54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009ac8:	6879      	ldr	r1, [r7, #4]
 8009aca:	2002      	movs	r0, #2
 8009acc:	f7fe fe66 	bl	800879c <memp_free>
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	08015e24 	.word	0x08015e24
 8009adc:	08015e90 	.word	0x08015e90
 8009ae0:	08015e68 	.word	0x08015e68

08009ae4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009ae8:	f000 fea2 	bl	800a830 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009aec:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <tcp_tmr+0x28>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	3301      	adds	r3, #1
 8009af2:	b2da      	uxtb	r2, r3
 8009af4:	4b05      	ldr	r3, [pc, #20]	; (8009b0c <tcp_tmr+0x28>)
 8009af6:	701a      	strb	r2, [r3, #0]
 8009af8:	4b04      	ldr	r3, [pc, #16]	; (8009b0c <tcp_tmr+0x28>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d001      	beq.n	8009b08 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009b04:	f000 fb54 	bl	800a1b0 <tcp_slowtmr>
  }
}
 8009b08:	bf00      	nop
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	20010721 	.word	0x20010721

08009b10 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d105      	bne.n	8009b2c <tcp_remove_listener+0x1c>
 8009b20:	4b0d      	ldr	r3, [pc, #52]	; (8009b58 <tcp_remove_listener+0x48>)
 8009b22:	22ff      	movs	r2, #255	; 0xff
 8009b24:	490d      	ldr	r1, [pc, #52]	; (8009b5c <tcp_remove_listener+0x4c>)
 8009b26:	480e      	ldr	r0, [pc, #56]	; (8009b60 <tcp_remove_listener+0x50>)
 8009b28:	f00a ff94 	bl	8014a54 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	e00a      	b.n	8009b48 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d102      	bne.n	8009b42 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1f1      	bne.n	8009b32 <tcp_remove_listener+0x22>
    }
  }
}
 8009b4e:	bf00      	nop
 8009b50:	bf00      	nop
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	08015e24 	.word	0x08015e24
 8009b5c:	08015eac 	.word	0x08015eac
 8009b60:	08015e68 	.word	0x08015e68

08009b64 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d106      	bne.n	8009b80 <tcp_listen_closed+0x1c>
 8009b72:	4b14      	ldr	r3, [pc, #80]	; (8009bc4 <tcp_listen_closed+0x60>)
 8009b74:	f240 1211 	movw	r2, #273	; 0x111
 8009b78:	4913      	ldr	r1, [pc, #76]	; (8009bc8 <tcp_listen_closed+0x64>)
 8009b7a:	4814      	ldr	r0, [pc, #80]	; (8009bcc <tcp_listen_closed+0x68>)
 8009b7c:	f00a ff6a 	bl	8014a54 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	7d1b      	ldrb	r3, [r3, #20]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d006      	beq.n	8009b96 <tcp_listen_closed+0x32>
 8009b88:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <tcp_listen_closed+0x60>)
 8009b8a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009b8e:	4910      	ldr	r1, [pc, #64]	; (8009bd0 <tcp_listen_closed+0x6c>)
 8009b90:	480e      	ldr	r0, [pc, #56]	; (8009bcc <tcp_listen_closed+0x68>)
 8009b92:	f00a ff5f 	bl	8014a54 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009b96:	2301      	movs	r3, #1
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	e00b      	b.n	8009bb4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009b9c:	4a0d      	ldr	r2, [pc, #52]	; (8009bd4 <tcp_listen_closed+0x70>)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff ffb1 	bl	8009b10 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d9f0      	bls.n	8009b9c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	08015e24 	.word	0x08015e24
 8009bc8:	08015ed4 	.word	0x08015ed4
 8009bcc:	08015e68 	.word	0x08015e68
 8009bd0:	08015ee0 	.word	0x08015ee0
 8009bd4:	080181e4 	.word	0x080181e4

08009bd8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009bd8:	b5b0      	push	{r4, r5, r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af04      	add	r7, sp, #16
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	460b      	mov	r3, r1
 8009be2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d106      	bne.n	8009bf8 <tcp_close_shutdown+0x20>
 8009bea:	4b63      	ldr	r3, [pc, #396]	; (8009d78 <tcp_close_shutdown+0x1a0>)
 8009bec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009bf0:	4962      	ldr	r1, [pc, #392]	; (8009d7c <tcp_close_shutdown+0x1a4>)
 8009bf2:	4863      	ldr	r0, [pc, #396]	; (8009d80 <tcp_close_shutdown+0x1a8>)
 8009bf4:	f00a ff2e 	bl	8014a54 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d066      	beq.n	8009ccc <tcp_close_shutdown+0xf4>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7d1b      	ldrb	r3, [r3, #20]
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d003      	beq.n	8009c0e <tcp_close_shutdown+0x36>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	7d1b      	ldrb	r3, [r3, #20]
 8009c0a:	2b07      	cmp	r3, #7
 8009c0c:	d15e      	bne.n	8009ccc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d104      	bne.n	8009c20 <tcp_close_shutdown+0x48>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009c1e:	d055      	beq.n	8009ccc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	8b5b      	ldrh	r3, [r3, #26]
 8009c24:	f003 0310 	and.w	r3, r3, #16
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d106      	bne.n	8009c3a <tcp_close_shutdown+0x62>
 8009c2c:	4b52      	ldr	r3, [pc, #328]	; (8009d78 <tcp_close_shutdown+0x1a0>)
 8009c2e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009c32:	4954      	ldr	r1, [pc, #336]	; (8009d84 <tcp_close_shutdown+0x1ac>)
 8009c34:	4852      	ldr	r0, [pc, #328]	; (8009d80 <tcp_close_shutdown+0x1a8>)
 8009c36:	f00a ff0d 	bl	8014a54 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009c42:	687d      	ldr	r5, [r7, #4]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	3304      	adds	r3, #4
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	8ad2      	ldrh	r2, [r2, #22]
 8009c4c:	6879      	ldr	r1, [r7, #4]
 8009c4e:	8b09      	ldrh	r1, [r1, #24]
 8009c50:	9102      	str	r1, [sp, #8]
 8009c52:	9201      	str	r2, [sp, #4]
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	462b      	mov	r3, r5
 8009c58:	4622      	mov	r2, r4
 8009c5a:	4601      	mov	r1, r0
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f004 fe8d 	bl	800e97c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 f8c6 	bl	800adf4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009c68:	4b47      	ldr	r3, [pc, #284]	; (8009d88 <tcp_close_shutdown+0x1b0>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d105      	bne.n	8009c7e <tcp_close_shutdown+0xa6>
 8009c72:	4b45      	ldr	r3, [pc, #276]	; (8009d88 <tcp_close_shutdown+0x1b0>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	4a43      	ldr	r2, [pc, #268]	; (8009d88 <tcp_close_shutdown+0x1b0>)
 8009c7a:	6013      	str	r3, [r2, #0]
 8009c7c:	e013      	b.n	8009ca6 <tcp_close_shutdown+0xce>
 8009c7e:	4b42      	ldr	r3, [pc, #264]	; (8009d88 <tcp_close_shutdown+0x1b0>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	60fb      	str	r3, [r7, #12]
 8009c84:	e00c      	b.n	8009ca0 <tcp_close_shutdown+0xc8>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d104      	bne.n	8009c9a <tcp_close_shutdown+0xc2>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68da      	ldr	r2, [r3, #12]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	60da      	str	r2, [r3, #12]
 8009c98:	e005      	b.n	8009ca6 <tcp_close_shutdown+0xce>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1ef      	bne.n	8009c86 <tcp_close_shutdown+0xae>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	60da      	str	r2, [r3, #12]
 8009cac:	4b37      	ldr	r3, [pc, #220]	; (8009d8c <tcp_close_shutdown+0x1b4>)
 8009cae:	2201      	movs	r2, #1
 8009cb0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009cb2:	4b37      	ldr	r3, [pc, #220]	; (8009d90 <tcp_close_shutdown+0x1b8>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d102      	bne.n	8009cc2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009cbc:	f003 fd5a 	bl	800d774 <tcp_trigger_input_pcb_close>
 8009cc0:	e002      	b.n	8009cc8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff fed6 	bl	8009a74 <tcp_free>
      }
      return ERR_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	e050      	b.n	8009d6e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7d1b      	ldrb	r3, [r3, #20]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d03b      	beq.n	8009d4c <tcp_close_shutdown+0x174>
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	dc44      	bgt.n	8009d62 <tcp_close_shutdown+0x18a>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <tcp_close_shutdown+0x10a>
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d02a      	beq.n	8009d36 <tcp_close_shutdown+0x15e>
 8009ce0:	e03f      	b.n	8009d62 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	8adb      	ldrh	r3, [r3, #22]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d021      	beq.n	8009d2e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009cea:	4b2a      	ldr	r3, [pc, #168]	; (8009d94 <tcp_close_shutdown+0x1bc>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d105      	bne.n	8009d00 <tcp_close_shutdown+0x128>
 8009cf4:	4b27      	ldr	r3, [pc, #156]	; (8009d94 <tcp_close_shutdown+0x1bc>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	4a26      	ldr	r2, [pc, #152]	; (8009d94 <tcp_close_shutdown+0x1bc>)
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	e013      	b.n	8009d28 <tcp_close_shutdown+0x150>
 8009d00:	4b24      	ldr	r3, [pc, #144]	; (8009d94 <tcp_close_shutdown+0x1bc>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	60bb      	str	r3, [r7, #8]
 8009d06:	e00c      	b.n	8009d22 <tcp_close_shutdown+0x14a>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d104      	bne.n	8009d1c <tcp_close_shutdown+0x144>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	60da      	str	r2, [r3, #12]
 8009d1a:	e005      	b.n	8009d28 <tcp_close_shutdown+0x150>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	60bb      	str	r3, [r7, #8]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1ef      	bne.n	8009d08 <tcp_close_shutdown+0x130>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7ff fea0 	bl	8009a74 <tcp_free>
      break;
 8009d34:	e01a      	b.n	8009d6c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f7ff ff14 	bl	8009b64 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	4816      	ldr	r0, [pc, #88]	; (8009d98 <tcp_close_shutdown+0x1c0>)
 8009d40:	f001 f8a8 	bl	800ae94 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff feb1 	bl	8009aac <tcp_free_listen>
      break;
 8009d4a:	e00f      	b.n	8009d6c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009d4c:	6879      	ldr	r1, [r7, #4]
 8009d4e:	480e      	ldr	r0, [pc, #56]	; (8009d88 <tcp_close_shutdown+0x1b0>)
 8009d50:	f001 f8a0 	bl	800ae94 <tcp_pcb_remove>
 8009d54:	4b0d      	ldr	r3, [pc, #52]	; (8009d8c <tcp_close_shutdown+0x1b4>)
 8009d56:	2201      	movs	r2, #1
 8009d58:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7ff fe8a 	bl	8009a74 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009d60:	e004      	b.n	8009d6c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f81a 	bl	8009d9c <tcp_close_shutdown_fin>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	e000      	b.n	8009d6e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bdb0      	pop	{r4, r5, r7, pc}
 8009d76:	bf00      	nop
 8009d78:	08015e24 	.word	0x08015e24
 8009d7c:	08015ef8 	.word	0x08015ef8
 8009d80:	08015e68 	.word	0x08015e68
 8009d84:	08015f18 	.word	0x08015f18
 8009d88:	20018d3c 	.word	0x20018d3c
 8009d8c:	20018d38 	.word	0x20018d38
 8009d90:	20018d50 	.word	0x20018d50
 8009d94:	20018d48 	.word	0x20018d48
 8009d98:	20018d44 	.word	0x20018d44

08009d9c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d106      	bne.n	8009db8 <tcp_close_shutdown_fin+0x1c>
 8009daa:	4b2e      	ldr	r3, [pc, #184]	; (8009e64 <tcp_close_shutdown_fin+0xc8>)
 8009dac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009db0:	492d      	ldr	r1, [pc, #180]	; (8009e68 <tcp_close_shutdown_fin+0xcc>)
 8009db2:	482e      	ldr	r0, [pc, #184]	; (8009e6c <tcp_close_shutdown_fin+0xd0>)
 8009db4:	f00a fe4e 	bl	8014a54 <iprintf>

  switch (pcb->state) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7d1b      	ldrb	r3, [r3, #20]
 8009dbc:	2b07      	cmp	r3, #7
 8009dbe:	d020      	beq.n	8009e02 <tcp_close_shutdown_fin+0x66>
 8009dc0:	2b07      	cmp	r3, #7
 8009dc2:	dc2b      	bgt.n	8009e1c <tcp_close_shutdown_fin+0x80>
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d002      	beq.n	8009dce <tcp_close_shutdown_fin+0x32>
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d00d      	beq.n	8009de8 <tcp_close_shutdown_fin+0x4c>
 8009dcc:	e026      	b.n	8009e1c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f003 fee2 	bl	800db98 <tcp_send_fin>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d11f      	bne.n	8009e20 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2205      	movs	r2, #5
 8009de4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009de6:	e01b      	b.n	8009e20 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f003 fed5 	bl	800db98 <tcp_send_fin>
 8009dee:	4603      	mov	r3, r0
 8009df0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d114      	bne.n	8009e24 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2205      	movs	r2, #5
 8009dfe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009e00:	e010      	b.n	8009e24 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f003 fec8 	bl	800db98 <tcp_send_fin>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d109      	bne.n	8009e28 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2209      	movs	r2, #9
 8009e18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009e1a:	e005      	b.n	8009e28 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	e01c      	b.n	8009e5a <tcp_close_shutdown_fin+0xbe>
      break;
 8009e20:	bf00      	nop
 8009e22:	e002      	b.n	8009e2a <tcp_close_shutdown_fin+0x8e>
      break;
 8009e24:	bf00      	nop
 8009e26:	e000      	b.n	8009e2a <tcp_close_shutdown_fin+0x8e>
      break;
 8009e28:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d103      	bne.n	8009e3a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f003 ffee 	bl	800de14 <tcp_output>
 8009e38:	e00d      	b.n	8009e56 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e42:	d108      	bne.n	8009e56 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	8b5b      	ldrh	r3, [r3, #26]
 8009e48:	f043 0308 	orr.w	r3, r3, #8
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	e001      	b.n	8009e5a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	08015e24 	.word	0x08015e24
 8009e68:	08015ed4 	.word	0x08015ed4
 8009e6c:	08015e68 	.word	0x08015e68

08009e70 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d109      	bne.n	8009e92 <tcp_close+0x22>
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <tcp_close+0x4c>)
 8009e80:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009e84:	490e      	ldr	r1, [pc, #56]	; (8009ec0 <tcp_close+0x50>)
 8009e86:	480f      	ldr	r0, [pc, #60]	; (8009ec4 <tcp_close+0x54>)
 8009e88:	f00a fde4 	bl	8014a54 <iprintf>
 8009e8c:	f06f 030f 	mvn.w	r3, #15
 8009e90:	e00f      	b.n	8009eb2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	7d1b      	ldrb	r3, [r3, #20]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d006      	beq.n	8009ea8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	8b5b      	ldrh	r3, [r3, #26]
 8009e9e:	f043 0310 	orr.w	r3, r3, #16
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009ea8:	2101      	movs	r1, #1
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fe94 	bl	8009bd8 <tcp_close_shutdown>
 8009eb0:	4603      	mov	r3, r0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	08015e24 	.word	0x08015e24
 8009ec0:	08015f34 	.word	0x08015f34
 8009ec4:	08015e68 	.word	0x08015e68

08009ec8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08e      	sub	sp, #56	; 0x38
 8009ecc:	af04      	add	r7, sp, #16
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d107      	bne.n	8009ee8 <tcp_abandon+0x20>
 8009ed8:	4b52      	ldr	r3, [pc, #328]	; (800a024 <tcp_abandon+0x15c>)
 8009eda:	f240 223d 	movw	r2, #573	; 0x23d
 8009ede:	4952      	ldr	r1, [pc, #328]	; (800a028 <tcp_abandon+0x160>)
 8009ee0:	4852      	ldr	r0, [pc, #328]	; (800a02c <tcp_abandon+0x164>)
 8009ee2:	f00a fdb7 	bl	8014a54 <iprintf>
 8009ee6:	e099      	b.n	800a01c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	7d1b      	ldrb	r3, [r3, #20]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d106      	bne.n	8009efe <tcp_abandon+0x36>
 8009ef0:	4b4c      	ldr	r3, [pc, #304]	; (800a024 <tcp_abandon+0x15c>)
 8009ef2:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009ef6:	494e      	ldr	r1, [pc, #312]	; (800a030 <tcp_abandon+0x168>)
 8009ef8:	484c      	ldr	r0, [pc, #304]	; (800a02c <tcp_abandon+0x164>)
 8009efa:	f00a fdab 	bl	8014a54 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	7d1b      	ldrb	r3, [r3, #20]
 8009f02:	2b0a      	cmp	r3, #10
 8009f04:	d107      	bne.n	8009f16 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	484a      	ldr	r0, [pc, #296]	; (800a034 <tcp_abandon+0x16c>)
 8009f0a:	f000 ffc3 	bl	800ae94 <tcp_pcb_remove>
    tcp_free(pcb);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7ff fdb0 	bl	8009a74 <tcp_free>
 8009f14:	e082      	b.n	800a01c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f22:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f30:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	7d1b      	ldrb	r3, [r3, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d126      	bne.n	8009f8e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	8adb      	ldrh	r3, [r3, #22]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d02e      	beq.n	8009fa6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009f48:	4b3b      	ldr	r3, [pc, #236]	; (800a038 <tcp_abandon+0x170>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d105      	bne.n	8009f5e <tcp_abandon+0x96>
 8009f52:	4b39      	ldr	r3, [pc, #228]	; (800a038 <tcp_abandon+0x170>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	4a37      	ldr	r2, [pc, #220]	; (800a038 <tcp_abandon+0x170>)
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	e013      	b.n	8009f86 <tcp_abandon+0xbe>
 8009f5e:	4b36      	ldr	r3, [pc, #216]	; (800a038 <tcp_abandon+0x170>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	e00c      	b.n	8009f80 <tcp_abandon+0xb8>
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d104      	bne.n	8009f7a <tcp_abandon+0xb2>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	60da      	str	r2, [r3, #12]
 8009f78:	e005      	b.n	8009f86 <tcp_abandon+0xbe>
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	61fb      	str	r3, [r7, #28]
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1ef      	bne.n	8009f66 <tcp_abandon+0x9e>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	60da      	str	r2, [r3, #12]
 8009f8c:	e00b      	b.n	8009fa6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	8adb      	ldrh	r3, [r3, #22]
 8009f96:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	4828      	ldr	r0, [pc, #160]	; (800a03c <tcp_abandon+0x174>)
 8009f9c:	f000 ff7a 	bl	800ae94 <tcp_pcb_remove>
 8009fa0:	4b27      	ldr	r3, [pc, #156]	; (800a040 <tcp_abandon+0x178>)
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d004      	beq.n	8009fb8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 fd1c 	bl	800a9f0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d004      	beq.n	8009fca <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 fd13 	bl	800a9f0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d004      	beq.n	8009fdc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 fd0a 	bl	800a9f0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00e      	beq.n	800a000 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009fe2:	6879      	ldr	r1, [r7, #4]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	8b12      	ldrh	r2, [r2, #24]
 8009fec:	9202      	str	r2, [sp, #8]
 8009fee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009ff0:	9201      	str	r2, [sp, #4]
 8009ff2:	9300      	str	r3, [sp, #0]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	69b9      	ldr	r1, [r7, #24]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f004 fcbe 	bl	800e97c <tcp_rst>
    }
    last_state = pcb->state;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	7d1b      	ldrb	r3, [r3, #20]
 800a004:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7ff fd34 	bl	8009a74 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d004      	beq.n	800a01c <tcp_abandon+0x154>
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f06f 010c 	mvn.w	r1, #12
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	4798      	blx	r3
  }
}
 800a01c:	3728      	adds	r7, #40	; 0x28
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	08015e24 	.word	0x08015e24
 800a028:	08015f68 	.word	0x08015f68
 800a02c:	08015e68 	.word	0x08015e68
 800a030:	08015f84 	.word	0x08015f84
 800a034:	20018d4c 	.word	0x20018d4c
 800a038:	20018d48 	.word	0x20018d48
 800a03c:	20018d3c 	.word	0x20018d3c
 800a040:	20018d38 	.word	0x20018d38

0800a044 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a04c:	2101      	movs	r1, #1
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7ff ff3a 	bl	8009ec8 <tcp_abandon>
}
 800a054:	bf00      	nop
 800a056:	3708      	adds	r7, #8
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d106      	bne.n	800a078 <tcp_update_rcv_ann_wnd+0x1c>
 800a06a:	4b25      	ldr	r3, [pc, #148]	; (800a100 <tcp_update_rcv_ann_wnd+0xa4>)
 800a06c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a070:	4924      	ldr	r1, [pc, #144]	; (800a104 <tcp_update_rcv_ann_wnd+0xa8>)
 800a072:	4825      	ldr	r0, [pc, #148]	; (800a108 <tcp_update_rcv_ann_wnd+0xac>)
 800a074:	f00a fcee 	bl	8014a54 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a080:	4413      	add	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a08c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a090:	bf28      	it	cs
 800a092:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a096:	b292      	uxth	r2, r2
 800a098:	4413      	add	r3, r2
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	db08      	blt.n	800a0b4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	e020      	b.n	800a0f6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	dd03      	ble.n	800a0ca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a0c8:	e014      	b.n	800a0f4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0dc:	d306      	bcc.n	800a0ec <tcp_update_rcv_ann_wnd+0x90>
 800a0de:	4b08      	ldr	r3, [pc, #32]	; (800a100 <tcp_update_rcv_ann_wnd+0xa4>)
 800a0e0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a0e4:	4909      	ldr	r1, [pc, #36]	; (800a10c <tcp_update_rcv_ann_wnd+0xb0>)
 800a0e6:	4808      	ldr	r0, [pc, #32]	; (800a108 <tcp_update_rcv_ann_wnd+0xac>)
 800a0e8:	f00a fcb4 	bl	8014a54 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a0f4:	2300      	movs	r3, #0
  }
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	08015e24 	.word	0x08015e24
 800a104:	08016080 	.word	0x08016080
 800a108:	08015e68 	.word	0x08015e68
 800a10c:	080160a4 	.word	0x080160a4

0800a110 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d107      	bne.n	800a132 <tcp_recved+0x22>
 800a122:	4b1f      	ldr	r3, [pc, #124]	; (800a1a0 <tcp_recved+0x90>)
 800a124:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a128:	491e      	ldr	r1, [pc, #120]	; (800a1a4 <tcp_recved+0x94>)
 800a12a:	481f      	ldr	r0, [pc, #124]	; (800a1a8 <tcp_recved+0x98>)
 800a12c:	f00a fc92 	bl	8014a54 <iprintf>
 800a130:	e032      	b.n	800a198 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	7d1b      	ldrb	r3, [r3, #20]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d106      	bne.n	800a148 <tcp_recved+0x38>
 800a13a:	4b19      	ldr	r3, [pc, #100]	; (800a1a0 <tcp_recved+0x90>)
 800a13c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800a140:	491a      	ldr	r1, [pc, #104]	; (800a1ac <tcp_recved+0x9c>)
 800a142:	4819      	ldr	r0, [pc, #100]	; (800a1a8 <tcp_recved+0x98>)
 800a144:	f00a fc86 	bl	8014a54 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a14c:	887b      	ldrh	r3, [r7, #2]
 800a14e:	4413      	add	r3, r2
 800a150:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a152:	89fb      	ldrh	r3, [r7, #14]
 800a154:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a158:	d804      	bhi.n	800a164 <tcp_recved+0x54>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a15e:	89fa      	ldrh	r2, [r7, #14]
 800a160:	429a      	cmp	r2, r3
 800a162:	d204      	bcs.n	800a16e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a16a:	851a      	strh	r2, [r3, #40]	; 0x28
 800a16c:	e002      	b.n	800a174 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	89fa      	ldrh	r2, [r7, #14]
 800a172:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7ff ff71 	bl	800a05c <tcp_update_rcv_ann_wnd>
 800a17a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a182:	d309      	bcc.n	800a198 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	8b5b      	ldrh	r3, [r3, #26]
 800a188:	f043 0302 	orr.w	r3, r3, #2
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f003 fe3e 	bl	800de14 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	08015e24 	.word	0x08015e24
 800a1a4:	080160c0 	.word	0x080160c0
 800a1a8:	08015e68 	.word	0x08015e68
 800a1ac:	080160d8 	.word	0x080160d8

0800a1b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a1b0:	b5b0      	push	{r4, r5, r7, lr}
 800a1b2:	b090      	sub	sp, #64	; 0x40
 800a1b4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a1bc:	4b94      	ldr	r3, [pc, #592]	; (800a410 <tcp_slowtmr+0x260>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	4a93      	ldr	r2, [pc, #588]	; (800a410 <tcp_slowtmr+0x260>)
 800a1c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a1c6:	4b93      	ldr	r3, [pc, #588]	; (800a414 <tcp_slowtmr+0x264>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	4b91      	ldr	r3, [pc, #580]	; (800a414 <tcp_slowtmr+0x264>)
 800a1d0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a1d6:	4b90      	ldr	r3, [pc, #576]	; (800a418 <tcp_slowtmr+0x268>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a1dc:	e29f      	b.n	800a71e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e0:	7d1b      	ldrb	r3, [r3, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d106      	bne.n	800a1f4 <tcp_slowtmr+0x44>
 800a1e6:	4b8d      	ldr	r3, [pc, #564]	; (800a41c <tcp_slowtmr+0x26c>)
 800a1e8:	f240 42be 	movw	r2, #1214	; 0x4be
 800a1ec:	498c      	ldr	r1, [pc, #560]	; (800a420 <tcp_slowtmr+0x270>)
 800a1ee:	488d      	ldr	r0, [pc, #564]	; (800a424 <tcp_slowtmr+0x274>)
 800a1f0:	f00a fc30 	bl	8014a54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f6:	7d1b      	ldrb	r3, [r3, #20]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d106      	bne.n	800a20a <tcp_slowtmr+0x5a>
 800a1fc:	4b87      	ldr	r3, [pc, #540]	; (800a41c <tcp_slowtmr+0x26c>)
 800a1fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a202:	4989      	ldr	r1, [pc, #548]	; (800a428 <tcp_slowtmr+0x278>)
 800a204:	4887      	ldr	r0, [pc, #540]	; (800a424 <tcp_slowtmr+0x274>)
 800a206:	f00a fc25 	bl	8014a54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20c:	7d1b      	ldrb	r3, [r3, #20]
 800a20e:	2b0a      	cmp	r3, #10
 800a210:	d106      	bne.n	800a220 <tcp_slowtmr+0x70>
 800a212:	4b82      	ldr	r3, [pc, #520]	; (800a41c <tcp_slowtmr+0x26c>)
 800a214:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a218:	4984      	ldr	r1, [pc, #528]	; (800a42c <tcp_slowtmr+0x27c>)
 800a21a:	4882      	ldr	r0, [pc, #520]	; (800a424 <tcp_slowtmr+0x274>)
 800a21c:	f00a fc1a 	bl	8014a54 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	7f9a      	ldrb	r2, [r3, #30]
 800a224:	4b7b      	ldr	r3, [pc, #492]	; (800a414 <tcp_slowtmr+0x264>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d105      	bne.n	800a238 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a236:	e272      	b.n	800a71e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a238:	4b76      	ldr	r3, [pc, #472]	; (800a414 <tcp_slowtmr+0x264>)
 800a23a:	781a      	ldrb	r2, [r3, #0]
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	7d1b      	ldrb	r3, [r3, #20]
 800a250:	2b02      	cmp	r3, #2
 800a252:	d10a      	bne.n	800a26a <tcp_slowtmr+0xba>
 800a254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a256:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a25a:	2b05      	cmp	r3, #5
 800a25c:	d905      	bls.n	800a26a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a262:	3301      	adds	r3, #1
 800a264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a268:	e11e      	b.n	800a4a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a270:	2b0b      	cmp	r3, #11
 800a272:	d905      	bls.n	800a280 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a278:	3301      	adds	r3, #1
 800a27a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a27e:	e113      	b.n	800a4a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a282:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a286:	2b00      	cmp	r3, #0
 800a288:	d075      	beq.n	800a376 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d006      	beq.n	800a2a0 <tcp_slowtmr+0xf0>
 800a292:	4b62      	ldr	r3, [pc, #392]	; (800a41c <tcp_slowtmr+0x26c>)
 800a294:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a298:	4965      	ldr	r1, [pc, #404]	; (800a430 <tcp_slowtmr+0x280>)
 800a29a:	4862      	ldr	r0, [pc, #392]	; (800a424 <tcp_slowtmr+0x274>)
 800a29c:	f00a fbda 	bl	8014a54 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d106      	bne.n	800a2b6 <tcp_slowtmr+0x106>
 800a2a8:	4b5c      	ldr	r3, [pc, #368]	; (800a41c <tcp_slowtmr+0x26c>)
 800a2aa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a2ae:	4961      	ldr	r1, [pc, #388]	; (800a434 <tcp_slowtmr+0x284>)
 800a2b0:	485c      	ldr	r0, [pc, #368]	; (800a424 <tcp_slowtmr+0x274>)
 800a2b2:	f00a fbcf 	bl	8014a54 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a2bc:	2b0b      	cmp	r3, #11
 800a2be:	d905      	bls.n	800a2cc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a2ca:	e0ed      	b.n	800a4a8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	4a58      	ldr	r2, [pc, #352]	; (800a438 <tcp_slowtmr+0x288>)
 800a2d6:	5cd3      	ldrb	r3, [r2, r3]
 800a2d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a2e0:	7c7a      	ldrb	r2, [r7, #17]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d907      	bls.n	800a2f6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a2fc:	7c7a      	ldrb	r2, [r7, #17]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	f200 80d2 	bhi.w	800a4a8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a304:	2301      	movs	r3, #1
 800a306:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d108      	bne.n	800a324 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a312:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a314:	f004 fc26 	bl	800eb64 <tcp_zero_window_probe>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d014      	beq.n	800a348 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a31e:	2300      	movs	r3, #0
 800a320:	623b      	str	r3, [r7, #32]
 800a322:	e011      	b.n	800a348 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a326:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a32a:	4619      	mov	r1, r3
 800a32c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a32e:	f003 faeb 	bl	800d908 <tcp_split_unsent_seg>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d107      	bne.n	800a348 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a33a:	f003 fd6b 	bl	800de14 <tcp_output>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d101      	bne.n	800a348 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a344:	2300      	movs	r3, #0
 800a346:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a348:	6a3b      	ldr	r3, [r7, #32]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 80ac 	beq.w	800a4a8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a35e:	2b06      	cmp	r3, #6
 800a360:	f200 80a2 	bhi.w	800a4a8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a366:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a36a:	3301      	adds	r3, #1
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a370:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a374:	e098      	b.n	800a4a8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a378:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	db0f      	blt.n	800a3a0 <tcp_slowtmr+0x1f0>
 800a380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a382:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a386:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d008      	beq.n	800a3a0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a390:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a394:	b29b      	uxth	r3, r3
 800a396:	3301      	adds	r3, #1
 800a398:	b29b      	uxth	r3, r3
 800a39a:	b21a      	sxth	r2, r3
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	db7b      	blt.n	800a4a8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a3b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3b2:	f004 f821 	bl	800e3f8 <tcp_rexmit_rto_prepare>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d007      	beq.n	800a3cc <tcp_slowtmr+0x21c>
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d171      	bne.n	800a4a8 <tcp_slowtmr+0x2f8>
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d06d      	beq.n	800a4a8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ce:	7d1b      	ldrb	r3, [r3, #20]
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d03a      	beq.n	800a44a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3da:	2b0c      	cmp	r3, #12
 800a3dc:	bf28      	it	cs
 800a3de:	230c      	movcs	r3, #12
 800a3e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3e8:	10db      	asrs	r3, r3, #3
 800a3ea:	b21b      	sxth	r3, r3
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a3f4:	4413      	add	r3, r2
 800a3f6:	7efa      	ldrb	r2, [r7, #27]
 800a3f8:	4910      	ldr	r1, [pc, #64]	; (800a43c <tcp_slowtmr+0x28c>)
 800a3fa:	5c8a      	ldrb	r2, [r1, r2]
 800a3fc:	4093      	lsls	r3, r2
 800a3fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a406:	4293      	cmp	r3, r2
 800a408:	dc1a      	bgt.n	800a440 <tcp_slowtmr+0x290>
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	b21a      	sxth	r2, r3
 800a40e:	e019      	b.n	800a444 <tcp_slowtmr+0x294>
 800a410:	20018d40 	.word	0x20018d40
 800a414:	20010722 	.word	0x20010722
 800a418:	20018d3c 	.word	0x20018d3c
 800a41c:	08015e24 	.word	0x08015e24
 800a420:	08016168 	.word	0x08016168
 800a424:	08015e68 	.word	0x08015e68
 800a428:	08016194 	.word	0x08016194
 800a42c:	080161c0 	.word	0x080161c0
 800a430:	080161f0 	.word	0x080161f0
 800a434:	08016224 	.word	0x08016224
 800a438:	080181dc 	.word	0x080181dc
 800a43c:	080181cc 	.word	0x080181cc
 800a440:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a446:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44c:	2200      	movs	r2, #0
 800a44e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a45c:	4293      	cmp	r3, r2
 800a45e:	bf28      	it	cs
 800a460:	4613      	movcs	r3, r2
 800a462:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a464:	8a7b      	ldrh	r3, [r7, #18]
 800a466:	085b      	lsrs	r3, r3, #1
 800a468:	b29a      	uxth	r2, r3
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a472:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	429a      	cmp	r2, r3
 800a480:	d206      	bcs.n	800a490 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a484:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a486:	005b      	lsls	r3, r3, #1
 800a488:	b29a      	uxth	r2, r3
 800a48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a496:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49c:	2200      	movs	r2, #0
 800a49e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a4a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4a4:	f004 f818 	bl	800e4d8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4aa:	7d1b      	ldrb	r3, [r3, #20]
 800a4ac:	2b06      	cmp	r3, #6
 800a4ae:	d111      	bne.n	800a4d4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b2:	8b5b      	ldrh	r3, [r3, #26]
 800a4b4:	f003 0310 	and.w	r3, r3, #16
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4bc:	4b9d      	ldr	r3, [pc, #628]	; (800a734 <tcp_slowtmr+0x584>)
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c2:	6a1b      	ldr	r3, [r3, #32]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	2b28      	cmp	r3, #40	; 0x28
 800a4c8:	d904      	bls.n	800a4d4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a4ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d6:	7a5b      	ldrb	r3, [r3, #9]
 800a4d8:	f003 0308 	and.w	r3, r3, #8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d04c      	beq.n	800a57a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d003      	beq.n	800a4f0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a4ec:	2b07      	cmp	r3, #7
 800a4ee:	d144      	bne.n	800a57a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a4f0:	4b90      	ldr	r3, [pc, #576]	; (800a734 <tcp_slowtmr+0x584>)
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a500:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a504:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a508:	498b      	ldr	r1, [pc, #556]	; (800a738 <tcp_slowtmr+0x588>)
 800a50a:	fba1 1303 	umull	r1, r3, r1, r3
 800a50e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a510:	429a      	cmp	r2, r3
 800a512:	d90a      	bls.n	800a52a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a518:	3301      	adds	r3, #1
 800a51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a51e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a522:	3301      	adds	r3, #1
 800a524:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a528:	e027      	b.n	800a57a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a52a:	4b82      	ldr	r3, [pc, #520]	; (800a734 <tcp_slowtmr+0x584>)
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a530:	6a1b      	ldr	r3, [r3, #32]
 800a532:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a540:	4618      	mov	r0, r3
 800a542:	4b7e      	ldr	r3, [pc, #504]	; (800a73c <tcp_slowtmr+0x58c>)
 800a544:	fb03 f300 	mul.w	r3, r3, r0
 800a548:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a54a:	497b      	ldr	r1, [pc, #492]	; (800a738 <tcp_slowtmr+0x588>)
 800a54c:	fba1 1303 	umull	r1, r3, r1, r3
 800a550:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a552:	429a      	cmp	r2, r3
 800a554:	d911      	bls.n	800a57a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a558:	f004 fac4 	bl	800eae4 <tcp_keepalive>
 800a55c:	4603      	mov	r3, r0
 800a55e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a562:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a566:	2b00      	cmp	r3, #0
 800a568:	d107      	bne.n	800a57a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a570:	3301      	adds	r3, #1
 800a572:	b2da      	uxtb	r2, r3
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d011      	beq.n	800a5a6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a582:	4b6c      	ldr	r3, [pc, #432]	; (800a734 <tcp_slowtmr+0x584>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	1ad2      	subs	r2, r2, r3
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a592:	4619      	mov	r1, r3
 800a594:	460b      	mov	r3, r1
 800a596:	005b      	lsls	r3, r3, #1
 800a598:	440b      	add	r3, r1
 800a59a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d302      	bcc.n	800a5a6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a5a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5a2:	f000 fddb 	bl	800b15c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a8:	7d1b      	ldrb	r3, [r3, #20]
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d10b      	bne.n	800a5c6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a5ae:	4b61      	ldr	r3, [pc, #388]	; (800a734 <tcp_slowtmr+0x584>)
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b4:	6a1b      	ldr	r3, [r3, #32]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	2b28      	cmp	r3, #40	; 0x28
 800a5ba:	d904      	bls.n	800a5c6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c8:	7d1b      	ldrb	r3, [r3, #20]
 800a5ca:	2b09      	cmp	r3, #9
 800a5cc:	d10b      	bne.n	800a5e6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a5ce:	4b59      	ldr	r3, [pc, #356]	; (800a734 <tcp_slowtmr+0x584>)
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	2bf0      	cmp	r3, #240	; 0xf0
 800a5da:	d904      	bls.n	800a5e6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d060      	beq.n	800a6b0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5f4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a5f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5f8:	f000 fbfc 	bl	800adf4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d010      	beq.n	800a624 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a602:	4b4f      	ldr	r3, [pc, #316]	; (800a740 <tcp_slowtmr+0x590>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a608:	429a      	cmp	r2, r3
 800a60a:	d106      	bne.n	800a61a <tcp_slowtmr+0x46a>
 800a60c:	4b4d      	ldr	r3, [pc, #308]	; (800a744 <tcp_slowtmr+0x594>)
 800a60e:	f240 526d 	movw	r2, #1389	; 0x56d
 800a612:	494d      	ldr	r1, [pc, #308]	; (800a748 <tcp_slowtmr+0x598>)
 800a614:	484d      	ldr	r0, [pc, #308]	; (800a74c <tcp_slowtmr+0x59c>)
 800a616:	f00a fa1d 	bl	8014a54 <iprintf>
        prev->next = pcb->next;
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	68da      	ldr	r2, [r3, #12]
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	e00f      	b.n	800a644 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a624:	4b46      	ldr	r3, [pc, #280]	; (800a740 <tcp_slowtmr+0x590>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d006      	beq.n	800a63c <tcp_slowtmr+0x48c>
 800a62e:	4b45      	ldr	r3, [pc, #276]	; (800a744 <tcp_slowtmr+0x594>)
 800a630:	f240 5271 	movw	r2, #1393	; 0x571
 800a634:	4946      	ldr	r1, [pc, #280]	; (800a750 <tcp_slowtmr+0x5a0>)
 800a636:	4845      	ldr	r0, [pc, #276]	; (800a74c <tcp_slowtmr+0x59c>)
 800a638:	f00a fa0c 	bl	8014a54 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	4a3f      	ldr	r2, [pc, #252]	; (800a740 <tcp_slowtmr+0x590>)
 800a642:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a644:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d013      	beq.n	800a674 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a652:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a654:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a658:	3304      	adds	r3, #4
 800a65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a65c:	8ad2      	ldrh	r2, [r2, #22]
 800a65e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a660:	8b09      	ldrh	r1, [r1, #24]
 800a662:	9102      	str	r1, [sp, #8]
 800a664:	9201      	str	r2, [sp, #4]
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	462b      	mov	r3, r5
 800a66a:	4622      	mov	r2, r4
 800a66c:	4601      	mov	r1, r0
 800a66e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a670:	f004 f984 	bl	800e97c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	7d1b      	ldrb	r3, [r3, #20]
 800a67e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a682:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	68db      	ldr	r3, [r3, #12]
 800a688:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a68a:	6838      	ldr	r0, [r7, #0]
 800a68c:	f7ff f9f2 	bl	8009a74 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a690:	4b30      	ldr	r3, [pc, #192]	; (800a754 <tcp_slowtmr+0x5a4>)
 800a692:	2200      	movs	r2, #0
 800a694:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d004      	beq.n	800a6a6 <tcp_slowtmr+0x4f6>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f06f 010c 	mvn.w	r1, #12
 800a6a2:	68b8      	ldr	r0, [r7, #8]
 800a6a4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a6a6:	4b2b      	ldr	r3, [pc, #172]	; (800a754 <tcp_slowtmr+0x5a4>)
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d037      	beq.n	800a71e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a6ae:	e590      	b.n	800a1d2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	7f1b      	ldrb	r3, [r3, #28]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c8:	7f1a      	ldrb	r2, [r3, #28]
 800a6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6cc:	7f5b      	ldrb	r3, [r3, #29]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d325      	bcc.n	800a71e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a6d8:	4b1e      	ldr	r3, [pc, #120]	; (800a754 <tcp_slowtmr+0x5a4>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00b      	beq.n	800a700 <tcp_slowtmr+0x550>
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6f0:	6912      	ldr	r2, [r2, #16]
 800a6f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	4798      	blx	r3
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a6fe:	e002      	b.n	800a706 <tcp_slowtmr+0x556>
 800a700:	2300      	movs	r3, #0
 800a702:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a706:	4b13      	ldr	r3, [pc, #76]	; (800a754 <tcp_slowtmr+0x5a4>)
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d000      	beq.n	800a710 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a70e:	e560      	b.n	800a1d2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a710:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a714:	2b00      	cmp	r3, #0
 800a716:	d102      	bne.n	800a71e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a71a:	f003 fb7b 	bl	800de14 <tcp_output>
  while (pcb != NULL) {
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	2b00      	cmp	r3, #0
 800a722:	f47f ad5c 	bne.w	800a1de <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a726:	2300      	movs	r3, #0
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a72a:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <tcp_slowtmr+0x5a8>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a730:	e067      	b.n	800a802 <tcp_slowtmr+0x652>
 800a732:	bf00      	nop
 800a734:	20018d40 	.word	0x20018d40
 800a738:	10624dd3 	.word	0x10624dd3
 800a73c:	000124f8 	.word	0x000124f8
 800a740:	20018d3c 	.word	0x20018d3c
 800a744:	08015e24 	.word	0x08015e24
 800a748:	0801625c 	.word	0x0801625c
 800a74c:	08015e68 	.word	0x08015e68
 800a750:	08016288 	.word	0x08016288
 800a754:	20018d38 	.word	0x20018d38
 800a758:	20018d4c 	.word	0x20018d4c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75e:	7d1b      	ldrb	r3, [r3, #20]
 800a760:	2b0a      	cmp	r3, #10
 800a762:	d006      	beq.n	800a772 <tcp_slowtmr+0x5c2>
 800a764:	4b2b      	ldr	r3, [pc, #172]	; (800a814 <tcp_slowtmr+0x664>)
 800a766:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a76a:	492b      	ldr	r1, [pc, #172]	; (800a818 <tcp_slowtmr+0x668>)
 800a76c:	482b      	ldr	r0, [pc, #172]	; (800a81c <tcp_slowtmr+0x66c>)
 800a76e:	f00a f971 	bl	8014a54 <iprintf>
    pcb_remove = 0;
 800a772:	2300      	movs	r3, #0
 800a774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a778:	4b29      	ldr	r3, [pc, #164]	; (800a820 <tcp_slowtmr+0x670>)
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	6a1b      	ldr	r3, [r3, #32]
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	2bf0      	cmp	r3, #240	; 0xf0
 800a784:	d904      	bls.n	800a790 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a78a:	3301      	adds	r3, #1
 800a78c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a794:	2b00      	cmp	r3, #0
 800a796:	d02f      	beq.n	800a7f8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a79a:	f000 fb2b 	bl	800adf4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d010      	beq.n	800a7c6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a7a4:	4b1f      	ldr	r3, [pc, #124]	; (800a824 <tcp_slowtmr+0x674>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d106      	bne.n	800a7bc <tcp_slowtmr+0x60c>
 800a7ae:	4b19      	ldr	r3, [pc, #100]	; (800a814 <tcp_slowtmr+0x664>)
 800a7b0:	f240 52af 	movw	r2, #1455	; 0x5af
 800a7b4:	491c      	ldr	r1, [pc, #112]	; (800a828 <tcp_slowtmr+0x678>)
 800a7b6:	4819      	ldr	r0, [pc, #100]	; (800a81c <tcp_slowtmr+0x66c>)
 800a7b8:	f00a f94c 	bl	8014a54 <iprintf>
        prev->next = pcb->next;
 800a7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7be:	68da      	ldr	r2, [r3, #12]
 800a7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c2:	60da      	str	r2, [r3, #12]
 800a7c4:	e00f      	b.n	800a7e6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a7c6:	4b17      	ldr	r3, [pc, #92]	; (800a824 <tcp_slowtmr+0x674>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d006      	beq.n	800a7de <tcp_slowtmr+0x62e>
 800a7d0:	4b10      	ldr	r3, [pc, #64]	; (800a814 <tcp_slowtmr+0x664>)
 800a7d2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a7d6:	4915      	ldr	r1, [pc, #84]	; (800a82c <tcp_slowtmr+0x67c>)
 800a7d8:	4810      	ldr	r0, [pc, #64]	; (800a81c <tcp_slowtmr+0x66c>)
 800a7da:	f00a f93b 	bl	8014a54 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	4a10      	ldr	r2, [pc, #64]	; (800a824 <tcp_slowtmr+0x674>)
 800a7e4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a7f0:	69f8      	ldr	r0, [r7, #28]
 800a7f2:	f7ff f93f 	bl	8009a74 <tcp_free>
 800a7f6:	e004      	b.n	800a802 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1a9      	bne.n	800a75c <tcp_slowtmr+0x5ac>
    }
  }
}
 800a808:	bf00      	nop
 800a80a:	bf00      	nop
 800a80c:	3730      	adds	r7, #48	; 0x30
 800a80e:	46bd      	mov	sp, r7
 800a810:	bdb0      	pop	{r4, r5, r7, pc}
 800a812:	bf00      	nop
 800a814:	08015e24 	.word	0x08015e24
 800a818:	080162b4 	.word	0x080162b4
 800a81c:	08015e68 	.word	0x08015e68
 800a820:	20018d40 	.word	0x20018d40
 800a824:	20018d4c 	.word	0x20018d4c
 800a828:	080162e4 	.word	0x080162e4
 800a82c:	0801630c 	.word	0x0801630c

0800a830 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a836:	4b2d      	ldr	r3, [pc, #180]	; (800a8ec <tcp_fasttmr+0xbc>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	3301      	adds	r3, #1
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	4b2b      	ldr	r3, [pc, #172]	; (800a8ec <tcp_fasttmr+0xbc>)
 800a840:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a842:	4b2b      	ldr	r3, [pc, #172]	; (800a8f0 <tcp_fasttmr+0xc0>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a848:	e048      	b.n	800a8dc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	7f9a      	ldrb	r2, [r3, #30]
 800a84e:	4b27      	ldr	r3, [pc, #156]	; (800a8ec <tcp_fasttmr+0xbc>)
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	429a      	cmp	r2, r3
 800a854:	d03f      	beq.n	800a8d6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a856:	4b25      	ldr	r3, [pc, #148]	; (800a8ec <tcp_fasttmr+0xbc>)
 800a858:	781a      	ldrb	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	8b5b      	ldrh	r3, [r3, #26]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d010      	beq.n	800a88c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	8b5b      	ldrh	r3, [r3, #26]
 800a86e:	f043 0302 	orr.w	r3, r3, #2
 800a872:	b29a      	uxth	r2, r3
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f003 facb 	bl	800de14 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	8b5b      	ldrh	r3, [r3, #26]
 800a882:	f023 0303 	bic.w	r3, r3, #3
 800a886:	b29a      	uxth	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	8b5b      	ldrh	r3, [r3, #26]
 800a890:	f003 0308 	and.w	r3, r3, #8
 800a894:	2b00      	cmp	r3, #0
 800a896:	d009      	beq.n	800a8ac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	8b5b      	ldrh	r3, [r3, #26]
 800a89c:	f023 0308 	bic.w	r3, r3, #8
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff fa78 	bl	8009d9c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a8ba:	4b0e      	ldr	r3, [pc, #56]	; (800a8f4 <tcp_fasttmr+0xc4>)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f819 	bl	800a8f8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a8c6:	4b0b      	ldr	r3, [pc, #44]	; (800a8f4 <tcp_fasttmr+0xc4>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d000      	beq.n	800a8d0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a8ce:	e7b8      	b.n	800a842 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	607b      	str	r3, [r7, #4]
 800a8d4:	e002      	b.n	800a8dc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1b3      	bne.n	800a84a <tcp_fasttmr+0x1a>
    }
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20010722 	.word	0x20010722
 800a8f0:	20018d3c 	.word	0x20018d3c
 800a8f4:	20018d38 	.word	0x20018d38

0800a8f8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a8f8:	b590      	push	{r4, r7, lr}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d109      	bne.n	800a91a <tcp_process_refused_data+0x22>
 800a906:	4b37      	ldr	r3, [pc, #220]	; (800a9e4 <tcp_process_refused_data+0xec>)
 800a908:	f240 6209 	movw	r2, #1545	; 0x609
 800a90c:	4936      	ldr	r1, [pc, #216]	; (800a9e8 <tcp_process_refused_data+0xf0>)
 800a90e:	4837      	ldr	r0, [pc, #220]	; (800a9ec <tcp_process_refused_data+0xf4>)
 800a910:	f00a f8a0 	bl	8014a54 <iprintf>
 800a914:	f06f 030f 	mvn.w	r3, #15
 800a918:	e060      	b.n	800a9dc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a91e:	7b5b      	ldrb	r3, [r3, #13]
 800a920:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a926:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00b      	beq.n	800a950 <tcp_process_refused_data+0x58>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6918      	ldr	r0, [r3, #16]
 800a942:	2300      	movs	r3, #0
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	6879      	ldr	r1, [r7, #4]
 800a948:	47a0      	blx	r4
 800a94a:	4603      	mov	r3, r0
 800a94c:	73fb      	strb	r3, [r7, #15]
 800a94e:	e007      	b.n	800a960 <tcp_process_refused_data+0x68>
 800a950:	2300      	movs	r3, #0
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	6879      	ldr	r1, [r7, #4]
 800a956:	2000      	movs	r0, #0
 800a958:	f000 f8a4 	bl	800aaa4 <tcp_recv_null>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d12a      	bne.n	800a9be <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	f003 0320 	and.w	r3, r3, #32
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d033      	beq.n	800a9da <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a976:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a97a:	d005      	beq.n	800a988 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a980:	3301      	adds	r3, #1
 800a982:	b29a      	uxth	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00b      	beq.n	800a9aa <tcp_process_refused_data+0xb2>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6918      	ldr	r0, [r3, #16]
 800a99c:	2300      	movs	r3, #0
 800a99e:	2200      	movs	r2, #0
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	47a0      	blx	r4
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	73fb      	strb	r3, [r7, #15]
 800a9a8:	e001      	b.n	800a9ae <tcp_process_refused_data+0xb6>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a9ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9b2:	f113 0f0d 	cmn.w	r3, #13
 800a9b6:	d110      	bne.n	800a9da <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a9b8:	f06f 030c 	mvn.w	r3, #12
 800a9bc:	e00e      	b.n	800a9dc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9c2:	f113 0f0d 	cmn.w	r3, #13
 800a9c6:	d102      	bne.n	800a9ce <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a9c8:	f06f 030c 	mvn.w	r3, #12
 800a9cc:	e006      	b.n	800a9dc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a9d4:	f06f 0304 	mvn.w	r3, #4
 800a9d8:	e000      	b.n	800a9dc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3714      	adds	r7, #20
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd90      	pop	{r4, r7, pc}
 800a9e4:	08015e24 	.word	0x08015e24
 800a9e8:	08016334 	.word	0x08016334
 800a9ec:	08015e68 	.word	0x08015e68

0800a9f0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a9f8:	e007      	b.n	800aa0a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f80a 	bl	800aa1a <tcp_seg_free>
    seg = next;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1f4      	bne.n	800a9fa <tcp_segs_free+0xa>
  }
}
 800aa10:	bf00      	nop
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00c      	beq.n	800aa42 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d004      	beq.n	800aa3a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe fd61 	bl	80094fc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	2003      	movs	r0, #3
 800aa3e:	f7fd fead 	bl	800879c <memp_free>
  }
}
 800aa42:	bf00      	nop
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d106      	bne.n	800aa68 <tcp_seg_copy+0x1c>
 800aa5a:	4b0f      	ldr	r3, [pc, #60]	; (800aa98 <tcp_seg_copy+0x4c>)
 800aa5c:	f240 6282 	movw	r2, #1666	; 0x682
 800aa60:	490e      	ldr	r1, [pc, #56]	; (800aa9c <tcp_seg_copy+0x50>)
 800aa62:	480f      	ldr	r0, [pc, #60]	; (800aaa0 <tcp_seg_copy+0x54>)
 800aa64:	f009 fff6 	bl	8014a54 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800aa68:	2003      	movs	r0, #3
 800aa6a:	f7fd fe21 	bl	80086b0 <memp_malloc>
 800aa6e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <tcp_seg_copy+0x2e>
    return NULL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	e00a      	b.n	800aa90 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800aa7a:	2210      	movs	r2, #16
 800aa7c:	6879      	ldr	r1, [r7, #4]
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f009 fc3a 	bl	80142f8 <memcpy>
  pbuf_ref(cseg->p);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe fddd 	bl	8009648 <pbuf_ref>
  return cseg;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	08015e24 	.word	0x08015e24
 800aa9c:	08016378 	.word	0x08016378
 800aaa0:	08015e68 	.word	0x08015e68

0800aaa4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	60b9      	str	r1, [r7, #8]
 800aaae:	607a      	str	r2, [r7, #4]
 800aab0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d109      	bne.n	800aacc <tcp_recv_null+0x28>
 800aab8:	4b12      	ldr	r3, [pc, #72]	; (800ab04 <tcp_recv_null+0x60>)
 800aaba:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800aabe:	4912      	ldr	r1, [pc, #72]	; (800ab08 <tcp_recv_null+0x64>)
 800aac0:	4812      	ldr	r0, [pc, #72]	; (800ab0c <tcp_recv_null+0x68>)
 800aac2:	f009 ffc7 	bl	8014a54 <iprintf>
 800aac6:	f06f 030f 	mvn.w	r3, #15
 800aaca:	e016      	b.n	800aafa <tcp_recv_null+0x56>

  if (p != NULL) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d009      	beq.n	800aae6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	891b      	ldrh	r3, [r3, #8]
 800aad6:	4619      	mov	r1, r3
 800aad8:	68b8      	ldr	r0, [r7, #8]
 800aada:	f7ff fb19 	bl	800a110 <tcp_recved>
    pbuf_free(p);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7fe fd0c 	bl	80094fc <pbuf_free>
 800aae4:	e008      	b.n	800aaf8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800aae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d104      	bne.n	800aaf8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800aaee:	68b8      	ldr	r0, [r7, #8]
 800aaf0:	f7ff f9be 	bl	8009e70 <tcp_close>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	e000      	b.n	800aafa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	08015e24 	.word	0x08015e24
 800ab08:	08016394 	.word	0x08016394
 800ab0c:	08015e68 	.word	0x08015e68

0800ab10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ab1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	db01      	blt.n	800ab26 <tcp_kill_prio+0x16>
 800ab22:	79fb      	ldrb	r3, [r7, #7]
 800ab24:	e000      	b.n	800ab28 <tcp_kill_prio+0x18>
 800ab26:	237f      	movs	r3, #127	; 0x7f
 800ab28:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ab2a:	7afb      	ldrb	r3, [r7, #11]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d034      	beq.n	800ab9a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ab30:	7afb      	ldrb	r3, [r7, #11]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab3e:	4b19      	ldr	r3, [pc, #100]	; (800aba4 <tcp_kill_prio+0x94>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	617b      	str	r3, [r7, #20]
 800ab44:	e01f      	b.n	800ab86 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	7d5b      	ldrb	r3, [r3, #21]
 800ab4a:	7afa      	ldrb	r2, [r7, #11]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d80c      	bhi.n	800ab6a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ab54:	7afa      	ldrb	r2, [r7, #11]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d112      	bne.n	800ab80 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ab5a:	4b13      	ldr	r3, [pc, #76]	; (800aba8 <tcp_kill_prio+0x98>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	1ad3      	subs	r3, r2, r3
 800ab64:	68fa      	ldr	r2, [r7, #12]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d80a      	bhi.n	800ab80 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ab6a:	4b0f      	ldr	r3, [pc, #60]	; (800aba8 <tcp_kill_prio+0x98>)
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	7d5b      	ldrb	r3, [r3, #21]
 800ab7e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	617b      	str	r3, [r7, #20]
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1dc      	bne.n	800ab46 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d004      	beq.n	800ab9c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ab92:	6938      	ldr	r0, [r7, #16]
 800ab94:	f7ff fa56 	bl	800a044 <tcp_abort>
 800ab98:	e000      	b.n	800ab9c <tcp_kill_prio+0x8c>
    return;
 800ab9a:	bf00      	nop
  }
}
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20018d3c 	.word	0x20018d3c
 800aba8:	20018d40 	.word	0x20018d40

0800abac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	2b08      	cmp	r3, #8
 800abba:	d009      	beq.n	800abd0 <tcp_kill_state+0x24>
 800abbc:	79fb      	ldrb	r3, [r7, #7]
 800abbe:	2b09      	cmp	r3, #9
 800abc0:	d006      	beq.n	800abd0 <tcp_kill_state+0x24>
 800abc2:	4b1a      	ldr	r3, [pc, #104]	; (800ac2c <tcp_kill_state+0x80>)
 800abc4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800abc8:	4919      	ldr	r1, [pc, #100]	; (800ac30 <tcp_kill_state+0x84>)
 800abca:	481a      	ldr	r0, [pc, #104]	; (800ac34 <tcp_kill_state+0x88>)
 800abcc:	f009 ff42 	bl	8014a54 <iprintf>

  inactivity = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800abd4:	2300      	movs	r3, #0
 800abd6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800abd8:	4b17      	ldr	r3, [pc, #92]	; (800ac38 <tcp_kill_state+0x8c>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	617b      	str	r3, [r7, #20]
 800abde:	e017      	b.n	800ac10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	7d1b      	ldrb	r3, [r3, #20]
 800abe4:	79fa      	ldrb	r2, [r7, #7]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d10f      	bne.n	800ac0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800abea:	4b14      	ldr	r3, [pc, #80]	; (800ac3c <tcp_kill_state+0x90>)
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	6a1b      	ldr	r3, [r3, #32]
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d807      	bhi.n	800ac0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800abfa:	4b10      	ldr	r3, [pc, #64]	; (800ac3c <tcp_kill_state+0x90>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	617b      	str	r3, [r7, #20]
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1e4      	bne.n	800abe0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d003      	beq.n	800ac24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	6938      	ldr	r0, [r7, #16]
 800ac20:	f7ff f952 	bl	8009ec8 <tcp_abandon>
  }
}
 800ac24:	bf00      	nop
 800ac26:	3718      	adds	r7, #24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	08015e24 	.word	0x08015e24
 800ac30:	080163b0 	.word	0x080163b0
 800ac34:	08015e68 	.word	0x08015e68
 800ac38:	20018d3c 	.word	0x20018d3c
 800ac3c:	20018d40 	.word	0x20018d40

0800ac40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ac46:	2300      	movs	r3, #0
 800ac48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac4e:	4b12      	ldr	r3, [pc, #72]	; (800ac98 <tcp_kill_timewait+0x58>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	e012      	b.n	800ac7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ac56:	4b11      	ldr	r3, [pc, #68]	; (800ac9c <tcp_kill_timewait+0x5c>)
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	1ad3      	subs	r3, r2, r3
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d807      	bhi.n	800ac76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ac66:	4b0d      	ldr	r3, [pc, #52]	; (800ac9c <tcp_kill_timewait+0x5c>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	1ad3      	subs	r3, r2, r3
 800ac70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	60fb      	str	r3, [r7, #12]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1e9      	bne.n	800ac56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ac88:	68b8      	ldr	r0, [r7, #8]
 800ac8a:	f7ff f9db 	bl	800a044 <tcp_abort>
  }
}
 800ac8e:	bf00      	nop
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop
 800ac98:	20018d4c 	.word	0x20018d4c
 800ac9c:	20018d40 	.word	0x20018d40

0800aca0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800aca6:	4b10      	ldr	r3, [pc, #64]	; (800ace8 <tcp_handle_closepend+0x48>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800acac:	e014      	b.n	800acd8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	8b5b      	ldrh	r3, [r3, #26]
 800acb8:	f003 0308 	and.w	r3, r3, #8
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d009      	beq.n	800acd4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	8b5b      	ldrh	r3, [r3, #26]
 800acc4:	f023 0308 	bic.w	r3, r3, #8
 800acc8:	b29a      	uxth	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f7ff f864 	bl	8009d9c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d1e7      	bne.n	800acae <tcp_handle_closepend+0xe>
  }
}
 800acde:	bf00      	nop
 800ace0:	bf00      	nop
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	20018d3c 	.word	0x20018d3c

0800acec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800acf6:	2001      	movs	r0, #1
 800acf8:	f7fd fcda 	bl	80086b0 <memp_malloc>
 800acfc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d126      	bne.n	800ad52 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ad04:	f7ff ffcc 	bl	800aca0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ad08:	f7ff ff9a 	bl	800ac40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad0c:	2001      	movs	r0, #1
 800ad0e:	f7fd fccf 	bl	80086b0 <memp_malloc>
 800ad12:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d11b      	bne.n	800ad52 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ad1a:	2009      	movs	r0, #9
 800ad1c:	f7ff ff46 	bl	800abac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad20:	2001      	movs	r0, #1
 800ad22:	f7fd fcc5 	bl	80086b0 <memp_malloc>
 800ad26:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d111      	bne.n	800ad52 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ad2e:	2008      	movs	r0, #8
 800ad30:	f7ff ff3c 	bl	800abac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad34:	2001      	movs	r0, #1
 800ad36:	f7fd fcbb 	bl	80086b0 <memp_malloc>
 800ad3a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d107      	bne.n	800ad52 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ad42:	79fb      	ldrb	r3, [r7, #7]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7ff fee3 	bl	800ab10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ad4a:	2001      	movs	r0, #1
 800ad4c:	f7fd fcb0 	bl	80086b0 <memp_malloc>
 800ad50:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d03f      	beq.n	800add8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ad58:	229c      	movs	r2, #156	; 0x9c
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f009 fad9 	bl	8014314 <memset>
    pcb->prio = prio;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	79fa      	ldrb	r2, [r7, #7]
 800ad66:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ad6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ad78:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	22ff      	movs	r2, #255	; 0xff
 800ad86:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ad8e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2206      	movs	r2, #6
 800ad94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2206      	movs	r2, #6
 800ad9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ada4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800adae:	4b0d      	ldr	r3, [pc, #52]	; (800ade4 <tcp_alloc+0xf8>)
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800adb6:	4b0c      	ldr	r3, [pc, #48]	; (800ade8 <tcp_alloc+0xfc>)
 800adb8:	781a      	ldrb	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800adc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	4a08      	ldr	r2, [pc, #32]	; (800adec <tcp_alloc+0x100>)
 800adcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4a07      	ldr	r2, [pc, #28]	; (800adf0 <tcp_alloc+0x104>)
 800add4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800add8:	68fb      	ldr	r3, [r7, #12]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	20018d40 	.word	0x20018d40
 800ade8:	20010722 	.word	0x20010722
 800adec:	0800aaa5 	.word	0x0800aaa5
 800adf0:	006ddd00 	.word	0x006ddd00

0800adf4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d107      	bne.n	800ae12 <tcp_pcb_purge+0x1e>
 800ae02:	4b21      	ldr	r3, [pc, #132]	; (800ae88 <tcp_pcb_purge+0x94>)
 800ae04:	f640 0251 	movw	r2, #2129	; 0x851
 800ae08:	4920      	ldr	r1, [pc, #128]	; (800ae8c <tcp_pcb_purge+0x98>)
 800ae0a:	4821      	ldr	r0, [pc, #132]	; (800ae90 <tcp_pcb_purge+0x9c>)
 800ae0c:	f009 fe22 	bl	8014a54 <iprintf>
 800ae10:	e037      	b.n	800ae82 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	7d1b      	ldrb	r3, [r3, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d033      	beq.n	800ae82 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ae1e:	2b0a      	cmp	r3, #10
 800ae20:	d02f      	beq.n	800ae82 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d02b      	beq.n	800ae82 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d007      	beq.n	800ae42 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fe fb60 	bl	80094fc <pbuf_free>
      pcb->refused_data = NULL;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d002      	beq.n	800ae50 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 f986 	bl	800b15c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae56:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7ff fdc7 	bl	800a9f0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff fdc2 	bl	800a9f0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	66da      	str	r2, [r3, #108]	; 0x6c
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	08015e24 	.word	0x08015e24
 800ae8c:	08016470 	.word	0x08016470
 800ae90:	08015e68 	.word	0x08015e68

0800ae94 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d106      	bne.n	800aeb2 <tcp_pcb_remove+0x1e>
 800aea4:	4b3e      	ldr	r3, [pc, #248]	; (800afa0 <tcp_pcb_remove+0x10c>)
 800aea6:	f640 0283 	movw	r2, #2179	; 0x883
 800aeaa:	493e      	ldr	r1, [pc, #248]	; (800afa4 <tcp_pcb_remove+0x110>)
 800aeac:	483e      	ldr	r0, [pc, #248]	; (800afa8 <tcp_pcb_remove+0x114>)
 800aeae:	f009 fdd1 	bl	8014a54 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d106      	bne.n	800aec6 <tcp_pcb_remove+0x32>
 800aeb8:	4b39      	ldr	r3, [pc, #228]	; (800afa0 <tcp_pcb_remove+0x10c>)
 800aeba:	f640 0284 	movw	r2, #2180	; 0x884
 800aebe:	493b      	ldr	r1, [pc, #236]	; (800afac <tcp_pcb_remove+0x118>)
 800aec0:	4839      	ldr	r0, [pc, #228]	; (800afa8 <tcp_pcb_remove+0x114>)
 800aec2:	f009 fdc7 	bl	8014a54 <iprintf>

  TCP_RMV(pcblist, pcb);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d105      	bne.n	800aedc <tcp_pcb_remove+0x48>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	68da      	ldr	r2, [r3, #12]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	e013      	b.n	800af04 <tcp_pcb_remove+0x70>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	e00c      	b.n	800aefe <tcp_pcb_remove+0x6a>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d104      	bne.n	800aef8 <tcp_pcb_remove+0x64>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	68da      	ldr	r2, [r3, #12]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	60da      	str	r2, [r3, #12]
 800aef6:	e005      	b.n	800af04 <tcp_pcb_remove+0x70>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	60fb      	str	r3, [r7, #12]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1ef      	bne.n	800aee4 <tcp_pcb_remove+0x50>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2200      	movs	r2, #0
 800af08:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800af0a:	6838      	ldr	r0, [r7, #0]
 800af0c:	f7ff ff72 	bl	800adf4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	7d1b      	ldrb	r3, [r3, #20]
 800af14:	2b0a      	cmp	r3, #10
 800af16:	d013      	beq.n	800af40 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d00f      	beq.n	800af40 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	8b5b      	ldrh	r3, [r3, #26]
 800af24:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d009      	beq.n	800af40 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	8b5b      	ldrh	r3, [r3, #26]
 800af30:	f043 0302 	orr.w	r3, r3, #2
 800af34:	b29a      	uxth	r2, r3
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800af3a:	6838      	ldr	r0, [r7, #0]
 800af3c:	f002 ff6a 	bl	800de14 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	7d1b      	ldrb	r3, [r3, #20]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d020      	beq.n	800af8a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d006      	beq.n	800af5e <tcp_pcb_remove+0xca>
 800af50:	4b13      	ldr	r3, [pc, #76]	; (800afa0 <tcp_pcb_remove+0x10c>)
 800af52:	f640 0293 	movw	r2, #2195	; 0x893
 800af56:	4916      	ldr	r1, [pc, #88]	; (800afb0 <tcp_pcb_remove+0x11c>)
 800af58:	4813      	ldr	r0, [pc, #76]	; (800afa8 <tcp_pcb_remove+0x114>)
 800af5a:	f009 fd7b 	bl	8014a54 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af62:	2b00      	cmp	r3, #0
 800af64:	d006      	beq.n	800af74 <tcp_pcb_remove+0xe0>
 800af66:	4b0e      	ldr	r3, [pc, #56]	; (800afa0 <tcp_pcb_remove+0x10c>)
 800af68:	f640 0294 	movw	r2, #2196	; 0x894
 800af6c:	4911      	ldr	r1, [pc, #68]	; (800afb4 <tcp_pcb_remove+0x120>)
 800af6e:	480e      	ldr	r0, [pc, #56]	; (800afa8 <tcp_pcb_remove+0x114>)
 800af70:	f009 fd70 	bl	8014a54 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d006      	beq.n	800af8a <tcp_pcb_remove+0xf6>
 800af7c:	4b08      	ldr	r3, [pc, #32]	; (800afa0 <tcp_pcb_remove+0x10c>)
 800af7e:	f640 0296 	movw	r2, #2198	; 0x896
 800af82:	490d      	ldr	r1, [pc, #52]	; (800afb8 <tcp_pcb_remove+0x124>)
 800af84:	4808      	ldr	r0, [pc, #32]	; (800afa8 <tcp_pcb_remove+0x114>)
 800af86:	f009 fd65 	bl	8014a54 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2200      	movs	r2, #0
 800af8e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2200      	movs	r2, #0
 800af94:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800af96:	bf00      	nop
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	08015e24 	.word	0x08015e24
 800afa4:	0801648c 	.word	0x0801648c
 800afa8:	08015e68 	.word	0x08015e68
 800afac:	080164a8 	.word	0x080164a8
 800afb0:	080164c8 	.word	0x080164c8
 800afb4:	080164e0 	.word	0x080164e0
 800afb8:	080164fc 	.word	0x080164fc

0800afbc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d106      	bne.n	800afd8 <tcp_next_iss+0x1c>
 800afca:	4b0a      	ldr	r3, [pc, #40]	; (800aff4 <tcp_next_iss+0x38>)
 800afcc:	f640 02af 	movw	r2, #2223	; 0x8af
 800afd0:	4909      	ldr	r1, [pc, #36]	; (800aff8 <tcp_next_iss+0x3c>)
 800afd2:	480a      	ldr	r0, [pc, #40]	; (800affc <tcp_next_iss+0x40>)
 800afd4:	f009 fd3e 	bl	8014a54 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800afd8:	4b09      	ldr	r3, [pc, #36]	; (800b000 <tcp_next_iss+0x44>)
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	4b09      	ldr	r3, [pc, #36]	; (800b004 <tcp_next_iss+0x48>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4413      	add	r3, r2
 800afe2:	4a07      	ldr	r2, [pc, #28]	; (800b000 <tcp_next_iss+0x44>)
 800afe4:	6013      	str	r3, [r2, #0]
  return iss;
 800afe6:	4b06      	ldr	r3, [pc, #24]	; (800b000 <tcp_next_iss+0x44>)
 800afe8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800afea:	4618      	mov	r0, r3
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	08015e24 	.word	0x08015e24
 800aff8:	08016514 	.word	0x08016514
 800affc:	08015e68 	.word	0x08015e68
 800b000:	20000028 	.word	0x20000028
 800b004:	20018d40 	.word	0x20018d40

0800b008 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b086      	sub	sp, #24
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
 800b014:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d106      	bne.n	800b02a <tcp_eff_send_mss_netif+0x22>
 800b01c:	4b14      	ldr	r3, [pc, #80]	; (800b070 <tcp_eff_send_mss_netif+0x68>)
 800b01e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b022:	4914      	ldr	r1, [pc, #80]	; (800b074 <tcp_eff_send_mss_netif+0x6c>)
 800b024:	4814      	ldr	r0, [pc, #80]	; (800b078 <tcp_eff_send_mss_netif+0x70>)
 800b026:	f009 fd15 	bl	8014a54 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b030:	89fb      	ldrh	r3, [r7, #14]
 800b032:	e019      	b.n	800b068 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b038:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b03a:	8afb      	ldrh	r3, [r7, #22]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d012      	beq.n	800b066 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b040:	2328      	movs	r3, #40	; 0x28
 800b042:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b044:	8afa      	ldrh	r2, [r7, #22]
 800b046:	8abb      	ldrh	r3, [r7, #20]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d904      	bls.n	800b056 <tcp_eff_send_mss_netif+0x4e>
 800b04c:	8afa      	ldrh	r2, [r7, #22]
 800b04e:	8abb      	ldrh	r3, [r7, #20]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	b29b      	uxth	r3, r3
 800b054:	e000      	b.n	800b058 <tcp_eff_send_mss_netif+0x50>
 800b056:	2300      	movs	r3, #0
 800b058:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b05a:	8a7a      	ldrh	r2, [r7, #18]
 800b05c:	89fb      	ldrh	r3, [r7, #14]
 800b05e:	4293      	cmp	r3, r2
 800b060:	bf28      	it	cs
 800b062:	4613      	movcs	r3, r2
 800b064:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b066:	89fb      	ldrh	r3, [r7, #14]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	08015e24 	.word	0x08015e24
 800b074:	08016530 	.word	0x08016530
 800b078:	08015e68 	.word	0x08015e68

0800b07c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d119      	bne.n	800b0c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b090:	4b10      	ldr	r3, [pc, #64]	; (800b0d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b092:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b096:	4910      	ldr	r1, [pc, #64]	; (800b0d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b098:	4810      	ldr	r0, [pc, #64]	; (800b0dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b09a:	f009 fcdb 	bl	8014a54 <iprintf>

  while (pcb != NULL) {
 800b09e:	e011      	b.n	800b0c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d108      	bne.n	800b0be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f7fe ffc6 	bl	800a044 <tcp_abort>
      pcb = next;
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	e002      	b.n	800b0c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1ea      	bne.n	800b0a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b0ca:	bf00      	nop
 800b0cc:	bf00      	nop
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	08015e24 	.word	0x08015e24
 800b0d8:	08016558 	.word	0x08016558
 800b0dc:	08015e68 	.word	0x08015e68

0800b0e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d02a      	beq.n	800b146 <tcp_netif_ip_addr_changed+0x66>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d026      	beq.n	800b146 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b0f8:	4b15      	ldr	r3, [pc, #84]	; (800b150 <tcp_netif_ip_addr_changed+0x70>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7ff ffbc 	bl	800b07c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b104:	4b13      	ldr	r3, [pc, #76]	; (800b154 <tcp_netif_ip_addr_changed+0x74>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4619      	mov	r1, r3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7ff ffb6 	bl	800b07c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d017      	beq.n	800b146 <tcp_netif_ip_addr_changed+0x66>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d013      	beq.n	800b146 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b11e:	4b0e      	ldr	r3, [pc, #56]	; (800b158 <tcp_netif_ip_addr_changed+0x78>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e00c      	b.n	800b140 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d103      	bne.n	800b13a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1ef      	bne.n	800b126 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b146:	bf00      	nop
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	20018d3c 	.word	0x20018d3c
 800b154:	20018d48 	.word	0x20018d48
 800b158:	20018d44 	.word	0x20018d44

0800b15c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d007      	beq.n	800b17c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b170:	4618      	mov	r0, r3
 800b172:	f7ff fc3d 	bl	800a9f0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b184:	b590      	push	{r4, r7, lr}
 800b186:	b08d      	sub	sp, #52	; 0x34
 800b188:	af04      	add	r7, sp, #16
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d105      	bne.n	800b1a0 <tcp_input+0x1c>
 800b194:	4b9b      	ldr	r3, [pc, #620]	; (800b404 <tcp_input+0x280>)
 800b196:	2283      	movs	r2, #131	; 0x83
 800b198:	499b      	ldr	r1, [pc, #620]	; (800b408 <tcp_input+0x284>)
 800b19a:	489c      	ldr	r0, [pc, #624]	; (800b40c <tcp_input+0x288>)
 800b19c:	f009 fc5a 	bl	8014a54 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	4a9a      	ldr	r2, [pc, #616]	; (800b410 <tcp_input+0x28c>)
 800b1a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	895b      	ldrh	r3, [r3, #10]
 800b1ac:	2b13      	cmp	r3, #19
 800b1ae:	f240 83c4 	bls.w	800b93a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b1b2:	4b98      	ldr	r3, [pc, #608]	; (800b414 <tcp_input+0x290>)
 800b1b4:	695b      	ldr	r3, [r3, #20]
 800b1b6:	4a97      	ldr	r2, [pc, #604]	; (800b414 <tcp_input+0x290>)
 800b1b8:	6812      	ldr	r2, [r2, #0]
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f007 fdf9 	bl	8012db4 <ip4_addr_isbroadcast_u32>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f040 83ba 	bne.w	800b93e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b1ca:	4b92      	ldr	r3, [pc, #584]	; (800b414 <tcp_input+0x290>)
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b1d2:	2be0      	cmp	r3, #224	; 0xe0
 800b1d4:	f000 83b3 	beq.w	800b93e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b1d8:	4b8d      	ldr	r3, [pc, #564]	; (800b410 <tcp_input+0x28c>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	899b      	ldrh	r3, [r3, #12]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fc fd8d 	bl	8007d00 <lwip_htons>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	0b1b      	lsrs	r3, r3, #12
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b1f2:	7cbb      	ldrb	r3, [r7, #18]
 800b1f4:	2b13      	cmp	r3, #19
 800b1f6:	f240 83a4 	bls.w	800b942 <tcp_input+0x7be>
 800b1fa:	7cbb      	ldrb	r3, [r7, #18]
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	891b      	ldrh	r3, [r3, #8]
 800b202:	429a      	cmp	r2, r3
 800b204:	f200 839d 	bhi.w	800b942 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b208:	7cbb      	ldrb	r3, [r7, #18]
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	3b14      	subs	r3, #20
 800b20e:	b29a      	uxth	r2, r3
 800b210:	4b81      	ldr	r3, [pc, #516]	; (800b418 <tcp_input+0x294>)
 800b212:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b214:	4b81      	ldr	r3, [pc, #516]	; (800b41c <tcp_input+0x298>)
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	895a      	ldrh	r2, [r3, #10]
 800b21e:	7cbb      	ldrb	r3, [r7, #18]
 800b220:	b29b      	uxth	r3, r3
 800b222:	429a      	cmp	r2, r3
 800b224:	d309      	bcc.n	800b23a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b226:	4b7c      	ldr	r3, [pc, #496]	; (800b418 <tcp_input+0x294>)
 800b228:	881a      	ldrh	r2, [r3, #0]
 800b22a:	4b7d      	ldr	r3, [pc, #500]	; (800b420 <tcp_input+0x29c>)
 800b22c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b22e:	7cbb      	ldrb	r3, [r7, #18]
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7fe f8dc 	bl	80093f0 <pbuf_remove_header>
 800b238:	e04e      	b.n	800b2d8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d105      	bne.n	800b24e <tcp_input+0xca>
 800b242:	4b70      	ldr	r3, [pc, #448]	; (800b404 <tcp_input+0x280>)
 800b244:	22c2      	movs	r2, #194	; 0xc2
 800b246:	4977      	ldr	r1, [pc, #476]	; (800b424 <tcp_input+0x2a0>)
 800b248:	4870      	ldr	r0, [pc, #448]	; (800b40c <tcp_input+0x288>)
 800b24a:	f009 fc03 	bl	8014a54 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b24e:	2114      	movs	r1, #20
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7fe f8cd 	bl	80093f0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	895a      	ldrh	r2, [r3, #10]
 800b25a:	4b71      	ldr	r3, [pc, #452]	; (800b420 <tcp_input+0x29c>)
 800b25c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b25e:	4b6e      	ldr	r3, [pc, #440]	; (800b418 <tcp_input+0x294>)
 800b260:	881a      	ldrh	r2, [r3, #0]
 800b262:	4b6f      	ldr	r3, [pc, #444]	; (800b420 <tcp_input+0x29c>)
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b26a:	4b6d      	ldr	r3, [pc, #436]	; (800b420 <tcp_input+0x29c>)
 800b26c:	881b      	ldrh	r3, [r3, #0]
 800b26e:	4619      	mov	r1, r3
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7fe f8bd 	bl	80093f0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	895b      	ldrh	r3, [r3, #10]
 800b27c:	8a3a      	ldrh	r2, [r7, #16]
 800b27e:	429a      	cmp	r2, r3
 800b280:	f200 8361 	bhi.w	800b946 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	4a64      	ldr	r2, [pc, #400]	; (800b41c <tcp_input+0x298>)
 800b28c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	8a3a      	ldrh	r2, [r7, #16]
 800b294:	4611      	mov	r1, r2
 800b296:	4618      	mov	r0, r3
 800b298:	f7fe f8aa 	bl	80093f0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	891a      	ldrh	r2, [r3, #8]
 800b2a0:	8a3b      	ldrh	r3, [r7, #16]
 800b2a2:	1ad3      	subs	r3, r2, r3
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	895b      	ldrh	r3, [r3, #10]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d005      	beq.n	800b2be <tcp_input+0x13a>
 800b2b2:	4b54      	ldr	r3, [pc, #336]	; (800b404 <tcp_input+0x280>)
 800b2b4:	22df      	movs	r2, #223	; 0xdf
 800b2b6:	495c      	ldr	r1, [pc, #368]	; (800b428 <tcp_input+0x2a4>)
 800b2b8:	4854      	ldr	r0, [pc, #336]	; (800b40c <tcp_input+0x288>)
 800b2ba:	f009 fbcb 	bl	8014a54 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	891a      	ldrh	r2, [r3, #8]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	891b      	ldrh	r3, [r3, #8]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d005      	beq.n	800b2d8 <tcp_input+0x154>
 800b2cc:	4b4d      	ldr	r3, [pc, #308]	; (800b404 <tcp_input+0x280>)
 800b2ce:	22e0      	movs	r2, #224	; 0xe0
 800b2d0:	4956      	ldr	r1, [pc, #344]	; (800b42c <tcp_input+0x2a8>)
 800b2d2:	484e      	ldr	r0, [pc, #312]	; (800b40c <tcp_input+0x288>)
 800b2d4:	f009 fbbe 	bl	8014a54 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b2d8:	4b4d      	ldr	r3, [pc, #308]	; (800b410 <tcp_input+0x28c>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	881b      	ldrh	r3, [r3, #0]
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	4a4b      	ldr	r2, [pc, #300]	; (800b410 <tcp_input+0x28c>)
 800b2e2:	6814      	ldr	r4, [r2, #0]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fc fd0b 	bl	8007d00 <lwip_htons>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b2ee:	4b48      	ldr	r3, [pc, #288]	; (800b410 <tcp_input+0x28c>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	885b      	ldrh	r3, [r3, #2]
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	4a46      	ldr	r2, [pc, #280]	; (800b410 <tcp_input+0x28c>)
 800b2f8:	6814      	ldr	r4, [r2, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fc fd00 	bl	8007d00 <lwip_htons>
 800b300:	4603      	mov	r3, r0
 800b302:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b304:	4b42      	ldr	r3, [pc, #264]	; (800b410 <tcp_input+0x28c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	4a41      	ldr	r2, [pc, #260]	; (800b410 <tcp_input+0x28c>)
 800b30c:	6814      	ldr	r4, [r2, #0]
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fc fd0b 	bl	8007d2a <lwip_htonl>
 800b314:	4603      	mov	r3, r0
 800b316:	6063      	str	r3, [r4, #4]
 800b318:	6863      	ldr	r3, [r4, #4]
 800b31a:	4a45      	ldr	r2, [pc, #276]	; (800b430 <tcp_input+0x2ac>)
 800b31c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b31e:	4b3c      	ldr	r3, [pc, #240]	; (800b410 <tcp_input+0x28c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	4a3a      	ldr	r2, [pc, #232]	; (800b410 <tcp_input+0x28c>)
 800b326:	6814      	ldr	r4, [r2, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fc fcfe 	bl	8007d2a <lwip_htonl>
 800b32e:	4603      	mov	r3, r0
 800b330:	60a3      	str	r3, [r4, #8]
 800b332:	68a3      	ldr	r3, [r4, #8]
 800b334:	4a3f      	ldr	r2, [pc, #252]	; (800b434 <tcp_input+0x2b0>)
 800b336:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b338:	4b35      	ldr	r3, [pc, #212]	; (800b410 <tcp_input+0x28c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	89db      	ldrh	r3, [r3, #14]
 800b33e:	b29b      	uxth	r3, r3
 800b340:	4a33      	ldr	r2, [pc, #204]	; (800b410 <tcp_input+0x28c>)
 800b342:	6814      	ldr	r4, [r2, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	f7fc fcdb 	bl	8007d00 <lwip_htons>
 800b34a:	4603      	mov	r3, r0
 800b34c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b34e:	4b30      	ldr	r3, [pc, #192]	; (800b410 <tcp_input+0x28c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	899b      	ldrh	r3, [r3, #12]
 800b354:	b29b      	uxth	r3, r3
 800b356:	4618      	mov	r0, r3
 800b358:	f7fc fcd2 	bl	8007d00 <lwip_htons>
 800b35c:	4603      	mov	r3, r0
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b364:	b2da      	uxtb	r2, r3
 800b366:	4b34      	ldr	r3, [pc, #208]	; (800b438 <tcp_input+0x2b4>)
 800b368:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	891a      	ldrh	r2, [r3, #8]
 800b36e:	4b33      	ldr	r3, [pc, #204]	; (800b43c <tcp_input+0x2b8>)
 800b370:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b372:	4b31      	ldr	r3, [pc, #196]	; (800b438 <tcp_input+0x2b4>)
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	f003 0303 	and.w	r3, r3, #3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00c      	beq.n	800b398 <tcp_input+0x214>
    tcplen++;
 800b37e:	4b2f      	ldr	r3, [pc, #188]	; (800b43c <tcp_input+0x2b8>)
 800b380:	881b      	ldrh	r3, [r3, #0]
 800b382:	3301      	adds	r3, #1
 800b384:	b29a      	uxth	r2, r3
 800b386:	4b2d      	ldr	r3, [pc, #180]	; (800b43c <tcp_input+0x2b8>)
 800b388:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	891a      	ldrh	r2, [r3, #8]
 800b38e:	4b2b      	ldr	r3, [pc, #172]	; (800b43c <tcp_input+0x2b8>)
 800b390:	881b      	ldrh	r3, [r3, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	f200 82d9 	bhi.w	800b94a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b398:	2300      	movs	r3, #0
 800b39a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b39c:	4b28      	ldr	r3, [pc, #160]	; (800b440 <tcp_input+0x2bc>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	61fb      	str	r3, [r7, #28]
 800b3a2:	e09d      	b.n	800b4e0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	7d1b      	ldrb	r3, [r3, #20]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d105      	bne.n	800b3b8 <tcp_input+0x234>
 800b3ac:	4b15      	ldr	r3, [pc, #84]	; (800b404 <tcp_input+0x280>)
 800b3ae:	22fb      	movs	r2, #251	; 0xfb
 800b3b0:	4924      	ldr	r1, [pc, #144]	; (800b444 <tcp_input+0x2c0>)
 800b3b2:	4816      	ldr	r0, [pc, #88]	; (800b40c <tcp_input+0x288>)
 800b3b4:	f009 fb4e 	bl	8014a54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	7d1b      	ldrb	r3, [r3, #20]
 800b3bc:	2b0a      	cmp	r3, #10
 800b3be:	d105      	bne.n	800b3cc <tcp_input+0x248>
 800b3c0:	4b10      	ldr	r3, [pc, #64]	; (800b404 <tcp_input+0x280>)
 800b3c2:	22fc      	movs	r2, #252	; 0xfc
 800b3c4:	4920      	ldr	r1, [pc, #128]	; (800b448 <tcp_input+0x2c4>)
 800b3c6:	4811      	ldr	r0, [pc, #68]	; (800b40c <tcp_input+0x288>)
 800b3c8:	f009 fb44 	bl	8014a54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	7d1b      	ldrb	r3, [r3, #20]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d105      	bne.n	800b3e0 <tcp_input+0x25c>
 800b3d4:	4b0b      	ldr	r3, [pc, #44]	; (800b404 <tcp_input+0x280>)
 800b3d6:	22fd      	movs	r2, #253	; 0xfd
 800b3d8:	491c      	ldr	r1, [pc, #112]	; (800b44c <tcp_input+0x2c8>)
 800b3da:	480c      	ldr	r0, [pc, #48]	; (800b40c <tcp_input+0x288>)
 800b3dc:	f009 fb3a 	bl	8014a54 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	7a1b      	ldrb	r3, [r3, #8]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d033      	beq.n	800b450 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	7a1a      	ldrb	r2, [r3, #8]
 800b3ec:	4b09      	ldr	r3, [pc, #36]	; (800b414 <tcp_input+0x290>)
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d029      	beq.n	800b450 <tcp_input+0x2cc>
      prev = pcb;
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	61bb      	str	r3, [r7, #24]
      continue;
 800b400:	e06b      	b.n	800b4da <tcp_input+0x356>
 800b402:	bf00      	nop
 800b404:	0801658c 	.word	0x0801658c
 800b408:	080165c0 	.word	0x080165c0
 800b40c:	080165d8 	.word	0x080165d8
 800b410:	20010734 	.word	0x20010734
 800b414:	20015608 	.word	0x20015608
 800b418:	20010738 	.word	0x20010738
 800b41c:	2001073c 	.word	0x2001073c
 800b420:	2001073a 	.word	0x2001073a
 800b424:	08016600 	.word	0x08016600
 800b428:	08016610 	.word	0x08016610
 800b42c:	0801661c 	.word	0x0801661c
 800b430:	20010744 	.word	0x20010744
 800b434:	20010748 	.word	0x20010748
 800b438:	20010750 	.word	0x20010750
 800b43c:	2001074e 	.word	0x2001074e
 800b440:	20018d3c 	.word	0x20018d3c
 800b444:	0801663c 	.word	0x0801663c
 800b448:	08016664 	.word	0x08016664
 800b44c:	08016690 	.word	0x08016690
    }

    if (pcb->remote_port == tcphdr->src &&
 800b450:	69fb      	ldr	r3, [r7, #28]
 800b452:	8b1a      	ldrh	r2, [r3, #24]
 800b454:	4b94      	ldr	r3, [pc, #592]	; (800b6a8 <tcp_input+0x524>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d13a      	bne.n	800b4d6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	8ada      	ldrh	r2, [r3, #22]
 800b464:	4b90      	ldr	r3, [pc, #576]	; (800b6a8 <tcp_input+0x524>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	885b      	ldrh	r3, [r3, #2]
 800b46a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d132      	bne.n	800b4d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	685a      	ldr	r2, [r3, #4]
 800b474:	4b8d      	ldr	r3, [pc, #564]	; (800b6ac <tcp_input+0x528>)
 800b476:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b478:	429a      	cmp	r2, r3
 800b47a:	d12c      	bne.n	800b4d6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	4b8a      	ldr	r3, [pc, #552]	; (800b6ac <tcp_input+0x528>)
 800b482:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b484:	429a      	cmp	r2, r3
 800b486:	d126      	bne.n	800b4d6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	69fa      	ldr	r2, [r7, #28]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d106      	bne.n	800b4a0 <tcp_input+0x31c>
 800b492:	4b87      	ldr	r3, [pc, #540]	; (800b6b0 <tcp_input+0x52c>)
 800b494:	f240 120d 	movw	r2, #269	; 0x10d
 800b498:	4986      	ldr	r1, [pc, #536]	; (800b6b4 <tcp_input+0x530>)
 800b49a:	4887      	ldr	r0, [pc, #540]	; (800b6b8 <tcp_input+0x534>)
 800b49c:	f009 fada 	bl	8014a54 <iprintf>
      if (prev != NULL) {
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00a      	beq.n	800b4bc <tcp_input+0x338>
        prev->next = pcb->next;
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	68da      	ldr	r2, [r3, #12]
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b4ae:	4b83      	ldr	r3, [pc, #524]	; (800b6bc <tcp_input+0x538>)
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b4b6:	4a81      	ldr	r2, [pc, #516]	; (800b6bc <tcp_input+0x538>)
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	69fa      	ldr	r2, [r7, #28]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d111      	bne.n	800b4ea <tcp_input+0x366>
 800b4c6:	4b7a      	ldr	r3, [pc, #488]	; (800b6b0 <tcp_input+0x52c>)
 800b4c8:	f240 1215 	movw	r2, #277	; 0x115
 800b4cc:	497c      	ldr	r1, [pc, #496]	; (800b6c0 <tcp_input+0x53c>)
 800b4ce:	487a      	ldr	r0, [pc, #488]	; (800b6b8 <tcp_input+0x534>)
 800b4d0:	f009 fac0 	bl	8014a54 <iprintf>
      break;
 800b4d4:	e009      	b.n	800b4ea <tcp_input+0x366>
    }
    prev = pcb;
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4da:	69fb      	ldr	r3, [r7, #28]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	61fb      	str	r3, [r7, #28]
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f47f af5e 	bne.w	800b3a4 <tcp_input+0x220>
 800b4e8:	e000      	b.n	800b4ec <tcp_input+0x368>
      break;
 800b4ea:	bf00      	nop
  }

  if (pcb == NULL) {
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f040 8095 	bne.w	800b61e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4f4:	4b73      	ldr	r3, [pc, #460]	; (800b6c4 <tcp_input+0x540>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	61fb      	str	r3, [r7, #28]
 800b4fa:	e03f      	b.n	800b57c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	7d1b      	ldrb	r3, [r3, #20]
 800b500:	2b0a      	cmp	r3, #10
 800b502:	d006      	beq.n	800b512 <tcp_input+0x38e>
 800b504:	4b6a      	ldr	r3, [pc, #424]	; (800b6b0 <tcp_input+0x52c>)
 800b506:	f240 121f 	movw	r2, #287	; 0x11f
 800b50a:	496f      	ldr	r1, [pc, #444]	; (800b6c8 <tcp_input+0x544>)
 800b50c:	486a      	ldr	r0, [pc, #424]	; (800b6b8 <tcp_input+0x534>)
 800b50e:	f009 faa1 	bl	8014a54 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	7a1b      	ldrb	r3, [r3, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d009      	beq.n	800b52e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	7a1a      	ldrb	r2, [r3, #8]
 800b51e:	4b63      	ldr	r3, [pc, #396]	; (800b6ac <tcp_input+0x528>)
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b526:	3301      	adds	r3, #1
 800b528:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d122      	bne.n	800b574 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	8b1a      	ldrh	r2, [r3, #24]
 800b532:	4b5d      	ldr	r3, [pc, #372]	; (800b6a8 <tcp_input+0x524>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	881b      	ldrh	r3, [r3, #0]
 800b538:	b29b      	uxth	r3, r3
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d11b      	bne.n	800b576 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	8ada      	ldrh	r2, [r3, #22]
 800b542:	4b59      	ldr	r3, [pc, #356]	; (800b6a8 <tcp_input+0x524>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	885b      	ldrh	r3, [r3, #2]
 800b548:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d113      	bne.n	800b576 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	4b56      	ldr	r3, [pc, #344]	; (800b6ac <tcp_input+0x528>)
 800b554:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b556:	429a      	cmp	r2, r3
 800b558:	d10d      	bne.n	800b576 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	4b53      	ldr	r3, [pc, #332]	; (800b6ac <tcp_input+0x528>)
 800b560:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b562:	429a      	cmp	r2, r3
 800b564:	d107      	bne.n	800b576 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b566:	69f8      	ldr	r0, [r7, #28]
 800b568:	f000 fb54 	bl	800bc14 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7fd ffc5 	bl	80094fc <pbuf_free>
        return;
 800b572:	e1f0      	b.n	800b956 <tcp_input+0x7d2>
        continue;
 800b574:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	61fb      	str	r3, [r7, #28]
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1bc      	bne.n	800b4fc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b586:	4b51      	ldr	r3, [pc, #324]	; (800b6cc <tcp_input+0x548>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	617b      	str	r3, [r7, #20]
 800b58c:	e02a      	b.n	800b5e4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	7a1b      	ldrb	r3, [r3, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00c      	beq.n	800b5b0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	7a1a      	ldrb	r2, [r3, #8]
 800b59a:	4b44      	ldr	r3, [pc, #272]	; (800b6ac <tcp_input+0x528>)
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d002      	beq.n	800b5b0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	61bb      	str	r3, [r7, #24]
        continue;
 800b5ae:	e016      	b.n	800b5de <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	8ada      	ldrh	r2, [r3, #22]
 800b5b4:	4b3c      	ldr	r3, [pc, #240]	; (800b6a8 <tcp_input+0x524>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	885b      	ldrh	r3, [r3, #2]
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d10c      	bne.n	800b5da <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	4b39      	ldr	r3, [pc, #228]	; (800b6ac <tcp_input+0x528>)
 800b5c6:	695b      	ldr	r3, [r3, #20]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d00f      	beq.n	800b5ec <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00d      	beq.n	800b5ee <tcp_input+0x46a>
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d009      	beq.n	800b5ee <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	617b      	str	r3, [r7, #20]
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1d1      	bne.n	800b58e <tcp_input+0x40a>
 800b5ea:	e000      	b.n	800b5ee <tcp_input+0x46a>
            break;
 800b5ec:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d014      	beq.n	800b61e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	68da      	ldr	r2, [r3, #12]
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b602:	4b32      	ldr	r3, [pc, #200]	; (800b6cc <tcp_input+0x548>)
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b60a:	4a30      	ldr	r2, [pc, #192]	; (800b6cc <tcp_input+0x548>)
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b610:	6978      	ldr	r0, [r7, #20]
 800b612:	f000 fa01 	bl	800ba18 <tcp_listen_input>
      }
      pbuf_free(p);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7fd ff70 	bl	80094fc <pbuf_free>
      return;
 800b61c:	e19b      	b.n	800b956 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b61e:	69fb      	ldr	r3, [r7, #28]
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 8160 	beq.w	800b8e6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b626:	4b2a      	ldr	r3, [pc, #168]	; (800b6d0 <tcp_input+0x54c>)
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	891a      	ldrh	r2, [r3, #8]
 800b630:	4b27      	ldr	r3, [pc, #156]	; (800b6d0 <tcp_input+0x54c>)
 800b632:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b634:	4a26      	ldr	r2, [pc, #152]	; (800b6d0 <tcp_input+0x54c>)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b63a:	4b1b      	ldr	r3, [pc, #108]	; (800b6a8 <tcp_input+0x524>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a24      	ldr	r2, [pc, #144]	; (800b6d0 <tcp_input+0x54c>)
 800b640:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b642:	4b24      	ldr	r3, [pc, #144]	; (800b6d4 <tcp_input+0x550>)
 800b644:	2200      	movs	r2, #0
 800b646:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b648:	4b23      	ldr	r3, [pc, #140]	; (800b6d8 <tcp_input+0x554>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b64e:	4b23      	ldr	r3, [pc, #140]	; (800b6dc <tcp_input+0x558>)
 800b650:	2200      	movs	r2, #0
 800b652:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b654:	4b22      	ldr	r3, [pc, #136]	; (800b6e0 <tcp_input+0x55c>)
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	f003 0308 	and.w	r3, r3, #8
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d006      	beq.n	800b66e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	7b5b      	ldrb	r3, [r3, #13]
 800b664:	f043 0301 	orr.w	r3, r3, #1
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b672:	2b00      	cmp	r3, #0
 800b674:	d038      	beq.n	800b6e8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b676:	69f8      	ldr	r0, [r7, #28]
 800b678:	f7ff f93e 	bl	800a8f8 <tcp_process_refused_data>
 800b67c:	4603      	mov	r3, r0
 800b67e:	f113 0f0d 	cmn.w	r3, #13
 800b682:	d007      	beq.n	800b694 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d02d      	beq.n	800b6e8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b68c:	4b15      	ldr	r3, [pc, #84]	; (800b6e4 <tcp_input+0x560>)
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d029      	beq.n	800b6e8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f040 8104 	bne.w	800b8a6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b69e:	69f8      	ldr	r0, [r7, #28]
 800b6a0:	f003 f9be 	bl	800ea20 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b6a4:	e0ff      	b.n	800b8a6 <tcp_input+0x722>
 800b6a6:	bf00      	nop
 800b6a8:	20010734 	.word	0x20010734
 800b6ac:	20015608 	.word	0x20015608
 800b6b0:	0801658c 	.word	0x0801658c
 800b6b4:	080166b8 	.word	0x080166b8
 800b6b8:	080165d8 	.word	0x080165d8
 800b6bc:	20018d3c 	.word	0x20018d3c
 800b6c0:	080166e4 	.word	0x080166e4
 800b6c4:	20018d4c 	.word	0x20018d4c
 800b6c8:	08016710 	.word	0x08016710
 800b6cc:	20018d44 	.word	0x20018d44
 800b6d0:	20010724 	.word	0x20010724
 800b6d4:	20010754 	.word	0x20010754
 800b6d8:	20010751 	.word	0x20010751
 800b6dc:	2001074c 	.word	0x2001074c
 800b6e0:	20010750 	.word	0x20010750
 800b6e4:	2001074e 	.word	0x2001074e
      }
    }
    tcp_input_pcb = pcb;
 800b6e8:	4a9c      	ldr	r2, [pc, #624]	; (800b95c <tcp_input+0x7d8>)
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b6ee:	69f8      	ldr	r0, [r7, #28]
 800b6f0:	f000 fb0a 	bl	800bd08 <tcp_process>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b6f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6fc:	f113 0f0d 	cmn.w	r3, #13
 800b700:	f000 80d3 	beq.w	800b8aa <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800b704:	4b96      	ldr	r3, [pc, #600]	; (800b960 <tcp_input+0x7dc>)
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	f003 0308 	and.w	r3, r3, #8
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d015      	beq.n	800b73c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b716:	2b00      	cmp	r3, #0
 800b718:	d008      	beq.n	800b72c <tcp_input+0x5a8>
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b720:	69fa      	ldr	r2, [r7, #28]
 800b722:	6912      	ldr	r2, [r2, #16]
 800b724:	f06f 010d 	mvn.w	r1, #13
 800b728:	4610      	mov	r0, r2
 800b72a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b72c:	69f9      	ldr	r1, [r7, #28]
 800b72e:	488d      	ldr	r0, [pc, #564]	; (800b964 <tcp_input+0x7e0>)
 800b730:	f7ff fbb0 	bl	800ae94 <tcp_pcb_remove>
        tcp_free(pcb);
 800b734:	69f8      	ldr	r0, [r7, #28]
 800b736:	f7fe f99d 	bl	8009a74 <tcp_free>
 800b73a:	e0c1      	b.n	800b8c0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800b73c:	2300      	movs	r3, #0
 800b73e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b740:	4b89      	ldr	r3, [pc, #548]	; (800b968 <tcp_input+0x7e4>)
 800b742:	881b      	ldrh	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d01d      	beq.n	800b784 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b748:	4b87      	ldr	r3, [pc, #540]	; (800b968 <tcp_input+0x7e4>)
 800b74a:	881b      	ldrh	r3, [r3, #0]
 800b74c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00a      	beq.n	800b76e <tcp_input+0x5ea>
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b75e:	69fa      	ldr	r2, [r7, #28]
 800b760:	6910      	ldr	r0, [r2, #16]
 800b762:	89fa      	ldrh	r2, [r7, #14]
 800b764:	69f9      	ldr	r1, [r7, #28]
 800b766:	4798      	blx	r3
 800b768:	4603      	mov	r3, r0
 800b76a:	74fb      	strb	r3, [r7, #19]
 800b76c:	e001      	b.n	800b772 <tcp_input+0x5ee>
 800b76e:	2300      	movs	r3, #0
 800b770:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b772:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b776:	f113 0f0d 	cmn.w	r3, #13
 800b77a:	f000 8098 	beq.w	800b8ae <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b77e:	4b7a      	ldr	r3, [pc, #488]	; (800b968 <tcp_input+0x7e4>)
 800b780:	2200      	movs	r2, #0
 800b782:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b784:	69f8      	ldr	r0, [r7, #28]
 800b786:	f000 f907 	bl	800b998 <tcp_input_delayed_close>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f040 8090 	bne.w	800b8b2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b792:	4b76      	ldr	r3, [pc, #472]	; (800b96c <tcp_input+0x7e8>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d041      	beq.n	800b81e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d006      	beq.n	800b7b0 <tcp_input+0x62c>
 800b7a2:	4b73      	ldr	r3, [pc, #460]	; (800b970 <tcp_input+0x7ec>)
 800b7a4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b7a8:	4972      	ldr	r1, [pc, #456]	; (800b974 <tcp_input+0x7f0>)
 800b7aa:	4873      	ldr	r0, [pc, #460]	; (800b978 <tcp_input+0x7f4>)
 800b7ac:	f009 f952 	bl	8014a54 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	8b5b      	ldrh	r3, [r3, #26]
 800b7b4:	f003 0310 	and.w	r3, r3, #16
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d008      	beq.n	800b7ce <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b7bc:	4b6b      	ldr	r3, [pc, #428]	; (800b96c <tcp_input+0x7e8>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7fd fe9b 	bl	80094fc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b7c6:	69f8      	ldr	r0, [r7, #28]
 800b7c8:	f7fe fc3c 	bl	800a044 <tcp_abort>
            goto aborted;
 800b7cc:	e078      	b.n	800b8c0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00c      	beq.n	800b7f2 <tcp_input+0x66e>
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	6918      	ldr	r0, [r3, #16]
 800b7e2:	4b62      	ldr	r3, [pc, #392]	; (800b96c <tcp_input+0x7e8>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	69f9      	ldr	r1, [r7, #28]
 800b7ea:	47a0      	blx	r4
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	74fb      	strb	r3, [r7, #19]
 800b7f0:	e008      	b.n	800b804 <tcp_input+0x680>
 800b7f2:	4b5e      	ldr	r3, [pc, #376]	; (800b96c <tcp_input+0x7e8>)
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	69f9      	ldr	r1, [r7, #28]
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	f7ff f952 	bl	800aaa4 <tcp_recv_null>
 800b800:	4603      	mov	r3, r0
 800b802:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b804:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b808:	f113 0f0d 	cmn.w	r3, #13
 800b80c:	d053      	beq.n	800b8b6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b80e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d003      	beq.n	800b81e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b816:	4b55      	ldr	r3, [pc, #340]	; (800b96c <tcp_input+0x7e8>)
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b81e:	4b50      	ldr	r3, [pc, #320]	; (800b960 <tcp_input+0x7dc>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	f003 0320 	and.w	r3, r3, #32
 800b826:	2b00      	cmp	r3, #0
 800b828:	d030      	beq.n	800b88c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800b82a:	69fb      	ldr	r3, [r7, #28]
 800b82c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d009      	beq.n	800b846 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b836:	7b5a      	ldrb	r2, [r3, #13]
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b83c:	f042 0220 	orr.w	r2, r2, #32
 800b840:	b2d2      	uxtb	r2, r2
 800b842:	735a      	strb	r2, [r3, #13]
 800b844:	e022      	b.n	800b88c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b84a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b84e:	d005      	beq.n	800b85c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b854:	3301      	adds	r3, #1
 800b856:	b29a      	uxth	r2, r3
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b85c:	69fb      	ldr	r3, [r7, #28]
 800b85e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b862:	2b00      	cmp	r3, #0
 800b864:	d00b      	beq.n	800b87e <tcp_input+0x6fa>
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	6918      	ldr	r0, [r3, #16]
 800b870:	2300      	movs	r3, #0
 800b872:	2200      	movs	r2, #0
 800b874:	69f9      	ldr	r1, [r7, #28]
 800b876:	47a0      	blx	r4
 800b878:	4603      	mov	r3, r0
 800b87a:	74fb      	strb	r3, [r7, #19]
 800b87c:	e001      	b.n	800b882 <tcp_input+0x6fe>
 800b87e:	2300      	movs	r3, #0
 800b880:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b882:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b886:	f113 0f0d 	cmn.w	r3, #13
 800b88a:	d016      	beq.n	800b8ba <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b88c:	4b33      	ldr	r3, [pc, #204]	; (800b95c <tcp_input+0x7d8>)
 800b88e:	2200      	movs	r2, #0
 800b890:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b892:	69f8      	ldr	r0, [r7, #28]
 800b894:	f000 f880 	bl	800b998 <tcp_input_delayed_close>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10f      	bne.n	800b8be <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b89e:	69f8      	ldr	r0, [r7, #28]
 800b8a0:	f002 fab8 	bl	800de14 <tcp_output>
 800b8a4:	e00c      	b.n	800b8c0 <tcp_input+0x73c>
        goto aborted;
 800b8a6:	bf00      	nop
 800b8a8:	e00a      	b.n	800b8c0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b8aa:	bf00      	nop
 800b8ac:	e008      	b.n	800b8c0 <tcp_input+0x73c>
              goto aborted;
 800b8ae:	bf00      	nop
 800b8b0:	e006      	b.n	800b8c0 <tcp_input+0x73c>
          goto aborted;
 800b8b2:	bf00      	nop
 800b8b4:	e004      	b.n	800b8c0 <tcp_input+0x73c>
            goto aborted;
 800b8b6:	bf00      	nop
 800b8b8:	e002      	b.n	800b8c0 <tcp_input+0x73c>
              goto aborted;
 800b8ba:	bf00      	nop
 800b8bc:	e000      	b.n	800b8c0 <tcp_input+0x73c>
          goto aborted;
 800b8be:	bf00      	nop
    tcp_input_pcb = NULL;
 800b8c0:	4b26      	ldr	r3, [pc, #152]	; (800b95c <tcp_input+0x7d8>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b8c6:	4b29      	ldr	r3, [pc, #164]	; (800b96c <tcp_input+0x7e8>)
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b8cc:	4b2b      	ldr	r3, [pc, #172]	; (800b97c <tcp_input+0x7f8>)
 800b8ce:	685b      	ldr	r3, [r3, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d03f      	beq.n	800b954 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800b8d4:	4b29      	ldr	r3, [pc, #164]	; (800b97c <tcp_input+0x7f8>)
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fd fe0f 	bl	80094fc <pbuf_free>
      inseg.p = NULL;
 800b8de:	4b27      	ldr	r3, [pc, #156]	; (800b97c <tcp_input+0x7f8>)
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b8e4:	e036      	b.n	800b954 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b8e6:	4b26      	ldr	r3, [pc, #152]	; (800b980 <tcp_input+0x7fc>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	899b      	ldrh	r3, [r3, #12]
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fc fa06 	bl	8007d00 <lwip_htons>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	f003 0304 	and.w	r3, r3, #4
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d118      	bne.n	800b932 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b900:	4b20      	ldr	r3, [pc, #128]	; (800b984 <tcp_input+0x800>)
 800b902:	6819      	ldr	r1, [r3, #0]
 800b904:	4b20      	ldr	r3, [pc, #128]	; (800b988 <tcp_input+0x804>)
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	461a      	mov	r2, r3
 800b90a:	4b20      	ldr	r3, [pc, #128]	; (800b98c <tcp_input+0x808>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b910:	4b1b      	ldr	r3, [pc, #108]	; (800b980 <tcp_input+0x7fc>)
 800b912:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b914:	885b      	ldrh	r3, [r3, #2]
 800b916:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b918:	4a19      	ldr	r2, [pc, #100]	; (800b980 <tcp_input+0x7fc>)
 800b91a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b91c:	8812      	ldrh	r2, [r2, #0]
 800b91e:	b292      	uxth	r2, r2
 800b920:	9202      	str	r2, [sp, #8]
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	4b1a      	ldr	r3, [pc, #104]	; (800b990 <tcp_input+0x80c>)
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	4b1a      	ldr	r3, [pc, #104]	; (800b994 <tcp_input+0x810>)
 800b92a:	4602      	mov	r2, r0
 800b92c:	2000      	movs	r0, #0
 800b92e:	f003 f825 	bl	800e97c <tcp_rst>
    pbuf_free(p);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7fd fde2 	bl	80094fc <pbuf_free>
  return;
 800b938:	e00c      	b.n	800b954 <tcp_input+0x7d0>
    goto dropped;
 800b93a:	bf00      	nop
 800b93c:	e006      	b.n	800b94c <tcp_input+0x7c8>
    goto dropped;
 800b93e:	bf00      	nop
 800b940:	e004      	b.n	800b94c <tcp_input+0x7c8>
    goto dropped;
 800b942:	bf00      	nop
 800b944:	e002      	b.n	800b94c <tcp_input+0x7c8>
      goto dropped;
 800b946:	bf00      	nop
 800b948:	e000      	b.n	800b94c <tcp_input+0x7c8>
      goto dropped;
 800b94a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f7fd fdd5 	bl	80094fc <pbuf_free>
 800b952:	e000      	b.n	800b956 <tcp_input+0x7d2>
  return;
 800b954:	bf00      	nop
}
 800b956:	3724      	adds	r7, #36	; 0x24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd90      	pop	{r4, r7, pc}
 800b95c:	20018d50 	.word	0x20018d50
 800b960:	20010751 	.word	0x20010751
 800b964:	20018d3c 	.word	0x20018d3c
 800b968:	2001074c 	.word	0x2001074c
 800b96c:	20010754 	.word	0x20010754
 800b970:	0801658c 	.word	0x0801658c
 800b974:	08016740 	.word	0x08016740
 800b978:	080165d8 	.word	0x080165d8
 800b97c:	20010724 	.word	0x20010724
 800b980:	20010734 	.word	0x20010734
 800b984:	20010748 	.word	0x20010748
 800b988:	2001074e 	.word	0x2001074e
 800b98c:	20010744 	.word	0x20010744
 800b990:	20015618 	.word	0x20015618
 800b994:	2001561c 	.word	0x2001561c

0800b998 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <tcp_input_delayed_close+0x1c>
 800b9a6:	4b17      	ldr	r3, [pc, #92]	; (800ba04 <tcp_input_delayed_close+0x6c>)
 800b9a8:	f240 225a 	movw	r2, #602	; 0x25a
 800b9ac:	4916      	ldr	r1, [pc, #88]	; (800ba08 <tcp_input_delayed_close+0x70>)
 800b9ae:	4817      	ldr	r0, [pc, #92]	; (800ba0c <tcp_input_delayed_close+0x74>)
 800b9b0:	f009 f850 	bl	8014a54 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b9b4:	4b16      	ldr	r3, [pc, #88]	; (800ba10 <tcp_input_delayed_close+0x78>)
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	f003 0310 	and.w	r3, r3, #16
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d01c      	beq.n	800b9fa <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	8b5b      	ldrh	r3, [r3, #26]
 800b9c4:	f003 0310 	and.w	r3, r3, #16
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10d      	bne.n	800b9e8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d008      	beq.n	800b9e8 <tcp_input_delayed_close+0x50>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	6912      	ldr	r2, [r2, #16]
 800b9e0:	f06f 010e 	mvn.w	r1, #14
 800b9e4:	4610      	mov	r0, r2
 800b9e6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b9e8:	6879      	ldr	r1, [r7, #4]
 800b9ea:	480a      	ldr	r0, [pc, #40]	; (800ba14 <tcp_input_delayed_close+0x7c>)
 800b9ec:	f7ff fa52 	bl	800ae94 <tcp_pcb_remove>
    tcp_free(pcb);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f7fe f83f 	bl	8009a74 <tcp_free>
    return 1;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e000      	b.n	800b9fc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	0801658c 	.word	0x0801658c
 800ba08:	0801675c 	.word	0x0801675c
 800ba0c:	080165d8 	.word	0x080165d8
 800ba10:	20010751 	.word	0x20010751
 800ba14:	20018d3c 	.word	0x20018d3c

0800ba18 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ba18:	b590      	push	{r4, r7, lr}
 800ba1a:	b08b      	sub	sp, #44	; 0x2c
 800ba1c:	af04      	add	r7, sp, #16
 800ba1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ba20:	4b6f      	ldr	r3, [pc, #444]	; (800bbe0 <tcp_listen_input+0x1c8>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f003 0304 	and.w	r3, r3, #4
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f040 80d2 	bne.w	800bbd2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d106      	bne.n	800ba42 <tcp_listen_input+0x2a>
 800ba34:	4b6b      	ldr	r3, [pc, #428]	; (800bbe4 <tcp_listen_input+0x1cc>)
 800ba36:	f240 2281 	movw	r2, #641	; 0x281
 800ba3a:	496b      	ldr	r1, [pc, #428]	; (800bbe8 <tcp_listen_input+0x1d0>)
 800ba3c:	486b      	ldr	r0, [pc, #428]	; (800bbec <tcp_listen_input+0x1d4>)
 800ba3e:	f009 f809 	bl	8014a54 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ba42:	4b67      	ldr	r3, [pc, #412]	; (800bbe0 <tcp_listen_input+0x1c8>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	f003 0310 	and.w	r3, r3, #16
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d019      	beq.n	800ba82 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba4e:	4b68      	ldr	r3, [pc, #416]	; (800bbf0 <tcp_listen_input+0x1d8>)
 800ba50:	6819      	ldr	r1, [r3, #0]
 800ba52:	4b68      	ldr	r3, [pc, #416]	; (800bbf4 <tcp_listen_input+0x1dc>)
 800ba54:	881b      	ldrh	r3, [r3, #0]
 800ba56:	461a      	mov	r2, r3
 800ba58:	4b67      	ldr	r3, [pc, #412]	; (800bbf8 <tcp_listen_input+0x1e0>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba5e:	4b67      	ldr	r3, [pc, #412]	; (800bbfc <tcp_listen_input+0x1e4>)
 800ba60:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba62:	885b      	ldrh	r3, [r3, #2]
 800ba64:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ba66:	4a65      	ldr	r2, [pc, #404]	; (800bbfc <tcp_listen_input+0x1e4>)
 800ba68:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ba6a:	8812      	ldrh	r2, [r2, #0]
 800ba6c:	b292      	uxth	r2, r2
 800ba6e:	9202      	str	r2, [sp, #8]
 800ba70:	9301      	str	r3, [sp, #4]
 800ba72:	4b63      	ldr	r3, [pc, #396]	; (800bc00 <tcp_listen_input+0x1e8>)
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	4b63      	ldr	r3, [pc, #396]	; (800bc04 <tcp_listen_input+0x1ec>)
 800ba78:	4602      	mov	r2, r0
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f002 ff7e 	bl	800e97c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ba80:	e0a9      	b.n	800bbd6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ba82:	4b57      	ldr	r3, [pc, #348]	; (800bbe0 <tcp_listen_input+0x1c8>)
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	f003 0302 	and.w	r3, r3, #2
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f000 80a3 	beq.w	800bbd6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	7d5b      	ldrb	r3, [r3, #21]
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7ff f929 	bl	800acec <tcp_alloc>
 800ba9a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d111      	bne.n	800bac6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00a      	beq.n	800bac0 <tcp_listen_input+0xa8>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	699b      	ldr	r3, [r3, #24]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	6910      	ldr	r0, [r2, #16]
 800bab2:	f04f 32ff 	mov.w	r2, #4294967295
 800bab6:	2100      	movs	r1, #0
 800bab8:	4798      	blx	r3
 800baba:	4603      	mov	r3, r0
 800babc:	73bb      	strb	r3, [r7, #14]
      return;
 800babe:	e08b      	b.n	800bbd8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bac0:	23f0      	movs	r3, #240	; 0xf0
 800bac2:	73bb      	strb	r3, [r7, #14]
      return;
 800bac4:	e088      	b.n	800bbd8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bac6:	4b50      	ldr	r3, [pc, #320]	; (800bc08 <tcp_listen_input+0x1f0>)
 800bac8:	695a      	ldr	r2, [r3, #20]
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bace:	4b4e      	ldr	r3, [pc, #312]	; (800bc08 <tcp_listen_input+0x1f0>)
 800bad0:	691a      	ldr	r2, [r3, #16]
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	8ada      	ldrh	r2, [r3, #22]
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bade:	4b47      	ldr	r3, [pc, #284]	; (800bbfc <tcp_listen_input+0x1e4>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	881b      	ldrh	r3, [r3, #0]
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	2203      	movs	r2, #3
 800baee:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800baf0:	4b41      	ldr	r3, [pc, #260]	; (800bbf8 <tcp_listen_input+0x1e0>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	1c5a      	adds	r2, r3, #1
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bb02:	6978      	ldr	r0, [r7, #20]
 800bb04:	f7ff fa5a 	bl	800afbc <tcp_next_iss>
 800bb08:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	693a      	ldr	r2, [r7, #16]
 800bb20:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bb22:	4b35      	ldr	r3, [pc, #212]	; (800bbf8 <tcp_listen_input+0x1e0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	1e5a      	subs	r2, r3, #1
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	691a      	ldr	r2, [r3, #16]
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	7a5b      	ldrb	r3, [r3, #9]
 800bb3e:	f003 030c 	and.w	r3, r3, #12
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	7a1a      	ldrb	r2, [r3, #8]
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800bb50:	4b2e      	ldr	r3, [pc, #184]	; (800bc0c <tcp_listen_input+0x1f4>)
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	60da      	str	r2, [r3, #12]
 800bb58:	4a2c      	ldr	r2, [pc, #176]	; (800bc0c <tcp_listen_input+0x1f4>)
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	6013      	str	r3, [r2, #0]
 800bb5e:	f003 f8cf 	bl	800ed00 <tcp_timer_needed>
 800bb62:	4b2b      	ldr	r3, [pc, #172]	; (800bc10 <tcp_listen_input+0x1f8>)
 800bb64:	2201      	movs	r2, #1
 800bb66:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bb68:	6978      	ldr	r0, [r7, #20]
 800bb6a:	f001 fd8d 	bl	800d688 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800bb6e:	4b23      	ldr	r3, [pc, #140]	; (800bbfc <tcp_listen_input+0x1e4>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	89db      	ldrh	r3, [r3, #14]
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	4618      	mov	r0, r3
 800bb92:	f006 fe5b 	bl	801284c <ip4_route>
 800bb96:	4601      	mov	r1, r0
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f7ff fa32 	bl	800b008 <tcp_eff_send_mss_netif>
 800bba4:	4603      	mov	r3, r0
 800bba6:	461a      	mov	r2, r3
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bbac:	2112      	movs	r1, #18
 800bbae:	6978      	ldr	r0, [r7, #20]
 800bbb0:	f002 f842 	bl	800dc38 <tcp_enqueue_flags>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800bbb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d004      	beq.n	800bbca <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	6978      	ldr	r0, [r7, #20]
 800bbc4:	f7fe f980 	bl	8009ec8 <tcp_abandon>
      return;
 800bbc8:	e006      	b.n	800bbd8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800bbca:	6978      	ldr	r0, [r7, #20]
 800bbcc:	f002 f922 	bl	800de14 <tcp_output>
  return;
 800bbd0:	e001      	b.n	800bbd6 <tcp_listen_input+0x1be>
    return;
 800bbd2:	bf00      	nop
 800bbd4:	e000      	b.n	800bbd8 <tcp_listen_input+0x1c0>
  return;
 800bbd6:	bf00      	nop
}
 800bbd8:	371c      	adds	r7, #28
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd90      	pop	{r4, r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	20010750 	.word	0x20010750
 800bbe4:	0801658c 	.word	0x0801658c
 800bbe8:	08016784 	.word	0x08016784
 800bbec:	080165d8 	.word	0x080165d8
 800bbf0:	20010748 	.word	0x20010748
 800bbf4:	2001074e 	.word	0x2001074e
 800bbf8:	20010744 	.word	0x20010744
 800bbfc:	20010734 	.word	0x20010734
 800bc00:	20015618 	.word	0x20015618
 800bc04:	2001561c 	.word	0x2001561c
 800bc08:	20015608 	.word	0x20015608
 800bc0c:	20018d3c 	.word	0x20018d3c
 800bc10:	20018d38 	.word	0x20018d38

0800bc14 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af04      	add	r7, sp, #16
 800bc1a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bc1c:	4b2f      	ldr	r3, [pc, #188]	; (800bcdc <tcp_timewait_input+0xc8>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	f003 0304 	and.w	r3, r3, #4
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d153      	bne.n	800bcd0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d106      	bne.n	800bc3c <tcp_timewait_input+0x28>
 800bc2e:	4b2c      	ldr	r3, [pc, #176]	; (800bce0 <tcp_timewait_input+0xcc>)
 800bc30:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bc34:	492b      	ldr	r1, [pc, #172]	; (800bce4 <tcp_timewait_input+0xd0>)
 800bc36:	482c      	ldr	r0, [pc, #176]	; (800bce8 <tcp_timewait_input+0xd4>)
 800bc38:	f008 ff0c 	bl	8014a54 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bc3c:	4b27      	ldr	r3, [pc, #156]	; (800bcdc <tcp_timewait_input+0xc8>)
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	f003 0302 	and.w	r3, r3, #2
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d02a      	beq.n	800bc9e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bc48:	4b28      	ldr	r3, [pc, #160]	; (800bcec <tcp_timewait_input+0xd8>)
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	db2d      	blt.n	800bcb2 <tcp_timewait_input+0x9e>
 800bc56:	4b25      	ldr	r3, [pc, #148]	; (800bcec <tcp_timewait_input+0xd8>)
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bc62:	440b      	add	r3, r1
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	dc23      	bgt.n	800bcb2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc6a:	4b21      	ldr	r3, [pc, #132]	; (800bcf0 <tcp_timewait_input+0xdc>)
 800bc6c:	6819      	ldr	r1, [r3, #0]
 800bc6e:	4b21      	ldr	r3, [pc, #132]	; (800bcf4 <tcp_timewait_input+0xe0>)
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	4b1d      	ldr	r3, [pc, #116]	; (800bcec <tcp_timewait_input+0xd8>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc7a:	4b1f      	ldr	r3, [pc, #124]	; (800bcf8 <tcp_timewait_input+0xe4>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc7e:	885b      	ldrh	r3, [r3, #2]
 800bc80:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc82:	4a1d      	ldr	r2, [pc, #116]	; (800bcf8 <tcp_timewait_input+0xe4>)
 800bc84:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc86:	8812      	ldrh	r2, [r2, #0]
 800bc88:	b292      	uxth	r2, r2
 800bc8a:	9202      	str	r2, [sp, #8]
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	4b1b      	ldr	r3, [pc, #108]	; (800bcfc <tcp_timewait_input+0xe8>)
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	4b1b      	ldr	r3, [pc, #108]	; (800bd00 <tcp_timewait_input+0xec>)
 800bc94:	4602      	mov	r2, r0
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f002 fe70 	bl	800e97c <tcp_rst>
      return;
 800bc9c:	e01b      	b.n	800bcd6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bc9e:	4b0f      	ldr	r3, [pc, #60]	; (800bcdc <tcp_timewait_input+0xc8>)
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	f003 0301 	and.w	r3, r3, #1
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bcaa:	4b16      	ldr	r3, [pc, #88]	; (800bd04 <tcp_timewait_input+0xf0>)
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bcb2:	4b10      	ldr	r3, [pc, #64]	; (800bcf4 <tcp_timewait_input+0xe0>)
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00c      	beq.n	800bcd4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	8b5b      	ldrh	r3, [r3, #26]
 800bcbe:	f043 0302 	orr.w	r3, r3, #2
 800bcc2:	b29a      	uxth	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f002 f8a3 	bl	800de14 <tcp_output>
  }
  return;
 800bcce:	e001      	b.n	800bcd4 <tcp_timewait_input+0xc0>
    return;
 800bcd0:	bf00      	nop
 800bcd2:	e000      	b.n	800bcd6 <tcp_timewait_input+0xc2>
  return;
 800bcd4:	bf00      	nop
}
 800bcd6:	3708      	adds	r7, #8
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}
 800bcdc:	20010750 	.word	0x20010750
 800bce0:	0801658c 	.word	0x0801658c
 800bce4:	080167a4 	.word	0x080167a4
 800bce8:	080165d8 	.word	0x080165d8
 800bcec:	20010744 	.word	0x20010744
 800bcf0:	20010748 	.word	0x20010748
 800bcf4:	2001074e 	.word	0x2001074e
 800bcf8:	20010734 	.word	0x20010734
 800bcfc:	20015618 	.word	0x20015618
 800bd00:	2001561c 	.word	0x2001561c
 800bd04:	20018d40 	.word	0x20018d40

0800bd08 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bd08:	b590      	push	{r4, r7, lr}
 800bd0a:	b08d      	sub	sp, #52	; 0x34
 800bd0c:	af04      	add	r7, sp, #16
 800bd0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bd14:	2300      	movs	r3, #0
 800bd16:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d106      	bne.n	800bd2c <tcp_process+0x24>
 800bd1e:	4ba5      	ldr	r3, [pc, #660]	; (800bfb4 <tcp_process+0x2ac>)
 800bd20:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800bd24:	49a4      	ldr	r1, [pc, #656]	; (800bfb8 <tcp_process+0x2b0>)
 800bd26:	48a5      	ldr	r0, [pc, #660]	; (800bfbc <tcp_process+0x2b4>)
 800bd28:	f008 fe94 	bl	8014a54 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bd2c:	4ba4      	ldr	r3, [pc, #656]	; (800bfc0 <tcp_process+0x2b8>)
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	f003 0304 	and.w	r3, r3, #4
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d04e      	beq.n	800bdd6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	7d1b      	ldrb	r3, [r3, #20]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d108      	bne.n	800bd52 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd44:	4b9f      	ldr	r3, [pc, #636]	; (800bfc4 <tcp_process+0x2bc>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d123      	bne.n	800bd94 <tcp_process+0x8c>
        acceptable = 1;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	76fb      	strb	r3, [r7, #27]
 800bd50:	e020      	b.n	800bd94 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd56:	4b9c      	ldr	r3, [pc, #624]	; (800bfc8 <tcp_process+0x2c0>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d102      	bne.n	800bd64 <tcp_process+0x5c>
        acceptable = 1;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	76fb      	strb	r3, [r7, #27]
 800bd62:	e017      	b.n	800bd94 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bd64:	4b98      	ldr	r3, [pc, #608]	; (800bfc8 <tcp_process+0x2c0>)
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	db10      	blt.n	800bd94 <tcp_process+0x8c>
 800bd72:	4b95      	ldr	r3, [pc, #596]	; (800bfc8 <tcp_process+0x2c0>)
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd7a:	6879      	ldr	r1, [r7, #4]
 800bd7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bd7e:	440b      	add	r3, r1
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	dc06      	bgt.n	800bd94 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	8b5b      	ldrh	r3, [r3, #26]
 800bd8a:	f043 0302 	orr.w	r3, r3, #2
 800bd8e:	b29a      	uxth	r2, r3
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bd94:	7efb      	ldrb	r3, [r7, #27]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d01b      	beq.n	800bdd2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	7d1b      	ldrb	r3, [r3, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d106      	bne.n	800bdb0 <tcp_process+0xa8>
 800bda2:	4b84      	ldr	r3, [pc, #528]	; (800bfb4 <tcp_process+0x2ac>)
 800bda4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bda8:	4988      	ldr	r1, [pc, #544]	; (800bfcc <tcp_process+0x2c4>)
 800bdaa:	4884      	ldr	r0, [pc, #528]	; (800bfbc <tcp_process+0x2b4>)
 800bdac:	f008 fe52 	bl	8014a54 <iprintf>
      recv_flags |= TF_RESET;
 800bdb0:	4b87      	ldr	r3, [pc, #540]	; (800bfd0 <tcp_process+0x2c8>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	f043 0308 	orr.w	r3, r3, #8
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	4b85      	ldr	r3, [pc, #532]	; (800bfd0 <tcp_process+0x2c8>)
 800bdbc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	8b5b      	ldrh	r3, [r3, #26]
 800bdc2:	f023 0301 	bic.w	r3, r3, #1
 800bdc6:	b29a      	uxth	r2, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bdcc:	f06f 030d 	mvn.w	r3, #13
 800bdd0:	e37a      	b.n	800c4c8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e378      	b.n	800c4c8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bdd6:	4b7a      	ldr	r3, [pc, #488]	; (800bfc0 <tcp_process+0x2b8>)
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	f003 0302 	and.w	r3, r3, #2
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d010      	beq.n	800be04 <tcp_process+0xfc>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	7d1b      	ldrb	r3, [r3, #20]
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d00c      	beq.n	800be04 <tcp_process+0xfc>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	7d1b      	ldrb	r3, [r3, #20]
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d008      	beq.n	800be04 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	8b5b      	ldrh	r3, [r3, #26]
 800bdf6:	f043 0302 	orr.w	r3, r3, #2
 800bdfa:	b29a      	uxth	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	e361      	b.n	800c4c8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	8b5b      	ldrh	r3, [r3, #26]
 800be08:	f003 0310 	and.w	r3, r3, #16
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d103      	bne.n	800be18 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800be10:	4b70      	ldr	r3, [pc, #448]	; (800bfd4 <tcp_process+0x2cc>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f001 fc2d 	bl	800d688 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	7d1b      	ldrb	r3, [r3, #20]
 800be32:	3b02      	subs	r3, #2
 800be34:	2b07      	cmp	r3, #7
 800be36:	f200 8337 	bhi.w	800c4a8 <tcp_process+0x7a0>
 800be3a:	a201      	add	r2, pc, #4	; (adr r2, 800be40 <tcp_process+0x138>)
 800be3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be40:	0800be61 	.word	0x0800be61
 800be44:	0800c091 	.word	0x0800c091
 800be48:	0800c209 	.word	0x0800c209
 800be4c:	0800c233 	.word	0x0800c233
 800be50:	0800c357 	.word	0x0800c357
 800be54:	0800c209 	.word	0x0800c209
 800be58:	0800c3e3 	.word	0x0800c3e3
 800be5c:	0800c473 	.word	0x0800c473
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800be60:	4b57      	ldr	r3, [pc, #348]	; (800bfc0 <tcp_process+0x2b8>)
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	f003 0310 	and.w	r3, r3, #16
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 80e4 	beq.w	800c036 <tcp_process+0x32e>
 800be6e:	4b54      	ldr	r3, [pc, #336]	; (800bfc0 <tcp_process+0x2b8>)
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	f003 0302 	and.w	r3, r3, #2
 800be76:	2b00      	cmp	r3, #0
 800be78:	f000 80dd 	beq.w	800c036 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be80:	1c5a      	adds	r2, r3, #1
 800be82:	4b50      	ldr	r3, [pc, #320]	; (800bfc4 <tcp_process+0x2bc>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	429a      	cmp	r2, r3
 800be88:	f040 80d5 	bne.w	800c036 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800be8c:	4b4e      	ldr	r3, [pc, #312]	; (800bfc8 <tcp_process+0x2c0>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	1c5a      	adds	r2, r3, #1
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800be9e:	4b49      	ldr	r3, [pc, #292]	; (800bfc4 <tcp_process+0x2bc>)
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bea6:	4b4c      	ldr	r3, [pc, #304]	; (800bfd8 <tcp_process+0x2d0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	89db      	ldrh	r3, [r3, #14]
 800beac:	b29a      	uxth	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bec0:	4b41      	ldr	r3, [pc, #260]	; (800bfc8 <tcp_process+0x2c0>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	1e5a      	subs	r2, r3, #1
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2204      	movs	r2, #4
 800bece:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	3304      	adds	r3, #4
 800bed8:	4618      	mov	r0, r3
 800beda:	f006 fcb7 	bl	801284c <ip4_route>
 800bede:	4601      	mov	r1, r0
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	3304      	adds	r3, #4
 800bee4:	461a      	mov	r2, r3
 800bee6:	4620      	mov	r0, r4
 800bee8:	f7ff f88e 	bl	800b008 <tcp_eff_send_mss_netif>
 800beec:	4603      	mov	r3, r0
 800beee:	461a      	mov	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bef8:	009a      	lsls	r2, r3, #2
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800befe:	005b      	lsls	r3, r3, #1
 800bf00:	f241 111c 	movw	r1, #4380	; 0x111c
 800bf04:	428b      	cmp	r3, r1
 800bf06:	bf38      	it	cc
 800bf08:	460b      	movcc	r3, r1
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d204      	bcs.n	800bf18 <tcp_process+0x210>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	e00d      	b.n	800bf34 <tcp_process+0x22c>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf1c:	005b      	lsls	r3, r3, #1
 800bf1e:	f241 121c 	movw	r2, #4380	; 0x111c
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d904      	bls.n	800bf30 <tcp_process+0x228>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf2a:	005b      	lsls	r3, r3, #1
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	e001      	b.n	800bf34 <tcp_process+0x22c>
 800bf30:	f241 131c 	movw	r3, #4380	; 0x111c
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d106      	bne.n	800bf52 <tcp_process+0x24a>
 800bf44:	4b1b      	ldr	r3, [pc, #108]	; (800bfb4 <tcp_process+0x2ac>)
 800bf46:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bf4a:	4924      	ldr	r1, [pc, #144]	; (800bfdc <tcp_process+0x2d4>)
 800bf4c:	481b      	ldr	r0, [pc, #108]	; (800bfbc <tcp_process+0x2b4>)
 800bf4e:	f008 fd81 	bl	8014a54 <iprintf>
        --pcb->snd_queuelen;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bf58:	3b01      	subs	r3, #1
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf66:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d111      	bne.n	800bf92 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf72:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d106      	bne.n	800bf88 <tcp_process+0x280>
 800bf7a:	4b0e      	ldr	r3, [pc, #56]	; (800bfb4 <tcp_process+0x2ac>)
 800bf7c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800bf80:	4917      	ldr	r1, [pc, #92]	; (800bfe0 <tcp_process+0x2d8>)
 800bf82:	480e      	ldr	r0, [pc, #56]	; (800bfbc <tcp_process+0x2b4>)
 800bf84:	f008 fd66 	bl	8014a54 <iprintf>
          pcb->unsent = rseg->next;
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	66da      	str	r2, [r3, #108]	; 0x6c
 800bf90:	e003      	b.n	800bf9a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800bf9a:	69f8      	ldr	r0, [r7, #28]
 800bf9c:	f7fe fd3d 	bl	800aa1a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d11d      	bne.n	800bfe4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bfae:	861a      	strh	r2, [r3, #48]	; 0x30
 800bfb0:	e01f      	b.n	800bff2 <tcp_process+0x2ea>
 800bfb2:	bf00      	nop
 800bfb4:	0801658c 	.word	0x0801658c
 800bfb8:	080167c4 	.word	0x080167c4
 800bfbc:	080165d8 	.word	0x080165d8
 800bfc0:	20010750 	.word	0x20010750
 800bfc4:	20010748 	.word	0x20010748
 800bfc8:	20010744 	.word	0x20010744
 800bfcc:	080167e0 	.word	0x080167e0
 800bfd0:	20010751 	.word	0x20010751
 800bfd4:	20018d40 	.word	0x20018d40
 800bfd8:	20010734 	.word	0x20010734
 800bfdc:	08016800 	.word	0x08016800
 800bfe0:	08016818 	.word	0x08016818
        } else {
          pcb->rtime = 0;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00a      	beq.n	800c012 <tcp_process+0x30a>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c002:	687a      	ldr	r2, [r7, #4]
 800c004:	6910      	ldr	r0, [r2, #16]
 800c006:	2200      	movs	r2, #0
 800c008:	6879      	ldr	r1, [r7, #4]
 800c00a:	4798      	blx	r3
 800c00c:	4603      	mov	r3, r0
 800c00e:	76bb      	strb	r3, [r7, #26]
 800c010:	e001      	b.n	800c016 <tcp_process+0x30e>
 800c012:	2300      	movs	r3, #0
 800c014:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c016:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c01a:	f113 0f0d 	cmn.w	r3, #13
 800c01e:	d102      	bne.n	800c026 <tcp_process+0x31e>
          return ERR_ABRT;
 800c020:	f06f 030c 	mvn.w	r3, #12
 800c024:	e250      	b.n	800c4c8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	8b5b      	ldrh	r3, [r3, #26]
 800c02a:	f043 0302 	orr.w	r3, r3, #2
 800c02e:	b29a      	uxth	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c034:	e23a      	b.n	800c4ac <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c036:	4b9d      	ldr	r3, [pc, #628]	; (800c2ac <tcp_process+0x5a4>)
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	f003 0310 	and.w	r3, r3, #16
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 8234 	beq.w	800c4ac <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c044:	4b9a      	ldr	r3, [pc, #616]	; (800c2b0 <tcp_process+0x5a8>)
 800c046:	6819      	ldr	r1, [r3, #0]
 800c048:	4b9a      	ldr	r3, [pc, #616]	; (800c2b4 <tcp_process+0x5ac>)
 800c04a:	881b      	ldrh	r3, [r3, #0]
 800c04c:	461a      	mov	r2, r3
 800c04e:	4b9a      	ldr	r3, [pc, #616]	; (800c2b8 <tcp_process+0x5b0>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c054:	4b99      	ldr	r3, [pc, #612]	; (800c2bc <tcp_process+0x5b4>)
 800c056:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c058:	885b      	ldrh	r3, [r3, #2]
 800c05a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c05c:	4a97      	ldr	r2, [pc, #604]	; (800c2bc <tcp_process+0x5b4>)
 800c05e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c060:	8812      	ldrh	r2, [r2, #0]
 800c062:	b292      	uxth	r2, r2
 800c064:	9202      	str	r2, [sp, #8]
 800c066:	9301      	str	r3, [sp, #4]
 800c068:	4b95      	ldr	r3, [pc, #596]	; (800c2c0 <tcp_process+0x5b8>)
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	4b95      	ldr	r3, [pc, #596]	; (800c2c4 <tcp_process+0x5bc>)
 800c06e:	4602      	mov	r2, r0
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f002 fc83 	bl	800e97c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c07c:	2b05      	cmp	r3, #5
 800c07e:	f200 8215 	bhi.w	800c4ac <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f002 fa4d 	bl	800e528 <tcp_rexmit_rto>
      break;
 800c08e:	e20d      	b.n	800c4ac <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c090:	4b86      	ldr	r3, [pc, #536]	; (800c2ac <tcp_process+0x5a4>)
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	f003 0310 	and.w	r3, r3, #16
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 80a1 	beq.w	800c1e0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c09e:	4b84      	ldr	r3, [pc, #528]	; (800c2b0 <tcp_process+0x5a8>)
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0a6:	1ad3      	subs	r3, r2, r3
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	db7e      	blt.n	800c1ac <tcp_process+0x4a4>
 800c0ae:	4b80      	ldr	r3, [pc, #512]	; (800c2b0 <tcp_process+0x5a8>)
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	dc77      	bgt.n	800c1ac <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2204      	movs	r2, #4
 800c0c0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d102      	bne.n	800c0d0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c0ca:	23fa      	movs	r3, #250	; 0xfa
 800c0cc:	76bb      	strb	r3, [r7, #26]
 800c0ce:	e01d      	b.n	800c10c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <tcp_process+0x3e0>
 800c0da:	4b7b      	ldr	r3, [pc, #492]	; (800c2c8 <tcp_process+0x5c0>)
 800c0dc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c0e0:	497a      	ldr	r1, [pc, #488]	; (800c2cc <tcp_process+0x5c4>)
 800c0e2:	487b      	ldr	r0, [pc, #492]	; (800c2d0 <tcp_process+0x5c8>)
 800c0e4:	f008 fcb6 	bl	8014a54 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00a      	beq.n	800c108 <tcp_process+0x400>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	6910      	ldr	r0, [r2, #16]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	6879      	ldr	r1, [r7, #4]
 800c100:	4798      	blx	r3
 800c102:	4603      	mov	r3, r0
 800c104:	76bb      	strb	r3, [r7, #26]
 800c106:	e001      	b.n	800c10c <tcp_process+0x404>
 800c108:	23f0      	movs	r3, #240	; 0xf0
 800c10a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c10c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00a      	beq.n	800c12a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c114:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c118:	f113 0f0d 	cmn.w	r3, #13
 800c11c:	d002      	beq.n	800c124 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7fd ff90 	bl	800a044 <tcp_abort>
            }
            return ERR_ABRT;
 800c124:	f06f 030c 	mvn.w	r3, #12
 800c128:	e1ce      	b.n	800c4c8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fae0 	bl	800c6f0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c130:	4b68      	ldr	r3, [pc, #416]	; (800c2d4 <tcp_process+0x5cc>)
 800c132:	881b      	ldrh	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d005      	beq.n	800c144 <tcp_process+0x43c>
            recv_acked--;
 800c138:	4b66      	ldr	r3, [pc, #408]	; (800c2d4 <tcp_process+0x5cc>)
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	3b01      	subs	r3, #1
 800c13e:	b29a      	uxth	r2, r3
 800c140:	4b64      	ldr	r3, [pc, #400]	; (800c2d4 <tcp_process+0x5cc>)
 800c142:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c148:	009a      	lsls	r2, r3, #2
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c14e:	005b      	lsls	r3, r3, #1
 800c150:	f241 111c 	movw	r1, #4380	; 0x111c
 800c154:	428b      	cmp	r3, r1
 800c156:	bf38      	it	cc
 800c158:	460b      	movcc	r3, r1
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d204      	bcs.n	800c168 <tcp_process+0x460>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	b29b      	uxth	r3, r3
 800c166:	e00d      	b.n	800c184 <tcp_process+0x47c>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c16c:	005b      	lsls	r3, r3, #1
 800c16e:	f241 121c 	movw	r2, #4380	; 0x111c
 800c172:	4293      	cmp	r3, r2
 800c174:	d904      	bls.n	800c180 <tcp_process+0x478>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c17a:	005b      	lsls	r3, r3, #1
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	e001      	b.n	800c184 <tcp_process+0x47c>
 800c180:	f241 131c 	movw	r3, #4380	; 0x111c
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c18a:	4b53      	ldr	r3, [pc, #332]	; (800c2d8 <tcp_process+0x5d0>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	f003 0320 	and.w	r3, r3, #32
 800c192:	2b00      	cmp	r3, #0
 800c194:	d037      	beq.n	800c206 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	8b5b      	ldrh	r3, [r3, #26]
 800c19a:	f043 0302 	orr.w	r3, r3, #2
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2207      	movs	r2, #7
 800c1a8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c1aa:	e02c      	b.n	800c206 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1ac:	4b40      	ldr	r3, [pc, #256]	; (800c2b0 <tcp_process+0x5a8>)
 800c1ae:	6819      	ldr	r1, [r3, #0]
 800c1b0:	4b40      	ldr	r3, [pc, #256]	; (800c2b4 <tcp_process+0x5ac>)
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	4b40      	ldr	r3, [pc, #256]	; (800c2b8 <tcp_process+0x5b0>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1bc:	4b3f      	ldr	r3, [pc, #252]	; (800c2bc <tcp_process+0x5b4>)
 800c1be:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1c0:	885b      	ldrh	r3, [r3, #2]
 800c1c2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1c4:	4a3d      	ldr	r2, [pc, #244]	; (800c2bc <tcp_process+0x5b4>)
 800c1c6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1c8:	8812      	ldrh	r2, [r2, #0]
 800c1ca:	b292      	uxth	r2, r2
 800c1cc:	9202      	str	r2, [sp, #8]
 800c1ce:	9301      	str	r3, [sp, #4]
 800c1d0:	4b3b      	ldr	r3, [pc, #236]	; (800c2c0 <tcp_process+0x5b8>)
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	4b3b      	ldr	r3, [pc, #236]	; (800c2c4 <tcp_process+0x5bc>)
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f002 fbcf 	bl	800e97c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c1de:	e167      	b.n	800c4b0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c1e0:	4b32      	ldr	r3, [pc, #200]	; (800c2ac <tcp_process+0x5a4>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	f003 0302 	and.w	r3, r3, #2
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	f000 8161 	beq.w	800c4b0 <tcp_process+0x7a8>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f2:	1e5a      	subs	r2, r3, #1
 800c1f4:	4b30      	ldr	r3, [pc, #192]	; (800c2b8 <tcp_process+0x5b0>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	f040 8159 	bne.w	800c4b0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f002 f9b4 	bl	800e56c <tcp_rexmit>
      break;
 800c204:	e154      	b.n	800c4b0 <tcp_process+0x7a8>
 800c206:	e153      	b.n	800c4b0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 fa71 	bl	800c6f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c20e:	4b32      	ldr	r3, [pc, #200]	; (800c2d8 <tcp_process+0x5d0>)
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	f003 0320 	and.w	r3, r3, #32
 800c216:	2b00      	cmp	r3, #0
 800c218:	f000 814c 	beq.w	800c4b4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	8b5b      	ldrh	r3, [r3, #26]
 800c220:	f043 0302 	orr.w	r3, r3, #2
 800c224:	b29a      	uxth	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2207      	movs	r2, #7
 800c22e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c230:	e140      	b.n	800c4b4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fa5c 	bl	800c6f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c238:	4b27      	ldr	r3, [pc, #156]	; (800c2d8 <tcp_process+0x5d0>)
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	f003 0320 	and.w	r3, r3, #32
 800c240:	2b00      	cmp	r3, #0
 800c242:	d071      	beq.n	800c328 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c244:	4b19      	ldr	r3, [pc, #100]	; (800c2ac <tcp_process+0x5a4>)
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	f003 0310 	and.w	r3, r3, #16
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d060      	beq.n	800c312 <tcp_process+0x60a>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c254:	4b16      	ldr	r3, [pc, #88]	; (800c2b0 <tcp_process+0x5a8>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d15a      	bne.n	800c312 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c260:	2b00      	cmp	r3, #0
 800c262:	d156      	bne.n	800c312 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	8b5b      	ldrh	r3, [r3, #26]
 800c268:	f043 0302 	orr.w	r3, r3, #2
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f7fe fdbe 	bl	800adf4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c278:	4b18      	ldr	r3, [pc, #96]	; (800c2dc <tcp_process+0x5d4>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	687a      	ldr	r2, [r7, #4]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d105      	bne.n	800c28e <tcp_process+0x586>
 800c282:	4b16      	ldr	r3, [pc, #88]	; (800c2dc <tcp_process+0x5d4>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	4a14      	ldr	r2, [pc, #80]	; (800c2dc <tcp_process+0x5d4>)
 800c28a:	6013      	str	r3, [r2, #0]
 800c28c:	e02e      	b.n	800c2ec <tcp_process+0x5e4>
 800c28e:	4b13      	ldr	r3, [pc, #76]	; (800c2dc <tcp_process+0x5d4>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	e027      	b.n	800c2e6 <tcp_process+0x5de>
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d11f      	bne.n	800c2e0 <tcp_process+0x5d8>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	68da      	ldr	r2, [r3, #12]
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	60da      	str	r2, [r3, #12]
 800c2a8:	e020      	b.n	800c2ec <tcp_process+0x5e4>
 800c2aa:	bf00      	nop
 800c2ac:	20010750 	.word	0x20010750
 800c2b0:	20010748 	.word	0x20010748
 800c2b4:	2001074e 	.word	0x2001074e
 800c2b8:	20010744 	.word	0x20010744
 800c2bc:	20010734 	.word	0x20010734
 800c2c0:	20015618 	.word	0x20015618
 800c2c4:	2001561c 	.word	0x2001561c
 800c2c8:	0801658c 	.word	0x0801658c
 800c2cc:	0801682c 	.word	0x0801682c
 800c2d0:	080165d8 	.word	0x080165d8
 800c2d4:	2001074c 	.word	0x2001074c
 800c2d8:	20010751 	.word	0x20010751
 800c2dc:	20018d3c 	.word	0x20018d3c
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	617b      	str	r3, [r7, #20]
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1d4      	bne.n	800c296 <tcp_process+0x58e>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	60da      	str	r2, [r3, #12]
 800c2f2:	4b77      	ldr	r3, [pc, #476]	; (800c4d0 <tcp_process+0x7c8>)
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	220a      	movs	r2, #10
 800c2fc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c2fe:	4b75      	ldr	r3, [pc, #468]	; (800c4d4 <tcp_process+0x7cc>)
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	60da      	str	r2, [r3, #12]
 800c306:	4a73      	ldr	r2, [pc, #460]	; (800c4d4 <tcp_process+0x7cc>)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6013      	str	r3, [r2, #0]
 800c30c:	f002 fcf8 	bl	800ed00 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c310:	e0d2      	b.n	800c4b8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	8b5b      	ldrh	r3, [r3, #26]
 800c316:	f043 0302 	orr.w	r3, r3, #2
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2208      	movs	r2, #8
 800c324:	751a      	strb	r2, [r3, #20]
      break;
 800c326:	e0c7      	b.n	800c4b8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c328:	4b6b      	ldr	r3, [pc, #428]	; (800c4d8 <tcp_process+0x7d0>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	f003 0310 	and.w	r3, r3, #16
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 80c1 	beq.w	800c4b8 <tcp_process+0x7b0>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c33a:	4b68      	ldr	r3, [pc, #416]	; (800c4dc <tcp_process+0x7d4>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	429a      	cmp	r2, r3
 800c340:	f040 80ba 	bne.w	800c4b8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f040 80b5 	bne.w	800c4b8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2206      	movs	r2, #6
 800c352:	751a      	strb	r2, [r3, #20]
      break;
 800c354:	e0b0      	b.n	800c4b8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 f9ca 	bl	800c6f0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c35c:	4b60      	ldr	r3, [pc, #384]	; (800c4e0 <tcp_process+0x7d8>)
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	f003 0320 	and.w	r3, r3, #32
 800c364:	2b00      	cmp	r3, #0
 800c366:	f000 80a9 	beq.w	800c4bc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	8b5b      	ldrh	r3, [r3, #26]
 800c36e:	f043 0302 	orr.w	r3, r3, #2
 800c372:	b29a      	uxth	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7fe fd3b 	bl	800adf4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c37e:	4b59      	ldr	r3, [pc, #356]	; (800c4e4 <tcp_process+0x7dc>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	429a      	cmp	r2, r3
 800c386:	d105      	bne.n	800c394 <tcp_process+0x68c>
 800c388:	4b56      	ldr	r3, [pc, #344]	; (800c4e4 <tcp_process+0x7dc>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	4a55      	ldr	r2, [pc, #340]	; (800c4e4 <tcp_process+0x7dc>)
 800c390:	6013      	str	r3, [r2, #0]
 800c392:	e013      	b.n	800c3bc <tcp_process+0x6b4>
 800c394:	4b53      	ldr	r3, [pc, #332]	; (800c4e4 <tcp_process+0x7dc>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	613b      	str	r3, [r7, #16]
 800c39a:	e00c      	b.n	800c3b6 <tcp_process+0x6ae>
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d104      	bne.n	800c3b0 <tcp_process+0x6a8>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	68da      	ldr	r2, [r3, #12]
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	60da      	str	r2, [r3, #12]
 800c3ae:	e005      	b.n	800c3bc <tcp_process+0x6b4>
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	613b      	str	r3, [r7, #16]
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1ef      	bne.n	800c39c <tcp_process+0x694>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	60da      	str	r2, [r3, #12]
 800c3c2:	4b43      	ldr	r3, [pc, #268]	; (800c4d0 <tcp_process+0x7c8>)
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	220a      	movs	r2, #10
 800c3cc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c3ce:	4b41      	ldr	r3, [pc, #260]	; (800c4d4 <tcp_process+0x7cc>)
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	60da      	str	r2, [r3, #12]
 800c3d6:	4a3f      	ldr	r2, [pc, #252]	; (800c4d4 <tcp_process+0x7cc>)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	f002 fc90 	bl	800ed00 <tcp_timer_needed>
      }
      break;
 800c3e0:	e06c      	b.n	800c4bc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f984 	bl	800c6f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c3e8:	4b3b      	ldr	r3, [pc, #236]	; (800c4d8 <tcp_process+0x7d0>)
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	f003 0310 	and.w	r3, r3, #16
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d065      	beq.n	800c4c0 <tcp_process+0x7b8>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c3f8:	4b38      	ldr	r3, [pc, #224]	; (800c4dc <tcp_process+0x7d4>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d15f      	bne.n	800c4c0 <tcp_process+0x7b8>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c404:	2b00      	cmp	r3, #0
 800c406:	d15b      	bne.n	800c4c0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7fe fcf3 	bl	800adf4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c40e:	4b35      	ldr	r3, [pc, #212]	; (800c4e4 <tcp_process+0x7dc>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	429a      	cmp	r2, r3
 800c416:	d105      	bne.n	800c424 <tcp_process+0x71c>
 800c418:	4b32      	ldr	r3, [pc, #200]	; (800c4e4 <tcp_process+0x7dc>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	68db      	ldr	r3, [r3, #12]
 800c41e:	4a31      	ldr	r2, [pc, #196]	; (800c4e4 <tcp_process+0x7dc>)
 800c420:	6013      	str	r3, [r2, #0]
 800c422:	e013      	b.n	800c44c <tcp_process+0x744>
 800c424:	4b2f      	ldr	r3, [pc, #188]	; (800c4e4 <tcp_process+0x7dc>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	60fb      	str	r3, [r7, #12]
 800c42a:	e00c      	b.n	800c446 <tcp_process+0x73e>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	429a      	cmp	r2, r3
 800c434:	d104      	bne.n	800c440 <tcp_process+0x738>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	68da      	ldr	r2, [r3, #12]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	60da      	str	r2, [r3, #12]
 800c43e:	e005      	b.n	800c44c <tcp_process+0x744>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	60fb      	str	r3, [r7, #12]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1ef      	bne.n	800c42c <tcp_process+0x724>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	60da      	str	r2, [r3, #12]
 800c452:	4b1f      	ldr	r3, [pc, #124]	; (800c4d0 <tcp_process+0x7c8>)
 800c454:	2201      	movs	r2, #1
 800c456:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	220a      	movs	r2, #10
 800c45c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c45e:	4b1d      	ldr	r3, [pc, #116]	; (800c4d4 <tcp_process+0x7cc>)
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	60da      	str	r2, [r3, #12]
 800c466:	4a1b      	ldr	r2, [pc, #108]	; (800c4d4 <tcp_process+0x7cc>)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6013      	str	r3, [r2, #0]
 800c46c:	f002 fc48 	bl	800ed00 <tcp_timer_needed>
      }
      break;
 800c470:	e026      	b.n	800c4c0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f93c 	bl	800c6f0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c478:	4b17      	ldr	r3, [pc, #92]	; (800c4d8 <tcp_process+0x7d0>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	f003 0310 	and.w	r3, r3, #16
 800c480:	2b00      	cmp	r3, #0
 800c482:	d01f      	beq.n	800c4c4 <tcp_process+0x7bc>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c488:	4b14      	ldr	r3, [pc, #80]	; (800c4dc <tcp_process+0x7d4>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d119      	bne.n	800c4c4 <tcp_process+0x7bc>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c494:	2b00      	cmp	r3, #0
 800c496:	d115      	bne.n	800c4c4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c498:	4b11      	ldr	r3, [pc, #68]	; (800c4e0 <tcp_process+0x7d8>)
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	f043 0310 	orr.w	r3, r3, #16
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	4b0f      	ldr	r3, [pc, #60]	; (800c4e0 <tcp_process+0x7d8>)
 800c4a4:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c4a6:	e00d      	b.n	800c4c4 <tcp_process+0x7bc>
    default:
      break;
 800c4a8:	bf00      	nop
 800c4aa:	e00c      	b.n	800c4c6 <tcp_process+0x7be>
      break;
 800c4ac:	bf00      	nop
 800c4ae:	e00a      	b.n	800c4c6 <tcp_process+0x7be>
      break;
 800c4b0:	bf00      	nop
 800c4b2:	e008      	b.n	800c4c6 <tcp_process+0x7be>
      break;
 800c4b4:	bf00      	nop
 800c4b6:	e006      	b.n	800c4c6 <tcp_process+0x7be>
      break;
 800c4b8:	bf00      	nop
 800c4ba:	e004      	b.n	800c4c6 <tcp_process+0x7be>
      break;
 800c4bc:	bf00      	nop
 800c4be:	e002      	b.n	800c4c6 <tcp_process+0x7be>
      break;
 800c4c0:	bf00      	nop
 800c4c2:	e000      	b.n	800c4c6 <tcp_process+0x7be>
      break;
 800c4c4:	bf00      	nop
  }
  return ERR_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3724      	adds	r7, #36	; 0x24
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd90      	pop	{r4, r7, pc}
 800c4d0:	20018d38 	.word	0x20018d38
 800c4d4:	20018d4c 	.word	0x20018d4c
 800c4d8:	20010750 	.word	0x20010750
 800c4dc:	20010748 	.word	0x20010748
 800c4e0:	20010751 	.word	0x20010751
 800c4e4:	20018d3c 	.word	0x20018d3c

0800c4e8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c4e8:	b590      	push	{r4, r7, lr}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d106      	bne.n	800c506 <tcp_oos_insert_segment+0x1e>
 800c4f8:	4b3b      	ldr	r3, [pc, #236]	; (800c5e8 <tcp_oos_insert_segment+0x100>)
 800c4fa:	f240 421f 	movw	r2, #1055	; 0x41f
 800c4fe:	493b      	ldr	r1, [pc, #236]	; (800c5ec <tcp_oos_insert_segment+0x104>)
 800c500:	483b      	ldr	r0, [pc, #236]	; (800c5f0 <tcp_oos_insert_segment+0x108>)
 800c502:	f008 faa7 	bl	8014a54 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	899b      	ldrh	r3, [r3, #12]
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	4618      	mov	r0, r3
 800c510:	f7fb fbf6 	bl	8007d00 <lwip_htons>
 800c514:	4603      	mov	r3, r0
 800c516:	b2db      	uxtb	r3, r3
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d028      	beq.n	800c572 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c520:	6838      	ldr	r0, [r7, #0]
 800c522:	f7fe fa65 	bl	800a9f0 <tcp_segs_free>
    next = NULL;
 800c526:	2300      	movs	r3, #0
 800c528:	603b      	str	r3, [r7, #0]
 800c52a:	e056      	b.n	800c5da <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	899b      	ldrh	r3, [r3, #12]
 800c532:	b29b      	uxth	r3, r3
 800c534:	4618      	mov	r0, r3
 800c536:	f7fb fbe3 	bl	8007d00 <lwip_htons>
 800c53a:	4603      	mov	r3, r0
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	f003 0301 	and.w	r3, r3, #1
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00d      	beq.n	800c562 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	68db      	ldr	r3, [r3, #12]
 800c54a:	899b      	ldrh	r3, [r3, #12]
 800c54c:	b29c      	uxth	r4, r3
 800c54e:	2001      	movs	r0, #1
 800c550:	f7fb fbd6 	bl	8007d00 <lwip_htons>
 800c554:	4603      	mov	r3, r0
 800c556:	461a      	mov	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	4322      	orrs	r2, r4
 800c55e:	b292      	uxth	r2, r2
 800c560:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c56c:	68f8      	ldr	r0, [r7, #12]
 800c56e:	f7fe fa54 	bl	800aa1a <tcp_seg_free>
    while (next &&
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d00e      	beq.n	800c596 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	891b      	ldrh	r3, [r3, #8]
 800c57c:	461a      	mov	r2, r3
 800c57e:	4b1d      	ldr	r3, [pc, #116]	; (800c5f4 <tcp_oos_insert_segment+0x10c>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	441a      	add	r2, r3
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	6839      	ldr	r1, [r7, #0]
 800c58c:	8909      	ldrh	r1, [r1, #8]
 800c58e:	440b      	add	r3, r1
 800c590:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c592:	2b00      	cmp	r3, #0
 800c594:	daca      	bge.n	800c52c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d01e      	beq.n	800c5da <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	891b      	ldrh	r3, [r3, #8]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	4b14      	ldr	r3, [pc, #80]	; (800c5f4 <tcp_oos_insert_segment+0x10c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	441a      	add	r2, r3
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dd12      	ble.n	800c5da <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	4b0d      	ldr	r3, [pc, #52]	; (800c5f4 <tcp_oos_insert_segment+0x10c>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	891b      	ldrh	r3, [r3, #8]
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	f7fc fe0b 	bl	80091f0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	683a      	ldr	r2, [r7, #0]
 800c5de:	601a      	str	r2, [r3, #0]
}
 800c5e0:	bf00      	nop
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd90      	pop	{r4, r7, pc}
 800c5e8:	0801658c 	.word	0x0801658c
 800c5ec:	0801684c 	.word	0x0801684c
 800c5f0:	080165d8 	.word	0x080165d8
 800c5f4:	20010744 	.word	0x20010744

0800c5f8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c5f8:	b5b0      	push	{r4, r5, r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
 800c604:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c606:	e03e      	b.n	800c686 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	4618      	mov	r0, r3
 800c618:	f7fc fffe 	bl	8009618 <pbuf_clen>
 800c61c:	4603      	mov	r3, r0
 800c61e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c626:	8a7a      	ldrh	r2, [r7, #18]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d906      	bls.n	800c63a <tcp_free_acked_segments+0x42>
 800c62c:	4b2a      	ldr	r3, [pc, #168]	; (800c6d8 <tcp_free_acked_segments+0xe0>)
 800c62e:	f240 4257 	movw	r2, #1111	; 0x457
 800c632:	492a      	ldr	r1, [pc, #168]	; (800c6dc <tcp_free_acked_segments+0xe4>)
 800c634:	482a      	ldr	r0, [pc, #168]	; (800c6e0 <tcp_free_acked_segments+0xe8>)
 800c636:	f008 fa0d 	bl	8014a54 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c640:	8a7b      	ldrh	r3, [r7, #18]
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	b29a      	uxth	r2, r3
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	891a      	ldrh	r2, [r3, #8]
 800c650:	4b24      	ldr	r3, [pc, #144]	; (800c6e4 <tcp_free_acked_segments+0xec>)
 800c652:	881b      	ldrh	r3, [r3, #0]
 800c654:	4413      	add	r3, r2
 800c656:	b29a      	uxth	r2, r3
 800c658:	4b22      	ldr	r3, [pc, #136]	; (800c6e4 <tcp_free_acked_segments+0xec>)
 800c65a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c65c:	6978      	ldr	r0, [r7, #20]
 800c65e:	f7fe f9dc 	bl	800aa1a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00c      	beq.n	800c686 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d109      	bne.n	800c686 <tcp_free_acked_segments+0x8e>
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d106      	bne.n	800c686 <tcp_free_acked_segments+0x8e>
 800c678:	4b17      	ldr	r3, [pc, #92]	; (800c6d8 <tcp_free_acked_segments+0xe0>)
 800c67a:	f240 4261 	movw	r2, #1121	; 0x461
 800c67e:	491a      	ldr	r1, [pc, #104]	; (800c6e8 <tcp_free_acked_segments+0xf0>)
 800c680:	4817      	ldr	r0, [pc, #92]	; (800c6e0 <tcp_free_acked_segments+0xe8>)
 800c682:	f008 f9e7 	bl	8014a54 <iprintf>
  while (seg_list != NULL &&
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d020      	beq.n	800c6ce <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	4618      	mov	r0, r3
 800c694:	f7fb fb49 	bl	8007d2a <lwip_htonl>
 800c698:	4604      	mov	r4, r0
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	891b      	ldrh	r3, [r3, #8]
 800c69e:	461d      	mov	r5, r3
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	899b      	ldrh	r3, [r3, #12]
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7fb fb29 	bl	8007d00 <lwip_htons>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	f003 0303 	and.w	r3, r3, #3
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <tcp_free_acked_segments+0xc6>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e000      	b.n	800c6c0 <tcp_free_acked_segments+0xc8>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	442b      	add	r3, r5
 800c6c2:	18e2      	adds	r2, r4, r3
 800c6c4:	4b09      	ldr	r3, [pc, #36]	; (800c6ec <tcp_free_acked_segments+0xf4>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dd9c      	ble.n	800c608 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c6ce:	68bb      	ldr	r3, [r7, #8]
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3718      	adds	r7, #24
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bdb0      	pop	{r4, r5, r7, pc}
 800c6d8:	0801658c 	.word	0x0801658c
 800c6dc:	08016874 	.word	0x08016874
 800c6e0:	080165d8 	.word	0x080165d8
 800c6e4:	2001074c 	.word	0x2001074c
 800c6e8:	0801689c 	.word	0x0801689c
 800c6ec:	20010748 	.word	0x20010748

0800c6f0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c6f0:	b5b0      	push	{r4, r5, r7, lr}
 800c6f2:	b094      	sub	sp, #80	; 0x50
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d106      	bne.n	800c710 <tcp_receive+0x20>
 800c702:	4ba6      	ldr	r3, [pc, #664]	; (800c99c <tcp_receive+0x2ac>)
 800c704:	f240 427b 	movw	r2, #1147	; 0x47b
 800c708:	49a5      	ldr	r1, [pc, #660]	; (800c9a0 <tcp_receive+0x2b0>)
 800c70a:	48a6      	ldr	r0, [pc, #664]	; (800c9a4 <tcp_receive+0x2b4>)
 800c70c:	f008 f9a2 	bl	8014a54 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	7d1b      	ldrb	r3, [r3, #20]
 800c714:	2b03      	cmp	r3, #3
 800c716:	d806      	bhi.n	800c726 <tcp_receive+0x36>
 800c718:	4ba0      	ldr	r3, [pc, #640]	; (800c99c <tcp_receive+0x2ac>)
 800c71a:	f240 427c 	movw	r2, #1148	; 0x47c
 800c71e:	49a2      	ldr	r1, [pc, #648]	; (800c9a8 <tcp_receive+0x2b8>)
 800c720:	48a0      	ldr	r0, [pc, #640]	; (800c9a4 <tcp_receive+0x2b4>)
 800c722:	f008 f997 	bl	8014a54 <iprintf>

  if (flags & TCP_ACK) {
 800c726:	4ba1      	ldr	r3, [pc, #644]	; (800c9ac <tcp_receive+0x2bc>)
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	f003 0310 	and.w	r3, r3, #16
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f000 8263 	beq.w	800cbfa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c73a:	461a      	mov	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c740:	4413      	add	r3, r2
 800c742:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c748:	4b99      	ldr	r3, [pc, #612]	; (800c9b0 <tcp_receive+0x2c0>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	1ad3      	subs	r3, r2, r3
 800c74e:	2b00      	cmp	r3, #0
 800c750:	db1b      	blt.n	800c78a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c756:	4b96      	ldr	r3, [pc, #600]	; (800c9b0 <tcp_receive+0x2c0>)
 800c758:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d106      	bne.n	800c76c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c762:	4b94      	ldr	r3, [pc, #592]	; (800c9b4 <tcp_receive+0x2c4>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	1ad3      	subs	r3, r2, r3
 800c768:	2b00      	cmp	r3, #0
 800c76a:	db0e      	blt.n	800c78a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c770:	4b90      	ldr	r3, [pc, #576]	; (800c9b4 <tcp_receive+0x2c4>)
 800c772:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c774:	429a      	cmp	r2, r3
 800c776:	d125      	bne.n	800c7c4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c778:	4b8f      	ldr	r3, [pc, #572]	; (800c9b8 <tcp_receive+0x2c8>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	89db      	ldrh	r3, [r3, #14]
 800c77e:	b29a      	uxth	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c786:	429a      	cmp	r2, r3
 800c788:	d91c      	bls.n	800c7c4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c78a:	4b8b      	ldr	r3, [pc, #556]	; (800c9b8 <tcp_receive+0x2c8>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	89db      	ldrh	r3, [r3, #14]
 800c790:	b29a      	uxth	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d205      	bcs.n	800c7b4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c7b4:	4b7e      	ldr	r3, [pc, #504]	; (800c9b0 <tcp_receive+0x2c0>)
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c7bc:	4b7d      	ldr	r3, [pc, #500]	; (800c9b4 <tcp_receive+0x2c4>)
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c7c4:	4b7b      	ldr	r3, [pc, #492]	; (800c9b4 <tcp_receive+0x2c4>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7cc:	1ad3      	subs	r3, r2, r3
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	dc58      	bgt.n	800c884 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c7d2:	4b7a      	ldr	r3, [pc, #488]	; (800c9bc <tcp_receive+0x2cc>)
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d14b      	bne.n	800c872 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c7e4:	4413      	add	r3, r2
 800c7e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d142      	bne.n	800c872 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	db3d      	blt.n	800c872 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c7fa:	4b6e      	ldr	r3, [pc, #440]	; (800c9b4 <tcp_receive+0x2c4>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d137      	bne.n	800c872 <tcp_receive+0x182>
              found_dupack = 1;
 800c802:	2301      	movs	r3, #1
 800c804:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c80c:	2bff      	cmp	r3, #255	; 0xff
 800c80e:	d007      	beq.n	800c820 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c816:	3301      	adds	r3, #1
 800c818:	b2da      	uxtb	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c826:	2b03      	cmp	r3, #3
 800c828:	d91b      	bls.n	800c862 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c834:	4413      	add	r3, r2
 800c836:	b29a      	uxth	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c83e:	429a      	cmp	r2, r3
 800c840:	d30a      	bcc.n	800c858 <tcp_receive+0x168>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c84c:	4413      	add	r3, r2
 800c84e:	b29a      	uxth	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c856:	e004      	b.n	800c862 <tcp_receive+0x172>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c85e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d902      	bls.n	800c872 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f001 fee9 	bl	800e644 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c874:	2b00      	cmp	r3, #0
 800c876:	f040 8160 	bne.w	800cb3a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c882:	e15a      	b.n	800cb3a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c884:	4b4b      	ldr	r3, [pc, #300]	; (800c9b4 <tcp_receive+0x2c4>)
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c88c:	1ad3      	subs	r3, r2, r3
 800c88e:	3b01      	subs	r3, #1
 800c890:	2b00      	cmp	r3, #0
 800c892:	f2c0 814d 	blt.w	800cb30 <tcp_receive+0x440>
 800c896:	4b47      	ldr	r3, [pc, #284]	; (800c9b4 <tcp_receive+0x2c4>)
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f300 8145 	bgt.w	800cb30 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	8b5b      	ldrh	r3, [r3, #26]
 800c8aa:	f003 0304 	and.w	r3, r3, #4
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d010      	beq.n	800c8d4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	8b5b      	ldrh	r3, [r3, #26]
 800c8b6:	f023 0304 	bic.w	r3, r3, #4
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c8e2:	10db      	asrs	r3, r3, #3
 800c8e4:	b21b      	sxth	r3, r3
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	4413      	add	r3, r2
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	b21a      	sxth	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c8fc:	4b2d      	ldr	r3, [pc, #180]	; (800c9b4 <tcp_receive+0x2c4>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	b29a      	uxth	r2, r3
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c906:	b29b      	uxth	r3, r3
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c914:	4b27      	ldr	r3, [pc, #156]	; (800c9b4 <tcp_receive+0x2c4>)
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	7d1b      	ldrb	r3, [r3, #20]
 800c920:	2b03      	cmp	r3, #3
 800c922:	f240 8096 	bls.w	800ca52 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c932:	429a      	cmp	r2, r3
 800c934:	d244      	bcs.n	800c9c0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	8b5b      	ldrh	r3, [r3, #26]
 800c93a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d001      	beq.n	800c946 <tcp_receive+0x256>
 800c942:	2301      	movs	r3, #1
 800c944:	e000      	b.n	800c948 <tcp_receive+0x258>
 800c946:	2302      	movs	r3, #2
 800c948:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c94c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c950:	b29a      	uxth	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c956:	fb12 f303 	smulbb	r3, r2, r3
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c95e:	4293      	cmp	r3, r2
 800c960:	bf28      	it	cs
 800c962:	4613      	movcs	r3, r2
 800c964:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c96c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c96e:	4413      	add	r3, r2
 800c970:	b29a      	uxth	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c978:	429a      	cmp	r2, r3
 800c97a:	d309      	bcc.n	800c990 <tcp_receive+0x2a0>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c982:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c984:	4413      	add	r3, r2
 800c986:	b29a      	uxth	r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c98e:	e060      	b.n	800ca52 <tcp_receive+0x362>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c996:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c99a:	e05a      	b.n	800ca52 <tcp_receive+0x362>
 800c99c:	0801658c 	.word	0x0801658c
 800c9a0:	080168bc 	.word	0x080168bc
 800c9a4:	080165d8 	.word	0x080165d8
 800c9a8:	080168d8 	.word	0x080168d8
 800c9ac:	20010750 	.word	0x20010750
 800c9b0:	20010744 	.word	0x20010744
 800c9b4:	20010748 	.word	0x20010748
 800c9b8:	20010734 	.word	0x20010734
 800c9bc:	2001074e 	.word	0x2001074e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c9c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9c8:	4413      	add	r3, r2
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d309      	bcc.n	800c9ea <tcp_receive+0x2fa>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c9dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9de:	4413      	add	r3, r2
 800c9e0:	b29a      	uxth	r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c9e8:	e004      	b.n	800c9f4 <tcp_receive+0x304>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d326      	bcc.n	800ca52 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	b29a      	uxth	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca24:	4413      	add	r3, r2
 800ca26:	b29a      	uxth	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d30a      	bcc.n	800ca48 <tcp_receive+0x358>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca3c:	4413      	add	r3, r2
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ca46:	e004      	b.n	800ca52 <tcp_receive+0x362>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca4e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca5a:	4a98      	ldr	r2, [pc, #608]	; (800ccbc <tcp_receive+0x5cc>)
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7ff fdcb 	bl	800c5f8 <tcp_free_acked_segments>
 800ca62:	4602      	mov	r2, r0
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca70:	4a93      	ldr	r2, [pc, #588]	; (800ccc0 <tcp_receive+0x5d0>)
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7ff fdc0 	bl	800c5f8 <tcp_free_acked_segments>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d104      	bne.n	800ca90 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca8c:	861a      	strh	r2, [r3, #48]	; 0x30
 800ca8e:	e002      	b.n	800ca96 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d103      	bne.n	800caac <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800cab2:	4b84      	ldr	r3, [pc, #528]	; (800ccc4 <tcp_receive+0x5d4>)
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	4413      	add	r3, r2
 800cab8:	b29a      	uxth	r2, r3
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	8b5b      	ldrh	r3, [r3, #26]
 800cac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d035      	beq.n	800cb38 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d118      	bne.n	800cb06 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00c      	beq.n	800caf6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fb f91e 	bl	8007d2a <lwip_htonl>
 800caee:	4603      	mov	r3, r0
 800caf0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	dc20      	bgt.n	800cb38 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	8b5b      	ldrh	r3, [r3, #26]
 800cafa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cb04:	e018      	b.n	800cb38 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fb f909 	bl	8007d2a <lwip_htonl>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	1ae3      	subs	r3, r4, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	dc0b      	bgt.n	800cb38 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	8b5b      	ldrh	r3, [r3, #26]
 800cb24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cb2e:	e003      	b.n	800cb38 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f001 ff75 	bl	800ea20 <tcp_send_empty_ack>
 800cb36:	e000      	b.n	800cb3a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cb38:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d05b      	beq.n	800cbfa <tcp_receive+0x50a>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb46:	4b60      	ldr	r3, [pc, #384]	; (800ccc8 <tcp_receive+0x5d8>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	da54      	bge.n	800cbfa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cb50:	4b5e      	ldr	r3, [pc, #376]	; (800cccc <tcp_receive+0x5dc>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800cb64:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cb6e:	10db      	asrs	r3, r3, #3
 800cb70:	b21b      	sxth	r3, r3
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cb88:	4413      	add	r3, r2
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	b21a      	sxth	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cb92:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	da05      	bge.n	800cba6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800cb9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cb9e:	425b      	negs	r3, r3
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800cba6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cbb0:	109b      	asrs	r3, r3, #2
 800cbb2:	b21b      	sxth	r3, r3
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800cbca:	4413      	add	r3, r2
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	b21a      	sxth	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cbda:	10db      	asrs	r3, r3, #3
 800cbdc:	b21b      	sxth	r3, r3
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	4413      	add	r3, r2
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	b21a      	sxth	r2, r3
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cbfa:	4b35      	ldr	r3, [pc, #212]	; (800ccd0 <tcp_receive+0x5e0>)
 800cbfc:	881b      	ldrh	r3, [r3, #0]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f000 84e1 	beq.w	800d5c6 <tcp_receive+0xed6>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	7d1b      	ldrb	r3, [r3, #20]
 800cc08:	2b06      	cmp	r3, #6
 800cc0a:	f200 84dc 	bhi.w	800d5c6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc12:	4b30      	ldr	r3, [pc, #192]	; (800ccd4 <tcp_receive+0x5e4>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	f2c0 808e 	blt.w	800cd3c <tcp_receive+0x64c>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc24:	4b2a      	ldr	r3, [pc, #168]	; (800ccd0 <tcp_receive+0x5e0>)
 800cc26:	881b      	ldrh	r3, [r3, #0]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4b2a      	ldr	r3, [pc, #168]	; (800ccd4 <tcp_receive+0x5e4>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	440b      	add	r3, r1
 800cc30:	1ad3      	subs	r3, r2, r3
 800cc32:	3301      	adds	r3, #1
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f300 8081 	bgt.w	800cd3c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cc3a:	4b27      	ldr	r3, [pc, #156]	; (800ccd8 <tcp_receive+0x5e8>)
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc44:	4b23      	ldr	r3, [pc, #140]	; (800ccd4 <tcp_receive+0x5e4>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cc4c:	4b22      	ldr	r3, [pc, #136]	; (800ccd8 <tcp_receive+0x5e8>)
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d106      	bne.n	800cc62 <tcp_receive+0x572>
 800cc54:	4b21      	ldr	r3, [pc, #132]	; (800ccdc <tcp_receive+0x5ec>)
 800cc56:	f240 5294 	movw	r2, #1428	; 0x594
 800cc5a:	4921      	ldr	r1, [pc, #132]	; (800cce0 <tcp_receive+0x5f0>)
 800cc5c:	4821      	ldr	r0, [pc, #132]	; (800cce4 <tcp_receive+0x5f4>)
 800cc5e:	f007 fef9 	bl	8014a54 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d906      	bls.n	800cc7a <tcp_receive+0x58a>
 800cc6c:	4b1b      	ldr	r3, [pc, #108]	; (800ccdc <tcp_receive+0x5ec>)
 800cc6e:	f240 5295 	movw	r2, #1429	; 0x595
 800cc72:	491d      	ldr	r1, [pc, #116]	; (800cce8 <tcp_receive+0x5f8>)
 800cc74:	481b      	ldr	r0, [pc, #108]	; (800cce4 <tcp_receive+0x5f4>)
 800cc76:	f007 feed 	bl	8014a54 <iprintf>
      off = (u16_t)off32;
 800cc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cc80:	4b15      	ldr	r3, [pc, #84]	; (800ccd8 <tcp_receive+0x5e8>)
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	891b      	ldrh	r3, [r3, #8]
 800cc86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d906      	bls.n	800cc9c <tcp_receive+0x5ac>
 800cc8e:	4b13      	ldr	r3, [pc, #76]	; (800ccdc <tcp_receive+0x5ec>)
 800cc90:	f240 5297 	movw	r2, #1431	; 0x597
 800cc94:	4915      	ldr	r1, [pc, #84]	; (800ccec <tcp_receive+0x5fc>)
 800cc96:	4813      	ldr	r0, [pc, #76]	; (800cce4 <tcp_receive+0x5f4>)
 800cc98:	f007 fedc 	bl	8014a54 <iprintf>
      inseg.len -= off;
 800cc9c:	4b0e      	ldr	r3, [pc, #56]	; (800ccd8 <tcp_receive+0x5e8>)
 800cc9e:	891a      	ldrh	r2, [r3, #8]
 800cca0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	4b0b      	ldr	r3, [pc, #44]	; (800ccd8 <tcp_receive+0x5e8>)
 800ccaa:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ccac:	4b0a      	ldr	r3, [pc, #40]	; (800ccd8 <tcp_receive+0x5e8>)
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	891a      	ldrh	r2, [r3, #8]
 800ccb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ccba:	e029      	b.n	800cd10 <tcp_receive+0x620>
 800ccbc:	080168f4 	.word	0x080168f4
 800ccc0:	080168fc 	.word	0x080168fc
 800ccc4:	2001074c 	.word	0x2001074c
 800ccc8:	20010748 	.word	0x20010748
 800cccc:	20018d40 	.word	0x20018d40
 800ccd0:	2001074e 	.word	0x2001074e
 800ccd4:	20010744 	.word	0x20010744
 800ccd8:	20010724 	.word	0x20010724
 800ccdc:	0801658c 	.word	0x0801658c
 800cce0:	08016904 	.word	0x08016904
 800cce4:	080165d8 	.word	0x080165d8
 800cce8:	08016914 	.word	0x08016914
 800ccec:	08016924 	.word	0x08016924
        off -= p->len;
 800ccf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccf2:	895b      	ldrh	r3, [r3, #10]
 800ccf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ccfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd02:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800cd04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd06:	2200      	movs	r2, #0
 800cd08:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800cd0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800cd10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd12:	895b      	ldrh	r3, [r3, #10]
 800cd14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d8e9      	bhi.n	800ccf0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cd1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800cd20:	4619      	mov	r1, r3
 800cd22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cd24:	f7fc fb64 	bl	80093f0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd2c:	4a91      	ldr	r2, [pc, #580]	; (800cf74 <tcp_receive+0x884>)
 800cd2e:	6013      	str	r3, [r2, #0]
 800cd30:	4b91      	ldr	r3, [pc, #580]	; (800cf78 <tcp_receive+0x888>)
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	4a8f      	ldr	r2, [pc, #572]	; (800cf74 <tcp_receive+0x884>)
 800cd36:	6812      	ldr	r2, [r2, #0]
 800cd38:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cd3a:	e00d      	b.n	800cd58 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cd3c:	4b8d      	ldr	r3, [pc, #564]	; (800cf74 <tcp_receive+0x884>)
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd44:	1ad3      	subs	r3, r2, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	da06      	bge.n	800cd58 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	8b5b      	ldrh	r3, [r3, #26]
 800cd4e:	f043 0302 	orr.w	r3, r3, #2
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cd58:	4b86      	ldr	r3, [pc, #536]	; (800cf74 <tcp_receive+0x884>)
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f2c0 842a 	blt.w	800d5bc <tcp_receive+0xecc>
 800cd68:	4b82      	ldr	r3, [pc, #520]	; (800cf74 <tcp_receive+0x884>)
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd70:	6879      	ldr	r1, [r7, #4]
 800cd72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd74:	440b      	add	r3, r1
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	3301      	adds	r3, #1
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f300 841e 	bgt.w	800d5bc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cd84:	4b7b      	ldr	r3, [pc, #492]	; (800cf74 <tcp_receive+0x884>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	f040 829a 	bne.w	800d2c2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cd8e:	4b7a      	ldr	r3, [pc, #488]	; (800cf78 <tcp_receive+0x888>)
 800cd90:	891c      	ldrh	r4, [r3, #8]
 800cd92:	4b79      	ldr	r3, [pc, #484]	; (800cf78 <tcp_receive+0x888>)
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	899b      	ldrh	r3, [r3, #12]
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fa ffb0 	bl	8007d00 <lwip_htons>
 800cda0:	4603      	mov	r3, r0
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	f003 0303 	and.w	r3, r3, #3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <tcp_receive+0x6c0>
 800cdac:	2301      	movs	r3, #1
 800cdae:	e000      	b.n	800cdb2 <tcp_receive+0x6c2>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4423      	add	r3, r4
 800cdb4:	b29a      	uxth	r2, r3
 800cdb6:	4b71      	ldr	r3, [pc, #452]	; (800cf7c <tcp_receive+0x88c>)
 800cdb8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cdbe:	4b6f      	ldr	r3, [pc, #444]	; (800cf7c <tcp_receive+0x88c>)
 800cdc0:	881b      	ldrh	r3, [r3, #0]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d275      	bcs.n	800ceb2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cdc6:	4b6c      	ldr	r3, [pc, #432]	; (800cf78 <tcp_receive+0x888>)
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	899b      	ldrh	r3, [r3, #12]
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fa ff96 	bl	8007d00 <lwip_htons>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	f003 0301 	and.w	r3, r3, #1
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d01f      	beq.n	800ce20 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cde0:	4b65      	ldr	r3, [pc, #404]	; (800cf78 <tcp_receive+0x888>)
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	899b      	ldrh	r3, [r3, #12]
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	b21b      	sxth	r3, r3
 800cdea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cdee:	b21c      	sxth	r4, r3
 800cdf0:	4b61      	ldr	r3, [pc, #388]	; (800cf78 <tcp_receive+0x888>)
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	899b      	ldrh	r3, [r3, #12]
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fa ff81 	bl	8007d00 <lwip_htons>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	b2db      	uxtb	r3, r3
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fa ff78 	bl	8007d00 <lwip_htons>
 800ce10:	4603      	mov	r3, r0
 800ce12:	b21b      	sxth	r3, r3
 800ce14:	4323      	orrs	r3, r4
 800ce16:	b21a      	sxth	r2, r3
 800ce18:	4b57      	ldr	r3, [pc, #348]	; (800cf78 <tcp_receive+0x888>)
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	b292      	uxth	r2, r2
 800ce1e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce24:	4b54      	ldr	r3, [pc, #336]	; (800cf78 <tcp_receive+0x888>)
 800ce26:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ce28:	4b53      	ldr	r3, [pc, #332]	; (800cf78 <tcp_receive+0x888>)
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	899b      	ldrh	r3, [r3, #12]
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fa ff65 	bl	8007d00 <lwip_htons>
 800ce36:	4603      	mov	r3, r0
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	f003 0302 	and.w	r3, r3, #2
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d005      	beq.n	800ce4e <tcp_receive+0x75e>
            inseg.len -= 1;
 800ce42:	4b4d      	ldr	r3, [pc, #308]	; (800cf78 <tcp_receive+0x888>)
 800ce44:	891b      	ldrh	r3, [r3, #8]
 800ce46:	3b01      	subs	r3, #1
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	4b4b      	ldr	r3, [pc, #300]	; (800cf78 <tcp_receive+0x888>)
 800ce4c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ce4e:	4b4a      	ldr	r3, [pc, #296]	; (800cf78 <tcp_receive+0x888>)
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	4a49      	ldr	r2, [pc, #292]	; (800cf78 <tcp_receive+0x888>)
 800ce54:	8912      	ldrh	r2, [r2, #8]
 800ce56:	4611      	mov	r1, r2
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fc f9c9 	bl	80091f0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ce5e:	4b46      	ldr	r3, [pc, #280]	; (800cf78 <tcp_receive+0x888>)
 800ce60:	891c      	ldrh	r4, [r3, #8]
 800ce62:	4b45      	ldr	r3, [pc, #276]	; (800cf78 <tcp_receive+0x888>)
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	899b      	ldrh	r3, [r3, #12]
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fa ff48 	bl	8007d00 <lwip_htons>
 800ce70:	4603      	mov	r3, r0
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	f003 0303 	and.w	r3, r3, #3
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d001      	beq.n	800ce80 <tcp_receive+0x790>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e000      	b.n	800ce82 <tcp_receive+0x792>
 800ce80:	2300      	movs	r3, #0
 800ce82:	4423      	add	r3, r4
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	4b3d      	ldr	r3, [pc, #244]	; (800cf7c <tcp_receive+0x88c>)
 800ce88:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ce8a:	4b3c      	ldr	r3, [pc, #240]	; (800cf7c <tcp_receive+0x88c>)
 800ce8c:	881b      	ldrh	r3, [r3, #0]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	4b38      	ldr	r3, [pc, #224]	; (800cf74 <tcp_receive+0x884>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	441a      	add	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce9a:	6879      	ldr	r1, [r7, #4]
 800ce9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ce9e:	440b      	add	r3, r1
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d006      	beq.n	800ceb2 <tcp_receive+0x7c2>
 800cea4:	4b36      	ldr	r3, [pc, #216]	; (800cf80 <tcp_receive+0x890>)
 800cea6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ceaa:	4936      	ldr	r1, [pc, #216]	; (800cf84 <tcp_receive+0x894>)
 800ceac:	4836      	ldr	r0, [pc, #216]	; (800cf88 <tcp_receive+0x898>)
 800ceae:	f007 fdd1 	bl	8014a54 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f000 80e7 	beq.w	800d08a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cebc:	4b2e      	ldr	r3, [pc, #184]	; (800cf78 <tcp_receive+0x888>)
 800cebe:	68db      	ldr	r3, [r3, #12]
 800cec0:	899b      	ldrh	r3, [r3, #12]
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fa ff1b 	bl	8007d00 <lwip_htons>
 800ceca:	4603      	mov	r3, r0
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	f003 0301 	and.w	r3, r3, #1
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d010      	beq.n	800cef8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ced6:	e00a      	b.n	800ceee <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cedc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f7fd fd96 	bl	800aa1a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1f0      	bne.n	800ced8 <tcp_receive+0x7e8>
 800cef6:	e0c8      	b.n	800d08a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cefc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cefe:	e052      	b.n	800cfa6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cf00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	899b      	ldrh	r3, [r3, #12]
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fa fef9 	bl	8007d00 <lwip_htons>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	f003 0301 	and.w	r3, r3, #1
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d03d      	beq.n	800cf96 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cf1a:	4b17      	ldr	r3, [pc, #92]	; (800cf78 <tcp_receive+0x888>)
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	899b      	ldrh	r3, [r3, #12]
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fa feec 	bl	8007d00 <lwip_htons>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d130      	bne.n	800cf96 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cf34:	4b10      	ldr	r3, [pc, #64]	; (800cf78 <tcp_receive+0x888>)
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	899b      	ldrh	r3, [r3, #12]
 800cf3a:	b29c      	uxth	r4, r3
 800cf3c:	2001      	movs	r0, #1
 800cf3e:	f7fa fedf 	bl	8007d00 <lwip_htons>
 800cf42:	4603      	mov	r3, r0
 800cf44:	461a      	mov	r2, r3
 800cf46:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <tcp_receive+0x888>)
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	4322      	orrs	r2, r4
 800cf4c:	b292      	uxth	r2, r2
 800cf4e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cf50:	4b09      	ldr	r3, [pc, #36]	; (800cf78 <tcp_receive+0x888>)
 800cf52:	891c      	ldrh	r4, [r3, #8]
 800cf54:	4b08      	ldr	r3, [pc, #32]	; (800cf78 <tcp_receive+0x888>)
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	899b      	ldrh	r3, [r3, #12]
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7fa fecf 	bl	8007d00 <lwip_htons>
 800cf62:	4603      	mov	r3, r0
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	f003 0303 	and.w	r3, r3, #3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00e      	beq.n	800cf8c <tcp_receive+0x89c>
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e00d      	b.n	800cf8e <tcp_receive+0x89e>
 800cf72:	bf00      	nop
 800cf74:	20010744 	.word	0x20010744
 800cf78:	20010724 	.word	0x20010724
 800cf7c:	2001074e 	.word	0x2001074e
 800cf80:	0801658c 	.word	0x0801658c
 800cf84:	08016934 	.word	0x08016934
 800cf88:	080165d8 	.word	0x080165d8
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	4423      	add	r3, r4
 800cf90:	b29a      	uxth	r2, r3
 800cf92:	4b98      	ldr	r3, [pc, #608]	; (800d1f4 <tcp_receive+0xb04>)
 800cf94:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf98:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cf9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800cfa0:	6938      	ldr	r0, [r7, #16]
 800cfa2:	f7fd fd3a 	bl	800aa1a <tcp_seg_free>
            while (next &&
 800cfa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00e      	beq.n	800cfca <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cfac:	4b91      	ldr	r3, [pc, #580]	; (800d1f4 <tcp_receive+0xb04>)
 800cfae:	881b      	ldrh	r3, [r3, #0]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	4b91      	ldr	r3, [pc, #580]	; (800d1f8 <tcp_receive+0xb08>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	441a      	add	r2, r3
 800cfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cfc0:	8909      	ldrh	r1, [r1, #8]
 800cfc2:	440b      	add	r3, r1
 800cfc4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	da9a      	bge.n	800cf00 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d059      	beq.n	800d084 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800cfd0:	4b88      	ldr	r3, [pc, #544]	; (800d1f4 <tcp_receive+0xb04>)
 800cfd2:	881b      	ldrh	r3, [r3, #0]
 800cfd4:	461a      	mov	r2, r3
 800cfd6:	4b88      	ldr	r3, [pc, #544]	; (800d1f8 <tcp_receive+0xb08>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	441a      	add	r2, r3
 800cfdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dd4d      	ble.n	800d084 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	4b81      	ldr	r3, [pc, #516]	; (800d1f8 <tcp_receive+0xb08>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	4b80      	ldr	r3, [pc, #512]	; (800d1fc <tcp_receive+0xb0c>)
 800cffc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cffe:	4b7f      	ldr	r3, [pc, #508]	; (800d1fc <tcp_receive+0xb0c>)
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	899b      	ldrh	r3, [r3, #12]
 800d004:	b29b      	uxth	r3, r3
 800d006:	4618      	mov	r0, r3
 800d008:	f7fa fe7a 	bl	8007d00 <lwip_htons>
 800d00c:	4603      	mov	r3, r0
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	f003 0302 	and.w	r3, r3, #2
 800d014:	2b00      	cmp	r3, #0
 800d016:	d005      	beq.n	800d024 <tcp_receive+0x934>
                inseg.len -= 1;
 800d018:	4b78      	ldr	r3, [pc, #480]	; (800d1fc <tcp_receive+0xb0c>)
 800d01a:	891b      	ldrh	r3, [r3, #8]
 800d01c:	3b01      	subs	r3, #1
 800d01e:	b29a      	uxth	r2, r3
 800d020:	4b76      	ldr	r3, [pc, #472]	; (800d1fc <tcp_receive+0xb0c>)
 800d022:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d024:	4b75      	ldr	r3, [pc, #468]	; (800d1fc <tcp_receive+0xb0c>)
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	4a74      	ldr	r2, [pc, #464]	; (800d1fc <tcp_receive+0xb0c>)
 800d02a:	8912      	ldrh	r2, [r2, #8]
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fc f8de 	bl	80091f0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d034:	4b71      	ldr	r3, [pc, #452]	; (800d1fc <tcp_receive+0xb0c>)
 800d036:	891c      	ldrh	r4, [r3, #8]
 800d038:	4b70      	ldr	r3, [pc, #448]	; (800d1fc <tcp_receive+0xb0c>)
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	899b      	ldrh	r3, [r3, #12]
 800d03e:	b29b      	uxth	r3, r3
 800d040:	4618      	mov	r0, r3
 800d042:	f7fa fe5d 	bl	8007d00 <lwip_htons>
 800d046:	4603      	mov	r3, r0
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	f003 0303 	and.w	r3, r3, #3
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d001      	beq.n	800d056 <tcp_receive+0x966>
 800d052:	2301      	movs	r3, #1
 800d054:	e000      	b.n	800d058 <tcp_receive+0x968>
 800d056:	2300      	movs	r3, #0
 800d058:	4423      	add	r3, r4
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	4b65      	ldr	r3, [pc, #404]	; (800d1f4 <tcp_receive+0xb04>)
 800d05e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d060:	4b64      	ldr	r3, [pc, #400]	; (800d1f4 <tcp_receive+0xb04>)
 800d062:	881b      	ldrh	r3, [r3, #0]
 800d064:	461a      	mov	r2, r3
 800d066:	4b64      	ldr	r3, [pc, #400]	; (800d1f8 <tcp_receive+0xb08>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	441a      	add	r2, r3
 800d06c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	429a      	cmp	r2, r3
 800d074:	d006      	beq.n	800d084 <tcp_receive+0x994>
 800d076:	4b62      	ldr	r3, [pc, #392]	; (800d200 <tcp_receive+0xb10>)
 800d078:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800d07c:	4961      	ldr	r1, [pc, #388]	; (800d204 <tcp_receive+0xb14>)
 800d07e:	4862      	ldr	r0, [pc, #392]	; (800d208 <tcp_receive+0xb18>)
 800d080:	f007 fce8 	bl	8014a54 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d088:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d08a:	4b5a      	ldr	r3, [pc, #360]	; (800d1f4 <tcp_receive+0xb04>)
 800d08c:	881b      	ldrh	r3, [r3, #0]
 800d08e:	461a      	mov	r2, r3
 800d090:	4b59      	ldr	r3, [pc, #356]	; (800d1f8 <tcp_receive+0xb08>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	441a      	add	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d09e:	4b55      	ldr	r3, [pc, #340]	; (800d1f4 <tcp_receive+0xb04>)
 800d0a0:	881b      	ldrh	r3, [r3, #0]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d206      	bcs.n	800d0b4 <tcp_receive+0x9c4>
 800d0a6:	4b56      	ldr	r3, [pc, #344]	; (800d200 <tcp_receive+0xb10>)
 800d0a8:	f240 6207 	movw	r2, #1543	; 0x607
 800d0ac:	4957      	ldr	r1, [pc, #348]	; (800d20c <tcp_receive+0xb1c>)
 800d0ae:	4856      	ldr	r0, [pc, #344]	; (800d208 <tcp_receive+0xb18>)
 800d0b0:	f007 fcd0 	bl	8014a54 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d0b8:	4b4e      	ldr	r3, [pc, #312]	; (800d1f4 <tcp_receive+0xb04>)
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	1ad3      	subs	r3, r2, r3
 800d0be:	b29a      	uxth	r2, r3
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7fc ffc9 	bl	800a05c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d0ca:	4b4c      	ldr	r3, [pc, #304]	; (800d1fc <tcp_receive+0xb0c>)
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	891b      	ldrh	r3, [r3, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d006      	beq.n	800d0e2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d0d4:	4b49      	ldr	r3, [pc, #292]	; (800d1fc <tcp_receive+0xb0c>)
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	4a4d      	ldr	r2, [pc, #308]	; (800d210 <tcp_receive+0xb20>)
 800d0da:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d0dc:	4b47      	ldr	r3, [pc, #284]	; (800d1fc <tcp_receive+0xb0c>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d0e2:	4b46      	ldr	r3, [pc, #280]	; (800d1fc <tcp_receive+0xb0c>)
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	899b      	ldrh	r3, [r3, #12]
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fa fe08 	bl	8007d00 <lwip_htons>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	f003 0301 	and.w	r3, r3, #1
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 80b8 	beq.w	800d26e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d0fe:	4b45      	ldr	r3, [pc, #276]	; (800d214 <tcp_receive+0xb24>)
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	f043 0320 	orr.w	r3, r3, #32
 800d106:	b2da      	uxtb	r2, r3
 800d108:	4b42      	ldr	r3, [pc, #264]	; (800d214 <tcp_receive+0xb24>)
 800d10a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d10c:	e0af      	b.n	800d26e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d112:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	4a36      	ldr	r2, [pc, #216]	; (800d1f8 <tcp_receive+0xb08>)
 800d11e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	891b      	ldrh	r3, [r3, #8]
 800d124:	461c      	mov	r4, r3
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	899b      	ldrh	r3, [r3, #12]
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fa fde6 	bl	8007d00 <lwip_htons>
 800d134:	4603      	mov	r3, r0
 800d136:	b2db      	uxtb	r3, r3
 800d138:	f003 0303 	and.w	r3, r3, #3
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <tcp_receive+0xa54>
 800d140:	2301      	movs	r3, #1
 800d142:	e000      	b.n	800d146 <tcp_receive+0xa56>
 800d144:	2300      	movs	r3, #0
 800d146:	191a      	adds	r2, r3, r4
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14c:	441a      	add	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d156:	461c      	mov	r4, r3
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	891b      	ldrh	r3, [r3, #8]
 800d15c:	461d      	mov	r5, r3
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	899b      	ldrh	r3, [r3, #12]
 800d164:	b29b      	uxth	r3, r3
 800d166:	4618      	mov	r0, r3
 800d168:	f7fa fdca 	bl	8007d00 <lwip_htons>
 800d16c:	4603      	mov	r3, r0
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	f003 0303 	and.w	r3, r3, #3
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <tcp_receive+0xa8c>
 800d178:	2301      	movs	r3, #1
 800d17a:	e000      	b.n	800d17e <tcp_receive+0xa8e>
 800d17c:	2300      	movs	r3, #0
 800d17e:	442b      	add	r3, r5
 800d180:	429c      	cmp	r4, r3
 800d182:	d206      	bcs.n	800d192 <tcp_receive+0xaa2>
 800d184:	4b1e      	ldr	r3, [pc, #120]	; (800d200 <tcp_receive+0xb10>)
 800d186:	f240 622b 	movw	r2, #1579	; 0x62b
 800d18a:	4923      	ldr	r1, [pc, #140]	; (800d218 <tcp_receive+0xb28>)
 800d18c:	481e      	ldr	r0, [pc, #120]	; (800d208 <tcp_receive+0xb18>)
 800d18e:	f007 fc61 	bl	8014a54 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	891b      	ldrh	r3, [r3, #8]
 800d196:	461c      	mov	r4, r3
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	899b      	ldrh	r3, [r3, #12]
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fa fdad 	bl	8007d00 <lwip_htons>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	f003 0303 	and.w	r3, r3, #3
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d001      	beq.n	800d1b6 <tcp_receive+0xac6>
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	e000      	b.n	800d1b8 <tcp_receive+0xac8>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	1919      	adds	r1, r3, r4
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d1be:	b28b      	uxth	r3, r1
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7fc ff47 	bl	800a05c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	891b      	ldrh	r3, [r3, #8]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d028      	beq.n	800d22a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d1d8:	4b0d      	ldr	r3, [pc, #52]	; (800d210 <tcp_receive+0xb20>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d01d      	beq.n	800d21c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d1e0:	4b0b      	ldr	r3, [pc, #44]	; (800d210 <tcp_receive+0xb20>)
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	4610      	mov	r0, r2
 800d1ec:	f7fc fa54 	bl	8009698 <pbuf_cat>
 800d1f0:	e018      	b.n	800d224 <tcp_receive+0xb34>
 800d1f2:	bf00      	nop
 800d1f4:	2001074e 	.word	0x2001074e
 800d1f8:	20010744 	.word	0x20010744
 800d1fc:	20010724 	.word	0x20010724
 800d200:	0801658c 	.word	0x0801658c
 800d204:	0801696c 	.word	0x0801696c
 800d208:	080165d8 	.word	0x080165d8
 800d20c:	080169a8 	.word	0x080169a8
 800d210:	20010754 	.word	0x20010754
 800d214:	20010751 	.word	0x20010751
 800d218:	080169c8 	.word	0x080169c8
            } else {
              recv_data = cseg->p;
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	4a70      	ldr	r2, [pc, #448]	; (800d3e4 <tcp_receive+0xcf4>)
 800d222:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	2200      	movs	r2, #0
 800d228:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	899b      	ldrh	r3, [r3, #12]
 800d230:	b29b      	uxth	r3, r3
 800d232:	4618      	mov	r0, r3
 800d234:	f7fa fd64 	bl	8007d00 <lwip_htons>
 800d238:	4603      	mov	r3, r0
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	f003 0301 	and.w	r3, r3, #1
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00d      	beq.n	800d260 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d244:	4b68      	ldr	r3, [pc, #416]	; (800d3e8 <tcp_receive+0xcf8>)
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	f043 0320 	orr.w	r3, r3, #32
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	4b66      	ldr	r3, [pc, #408]	; (800d3e8 <tcp_receive+0xcf8>)
 800d250:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	7d1b      	ldrb	r3, [r3, #20]
 800d256:	2b04      	cmp	r3, #4
 800d258:	d102      	bne.n	800d260 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2207      	movs	r2, #7
 800d25e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800d268:	68b8      	ldr	r0, [r7, #8]
 800d26a:	f7fd fbd6 	bl	800aa1a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d272:	2b00      	cmp	r3, #0
 800d274:	d008      	beq.n	800d288 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	685a      	ldr	r2, [r3, #4]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d282:	429a      	cmp	r2, r3
 800d284:	f43f af43 	beq.w	800d10e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	8b5b      	ldrh	r3, [r3, #26]
 800d28c:	f003 0301 	and.w	r3, r3, #1
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00e      	beq.n	800d2b2 <tcp_receive+0xbc2>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	8b5b      	ldrh	r3, [r3, #26]
 800d298:	f023 0301 	bic.w	r3, r3, #1
 800d29c:	b29a      	uxth	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	835a      	strh	r2, [r3, #26]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	8b5b      	ldrh	r3, [r3, #26]
 800d2a6:	f043 0302 	orr.w	r3, r3, #2
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d2b0:	e188      	b.n	800d5c4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	8b5b      	ldrh	r3, [r3, #26]
 800d2b6:	f043 0301 	orr.w	r3, r3, #1
 800d2ba:	b29a      	uxth	r2, r3
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d2c0:	e180      	b.n	800d5c4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d106      	bne.n	800d2d8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d2ca:	4848      	ldr	r0, [pc, #288]	; (800d3ec <tcp_receive+0xcfc>)
 800d2cc:	f7fd fbbe 	bl	800aa4c <tcp_seg_copy>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	675a      	str	r2, [r3, #116]	; 0x74
 800d2d6:	e16d      	b.n	800d5b4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d2e2:	e157      	b.n	800d594 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	685a      	ldr	r2, [r3, #4]
 800d2ea:	4b41      	ldr	r3, [pc, #260]	; (800d3f0 <tcp_receive+0xd00>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d11d      	bne.n	800d32e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d2f2:	4b3e      	ldr	r3, [pc, #248]	; (800d3ec <tcp_receive+0xcfc>)
 800d2f4:	891a      	ldrh	r2, [r3, #8]
 800d2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f8:	891b      	ldrh	r3, [r3, #8]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	f240 814f 	bls.w	800d59e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d300:	483a      	ldr	r0, [pc, #232]	; (800d3ec <tcp_receive+0xcfc>)
 800d302:	f7fd fba3 	bl	800aa4c <tcp_seg_copy>
 800d306:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 8149 	beq.w	800d5a2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800d310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d312:	2b00      	cmp	r3, #0
 800d314:	d003      	beq.n	800d31e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d318:	697a      	ldr	r2, [r7, #20]
 800d31a:	601a      	str	r2, [r3, #0]
 800d31c:	e002      	b.n	800d324 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	697a      	ldr	r2, [r7, #20]
 800d322:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d324:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d326:	6978      	ldr	r0, [r7, #20]
 800d328:	f7ff f8de 	bl	800c4e8 <tcp_oos_insert_segment>
                }
                break;
 800d32c:	e139      	b.n	800d5a2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d32e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d330:	2b00      	cmp	r3, #0
 800d332:	d117      	bne.n	800d364 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d334:	4b2e      	ldr	r3, [pc, #184]	; (800d3f0 <tcp_receive+0xd00>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	2b00      	cmp	r3, #0
 800d342:	da57      	bge.n	800d3f4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d344:	4829      	ldr	r0, [pc, #164]	; (800d3ec <tcp_receive+0xcfc>)
 800d346:	f7fd fb81 	bl	800aa4c <tcp_seg_copy>
 800d34a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f000 8129 	beq.w	800d5a6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	69ba      	ldr	r2, [r7, #24]
 800d358:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d35a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d35c:	69b8      	ldr	r0, [r7, #24]
 800d35e:	f7ff f8c3 	bl	800c4e8 <tcp_oos_insert_segment>
                  }
                  break;
 800d362:	e120      	b.n	800d5a6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d364:	4b22      	ldr	r3, [pc, #136]	; (800d3f0 <tcp_receive+0xd00>)
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	1ad3      	subs	r3, r2, r3
 800d370:	3b01      	subs	r3, #1
 800d372:	2b00      	cmp	r3, #0
 800d374:	db3e      	blt.n	800d3f4 <tcp_receive+0xd04>
 800d376:	4b1e      	ldr	r3, [pc, #120]	; (800d3f0 <tcp_receive+0xd00>)
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	3301      	adds	r3, #1
 800d384:	2b00      	cmp	r3, #0
 800d386:	dc35      	bgt.n	800d3f4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d388:	4818      	ldr	r0, [pc, #96]	; (800d3ec <tcp_receive+0xcfc>)
 800d38a:	f7fd fb5f 	bl	800aa4c <tcp_seg_copy>
 800d38e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d390:	69fb      	ldr	r3, [r7, #28]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f000 8109 	beq.w	800d5aa <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3a0:	8912      	ldrh	r2, [r2, #8]
 800d3a2:	441a      	add	r2, r3
 800d3a4:	4b12      	ldr	r3, [pc, #72]	; (800d3f0 <tcp_receive+0xd00>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	1ad3      	subs	r3, r2, r3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	dd12      	ble.n	800d3d4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d3ae:	4b10      	ldr	r3, [pc, #64]	; (800d3f0 <tcp_receive+0xd00>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c6:	685a      	ldr	r2, [r3, #4]
 800d3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ca:	891b      	ldrh	r3, [r3, #8]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4610      	mov	r0, r2
 800d3d0:	f7fb ff0e 	bl	80091f0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d6:	69fa      	ldr	r2, [r7, #28]
 800d3d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d3da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d3dc:	69f8      	ldr	r0, [r7, #28]
 800d3de:	f7ff f883 	bl	800c4e8 <tcp_oos_insert_segment>
                  }
                  break;
 800d3e2:	e0e2      	b.n	800d5aa <tcp_receive+0xeba>
 800d3e4:	20010754 	.word	0x20010754
 800d3e8:	20010751 	.word	0x20010751
 800d3ec:	20010724 	.word	0x20010724
 800d3f0:	20010744 	.word	0x20010744
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f040 80c6 	bne.w	800d58e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d402:	4b80      	ldr	r3, [pc, #512]	; (800d604 <tcp_receive+0xf14>)
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d408:	68db      	ldr	r3, [r3, #12]
 800d40a:	685b      	ldr	r3, [r3, #4]
 800d40c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f340 80bd 	ble.w	800d58e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	899b      	ldrh	r3, [r3, #12]
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fa fc6f 	bl	8007d00 <lwip_htons>
 800d422:	4603      	mov	r3, r0
 800d424:	b2db      	uxtb	r3, r3
 800d426:	f003 0301 	and.w	r3, r3, #1
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f040 80bf 	bne.w	800d5ae <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d430:	4875      	ldr	r0, [pc, #468]	; (800d608 <tcp_receive+0xf18>)
 800d432:	f7fd fb0b 	bl	800aa4c <tcp_seg_copy>
 800d436:	4602      	mov	r2, r0
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	f000 80b6 	beq.w	800d5b2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d44e:	8912      	ldrh	r2, [r2, #8]
 800d450:	441a      	add	r2, r3
 800d452:	4b6c      	ldr	r3, [pc, #432]	; (800d604 <tcp_receive+0xf14>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	2b00      	cmp	r3, #0
 800d45a:	dd12      	ble.n	800d482 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d45c:	4b69      	ldr	r3, [pc, #420]	; (800d604 <tcp_receive+0xf14>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	b29a      	uxth	r2, r3
 800d462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	b29b      	uxth	r3, r3
 800d46a:	1ad3      	subs	r3, r2, r3
 800d46c:	b29a      	uxth	r2, r3
 800d46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d470:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d478:	891b      	ldrh	r3, [r3, #8]
 800d47a:	4619      	mov	r1, r3
 800d47c:	4610      	mov	r0, r2
 800d47e:	f7fb feb7 	bl	80091f0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d482:	4b62      	ldr	r3, [pc, #392]	; (800d60c <tcp_receive+0xf1c>)
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	461a      	mov	r2, r3
 800d488:	4b5e      	ldr	r3, [pc, #376]	; (800d604 <tcp_receive+0xf14>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	441a      	add	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d492:	6879      	ldr	r1, [r7, #4]
 800d494:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d496:	440b      	add	r3, r1
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f340 8089 	ble.w	800d5b2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	899b      	ldrh	r3, [r3, #12]
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fa fc28 	bl	8007d00 <lwip_htons>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	f003 0301 	and.w	r3, r3, #1
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d022      	beq.n	800d502 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	68db      	ldr	r3, [r3, #12]
 800d4c2:	899b      	ldrh	r3, [r3, #12]
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	b21b      	sxth	r3, r3
 800d4c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d4cc:	b21c      	sxth	r4, r3
 800d4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	899b      	ldrh	r3, [r3, #12]
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7fa fc11 	bl	8007d00 <lwip_htons>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7fa fc08 	bl	8007d00 <lwip_htons>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	b21b      	sxth	r3, r3
 800d4f4:	4323      	orrs	r3, r4
 800d4f6:	b21a      	sxth	r2, r3
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	b292      	uxth	r2, r2
 800d500:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d506:	b29a      	uxth	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d50c:	4413      	add	r3, r2
 800d50e:	b299      	uxth	r1, r3
 800d510:	4b3c      	ldr	r3, [pc, #240]	; (800d604 <tcp_receive+0xf14>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	b29a      	uxth	r2, r3
 800d516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	1a8a      	subs	r2, r1, r2
 800d51c:	b292      	uxth	r2, r2
 800d51e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	685a      	ldr	r2, [r3, #4]
 800d526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	891b      	ldrh	r3, [r3, #8]
 800d52c:	4619      	mov	r1, r3
 800d52e:	4610      	mov	r0, r2
 800d530:	f7fb fe5e 	bl	80091f0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	891c      	ldrh	r4, [r3, #8]
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	899b      	ldrh	r3, [r3, #12]
 800d542:	b29b      	uxth	r3, r3
 800d544:	4618      	mov	r0, r3
 800d546:	f7fa fbdb 	bl	8007d00 <lwip_htons>
 800d54a:	4603      	mov	r3, r0
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	f003 0303 	and.w	r3, r3, #3
 800d552:	2b00      	cmp	r3, #0
 800d554:	d001      	beq.n	800d55a <tcp_receive+0xe6a>
 800d556:	2301      	movs	r3, #1
 800d558:	e000      	b.n	800d55c <tcp_receive+0xe6c>
 800d55a:	2300      	movs	r3, #0
 800d55c:	4423      	add	r3, r4
 800d55e:	b29a      	uxth	r2, r3
 800d560:	4b2a      	ldr	r3, [pc, #168]	; (800d60c <tcp_receive+0xf1c>)
 800d562:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d564:	4b29      	ldr	r3, [pc, #164]	; (800d60c <tcp_receive+0xf1c>)
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	461a      	mov	r2, r3
 800d56a:	4b26      	ldr	r3, [pc, #152]	; (800d604 <tcp_receive+0xf14>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	441a      	add	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d574:	6879      	ldr	r1, [r7, #4]
 800d576:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d578:	440b      	add	r3, r1
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d019      	beq.n	800d5b2 <tcp_receive+0xec2>
 800d57e:	4b24      	ldr	r3, [pc, #144]	; (800d610 <tcp_receive+0xf20>)
 800d580:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d584:	4923      	ldr	r1, [pc, #140]	; (800d614 <tcp_receive+0xf24>)
 800d586:	4824      	ldr	r0, [pc, #144]	; (800d618 <tcp_receive+0xf28>)
 800d588:	f007 fa64 	bl	8014a54 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d58c:	e011      	b.n	800d5b2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	63bb      	str	r3, [r7, #56]	; 0x38
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	2b00      	cmp	r3, #0
 800d598:	f47f aea4 	bne.w	800d2e4 <tcp_receive+0xbf4>
 800d59c:	e00a      	b.n	800d5b4 <tcp_receive+0xec4>
                break;
 800d59e:	bf00      	nop
 800d5a0:	e008      	b.n	800d5b4 <tcp_receive+0xec4>
                break;
 800d5a2:	bf00      	nop
 800d5a4:	e006      	b.n	800d5b4 <tcp_receive+0xec4>
                  break;
 800d5a6:	bf00      	nop
 800d5a8:	e004      	b.n	800d5b4 <tcp_receive+0xec4>
                  break;
 800d5aa:	bf00      	nop
 800d5ac:	e002      	b.n	800d5b4 <tcp_receive+0xec4>
                  break;
 800d5ae:	bf00      	nop
 800d5b0:	e000      	b.n	800d5b4 <tcp_receive+0xec4>
                break;
 800d5b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f001 fa33 	bl	800ea20 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d5ba:	e003      	b.n	800d5c4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f001 fa2f 	bl	800ea20 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d5c2:	e01a      	b.n	800d5fa <tcp_receive+0xf0a>
 800d5c4:	e019      	b.n	800d5fa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d5c6:	4b0f      	ldr	r3, [pc, #60]	; (800d604 <tcp_receive+0xf14>)
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	db0a      	blt.n	800d5ea <tcp_receive+0xefa>
 800d5d4:	4b0b      	ldr	r3, [pc, #44]	; (800d604 <tcp_receive+0xf14>)
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d5e0:	440b      	add	r3, r1
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	dd07      	ble.n	800d5fa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	8b5b      	ldrh	r3, [r3, #26]
 800d5ee:	f043 0302 	orr.w	r3, r3, #2
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d5f8:	e7ff      	b.n	800d5fa <tcp_receive+0xf0a>
 800d5fa:	bf00      	nop
 800d5fc:	3750      	adds	r7, #80	; 0x50
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bdb0      	pop	{r4, r5, r7, pc}
 800d602:	bf00      	nop
 800d604:	20010744 	.word	0x20010744
 800d608:	20010724 	.word	0x20010724
 800d60c:	2001074e 	.word	0x2001074e
 800d610:	0801658c 	.word	0x0801658c
 800d614:	08016934 	.word	0x08016934
 800d618:	080165d8 	.word	0x080165d8

0800d61c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d622:	4b15      	ldr	r3, [pc, #84]	; (800d678 <tcp_get_next_optbyte+0x5c>)
 800d624:	881b      	ldrh	r3, [r3, #0]
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	b291      	uxth	r1, r2
 800d62a:	4a13      	ldr	r2, [pc, #76]	; (800d678 <tcp_get_next_optbyte+0x5c>)
 800d62c:	8011      	strh	r1, [r2, #0]
 800d62e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d630:	4b12      	ldr	r3, [pc, #72]	; (800d67c <tcp_get_next_optbyte+0x60>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d004      	beq.n	800d642 <tcp_get_next_optbyte+0x26>
 800d638:	4b11      	ldr	r3, [pc, #68]	; (800d680 <tcp_get_next_optbyte+0x64>)
 800d63a:	881b      	ldrh	r3, [r3, #0]
 800d63c:	88fa      	ldrh	r2, [r7, #6]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d208      	bcs.n	800d654 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d642:	4b10      	ldr	r3, [pc, #64]	; (800d684 <tcp_get_next_optbyte+0x68>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	3314      	adds	r3, #20
 800d648:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d64a:	88fb      	ldrh	r3, [r7, #6]
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	4413      	add	r3, r2
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	e00b      	b.n	800d66c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d654:	88fb      	ldrh	r3, [r7, #6]
 800d656:	b2da      	uxtb	r2, r3
 800d658:	4b09      	ldr	r3, [pc, #36]	; (800d680 <tcp_get_next_optbyte+0x64>)
 800d65a:	881b      	ldrh	r3, [r3, #0]
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d662:	4b06      	ldr	r3, [pc, #24]	; (800d67c <tcp_get_next_optbyte+0x60>)
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	797b      	ldrb	r3, [r7, #5]
 800d668:	4413      	add	r3, r2
 800d66a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr
 800d678:	20010740 	.word	0x20010740
 800d67c:	2001073c 	.word	0x2001073c
 800d680:	2001073a 	.word	0x2001073a
 800d684:	20010734 	.word	0x20010734

0800d688 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d106      	bne.n	800d6a4 <tcp_parseopt+0x1c>
 800d696:	4b32      	ldr	r3, [pc, #200]	; (800d760 <tcp_parseopt+0xd8>)
 800d698:	f240 727d 	movw	r2, #1917	; 0x77d
 800d69c:	4931      	ldr	r1, [pc, #196]	; (800d764 <tcp_parseopt+0xdc>)
 800d69e:	4832      	ldr	r0, [pc, #200]	; (800d768 <tcp_parseopt+0xe0>)
 800d6a0:	f007 f9d8 	bl	8014a54 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d6a4:	4b31      	ldr	r3, [pc, #196]	; (800d76c <tcp_parseopt+0xe4>)
 800d6a6:	881b      	ldrh	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d055      	beq.n	800d758 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d6ac:	4b30      	ldr	r3, [pc, #192]	; (800d770 <tcp_parseopt+0xe8>)
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	801a      	strh	r2, [r3, #0]
 800d6b2:	e045      	b.n	800d740 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d6b4:	f7ff ffb2 	bl	800d61c <tcp_get_next_optbyte>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d6bc:	7bfb      	ldrb	r3, [r7, #15]
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d006      	beq.n	800d6d0 <tcp_parseopt+0x48>
 800d6c2:	2b02      	cmp	r3, #2
 800d6c4:	dc2b      	bgt.n	800d71e <tcp_parseopt+0x96>
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d041      	beq.n	800d74e <tcp_parseopt+0xc6>
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	d127      	bne.n	800d71e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d6ce:	e037      	b.n	800d740 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d6d0:	f7ff ffa4 	bl	800d61c <tcp_get_next_optbyte>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b04      	cmp	r3, #4
 800d6d8:	d13b      	bne.n	800d752 <tcp_parseopt+0xca>
 800d6da:	4b25      	ldr	r3, [pc, #148]	; (800d770 <tcp_parseopt+0xe8>)
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	4a22      	ldr	r2, [pc, #136]	; (800d76c <tcp_parseopt+0xe4>)
 800d6e2:	8812      	ldrh	r2, [r2, #0]
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	da34      	bge.n	800d752 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d6e8:	f7ff ff98 	bl	800d61c <tcp_get_next_optbyte>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	021b      	lsls	r3, r3, #8
 800d6f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d6f4:	f7ff ff92 	bl	800d61c <tcp_get_next_optbyte>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	89bb      	ldrh	r3, [r7, #12]
 800d6fe:	4313      	orrs	r3, r2
 800d700:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d702:	89bb      	ldrh	r3, [r7, #12]
 800d704:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d708:	d804      	bhi.n	800d714 <tcp_parseopt+0x8c>
 800d70a:	89bb      	ldrh	r3, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d001      	beq.n	800d714 <tcp_parseopt+0x8c>
 800d710:	89ba      	ldrh	r2, [r7, #12]
 800d712:	e001      	b.n	800d718 <tcp_parseopt+0x90>
 800d714:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d71c:	e010      	b.n	800d740 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d71e:	f7ff ff7d 	bl	800d61c <tcp_get_next_optbyte>
 800d722:	4603      	mov	r3, r0
 800d724:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d726:	7afb      	ldrb	r3, [r7, #11]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d914      	bls.n	800d756 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d72c:	7afb      	ldrb	r3, [r7, #11]
 800d72e:	b29a      	uxth	r2, r3
 800d730:	4b0f      	ldr	r3, [pc, #60]	; (800d770 <tcp_parseopt+0xe8>)
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	4413      	add	r3, r2
 800d736:	b29b      	uxth	r3, r3
 800d738:	3b02      	subs	r3, #2
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	4b0c      	ldr	r3, [pc, #48]	; (800d770 <tcp_parseopt+0xe8>)
 800d73e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d740:	4b0b      	ldr	r3, [pc, #44]	; (800d770 <tcp_parseopt+0xe8>)
 800d742:	881a      	ldrh	r2, [r3, #0]
 800d744:	4b09      	ldr	r3, [pc, #36]	; (800d76c <tcp_parseopt+0xe4>)
 800d746:	881b      	ldrh	r3, [r3, #0]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d3b3      	bcc.n	800d6b4 <tcp_parseopt+0x2c>
 800d74c:	e004      	b.n	800d758 <tcp_parseopt+0xd0>
          return;
 800d74e:	bf00      	nop
 800d750:	e002      	b.n	800d758 <tcp_parseopt+0xd0>
            return;
 800d752:	bf00      	nop
 800d754:	e000      	b.n	800d758 <tcp_parseopt+0xd0>
            return;
 800d756:	bf00      	nop
      }
    }
  }
}
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	0801658c 	.word	0x0801658c
 800d764:	080169f0 	.word	0x080169f0
 800d768:	080165d8 	.word	0x080165d8
 800d76c:	20010738 	.word	0x20010738
 800d770:	20010740 	.word	0x20010740

0800d774 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d774:	b480      	push	{r7}
 800d776:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d778:	4b05      	ldr	r3, [pc, #20]	; (800d790 <tcp_trigger_input_pcb_close+0x1c>)
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	f043 0310 	orr.w	r3, r3, #16
 800d780:	b2da      	uxtb	r2, r3
 800d782:	4b03      	ldr	r3, [pc, #12]	; (800d790 <tcp_trigger_input_pcb_close+0x1c>)
 800d784:	701a      	strb	r2, [r3, #0]
}
 800d786:	bf00      	nop
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr
 800d790:	20010751 	.word	0x20010751

0800d794 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00a      	beq.n	800d7bc <tcp_route+0x28>
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	7a1b      	ldrb	r3, [r3, #8]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d006      	beq.n	800d7bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	7a1b      	ldrb	r3, [r3, #8]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fb fb14 	bl	8008de0 <netif_get_by_index>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	e003      	b.n	800d7c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f005 f845 	bl	801284c <ip4_route>
 800d7c2:	4603      	mov	r3, r0
  }
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d7cc:	b590      	push	{r4, r7, lr}
 800d7ce:	b087      	sub	sp, #28
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	603b      	str	r3, [r7, #0]
 800d7d8:	4613      	mov	r3, r2
 800d7da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d105      	bne.n	800d7ee <tcp_create_segment+0x22>
 800d7e2:	4b44      	ldr	r3, [pc, #272]	; (800d8f4 <tcp_create_segment+0x128>)
 800d7e4:	22a3      	movs	r2, #163	; 0xa3
 800d7e6:	4944      	ldr	r1, [pc, #272]	; (800d8f8 <tcp_create_segment+0x12c>)
 800d7e8:	4844      	ldr	r0, [pc, #272]	; (800d8fc <tcp_create_segment+0x130>)
 800d7ea:	f007 f933 	bl	8014a54 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d105      	bne.n	800d800 <tcp_create_segment+0x34>
 800d7f4:	4b3f      	ldr	r3, [pc, #252]	; (800d8f4 <tcp_create_segment+0x128>)
 800d7f6:	22a4      	movs	r2, #164	; 0xa4
 800d7f8:	4941      	ldr	r1, [pc, #260]	; (800d900 <tcp_create_segment+0x134>)
 800d7fa:	4840      	ldr	r0, [pc, #256]	; (800d8fc <tcp_create_segment+0x130>)
 800d7fc:	f007 f92a 	bl	8014a54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d800:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	b2db      	uxtb	r3, r3
 800d808:	f003 0304 	and.w	r3, r3, #4
 800d80c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d80e:	2003      	movs	r0, #3
 800d810:	f7fa ff4e 	bl	80086b0 <memp_malloc>
 800d814:	6138      	str	r0, [r7, #16]
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d104      	bne.n	800d826 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d81c:	68b8      	ldr	r0, [r7, #8]
 800d81e:	f7fb fe6d 	bl	80094fc <pbuf_free>
    return NULL;
 800d822:	2300      	movs	r3, #0
 800d824:	e061      	b.n	800d8ea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d82c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	2200      	movs	r2, #0
 800d832:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	891a      	ldrh	r2, [r3, #8]
 800d83e:	7dfb      	ldrb	r3, [r7, #23]
 800d840:	b29b      	uxth	r3, r3
 800d842:	429a      	cmp	r2, r3
 800d844:	d205      	bcs.n	800d852 <tcp_create_segment+0x86>
 800d846:	4b2b      	ldr	r3, [pc, #172]	; (800d8f4 <tcp_create_segment+0x128>)
 800d848:	22b0      	movs	r2, #176	; 0xb0
 800d84a:	492e      	ldr	r1, [pc, #184]	; (800d904 <tcp_create_segment+0x138>)
 800d84c:	482b      	ldr	r0, [pc, #172]	; (800d8fc <tcp_create_segment+0x130>)
 800d84e:	f007 f901 	bl	8014a54 <iprintf>
  seg->len = p->tot_len - optlen;
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	891a      	ldrh	r2, [r3, #8]
 800d856:	7dfb      	ldrb	r3, [r7, #23]
 800d858:	b29b      	uxth	r3, r3
 800d85a:	1ad3      	subs	r3, r2, r3
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d862:	2114      	movs	r1, #20
 800d864:	68b8      	ldr	r0, [r7, #8]
 800d866:	f7fb fdb3 	bl	80093d0 <pbuf_add_header>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d004      	beq.n	800d87a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d870:	6938      	ldr	r0, [r7, #16]
 800d872:	f7fd f8d2 	bl	800aa1a <tcp_seg_free>
    return NULL;
 800d876:	2300      	movs	r3, #0
 800d878:	e037      	b.n	800d8ea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	685a      	ldr	r2, [r3, #4]
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	8ada      	ldrh	r2, [r3, #22]
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	68dc      	ldr	r4, [r3, #12]
 800d88c:	4610      	mov	r0, r2
 800d88e:	f7fa fa37 	bl	8007d00 <lwip_htons>
 800d892:	4603      	mov	r3, r0
 800d894:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	8b1a      	ldrh	r2, [r3, #24]
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	68dc      	ldr	r4, [r3, #12]
 800d89e:	4610      	mov	r0, r2
 800d8a0:	f7fa fa2e 	bl	8007d00 <lwip_htons>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	68dc      	ldr	r4, [r3, #12]
 800d8ac:	6838      	ldr	r0, [r7, #0]
 800d8ae:	f7fa fa3c 	bl	8007d2a <lwip_htonl>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d8b6:	7dfb      	ldrb	r3, [r7, #23]
 800d8b8:	089b      	lsrs	r3, r3, #2
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	3305      	adds	r3, #5
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	031b      	lsls	r3, r3, #12
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	79fb      	ldrb	r3, [r7, #7]
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	68dc      	ldr	r4, [r3, #12]
 800d8d2:	4610      	mov	r0, r2
 800d8d4:	f7fa fa14 	bl	8007d00 <lwip_htons>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	749a      	strb	r2, [r3, #18]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	74da      	strb	r2, [r3, #19]
  return seg;
 800d8e8:	693b      	ldr	r3, [r7, #16]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	371c      	adds	r7, #28
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd90      	pop	{r4, r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	08016a0c 	.word	0x08016a0c
 800d8f8:	08016a40 	.word	0x08016a40
 800d8fc:	08016a60 	.word	0x08016a60
 800d900:	08016a88 	.word	0x08016a88
 800d904:	08016aac 	.word	0x08016aac

0800d908 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d908:	b590      	push	{r4, r7, lr}
 800d90a:	b08b      	sub	sp, #44	; 0x2c
 800d90c:	af02      	add	r7, sp, #8
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	460b      	mov	r3, r1
 800d912:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d914:	2300      	movs	r3, #0
 800d916:	61fb      	str	r3, [r7, #28]
 800d918:	2300      	movs	r3, #0
 800d91a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d91c:	2300      	movs	r3, #0
 800d91e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d106      	bne.n	800d934 <tcp_split_unsent_seg+0x2c>
 800d926:	4b95      	ldr	r3, [pc, #596]	; (800db7c <tcp_split_unsent_seg+0x274>)
 800d928:	f240 324b 	movw	r2, #843	; 0x34b
 800d92c:	4994      	ldr	r1, [pc, #592]	; (800db80 <tcp_split_unsent_seg+0x278>)
 800d92e:	4895      	ldr	r0, [pc, #596]	; (800db84 <tcp_split_unsent_seg+0x27c>)
 800d930:	f007 f890 	bl	8014a54 <iprintf>

  useg = pcb->unsent;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d938:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d102      	bne.n	800d946 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d940:	f04f 33ff 	mov.w	r3, #4294967295
 800d944:	e116      	b.n	800db74 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d946:	887b      	ldrh	r3, [r7, #2]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d109      	bne.n	800d960 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d94c:	4b8b      	ldr	r3, [pc, #556]	; (800db7c <tcp_split_unsent_seg+0x274>)
 800d94e:	f240 3253 	movw	r2, #851	; 0x353
 800d952:	498d      	ldr	r1, [pc, #564]	; (800db88 <tcp_split_unsent_seg+0x280>)
 800d954:	488b      	ldr	r0, [pc, #556]	; (800db84 <tcp_split_unsent_seg+0x27c>)
 800d956:	f007 f87d 	bl	8014a54 <iprintf>
    return ERR_VAL;
 800d95a:	f06f 0305 	mvn.w	r3, #5
 800d95e:	e109      	b.n	800db74 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	891b      	ldrh	r3, [r3, #8]
 800d964:	887a      	ldrh	r2, [r7, #2]
 800d966:	429a      	cmp	r2, r3
 800d968:	d301      	bcc.n	800d96e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d96a:	2300      	movs	r3, #0
 800d96c:	e102      	b.n	800db74 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d972:	887a      	ldrh	r2, [r7, #2]
 800d974:	429a      	cmp	r2, r3
 800d976:	d906      	bls.n	800d986 <tcp_split_unsent_seg+0x7e>
 800d978:	4b80      	ldr	r3, [pc, #512]	; (800db7c <tcp_split_unsent_seg+0x274>)
 800d97a:	f240 325b 	movw	r2, #859	; 0x35b
 800d97e:	4983      	ldr	r1, [pc, #524]	; (800db8c <tcp_split_unsent_seg+0x284>)
 800d980:	4880      	ldr	r0, [pc, #512]	; (800db84 <tcp_split_unsent_seg+0x27c>)
 800d982:	f007 f867 	bl	8014a54 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	891b      	ldrh	r3, [r3, #8]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d106      	bne.n	800d99c <tcp_split_unsent_seg+0x94>
 800d98e:	4b7b      	ldr	r3, [pc, #492]	; (800db7c <tcp_split_unsent_seg+0x274>)
 800d990:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d994:	497e      	ldr	r1, [pc, #504]	; (800db90 <tcp_split_unsent_seg+0x288>)
 800d996:	487b      	ldr	r0, [pc, #492]	; (800db84 <tcp_split_unsent_seg+0x27c>)
 800d998:	f007 f85c 	bl	8014a54 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	7a9b      	ldrb	r3, [r3, #10]
 800d9a0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d9a2:	7bfb      	ldrb	r3, [r7, #15]
 800d9a4:	009b      	lsls	r3, r3, #2
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	891a      	ldrh	r2, [r3, #8]
 800d9b2:	887b      	ldrh	r3, [r7, #2]
 800d9b4:	1ad3      	subs	r3, r2, r3
 800d9b6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d9b8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	89bb      	ldrh	r3, [r7, #12]
 800d9be:	4413      	add	r3, r2
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	2036      	movs	r0, #54	; 0x36
 800d9ca:	f7fb fab3 	bl	8008f34 <pbuf_alloc>
 800d9ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f000 80b7 	beq.w	800db46 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	891a      	ldrh	r2, [r3, #8]
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	891b      	ldrh	r3, [r3, #8]
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	887b      	ldrh	r3, [r7, #2]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	6858      	ldr	r0, [r3, #4]
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	685a      	ldr	r2, [r3, #4]
 800d9f4:	7bbb      	ldrb	r3, [r7, #14]
 800d9f6:	18d1      	adds	r1, r2, r3
 800d9f8:	897b      	ldrh	r3, [r7, #10]
 800d9fa:	89ba      	ldrh	r2, [r7, #12]
 800d9fc:	f7fb ff84 	bl	8009908 <pbuf_copy_partial>
 800da00:	4603      	mov	r3, r0
 800da02:	461a      	mov	r2, r3
 800da04:	89bb      	ldrh	r3, [r7, #12]
 800da06:	4293      	cmp	r3, r2
 800da08:	f040 809f 	bne.w	800db4a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	899b      	ldrh	r3, [r3, #12]
 800da12:	b29b      	uxth	r3, r3
 800da14:	4618      	mov	r0, r3
 800da16:	f7fa f973 	bl	8007d00 <lwip_htons>
 800da1a:	4603      	mov	r3, r0
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da22:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800da24:	2300      	movs	r3, #0
 800da26:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800da28:	7efb      	ldrb	r3, [r7, #27]
 800da2a:	f003 0308 	and.w	r3, r3, #8
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d007      	beq.n	800da42 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800da32:	7efb      	ldrb	r3, [r7, #27]
 800da34:	f023 0308 	bic.w	r3, r3, #8
 800da38:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800da3a:	7ebb      	ldrb	r3, [r7, #26]
 800da3c:	f043 0308 	orr.w	r3, r3, #8
 800da40:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800da42:	7efb      	ldrb	r3, [r7, #27]
 800da44:	f003 0301 	and.w	r3, r3, #1
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d007      	beq.n	800da5c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800da4c:	7efb      	ldrb	r3, [r7, #27]
 800da4e:	f023 0301 	bic.w	r3, r3, #1
 800da52:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800da54:	7ebb      	ldrb	r3, [r7, #26]
 800da56:	f043 0301 	orr.w	r3, r3, #1
 800da5a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	4618      	mov	r0, r3
 800da64:	f7fa f961 	bl	8007d2a <lwip_htonl>
 800da68:	4602      	mov	r2, r0
 800da6a:	887b      	ldrh	r3, [r7, #2]
 800da6c:	18d1      	adds	r1, r2, r3
 800da6e:	7eba      	ldrb	r2, [r7, #26]
 800da70:	7bfb      	ldrb	r3, [r7, #15]
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	460b      	mov	r3, r1
 800da76:	6939      	ldr	r1, [r7, #16]
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7ff fea7 	bl	800d7cc <tcp_create_segment>
 800da7e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d063      	beq.n	800db4e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7fb fdc4 	bl	8009618 <pbuf_clen>
 800da90:	4603      	mov	r3, r0
 800da92:	461a      	mov	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800da9a:	1a9b      	subs	r3, r3, r2
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	6858      	ldr	r0, [r3, #4]
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	891a      	ldrh	r2, [r3, #8]
 800daae:	89bb      	ldrh	r3, [r7, #12]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	4619      	mov	r1, r3
 800dab6:	f7fb fb9b 	bl	80091f0 <pbuf_realloc>
  useg->len -= remainder;
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	891a      	ldrh	r2, [r3, #8]
 800dabe:	89bb      	ldrh	r3, [r7, #12]
 800dac0:	1ad3      	subs	r3, r2, r3
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	899b      	ldrh	r3, [r3, #12]
 800dace:	b29c      	uxth	r4, r3
 800dad0:	7efb      	ldrb	r3, [r7, #27]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7fa f913 	bl	8007d00 <lwip_htons>
 800dada:	4603      	mov	r3, r0
 800dadc:	461a      	mov	r2, r3
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	4322      	orrs	r2, r4
 800dae4:	b292      	uxth	r2, r2
 800dae6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	4618      	mov	r0, r3
 800daee:	f7fb fd93 	bl	8009618 <pbuf_clen>
 800daf2:	4603      	mov	r3, r0
 800daf4:	461a      	mov	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dafc:	4413      	add	r3, r2
 800dafe:	b29a      	uxth	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fb fd84 	bl	8009618 <pbuf_clen>
 800db10:	4603      	mov	r3, r0
 800db12:	461a      	mov	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db1a:	4413      	add	r3, r2
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	681a      	ldr	r2, [r3, #0]
 800db28:	69fb      	ldr	r3, [r7, #28]
 800db2a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	69fa      	ldr	r2, [r7, #28]
 800db30:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d103      	bne.n	800db42 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800db42:	2300      	movs	r3, #0
 800db44:	e016      	b.n	800db74 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800db46:	bf00      	nop
 800db48:	e002      	b.n	800db50 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800db4a:	bf00      	nop
 800db4c:	e000      	b.n	800db50 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800db4e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d006      	beq.n	800db64 <tcp_split_unsent_seg+0x25c>
 800db56:	4b09      	ldr	r3, [pc, #36]	; (800db7c <tcp_split_unsent_seg+0x274>)
 800db58:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800db5c:	490d      	ldr	r1, [pc, #52]	; (800db94 <tcp_split_unsent_seg+0x28c>)
 800db5e:	4809      	ldr	r0, [pc, #36]	; (800db84 <tcp_split_unsent_seg+0x27c>)
 800db60:	f006 ff78 	bl	8014a54 <iprintf>
  if (p != NULL) {
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d002      	beq.n	800db70 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800db6a:	6938      	ldr	r0, [r7, #16]
 800db6c:	f7fb fcc6 	bl	80094fc <pbuf_free>
  }

  return ERR_MEM;
 800db70:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db74:	4618      	mov	r0, r3
 800db76:	3724      	adds	r7, #36	; 0x24
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd90      	pop	{r4, r7, pc}
 800db7c:	08016a0c 	.word	0x08016a0c
 800db80:	08016da0 	.word	0x08016da0
 800db84:	08016a60 	.word	0x08016a60
 800db88:	08016dc4 	.word	0x08016dc4
 800db8c:	08016de8 	.word	0x08016de8
 800db90:	08016df8 	.word	0x08016df8
 800db94:	08016e08 	.word	0x08016e08

0800db98 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800db98:	b590      	push	{r4, r7, lr}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d106      	bne.n	800dbb4 <tcp_send_fin+0x1c>
 800dba6:	4b21      	ldr	r3, [pc, #132]	; (800dc2c <tcp_send_fin+0x94>)
 800dba8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800dbac:	4920      	ldr	r1, [pc, #128]	; (800dc30 <tcp_send_fin+0x98>)
 800dbae:	4821      	ldr	r0, [pc, #132]	; (800dc34 <tcp_send_fin+0x9c>)
 800dbb0:	f006 ff50 	bl	8014a54 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d02e      	beq.n	800dc1a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbc0:	60fb      	str	r3, [r7, #12]
 800dbc2:	e002      	b.n	800dbca <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1f8      	bne.n	800dbc4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	899b      	ldrh	r3, [r3, #12]
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fa f890 	bl	8007d00 <lwip_htons>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	f003 0307 	and.w	r3, r3, #7
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d116      	bne.n	800dc1a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	899b      	ldrh	r3, [r3, #12]
 800dbf2:	b29c      	uxth	r4, r3
 800dbf4:	2001      	movs	r0, #1
 800dbf6:	f7fa f883 	bl	8007d00 <lwip_htons>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	4322      	orrs	r2, r4
 800dc04:	b292      	uxth	r2, r2
 800dc06:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	8b5b      	ldrh	r3, [r3, #26]
 800dc0c:	f043 0320 	orr.w	r3, r3, #32
 800dc10:	b29a      	uxth	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	e004      	b.n	800dc24 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dc1a:	2101      	movs	r1, #1
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 f80b 	bl	800dc38 <tcp_enqueue_flags>
 800dc22:	4603      	mov	r3, r0
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3714      	adds	r7, #20
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd90      	pop	{r4, r7, pc}
 800dc2c:	08016a0c 	.word	0x08016a0c
 800dc30:	08016e14 	.word	0x08016e14
 800dc34:	08016a60 	.word	0x08016a60

0800dc38 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08a      	sub	sp, #40	; 0x28
 800dc3c:	af02      	add	r7, sp, #8
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	460b      	mov	r3, r1
 800dc42:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dc44:	2300      	movs	r3, #0
 800dc46:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dc4c:	78fb      	ldrb	r3, [r7, #3]
 800dc4e:	f003 0303 	and.w	r3, r3, #3
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d106      	bne.n	800dc64 <tcp_enqueue_flags+0x2c>
 800dc56:	4b67      	ldr	r3, [pc, #412]	; (800ddf4 <tcp_enqueue_flags+0x1bc>)
 800dc58:	f240 4211 	movw	r2, #1041	; 0x411
 800dc5c:	4966      	ldr	r1, [pc, #408]	; (800ddf8 <tcp_enqueue_flags+0x1c0>)
 800dc5e:	4867      	ldr	r0, [pc, #412]	; (800ddfc <tcp_enqueue_flags+0x1c4>)
 800dc60:	f006 fef8 	bl	8014a54 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d106      	bne.n	800dc78 <tcp_enqueue_flags+0x40>
 800dc6a:	4b62      	ldr	r3, [pc, #392]	; (800ddf4 <tcp_enqueue_flags+0x1bc>)
 800dc6c:	f240 4213 	movw	r2, #1043	; 0x413
 800dc70:	4963      	ldr	r1, [pc, #396]	; (800de00 <tcp_enqueue_flags+0x1c8>)
 800dc72:	4862      	ldr	r0, [pc, #392]	; (800ddfc <tcp_enqueue_flags+0x1c4>)
 800dc74:	f006 feee 	bl	8014a54 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800dc78:	78fb      	ldrb	r3, [r7, #3]
 800dc7a:	f003 0302 	and.w	r3, r3, #2
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d001      	beq.n	800dc86 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800dc82:	2301      	movs	r3, #1
 800dc84:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dc86:	7ffb      	ldrb	r3, [r7, #31]
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	f003 0304 	and.w	r3, r3, #4
 800dc90:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	2036      	movs	r0, #54	; 0x36
 800dc9e:	f7fb f949 	bl	8008f34 <pbuf_alloc>
 800dca2:	6138      	str	r0, [r7, #16]
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d109      	bne.n	800dcbe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	8b5b      	ldrh	r3, [r3, #26]
 800dcae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800dcbc:	e095      	b.n	800ddea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	895a      	ldrh	r2, [r3, #10]
 800dcc2:	7dfb      	ldrb	r3, [r7, #23]
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d206      	bcs.n	800dcd8 <tcp_enqueue_flags+0xa0>
 800dcca:	4b4a      	ldr	r3, [pc, #296]	; (800ddf4 <tcp_enqueue_flags+0x1bc>)
 800dccc:	f240 4239 	movw	r2, #1081	; 0x439
 800dcd0:	494c      	ldr	r1, [pc, #304]	; (800de04 <tcp_enqueue_flags+0x1cc>)
 800dcd2:	484a      	ldr	r0, [pc, #296]	; (800ddfc <tcp_enqueue_flags+0x1c4>)
 800dcd4:	f006 febe 	bl	8014a54 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800dcdc:	78fa      	ldrb	r2, [r7, #3]
 800dcde:	7ffb      	ldrb	r3, [r7, #31]
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	460b      	mov	r3, r1
 800dce4:	6939      	ldr	r1, [r7, #16]
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f7ff fd70 	bl	800d7cc <tcp_create_segment>
 800dcec:	60f8      	str	r0, [r7, #12]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d109      	bne.n	800dd08 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	8b5b      	ldrh	r3, [r3, #26]
 800dcf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dd02:	f04f 33ff 	mov.w	r3, #4294967295
 800dd06:	e070      	b.n	800ddea <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	f003 0303 	and.w	r3, r3, #3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d006      	beq.n	800dd22 <tcp_enqueue_flags+0xea>
 800dd14:	4b37      	ldr	r3, [pc, #220]	; (800ddf4 <tcp_enqueue_flags+0x1bc>)
 800dd16:	f240 4242 	movw	r2, #1090	; 0x442
 800dd1a:	493b      	ldr	r1, [pc, #236]	; (800de08 <tcp_enqueue_flags+0x1d0>)
 800dd1c:	4837      	ldr	r0, [pc, #220]	; (800ddfc <tcp_enqueue_flags+0x1c4>)
 800dd1e:	f006 fe99 	bl	8014a54 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	891b      	ldrh	r3, [r3, #8]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d006      	beq.n	800dd38 <tcp_enqueue_flags+0x100>
 800dd2a:	4b32      	ldr	r3, [pc, #200]	; (800ddf4 <tcp_enqueue_flags+0x1bc>)
 800dd2c:	f240 4243 	movw	r2, #1091	; 0x443
 800dd30:	4936      	ldr	r1, [pc, #216]	; (800de0c <tcp_enqueue_flags+0x1d4>)
 800dd32:	4832      	ldr	r0, [pc, #200]	; (800ddfc <tcp_enqueue_flags+0x1c4>)
 800dd34:	f006 fe8e 	bl	8014a54 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d103      	bne.n	800dd48 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	66da      	str	r2, [r3, #108]	; 0x6c
 800dd46:	e00d      	b.n	800dd64 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd4c:	61bb      	str	r3, [r7, #24]
 800dd4e:	e002      	b.n	800dd56 <tcp_enqueue_flags+0x11e>
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	61bb      	str	r3, [r7, #24]
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d1f8      	bne.n	800dd50 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2200      	movs	r2, #0
 800dd68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dd6c:	78fb      	ldrb	r3, [r7, #3]
 800dd6e:	f003 0302 	and.w	r3, r3, #2
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d104      	bne.n	800dd80 <tcp_enqueue_flags+0x148>
 800dd76:	78fb      	ldrb	r3, [r7, #3]
 800dd78:	f003 0301 	and.w	r3, r3, #1
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d004      	beq.n	800dd8a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dd8a:	78fb      	ldrb	r3, [r7, #3]
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d006      	beq.n	800dda2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	8b5b      	ldrh	r3, [r3, #26]
 800dd98:	f043 0320 	orr.w	r3, r3, #32
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fb fc36 	bl	8009618 <pbuf_clen>
 800ddac:	4603      	mov	r3, r0
 800ddae:	461a      	mov	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ddb6:	4413      	add	r3, r2
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00e      	beq.n	800dde8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10a      	bne.n	800dde8 <tcp_enqueue_flags+0x1b0>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d106      	bne.n	800dde8 <tcp_enqueue_flags+0x1b0>
 800ddda:	4b06      	ldr	r3, [pc, #24]	; (800ddf4 <tcp_enqueue_flags+0x1bc>)
 800dddc:	f240 4265 	movw	r2, #1125	; 0x465
 800dde0:	490b      	ldr	r1, [pc, #44]	; (800de10 <tcp_enqueue_flags+0x1d8>)
 800dde2:	4806      	ldr	r0, [pc, #24]	; (800ddfc <tcp_enqueue_flags+0x1c4>)
 800dde4:	f006 fe36 	bl	8014a54 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dde8:	2300      	movs	r3, #0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3720      	adds	r7, #32
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
 800ddf2:	bf00      	nop
 800ddf4:	08016a0c 	.word	0x08016a0c
 800ddf8:	08016e30 	.word	0x08016e30
 800ddfc:	08016a60 	.word	0x08016a60
 800de00:	08016e88 	.word	0x08016e88
 800de04:	08016ea8 	.word	0x08016ea8
 800de08:	08016ee4 	.word	0x08016ee4
 800de0c:	08016efc 	.word	0x08016efc
 800de10:	08016f28 	.word	0x08016f28

0800de14 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800de14:	b5b0      	push	{r4, r5, r7, lr}
 800de16:	b08a      	sub	sp, #40	; 0x28
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d106      	bne.n	800de30 <tcp_output+0x1c>
 800de22:	4b9e      	ldr	r3, [pc, #632]	; (800e09c <tcp_output+0x288>)
 800de24:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800de28:	499d      	ldr	r1, [pc, #628]	; (800e0a0 <tcp_output+0x28c>)
 800de2a:	489e      	ldr	r0, [pc, #632]	; (800e0a4 <tcp_output+0x290>)
 800de2c:	f006 fe12 	bl	8014a54 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	7d1b      	ldrb	r3, [r3, #20]
 800de34:	2b01      	cmp	r3, #1
 800de36:	d106      	bne.n	800de46 <tcp_output+0x32>
 800de38:	4b98      	ldr	r3, [pc, #608]	; (800e09c <tcp_output+0x288>)
 800de3a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800de3e:	499a      	ldr	r1, [pc, #616]	; (800e0a8 <tcp_output+0x294>)
 800de40:	4898      	ldr	r0, [pc, #608]	; (800e0a4 <tcp_output+0x290>)
 800de42:	f006 fe07 	bl	8014a54 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800de46:	4b99      	ldr	r3, [pc, #612]	; (800e0ac <tcp_output+0x298>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d101      	bne.n	800de54 <tcp_output+0x40>
    return ERR_OK;
 800de50:	2300      	movs	r3, #0
 800de52:	e1ce      	b.n	800e1f2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de60:	4293      	cmp	r3, r2
 800de62:	bf28      	it	cs
 800de64:	4613      	movcs	r3, r2
 800de66:	b29b      	uxth	r3, r3
 800de68:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de6e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	2b00      	cmp	r3, #0
 800de74:	d10b      	bne.n	800de8e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	8b5b      	ldrh	r3, [r3, #26]
 800de7a:	f003 0302 	and.w	r3, r3, #2
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f000 81aa 	beq.w	800e1d8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 fdcb 	bl	800ea20 <tcp_send_empty_ack>
 800de8a:	4603      	mov	r3, r0
 800de8c:	e1b1      	b.n	800e1f2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800de8e:	6879      	ldr	r1, [r7, #4]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3304      	adds	r3, #4
 800de94:	461a      	mov	r2, r3
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f7ff fc7c 	bl	800d794 <tcp_route>
 800de9c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <tcp_output+0x96>
    return ERR_RTE;
 800dea4:	f06f 0303 	mvn.w	r3, #3
 800dea8:	e1a3      	b.n	800e1f2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d003      	beq.n	800deb8 <tcp_output+0xa4>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d111      	bne.n	800dedc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d002      	beq.n	800dec4 <tcp_output+0xb0>
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	3304      	adds	r3, #4
 800dec2:	e000      	b.n	800dec6 <tcp_output+0xb2>
 800dec4:	2300      	movs	r3, #0
 800dec6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d102      	bne.n	800ded4 <tcp_output+0xc0>
      return ERR_RTE;
 800dece:	f06f 0303 	mvn.w	r3, #3
 800ded2:	e18e      	b.n	800e1f2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	681a      	ldr	r2, [r3, #0]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7f9 ff21 	bl	8007d2a <lwip_htonl>
 800dee8:	4602      	mov	r2, r0
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def2:	8912      	ldrh	r2, [r2, #8]
 800def4:	4413      	add	r3, r2
 800def6:	69ba      	ldr	r2, [r7, #24]
 800def8:	429a      	cmp	r2, r3
 800defa:	d227      	bcs.n	800df4c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800df02:	461a      	mov	r2, r3
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	4293      	cmp	r3, r2
 800df08:	d114      	bne.n	800df34 <tcp_output+0x120>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d110      	bne.n	800df34 <tcp_output+0x120>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d10b      	bne.n	800df34 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	8b5b      	ldrh	r3, [r3, #26]
 800df38:	f003 0302 	and.w	r3, r3, #2
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	f000 814d 	beq.w	800e1dc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fd6c 	bl	800ea20 <tcp_send_empty_ack>
 800df48:	4603      	mov	r3, r0
 800df4a:	e152      	b.n	800e1f2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df58:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800df5a:	6a3b      	ldr	r3, [r7, #32]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f000 811c 	beq.w	800e19a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800df62:	e002      	b.n	800df6a <tcp_output+0x156>
 800df64:	6a3b      	ldr	r3, [r7, #32]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	623b      	str	r3, [r7, #32]
 800df6a:	6a3b      	ldr	r3, [r7, #32]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1f8      	bne.n	800df64 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800df72:	e112      	b.n	800e19a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800df74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	899b      	ldrh	r3, [r3, #12]
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7f9 febf 	bl	8007d00 <lwip_htons>
 800df82:	4603      	mov	r3, r0
 800df84:	b2db      	uxtb	r3, r3
 800df86:	f003 0304 	and.w	r3, r3, #4
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d006      	beq.n	800df9c <tcp_output+0x188>
 800df8e:	4b43      	ldr	r3, [pc, #268]	; (800e09c <tcp_output+0x288>)
 800df90:	f240 5236 	movw	r2, #1334	; 0x536
 800df94:	4946      	ldr	r1, [pc, #280]	; (800e0b0 <tcp_output+0x29c>)
 800df96:	4843      	ldr	r0, [pc, #268]	; (800e0a4 <tcp_output+0x290>)
 800df98:	f006 fd5c 	bl	8014a54 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d01f      	beq.n	800dfe4 <tcp_output+0x1d0>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	8b5b      	ldrh	r3, [r3, #26]
 800dfa8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d119      	bne.n	800dfe4 <tcp_output+0x1d0>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00b      	beq.n	800dfd0 <tcp_output+0x1bc>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d110      	bne.n	800dfe4 <tcp_output+0x1d0>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfc6:	891a      	ldrh	r2, [r3, #8]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d209      	bcs.n	800dfe4 <tcp_output+0x1d0>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d004      	beq.n	800dfe4 <tcp_output+0x1d0>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dfe0:	2b08      	cmp	r3, #8
 800dfe2:	d901      	bls.n	800dfe8 <tcp_output+0x1d4>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e000      	b.n	800dfea <tcp_output+0x1d6>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d106      	bne.n	800dffc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	8b5b      	ldrh	r3, [r3, #26]
 800dff2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	f000 80e4 	beq.w	800e1c4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	7d1b      	ldrb	r3, [r3, #20]
 800e000:	2b02      	cmp	r3, #2
 800e002:	d00d      	beq.n	800e020 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	899b      	ldrh	r3, [r3, #12]
 800e00a:	b29c      	uxth	r4, r3
 800e00c:	2010      	movs	r0, #16
 800e00e:	f7f9 fe77 	bl	8007d00 <lwip_htons>
 800e012:	4603      	mov	r3, r0
 800e014:	461a      	mov	r2, r3
 800e016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	4322      	orrs	r2, r4
 800e01c:	b292      	uxth	r2, r2
 800e01e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e020:	697a      	ldr	r2, [r7, #20]
 800e022:	6879      	ldr	r1, [r7, #4]
 800e024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e026:	f000 f909 	bl	800e23c <tcp_output_segment>
 800e02a:	4603      	mov	r3, r0
 800e02c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d009      	beq.n	800e04a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	8b5b      	ldrh	r3, [r3, #26]
 800e03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e03e:	b29a      	uxth	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	835a      	strh	r2, [r3, #26]
      return err;
 800e044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e048:	e0d3      	b.n	800e1f2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	7d1b      	ldrb	r3, [r3, #20]
 800e056:	2b02      	cmp	r3, #2
 800e058:	d006      	beq.n	800e068 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	8b5b      	ldrh	r3, [r3, #26]
 800e05e:	f023 0303 	bic.w	r3, r3, #3
 800e062:	b29a      	uxth	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	4618      	mov	r0, r3
 800e070:	f7f9 fe5b 	bl	8007d2a <lwip_htonl>
 800e074:	4604      	mov	r4, r0
 800e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e078:	891b      	ldrh	r3, [r3, #8]
 800e07a:	461d      	mov	r5, r3
 800e07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	899b      	ldrh	r3, [r3, #12]
 800e082:	b29b      	uxth	r3, r3
 800e084:	4618      	mov	r0, r3
 800e086:	f7f9 fe3b 	bl	8007d00 <lwip_htons>
 800e08a:	4603      	mov	r3, r0
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	f003 0303 	and.w	r3, r3, #3
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00e      	beq.n	800e0b4 <tcp_output+0x2a0>
 800e096:	2301      	movs	r3, #1
 800e098:	e00d      	b.n	800e0b6 <tcp_output+0x2a2>
 800e09a:	bf00      	nop
 800e09c:	08016a0c 	.word	0x08016a0c
 800e0a0:	08016f50 	.word	0x08016f50
 800e0a4:	08016a60 	.word	0x08016a60
 800e0a8:	08016f68 	.word	0x08016f68
 800e0ac:	20018d50 	.word	0x20018d50
 800e0b0:	08016f90 	.word	0x08016f90
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	442b      	add	r3, r5
 800e0b8:	4423      	add	r3, r4
 800e0ba:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	da02      	bge.n	800e0ce <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d0:	891b      	ldrh	r3, [r3, #8]
 800e0d2:	461c      	mov	r4, r3
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	68db      	ldr	r3, [r3, #12]
 800e0d8:	899b      	ldrh	r3, [r3, #12]
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7f9 fe0f 	bl	8007d00 <lwip_htons>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	f003 0303 	and.w	r3, r3, #3
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d001      	beq.n	800e0f2 <tcp_output+0x2de>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e000      	b.n	800e0f4 <tcp_output+0x2e0>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	4423      	add	r3, r4
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d049      	beq.n	800e18e <tcp_output+0x37a>
      seg->next = NULL;
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e104:	2b00      	cmp	r3, #0
 800e106:	d105      	bne.n	800e114 <tcp_output+0x300>
        pcb->unacked = seg;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e10c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800e10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e110:	623b      	str	r3, [r7, #32]
 800e112:	e03f      	b.n	800e194 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	685b      	ldr	r3, [r3, #4]
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7f9 fe05 	bl	8007d2a <lwip_htonl>
 800e120:	4604      	mov	r4, r0
 800e122:	6a3b      	ldr	r3, [r7, #32]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	4618      	mov	r0, r3
 800e12a:	f7f9 fdfe 	bl	8007d2a <lwip_htonl>
 800e12e:	4603      	mov	r3, r0
 800e130:	1ae3      	subs	r3, r4, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	da24      	bge.n	800e180 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	3370      	adds	r3, #112	; 0x70
 800e13a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e13c:	e002      	b.n	800e144 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d011      	beq.n	800e170 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	4618      	mov	r0, r3
 800e156:	f7f9 fde8 	bl	8007d2a <lwip_htonl>
 800e15a:	4604      	mov	r4, r0
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	4618      	mov	r0, r3
 800e164:	f7f9 fde1 	bl	8007d2a <lwip_htonl>
 800e168:	4603      	mov	r3, r0
 800e16a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	dbe6      	blt.n	800e13e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	e009      	b.n	800e194 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e180:	6a3b      	ldr	r3, [r7, #32]
 800e182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e184:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e186:	6a3b      	ldr	r3, [r7, #32]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	623b      	str	r3, [r7, #32]
 800e18c:	e002      	b.n	800e194 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e18e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e190:	f7fc fc43 	bl	800aa1a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e198:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d012      	beq.n	800e1c6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7f9 fdbf 	bl	8007d2a <lwip_htonl>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1b2:	1ad3      	subs	r3, r2, r3
 800e1b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1b6:	8912      	ldrh	r2, [r2, #8]
 800e1b8:	4413      	add	r3, r2
  while (seg != NULL &&
 800e1ba:	69ba      	ldr	r2, [r7, #24]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	f4bf aed9 	bcs.w	800df74 <tcp_output+0x160>
 800e1c2:	e000      	b.n	800e1c6 <tcp_output+0x3b2>
      break;
 800e1c4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d108      	bne.n	800e1e0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800e1d6:	e004      	b.n	800e1e2 <tcp_output+0x3ce>
    goto output_done;
 800e1d8:	bf00      	nop
 800e1da:	e002      	b.n	800e1e2 <tcp_output+0x3ce>
    goto output_done;
 800e1dc:	bf00      	nop
 800e1de:	e000      	b.n	800e1e2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e1e0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	8b5b      	ldrh	r3, [r3, #26]
 800e1e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e1f0:	2300      	movs	r3, #0
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3728      	adds	r7, #40	; 0x28
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bdb0      	pop	{r4, r5, r7, pc}
 800e1fa:	bf00      	nop

0800e1fc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d106      	bne.n	800e218 <tcp_output_segment_busy+0x1c>
 800e20a:	4b09      	ldr	r3, [pc, #36]	; (800e230 <tcp_output_segment_busy+0x34>)
 800e20c:	f240 529a 	movw	r2, #1434	; 0x59a
 800e210:	4908      	ldr	r1, [pc, #32]	; (800e234 <tcp_output_segment_busy+0x38>)
 800e212:	4809      	ldr	r0, [pc, #36]	; (800e238 <tcp_output_segment_busy+0x3c>)
 800e214:	f006 fc1e 	bl	8014a54 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	7b9b      	ldrb	r3, [r3, #14]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d001      	beq.n	800e226 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e222:	2301      	movs	r3, #1
 800e224:	e000      	b.n	800e228 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e226:	2300      	movs	r3, #0
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	08016a0c 	.word	0x08016a0c
 800e234:	08016fa8 	.word	0x08016fa8
 800e238:	08016a60 	.word	0x08016a60

0800e23c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e23c:	b5b0      	push	{r4, r5, r7, lr}
 800e23e:	b08c      	sub	sp, #48	; 0x30
 800e240:	af04      	add	r7, sp, #16
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d106      	bne.n	800e25c <tcp_output_segment+0x20>
 800e24e:	4b63      	ldr	r3, [pc, #396]	; (800e3dc <tcp_output_segment+0x1a0>)
 800e250:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800e254:	4962      	ldr	r1, [pc, #392]	; (800e3e0 <tcp_output_segment+0x1a4>)
 800e256:	4863      	ldr	r0, [pc, #396]	; (800e3e4 <tcp_output_segment+0x1a8>)
 800e258:	f006 fbfc 	bl	8014a54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d106      	bne.n	800e270 <tcp_output_segment+0x34>
 800e262:	4b5e      	ldr	r3, [pc, #376]	; (800e3dc <tcp_output_segment+0x1a0>)
 800e264:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800e268:	495f      	ldr	r1, [pc, #380]	; (800e3e8 <tcp_output_segment+0x1ac>)
 800e26a:	485e      	ldr	r0, [pc, #376]	; (800e3e4 <tcp_output_segment+0x1a8>)
 800e26c:	f006 fbf2 	bl	8014a54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d106      	bne.n	800e284 <tcp_output_segment+0x48>
 800e276:	4b59      	ldr	r3, [pc, #356]	; (800e3dc <tcp_output_segment+0x1a0>)
 800e278:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800e27c:	495b      	ldr	r1, [pc, #364]	; (800e3ec <tcp_output_segment+0x1b0>)
 800e27e:	4859      	ldr	r0, [pc, #356]	; (800e3e4 <tcp_output_segment+0x1a8>)
 800e280:	f006 fbe8 	bl	8014a54 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f7ff ffb9 	bl	800e1fc <tcp_output_segment_busy>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d001      	beq.n	800e294 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	e09f      	b.n	800e3d4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	68dc      	ldr	r4, [r3, #12]
 800e29c:	4610      	mov	r0, r2
 800e29e:	f7f9 fd44 	bl	8007d2a <lwip_htonl>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	68dc      	ldr	r4, [r3, #12]
 800e2ae:	4610      	mov	r0, r2
 800e2b0:	f7f9 fd26 	bl	8007d00 <lwip_htons>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2bc:	68ba      	ldr	r2, [r7, #8]
 800e2be:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e2c0:	441a      	add	r2, r3
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	68db      	ldr	r3, [r3, #12]
 800e2ca:	3314      	adds	r3, #20
 800e2cc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	7a9b      	ldrb	r3, [r3, #10]
 800e2d2:	f003 0301 	and.w	r3, r3, #1
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d015      	beq.n	800e306 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	3304      	adds	r3, #4
 800e2de:	461a      	mov	r2, r3
 800e2e0:	6879      	ldr	r1, [r7, #4]
 800e2e2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e2e6:	f7fc fe8f 	bl	800b008 <tcp_eff_send_mss_netif>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e2ee:	8b7b      	ldrh	r3, [r7, #26]
 800e2f0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f7f9 fd18 	bl	8007d2a <lwip_htonl>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	69fb      	ldr	r3, [r7, #28]
 800e2fe:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	3304      	adds	r3, #4
 800e304:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	da02      	bge.n	800e316 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	2200      	movs	r2, #0
 800e314:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d10c      	bne.n	800e338 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e31e:	4b34      	ldr	r3, [pc, #208]	; (800e3f0 <tcp_output_segment+0x1b4>)
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7f9 fcfc 	bl	8007d2a <lwip_htonl>
 800e332:	4602      	mov	r2, r0
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	68da      	ldr	r2, [r3, #12]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	1ad3      	subs	r3, r2, r3
 800e344:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	8959      	ldrh	r1, [r3, #10]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	8b3a      	ldrh	r2, [r7, #24]
 800e352:	1a8a      	subs	r2, r1, r2
 800e354:	b292      	uxth	r2, r2
 800e356:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	8919      	ldrh	r1, [r3, #8]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	8b3a      	ldrh	r2, [r7, #24]
 800e364:	1a8a      	subs	r2, r1, r2
 800e366:	b292      	uxth	r2, r2
 800e368:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	68d2      	ldr	r2, [r2, #12]
 800e372:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	2200      	movs	r2, #0
 800e37a:	741a      	strb	r2, [r3, #16]
 800e37c:	2200      	movs	r2, #0
 800e37e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	f103 0214 	add.w	r2, r3, #20
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	7a9b      	ldrb	r3, [r3, #10]
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	f003 0304 	and.w	r3, r3, #4
 800e392:	4413      	add	r3, r2
 800e394:	69fa      	ldr	r2, [r7, #28]
 800e396:	429a      	cmp	r2, r3
 800e398:	d006      	beq.n	800e3a8 <tcp_output_segment+0x16c>
 800e39a:	4b10      	ldr	r3, [pc, #64]	; (800e3dc <tcp_output_segment+0x1a0>)
 800e39c:	f240 621c 	movw	r2, #1564	; 0x61c
 800e3a0:	4914      	ldr	r1, [pc, #80]	; (800e3f4 <tcp_output_segment+0x1b8>)
 800e3a2:	4810      	ldr	r0, [pc, #64]	; (800e3e4 <tcp_output_segment+0x1a8>)
 800e3a4:	f006 fb56 	bl	8014a54 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	6858      	ldr	r0, [r3, #4]
 800e3ac:	68b9      	ldr	r1, [r7, #8]
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	1d1c      	adds	r4, r3, #4
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	7add      	ldrb	r5, [r3, #11]
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	7a9b      	ldrb	r3, [r3, #10]
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	9202      	str	r2, [sp, #8]
 800e3be:	2206      	movs	r2, #6
 800e3c0:	9201      	str	r2, [sp, #4]
 800e3c2:	9300      	str	r3, [sp, #0]
 800e3c4:	462b      	mov	r3, r5
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	f004 fc1c 	bl	8012c04 <ip4_output_if>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e3d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3720      	adds	r7, #32
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bdb0      	pop	{r4, r5, r7, pc}
 800e3dc:	08016a0c 	.word	0x08016a0c
 800e3e0:	08016fd0 	.word	0x08016fd0
 800e3e4:	08016a60 	.word	0x08016a60
 800e3e8:	08016ff0 	.word	0x08016ff0
 800e3ec:	08017010 	.word	0x08017010
 800e3f0:	20018d40 	.word	0x20018d40
 800e3f4:	08017034 	.word	0x08017034

0800e3f8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e3f8:	b5b0      	push	{r4, r5, r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d106      	bne.n	800e414 <tcp_rexmit_rto_prepare+0x1c>
 800e406:	4b31      	ldr	r3, [pc, #196]	; (800e4cc <tcp_rexmit_rto_prepare+0xd4>)
 800e408:	f240 6263 	movw	r2, #1635	; 0x663
 800e40c:	4930      	ldr	r1, [pc, #192]	; (800e4d0 <tcp_rexmit_rto_prepare+0xd8>)
 800e40e:	4831      	ldr	r0, [pc, #196]	; (800e4d4 <tcp_rexmit_rto_prepare+0xdc>)
 800e410:	f006 fb20 	bl	8014a54 <iprintf>

  if (pcb->unacked == NULL) {
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d102      	bne.n	800e422 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e41c:	f06f 0305 	mvn.w	r3, #5
 800e420:	e050      	b.n	800e4c4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e426:	60fb      	str	r3, [r7, #12]
 800e428:	e00b      	b.n	800e442 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	f7ff fee6 	bl	800e1fc <tcp_output_segment_busy>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d002      	beq.n	800e43c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e436:	f06f 0305 	mvn.w	r3, #5
 800e43a:	e043      	b.n	800e4c4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	60fb      	str	r3, [r7, #12]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d1ef      	bne.n	800e42a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	f7ff fed6 	bl	800e1fc <tcp_output_segment_busy>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d002      	beq.n	800e45c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e456:	f06f 0305 	mvn.w	r3, #5
 800e45a:	e033      	b.n	800e4c4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2200      	movs	r2, #0
 800e470:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	8b5b      	ldrh	r3, [r3, #26]
 800e476:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	68db      	ldr	r3, [r3, #12]
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	4618      	mov	r0, r3
 800e488:	f7f9 fc4f 	bl	8007d2a <lwip_htonl>
 800e48c:	4604      	mov	r4, r0
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	891b      	ldrh	r3, [r3, #8]
 800e492:	461d      	mov	r5, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	899b      	ldrh	r3, [r3, #12]
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	4618      	mov	r0, r3
 800e49e:	f7f9 fc2f 	bl	8007d00 <lwip_htons>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	f003 0303 	and.w	r3, r3, #3
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d001      	beq.n	800e4b2 <tcp_rexmit_rto_prepare+0xba>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	e000      	b.n	800e4b4 <tcp_rexmit_rto_prepare+0xbc>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	442b      	add	r3, r5
 800e4b6:	18e2      	adds	r2, r4, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e4c2:	2300      	movs	r3, #0
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bdb0      	pop	{r4, r5, r7, pc}
 800e4cc:	08016a0c 	.word	0x08016a0c
 800e4d0:	08017048 	.word	0x08017048
 800e4d4:	08016a60 	.word	0x08016a60

0800e4d8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d106      	bne.n	800e4f4 <tcp_rexmit_rto_commit+0x1c>
 800e4e6:	4b0d      	ldr	r3, [pc, #52]	; (800e51c <tcp_rexmit_rto_commit+0x44>)
 800e4e8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e4ec:	490c      	ldr	r1, [pc, #48]	; (800e520 <tcp_rexmit_rto_commit+0x48>)
 800e4ee:	480d      	ldr	r0, [pc, #52]	; (800e524 <tcp_rexmit_rto_commit+0x4c>)
 800e4f0:	f006 fab0 	bl	8014a54 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4fa:	2bff      	cmp	r3, #255	; 0xff
 800e4fc:	d007      	beq.n	800e50e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e504:	3301      	adds	r3, #1
 800e506:	b2da      	uxtb	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7ff fc80 	bl	800de14 <tcp_output>
}
 800e514:	bf00      	nop
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	08016a0c 	.word	0x08016a0c
 800e520:	0801706c 	.word	0x0801706c
 800e524:	08016a60 	.word	0x08016a60

0800e528 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d106      	bne.n	800e544 <tcp_rexmit_rto+0x1c>
 800e536:	4b0a      	ldr	r3, [pc, #40]	; (800e560 <tcp_rexmit_rto+0x38>)
 800e538:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e53c:	4909      	ldr	r1, [pc, #36]	; (800e564 <tcp_rexmit_rto+0x3c>)
 800e53e:	480a      	ldr	r0, [pc, #40]	; (800e568 <tcp_rexmit_rto+0x40>)
 800e540:	f006 fa88 	bl	8014a54 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f7ff ff57 	bl	800e3f8 <tcp_rexmit_rto_prepare>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d102      	bne.n	800e556 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f7ff ffc1 	bl	800e4d8 <tcp_rexmit_rto_commit>
  }
}
 800e556:	bf00      	nop
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}
 800e55e:	bf00      	nop
 800e560:	08016a0c 	.word	0x08016a0c
 800e564:	08017090 	.word	0x08017090
 800e568:	08016a60 	.word	0x08016a60

0800e56c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e56c:	b590      	push	{r4, r7, lr}
 800e56e:	b085      	sub	sp, #20
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d106      	bne.n	800e588 <tcp_rexmit+0x1c>
 800e57a:	4b2f      	ldr	r3, [pc, #188]	; (800e638 <tcp_rexmit+0xcc>)
 800e57c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e580:	492e      	ldr	r1, [pc, #184]	; (800e63c <tcp_rexmit+0xd0>)
 800e582:	482f      	ldr	r0, [pc, #188]	; (800e640 <tcp_rexmit+0xd4>)
 800e584:	f006 fa66 	bl	8014a54 <iprintf>

  if (pcb->unacked == NULL) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d102      	bne.n	800e596 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e590:	f06f 0305 	mvn.w	r3, #5
 800e594:	e04c      	b.n	800e630 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e59a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e59c:	68b8      	ldr	r0, [r7, #8]
 800e59e:	f7ff fe2d 	bl	800e1fc <tcp_output_segment_busy>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d002      	beq.n	800e5ae <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e5a8:	f06f 0305 	mvn.w	r3, #5
 800e5ac:	e040      	b.n	800e630 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	336c      	adds	r3, #108	; 0x6c
 800e5ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e5bc:	e002      	b.n	800e5c4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d011      	beq.n	800e5f0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7f9 fba8 	bl	8007d2a <lwip_htonl>
 800e5da:	4604      	mov	r4, r0
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	685b      	ldr	r3, [r3, #4]
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7f9 fba1 	bl	8007d2a <lwip_htonl>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	dbe6      	blt.n	800e5be <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	68ba      	ldr	r2, [r7, #8]
 800e5fc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d103      	bne.n	800e60e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2200      	movs	r2, #0
 800e60a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e614:	2bff      	cmp	r3, #255	; 0xff
 800e616:	d007      	beq.n	800e628 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e61e:	3301      	adds	r3, #1
 800e620:	b2da      	uxtb	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e62e:	2300      	movs	r3, #0
}
 800e630:	4618      	mov	r0, r3
 800e632:	3714      	adds	r7, #20
 800e634:	46bd      	mov	sp, r7
 800e636:	bd90      	pop	{r4, r7, pc}
 800e638:	08016a0c 	.word	0x08016a0c
 800e63c:	080170ac 	.word	0x080170ac
 800e640:	08016a60 	.word	0x08016a60

0800e644 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d106      	bne.n	800e660 <tcp_rexmit_fast+0x1c>
 800e652:	4b2a      	ldr	r3, [pc, #168]	; (800e6fc <tcp_rexmit_fast+0xb8>)
 800e654:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e658:	4929      	ldr	r1, [pc, #164]	; (800e700 <tcp_rexmit_fast+0xbc>)
 800e65a:	482a      	ldr	r0, [pc, #168]	; (800e704 <tcp_rexmit_fast+0xc0>)
 800e65c:	f006 f9fa 	bl	8014a54 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e664:	2b00      	cmp	r3, #0
 800e666:	d044      	beq.n	800e6f2 <tcp_rexmit_fast+0xae>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	8b5b      	ldrh	r3, [r3, #26]
 800e66c:	f003 0304 	and.w	r3, r3, #4
 800e670:	2b00      	cmp	r3, #0
 800e672:	d13e      	bne.n	800e6f2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f7ff ff79 	bl	800e56c <tcp_rexmit>
 800e67a:	4603      	mov	r3, r0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d138      	bne.n	800e6f2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e68c:	4293      	cmp	r3, r2
 800e68e:	bf28      	it	cs
 800e690:	4613      	movcs	r3, r2
 800e692:	b29b      	uxth	r3, r3
 800e694:	0fda      	lsrs	r2, r3, #31
 800e696:	4413      	add	r3, r2
 800e698:	105b      	asrs	r3, r3, #1
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6ae:	005b      	lsls	r3, r3, #1
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d206      	bcs.n	800e6c2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	0049      	lsls	r1, r1, #1
 800e6d0:	440b      	add	r3, r1
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	4413      	add	r3, r2
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	8b5b      	ldrh	r3, [r3, #26]
 800e6e2:	f043 0304 	orr.w	r3, r3, #4
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e6f2:	bf00      	nop
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	08016a0c 	.word	0x08016a0c
 800e700:	080170c4 	.word	0x080170c4
 800e704:	08016a60 	.word	0x08016a60

0800e708 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b086      	sub	sp, #24
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	607b      	str	r3, [r7, #4]
 800e712:	460b      	mov	r3, r1
 800e714:	817b      	strh	r3, [r7, #10]
 800e716:	4613      	mov	r3, r2
 800e718:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e71a:	897a      	ldrh	r2, [r7, #10]
 800e71c:	893b      	ldrh	r3, [r7, #8]
 800e71e:	4413      	add	r3, r2
 800e720:	b29b      	uxth	r3, r3
 800e722:	3314      	adds	r3, #20
 800e724:	b29b      	uxth	r3, r3
 800e726:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e72a:	4619      	mov	r1, r3
 800e72c:	2022      	movs	r0, #34	; 0x22
 800e72e:	f7fa fc01 	bl	8008f34 <pbuf_alloc>
 800e732:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d04d      	beq.n	800e7d6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e73a:	897b      	ldrh	r3, [r7, #10]
 800e73c:	3313      	adds	r3, #19
 800e73e:	697a      	ldr	r2, [r7, #20]
 800e740:	8952      	ldrh	r2, [r2, #10]
 800e742:	4293      	cmp	r3, r2
 800e744:	db06      	blt.n	800e754 <tcp_output_alloc_header_common+0x4c>
 800e746:	4b26      	ldr	r3, [pc, #152]	; (800e7e0 <tcp_output_alloc_header_common+0xd8>)
 800e748:	f240 7223 	movw	r2, #1827	; 0x723
 800e74c:	4925      	ldr	r1, [pc, #148]	; (800e7e4 <tcp_output_alloc_header_common+0xdc>)
 800e74e:	4826      	ldr	r0, [pc, #152]	; (800e7e8 <tcp_output_alloc_header_common+0xe0>)
 800e750:	f006 f980 	bl	8014a54 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e75a:	8c3b      	ldrh	r3, [r7, #32]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7f9 facf 	bl	8007d00 <lwip_htons>
 800e762:	4603      	mov	r3, r0
 800e764:	461a      	mov	r2, r3
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e76a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7f9 fac7 	bl	8007d00 <lwip_htons>
 800e772:	4603      	mov	r3, r0
 800e774:	461a      	mov	r2, r3
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f7f9 fad2 	bl	8007d2a <lwip_htonl>
 800e786:	4602      	mov	r2, r0
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e78c:	897b      	ldrh	r3, [r7, #10]
 800e78e:	089b      	lsrs	r3, r3, #2
 800e790:	b29b      	uxth	r3, r3
 800e792:	3305      	adds	r3, #5
 800e794:	b29b      	uxth	r3, r3
 800e796:	031b      	lsls	r3, r3, #12
 800e798:	b29a      	uxth	r2, r3
 800e79a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	4313      	orrs	r3, r2
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7f9 faab 	bl	8007d00 <lwip_htons>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e7b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7f9 faa3 	bl	8007d00 <lwip_htons>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	461a      	mov	r2, r3
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	741a      	strb	r2, [r3, #16]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	749a      	strb	r2, [r3, #18]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e7d6:	697b      	ldr	r3, [r7, #20]
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3718      	adds	r7, #24
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	08016a0c 	.word	0x08016a0c
 800e7e4:	080170e4 	.word	0x080170e4
 800e7e8:	08016a60 	.word	0x08016a60

0800e7ec <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e7ec:	b5b0      	push	{r4, r5, r7, lr}
 800e7ee:	b08a      	sub	sp, #40	; 0x28
 800e7f0:	af04      	add	r7, sp, #16
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	607b      	str	r3, [r7, #4]
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	817b      	strh	r3, [r7, #10]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d106      	bne.n	800e812 <tcp_output_alloc_header+0x26>
 800e804:	4b15      	ldr	r3, [pc, #84]	; (800e85c <tcp_output_alloc_header+0x70>)
 800e806:	f240 7242 	movw	r2, #1858	; 0x742
 800e80a:	4915      	ldr	r1, [pc, #84]	; (800e860 <tcp_output_alloc_header+0x74>)
 800e80c:	4815      	ldr	r0, [pc, #84]	; (800e864 <tcp_output_alloc_header+0x78>)
 800e80e:	f006 f921 	bl	8014a54 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	8adb      	ldrh	r3, [r3, #22]
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	8b12      	ldrh	r2, [r2, #24]
 800e81e:	68f9      	ldr	r1, [r7, #12]
 800e820:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e822:	893d      	ldrh	r5, [r7, #8]
 800e824:	897c      	ldrh	r4, [r7, #10]
 800e826:	9103      	str	r1, [sp, #12]
 800e828:	2110      	movs	r1, #16
 800e82a:	9102      	str	r1, [sp, #8]
 800e82c:	9201      	str	r2, [sp, #4]
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	462a      	mov	r2, r5
 800e834:	4621      	mov	r1, r4
 800e836:	f7ff ff67 	bl	800e708 <tcp_output_alloc_header_common>
 800e83a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d006      	beq.n	800e850 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e846:	68fa      	ldr	r2, [r7, #12]
 800e848:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e84a:	441a      	add	r2, r3
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e850:	697b      	ldr	r3, [r7, #20]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3718      	adds	r7, #24
 800e856:	46bd      	mov	sp, r7
 800e858:	bdb0      	pop	{r4, r5, r7, pc}
 800e85a:	bf00      	nop
 800e85c:	08016a0c 	.word	0x08016a0c
 800e860:	08017114 	.word	0x08017114
 800e864:	08016a60 	.word	0x08016a60

0800e868 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b088      	sub	sp, #32
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	4611      	mov	r1, r2
 800e874:	461a      	mov	r2, r3
 800e876:	460b      	mov	r3, r1
 800e878:	71fb      	strb	r3, [r7, #7]
 800e87a:	4613      	mov	r3, r2
 800e87c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e87e:	2300      	movs	r3, #0
 800e880:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d106      	bne.n	800e896 <tcp_output_fill_options+0x2e>
 800e888:	4b13      	ldr	r3, [pc, #76]	; (800e8d8 <tcp_output_fill_options+0x70>)
 800e88a:	f240 7256 	movw	r2, #1878	; 0x756
 800e88e:	4913      	ldr	r1, [pc, #76]	; (800e8dc <tcp_output_fill_options+0x74>)
 800e890:	4813      	ldr	r0, [pc, #76]	; (800e8e0 <tcp_output_fill_options+0x78>)
 800e892:	f006 f8df 	bl	8014a54 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	3314      	adds	r3, #20
 800e8a0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e8a2:	69bb      	ldr	r3, [r7, #24]
 800e8a4:	f103 0214 	add.w	r2, r3, #20
 800e8a8:	8bfb      	ldrh	r3, [r7, #30]
 800e8aa:	009b      	lsls	r3, r3, #2
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	79fb      	ldrb	r3, [r7, #7]
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	f003 0304 	and.w	r3, r3, #4
 800e8b6:	440b      	add	r3, r1
 800e8b8:	4413      	add	r3, r2
 800e8ba:	697a      	ldr	r2, [r7, #20]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d006      	beq.n	800e8ce <tcp_output_fill_options+0x66>
 800e8c0:	4b05      	ldr	r3, [pc, #20]	; (800e8d8 <tcp_output_fill_options+0x70>)
 800e8c2:	f240 7275 	movw	r2, #1909	; 0x775
 800e8c6:	4907      	ldr	r1, [pc, #28]	; (800e8e4 <tcp_output_fill_options+0x7c>)
 800e8c8:	4805      	ldr	r0, [pc, #20]	; (800e8e0 <tcp_output_fill_options+0x78>)
 800e8ca:	f006 f8c3 	bl	8014a54 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e8ce:	bf00      	nop
 800e8d0:	3720      	adds	r7, #32
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	08016a0c 	.word	0x08016a0c
 800e8dc:	0801713c 	.word	0x0801713c
 800e8e0:	08016a60 	.word	0x08016a60
 800e8e4:	08017034 	.word	0x08017034

0800e8e8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b08a      	sub	sp, #40	; 0x28
 800e8ec:	af04      	add	r7, sp, #16
 800e8ee:	60f8      	str	r0, [r7, #12]
 800e8f0:	60b9      	str	r1, [r7, #8]
 800e8f2:	607a      	str	r2, [r7, #4]
 800e8f4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d106      	bne.n	800e90a <tcp_output_control_segment+0x22>
 800e8fc:	4b1c      	ldr	r3, [pc, #112]	; (800e970 <tcp_output_control_segment+0x88>)
 800e8fe:	f240 7287 	movw	r2, #1927	; 0x787
 800e902:	491c      	ldr	r1, [pc, #112]	; (800e974 <tcp_output_control_segment+0x8c>)
 800e904:	481c      	ldr	r0, [pc, #112]	; (800e978 <tcp_output_control_segment+0x90>)
 800e906:	f006 f8a5 	bl	8014a54 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e90a:	683a      	ldr	r2, [r7, #0]
 800e90c:	6879      	ldr	r1, [r7, #4]
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	f7fe ff40 	bl	800d794 <tcp_route>
 800e914:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d102      	bne.n	800e922 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e91c:	23fc      	movs	r3, #252	; 0xfc
 800e91e:	75fb      	strb	r3, [r7, #23]
 800e920:	e01c      	b.n	800e95c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d006      	beq.n	800e936 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	7adb      	ldrb	r3, [r3, #11]
 800e92c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	7a9b      	ldrb	r3, [r3, #10]
 800e932:	757b      	strb	r3, [r7, #21]
 800e934:	e003      	b.n	800e93e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e936:	23ff      	movs	r3, #255	; 0xff
 800e938:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e93a:	2300      	movs	r3, #0
 800e93c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e93e:	7dba      	ldrb	r2, [r7, #22]
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	9302      	str	r3, [sp, #8]
 800e944:	2306      	movs	r3, #6
 800e946:	9301      	str	r3, [sp, #4]
 800e948:	7d7b      	ldrb	r3, [r7, #21]
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	4613      	mov	r3, r2
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	6879      	ldr	r1, [r7, #4]
 800e952:	68b8      	ldr	r0, [r7, #8]
 800e954:	f004 f956 	bl	8012c04 <ip4_output_if>
 800e958:	4603      	mov	r3, r0
 800e95a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e95c:	68b8      	ldr	r0, [r7, #8]
 800e95e:	f7fa fdcd 	bl	80094fc <pbuf_free>
  return err;
 800e962:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e966:	4618      	mov	r0, r3
 800e968:	3718      	adds	r7, #24
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	08016a0c 	.word	0x08016a0c
 800e974:	08017164 	.word	0x08017164
 800e978:	08016a60 	.word	0x08016a60

0800e97c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e97c:	b590      	push	{r4, r7, lr}
 800e97e:	b08b      	sub	sp, #44	; 0x2c
 800e980:	af04      	add	r7, sp, #16
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
 800e988:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d106      	bne.n	800e99e <tcp_rst+0x22>
 800e990:	4b1f      	ldr	r3, [pc, #124]	; (800ea10 <tcp_rst+0x94>)
 800e992:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e996:	491f      	ldr	r1, [pc, #124]	; (800ea14 <tcp_rst+0x98>)
 800e998:	481f      	ldr	r0, [pc, #124]	; (800ea18 <tcp_rst+0x9c>)
 800e99a:	f006 f85b 	bl	8014a54 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d106      	bne.n	800e9b2 <tcp_rst+0x36>
 800e9a4:	4b1a      	ldr	r3, [pc, #104]	; (800ea10 <tcp_rst+0x94>)
 800e9a6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e9aa:	491c      	ldr	r1, [pc, #112]	; (800ea1c <tcp_rst+0xa0>)
 800e9ac:	481a      	ldr	r0, [pc, #104]	; (800ea18 <tcp_rst+0x9c>)
 800e9ae:	f006 f851 	bl	8014a54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e9b6:	f246 0308 	movw	r3, #24584	; 0x6008
 800e9ba:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e9bc:	7dfb      	ldrb	r3, [r7, #23]
 800e9be:	b29c      	uxth	r4, r3
 800e9c0:	68b8      	ldr	r0, [r7, #8]
 800e9c2:	f7f9 f9b2 	bl	8007d2a <lwip_htonl>
 800e9c6:	4602      	mov	r2, r0
 800e9c8:	8abb      	ldrh	r3, [r7, #20]
 800e9ca:	9303      	str	r3, [sp, #12]
 800e9cc:	2314      	movs	r3, #20
 800e9ce:	9302      	str	r3, [sp, #8]
 800e9d0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e9d2:	9301      	str	r3, [sp, #4]
 800e9d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	4613      	mov	r3, r2
 800e9da:	2200      	movs	r2, #0
 800e9dc:	4621      	mov	r1, r4
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f7ff fe92 	bl	800e708 <tcp_output_alloc_header_common>
 800e9e4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00c      	beq.n	800ea06 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e9ec:	7dfb      	ldrb	r3, [r7, #23]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	6939      	ldr	r1, [r7, #16]
 800e9f2:	68f8      	ldr	r0, [r7, #12]
 800e9f4:	f7ff ff38 	bl	800e868 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fa:	683a      	ldr	r2, [r7, #0]
 800e9fc:	6939      	ldr	r1, [r7, #16]
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff ff72 	bl	800e8e8 <tcp_output_control_segment>
 800ea04:	e000      	b.n	800ea08 <tcp_rst+0x8c>
    return;
 800ea06:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ea08:	371c      	adds	r7, #28
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd90      	pop	{r4, r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	08016a0c 	.word	0x08016a0c
 800ea14:	08017190 	.word	0x08017190
 800ea18:	08016a60 	.word	0x08016a60
 800ea1c:	080171ac 	.word	0x080171ac

0800ea20 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ea20:	b590      	push	{r4, r7, lr}
 800ea22:	b087      	sub	sp, #28
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d106      	bne.n	800ea44 <tcp_send_empty_ack+0x24>
 800ea36:	4b28      	ldr	r3, [pc, #160]	; (800ead8 <tcp_send_empty_ack+0xb8>)
 800ea38:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ea3c:	4927      	ldr	r1, [pc, #156]	; (800eadc <tcp_send_empty_ack+0xbc>)
 800ea3e:	4828      	ldr	r0, [pc, #160]	; (800eae0 <tcp_send_empty_ack+0xc0>)
 800ea40:	f006 f808 	bl	8014a54 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ea44:	7dfb      	ldrb	r3, [r7, #23]
 800ea46:	009b      	lsls	r3, r3, #2
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	f003 0304 	and.w	r3, r3, #4
 800ea4e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ea50:	7d7b      	ldrb	r3, [r7, #21]
 800ea52:	b29c      	uxth	r4, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7f9 f966 	bl	8007d2a <lwip_htonl>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2200      	movs	r2, #0
 800ea62:	4621      	mov	r1, r4
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f7ff fec1 	bl	800e7ec <tcp_output_alloc_header>
 800ea6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d109      	bne.n	800ea86 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	8b5b      	ldrh	r3, [r3, #26]
 800ea76:	f043 0303 	orr.w	r3, r3, #3
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ea80:	f06f 0301 	mvn.w	r3, #1
 800ea84:	e023      	b.n	800eace <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ea86:	7dbb      	ldrb	r3, [r7, #22]
 800ea88:	7dfa      	ldrb	r2, [r7, #23]
 800ea8a:	6939      	ldr	r1, [r7, #16]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f7ff feeb 	bl	800e868 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	3304      	adds	r3, #4
 800ea98:	6939      	ldr	r1, [r7, #16]
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	f7ff ff24 	bl	800e8e8 <tcp_output_control_segment>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800eaa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d007      	beq.n	800eabc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	8b5b      	ldrh	r3, [r3, #26]
 800eab0:	f043 0303 	orr.w	r3, r3, #3
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	835a      	strh	r2, [r3, #26]
 800eaba:	e006      	b.n	800eaca <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	8b5b      	ldrh	r3, [r3, #26]
 800eac0:	f023 0303 	bic.w	r3, r3, #3
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800eaca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eace:	4618      	mov	r0, r3
 800ead0:	371c      	adds	r7, #28
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd90      	pop	{r4, r7, pc}
 800ead6:	bf00      	nop
 800ead8:	08016a0c 	.word	0x08016a0c
 800eadc:	080171c8 	.word	0x080171c8
 800eae0:	08016a60 	.word	0x08016a60

0800eae4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800eae4:	b590      	push	{r4, r7, lr}
 800eae6:	b087      	sub	sp, #28
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eaec:	2300      	movs	r3, #0
 800eaee:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d106      	bne.n	800eb04 <tcp_keepalive+0x20>
 800eaf6:	4b18      	ldr	r3, [pc, #96]	; (800eb58 <tcp_keepalive+0x74>)
 800eaf8:	f640 0224 	movw	r2, #2084	; 0x824
 800eafc:	4917      	ldr	r1, [pc, #92]	; (800eb5c <tcp_keepalive+0x78>)
 800eafe:	4818      	ldr	r0, [pc, #96]	; (800eb60 <tcp_keepalive+0x7c>)
 800eb00:	f005 ffa8 	bl	8014a54 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800eb04:	7dfb      	ldrb	r3, [r7, #23]
 800eb06:	b29c      	uxth	r4, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb0c:	3b01      	subs	r3, #1
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7f9 f90b 	bl	8007d2a <lwip_htonl>
 800eb14:	4603      	mov	r3, r0
 800eb16:	2200      	movs	r2, #0
 800eb18:	4621      	mov	r1, r4
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f7ff fe66 	bl	800e7ec <tcp_output_alloc_header>
 800eb20:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d102      	bne.n	800eb2e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800eb28:	f04f 33ff 	mov.w	r3, #4294967295
 800eb2c:	e010      	b.n	800eb50 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb2e:	7dfb      	ldrb	r3, [r7, #23]
 800eb30:	2200      	movs	r2, #0
 800eb32:	6939      	ldr	r1, [r7, #16]
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7ff fe97 	bl	800e868 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	3304      	adds	r3, #4
 800eb40:	6939      	ldr	r1, [r7, #16]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7ff fed0 	bl	800e8e8 <tcp_output_control_segment>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eb4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	371c      	adds	r7, #28
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd90      	pop	{r4, r7, pc}
 800eb58:	08016a0c 	.word	0x08016a0c
 800eb5c:	080171e8 	.word	0x080171e8
 800eb60:	08016a60 	.word	0x08016a60

0800eb64 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800eb64:	b590      	push	{r4, r7, lr}
 800eb66:	b08b      	sub	sp, #44	; 0x2c
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d106      	bne.n	800eb86 <tcp_zero_window_probe+0x22>
 800eb78:	4b4c      	ldr	r3, [pc, #304]	; (800ecac <tcp_zero_window_probe+0x148>)
 800eb7a:	f640 024f 	movw	r2, #2127	; 0x84f
 800eb7e:	494c      	ldr	r1, [pc, #304]	; (800ecb0 <tcp_zero_window_probe+0x14c>)
 800eb80:	484c      	ldr	r0, [pc, #304]	; (800ecb4 <tcp_zero_window_probe+0x150>)
 800eb82:	f005 ff67 	bl	8014a54 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb8a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800eb8c:	6a3b      	ldr	r3, [r7, #32]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d101      	bne.n	800eb96 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	e086      	b.n	800eca4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eb9c:	2bff      	cmp	r3, #255	; 0xff
 800eb9e:	d007      	beq.n	800ebb0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eba6:	3301      	adds	r3, #1
 800eba8:	b2da      	uxtb	r2, r3
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	899b      	ldrh	r3, [r3, #12]
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7f9 f8a1 	bl	8007d00 <lwip_htons>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	f003 0301 	and.w	r3, r3, #1
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d005      	beq.n	800ebd6 <tcp_zero_window_probe+0x72>
 800ebca:	6a3b      	ldr	r3, [r7, #32]
 800ebcc:	891b      	ldrh	r3, [r3, #8]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d101      	bne.n	800ebd6 <tcp_zero_window_probe+0x72>
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e000      	b.n	800ebd8 <tcp_zero_window_probe+0x74>
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ebda:	7ffb      	ldrb	r3, [r7, #31]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	bf0c      	ite	eq
 800ebe0:	2301      	moveq	r3, #1
 800ebe2:	2300      	movne	r3, #0
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ebe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebec:	b299      	uxth	r1, r3
 800ebee:	6a3b      	ldr	r3, [r7, #32]
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	8bba      	ldrh	r2, [r7, #28]
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f7ff fdf8 	bl	800e7ec <tcp_output_alloc_header>
 800ebfc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d102      	bne.n	800ec0a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ec04:	f04f 33ff 	mov.w	r3, #4294967295
 800ec08:	e04c      	b.n	800eca4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	685b      	ldr	r3, [r3, #4]
 800ec0e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ec10:	7ffb      	ldrb	r3, [r7, #31]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d011      	beq.n	800ec3a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	899b      	ldrh	r3, [r3, #12]
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	b21b      	sxth	r3, r3
 800ec1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ec22:	b21c      	sxth	r4, r3
 800ec24:	2011      	movs	r0, #17
 800ec26:	f7f9 f86b 	bl	8007d00 <lwip_htons>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	b21b      	sxth	r3, r3
 800ec2e:	4323      	orrs	r3, r4
 800ec30:	b21b      	sxth	r3, r3
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	819a      	strh	r2, [r3, #12]
 800ec38:	e010      	b.n	800ec5c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	3314      	adds	r3, #20
 800ec40:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ec42:	6a3b      	ldr	r3, [r7, #32]
 800ec44:	6858      	ldr	r0, [r3, #4]
 800ec46:	6a3b      	ldr	r3, [r7, #32]
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	891a      	ldrh	r2, [r3, #8]
 800ec4c:	6a3b      	ldr	r3, [r7, #32]
 800ec4e:	891b      	ldrh	r3, [r3, #8]
 800ec50:	1ad3      	subs	r3, r2, r3
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	2201      	movs	r2, #1
 800ec56:	6939      	ldr	r1, [r7, #16]
 800ec58:	f7fa fe56 	bl	8009908 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ec5c:	6a3b      	ldr	r3, [r7, #32]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7f9 f861 	bl	8007d2a <lwip_htonl>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	da02      	bge.n	800ec80 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	68fa      	ldr	r2, [r7, #12]
 800ec7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ec80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec84:	2200      	movs	r2, #0
 800ec86:	69b9      	ldr	r1, [r7, #24]
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f7ff fded 	bl	800e868 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ec8e:	687a      	ldr	r2, [r7, #4]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3304      	adds	r3, #4
 800ec94:	69b9      	ldr	r1, [r7, #24]
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff fe26 	bl	800e8e8 <tcp_output_control_segment>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eca0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	372c      	adds	r7, #44	; 0x2c
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd90      	pop	{r4, r7, pc}
 800ecac:	08016a0c 	.word	0x08016a0c
 800ecb0:	08017204 	.word	0x08017204
 800ecb4:	08016a60 	.word	0x08016a60

0800ecb8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b082      	sub	sp, #8
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ecc0:	f7fa ff10 	bl	8009ae4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ecc4:	4b0a      	ldr	r3, [pc, #40]	; (800ecf0 <tcpip_tcp_timer+0x38>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d103      	bne.n	800ecd4 <tcpip_tcp_timer+0x1c>
 800eccc:	4b09      	ldr	r3, [pc, #36]	; (800ecf4 <tcpip_tcp_timer+0x3c>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d005      	beq.n	800ece0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	4908      	ldr	r1, [pc, #32]	; (800ecf8 <tcpip_tcp_timer+0x40>)
 800ecd8:	20fa      	movs	r0, #250	; 0xfa
 800ecda:	f000 f8f3 	bl	800eec4 <sys_timeout>
 800ecde:	e003      	b.n	800ece8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ece0:	4b06      	ldr	r3, [pc, #24]	; (800ecfc <tcpip_tcp_timer+0x44>)
 800ece2:	2200      	movs	r2, #0
 800ece4:	601a      	str	r2, [r3, #0]
  }
}
 800ece6:	bf00      	nop
 800ece8:	bf00      	nop
 800ecea:	3708      	adds	r7, #8
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	20018d3c 	.word	0x20018d3c
 800ecf4:	20018d4c 	.word	0x20018d4c
 800ecf8:	0800ecb9 	.word	0x0800ecb9
 800ecfc:	20010760 	.word	0x20010760

0800ed00 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ed04:	4b0a      	ldr	r3, [pc, #40]	; (800ed30 <tcp_timer_needed+0x30>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d10f      	bne.n	800ed2c <tcp_timer_needed+0x2c>
 800ed0c:	4b09      	ldr	r3, [pc, #36]	; (800ed34 <tcp_timer_needed+0x34>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d103      	bne.n	800ed1c <tcp_timer_needed+0x1c>
 800ed14:	4b08      	ldr	r3, [pc, #32]	; (800ed38 <tcp_timer_needed+0x38>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d007      	beq.n	800ed2c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ed1c:	4b04      	ldr	r3, [pc, #16]	; (800ed30 <tcp_timer_needed+0x30>)
 800ed1e:	2201      	movs	r2, #1
 800ed20:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ed22:	2200      	movs	r2, #0
 800ed24:	4905      	ldr	r1, [pc, #20]	; (800ed3c <tcp_timer_needed+0x3c>)
 800ed26:	20fa      	movs	r0, #250	; 0xfa
 800ed28:	f000 f8cc 	bl	800eec4 <sys_timeout>
  }
}
 800ed2c:	bf00      	nop
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	20010760 	.word	0x20010760
 800ed34:	20018d3c 	.word	0x20018d3c
 800ed38:	20018d4c 	.word	0x20018d4c
 800ed3c:	0800ecb9 	.word	0x0800ecb9

0800ed40 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b086      	sub	sp, #24
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ed4c:	200a      	movs	r0, #10
 800ed4e:	f7f9 fcaf 	bl	80086b0 <memp_malloc>
 800ed52:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d109      	bne.n	800ed6e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d151      	bne.n	800ee04 <sys_timeout_abs+0xc4>
 800ed60:	4b2a      	ldr	r3, [pc, #168]	; (800ee0c <sys_timeout_abs+0xcc>)
 800ed62:	22be      	movs	r2, #190	; 0xbe
 800ed64:	492a      	ldr	r1, [pc, #168]	; (800ee10 <sys_timeout_abs+0xd0>)
 800ed66:	482b      	ldr	r0, [pc, #172]	; (800ee14 <sys_timeout_abs+0xd4>)
 800ed68:	f005 fe74 	bl	8014a54 <iprintf>
    return;
 800ed6c:	e04a      	b.n	800ee04 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	2200      	movs	r2, #0
 800ed72:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	68fa      	ldr	r2, [r7, #12]
 800ed84:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ed86:	4b24      	ldr	r3, [pc, #144]	; (800ee18 <sys_timeout_abs+0xd8>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d103      	bne.n	800ed96 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ed8e:	4a22      	ldr	r2, [pc, #136]	; (800ee18 <sys_timeout_abs+0xd8>)
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	6013      	str	r3, [r2, #0]
    return;
 800ed94:	e037      	b.n	800ee06 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	685a      	ldr	r2, [r3, #4]
 800ed9a:	4b1f      	ldr	r3, [pc, #124]	; (800ee18 <sys_timeout_abs+0xd8>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	1ad3      	subs	r3, r2, r3
 800eda2:	0fdb      	lsrs	r3, r3, #31
 800eda4:	f003 0301 	and.w	r3, r3, #1
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d007      	beq.n	800edbe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800edae:	4b1a      	ldr	r3, [pc, #104]	; (800ee18 <sys_timeout_abs+0xd8>)
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800edb6:	4a18      	ldr	r2, [pc, #96]	; (800ee18 <sys_timeout_abs+0xd8>)
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	6013      	str	r3, [r2, #0]
 800edbc:	e023      	b.n	800ee06 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800edbe:	4b16      	ldr	r3, [pc, #88]	; (800ee18 <sys_timeout_abs+0xd8>)
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	617b      	str	r3, [r7, #20]
 800edc4:	e01a      	b.n	800edfc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d00b      	beq.n	800ede6 <sys_timeout_abs+0xa6>
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	685a      	ldr	r2, [r3, #4]
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	0fdb      	lsrs	r3, r3, #31
 800eddc:	f003 0301 	and.w	r3, r3, #1
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d007      	beq.n	800edf6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	693a      	ldr	r2, [r7, #16]
 800edf2:	601a      	str	r2, [r3, #0]
        break;
 800edf4:	e007      	b.n	800ee06 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	617b      	str	r3, [r7, #20]
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d1e1      	bne.n	800edc6 <sys_timeout_abs+0x86>
 800ee02:	e000      	b.n	800ee06 <sys_timeout_abs+0xc6>
    return;
 800ee04:	bf00      	nop
      }
    }
  }
}
 800ee06:	3718      	adds	r7, #24
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	08017228 	.word	0x08017228
 800ee10:	0801725c 	.word	0x0801725c
 800ee14:	0801729c 	.word	0x0801729c
 800ee18:	20010758 	.word	0x20010758

0800ee1c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	4798      	blx	r3

  now = sys_now();
 800ee2e:	f7f5 fcb7 	bl	80047a0 <sys_now>
 800ee32:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	4b0f      	ldr	r3, [pc, #60]	; (800ee78 <lwip_cyclic_timer+0x5c>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4413      	add	r3, r2
 800ee3e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	1ad3      	subs	r3, r2, r3
 800ee46:	0fdb      	lsrs	r3, r3, #31
 800ee48:	f003 0301 	and.w	r3, r3, #1
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d009      	beq.n	800ee66 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	4413      	add	r3, r2
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	4907      	ldr	r1, [pc, #28]	; (800ee7c <lwip_cyclic_timer+0x60>)
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7ff ff6e 	bl	800ed40 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ee64:	e004      	b.n	800ee70 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	4904      	ldr	r1, [pc, #16]	; (800ee7c <lwip_cyclic_timer+0x60>)
 800ee6a:	68f8      	ldr	r0, [r7, #12]
 800ee6c:	f7ff ff68 	bl	800ed40 <sys_timeout_abs>
}
 800ee70:	bf00      	nop
 800ee72:	3718      	adds	r7, #24
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	2001075c 	.word	0x2001075c
 800ee7c:	0800ee1d 	.word	0x0800ee1d

0800ee80 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ee86:	2301      	movs	r3, #1
 800ee88:	607b      	str	r3, [r7, #4]
 800ee8a:	e00e      	b.n	800eeaa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ee8c:	4a0b      	ldr	r2, [pc, #44]	; (800eebc <sys_timeouts_init+0x3c>)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	00db      	lsls	r3, r3, #3
 800ee98:	4a08      	ldr	r2, [pc, #32]	; (800eebc <sys_timeouts_init+0x3c>)
 800ee9a:	4413      	add	r3, r2
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	4908      	ldr	r1, [pc, #32]	; (800eec0 <sys_timeouts_init+0x40>)
 800eea0:	f000 f810 	bl	800eec4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	3301      	adds	r3, #1
 800eea8:	607b      	str	r3, [r7, #4]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2b04      	cmp	r3, #4
 800eeae:	d9ed      	bls.n	800ee8c <sys_timeouts_init+0xc>
  }
}
 800eeb0:	bf00      	nop
 800eeb2:	bf00      	nop
 800eeb4:	3708      	adds	r7, #8
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	080181f4 	.word	0x080181f4
 800eec0:	0800ee1d 	.word	0x0800ee1d

0800eec4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b086      	sub	sp, #24
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eed6:	d306      	bcc.n	800eee6 <sys_timeout+0x22>
 800eed8:	4b0a      	ldr	r3, [pc, #40]	; (800ef04 <sys_timeout+0x40>)
 800eeda:	f240 1229 	movw	r2, #297	; 0x129
 800eede:	490a      	ldr	r1, [pc, #40]	; (800ef08 <sys_timeout+0x44>)
 800eee0:	480a      	ldr	r0, [pc, #40]	; (800ef0c <sys_timeout+0x48>)
 800eee2:	f005 fdb7 	bl	8014a54 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800eee6:	f7f5 fc5b 	bl	80047a0 <sys_now>
 800eeea:	4602      	mov	r2, r0
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	4413      	add	r3, r2
 800eef0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	68b9      	ldr	r1, [r7, #8]
 800eef6:	6978      	ldr	r0, [r7, #20]
 800eef8:	f7ff ff22 	bl	800ed40 <sys_timeout_abs>
#endif
}
 800eefc:	bf00      	nop
 800eefe:	3718      	adds	r7, #24
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	08017228 	.word	0x08017228
 800ef08:	080172c4 	.word	0x080172c4
 800ef0c:	0801729c 	.word	0x0801729c

0800ef10 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ef16:	f7f5 fc43 	bl	80047a0 <sys_now>
 800ef1a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ef1c:	4b17      	ldr	r3, [pc, #92]	; (800ef7c <sys_check_timeouts+0x6c>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d022      	beq.n	800ef6e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	68fa      	ldr	r2, [r7, #12]
 800ef2e:	1ad3      	subs	r3, r2, r3
 800ef30:	0fdb      	lsrs	r3, r3, #31
 800ef32:	f003 0301 	and.w	r3, r3, #1
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d11a      	bne.n	800ef72 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a0e      	ldr	r2, [pc, #56]	; (800ef7c <sys_check_timeouts+0x6c>)
 800ef42:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	68db      	ldr	r3, [r3, #12]
 800ef4e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	4a0a      	ldr	r2, [pc, #40]	; (800ef80 <sys_check_timeouts+0x70>)
 800ef56:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ef58:	68b9      	ldr	r1, [r7, #8]
 800ef5a:	200a      	movs	r0, #10
 800ef5c:	f7f9 fc1e 	bl	800879c <memp_free>
    if (handler != NULL) {
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d0da      	beq.n	800ef1c <sys_check_timeouts+0xc>
      handler(arg);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6838      	ldr	r0, [r7, #0]
 800ef6a:	4798      	blx	r3
  do {
 800ef6c:	e7d6      	b.n	800ef1c <sys_check_timeouts+0xc>
      return;
 800ef6e:	bf00      	nop
 800ef70:	e000      	b.n	800ef74 <sys_check_timeouts+0x64>
      return;
 800ef72:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	20010758 	.word	0x20010758
 800ef80:	2001075c 	.word	0x2001075c

0800ef84 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800ef8a:	4b16      	ldr	r3, [pc, #88]	; (800efe4 <sys_timeouts_sleeptime+0x60>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d102      	bne.n	800ef98 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800ef92:	f04f 33ff 	mov.w	r3, #4294967295
 800ef96:	e020      	b.n	800efda <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800ef98:	f7f5 fc02 	bl	80047a0 <sys_now>
 800ef9c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800ef9e:	4b11      	ldr	r3, [pc, #68]	; (800efe4 <sys_timeouts_sleeptime+0x60>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	685a      	ldr	r2, [r3, #4]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	0fdb      	lsrs	r3, r3, #31
 800efaa:	f003 0301 	and.w	r3, r3, #1
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d001      	beq.n	800efb8 <sys_timeouts_sleeptime+0x34>
    return 0;
 800efb4:	2300      	movs	r3, #0
 800efb6:	e010      	b.n	800efda <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800efb8:	4b0a      	ldr	r3, [pc, #40]	; (800efe4 <sys_timeouts_sleeptime+0x60>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	685a      	ldr	r2, [r3, #4]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	1ad3      	subs	r3, r2, r3
 800efc2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	da06      	bge.n	800efd8 <sys_timeouts_sleeptime+0x54>
 800efca:	4b07      	ldr	r3, [pc, #28]	; (800efe8 <sys_timeouts_sleeptime+0x64>)
 800efcc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800efd0:	4906      	ldr	r1, [pc, #24]	; (800efec <sys_timeouts_sleeptime+0x68>)
 800efd2:	4807      	ldr	r0, [pc, #28]	; (800eff0 <sys_timeouts_sleeptime+0x6c>)
 800efd4:	f005 fd3e 	bl	8014a54 <iprintf>
    return ret;
 800efd8:	683b      	ldr	r3, [r7, #0]
  }
}
 800efda:	4618      	mov	r0, r3
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	20010758 	.word	0x20010758
 800efe8:	08017228 	.word	0x08017228
 800efec:	080172fc 	.word	0x080172fc
 800eff0:	0801729c 	.word	0x0801729c

0800eff4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eff8:	f005 fd44 	bl	8014a84 <rand>
 800effc:	4603      	mov	r3, r0
 800effe:	b29b      	uxth	r3, r3
 800f000:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f004:	b29b      	uxth	r3, r3
 800f006:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	4b01      	ldr	r3, [pc, #4]	; (800f014 <udp_init+0x20>)
 800f00e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f010:	bf00      	nop
 800f012:	bd80      	pop	{r7, pc}
 800f014:	2000002c 	.word	0x2000002c

0800f018 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f022:	4b17      	ldr	r3, [pc, #92]	; (800f080 <udp_new_port+0x68>)
 800f024:	881b      	ldrh	r3, [r3, #0]
 800f026:	1c5a      	adds	r2, r3, #1
 800f028:	b291      	uxth	r1, r2
 800f02a:	4a15      	ldr	r2, [pc, #84]	; (800f080 <udp_new_port+0x68>)
 800f02c:	8011      	strh	r1, [r2, #0]
 800f02e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f032:	4293      	cmp	r3, r2
 800f034:	d103      	bne.n	800f03e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f036:	4b12      	ldr	r3, [pc, #72]	; (800f080 <udp_new_port+0x68>)
 800f038:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f03c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f03e:	4b11      	ldr	r3, [pc, #68]	; (800f084 <udp_new_port+0x6c>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	603b      	str	r3, [r7, #0]
 800f044:	e011      	b.n	800f06a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	8a5a      	ldrh	r2, [r3, #18]
 800f04a:	4b0d      	ldr	r3, [pc, #52]	; (800f080 <udp_new_port+0x68>)
 800f04c:	881b      	ldrh	r3, [r3, #0]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d108      	bne.n	800f064 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f052:	88fb      	ldrh	r3, [r7, #6]
 800f054:	3301      	adds	r3, #1
 800f056:	80fb      	strh	r3, [r7, #6]
 800f058:	88fb      	ldrh	r3, [r7, #6]
 800f05a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f05e:	d3e0      	bcc.n	800f022 <udp_new_port+0xa>
        return 0;
 800f060:	2300      	movs	r3, #0
 800f062:	e007      	b.n	800f074 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	603b      	str	r3, [r7, #0]
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d1ea      	bne.n	800f046 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f070:	4b03      	ldr	r3, [pc, #12]	; (800f080 <udp_new_port+0x68>)
 800f072:	881b      	ldrh	r3, [r3, #0]
}
 800f074:	4618      	mov	r0, r3
 800f076:	370c      	adds	r7, #12
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr
 800f080:	2000002c 	.word	0x2000002c
 800f084:	20018d54 	.word	0x20018d54

0800f088 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	4613      	mov	r3, r2
 800f094:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d105      	bne.n	800f0a8 <udp_input_local_match+0x20>
 800f09c:	4b27      	ldr	r3, [pc, #156]	; (800f13c <udp_input_local_match+0xb4>)
 800f09e:	2287      	movs	r2, #135	; 0x87
 800f0a0:	4927      	ldr	r1, [pc, #156]	; (800f140 <udp_input_local_match+0xb8>)
 800f0a2:	4828      	ldr	r0, [pc, #160]	; (800f144 <udp_input_local_match+0xbc>)
 800f0a4:	f005 fcd6 	bl	8014a54 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d105      	bne.n	800f0ba <udp_input_local_match+0x32>
 800f0ae:	4b23      	ldr	r3, [pc, #140]	; (800f13c <udp_input_local_match+0xb4>)
 800f0b0:	2288      	movs	r2, #136	; 0x88
 800f0b2:	4925      	ldr	r1, [pc, #148]	; (800f148 <udp_input_local_match+0xc0>)
 800f0b4:	4823      	ldr	r0, [pc, #140]	; (800f144 <udp_input_local_match+0xbc>)
 800f0b6:	f005 fccd 	bl	8014a54 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	7a1b      	ldrb	r3, [r3, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00b      	beq.n	800f0da <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	7a1a      	ldrb	r2, [r3, #8]
 800f0c6:	4b21      	ldr	r3, [pc, #132]	; (800f14c <udp_input_local_match+0xc4>)
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d001      	beq.n	800f0da <udp_input_local_match+0x52>
    return 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	e02b      	b.n	800f132 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f0da:	79fb      	ldrb	r3, [r7, #7]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d018      	beq.n	800f112 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d013      	beq.n	800f10e <udp_input_local_match+0x86>
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00f      	beq.n	800f10e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f0ee:	4b17      	ldr	r3, [pc, #92]	; (800f14c <udp_input_local_match+0xc4>)
 800f0f0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f6:	d00a      	beq.n	800f10e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	4b13      	ldr	r3, [pc, #76]	; (800f14c <udp_input_local_match+0xc4>)
 800f0fe:	695b      	ldr	r3, [r3, #20]
 800f100:	405a      	eors	r2, r3
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	3308      	adds	r3, #8
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d110      	bne.n	800f130 <udp_input_local_match+0xa8>
          return 1;
 800f10e:	2301      	movs	r3, #1
 800f110:	e00f      	b.n	800f132 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d009      	beq.n	800f12c <udp_input_local_match+0xa4>
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d005      	beq.n	800f12c <udp_input_local_match+0xa4>
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	4b09      	ldr	r3, [pc, #36]	; (800f14c <udp_input_local_match+0xc4>)
 800f126:	695b      	ldr	r3, [r3, #20]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d101      	bne.n	800f130 <udp_input_local_match+0xa8>
        return 1;
 800f12c:	2301      	movs	r3, #1
 800f12e:	e000      	b.n	800f132 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f130:	2300      	movs	r3, #0
}
 800f132:	4618      	mov	r0, r3
 800f134:	3710      	adds	r7, #16
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
 800f13a:	bf00      	nop
 800f13c:	08017310 	.word	0x08017310
 800f140:	08017340 	.word	0x08017340
 800f144:	08017364 	.word	0x08017364
 800f148:	0801738c 	.word	0x0801738c
 800f14c:	20015608 	.word	0x20015608

0800f150 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f150:	b590      	push	{r4, r7, lr}
 800f152:	b08d      	sub	sp, #52	; 0x34
 800f154:	af02      	add	r7, sp, #8
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d105      	bne.n	800f170 <udp_input+0x20>
 800f164:	4b7c      	ldr	r3, [pc, #496]	; (800f358 <udp_input+0x208>)
 800f166:	22cf      	movs	r2, #207	; 0xcf
 800f168:	497c      	ldr	r1, [pc, #496]	; (800f35c <udp_input+0x20c>)
 800f16a:	487d      	ldr	r0, [pc, #500]	; (800f360 <udp_input+0x210>)
 800f16c:	f005 fc72 	bl	8014a54 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d105      	bne.n	800f182 <udp_input+0x32>
 800f176:	4b78      	ldr	r3, [pc, #480]	; (800f358 <udp_input+0x208>)
 800f178:	22d0      	movs	r2, #208	; 0xd0
 800f17a:	497a      	ldr	r1, [pc, #488]	; (800f364 <udp_input+0x214>)
 800f17c:	4878      	ldr	r0, [pc, #480]	; (800f360 <udp_input+0x210>)
 800f17e:	f005 fc69 	bl	8014a54 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	895b      	ldrh	r3, [r3, #10]
 800f186:	2b07      	cmp	r3, #7
 800f188:	d803      	bhi.n	800f192 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f7fa f9b6 	bl	80094fc <pbuf_free>
    goto end;
 800f190:	e0de      	b.n	800f350 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f198:	4b73      	ldr	r3, [pc, #460]	; (800f368 <udp_input+0x218>)
 800f19a:	695b      	ldr	r3, [r3, #20]
 800f19c:	4a72      	ldr	r2, [pc, #456]	; (800f368 <udp_input+0x218>)
 800f19e:	6812      	ldr	r2, [r2, #0]
 800f1a0:	4611      	mov	r1, r2
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f003 fe06 	bl	8012db4 <ip4_addr_isbroadcast_u32>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	881b      	ldrh	r3, [r3, #0]
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7f8 fda4 	bl	8007d00 <lwip_htons>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	885b      	ldrh	r3, [r3, #2]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7f8 fd9c 	bl	8007d00 <lwip_htons>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1d8:	4b64      	ldr	r3, [pc, #400]	; (800f36c <udp_input+0x21c>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	627b      	str	r3, [r7, #36]	; 0x24
 800f1de:	e054      	b.n	800f28a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e2:	8a5b      	ldrh	r3, [r3, #18]
 800f1e4:	89fa      	ldrh	r2, [r7, #14]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d14a      	bne.n	800f280 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f1ea:	7cfb      	ldrb	r3, [r7, #19]
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	6839      	ldr	r1, [r7, #0]
 800f1f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1f2:	f7ff ff49 	bl	800f088 <udp_input_local_match>
 800f1f6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d041      	beq.n	800f280 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fe:	7c1b      	ldrb	r3, [r3, #16]
 800f200:	f003 0304 	and.w	r3, r3, #4
 800f204:	2b00      	cmp	r3, #0
 800f206:	d11d      	bne.n	800f244 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d102      	bne.n	800f214 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f210:	61fb      	str	r3, [r7, #28]
 800f212:	e017      	b.n	800f244 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f214:	7cfb      	ldrb	r3, [r7, #19]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d014      	beq.n	800f244 <udp_input+0xf4>
 800f21a:	4b53      	ldr	r3, [pc, #332]	; (800f368 <udp_input+0x218>)
 800f21c:	695b      	ldr	r3, [r3, #20]
 800f21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f222:	d10f      	bne.n	800f244 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	3304      	adds	r3, #4
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	429a      	cmp	r2, r3
 800f230:	d008      	beq.n	800f244 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f234:	681a      	ldr	r2, [r3, #0]
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	3304      	adds	r3, #4
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d101      	bne.n	800f244 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f242:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f246:	8a9b      	ldrh	r3, [r3, #20]
 800f248:	8a3a      	ldrh	r2, [r7, #16]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d118      	bne.n	800f280 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f250:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f252:	2b00      	cmp	r3, #0
 800f254:	d005      	beq.n	800f262 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f258:	685a      	ldr	r2, [r3, #4]
 800f25a:	4b43      	ldr	r3, [pc, #268]	; (800f368 <udp_input+0x218>)
 800f25c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f25e:	429a      	cmp	r2, r3
 800f260:	d10e      	bne.n	800f280 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f262:	6a3b      	ldr	r3, [r7, #32]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d014      	beq.n	800f292 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26a:	68da      	ldr	r2, [r3, #12]
 800f26c:	6a3b      	ldr	r3, [r7, #32]
 800f26e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f270:	4b3e      	ldr	r3, [pc, #248]	; (800f36c <udp_input+0x21c>)
 800f272:	681a      	ldr	r2, [r3, #0]
 800f274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f276:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f278:	4a3c      	ldr	r2, [pc, #240]	; (800f36c <udp_input+0x21c>)
 800f27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f27e:	e008      	b.n	800f292 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f282:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	627b      	str	r3, [r7, #36]	; 0x24
 800f28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d1a7      	bne.n	800f1e0 <udp_input+0x90>
 800f290:	e000      	b.n	800f294 <udp_input+0x144>
        break;
 800f292:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f296:	2b00      	cmp	r3, #0
 800f298:	d101      	bne.n	800f29e <udp_input+0x14e>
    pcb = uncon_pcb;
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d002      	beq.n	800f2aa <udp_input+0x15a>
    for_us = 1;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	76fb      	strb	r3, [r7, #27]
 800f2a8:	e00a      	b.n	800f2c0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	3304      	adds	r3, #4
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	4b2d      	ldr	r3, [pc, #180]	; (800f368 <udp_input+0x218>)
 800f2b2:	695b      	ldr	r3, [r3, #20]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	bf0c      	ite	eq
 800f2b8:	2301      	moveq	r3, #1
 800f2ba:	2300      	movne	r3, #0
 800f2bc:	b2db      	uxtb	r3, r3
 800f2be:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f2c0:	7efb      	ldrb	r3, [r7, #27]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d041      	beq.n	800f34a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f2c6:	2108      	movs	r1, #8
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7fa f891 	bl	80093f0 <pbuf_remove_header>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00a      	beq.n	800f2ea <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f2d4:	4b20      	ldr	r3, [pc, #128]	; (800f358 <udp_input+0x208>)
 800f2d6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f2da:	4925      	ldr	r1, [pc, #148]	; (800f370 <udp_input+0x220>)
 800f2dc:	4820      	ldr	r0, [pc, #128]	; (800f360 <udp_input+0x210>)
 800f2de:	f005 fbb9 	bl	8014a54 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7fa f90a 	bl	80094fc <pbuf_free>
      goto end;
 800f2e8:	e032      	b.n	800f350 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d012      	beq.n	800f316 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f2:	699b      	ldr	r3, [r3, #24]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d00a      	beq.n	800f30e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fa:	699c      	ldr	r4, [r3, #24]
 800f2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fe:	69d8      	ldr	r0, [r3, #28]
 800f300:	8a3b      	ldrh	r3, [r7, #16]
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	4b1b      	ldr	r3, [pc, #108]	; (800f374 <udp_input+0x224>)
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f30a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f30c:	e021      	b.n	800f352 <udp_input+0x202>
        pbuf_free(p);
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f7fa f8f4 	bl	80094fc <pbuf_free>
        goto end;
 800f314:	e01c      	b.n	800f350 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f316:	7cfb      	ldrb	r3, [r7, #19]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d112      	bne.n	800f342 <udp_input+0x1f2>
 800f31c:	4b12      	ldr	r3, [pc, #72]	; (800f368 <udp_input+0x218>)
 800f31e:	695b      	ldr	r3, [r3, #20]
 800f320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f324:	2be0      	cmp	r3, #224	; 0xe0
 800f326:	d00c      	beq.n	800f342 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f328:	4b0f      	ldr	r3, [pc, #60]	; (800f368 <udp_input+0x218>)
 800f32a:	899b      	ldrh	r3, [r3, #12]
 800f32c:	3308      	adds	r3, #8
 800f32e:	b29b      	uxth	r3, r3
 800f330:	b21b      	sxth	r3, r3
 800f332:	4619      	mov	r1, r3
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7fa f8ce 	bl	80094d6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f33a:	2103      	movs	r1, #3
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f003 f9fb 	bl	8012738 <icmp_dest_unreach>
      pbuf_free(p);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f7fa f8da 	bl	80094fc <pbuf_free>
  return;
 800f348:	e003      	b.n	800f352 <udp_input+0x202>
    pbuf_free(p);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7fa f8d6 	bl	80094fc <pbuf_free>
  return;
 800f350:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f352:	372c      	adds	r7, #44	; 0x2c
 800f354:	46bd      	mov	sp, r7
 800f356:	bd90      	pop	{r4, r7, pc}
 800f358:	08017310 	.word	0x08017310
 800f35c:	080173b4 	.word	0x080173b4
 800f360:	08017364 	.word	0x08017364
 800f364:	080173cc 	.word	0x080173cc
 800f368:	20015608 	.word	0x20015608
 800f36c:	20018d54 	.word	0x20018d54
 800f370:	080173e8 	.word	0x080173e8
 800f374:	20015618 	.word	0x20015618

0800f378 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b088      	sub	sp, #32
 800f37c:	af02      	add	r7, sp, #8
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
 800f384:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d109      	bne.n	800f3a0 <udp_sendto_if+0x28>
 800f38c:	4b2e      	ldr	r3, [pc, #184]	; (800f448 <udp_sendto_if+0xd0>)
 800f38e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f392:	492e      	ldr	r1, [pc, #184]	; (800f44c <udp_sendto_if+0xd4>)
 800f394:	482e      	ldr	r0, [pc, #184]	; (800f450 <udp_sendto_if+0xd8>)
 800f396:	f005 fb5d 	bl	8014a54 <iprintf>
 800f39a:	f06f 030f 	mvn.w	r3, #15
 800f39e:	e04f      	b.n	800f440 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d109      	bne.n	800f3ba <udp_sendto_if+0x42>
 800f3a6:	4b28      	ldr	r3, [pc, #160]	; (800f448 <udp_sendto_if+0xd0>)
 800f3a8:	f240 2281 	movw	r2, #641	; 0x281
 800f3ac:	4929      	ldr	r1, [pc, #164]	; (800f454 <udp_sendto_if+0xdc>)
 800f3ae:	4828      	ldr	r0, [pc, #160]	; (800f450 <udp_sendto_if+0xd8>)
 800f3b0:	f005 fb50 	bl	8014a54 <iprintf>
 800f3b4:	f06f 030f 	mvn.w	r3, #15
 800f3b8:	e042      	b.n	800f440 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d109      	bne.n	800f3d4 <udp_sendto_if+0x5c>
 800f3c0:	4b21      	ldr	r3, [pc, #132]	; (800f448 <udp_sendto_if+0xd0>)
 800f3c2:	f240 2282 	movw	r2, #642	; 0x282
 800f3c6:	4924      	ldr	r1, [pc, #144]	; (800f458 <udp_sendto_if+0xe0>)
 800f3c8:	4821      	ldr	r0, [pc, #132]	; (800f450 <udp_sendto_if+0xd8>)
 800f3ca:	f005 fb43 	bl	8014a54 <iprintf>
 800f3ce:	f06f 030f 	mvn.w	r3, #15
 800f3d2:	e035      	b.n	800f440 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f3d4:	6a3b      	ldr	r3, [r7, #32]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d109      	bne.n	800f3ee <udp_sendto_if+0x76>
 800f3da:	4b1b      	ldr	r3, [pc, #108]	; (800f448 <udp_sendto_if+0xd0>)
 800f3dc:	f240 2283 	movw	r2, #643	; 0x283
 800f3e0:	491e      	ldr	r1, [pc, #120]	; (800f45c <udp_sendto_if+0xe4>)
 800f3e2:	481b      	ldr	r0, [pc, #108]	; (800f450 <udp_sendto_if+0xd8>)
 800f3e4:	f005 fb36 	bl	8014a54 <iprintf>
 800f3e8:	f06f 030f 	mvn.w	r3, #15
 800f3ec:	e028      	b.n	800f440 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d009      	beq.n	800f408 <udp_sendto_if+0x90>
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d005      	beq.n	800f408 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f404:	2be0      	cmp	r3, #224	; 0xe0
 800f406:	d103      	bne.n	800f410 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f408:	6a3b      	ldr	r3, [r7, #32]
 800f40a:	3304      	adds	r3, #4
 800f40c:	617b      	str	r3, [r7, #20]
 800f40e:	e00b      	b.n	800f428 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	6a3b      	ldr	r3, [r7, #32]
 800f416:	3304      	adds	r3, #4
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	d002      	beq.n	800f424 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f41e:	f06f 0303 	mvn.w	r3, #3
 800f422:	e00d      	b.n	800f440 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f428:	887a      	ldrh	r2, [r7, #2]
 800f42a:	697b      	ldr	r3, [r7, #20]
 800f42c:	9301      	str	r3, [sp, #4]
 800f42e:	6a3b      	ldr	r3, [r7, #32]
 800f430:	9300      	str	r3, [sp, #0]
 800f432:	4613      	mov	r3, r2
 800f434:	687a      	ldr	r2, [r7, #4]
 800f436:	68b9      	ldr	r1, [r7, #8]
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f000 f811 	bl	800f460 <udp_sendto_if_src>
 800f43e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f440:	4618      	mov	r0, r3
 800f442:	3718      	adds	r7, #24
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	08017310 	.word	0x08017310
 800f44c:	08017484 	.word	0x08017484
 800f450:	08017364 	.word	0x08017364
 800f454:	080174a0 	.word	0x080174a0
 800f458:	080174bc 	.word	0x080174bc
 800f45c:	080174dc 	.word	0x080174dc

0800f460 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b08c      	sub	sp, #48	; 0x30
 800f464:	af04      	add	r7, sp, #16
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	607a      	str	r2, [r7, #4]
 800f46c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d109      	bne.n	800f488 <udp_sendto_if_src+0x28>
 800f474:	4b65      	ldr	r3, [pc, #404]	; (800f60c <udp_sendto_if_src+0x1ac>)
 800f476:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f47a:	4965      	ldr	r1, [pc, #404]	; (800f610 <udp_sendto_if_src+0x1b0>)
 800f47c:	4865      	ldr	r0, [pc, #404]	; (800f614 <udp_sendto_if_src+0x1b4>)
 800f47e:	f005 fae9 	bl	8014a54 <iprintf>
 800f482:	f06f 030f 	mvn.w	r3, #15
 800f486:	e0bc      	b.n	800f602 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d109      	bne.n	800f4a2 <udp_sendto_if_src+0x42>
 800f48e:	4b5f      	ldr	r3, [pc, #380]	; (800f60c <udp_sendto_if_src+0x1ac>)
 800f490:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f494:	4960      	ldr	r1, [pc, #384]	; (800f618 <udp_sendto_if_src+0x1b8>)
 800f496:	485f      	ldr	r0, [pc, #380]	; (800f614 <udp_sendto_if_src+0x1b4>)
 800f498:	f005 fadc 	bl	8014a54 <iprintf>
 800f49c:	f06f 030f 	mvn.w	r3, #15
 800f4a0:	e0af      	b.n	800f602 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d109      	bne.n	800f4bc <udp_sendto_if_src+0x5c>
 800f4a8:	4b58      	ldr	r3, [pc, #352]	; (800f60c <udp_sendto_if_src+0x1ac>)
 800f4aa:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f4ae:	495b      	ldr	r1, [pc, #364]	; (800f61c <udp_sendto_if_src+0x1bc>)
 800f4b0:	4858      	ldr	r0, [pc, #352]	; (800f614 <udp_sendto_if_src+0x1b4>)
 800f4b2:	f005 facf 	bl	8014a54 <iprintf>
 800f4b6:	f06f 030f 	mvn.w	r3, #15
 800f4ba:	e0a2      	b.n	800f602 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d109      	bne.n	800f4d6 <udp_sendto_if_src+0x76>
 800f4c2:	4b52      	ldr	r3, [pc, #328]	; (800f60c <udp_sendto_if_src+0x1ac>)
 800f4c4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f4c8:	4955      	ldr	r1, [pc, #340]	; (800f620 <udp_sendto_if_src+0x1c0>)
 800f4ca:	4852      	ldr	r0, [pc, #328]	; (800f614 <udp_sendto_if_src+0x1b4>)
 800f4cc:	f005 fac2 	bl	8014a54 <iprintf>
 800f4d0:	f06f 030f 	mvn.w	r3, #15
 800f4d4:	e095      	b.n	800f602 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d109      	bne.n	800f4f0 <udp_sendto_if_src+0x90>
 800f4dc:	4b4b      	ldr	r3, [pc, #300]	; (800f60c <udp_sendto_if_src+0x1ac>)
 800f4de:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f4e2:	4950      	ldr	r1, [pc, #320]	; (800f624 <udp_sendto_if_src+0x1c4>)
 800f4e4:	484b      	ldr	r0, [pc, #300]	; (800f614 <udp_sendto_if_src+0x1b4>)
 800f4e6:	f005 fab5 	bl	8014a54 <iprintf>
 800f4ea:	f06f 030f 	mvn.w	r3, #15
 800f4ee:	e088      	b.n	800f602 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	8a5b      	ldrh	r3, [r3, #18]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10f      	bne.n	800f518 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f4f8:	68f9      	ldr	r1, [r7, #12]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	8a5b      	ldrh	r3, [r3, #18]
 800f4fe:	461a      	mov	r2, r3
 800f500:	68f8      	ldr	r0, [r7, #12]
 800f502:	f000 f893 	bl	800f62c <udp_bind>
 800f506:	4603      	mov	r3, r0
 800f508:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f50a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d002      	beq.n	800f518 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f512:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f516:	e074      	b.n	800f602 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	891b      	ldrh	r3, [r3, #8]
 800f51c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f520:	4293      	cmp	r3, r2
 800f522:	d902      	bls.n	800f52a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f524:	f04f 33ff 	mov.w	r3, #4294967295
 800f528:	e06b      	b.n	800f602 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f52a:	2108      	movs	r1, #8
 800f52c:	68b8      	ldr	r0, [r7, #8]
 800f52e:	f7f9 ff4f 	bl	80093d0 <pbuf_add_header>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	d015      	beq.n	800f564 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f538:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f53c:	2108      	movs	r1, #8
 800f53e:	2022      	movs	r0, #34	; 0x22
 800f540:	f7f9 fcf8 	bl	8008f34 <pbuf_alloc>
 800f544:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f546:	69fb      	ldr	r3, [r7, #28]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d102      	bne.n	800f552 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f54c:	f04f 33ff 	mov.w	r3, #4294967295
 800f550:	e057      	b.n	800f602 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	891b      	ldrh	r3, [r3, #8]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d006      	beq.n	800f568 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f55a:	68b9      	ldr	r1, [r7, #8]
 800f55c:	69f8      	ldr	r0, [r7, #28]
 800f55e:	f7fa f8f1 	bl	8009744 <pbuf_chain>
 800f562:	e001      	b.n	800f568 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	895b      	ldrh	r3, [r3, #10]
 800f56c:	2b07      	cmp	r3, #7
 800f56e:	d806      	bhi.n	800f57e <udp_sendto_if_src+0x11e>
 800f570:	4b26      	ldr	r3, [pc, #152]	; (800f60c <udp_sendto_if_src+0x1ac>)
 800f572:	f240 320d 	movw	r2, #781	; 0x30d
 800f576:	492c      	ldr	r1, [pc, #176]	; (800f628 <udp_sendto_if_src+0x1c8>)
 800f578:	4826      	ldr	r0, [pc, #152]	; (800f614 <udp_sendto_if_src+0x1b4>)
 800f57a:	f005 fa6b 	bl	8014a54 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	685b      	ldr	r3, [r3, #4]
 800f582:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	8a5b      	ldrh	r3, [r3, #18]
 800f588:	4618      	mov	r0, r3
 800f58a:	f7f8 fbb9 	bl	8007d00 <lwip_htons>
 800f58e:	4603      	mov	r3, r0
 800f590:	461a      	mov	r2, r3
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f596:	887b      	ldrh	r3, [r7, #2]
 800f598:	4618      	mov	r0, r3
 800f59a:	f7f8 fbb1 	bl	8007d00 <lwip_htons>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	719a      	strb	r2, [r3, #6]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	891b      	ldrh	r3, [r3, #8]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7f8 fba3 	bl	8007d00 <lwip_htons>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	461a      	mov	r2, r3
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f5c2:	2311      	movs	r3, #17
 800f5c4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	7adb      	ldrb	r3, [r3, #11]
 800f5ca:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	7a9b      	ldrb	r3, [r3, #10]
 800f5d0:	7cb9      	ldrb	r1, [r7, #18]
 800f5d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5d4:	9202      	str	r2, [sp, #8]
 800f5d6:	7cfa      	ldrb	r2, [r7, #19]
 800f5d8:	9201      	str	r2, [sp, #4]
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	460b      	mov	r3, r1
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f5e2:	69f8      	ldr	r0, [r7, #28]
 800f5e4:	f003 fb38 	bl	8012c58 <ip4_output_if_src>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f5ec:	69fa      	ldr	r2, [r7, #28]
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d004      	beq.n	800f5fe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f5f4:	69f8      	ldr	r0, [r7, #28]
 800f5f6:	f7f9 ff81 	bl	80094fc <pbuf_free>
    q = NULL;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f5fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f602:	4618      	mov	r0, r3
 800f604:	3720      	adds	r7, #32
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	08017310 	.word	0x08017310
 800f610:	080174fc 	.word	0x080174fc
 800f614:	08017364 	.word	0x08017364
 800f618:	0801751c 	.word	0x0801751c
 800f61c:	0801753c 	.word	0x0801753c
 800f620:	08017560 	.word	0x08017560
 800f624:	08017584 	.word	0x08017584
 800f628:	080175a8 	.word	0x080175a8

0800f62c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	4613      	mov	r3, r2
 800f638:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d101      	bne.n	800f644 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f640:	4b39      	ldr	r3, [pc, #228]	; (800f728 <udp_bind+0xfc>)
 800f642:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d109      	bne.n	800f65e <udp_bind+0x32>
 800f64a:	4b38      	ldr	r3, [pc, #224]	; (800f72c <udp_bind+0x100>)
 800f64c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f650:	4937      	ldr	r1, [pc, #220]	; (800f730 <udp_bind+0x104>)
 800f652:	4838      	ldr	r0, [pc, #224]	; (800f734 <udp_bind+0x108>)
 800f654:	f005 f9fe 	bl	8014a54 <iprintf>
 800f658:	f06f 030f 	mvn.w	r3, #15
 800f65c:	e060      	b.n	800f720 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f65e:	2300      	movs	r3, #0
 800f660:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f662:	4b35      	ldr	r3, [pc, #212]	; (800f738 <udp_bind+0x10c>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	617b      	str	r3, [r7, #20]
 800f668:	e009      	b.n	800f67e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f66a:	68fa      	ldr	r2, [r7, #12]
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d102      	bne.n	800f678 <udp_bind+0x4c>
      rebind = 1;
 800f672:	2301      	movs	r3, #1
 800f674:	74fb      	strb	r3, [r7, #19]
      break;
 800f676:	e005      	b.n	800f684 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	617b      	str	r3, [r7, #20]
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d1f2      	bne.n	800f66a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f684:	88fb      	ldrh	r3, [r7, #6]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d109      	bne.n	800f69e <udp_bind+0x72>
    port = udp_new_port();
 800f68a:	f7ff fcc5 	bl	800f018 <udp_new_port>
 800f68e:	4603      	mov	r3, r0
 800f690:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f692:	88fb      	ldrh	r3, [r7, #6]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d12c      	bne.n	800f6f2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f698:	f06f 0307 	mvn.w	r3, #7
 800f69c:	e040      	b.n	800f720 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f69e:	4b26      	ldr	r3, [pc, #152]	; (800f738 <udp_bind+0x10c>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	617b      	str	r3, [r7, #20]
 800f6a4:	e022      	b.n	800f6ec <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f6a6:	68fa      	ldr	r2, [r7, #12]
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d01b      	beq.n	800f6e6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	8a5b      	ldrh	r3, [r3, #18]
 800f6b2:	88fa      	ldrh	r2, [r7, #6]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d116      	bne.n	800f6e6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	681a      	ldr	r2, [r3, #0]
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d00d      	beq.n	800f6e0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00a      	beq.n	800f6e0 <udp_bind+0xb4>
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d006      	beq.n	800f6e0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f6d2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d003      	beq.n	800f6e0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d102      	bne.n	800f6e6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f6e0:	f06f 0307 	mvn.w	r3, #7
 800f6e4:	e01c      	b.n	800f720 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	617b      	str	r3, [r7, #20]
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1d9      	bne.n	800f6a6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d002      	beq.n	800f6fe <udp_bind+0xd2>
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	e000      	b.n	800f700 <udp_bind+0xd4>
 800f6fe:	2300      	movs	r3, #0
 800f700:	68fa      	ldr	r2, [r7, #12]
 800f702:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	88fa      	ldrh	r2, [r7, #6]
 800f708:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f70a:	7cfb      	ldrb	r3, [r7, #19]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d106      	bne.n	800f71e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f710:	4b09      	ldr	r3, [pc, #36]	; (800f738 <udp_bind+0x10c>)
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f718:	4a07      	ldr	r2, [pc, #28]	; (800f738 <udp_bind+0x10c>)
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f71e:	2300      	movs	r3, #0
}
 800f720:	4618      	mov	r0, r3
 800f722:	3718      	adds	r7, #24
 800f724:	46bd      	mov	sp, r7
 800f726:	bd80      	pop	{r7, pc}
 800f728:	0801821c 	.word	0x0801821c
 800f72c:	08017310 	.word	0x08017310
 800f730:	080175d8 	.word	0x080175d8
 800f734:	08017364 	.word	0x08017364
 800f738:	20018d54 	.word	0x20018d54

0800f73c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b086      	sub	sp, #24
 800f740:	af00      	add	r7, sp, #0
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	60b9      	str	r1, [r7, #8]
 800f746:	4613      	mov	r3, r2
 800f748:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d109      	bne.n	800f764 <udp_connect+0x28>
 800f750:	4b2c      	ldr	r3, [pc, #176]	; (800f804 <udp_connect+0xc8>)
 800f752:	f240 4235 	movw	r2, #1077	; 0x435
 800f756:	492c      	ldr	r1, [pc, #176]	; (800f808 <udp_connect+0xcc>)
 800f758:	482c      	ldr	r0, [pc, #176]	; (800f80c <udp_connect+0xd0>)
 800f75a:	f005 f97b 	bl	8014a54 <iprintf>
 800f75e:	f06f 030f 	mvn.w	r3, #15
 800f762:	e04b      	b.n	800f7fc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d109      	bne.n	800f77e <udp_connect+0x42>
 800f76a:	4b26      	ldr	r3, [pc, #152]	; (800f804 <udp_connect+0xc8>)
 800f76c:	f240 4236 	movw	r2, #1078	; 0x436
 800f770:	4927      	ldr	r1, [pc, #156]	; (800f810 <udp_connect+0xd4>)
 800f772:	4826      	ldr	r0, [pc, #152]	; (800f80c <udp_connect+0xd0>)
 800f774:	f005 f96e 	bl	8014a54 <iprintf>
 800f778:	f06f 030f 	mvn.w	r3, #15
 800f77c:	e03e      	b.n	800f7fc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	8a5b      	ldrh	r3, [r3, #18]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d10f      	bne.n	800f7a6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f786:	68f9      	ldr	r1, [r7, #12]
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	8a5b      	ldrh	r3, [r3, #18]
 800f78c:	461a      	mov	r2, r3
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f7ff ff4c 	bl	800f62c <udp_bind>
 800f794:	4603      	mov	r3, r0
 800f796:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f798:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <udp_connect+0x6a>
      return err;
 800f7a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f7a4:	e02a      	b.n	800f7fc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d002      	beq.n	800f7b2 <udp_connect+0x76>
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	e000      	b.n	800f7b4 <udp_connect+0x78>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	88fa      	ldrh	r2, [r7, #6]
 800f7bc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	7c1b      	ldrb	r3, [r3, #16]
 800f7c2:	f043 0304 	orr.w	r3, r3, #4
 800f7c6:	b2da      	uxtb	r2, r3
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f7cc:	4b11      	ldr	r3, [pc, #68]	; (800f814 <udp_connect+0xd8>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	617b      	str	r3, [r7, #20]
 800f7d2:	e008      	b.n	800f7e6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f7d4:	68fa      	ldr	r2, [r7, #12]
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d101      	bne.n	800f7e0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	e00d      	b.n	800f7fc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	617b      	str	r3, [r7, #20]
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d1f3      	bne.n	800f7d4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f7ec:	4b09      	ldr	r3, [pc, #36]	; (800f814 <udp_connect+0xd8>)
 800f7ee:	681a      	ldr	r2, [r3, #0]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f7f4:	4a07      	ldr	r2, [pc, #28]	; (800f814 <udp_connect+0xd8>)
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f7fa:	2300      	movs	r3, #0
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3718      	adds	r7, #24
 800f800:	46bd      	mov	sp, r7
 800f802:	bd80      	pop	{r7, pc}
 800f804:	08017310 	.word	0x08017310
 800f808:	080175f0 	.word	0x080175f0
 800f80c:	08017364 	.word	0x08017364
 800f810:	0801760c 	.word	0x0801760c
 800f814:	20018d54 	.word	0x20018d54

0800f818 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d107      	bne.n	800f83a <udp_recv+0x22>
 800f82a:	4b08      	ldr	r3, [pc, #32]	; (800f84c <udp_recv+0x34>)
 800f82c:	f240 428a 	movw	r2, #1162	; 0x48a
 800f830:	4907      	ldr	r1, [pc, #28]	; (800f850 <udp_recv+0x38>)
 800f832:	4808      	ldr	r0, [pc, #32]	; (800f854 <udp_recv+0x3c>)
 800f834:	f005 f90e 	bl	8014a54 <iprintf>
 800f838:	e005      	b.n	800f846 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	68ba      	ldr	r2, [r7, #8]
 800f83e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	61da      	str	r2, [r3, #28]
}
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}
 800f84c:	08017310 	.word	0x08017310
 800f850:	08017644 	.word	0x08017644
 800f854:	08017364 	.word	0x08017364

0800f858 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d107      	bne.n	800f876 <udp_remove+0x1e>
 800f866:	4b19      	ldr	r3, [pc, #100]	; (800f8cc <udp_remove+0x74>)
 800f868:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f86c:	4918      	ldr	r1, [pc, #96]	; (800f8d0 <udp_remove+0x78>)
 800f86e:	4819      	ldr	r0, [pc, #100]	; (800f8d4 <udp_remove+0x7c>)
 800f870:	f005 f8f0 	bl	8014a54 <iprintf>
 800f874:	e026      	b.n	800f8c4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f876:	4b18      	ldr	r3, [pc, #96]	; (800f8d8 <udp_remove+0x80>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d105      	bne.n	800f88c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f880:	4b15      	ldr	r3, [pc, #84]	; (800f8d8 <udp_remove+0x80>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	4a14      	ldr	r2, [pc, #80]	; (800f8d8 <udp_remove+0x80>)
 800f888:	6013      	str	r3, [r2, #0]
 800f88a:	e017      	b.n	800f8bc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f88c:	4b12      	ldr	r3, [pc, #72]	; (800f8d8 <udp_remove+0x80>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	60fb      	str	r3, [r7, #12]
 800f892:	e010      	b.n	800f8b6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d009      	beq.n	800f8b0 <udp_remove+0x58>
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	687a      	ldr	r2, [r7, #4]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d104      	bne.n	800f8b0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68da      	ldr	r2, [r3, #12]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	60da      	str	r2, [r3, #12]
        break;
 800f8ae:	e005      	b.n	800f8bc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	60fb      	str	r3, [r7, #12]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d1eb      	bne.n	800f894 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f8bc:	6879      	ldr	r1, [r7, #4]
 800f8be:	2000      	movs	r0, #0
 800f8c0:	f7f8 ff6c 	bl	800879c <memp_free>
}
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
 800f8ca:	bf00      	nop
 800f8cc:	08017310 	.word	0x08017310
 800f8d0:	0801765c 	.word	0x0801765c
 800f8d4:	08017364 	.word	0x08017364
 800f8d8:	20018d54 	.word	0x20018d54

0800f8dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f8e2:	2000      	movs	r0, #0
 800f8e4:	f7f8 fee4 	bl	80086b0 <memp_malloc>
 800f8e8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d007      	beq.n	800f900 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f8f0:	2220      	movs	r2, #32
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f004 fd0d 	bl	8014314 <memset>
    pcb->ttl = UDP_TTL;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	22ff      	movs	r2, #255	; 0xff
 800f8fe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f900:	687b      	ldr	r3, [r7, #4]
}
 800f902:	4618      	mov	r0, r3
 800f904:	3708      	adds	r7, #8
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
	...

0800f90c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
 800f914:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d01e      	beq.n	800f95a <udp_netif_ip_addr_changed+0x4e>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d01a      	beq.n	800f95a <udp_netif_ip_addr_changed+0x4e>
 800f924:	683b      	ldr	r3, [r7, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d017      	beq.n	800f95a <udp_netif_ip_addr_changed+0x4e>
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d013      	beq.n	800f95a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f932:	4b0d      	ldr	r3, [pc, #52]	; (800f968 <udp_netif_ip_addr_changed+0x5c>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	60fb      	str	r3, [r7, #12]
 800f938:	e00c      	b.n	800f954 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	429a      	cmp	r2, r3
 800f944:	d103      	bne.n	800f94e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	60fb      	str	r3, [r7, #12]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d1ef      	bne.n	800f93a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f95a:	bf00      	nop
 800f95c:	3714      	adds	r7, #20
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	20018d54 	.word	0x20018d54

0800f96c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f970:	4b20      	ldr	r3, [pc, #128]	; (800f9f4 <dhcp_inc_pcb_refcount+0x88>)
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d133      	bne.n	800f9e0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f978:	4b1f      	ldr	r3, [pc, #124]	; (800f9f8 <dhcp_inc_pcb_refcount+0x8c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d005      	beq.n	800f98c <dhcp_inc_pcb_refcount+0x20>
 800f980:	4b1e      	ldr	r3, [pc, #120]	; (800f9fc <dhcp_inc_pcb_refcount+0x90>)
 800f982:	22e5      	movs	r2, #229	; 0xe5
 800f984:	491e      	ldr	r1, [pc, #120]	; (800fa00 <dhcp_inc_pcb_refcount+0x94>)
 800f986:	481f      	ldr	r0, [pc, #124]	; (800fa04 <dhcp_inc_pcb_refcount+0x98>)
 800f988:	f005 f864 	bl	8014a54 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f98c:	f7ff ffa6 	bl	800f8dc <udp_new>
 800f990:	4603      	mov	r3, r0
 800f992:	4a19      	ldr	r2, [pc, #100]	; (800f9f8 <dhcp_inc_pcb_refcount+0x8c>)
 800f994:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f996:	4b18      	ldr	r3, [pc, #96]	; (800f9f8 <dhcp_inc_pcb_refcount+0x8c>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d102      	bne.n	800f9a4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f99e:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a2:	e024      	b.n	800f9ee <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f9a4:	4b14      	ldr	r3, [pc, #80]	; (800f9f8 <dhcp_inc_pcb_refcount+0x8c>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	7a5a      	ldrb	r2, [r3, #9]
 800f9aa:	4b13      	ldr	r3, [pc, #76]	; (800f9f8 <dhcp_inc_pcb_refcount+0x8c>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f042 0220 	orr.w	r2, r2, #32
 800f9b2:	b2d2      	uxtb	r2, r2
 800f9b4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f9b6:	4b10      	ldr	r3, [pc, #64]	; (800f9f8 <dhcp_inc_pcb_refcount+0x8c>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	2244      	movs	r2, #68	; 0x44
 800f9bc:	4912      	ldr	r1, [pc, #72]	; (800fa08 <dhcp_inc_pcb_refcount+0x9c>)
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7ff fe34 	bl	800f62c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f9c4:	4b0c      	ldr	r3, [pc, #48]	; (800f9f8 <dhcp_inc_pcb_refcount+0x8c>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2243      	movs	r2, #67	; 0x43
 800f9ca:	490f      	ldr	r1, [pc, #60]	; (800fa08 <dhcp_inc_pcb_refcount+0x9c>)
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7ff feb5 	bl	800f73c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f9d2:	4b09      	ldr	r3, [pc, #36]	; (800f9f8 <dhcp_inc_pcb_refcount+0x8c>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	490c      	ldr	r1, [pc, #48]	; (800fa0c <dhcp_inc_pcb_refcount+0xa0>)
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7ff ff1c 	bl	800f818 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f9e0:	4b04      	ldr	r3, [pc, #16]	; (800f9f4 <dhcp_inc_pcb_refcount+0x88>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	b2da      	uxtb	r2, r3
 800f9e8:	4b02      	ldr	r3, [pc, #8]	; (800f9f4 <dhcp_inc_pcb_refcount+0x88>)
 800f9ea:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	20010768 	.word	0x20010768
 800f9f8:	20010764 	.word	0x20010764
 800f9fc:	08017674 	.word	0x08017674
 800fa00:	080176ac 	.word	0x080176ac
 800fa04:	080176d4 	.word	0x080176d4
 800fa08:	0801821c 	.word	0x0801821c
 800fa0c:	080112a1 	.word	0x080112a1

0800fa10 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800fa14:	4b0e      	ldr	r3, [pc, #56]	; (800fa50 <dhcp_dec_pcb_refcount+0x40>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d105      	bne.n	800fa28 <dhcp_dec_pcb_refcount+0x18>
 800fa1c:	4b0d      	ldr	r3, [pc, #52]	; (800fa54 <dhcp_dec_pcb_refcount+0x44>)
 800fa1e:	22ff      	movs	r2, #255	; 0xff
 800fa20:	490d      	ldr	r1, [pc, #52]	; (800fa58 <dhcp_dec_pcb_refcount+0x48>)
 800fa22:	480e      	ldr	r0, [pc, #56]	; (800fa5c <dhcp_dec_pcb_refcount+0x4c>)
 800fa24:	f005 f816 	bl	8014a54 <iprintf>
  dhcp_pcb_refcount--;
 800fa28:	4b09      	ldr	r3, [pc, #36]	; (800fa50 <dhcp_dec_pcb_refcount+0x40>)
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	b2da      	uxtb	r2, r3
 800fa30:	4b07      	ldr	r3, [pc, #28]	; (800fa50 <dhcp_dec_pcb_refcount+0x40>)
 800fa32:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fa34:	4b06      	ldr	r3, [pc, #24]	; (800fa50 <dhcp_dec_pcb_refcount+0x40>)
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d107      	bne.n	800fa4c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fa3c:	4b08      	ldr	r3, [pc, #32]	; (800fa60 <dhcp_dec_pcb_refcount+0x50>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7ff ff09 	bl	800f858 <udp_remove>
    dhcp_pcb = NULL;
 800fa46:	4b06      	ldr	r3, [pc, #24]	; (800fa60 <dhcp_dec_pcb_refcount+0x50>)
 800fa48:	2200      	movs	r2, #0
 800fa4a:	601a      	str	r2, [r3, #0]
  }
}
 800fa4c:	bf00      	nop
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	20010768 	.word	0x20010768
 800fa54:	08017674 	.word	0x08017674
 800fa58:	080176fc 	.word	0x080176fc
 800fa5c:	080176d4 	.word	0x080176d4
 800fa60:	20010764 	.word	0x20010764

0800fa64 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa70:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fa72:	210c      	movs	r1, #12
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f001 f855 	bl	8010b24 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fa7a:	4b06      	ldr	r3, [pc, #24]	; (800fa94 <dhcp_handle_nak+0x30>)
 800fa7c:	4a05      	ldr	r2, [pc, #20]	; (800fa94 <dhcp_handle_nak+0x30>)
 800fa7e:	4905      	ldr	r1, [pc, #20]	; (800fa94 <dhcp_handle_nak+0x30>)
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7f9 f82d 	bl	8008ae0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 fc48 	bl	801031c <dhcp_discover>
}
 800fa8c:	bf00      	nop
 800fa8e:	3710      	adds	r7, #16
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	0801821c 	.word	0x0801821c

0800fa98 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800faa6:	2108      	movs	r1, #8
 800faa8:	68f8      	ldr	r0, [r7, #12]
 800faaa:	f001 f83b 	bl	8010b24 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	331c      	adds	r3, #28
 800fab2:	2200      	movs	r2, #0
 800fab4:	4619      	mov	r1, r3
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f002 fb3c 	bl	8012134 <etharp_query>
 800fabc:	4603      	mov	r3, r0
 800fabe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	799b      	ldrb	r3, [r3, #6]
 800fac4:	2bff      	cmp	r3, #255	; 0xff
 800fac6:	d005      	beq.n	800fad4 <dhcp_check+0x3c>
    dhcp->tries++;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	799b      	ldrb	r3, [r3, #6]
 800facc:	3301      	adds	r3, #1
 800face:	b2da      	uxtb	r2, r3
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800fad4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fad8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fada:	893b      	ldrh	r3, [r7, #8]
 800fadc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fae0:	4a06      	ldr	r2, [pc, #24]	; (800fafc <dhcp_check+0x64>)
 800fae2:	fb82 1203 	smull	r1, r2, r2, r3
 800fae6:	1152      	asrs	r2, r2, #5
 800fae8:	17db      	asrs	r3, r3, #31
 800faea:	1ad3      	subs	r3, r2, r3
 800faec:	b29a      	uxth	r2, r3
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800faf2:	bf00      	nop
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	10624dd3 	.word	0x10624dd3

0800fb00 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb0e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fb10:	4b0c      	ldr	r3, [pc, #48]	; (800fb44 <dhcp_handle_offer+0x44>)
 800fb12:	789b      	ldrb	r3, [r3, #2]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d011      	beq.n	800fb3c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fb1e:	4b0a      	ldr	r3, [pc, #40]	; (800fb48 <dhcp_handle_offer+0x48>)
 800fb20:	689b      	ldr	r3, [r3, #8]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7f8 f901 	bl	8007d2a <lwip_htonl>
 800fb28:	4602      	mov	r2, r0
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	691a      	ldr	r2, [r3, #16]
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 f808 	bl	800fb4c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fb3c:	bf00      	nop
 800fb3e:	3710      	adds	r7, #16
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	20018d58 	.word	0x20018d58
 800fb48:	20018d60 	.word	0x20018d60

0800fb4c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fb4c:	b5b0      	push	{r4, r5, r7, lr}
 800fb4e:	b08a      	sub	sp, #40	; 0x28
 800fb50:	af02      	add	r7, sp, #8
 800fb52:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d109      	bne.n	800fb6e <dhcp_select+0x22>
 800fb5a:	4b71      	ldr	r3, [pc, #452]	; (800fd20 <dhcp_select+0x1d4>)
 800fb5c:	f240 1277 	movw	r2, #375	; 0x177
 800fb60:	4970      	ldr	r1, [pc, #448]	; (800fd24 <dhcp_select+0x1d8>)
 800fb62:	4871      	ldr	r0, [pc, #452]	; (800fd28 <dhcp_select+0x1dc>)
 800fb64:	f004 ff76 	bl	8014a54 <iprintf>
 800fb68:	f06f 030f 	mvn.w	r3, #15
 800fb6c:	e0d3      	b.n	800fd16 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb72:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fb74:	69bb      	ldr	r3, [r7, #24]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d109      	bne.n	800fb8e <dhcp_select+0x42>
 800fb7a:	4b69      	ldr	r3, [pc, #420]	; (800fd20 <dhcp_select+0x1d4>)
 800fb7c:	f240 1279 	movw	r2, #377	; 0x179
 800fb80:	496a      	ldr	r1, [pc, #424]	; (800fd2c <dhcp_select+0x1e0>)
 800fb82:	4869      	ldr	r0, [pc, #420]	; (800fd28 <dhcp_select+0x1dc>)
 800fb84:	f004 ff66 	bl	8014a54 <iprintf>
 800fb88:	f06f 0305 	mvn.w	r3, #5
 800fb8c:	e0c3      	b.n	800fd16 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fb8e:	2101      	movs	r1, #1
 800fb90:	69b8      	ldr	r0, [r7, #24]
 800fb92:	f000 ffc7 	bl	8010b24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fb96:	f107 030c 	add.w	r3, r7, #12
 800fb9a:	2203      	movs	r2, #3
 800fb9c:	69b9      	ldr	r1, [r7, #24]
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f001 fc4c 	bl	801143c <dhcp_create_msg>
 800fba4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	f000 8085 	beq.w	800fcb8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	685b      	ldr	r3, [r3, #4]
 800fbb2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fbb4:	89b8      	ldrh	r0, [r7, #12]
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	2239      	movs	r2, #57	; 0x39
 800fbc0:	f000 ffca 	bl	8010b58 <dhcp_option>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fbc8:	89b8      	ldrh	r0, [r7, #12]
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	f001 f819 	bl	8010c0c <dhcp_option_short>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fbde:	89b8      	ldrh	r0, [r7, #12]
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fbe6:	2304      	movs	r3, #4
 800fbe8:	2232      	movs	r2, #50	; 0x32
 800fbea:	f000 ffb5 	bl	8010b58 <dhcp_option>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fbf2:	89bc      	ldrh	r4, [r7, #12]
 800fbf4:	693b      	ldr	r3, [r7, #16]
 800fbf6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fbfa:	69bb      	ldr	r3, [r7, #24]
 800fbfc:	69db      	ldr	r3, [r3, #28]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7f8 f893 	bl	8007d2a <lwip_htonl>
 800fc04:	4603      	mov	r3, r0
 800fc06:	461a      	mov	r2, r3
 800fc08:	4629      	mov	r1, r5
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	f001 f830 	bl	8010c70 <dhcp_option_long>
 800fc10:	4603      	mov	r3, r0
 800fc12:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fc14:	89b8      	ldrh	r0, [r7, #12]
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc1c:	2304      	movs	r3, #4
 800fc1e:	2236      	movs	r2, #54	; 0x36
 800fc20:	f000 ff9a 	bl	8010b58 <dhcp_option>
 800fc24:	4603      	mov	r3, r0
 800fc26:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fc28:	89bc      	ldrh	r4, [r7, #12]
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fc30:	69bb      	ldr	r3, [r7, #24]
 800fc32:	699b      	ldr	r3, [r3, #24]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7f8 f878 	bl	8007d2a <lwip_htonl>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	4629      	mov	r1, r5
 800fc40:	4620      	mov	r0, r4
 800fc42:	f001 f815 	bl	8010c70 <dhcp_option_long>
 800fc46:	4603      	mov	r3, r0
 800fc48:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fc4a:	89b8      	ldrh	r0, [r7, #12]
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc52:	2303      	movs	r3, #3
 800fc54:	2237      	movs	r2, #55	; 0x37
 800fc56:	f000 ff7f 	bl	8010b58 <dhcp_option>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fc5e:	2300      	movs	r3, #0
 800fc60:	77bb      	strb	r3, [r7, #30]
 800fc62:	e00e      	b.n	800fc82 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fc64:	89b8      	ldrh	r0, [r7, #12]
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fc6c:	7fbb      	ldrb	r3, [r7, #30]
 800fc6e:	4a30      	ldr	r2, [pc, #192]	; (800fd30 <dhcp_select+0x1e4>)
 800fc70:	5cd3      	ldrb	r3, [r2, r3]
 800fc72:	461a      	mov	r2, r3
 800fc74:	f000 ffa4 	bl	8010bc0 <dhcp_option_byte>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fc7c:	7fbb      	ldrb	r3, [r7, #30]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	77bb      	strb	r3, [r7, #30]
 800fc82:	7fbb      	ldrb	r3, [r7, #30]
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d9ed      	bls.n	800fc64 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fc88:	89b8      	ldrh	r0, [r7, #12]
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	33f0      	adds	r3, #240	; 0xf0
 800fc8e:	697a      	ldr	r2, [r7, #20]
 800fc90:	4619      	mov	r1, r3
 800fc92:	f001 fca9 	bl	80115e8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fc96:	4b27      	ldr	r3, [pc, #156]	; (800fd34 <dhcp_select+0x1e8>)
 800fc98:	6818      	ldr	r0, [r3, #0]
 800fc9a:	4b27      	ldr	r3, [pc, #156]	; (800fd38 <dhcp_select+0x1ec>)
 800fc9c:	9301      	str	r3, [sp, #4]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	9300      	str	r3, [sp, #0]
 800fca2:	2343      	movs	r3, #67	; 0x43
 800fca4:	4a25      	ldr	r2, [pc, #148]	; (800fd3c <dhcp_select+0x1f0>)
 800fca6:	6979      	ldr	r1, [r7, #20]
 800fca8:	f7ff fbda 	bl	800f460 <udp_sendto_if_src>
 800fcac:	4603      	mov	r3, r0
 800fcae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fcb0:	6978      	ldr	r0, [r7, #20]
 800fcb2:	f7f9 fc23 	bl	80094fc <pbuf_free>
 800fcb6:	e001      	b.n	800fcbc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fcb8:	23ff      	movs	r3, #255	; 0xff
 800fcba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fcbc:	69bb      	ldr	r3, [r7, #24]
 800fcbe:	799b      	ldrb	r3, [r3, #6]
 800fcc0:	2bff      	cmp	r3, #255	; 0xff
 800fcc2:	d005      	beq.n	800fcd0 <dhcp_select+0x184>
    dhcp->tries++;
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	799b      	ldrb	r3, [r3, #6]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	b2da      	uxtb	r2, r3
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fcd0:	69bb      	ldr	r3, [r7, #24]
 800fcd2:	799b      	ldrb	r3, [r3, #6]
 800fcd4:	2b05      	cmp	r3, #5
 800fcd6:	d80d      	bhi.n	800fcf4 <dhcp_select+0x1a8>
 800fcd8:	69bb      	ldr	r3, [r7, #24]
 800fcda:	799b      	ldrb	r3, [r3, #6]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	2301      	movs	r3, #1
 800fce0:	4093      	lsls	r3, r2
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	461a      	mov	r2, r3
 800fce6:	0152      	lsls	r2, r2, #5
 800fce8:	1ad2      	subs	r2, r2, r3
 800fcea:	0092      	lsls	r2, r2, #2
 800fcec:	4413      	add	r3, r2
 800fcee:	00db      	lsls	r3, r3, #3
 800fcf0:	b29b      	uxth	r3, r3
 800fcf2:	e001      	b.n	800fcf8 <dhcp_select+0x1ac>
 800fcf4:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fcf8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fcfa:	89fb      	ldrh	r3, [r7, #14]
 800fcfc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fd00:	4a0f      	ldr	r2, [pc, #60]	; (800fd40 <dhcp_select+0x1f4>)
 800fd02:	fb82 1203 	smull	r1, r2, r2, r3
 800fd06:	1152      	asrs	r2, r2, #5
 800fd08:	17db      	asrs	r3, r3, #31
 800fd0a:	1ad3      	subs	r3, r2, r3
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fd12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3720      	adds	r7, #32
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bdb0      	pop	{r4, r5, r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	08017674 	.word	0x08017674
 800fd24:	08017720 	.word	0x08017720
 800fd28:	080176d4 	.word	0x080176d4
 800fd2c:	0801773c 	.word	0x0801773c
 800fd30:	20000030 	.word	0x20000030
 800fd34:	20010764 	.word	0x20010764
 800fd38:	0801821c 	.word	0x0801821c
 800fd3c:	08018220 	.word	0x08018220
 800fd40:	10624dd3 	.word	0x10624dd3

0800fd44 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fd4a:	4b27      	ldr	r3, [pc, #156]	; (800fde8 <dhcp_coarse_tmr+0xa4>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	607b      	str	r3, [r7, #4]
 800fd50:	e042      	b.n	800fdd8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd56:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d039      	beq.n	800fdd2 <dhcp_coarse_tmr+0x8e>
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	795b      	ldrb	r3, [r3, #5]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d035      	beq.n	800fdd2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	8a9b      	ldrh	r3, [r3, #20]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d012      	beq.n	800fd94 <dhcp_coarse_tmr+0x50>
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	8a5b      	ldrh	r3, [r3, #18]
 800fd72:	3301      	adds	r3, #1
 800fd74:	b29a      	uxth	r2, r3
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	825a      	strh	r2, [r3, #18]
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	8a5a      	ldrh	r2, [r3, #18]
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	8a9b      	ldrh	r3, [r3, #20]
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d106      	bne.n	800fd94 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 fe32 	bl	80109f0 <dhcp_release_and_stop>
        dhcp_start(netif);
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 f969 	bl	8010064 <dhcp_start>
 800fd92:	e01e      	b.n	800fdd2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	8a1b      	ldrh	r3, [r3, #16]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d00b      	beq.n	800fdb4 <dhcp_coarse_tmr+0x70>
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	8a1b      	ldrh	r3, [r3, #16]
 800fda0:	1e5a      	subs	r2, r3, #1
 800fda2:	b291      	uxth	r1, r2
 800fda4:	683a      	ldr	r2, [r7, #0]
 800fda6:	8211      	strh	r1, [r2, #16]
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d103      	bne.n	800fdb4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f000 f8c6 	bl	800ff3e <dhcp_t2_timeout>
 800fdb2:	e00e      	b.n	800fdd2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	89db      	ldrh	r3, [r3, #14]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00a      	beq.n	800fdd2 <dhcp_coarse_tmr+0x8e>
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	89db      	ldrh	r3, [r3, #14]
 800fdc0:	1e5a      	subs	r2, r3, #1
 800fdc2:	b291      	uxth	r1, r2
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	81d1      	strh	r1, [r2, #14]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d102      	bne.n	800fdd2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 f888 	bl	800fee2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	607b      	str	r3, [r7, #4]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d1b9      	bne.n	800fd52 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800fdde:	bf00      	nop
 800fde0:	bf00      	nop
 800fde2:	3708      	adds	r7, #8
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	20018d2c 	.word	0x20018d2c

0800fdec <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fdf2:	4b16      	ldr	r3, [pc, #88]	; (800fe4c <dhcp_fine_tmr+0x60>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	607b      	str	r3, [r7, #4]
 800fdf8:	e020      	b.n	800fe3c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfe:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d017      	beq.n	800fe36 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	891b      	ldrh	r3, [r3, #8]
 800fe0a:	2b01      	cmp	r3, #1
 800fe0c:	d906      	bls.n	800fe1c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	891b      	ldrh	r3, [r3, #8]
 800fe12:	3b01      	subs	r3, #1
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	811a      	strh	r2, [r3, #8]
 800fe1a:	e00c      	b.n	800fe36 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	891b      	ldrh	r3, [r3, #8]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d108      	bne.n	800fe36 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	891b      	ldrh	r3, [r3, #8]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 f80d 	bl	800fe50 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	607b      	str	r3, [r7, #4]
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1db      	bne.n	800fdfa <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800fe42:	bf00      	nop
 800fe44:	bf00      	nop
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}
 800fe4c:	20018d2c 	.word	0x20018d2c

0800fe50 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b084      	sub	sp, #16
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe5c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	795b      	ldrb	r3, [r3, #5]
 800fe62:	2b0c      	cmp	r3, #12
 800fe64:	d003      	beq.n	800fe6e <dhcp_timeout+0x1e>
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	795b      	ldrb	r3, [r3, #5]
 800fe6a:	2b06      	cmp	r3, #6
 800fe6c:	d103      	bne.n	800fe76 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 fa54 	bl	801031c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800fe74:	e031      	b.n	800feda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	795b      	ldrb	r3, [r3, #5]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d10e      	bne.n	800fe9c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	799b      	ldrb	r3, [r3, #6]
 800fe82:	2b05      	cmp	r3, #5
 800fe84:	d803      	bhi.n	800fe8e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f7ff fe60 	bl	800fb4c <dhcp_select>
}
 800fe8c:	e025      	b.n	800feda <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 fdae 	bl	80109f0 <dhcp_release_and_stop>
      dhcp_start(netif);
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 f8e5 	bl	8010064 <dhcp_start>
}
 800fe9a:	e01e      	b.n	800feda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	795b      	ldrb	r3, [r3, #5]
 800fea0:	2b08      	cmp	r3, #8
 800fea2:	d10b      	bne.n	800febc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	799b      	ldrb	r3, [r3, #6]
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d803      	bhi.n	800feb4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7ff fdf3 	bl	800fa98 <dhcp_check>
}
 800feb2:	e012      	b.n	800feda <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 fad3 	bl	8010460 <dhcp_bind>
}
 800feba:	e00e      	b.n	800feda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	795b      	ldrb	r3, [r3, #5]
 800fec0:	2b03      	cmp	r3, #3
 800fec2:	d10a      	bne.n	800feda <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	799b      	ldrb	r3, [r3, #6]
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d803      	bhi.n	800fed4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 fcd9 	bl	8010884 <dhcp_reboot>
}
 800fed2:	e002      	b.n	800feda <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 fa21 	bl	801031c <dhcp_discover>
}
 800feda:	bf00      	nop
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b084      	sub	sp, #16
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	795b      	ldrb	r3, [r3, #5]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d007      	beq.n	800ff08 <dhcp_t1_timeout+0x26>
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	795b      	ldrb	r3, [r3, #5]
 800fefc:	2b0a      	cmp	r3, #10
 800fefe:	d003      	beq.n	800ff08 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ff04:	2b05      	cmp	r3, #5
 800ff06:	d116      	bne.n	800ff36 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f000 fb83 	bl	8010614 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	899b      	ldrh	r3, [r3, #12]
 800ff12:	461a      	mov	r2, r3
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	8a5b      	ldrh	r3, [r3, #18]
 800ff18:	1ad3      	subs	r3, r2, r3
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	dd0b      	ble.n	800ff36 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	899b      	ldrh	r3, [r3, #12]
 800ff22:	461a      	mov	r2, r3
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	8a5b      	ldrh	r3, [r3, #18]
 800ff28:	1ad3      	subs	r3, r2, r3
 800ff2a:	0fda      	lsrs	r2, r3, #31
 800ff2c:	4413      	add	r3, r2
 800ff2e:	105b      	asrs	r3, r3, #1
 800ff30:	b29a      	uxth	r2, r3
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800ff36:	bf00      	nop
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}

0800ff3e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800ff3e:	b580      	push	{r7, lr}
 800ff40:	b084      	sub	sp, #16
 800ff42:	af00      	add	r7, sp, #0
 800ff44:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	795b      	ldrb	r3, [r3, #5]
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d00b      	beq.n	800ff6c <dhcp_t2_timeout+0x2e>
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	795b      	ldrb	r3, [r3, #5]
 800ff58:	2b0a      	cmp	r3, #10
 800ff5a:	d007      	beq.n	800ff6c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ff60:	2b05      	cmp	r3, #5
 800ff62:	d003      	beq.n	800ff6c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	795b      	ldrb	r3, [r3, #5]
 800ff68:	2b04      	cmp	r3, #4
 800ff6a:	d116      	bne.n	800ff9a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f000 fbed 	bl	801074c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	8a9b      	ldrh	r3, [r3, #20]
 800ff76:	461a      	mov	r2, r3
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	8a5b      	ldrh	r3, [r3, #18]
 800ff7c:	1ad3      	subs	r3, r2, r3
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	dd0b      	ble.n	800ff9a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	8a9b      	ldrh	r3, [r3, #20]
 800ff86:	461a      	mov	r2, r3
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	8a5b      	ldrh	r3, [r3, #18]
 800ff8c:	1ad3      	subs	r3, r2, r3
 800ff8e:	0fda      	lsrs	r2, r3, #31
 800ff90:	4413      	add	r3, r2
 800ff92:	105b      	asrs	r3, r3, #1
 800ff94:	b29a      	uxth	r2, r3
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800ff9a:	bf00      	nop
 800ff9c:	3710      	adds	r7, #16
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
	...

0800ffa4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ffc0:	4b26      	ldr	r3, [pc, #152]	; (801005c <dhcp_handle_ack+0xb8>)
 800ffc2:	78db      	ldrb	r3, [r3, #3]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d003      	beq.n	800ffd0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800ffc8:	4b25      	ldr	r3, [pc, #148]	; (8010060 <dhcp_handle_ack+0xbc>)
 800ffca:	68da      	ldr	r2, [r3, #12]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800ffd0:	4b22      	ldr	r3, [pc, #136]	; (801005c <dhcp_handle_ack+0xb8>)
 800ffd2:	791b      	ldrb	r3, [r3, #4]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d004      	beq.n	800ffe2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800ffd8:	4b21      	ldr	r3, [pc, #132]	; (8010060 <dhcp_handle_ack+0xbc>)
 800ffda:	691a      	ldr	r2, [r3, #16]
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	62da      	str	r2, [r3, #44]	; 0x2c
 800ffe0:	e004      	b.n	800ffec <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe6:	085a      	lsrs	r2, r3, #1
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800ffec:	4b1b      	ldr	r3, [pc, #108]	; (801005c <dhcp_handle_ack+0xb8>)
 800ffee:	795b      	ldrb	r3, [r3, #5]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d004      	beq.n	800fffe <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800fff4:	4b1a      	ldr	r3, [pc, #104]	; (8010060 <dhcp_handle_ack+0xbc>)
 800fff6:	695a      	ldr	r2, [r3, #20]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	631a      	str	r2, [r3, #48]	; 0x30
 800fffc:	e007      	b.n	801000e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010002:	4613      	mov	r3, r2
 8010004:	00db      	lsls	r3, r3, #3
 8010006:	1a9b      	subs	r3, r3, r2
 8010008:	08da      	lsrs	r2, r3, #3
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	691a      	ldr	r2, [r3, #16]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8010016:	4b11      	ldr	r3, [pc, #68]	; (801005c <dhcp_handle_ack+0xb8>)
 8010018:	799b      	ldrb	r3, [r3, #6]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00b      	beq.n	8010036 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801001e:	4b10      	ldr	r3, [pc, #64]	; (8010060 <dhcp_handle_ack+0xbc>)
 8010020:	699b      	ldr	r3, [r3, #24]
 8010022:	4618      	mov	r0, r3
 8010024:	f7f7 fe81 	bl	8007d2a <lwip_htonl>
 8010028:	4602      	mov	r2, r0
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2201      	movs	r2, #1
 8010032:	71da      	strb	r2, [r3, #7]
 8010034:	e002      	b.n	801003c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2200      	movs	r2, #0
 801003a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801003c:	4b07      	ldr	r3, [pc, #28]	; (801005c <dhcp_handle_ack+0xb8>)
 801003e:	79db      	ldrb	r3, [r3, #7]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d007      	beq.n	8010054 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010044:	4b06      	ldr	r3, [pc, #24]	; (8010060 <dhcp_handle_ack+0xbc>)
 8010046:	69db      	ldr	r3, [r3, #28]
 8010048:	4618      	mov	r0, r3
 801004a:	f7f7 fe6e 	bl	8007d2a <lwip_htonl>
 801004e:	4602      	mov	r2, r0
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8010054:	bf00      	nop
 8010056:	3710      	adds	r7, #16
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}
 801005c:	20018d58 	.word	0x20018d58
 8010060:	20018d60 	.word	0x20018d60

08010064 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d109      	bne.n	8010086 <dhcp_start+0x22>
 8010072:	4b37      	ldr	r3, [pc, #220]	; (8010150 <dhcp_start+0xec>)
 8010074:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010078:	4936      	ldr	r1, [pc, #216]	; (8010154 <dhcp_start+0xf0>)
 801007a:	4837      	ldr	r0, [pc, #220]	; (8010158 <dhcp_start+0xf4>)
 801007c:	f004 fcea 	bl	8014a54 <iprintf>
 8010080:	f06f 030f 	mvn.w	r3, #15
 8010084:	e060      	b.n	8010148 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801008c:	f003 0301 	and.w	r3, r3, #1
 8010090:	2b00      	cmp	r3, #0
 8010092:	d109      	bne.n	80100a8 <dhcp_start+0x44>
 8010094:	4b2e      	ldr	r3, [pc, #184]	; (8010150 <dhcp_start+0xec>)
 8010096:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801009a:	4930      	ldr	r1, [pc, #192]	; (801015c <dhcp_start+0xf8>)
 801009c:	482e      	ldr	r0, [pc, #184]	; (8010158 <dhcp_start+0xf4>)
 801009e:	f004 fcd9 	bl	8014a54 <iprintf>
 80100a2:	f06f 030f 	mvn.w	r3, #15
 80100a6:	e04f      	b.n	8010148 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100b2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80100b6:	d202      	bcs.n	80100be <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80100b8:	f04f 33ff 	mov.w	r3, #4294967295
 80100bc:	e044      	b.n	8010148 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d10d      	bne.n	80100e0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80100c4:	2034      	movs	r0, #52	; 0x34
 80100c6:	f7f8 f94f 	bl	8008368 <mem_malloc>
 80100ca:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d102      	bne.n	80100d8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80100d2:	f04f 33ff 	mov.w	r3, #4294967295
 80100d6:	e037      	b.n	8010148 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	68fa      	ldr	r2, [r7, #12]
 80100dc:	625a      	str	r2, [r3, #36]	; 0x24
 80100de:	e005      	b.n	80100ec <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	791b      	ldrb	r3, [r3, #4]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d001      	beq.n	80100ec <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80100e8:	f7ff fc92 	bl	800fa10 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80100ec:	2234      	movs	r2, #52	; 0x34
 80100ee:	2100      	movs	r1, #0
 80100f0:	68f8      	ldr	r0, [r7, #12]
 80100f2:	f004 f90f 	bl	8014314 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80100f6:	f7ff fc39 	bl	800f96c <dhcp_inc_pcb_refcount>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <dhcp_start+0xa2>
    return ERR_MEM;
 8010100:	f04f 33ff 	mov.w	r3, #4294967295
 8010104:	e020      	b.n	8010148 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2201      	movs	r2, #1
 801010a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010112:	f003 0304 	and.w	r3, r3, #4
 8010116:	2b00      	cmp	r3, #0
 8010118:	d105      	bne.n	8010126 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801011a:	2102      	movs	r1, #2
 801011c:	68f8      	ldr	r0, [r7, #12]
 801011e:	f000 fd01 	bl	8010b24 <dhcp_set_state>
    return ERR_OK;
 8010122:	2300      	movs	r3, #0
 8010124:	e010      	b.n	8010148 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f000 f8f8 	bl	801031c <dhcp_discover>
 801012c:	4603      	mov	r3, r0
 801012e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8010130:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d005      	beq.n	8010144 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 fc59 	bl	80109f0 <dhcp_release_and_stop>
    return ERR_MEM;
 801013e:	f04f 33ff 	mov.w	r3, #4294967295
 8010142:	e001      	b.n	8010148 <dhcp_start+0xe4>
  }
  return result;
 8010144:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010148:	4618      	mov	r0, r3
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	08017674 	.word	0x08017674
 8010154:	08017758 	.word	0x08017758
 8010158:	080176d4 	.word	0x080176d4
 801015c:	0801779c 	.word	0x0801779c

08010160 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b084      	sub	sp, #16
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801016c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d025      	beq.n	80101c0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	795b      	ldrb	r3, [r3, #5]
 8010178:	2b0a      	cmp	r3, #10
 801017a:	d008      	beq.n	801018e <dhcp_network_changed+0x2e>
 801017c:	2b0a      	cmp	r3, #10
 801017e:	dc0d      	bgt.n	801019c <dhcp_network_changed+0x3c>
 8010180:	2b00      	cmp	r3, #0
 8010182:	d01f      	beq.n	80101c4 <dhcp_network_changed+0x64>
 8010184:	2b00      	cmp	r3, #0
 8010186:	db09      	blt.n	801019c <dhcp_network_changed+0x3c>
 8010188:	3b03      	subs	r3, #3
 801018a:	2b02      	cmp	r3, #2
 801018c:	d806      	bhi.n	801019c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2200      	movs	r2, #0
 8010192:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 fb75 	bl	8010884 <dhcp_reboot>
      break;
 801019a:	e014      	b.n	80101c6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	795b      	ldrb	r3, [r3, #5]
 80101a0:	2b0c      	cmp	r3, #12
 80101a2:	d906      	bls.n	80101b2 <dhcp_network_changed+0x52>
 80101a4:	4b09      	ldr	r3, [pc, #36]	; (80101cc <dhcp_network_changed+0x6c>)
 80101a6:	f240 326d 	movw	r2, #877	; 0x36d
 80101aa:	4909      	ldr	r1, [pc, #36]	; (80101d0 <dhcp_network_changed+0x70>)
 80101ac:	4809      	ldr	r0, [pc, #36]	; (80101d4 <dhcp_network_changed+0x74>)
 80101ae:	f004 fc51 	bl	8014a54 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2200      	movs	r2, #0
 80101b6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 f8af 	bl	801031c <dhcp_discover>
      break;
 80101be:	e002      	b.n	80101c6 <dhcp_network_changed+0x66>
    return;
 80101c0:	bf00      	nop
 80101c2:	e000      	b.n	80101c6 <dhcp_network_changed+0x66>
      break;
 80101c4:	bf00      	nop
  }
}
 80101c6:	3710      	adds	r7, #16
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	08017674 	.word	0x08017674
 80101d0:	080177c0 	.word	0x080177c0
 80101d4:	080176d4 	.word	0x080176d4

080101d8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d107      	bne.n	80101f8 <dhcp_arp_reply+0x20>
 80101e8:	4b0e      	ldr	r3, [pc, #56]	; (8010224 <dhcp_arp_reply+0x4c>)
 80101ea:	f240 328b 	movw	r2, #907	; 0x38b
 80101ee:	490e      	ldr	r1, [pc, #56]	; (8010228 <dhcp_arp_reply+0x50>)
 80101f0:	480e      	ldr	r0, [pc, #56]	; (801022c <dhcp_arp_reply+0x54>)
 80101f2:	f004 fc2f 	bl	8014a54 <iprintf>
 80101f6:	e012      	b.n	801021e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00c      	beq.n	801021e <dhcp_arp_reply+0x46>
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	795b      	ldrb	r3, [r3, #5]
 8010208:	2b08      	cmp	r3, #8
 801020a:	d108      	bne.n	801021e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	681a      	ldr	r2, [r3, #0]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	69db      	ldr	r3, [r3, #28]
 8010214:	429a      	cmp	r2, r3
 8010216:	d102      	bne.n	801021e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f000 f809 	bl	8010230 <dhcp_decline>
    }
  }
}
 801021e:	3710      	adds	r7, #16
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	08017674 	.word	0x08017674
 8010228:	08017758 	.word	0x08017758
 801022c:	080176d4 	.word	0x080176d4

08010230 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8010230:	b5b0      	push	{r4, r5, r7, lr}
 8010232:	b08a      	sub	sp, #40	; 0x28
 8010234:	af02      	add	r7, sp, #8
 8010236:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801023c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801023e:	210c      	movs	r1, #12
 8010240:	69b8      	ldr	r0, [r7, #24]
 8010242:	f000 fc6f 	bl	8010b24 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8010246:	f107 030c 	add.w	r3, r7, #12
 801024a:	2204      	movs	r2, #4
 801024c:	69b9      	ldr	r1, [r7, #24]
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f001 f8f4 	bl	801143c <dhcp_create_msg>
 8010254:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d035      	beq.n	80102c8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010262:	89b8      	ldrh	r0, [r7, #12]
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801026a:	2304      	movs	r3, #4
 801026c:	2232      	movs	r2, #50	; 0x32
 801026e:	f000 fc73 	bl	8010b58 <dhcp_option>
 8010272:	4603      	mov	r3, r0
 8010274:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010276:	89bc      	ldrh	r4, [r7, #12]
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	69db      	ldr	r3, [r3, #28]
 8010282:	4618      	mov	r0, r3
 8010284:	f7f7 fd51 	bl	8007d2a <lwip_htonl>
 8010288:	4603      	mov	r3, r0
 801028a:	461a      	mov	r2, r3
 801028c:	4629      	mov	r1, r5
 801028e:	4620      	mov	r0, r4
 8010290:	f000 fcee 	bl	8010c70 <dhcp_option_long>
 8010294:	4603      	mov	r3, r0
 8010296:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010298:	89b8      	ldrh	r0, [r7, #12]
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	33f0      	adds	r3, #240	; 0xf0
 801029e:	697a      	ldr	r2, [r7, #20]
 80102a0:	4619      	mov	r1, r3
 80102a2:	f001 f9a1 	bl	80115e8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80102a6:	4b19      	ldr	r3, [pc, #100]	; (801030c <dhcp_decline+0xdc>)
 80102a8:	6818      	ldr	r0, [r3, #0]
 80102aa:	4b19      	ldr	r3, [pc, #100]	; (8010310 <dhcp_decline+0xe0>)
 80102ac:	9301      	str	r3, [sp, #4]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	9300      	str	r3, [sp, #0]
 80102b2:	2343      	movs	r3, #67	; 0x43
 80102b4:	4a17      	ldr	r2, [pc, #92]	; (8010314 <dhcp_decline+0xe4>)
 80102b6:	6979      	ldr	r1, [r7, #20]
 80102b8:	f7ff f8d2 	bl	800f460 <udp_sendto_if_src>
 80102bc:	4603      	mov	r3, r0
 80102be:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80102c0:	6978      	ldr	r0, [r7, #20]
 80102c2:	f7f9 f91b 	bl	80094fc <pbuf_free>
 80102c6:	e001      	b.n	80102cc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80102c8:	23ff      	movs	r3, #255	; 0xff
 80102ca:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	799b      	ldrb	r3, [r3, #6]
 80102d0:	2bff      	cmp	r3, #255	; 0xff
 80102d2:	d005      	beq.n	80102e0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	799b      	ldrb	r3, [r3, #6]
 80102d8:	3301      	adds	r3, #1
 80102da:	b2da      	uxtb	r2, r3
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80102e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80102e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80102e6:	89fb      	ldrh	r3, [r7, #14]
 80102e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80102ec:	4a0a      	ldr	r2, [pc, #40]	; (8010318 <dhcp_decline+0xe8>)
 80102ee:	fb82 1203 	smull	r1, r2, r2, r3
 80102f2:	1152      	asrs	r2, r2, #5
 80102f4:	17db      	asrs	r3, r3, #31
 80102f6:	1ad3      	subs	r3, r2, r3
 80102f8:	b29a      	uxth	r2, r3
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80102fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010302:	4618      	mov	r0, r3
 8010304:	3720      	adds	r7, #32
 8010306:	46bd      	mov	sp, r7
 8010308:	bdb0      	pop	{r4, r5, r7, pc}
 801030a:	bf00      	nop
 801030c:	20010764 	.word	0x20010764
 8010310:	0801821c 	.word	0x0801821c
 8010314:	08018220 	.word	0x08018220
 8010318:	10624dd3 	.word	0x10624dd3

0801031c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b08a      	sub	sp, #40	; 0x28
 8010320:	af02      	add	r7, sp, #8
 8010322:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010328:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801032a:	2300      	movs	r3, #0
 801032c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	2200      	movs	r2, #0
 8010332:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8010334:	2106      	movs	r1, #6
 8010336:	69b8      	ldr	r0, [r7, #24]
 8010338:	f000 fbf4 	bl	8010b24 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801033c:	f107 0308 	add.w	r3, r7, #8
 8010340:	2201      	movs	r2, #1
 8010342:	69b9      	ldr	r1, [r7, #24]
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f001 f879 	bl	801143c <dhcp_create_msg>
 801034a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d04b      	beq.n	80103ea <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010358:	8938      	ldrh	r0, [r7, #8]
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010360:	2302      	movs	r3, #2
 8010362:	2239      	movs	r2, #57	; 0x39
 8010364:	f000 fbf8 	bl	8010b58 <dhcp_option>
 8010368:	4603      	mov	r3, r0
 801036a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801036c:	8938      	ldrh	r0, [r7, #8]
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010378:	461a      	mov	r2, r3
 801037a:	f000 fc47 	bl	8010c0c <dhcp_option_short>
 801037e:	4603      	mov	r3, r0
 8010380:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010382:	8938      	ldrh	r0, [r7, #8]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801038a:	2303      	movs	r3, #3
 801038c:	2237      	movs	r2, #55	; 0x37
 801038e:	f000 fbe3 	bl	8010b58 <dhcp_option>
 8010392:	4603      	mov	r3, r0
 8010394:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010396:	2300      	movs	r3, #0
 8010398:	77fb      	strb	r3, [r7, #31]
 801039a:	e00e      	b.n	80103ba <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801039c:	8938      	ldrh	r0, [r7, #8]
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80103a4:	7ffb      	ldrb	r3, [r7, #31]
 80103a6:	4a29      	ldr	r2, [pc, #164]	; (801044c <dhcp_discover+0x130>)
 80103a8:	5cd3      	ldrb	r3, [r2, r3]
 80103aa:	461a      	mov	r2, r3
 80103ac:	f000 fc08 	bl	8010bc0 <dhcp_option_byte>
 80103b0:	4603      	mov	r3, r0
 80103b2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80103b4:	7ffb      	ldrb	r3, [r7, #31]
 80103b6:	3301      	adds	r3, #1
 80103b8:	77fb      	strb	r3, [r7, #31]
 80103ba:	7ffb      	ldrb	r3, [r7, #31]
 80103bc:	2b02      	cmp	r3, #2
 80103be:	d9ed      	bls.n	801039c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80103c0:	8938      	ldrh	r0, [r7, #8]
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	33f0      	adds	r3, #240	; 0xf0
 80103c6:	693a      	ldr	r2, [r7, #16]
 80103c8:	4619      	mov	r1, r3
 80103ca:	f001 f90d 	bl	80115e8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80103ce:	4b20      	ldr	r3, [pc, #128]	; (8010450 <dhcp_discover+0x134>)
 80103d0:	6818      	ldr	r0, [r3, #0]
 80103d2:	4b20      	ldr	r3, [pc, #128]	; (8010454 <dhcp_discover+0x138>)
 80103d4:	9301      	str	r3, [sp, #4]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	9300      	str	r3, [sp, #0]
 80103da:	2343      	movs	r3, #67	; 0x43
 80103dc:	4a1e      	ldr	r2, [pc, #120]	; (8010458 <dhcp_discover+0x13c>)
 80103de:	6939      	ldr	r1, [r7, #16]
 80103e0:	f7ff f83e 	bl	800f460 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80103e4:	6938      	ldr	r0, [r7, #16]
 80103e6:	f7f9 f889 	bl	80094fc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	799b      	ldrb	r3, [r3, #6]
 80103ee:	2bff      	cmp	r3, #255	; 0xff
 80103f0:	d005      	beq.n	80103fe <dhcp_discover+0xe2>
    dhcp->tries++;
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	799b      	ldrb	r3, [r3, #6]
 80103f6:	3301      	adds	r3, #1
 80103f8:	b2da      	uxtb	r2, r3
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	799b      	ldrb	r3, [r3, #6]
 8010402:	2b05      	cmp	r3, #5
 8010404:	d80d      	bhi.n	8010422 <dhcp_discover+0x106>
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	799b      	ldrb	r3, [r3, #6]
 801040a:	461a      	mov	r2, r3
 801040c:	2301      	movs	r3, #1
 801040e:	4093      	lsls	r3, r2
 8010410:	b29b      	uxth	r3, r3
 8010412:	461a      	mov	r2, r3
 8010414:	0152      	lsls	r2, r2, #5
 8010416:	1ad2      	subs	r2, r2, r3
 8010418:	0092      	lsls	r2, r2, #2
 801041a:	4413      	add	r3, r2
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	b29b      	uxth	r3, r3
 8010420:	e001      	b.n	8010426 <dhcp_discover+0x10a>
 8010422:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010426:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010428:	897b      	ldrh	r3, [r7, #10]
 801042a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801042e:	4a0b      	ldr	r2, [pc, #44]	; (801045c <dhcp_discover+0x140>)
 8010430:	fb82 1203 	smull	r1, r2, r2, r3
 8010434:	1152      	asrs	r2, r2, #5
 8010436:	17db      	asrs	r3, r3, #31
 8010438:	1ad3      	subs	r3, r2, r3
 801043a:	b29a      	uxth	r2, r3
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010440:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010444:	4618      	mov	r0, r3
 8010446:	3720      	adds	r7, #32
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	20000030 	.word	0x20000030
 8010450:	20010764 	.word	0x20010764
 8010454:	0801821c 	.word	0x0801821c
 8010458:	08018220 	.word	0x08018220
 801045c:	10624dd3 	.word	0x10624dd3

08010460 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b088      	sub	sp, #32
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d107      	bne.n	801047e <dhcp_bind+0x1e>
 801046e:	4b64      	ldr	r3, [pc, #400]	; (8010600 <dhcp_bind+0x1a0>)
 8010470:	f240 4215 	movw	r2, #1045	; 0x415
 8010474:	4963      	ldr	r1, [pc, #396]	; (8010604 <dhcp_bind+0x1a4>)
 8010476:	4864      	ldr	r0, [pc, #400]	; (8010608 <dhcp_bind+0x1a8>)
 8010478:	f004 faec 	bl	8014a54 <iprintf>
 801047c:	e0bc      	b.n	80105f8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010482:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d107      	bne.n	801049a <dhcp_bind+0x3a>
 801048a:	4b5d      	ldr	r3, [pc, #372]	; (8010600 <dhcp_bind+0x1a0>)
 801048c:	f240 4217 	movw	r2, #1047	; 0x417
 8010490:	495e      	ldr	r1, [pc, #376]	; (801060c <dhcp_bind+0x1ac>)
 8010492:	485d      	ldr	r0, [pc, #372]	; (8010608 <dhcp_bind+0x1a8>)
 8010494:	f004 fade 	bl	8014a54 <iprintf>
 8010498:	e0ae      	b.n	80105f8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	2200      	movs	r2, #0
 801049e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a8:	d019      	beq.n	80104de <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104ae:	331e      	adds	r3, #30
 80104b0:	4a57      	ldr	r2, [pc, #348]	; (8010610 <dhcp_bind+0x1b0>)
 80104b2:	fba2 2303 	umull	r2, r3, r2, r3
 80104b6:	095b      	lsrs	r3, r3, #5
 80104b8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80104ba:	69fb      	ldr	r3, [r7, #28]
 80104bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104c0:	d302      	bcc.n	80104c8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80104c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80104c6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80104c8:	69fb      	ldr	r3, [r7, #28]
 80104ca:	b29a      	uxth	r2, r3
 80104cc:	69bb      	ldr	r3, [r7, #24]
 80104ce:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	8a9b      	ldrh	r3, [r3, #20]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d102      	bne.n	80104de <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	2201      	movs	r2, #1
 80104dc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e6:	d01d      	beq.n	8010524 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ec:	331e      	adds	r3, #30
 80104ee:	4a48      	ldr	r2, [pc, #288]	; (8010610 <dhcp_bind+0x1b0>)
 80104f0:	fba2 2303 	umull	r2, r3, r2, r3
 80104f4:	095b      	lsrs	r3, r3, #5
 80104f6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104fe:	d302      	bcc.n	8010506 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010504:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	b29a      	uxth	r2, r3
 801050a:	69bb      	ldr	r3, [r7, #24]
 801050c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801050e:	69bb      	ldr	r3, [r7, #24]
 8010510:	895b      	ldrh	r3, [r3, #10]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d102      	bne.n	801051c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8010516:	69bb      	ldr	r3, [r7, #24]
 8010518:	2201      	movs	r2, #1
 801051a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801051c:	69bb      	ldr	r3, [r7, #24]
 801051e:	895a      	ldrh	r2, [r3, #10]
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010524:	69bb      	ldr	r3, [r7, #24]
 8010526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010528:	f1b3 3fff 	cmp.w	r3, #4294967295
 801052c:	d01d      	beq.n	801056a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010532:	331e      	adds	r3, #30
 8010534:	4a36      	ldr	r2, [pc, #216]	; (8010610 <dhcp_bind+0x1b0>)
 8010536:	fba2 2303 	umull	r2, r3, r2, r3
 801053a:	095b      	lsrs	r3, r3, #5
 801053c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801053e:	69fb      	ldr	r3, [r7, #28]
 8010540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010544:	d302      	bcc.n	801054c <dhcp_bind+0xec>
      timeout = 0xffff;
 8010546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801054a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	b29a      	uxth	r2, r3
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8010554:	69bb      	ldr	r3, [r7, #24]
 8010556:	899b      	ldrh	r3, [r3, #12]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d102      	bne.n	8010562 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801055c:	69bb      	ldr	r3, [r7, #24]
 801055e:	2201      	movs	r2, #1
 8010560:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8010562:	69bb      	ldr	r3, [r7, #24]
 8010564:	899a      	ldrh	r2, [r3, #12]
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801056a:	69bb      	ldr	r3, [r7, #24]
 801056c:	895a      	ldrh	r2, [r3, #10]
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	899b      	ldrh	r3, [r3, #12]
 8010572:	429a      	cmp	r2, r3
 8010574:	d306      	bcc.n	8010584 <dhcp_bind+0x124>
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	899b      	ldrh	r3, [r3, #12]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d002      	beq.n	8010584 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	2200      	movs	r2, #0
 8010582:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	79db      	ldrb	r3, [r3, #7]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d003      	beq.n	8010594 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801058c:	69bb      	ldr	r3, [r7, #24]
 801058e:	6a1b      	ldr	r3, [r3, #32]
 8010590:	613b      	str	r3, [r7, #16]
 8010592:	e014      	b.n	80105be <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8010594:	69bb      	ldr	r3, [r7, #24]
 8010596:	331c      	adds	r3, #28
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801059c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	db02      	blt.n	80105aa <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80105a4:	23ff      	movs	r3, #255	; 0xff
 80105a6:	613b      	str	r3, [r7, #16]
 80105a8:	e009      	b.n	80105be <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80105aa:	7dfb      	ldrb	r3, [r7, #23]
 80105ac:	2bbf      	cmp	r3, #191	; 0xbf
 80105ae:	d903      	bls.n	80105b8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80105b0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80105b4:	613b      	str	r3, [r7, #16]
 80105b6:	e002      	b.n	80105be <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80105b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80105bc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105c2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d108      	bne.n	80105dc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80105ca:	69bb      	ldr	r3, [r7, #24]
 80105cc:	69da      	ldr	r2, [r3, #28]
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	4013      	ands	r3, r2
 80105d2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80105da:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80105dc:	210a      	movs	r1, #10
 80105de:	69b8      	ldr	r0, [r7, #24]
 80105e0:	f000 faa0 	bl	8010b24 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	f103 011c 	add.w	r1, r3, #28
 80105ea:	f107 030c 	add.w	r3, r7, #12
 80105ee:	f107 0210 	add.w	r2, r7, #16
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f7f8 fa74 	bl	8008ae0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80105f8:	3720      	adds	r7, #32
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	08017674 	.word	0x08017674
 8010604:	080177d4 	.word	0x080177d4
 8010608:	080176d4 	.word	0x080176d4
 801060c:	080177f0 	.word	0x080177f0
 8010610:	88888889 	.word	0x88888889

08010614 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b08a      	sub	sp, #40	; 0x28
 8010618:	af02      	add	r7, sp, #8
 801061a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010620:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8010622:	2105      	movs	r1, #5
 8010624:	69b8      	ldr	r0, [r7, #24]
 8010626:	f000 fa7d 	bl	8010b24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801062a:	f107 030c 	add.w	r3, r7, #12
 801062e:	2203      	movs	r2, #3
 8010630:	69b9      	ldr	r1, [r7, #24]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f000 ff02 	bl	801143c <dhcp_create_msg>
 8010638:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d04e      	beq.n	80106de <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	685b      	ldr	r3, [r3, #4]
 8010644:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010646:	89b8      	ldrh	r0, [r7, #12]
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801064e:	2302      	movs	r3, #2
 8010650:	2239      	movs	r2, #57	; 0x39
 8010652:	f000 fa81 	bl	8010b58 <dhcp_option>
 8010656:	4603      	mov	r3, r0
 8010658:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801065a:	89b8      	ldrh	r0, [r7, #12]
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010666:	461a      	mov	r2, r3
 8010668:	f000 fad0 	bl	8010c0c <dhcp_option_short>
 801066c:	4603      	mov	r3, r0
 801066e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010670:	89b8      	ldrh	r0, [r7, #12]
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010678:	2303      	movs	r3, #3
 801067a:	2237      	movs	r2, #55	; 0x37
 801067c:	f000 fa6c 	bl	8010b58 <dhcp_option>
 8010680:	4603      	mov	r3, r0
 8010682:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010684:	2300      	movs	r3, #0
 8010686:	77bb      	strb	r3, [r7, #30]
 8010688:	e00e      	b.n	80106a8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801068a:	89b8      	ldrh	r0, [r7, #12]
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010692:	7fbb      	ldrb	r3, [r7, #30]
 8010694:	4a2a      	ldr	r2, [pc, #168]	; (8010740 <dhcp_renew+0x12c>)
 8010696:	5cd3      	ldrb	r3, [r2, r3]
 8010698:	461a      	mov	r2, r3
 801069a:	f000 fa91 	bl	8010bc0 <dhcp_option_byte>
 801069e:	4603      	mov	r3, r0
 80106a0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80106a2:	7fbb      	ldrb	r3, [r7, #30]
 80106a4:	3301      	adds	r3, #1
 80106a6:	77bb      	strb	r3, [r7, #30]
 80106a8:	7fbb      	ldrb	r3, [r7, #30]
 80106aa:	2b02      	cmp	r3, #2
 80106ac:	d9ed      	bls.n	801068a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80106ae:	89b8      	ldrh	r0, [r7, #12]
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	33f0      	adds	r3, #240	; 0xf0
 80106b4:	697a      	ldr	r2, [r7, #20]
 80106b6:	4619      	mov	r1, r3
 80106b8:	f000 ff96 	bl	80115e8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80106bc:	4b21      	ldr	r3, [pc, #132]	; (8010744 <dhcp_renew+0x130>)
 80106be:	6818      	ldr	r0, [r3, #0]
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	f103 0218 	add.w	r2, r3, #24
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	9300      	str	r3, [sp, #0]
 80106ca:	2343      	movs	r3, #67	; 0x43
 80106cc:	6979      	ldr	r1, [r7, #20]
 80106ce:	f7fe fe53 	bl	800f378 <udp_sendto_if>
 80106d2:	4603      	mov	r3, r0
 80106d4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80106d6:	6978      	ldr	r0, [r7, #20]
 80106d8:	f7f8 ff10 	bl	80094fc <pbuf_free>
 80106dc:	e001      	b.n	80106e2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80106de:	23ff      	movs	r3, #255	; 0xff
 80106e0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	799b      	ldrb	r3, [r3, #6]
 80106e6:	2bff      	cmp	r3, #255	; 0xff
 80106e8:	d005      	beq.n	80106f6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80106ea:	69bb      	ldr	r3, [r7, #24]
 80106ec:	799b      	ldrb	r3, [r3, #6]
 80106ee:	3301      	adds	r3, #1
 80106f0:	b2da      	uxtb	r2, r3
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80106f6:	69bb      	ldr	r3, [r7, #24]
 80106f8:	799b      	ldrb	r3, [r3, #6]
 80106fa:	2b09      	cmp	r3, #9
 80106fc:	d80a      	bhi.n	8010714 <dhcp_renew+0x100>
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	799b      	ldrb	r3, [r3, #6]
 8010702:	b29b      	uxth	r3, r3
 8010704:	461a      	mov	r2, r3
 8010706:	0152      	lsls	r2, r2, #5
 8010708:	1ad2      	subs	r2, r2, r3
 801070a:	0092      	lsls	r2, r2, #2
 801070c:	4413      	add	r3, r2
 801070e:	011b      	lsls	r3, r3, #4
 8010710:	b29b      	uxth	r3, r3
 8010712:	e001      	b.n	8010718 <dhcp_renew+0x104>
 8010714:	f644 6320 	movw	r3, #20000	; 0x4e20
 8010718:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801071a:	89fb      	ldrh	r3, [r7, #14]
 801071c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010720:	4a09      	ldr	r2, [pc, #36]	; (8010748 <dhcp_renew+0x134>)
 8010722:	fb82 1203 	smull	r1, r2, r2, r3
 8010726:	1152      	asrs	r2, r2, #5
 8010728:	17db      	asrs	r3, r3, #31
 801072a:	1ad3      	subs	r3, r2, r3
 801072c:	b29a      	uxth	r2, r3
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010732:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010736:	4618      	mov	r0, r3
 8010738:	3720      	adds	r7, #32
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	20000030 	.word	0x20000030
 8010744:	20010764 	.word	0x20010764
 8010748:	10624dd3 	.word	0x10624dd3

0801074c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b08a      	sub	sp, #40	; 0x28
 8010750:	af02      	add	r7, sp, #8
 8010752:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010758:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801075a:	2104      	movs	r1, #4
 801075c:	69b8      	ldr	r0, [r7, #24]
 801075e:	f000 f9e1 	bl	8010b24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010762:	f107 030c 	add.w	r3, r7, #12
 8010766:	2203      	movs	r2, #3
 8010768:	69b9      	ldr	r1, [r7, #24]
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 fe66 	bl	801143c <dhcp_create_msg>
 8010770:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d04c      	beq.n	8010812 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801077e:	89b8      	ldrh	r0, [r7, #12]
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010786:	2302      	movs	r3, #2
 8010788:	2239      	movs	r2, #57	; 0x39
 801078a:	f000 f9e5 	bl	8010b58 <dhcp_option>
 801078e:	4603      	mov	r3, r0
 8010790:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010792:	89b8      	ldrh	r0, [r7, #12]
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801079e:	461a      	mov	r2, r3
 80107a0:	f000 fa34 	bl	8010c0c <dhcp_option_short>
 80107a4:	4603      	mov	r3, r0
 80107a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80107a8:	89b8      	ldrh	r0, [r7, #12]
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80107b0:	2303      	movs	r3, #3
 80107b2:	2237      	movs	r2, #55	; 0x37
 80107b4:	f000 f9d0 	bl	8010b58 <dhcp_option>
 80107b8:	4603      	mov	r3, r0
 80107ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107bc:	2300      	movs	r3, #0
 80107be:	77bb      	strb	r3, [r7, #30]
 80107c0:	e00e      	b.n	80107e0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80107c2:	89b8      	ldrh	r0, [r7, #12]
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80107ca:	7fbb      	ldrb	r3, [r7, #30]
 80107cc:	4a29      	ldr	r2, [pc, #164]	; (8010874 <dhcp_rebind+0x128>)
 80107ce:	5cd3      	ldrb	r3, [r2, r3]
 80107d0:	461a      	mov	r2, r3
 80107d2:	f000 f9f5 	bl	8010bc0 <dhcp_option_byte>
 80107d6:	4603      	mov	r3, r0
 80107d8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107da:	7fbb      	ldrb	r3, [r7, #30]
 80107dc:	3301      	adds	r3, #1
 80107de:	77bb      	strb	r3, [r7, #30]
 80107e0:	7fbb      	ldrb	r3, [r7, #30]
 80107e2:	2b02      	cmp	r3, #2
 80107e4:	d9ed      	bls.n	80107c2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80107e6:	89b8      	ldrh	r0, [r7, #12]
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	33f0      	adds	r3, #240	; 0xf0
 80107ec:	697a      	ldr	r2, [r7, #20]
 80107ee:	4619      	mov	r1, r3
 80107f0:	f000 fefa 	bl	80115e8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80107f4:	4b20      	ldr	r3, [pc, #128]	; (8010878 <dhcp_rebind+0x12c>)
 80107f6:	6818      	ldr	r0, [r3, #0]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	2343      	movs	r3, #67	; 0x43
 80107fe:	4a1f      	ldr	r2, [pc, #124]	; (801087c <dhcp_rebind+0x130>)
 8010800:	6979      	ldr	r1, [r7, #20]
 8010802:	f7fe fdb9 	bl	800f378 <udp_sendto_if>
 8010806:	4603      	mov	r3, r0
 8010808:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801080a:	6978      	ldr	r0, [r7, #20]
 801080c:	f7f8 fe76 	bl	80094fc <pbuf_free>
 8010810:	e001      	b.n	8010816 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010812:	23ff      	movs	r3, #255	; 0xff
 8010814:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010816:	69bb      	ldr	r3, [r7, #24]
 8010818:	799b      	ldrb	r3, [r3, #6]
 801081a:	2bff      	cmp	r3, #255	; 0xff
 801081c:	d005      	beq.n	801082a <dhcp_rebind+0xde>
    dhcp->tries++;
 801081e:	69bb      	ldr	r3, [r7, #24]
 8010820:	799b      	ldrb	r3, [r3, #6]
 8010822:	3301      	adds	r3, #1
 8010824:	b2da      	uxtb	r2, r3
 8010826:	69bb      	ldr	r3, [r7, #24]
 8010828:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801082a:	69bb      	ldr	r3, [r7, #24]
 801082c:	799b      	ldrb	r3, [r3, #6]
 801082e:	2b09      	cmp	r3, #9
 8010830:	d80a      	bhi.n	8010848 <dhcp_rebind+0xfc>
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	799b      	ldrb	r3, [r3, #6]
 8010836:	b29b      	uxth	r3, r3
 8010838:	461a      	mov	r2, r3
 801083a:	0152      	lsls	r2, r2, #5
 801083c:	1ad2      	subs	r2, r2, r3
 801083e:	0092      	lsls	r2, r2, #2
 8010840:	4413      	add	r3, r2
 8010842:	00db      	lsls	r3, r3, #3
 8010844:	b29b      	uxth	r3, r3
 8010846:	e001      	b.n	801084c <dhcp_rebind+0x100>
 8010848:	f242 7310 	movw	r3, #10000	; 0x2710
 801084c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801084e:	89fb      	ldrh	r3, [r7, #14]
 8010850:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010854:	4a0a      	ldr	r2, [pc, #40]	; (8010880 <dhcp_rebind+0x134>)
 8010856:	fb82 1203 	smull	r1, r2, r2, r3
 801085a:	1152      	asrs	r2, r2, #5
 801085c:	17db      	asrs	r3, r3, #31
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	b29a      	uxth	r2, r3
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010866:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801086a:	4618      	mov	r0, r3
 801086c:	3720      	adds	r7, #32
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	20000030 	.word	0x20000030
 8010878:	20010764 	.word	0x20010764
 801087c:	08018220 	.word	0x08018220
 8010880:	10624dd3 	.word	0x10624dd3

08010884 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8010884:	b5b0      	push	{r4, r5, r7, lr}
 8010886:	b08a      	sub	sp, #40	; 0x28
 8010888:	af02      	add	r7, sp, #8
 801088a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010890:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8010892:	2103      	movs	r1, #3
 8010894:	69b8      	ldr	r0, [r7, #24]
 8010896:	f000 f945 	bl	8010b24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801089a:	f107 030c 	add.w	r3, r7, #12
 801089e:	2203      	movs	r2, #3
 80108a0:	69b9      	ldr	r1, [r7, #24]
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f000 fdca 	bl	801143c <dhcp_create_msg>
 80108a8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d066      	beq.n	801097e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80108b6:	89b8      	ldrh	r0, [r7, #12]
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108be:	2302      	movs	r3, #2
 80108c0:	2239      	movs	r2, #57	; 0x39
 80108c2:	f000 f949 	bl	8010b58 <dhcp_option>
 80108c6:	4603      	mov	r3, r0
 80108c8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80108ca:	89b8      	ldrh	r0, [r7, #12]
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	33f0      	adds	r3, #240	; 0xf0
 80108d0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80108d4:	4619      	mov	r1, r3
 80108d6:	f000 f999 	bl	8010c0c <dhcp_option_short>
 80108da:	4603      	mov	r3, r0
 80108dc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80108de:	89b8      	ldrh	r0, [r7, #12]
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80108e6:	2304      	movs	r3, #4
 80108e8:	2232      	movs	r2, #50	; 0x32
 80108ea:	f000 f935 	bl	8010b58 <dhcp_option>
 80108ee:	4603      	mov	r3, r0
 80108f0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80108f2:	89bc      	ldrh	r4, [r7, #12]
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	69db      	ldr	r3, [r3, #28]
 80108fe:	4618      	mov	r0, r3
 8010900:	f7f7 fa13 	bl	8007d2a <lwip_htonl>
 8010904:	4603      	mov	r3, r0
 8010906:	461a      	mov	r2, r3
 8010908:	4629      	mov	r1, r5
 801090a:	4620      	mov	r0, r4
 801090c:	f000 f9b0 	bl	8010c70 <dhcp_option_long>
 8010910:	4603      	mov	r3, r0
 8010912:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010914:	89b8      	ldrh	r0, [r7, #12]
 8010916:	693b      	ldr	r3, [r7, #16]
 8010918:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801091c:	2303      	movs	r3, #3
 801091e:	2237      	movs	r2, #55	; 0x37
 8010920:	f000 f91a 	bl	8010b58 <dhcp_option>
 8010924:	4603      	mov	r3, r0
 8010926:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010928:	2300      	movs	r3, #0
 801092a:	77bb      	strb	r3, [r7, #30]
 801092c:	e00e      	b.n	801094c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801092e:	89b8      	ldrh	r0, [r7, #12]
 8010930:	693b      	ldr	r3, [r7, #16]
 8010932:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010936:	7fbb      	ldrb	r3, [r7, #30]
 8010938:	4a29      	ldr	r2, [pc, #164]	; (80109e0 <dhcp_reboot+0x15c>)
 801093a:	5cd3      	ldrb	r3, [r2, r3]
 801093c:	461a      	mov	r2, r3
 801093e:	f000 f93f 	bl	8010bc0 <dhcp_option_byte>
 8010942:	4603      	mov	r3, r0
 8010944:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010946:	7fbb      	ldrb	r3, [r7, #30]
 8010948:	3301      	adds	r3, #1
 801094a:	77bb      	strb	r3, [r7, #30]
 801094c:	7fbb      	ldrb	r3, [r7, #30]
 801094e:	2b02      	cmp	r3, #2
 8010950:	d9ed      	bls.n	801092e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010952:	89b8      	ldrh	r0, [r7, #12]
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	33f0      	adds	r3, #240	; 0xf0
 8010958:	697a      	ldr	r2, [r7, #20]
 801095a:	4619      	mov	r1, r3
 801095c:	f000 fe44 	bl	80115e8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010960:	4b20      	ldr	r3, [pc, #128]	; (80109e4 <dhcp_reboot+0x160>)
 8010962:	6818      	ldr	r0, [r3, #0]
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	2343      	movs	r3, #67	; 0x43
 801096a:	4a1f      	ldr	r2, [pc, #124]	; (80109e8 <dhcp_reboot+0x164>)
 801096c:	6979      	ldr	r1, [r7, #20]
 801096e:	f7fe fd03 	bl	800f378 <udp_sendto_if>
 8010972:	4603      	mov	r3, r0
 8010974:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010976:	6978      	ldr	r0, [r7, #20]
 8010978:	f7f8 fdc0 	bl	80094fc <pbuf_free>
 801097c:	e001      	b.n	8010982 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801097e:	23ff      	movs	r3, #255	; 0xff
 8010980:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010982:	69bb      	ldr	r3, [r7, #24]
 8010984:	799b      	ldrb	r3, [r3, #6]
 8010986:	2bff      	cmp	r3, #255	; 0xff
 8010988:	d005      	beq.n	8010996 <dhcp_reboot+0x112>
    dhcp->tries++;
 801098a:	69bb      	ldr	r3, [r7, #24]
 801098c:	799b      	ldrb	r3, [r3, #6]
 801098e:	3301      	adds	r3, #1
 8010990:	b2da      	uxtb	r2, r3
 8010992:	69bb      	ldr	r3, [r7, #24]
 8010994:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010996:	69bb      	ldr	r3, [r7, #24]
 8010998:	799b      	ldrb	r3, [r3, #6]
 801099a:	2b09      	cmp	r3, #9
 801099c:	d80a      	bhi.n	80109b4 <dhcp_reboot+0x130>
 801099e:	69bb      	ldr	r3, [r7, #24]
 80109a0:	799b      	ldrb	r3, [r3, #6]
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	461a      	mov	r2, r3
 80109a6:	0152      	lsls	r2, r2, #5
 80109a8:	1ad2      	subs	r2, r2, r3
 80109aa:	0092      	lsls	r2, r2, #2
 80109ac:	4413      	add	r3, r2
 80109ae:	00db      	lsls	r3, r3, #3
 80109b0:	b29b      	uxth	r3, r3
 80109b2:	e001      	b.n	80109b8 <dhcp_reboot+0x134>
 80109b4:	f242 7310 	movw	r3, #10000	; 0x2710
 80109b8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80109ba:	89fb      	ldrh	r3, [r7, #14]
 80109bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80109c0:	4a0a      	ldr	r2, [pc, #40]	; (80109ec <dhcp_reboot+0x168>)
 80109c2:	fb82 1203 	smull	r1, r2, r2, r3
 80109c6:	1152      	asrs	r2, r2, #5
 80109c8:	17db      	asrs	r3, r3, #31
 80109ca:	1ad3      	subs	r3, r2, r3
 80109cc:	b29a      	uxth	r2, r3
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80109d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80109d6:	4618      	mov	r0, r3
 80109d8:	3720      	adds	r7, #32
 80109da:	46bd      	mov	sp, r7
 80109dc:	bdb0      	pop	{r4, r5, r7, pc}
 80109de:	bf00      	nop
 80109e0:	20000030 	.word	0x20000030
 80109e4:	20010764 	.word	0x20010764
 80109e8:	08018220 	.word	0x08018220
 80109ec:	10624dd3 	.word	0x10624dd3

080109f0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80109f0:	b5b0      	push	{r4, r5, r7, lr}
 80109f2:	b08a      	sub	sp, #40	; 0x28
 80109f4:	af02      	add	r7, sp, #8
 80109f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80109fe:	69fb      	ldr	r3, [r7, #28]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f000 8084 	beq.w	8010b0e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010a06:	69fb      	ldr	r3, [r7, #28]
 8010a08:	795b      	ldrb	r3, [r3, #5]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	f000 8081 	beq.w	8010b12 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	699b      	ldr	r3, [r3, #24]
 8010a14:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010a16:	69fb      	ldr	r3, [r7, #28]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	2200      	movs	r2, #0
 8010a26:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010a28:	69fb      	ldr	r3, [r7, #28]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010a2e:	69fb      	ldr	r3, [r7, #28]
 8010a30:	2200      	movs	r2, #0
 8010a32:	631a      	str	r2, [r3, #48]	; 0x30
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010a44:	69fb      	ldr	r3, [r7, #28]
 8010a46:	2200      	movs	r2, #0
 8010a48:	829a      	strh	r2, [r3, #20]
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	8a9a      	ldrh	r2, [r3, #20]
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	825a      	strh	r2, [r3, #18]
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	8a5a      	ldrh	r2, [r3, #18]
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	821a      	strh	r2, [r3, #16]
 8010a5a:	69fb      	ldr	r3, [r7, #28]
 8010a5c:	8a1a      	ldrh	r2, [r3, #16]
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fdee 	bl	8011644 <dhcp_supplied_address>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d03b      	beq.n	8010ae6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010a6e:	f107 030e 	add.w	r3, r7, #14
 8010a72:	2207      	movs	r2, #7
 8010a74:	69f9      	ldr	r1, [r7, #28]
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f000 fce0 	bl	801143c <dhcp_create_msg>
 8010a7c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d030      	beq.n	8010ae6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010a84:	69bb      	ldr	r3, [r7, #24]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010a8a:	89f8      	ldrh	r0, [r7, #14]
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010a92:	2304      	movs	r3, #4
 8010a94:	2236      	movs	r2, #54	; 0x36
 8010a96:	f000 f85f 	bl	8010b58 <dhcp_option>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010a9e:	89fc      	ldrh	r4, [r7, #14]
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7f7 f93e 	bl	8007d2a <lwip_htonl>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	4629      	mov	r1, r5
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f000 f8db 	bl	8010c70 <dhcp_option_long>
 8010aba:	4603      	mov	r3, r0
 8010abc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010abe:	89f8      	ldrh	r0, [r7, #14]
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	33f0      	adds	r3, #240	; 0xf0
 8010ac4:	69ba      	ldr	r2, [r7, #24]
 8010ac6:	4619      	mov	r1, r3
 8010ac8:	f000 fd8e 	bl	80115e8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010acc:	4b13      	ldr	r3, [pc, #76]	; (8010b1c <dhcp_release_and_stop+0x12c>)
 8010ace:	6818      	ldr	r0, [r3, #0]
 8010ad0:	f107 0210 	add.w	r2, r7, #16
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	9300      	str	r3, [sp, #0]
 8010ad8:	2343      	movs	r3, #67	; 0x43
 8010ada:	69b9      	ldr	r1, [r7, #24]
 8010adc:	f7fe fc4c 	bl	800f378 <udp_sendto_if>
      pbuf_free(p_out);
 8010ae0:	69b8      	ldr	r0, [r7, #24]
 8010ae2:	f7f8 fd0b 	bl	80094fc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010ae6:	4b0e      	ldr	r3, [pc, #56]	; (8010b20 <dhcp_release_and_stop+0x130>)
 8010ae8:	4a0d      	ldr	r2, [pc, #52]	; (8010b20 <dhcp_release_and_stop+0x130>)
 8010aea:	490d      	ldr	r1, [pc, #52]	; (8010b20 <dhcp_release_and_stop+0x130>)
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f7f7 fff7 	bl	8008ae0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010af2:	2100      	movs	r1, #0
 8010af4:	69f8      	ldr	r0, [r7, #28]
 8010af6:	f000 f815 	bl	8010b24 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	791b      	ldrb	r3, [r3, #4]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d008      	beq.n	8010b14 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010b02:	f7fe ff85 	bl	800fa10 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	2200      	movs	r2, #0
 8010b0a:	711a      	strb	r2, [r3, #4]
 8010b0c:	e002      	b.n	8010b14 <dhcp_release_and_stop+0x124>
    return;
 8010b0e:	bf00      	nop
 8010b10:	e000      	b.n	8010b14 <dhcp_release_and_stop+0x124>
    return;
 8010b12:	bf00      	nop
  }
}
 8010b14:	3720      	adds	r7, #32
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bdb0      	pop	{r4, r5, r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	20010764 	.word	0x20010764
 8010b20:	0801821c 	.word	0x0801821c

08010b24 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b083      	sub	sp, #12
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	795b      	ldrb	r3, [r3, #5]
 8010b34:	78fa      	ldrb	r2, [r7, #3]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d008      	beq.n	8010b4c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	78fa      	ldrb	r2, [r7, #3]
 8010b3e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	811a      	strh	r2, [r3, #8]
  }
}
 8010b4c:	bf00      	nop
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6039      	str	r1, [r7, #0]
 8010b60:	4611      	mov	r1, r2
 8010b62:	461a      	mov	r2, r3
 8010b64:	4603      	mov	r3, r0
 8010b66:	80fb      	strh	r3, [r7, #6]
 8010b68:	460b      	mov	r3, r1
 8010b6a:	717b      	strb	r3, [r7, #5]
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010b70:	88fa      	ldrh	r2, [r7, #6]
 8010b72:	793b      	ldrb	r3, [r7, #4]
 8010b74:	4413      	add	r3, r2
 8010b76:	3302      	adds	r3, #2
 8010b78:	2b44      	cmp	r3, #68	; 0x44
 8010b7a:	d906      	bls.n	8010b8a <dhcp_option+0x32>
 8010b7c:	4b0d      	ldr	r3, [pc, #52]	; (8010bb4 <dhcp_option+0x5c>)
 8010b7e:	f240 529a 	movw	r2, #1434	; 0x59a
 8010b82:	490d      	ldr	r1, [pc, #52]	; (8010bb8 <dhcp_option+0x60>)
 8010b84:	480d      	ldr	r0, [pc, #52]	; (8010bbc <dhcp_option+0x64>)
 8010b86:	f003 ff65 	bl	8014a54 <iprintf>
  options[options_out_len++] = option_type;
 8010b8a:	88fb      	ldrh	r3, [r7, #6]
 8010b8c:	1c5a      	adds	r2, r3, #1
 8010b8e:	80fa      	strh	r2, [r7, #6]
 8010b90:	461a      	mov	r2, r3
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	4413      	add	r3, r2
 8010b96:	797a      	ldrb	r2, [r7, #5]
 8010b98:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010b9a:	88fb      	ldrh	r3, [r7, #6]
 8010b9c:	1c5a      	adds	r2, r3, #1
 8010b9e:	80fa      	strh	r2, [r7, #6]
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	793a      	ldrb	r2, [r7, #4]
 8010ba8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010baa:	88fb      	ldrh	r3, [r7, #6]
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3708      	adds	r7, #8
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	08017674 	.word	0x08017674
 8010bb8:	08017808 	.word	0x08017808
 8010bbc:	080176d4 	.word	0x080176d4

08010bc0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	6039      	str	r1, [r7, #0]
 8010bca:	80fb      	strh	r3, [r7, #6]
 8010bcc:	4613      	mov	r3, r2
 8010bce:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010bd0:	88fb      	ldrh	r3, [r7, #6]
 8010bd2:	2b43      	cmp	r3, #67	; 0x43
 8010bd4:	d906      	bls.n	8010be4 <dhcp_option_byte+0x24>
 8010bd6:	4b0a      	ldr	r3, [pc, #40]	; (8010c00 <dhcp_option_byte+0x40>)
 8010bd8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010bdc:	4909      	ldr	r1, [pc, #36]	; (8010c04 <dhcp_option_byte+0x44>)
 8010bde:	480a      	ldr	r0, [pc, #40]	; (8010c08 <dhcp_option_byte+0x48>)
 8010be0:	f003 ff38 	bl	8014a54 <iprintf>
  options[options_out_len++] = value;
 8010be4:	88fb      	ldrh	r3, [r7, #6]
 8010be6:	1c5a      	adds	r2, r3, #1
 8010be8:	80fa      	strh	r2, [r7, #6]
 8010bea:	461a      	mov	r2, r3
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	4413      	add	r3, r2
 8010bf0:	797a      	ldrb	r2, [r7, #5]
 8010bf2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010bf4:	88fb      	ldrh	r3, [r7, #6]
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3708      	adds	r7, #8
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	08017674 	.word	0x08017674
 8010c04:	0801784c 	.word	0x0801784c
 8010c08:	080176d4 	.word	0x080176d4

08010c0c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	4603      	mov	r3, r0
 8010c14:	6039      	str	r1, [r7, #0]
 8010c16:	80fb      	strh	r3, [r7, #6]
 8010c18:	4613      	mov	r3, r2
 8010c1a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010c1c:	88fb      	ldrh	r3, [r7, #6]
 8010c1e:	3302      	adds	r3, #2
 8010c20:	2b44      	cmp	r3, #68	; 0x44
 8010c22:	d906      	bls.n	8010c32 <dhcp_option_short+0x26>
 8010c24:	4b0f      	ldr	r3, [pc, #60]	; (8010c64 <dhcp_option_short+0x58>)
 8010c26:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010c2a:	490f      	ldr	r1, [pc, #60]	; (8010c68 <dhcp_option_short+0x5c>)
 8010c2c:	480f      	ldr	r0, [pc, #60]	; (8010c6c <dhcp_option_short+0x60>)
 8010c2e:	f003 ff11 	bl	8014a54 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010c32:	88bb      	ldrh	r3, [r7, #4]
 8010c34:	0a1b      	lsrs	r3, r3, #8
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	88fb      	ldrh	r3, [r7, #6]
 8010c3a:	1c59      	adds	r1, r3, #1
 8010c3c:	80f9      	strh	r1, [r7, #6]
 8010c3e:	4619      	mov	r1, r3
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	440b      	add	r3, r1
 8010c44:	b2d2      	uxtb	r2, r2
 8010c46:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010c48:	88fb      	ldrh	r3, [r7, #6]
 8010c4a:	1c5a      	adds	r2, r3, #1
 8010c4c:	80fa      	strh	r2, [r7, #6]
 8010c4e:	461a      	mov	r2, r3
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	4413      	add	r3, r2
 8010c54:	88ba      	ldrh	r2, [r7, #4]
 8010c56:	b2d2      	uxtb	r2, r2
 8010c58:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010c5a:	88fb      	ldrh	r3, [r7, #6]
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	08017674 	.word	0x08017674
 8010c68:	08017884 	.word	0x08017884
 8010c6c:	080176d4 	.word	0x080176d4

08010c70 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	60b9      	str	r1, [r7, #8]
 8010c7a:	607a      	str	r2, [r7, #4]
 8010c7c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010c7e:	89fb      	ldrh	r3, [r7, #14]
 8010c80:	3304      	adds	r3, #4
 8010c82:	2b44      	cmp	r3, #68	; 0x44
 8010c84:	d906      	bls.n	8010c94 <dhcp_option_long+0x24>
 8010c86:	4b19      	ldr	r3, [pc, #100]	; (8010cec <dhcp_option_long+0x7c>)
 8010c88:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010c8c:	4918      	ldr	r1, [pc, #96]	; (8010cf0 <dhcp_option_long+0x80>)
 8010c8e:	4819      	ldr	r0, [pc, #100]	; (8010cf4 <dhcp_option_long+0x84>)
 8010c90:	f003 fee0 	bl	8014a54 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	0e1a      	lsrs	r2, r3, #24
 8010c98:	89fb      	ldrh	r3, [r7, #14]
 8010c9a:	1c59      	adds	r1, r3, #1
 8010c9c:	81f9      	strh	r1, [r7, #14]
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	440b      	add	r3, r1
 8010ca4:	b2d2      	uxtb	r2, r2
 8010ca6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	0c1a      	lsrs	r2, r3, #16
 8010cac:	89fb      	ldrh	r3, [r7, #14]
 8010cae:	1c59      	adds	r1, r3, #1
 8010cb0:	81f9      	strh	r1, [r7, #14]
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	440b      	add	r3, r1
 8010cb8:	b2d2      	uxtb	r2, r2
 8010cba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	0a1a      	lsrs	r2, r3, #8
 8010cc0:	89fb      	ldrh	r3, [r7, #14]
 8010cc2:	1c59      	adds	r1, r3, #1
 8010cc4:	81f9      	strh	r1, [r7, #14]
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	440b      	add	r3, r1
 8010ccc:	b2d2      	uxtb	r2, r2
 8010cce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010cd0:	89fb      	ldrh	r3, [r7, #14]
 8010cd2:	1c5a      	adds	r2, r3, #1
 8010cd4:	81fa      	strh	r2, [r7, #14]
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	4413      	add	r3, r2
 8010cdc:	687a      	ldr	r2, [r7, #4]
 8010cde:	b2d2      	uxtb	r2, r2
 8010ce0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010ce2:	89fb      	ldrh	r3, [r7, #14]
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3710      	adds	r7, #16
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	08017674 	.word	0x08017674
 8010cf0:	080178c0 	.word	0x080178c0
 8010cf4:	080176d4 	.word	0x080176d4

08010cf8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b090      	sub	sp, #64	; 0x40
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010d02:	2300      	movs	r3, #0
 8010d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8010d06:	2300      	movs	r3, #0
 8010d08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010d0a:	2208      	movs	r2, #8
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	48be      	ldr	r0, [pc, #760]	; (8011008 <dhcp_parse_reply+0x310>)
 8010d10:	f003 fb00 	bl	8014314 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	895b      	ldrh	r3, [r3, #10]
 8010d18:	2b2b      	cmp	r3, #43	; 0x2b
 8010d1a:	d802      	bhi.n	8010d22 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010d1c:	f06f 0301 	mvn.w	r3, #1
 8010d20:	e2a8      	b.n	8011274 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010d28:	23f0      	movs	r3, #240	; 0xf0
 8010d2a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	891b      	ldrh	r3, [r3, #8]
 8010d30:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010d36:	e00c      	b.n	8010d52 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d3a:	895b      	ldrh	r3, [r3, #10]
 8010d3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	895b      	ldrh	r3, [r3, #10]
 8010d46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010d48:	1ad3      	subs	r3, r2, r3
 8010d4a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d004      	beq.n	8010d62 <dhcp_parse_reply+0x6a>
 8010d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5a:	895b      	ldrh	r3, [r3, #10]
 8010d5c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d2ea      	bcs.n	8010d38 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d102      	bne.n	8010d6e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010d68:	f06f 0301 	mvn.w	r3, #1
 8010d6c:	e282      	b.n	8011274 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8010d6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010d70:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8010d72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010d74:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8010d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010d7c:	e23a      	b.n	80111f4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8010d7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d82:	4413      	add	r3, r2
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8010d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010d92:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010d94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d96:	3302      	adds	r3, #2
 8010d98:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010d9a:	8bfa      	ldrh	r2, [r7, #30]
 8010d9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d202      	bcs.n	8010da8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010da2:	f06f 0301 	mvn.w	r3, #1
 8010da6:	e265      	b.n	8011274 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010da8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010daa:	3301      	adds	r3, #1
 8010dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dae:	8952      	ldrh	r2, [r2, #10]
 8010db0:	4293      	cmp	r3, r2
 8010db2:	da07      	bge.n	8010dc4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010db4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010db6:	3301      	adds	r3, #1
 8010db8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010dba:	4413      	add	r3, r2
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010dc2:	e00b      	b.n	8010ddc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d004      	beq.n	8010dd6 <dhcp_parse_reply+0xde>
 8010dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	e000      	b.n	8010dd8 <dhcp_parse_reply+0xe0>
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010de0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8010de4:	7dfb      	ldrb	r3, [r7, #23]
 8010de6:	2b3b      	cmp	r3, #59	; 0x3b
 8010de8:	f200 812d 	bhi.w	8011046 <dhcp_parse_reply+0x34e>
 8010dec:	a201      	add	r2, pc, #4	; (adr r2, 8010df4 <dhcp_parse_reply+0xfc>)
 8010dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df2:	bf00      	nop
 8010df4:	08010ee5 	.word	0x08010ee5
 8010df8:	08010ef5 	.word	0x08010ef5
 8010dfc:	08011047 	.word	0x08011047
 8010e00:	08010f17 	.word	0x08010f17
 8010e04:	08011047 	.word	0x08011047
 8010e08:	08011047 	.word	0x08011047
 8010e0c:	08011047 	.word	0x08011047
 8010e10:	08011047 	.word	0x08011047
 8010e14:	08011047 	.word	0x08011047
 8010e18:	08011047 	.word	0x08011047
 8010e1c:	08011047 	.word	0x08011047
 8010e20:	08011047 	.word	0x08011047
 8010e24:	08011047 	.word	0x08011047
 8010e28:	08011047 	.word	0x08011047
 8010e2c:	08011047 	.word	0x08011047
 8010e30:	08011047 	.word	0x08011047
 8010e34:	08011047 	.word	0x08011047
 8010e38:	08011047 	.word	0x08011047
 8010e3c:	08011047 	.word	0x08011047
 8010e40:	08011047 	.word	0x08011047
 8010e44:	08011047 	.word	0x08011047
 8010e48:	08011047 	.word	0x08011047
 8010e4c:	08011047 	.word	0x08011047
 8010e50:	08011047 	.word	0x08011047
 8010e54:	08011047 	.word	0x08011047
 8010e58:	08011047 	.word	0x08011047
 8010e5c:	08011047 	.word	0x08011047
 8010e60:	08011047 	.word	0x08011047
 8010e64:	08011047 	.word	0x08011047
 8010e68:	08011047 	.word	0x08011047
 8010e6c:	08011047 	.word	0x08011047
 8010e70:	08011047 	.word	0x08011047
 8010e74:	08011047 	.word	0x08011047
 8010e78:	08011047 	.word	0x08011047
 8010e7c:	08011047 	.word	0x08011047
 8010e80:	08011047 	.word	0x08011047
 8010e84:	08011047 	.word	0x08011047
 8010e88:	08011047 	.word	0x08011047
 8010e8c:	08011047 	.word	0x08011047
 8010e90:	08011047 	.word	0x08011047
 8010e94:	08011047 	.word	0x08011047
 8010e98:	08011047 	.word	0x08011047
 8010e9c:	08011047 	.word	0x08011047
 8010ea0:	08011047 	.word	0x08011047
 8010ea4:	08011047 	.word	0x08011047
 8010ea8:	08011047 	.word	0x08011047
 8010eac:	08011047 	.word	0x08011047
 8010eb0:	08011047 	.word	0x08011047
 8010eb4:	08011047 	.word	0x08011047
 8010eb8:	08011047 	.word	0x08011047
 8010ebc:	08011047 	.word	0x08011047
 8010ec0:	08010f43 	.word	0x08010f43
 8010ec4:	08010f65 	.word	0x08010f65
 8010ec8:	08010fa1 	.word	0x08010fa1
 8010ecc:	08010fc3 	.word	0x08010fc3
 8010ed0:	08011047 	.word	0x08011047
 8010ed4:	08011047 	.word	0x08011047
 8010ed8:	08011047 	.word	0x08011047
 8010edc:	08010fe5 	.word	0x08010fe5
 8010ee0:	08011025 	.word	0x08011025
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010eee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8010ef2:	e0ac      	b.n	801104e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ef8:	2b04      	cmp	r3, #4
 8010efa:	d009      	beq.n	8010f10 <dhcp_parse_reply+0x218>
 8010efc:	4b43      	ldr	r3, [pc, #268]	; (801100c <dhcp_parse_reply+0x314>)
 8010efe:	f240 622e 	movw	r2, #1582	; 0x62e
 8010f02:	4943      	ldr	r1, [pc, #268]	; (8011010 <dhcp_parse_reply+0x318>)
 8010f04:	4843      	ldr	r0, [pc, #268]	; (8011014 <dhcp_parse_reply+0x31c>)
 8010f06:	f003 fda5 	bl	8014a54 <iprintf>
 8010f0a:	f06f 0305 	mvn.w	r3, #5
 8010f0e:	e1b1      	b.n	8011274 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010f10:	2306      	movs	r3, #6
 8010f12:	623b      	str	r3, [r7, #32]
        break;
 8010f14:	e09b      	b.n	801104e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010f16:	2304      	movs	r3, #4
 8010f18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010f1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010f20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d209      	bcs.n	8010f3c <dhcp_parse_reply+0x244>
 8010f28:	4b38      	ldr	r3, [pc, #224]	; (801100c <dhcp_parse_reply+0x314>)
 8010f2a:	f240 6233 	movw	r2, #1587	; 0x633
 8010f2e:	493a      	ldr	r1, [pc, #232]	; (8011018 <dhcp_parse_reply+0x320>)
 8010f30:	4838      	ldr	r0, [pc, #224]	; (8011014 <dhcp_parse_reply+0x31c>)
 8010f32:	f003 fd8f 	bl	8014a54 <iprintf>
 8010f36:	f06f 0305 	mvn.w	r3, #5
 8010f3a:	e19b      	b.n	8011274 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010f3c:	2307      	movs	r3, #7
 8010f3e:	623b      	str	r3, [r7, #32]
        break;
 8010f40:	e085      	b.n	801104e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010f42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f46:	2b04      	cmp	r3, #4
 8010f48:	d009      	beq.n	8010f5e <dhcp_parse_reply+0x266>
 8010f4a:	4b30      	ldr	r3, [pc, #192]	; (801100c <dhcp_parse_reply+0x314>)
 8010f4c:	f240 6241 	movw	r2, #1601	; 0x641
 8010f50:	492f      	ldr	r1, [pc, #188]	; (8011010 <dhcp_parse_reply+0x318>)
 8010f52:	4830      	ldr	r0, [pc, #192]	; (8011014 <dhcp_parse_reply+0x31c>)
 8010f54:	f003 fd7e 	bl	8014a54 <iprintf>
 8010f58:	f06f 0305 	mvn.w	r3, #5
 8010f5c:	e18a      	b.n	8011274 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010f5e:	2303      	movs	r3, #3
 8010f60:	623b      	str	r3, [r7, #32]
        break;
 8010f62:	e074      	b.n	801104e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d009      	beq.n	8010f80 <dhcp_parse_reply+0x288>
 8010f6c:	4b27      	ldr	r3, [pc, #156]	; (801100c <dhcp_parse_reply+0x314>)
 8010f6e:	f240 624f 	movw	r2, #1615	; 0x64f
 8010f72:	492a      	ldr	r1, [pc, #168]	; (801101c <dhcp_parse_reply+0x324>)
 8010f74:	4827      	ldr	r0, [pc, #156]	; (8011014 <dhcp_parse_reply+0x31c>)
 8010f76:	f003 fd6d 	bl	8014a54 <iprintf>
 8010f7a:	f06f 0305 	mvn.w	r3, #5
 8010f7e:	e179      	b.n	8011274 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010f82:	2bf0      	cmp	r3, #240	; 0xf0
 8010f84:	d009      	beq.n	8010f9a <dhcp_parse_reply+0x2a2>
 8010f86:	4b21      	ldr	r3, [pc, #132]	; (801100c <dhcp_parse_reply+0x314>)
 8010f88:	f240 6251 	movw	r2, #1617	; 0x651
 8010f8c:	4924      	ldr	r1, [pc, #144]	; (8011020 <dhcp_parse_reply+0x328>)
 8010f8e:	4821      	ldr	r0, [pc, #132]	; (8011014 <dhcp_parse_reply+0x31c>)
 8010f90:	f003 fd60 	bl	8014a54 <iprintf>
 8010f94:	f06f 0305 	mvn.w	r3, #5
 8010f98:	e16c      	b.n	8011274 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	623b      	str	r3, [r7, #32]
        break;
 8010f9e:	e056      	b.n	801104e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d009      	beq.n	8010fbc <dhcp_parse_reply+0x2c4>
 8010fa8:	4b18      	ldr	r3, [pc, #96]	; (801100c <dhcp_parse_reply+0x314>)
 8010faa:	f240 6255 	movw	r2, #1621	; 0x655
 8010fae:	491b      	ldr	r1, [pc, #108]	; (801101c <dhcp_parse_reply+0x324>)
 8010fb0:	4818      	ldr	r0, [pc, #96]	; (8011014 <dhcp_parse_reply+0x31c>)
 8010fb2:	f003 fd4f 	bl	8014a54 <iprintf>
 8010fb6:	f06f 0305 	mvn.w	r3, #5
 8010fba:	e15b      	b.n	8011274 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	623b      	str	r3, [r7, #32]
        break;
 8010fc0:	e045      	b.n	801104e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fc6:	2b04      	cmp	r3, #4
 8010fc8:	d009      	beq.n	8010fde <dhcp_parse_reply+0x2e6>
 8010fca:	4b10      	ldr	r3, [pc, #64]	; (801100c <dhcp_parse_reply+0x314>)
 8010fcc:	f240 6259 	movw	r2, #1625	; 0x659
 8010fd0:	490f      	ldr	r1, [pc, #60]	; (8011010 <dhcp_parse_reply+0x318>)
 8010fd2:	4810      	ldr	r0, [pc, #64]	; (8011014 <dhcp_parse_reply+0x31c>)
 8010fd4:	f003 fd3e 	bl	8014a54 <iprintf>
 8010fd8:	f06f 0305 	mvn.w	r3, #5
 8010fdc:	e14a      	b.n	8011274 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8010fde:	2302      	movs	r3, #2
 8010fe0:	623b      	str	r3, [r7, #32]
        break;
 8010fe2:	e034      	b.n	801104e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fe8:	2b04      	cmp	r3, #4
 8010fea:	d009      	beq.n	8011000 <dhcp_parse_reply+0x308>
 8010fec:	4b07      	ldr	r3, [pc, #28]	; (801100c <dhcp_parse_reply+0x314>)
 8010fee:	f240 625d 	movw	r2, #1629	; 0x65d
 8010ff2:	4907      	ldr	r1, [pc, #28]	; (8011010 <dhcp_parse_reply+0x318>)
 8010ff4:	4807      	ldr	r0, [pc, #28]	; (8011014 <dhcp_parse_reply+0x31c>)
 8010ff6:	f003 fd2d 	bl	8014a54 <iprintf>
 8010ffa:	f06f 0305 	mvn.w	r3, #5
 8010ffe:	e139      	b.n	8011274 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011000:	2304      	movs	r3, #4
 8011002:	623b      	str	r3, [r7, #32]
        break;
 8011004:	e023      	b.n	801104e <dhcp_parse_reply+0x356>
 8011006:	bf00      	nop
 8011008:	20018d58 	.word	0x20018d58
 801100c:	08017674 	.word	0x08017674
 8011010:	080178fc 	.word	0x080178fc
 8011014:	080176d4 	.word	0x080176d4
 8011018:	08017908 	.word	0x08017908
 801101c:	0801791c 	.word	0x0801791c
 8011020:	08017928 	.word	0x08017928
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011028:	2b04      	cmp	r3, #4
 801102a:	d009      	beq.n	8011040 <dhcp_parse_reply+0x348>
 801102c:	4b93      	ldr	r3, [pc, #588]	; (801127c <dhcp_parse_reply+0x584>)
 801102e:	f240 6261 	movw	r2, #1633	; 0x661
 8011032:	4993      	ldr	r1, [pc, #588]	; (8011280 <dhcp_parse_reply+0x588>)
 8011034:	4893      	ldr	r0, [pc, #588]	; (8011284 <dhcp_parse_reply+0x58c>)
 8011036:	f003 fd0d 	bl	8014a54 <iprintf>
 801103a:	f06f 0305 	mvn.w	r3, #5
 801103e:	e119      	b.n	8011274 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8011040:	2305      	movs	r3, #5
 8011042:	623b      	str	r3, [r7, #32]
        break;
 8011044:	e003      	b.n	801104e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8011046:	2300      	movs	r3, #0
 8011048:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801104c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801104e:	7dfb      	ldrb	r3, [r7, #23]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d103      	bne.n	801105c <dhcp_parse_reply+0x364>
      offset++;
 8011054:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011056:	3301      	adds	r3, #1
 8011058:	877b      	strh	r3, [r7, #58]	; 0x3a
 801105a:	e0a1      	b.n	80111a0 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801105c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801105e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011062:	4413      	add	r3, r2
 8011064:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8011068:	4293      	cmp	r3, r2
 801106a:	dd02      	ble.n	8011072 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 801106c:	f06f 0301 	mvn.w	r3, #1
 8011070:	e100      	b.n	8011274 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8011072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011076:	b29a      	uxth	r2, r3
 8011078:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801107a:	4413      	add	r3, r2
 801107c:	b29b      	uxth	r3, r3
 801107e:	3302      	adds	r3, #2
 8011080:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8011082:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011086:	2b00      	cmp	r3, #0
 8011088:	f000 808a 	beq.w	80111a0 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801108c:	2300      	movs	r3, #0
 801108e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8011090:	6a3b      	ldr	r3, [r7, #32]
 8011092:	2b00      	cmp	r3, #0
 8011094:	db02      	blt.n	801109c <dhcp_parse_reply+0x3a4>
 8011096:	6a3b      	ldr	r3, [r7, #32]
 8011098:	2b07      	cmp	r3, #7
 801109a:	dd06      	ble.n	80110aa <dhcp_parse_reply+0x3b2>
 801109c:	4b77      	ldr	r3, [pc, #476]	; (801127c <dhcp_parse_reply+0x584>)
 801109e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80110a2:	4979      	ldr	r1, [pc, #484]	; (8011288 <dhcp_parse_reply+0x590>)
 80110a4:	4877      	ldr	r0, [pc, #476]	; (8011284 <dhcp_parse_reply+0x58c>)
 80110a6:	f003 fcd5 	bl	8014a54 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80110aa:	4a78      	ldr	r2, [pc, #480]	; (801128c <dhcp_parse_reply+0x594>)
 80110ac:	6a3b      	ldr	r3, [r7, #32]
 80110ae:	4413      	add	r3, r2
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d174      	bne.n	80111a0 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80110b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80110ba:	2b04      	cmp	r3, #4
 80110bc:	bf28      	it	cs
 80110be:	2304      	movcs	r3, #4
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80110c4:	8bfb      	ldrh	r3, [r7, #30]
 80110c6:	8aba      	ldrh	r2, [r7, #20]
 80110c8:	f107 0108 	add.w	r1, r7, #8
 80110cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110ce:	f7f8 fc1b 	bl	8009908 <pbuf_copy_partial>
 80110d2:	4603      	mov	r3, r0
 80110d4:	461a      	mov	r2, r3
 80110d6:	8abb      	ldrh	r3, [r7, #20]
 80110d8:	4293      	cmp	r3, r2
 80110da:	d002      	beq.n	80110e2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80110dc:	f06f 0301 	mvn.w	r3, #1
 80110e0:	e0c8      	b.n	8011274 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80110e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80110e6:	2b04      	cmp	r3, #4
 80110e8:	d933      	bls.n	8011152 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80110ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80110ee:	f003 0303 	and.w	r3, r3, #3
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d009      	beq.n	801110c <dhcp_parse_reply+0x414>
 80110f8:	4b60      	ldr	r3, [pc, #384]	; (801127c <dhcp_parse_reply+0x584>)
 80110fa:	f240 6281 	movw	r2, #1665	; 0x681
 80110fe:	4964      	ldr	r1, [pc, #400]	; (8011290 <dhcp_parse_reply+0x598>)
 8011100:	4860      	ldr	r0, [pc, #384]	; (8011284 <dhcp_parse_reply+0x58c>)
 8011102:	f003 fca7 	bl	8014a54 <iprintf>
 8011106:	f06f 0305 	mvn.w	r3, #5
 801110a:	e0b3      	b.n	8011274 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 801110c:	4a5f      	ldr	r2, [pc, #380]	; (801128c <dhcp_parse_reply+0x594>)
 801110e:	6a3b      	ldr	r3, [r7, #32]
 8011110:	4413      	add	r3, r2
 8011112:	2201      	movs	r2, #1
 8011114:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	4618      	mov	r0, r3
 801111a:	f7f6 fe06 	bl	8007d2a <lwip_htonl>
 801111e:	4602      	mov	r2, r0
 8011120:	495c      	ldr	r1, [pc, #368]	; (8011294 <dhcp_parse_reply+0x59c>)
 8011122:	6a3b      	ldr	r3, [r7, #32]
 8011124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8011128:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801112c:	3b04      	subs	r3, #4
 801112e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8011132:	8bfb      	ldrh	r3, [r7, #30]
 8011134:	3304      	adds	r3, #4
 8011136:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8011138:	8a7a      	ldrh	r2, [r7, #18]
 801113a:	8bfb      	ldrh	r3, [r7, #30]
 801113c:	429a      	cmp	r2, r3
 801113e:	d202      	bcs.n	8011146 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8011140:	f06f 0301 	mvn.w	r3, #1
 8011144:	e096      	b.n	8011274 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8011146:	8a7b      	ldrh	r3, [r7, #18]
 8011148:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801114a:	6a3b      	ldr	r3, [r7, #32]
 801114c:	3301      	adds	r3, #1
 801114e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8011150:	e79e      	b.n	8011090 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8011152:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011156:	2b04      	cmp	r3, #4
 8011158:	d106      	bne.n	8011168 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	4618      	mov	r0, r3
 801115e:	f7f6 fde4 	bl	8007d2a <lwip_htonl>
 8011162:	4603      	mov	r3, r0
 8011164:	60bb      	str	r3, [r7, #8]
 8011166:	e011      	b.n	801118c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8011168:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801116c:	2b01      	cmp	r3, #1
 801116e:	d009      	beq.n	8011184 <dhcp_parse_reply+0x48c>
 8011170:	4b42      	ldr	r3, [pc, #264]	; (801127c <dhcp_parse_reply+0x584>)
 8011172:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8011176:	4948      	ldr	r1, [pc, #288]	; (8011298 <dhcp_parse_reply+0x5a0>)
 8011178:	4842      	ldr	r0, [pc, #264]	; (8011284 <dhcp_parse_reply+0x58c>)
 801117a:	f003 fc6b 	bl	8014a54 <iprintf>
 801117e:	f06f 0305 	mvn.w	r3, #5
 8011182:	e077      	b.n	8011274 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8011184:	f107 0308 	add.w	r3, r7, #8
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801118c:	4a3f      	ldr	r2, [pc, #252]	; (801128c <dhcp_parse_reply+0x594>)
 801118e:	6a3b      	ldr	r3, [r7, #32]
 8011190:	4413      	add	r3, r2
 8011192:	2201      	movs	r2, #1
 8011194:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8011196:	68ba      	ldr	r2, [r7, #8]
 8011198:	493e      	ldr	r1, [pc, #248]	; (8011294 <dhcp_parse_reply+0x59c>)
 801119a:	6a3b      	ldr	r3, [r7, #32]
 801119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80111a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a2:	895b      	ldrh	r3, [r3, #10]
 80111a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d324      	bcc.n	80111f4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80111aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ac:	895b      	ldrh	r3, [r3, #10]
 80111ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80111b0:	1ad3      	subs	r3, r2, r3
 80111b2:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80111b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b6:	895b      	ldrh	r3, [r3, #10]
 80111b8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80111ba:	1ad3      	subs	r3, r2, r3
 80111bc:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80111be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80111c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d213      	bcs.n	80111ee <dhcp_parse_reply+0x4f6>
        q = q->next;
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80111cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d109      	bne.n	80111e6 <dhcp_parse_reply+0x4ee>
 80111d2:	4b2a      	ldr	r3, [pc, #168]	; (801127c <dhcp_parse_reply+0x584>)
 80111d4:	f240 629d 	movw	r2, #1693	; 0x69d
 80111d8:	4930      	ldr	r1, [pc, #192]	; (801129c <dhcp_parse_reply+0x5a4>)
 80111da:	482a      	ldr	r0, [pc, #168]	; (8011284 <dhcp_parse_reply+0x58c>)
 80111dc:	f003 fc3a 	bl	8014a54 <iprintf>
 80111e0:	f06f 0305 	mvn.w	r3, #5
 80111e4:	e046      	b.n	8011274 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80111e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e8:	685b      	ldr	r3, [r3, #4]
 80111ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80111ec:	e002      	b.n	80111f4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80111ee:	f06f 0301 	mvn.w	r3, #1
 80111f2:	e03f      	b.n	8011274 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80111f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d00a      	beq.n	8011210 <dhcp_parse_reply+0x518>
 80111fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80111fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80111fe:	429a      	cmp	r2, r3
 8011200:	d206      	bcs.n	8011210 <dhcp_parse_reply+0x518>
 8011202:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011204:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011206:	4413      	add	r3, r2
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	2bff      	cmp	r3, #255	; 0xff
 801120c:	f47f adb7 	bne.w	8010d7e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011210:	4b1e      	ldr	r3, [pc, #120]	; (801128c <dhcp_parse_reply+0x594>)
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d018      	beq.n	801124a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011218:	4b1e      	ldr	r3, [pc, #120]	; (8011294 <dhcp_parse_reply+0x59c>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801121e:	4b1b      	ldr	r3, [pc, #108]	; (801128c <dhcp_parse_reply+0x594>)
 8011220:	2200      	movs	r2, #0
 8011222:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2b01      	cmp	r3, #1
 8011228:	d102      	bne.n	8011230 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801122a:	2301      	movs	r3, #1
 801122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801122e:	e00c      	b.n	801124a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2b02      	cmp	r3, #2
 8011234:	d102      	bne.n	801123c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8011236:	2301      	movs	r3, #1
 8011238:	62bb      	str	r3, [r7, #40]	; 0x28
 801123a:	e006      	b.n	801124a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2b03      	cmp	r3, #3
 8011240:	d103      	bne.n	801124a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8011242:	2301      	movs	r3, #1
 8011244:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8011246:	2301      	movs	r3, #1
 8011248:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801124a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124c:	2b00      	cmp	r3, #0
 801124e:	d006      	beq.n	801125e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8011250:	2300      	movs	r3, #0
 8011252:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8011254:	236c      	movs	r3, #108	; 0x6c
 8011256:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8011258:	23ec      	movs	r3, #236	; 0xec
 801125a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801125c:	e569      	b.n	8010d32 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011260:	2b00      	cmp	r3, #0
 8011262:	d006      	beq.n	8011272 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8011264:	2300      	movs	r3, #0
 8011266:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8011268:	232c      	movs	r3, #44	; 0x2c
 801126a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801126c:	236c      	movs	r3, #108	; 0x6c
 801126e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8011270:	e55f      	b.n	8010d32 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8011272:	2300      	movs	r3, #0
}
 8011274:	4618      	mov	r0, r3
 8011276:	3740      	adds	r7, #64	; 0x40
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	08017674 	.word	0x08017674
 8011280:	080178fc 	.word	0x080178fc
 8011284:	080176d4 	.word	0x080176d4
 8011288:	08017940 	.word	0x08017940
 801128c:	20018d58 	.word	0x20018d58
 8011290:	08017954 	.word	0x08017954
 8011294:	20018d60 	.word	0x20018d60
 8011298:	0801796c 	.word	0x0801796c
 801129c:	08017980 	.word	0x08017980

080112a0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b08a      	sub	sp, #40	; 0x28
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	607a      	str	r2, [r7, #4]
 80112ac:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80112ae:	4b60      	ldr	r3, [pc, #384]	; (8011430 <dhcp_recv+0x190>)
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80112b4:	6a3b      	ldr	r3, [r7, #32]
 80112b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112b8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80112c0:	69fb      	ldr	r3, [r7, #28]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	f000 809d 	beq.w	8011402 <dhcp_recv+0x162>
 80112c8:	69fb      	ldr	r3, [r7, #28]
 80112ca:	791b      	ldrb	r3, [r3, #4]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f000 8098 	beq.w	8011402 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	895b      	ldrh	r3, [r3, #10]
 80112d6:	2b2b      	cmp	r3, #43	; 0x2b
 80112d8:	f240 8095 	bls.w	8011406 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80112dc:	69bb      	ldr	r3, [r7, #24]
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	2b02      	cmp	r3, #2
 80112e2:	f040 8092 	bne.w	801140a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80112e6:	2300      	movs	r3, #0
 80112e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80112ec:	e012      	b.n	8011314 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80112ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112f2:	6a3a      	ldr	r2, [r7, #32]
 80112f4:	4413      	add	r3, r2
 80112f6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80112fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112fe:	69b9      	ldr	r1, [r7, #24]
 8011300:	440b      	add	r3, r1
 8011302:	7f1b      	ldrb	r3, [r3, #28]
 8011304:	429a      	cmp	r2, r3
 8011306:	f040 8082 	bne.w	801140e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801130a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801130e:	3301      	adds	r3, #1
 8011310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011314:	6a3b      	ldr	r3, [r7, #32]
 8011316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801131a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801131e:	429a      	cmp	r2, r3
 8011320:	d203      	bcs.n	801132a <dhcp_recv+0x8a>
 8011322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011326:	2b05      	cmp	r3, #5
 8011328:	d9e1      	bls.n	80112ee <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801132a:	69bb      	ldr	r3, [r7, #24]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	4618      	mov	r0, r3
 8011330:	f7f6 fcfb 	bl	8007d2a <lwip_htonl>
 8011334:	4602      	mov	r2, r0
 8011336:	69fb      	ldr	r3, [r7, #28]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	429a      	cmp	r2, r3
 801133c:	d169      	bne.n	8011412 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801133e:	69f9      	ldr	r1, [r7, #28]
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f7ff fcd9 	bl	8010cf8 <dhcp_parse_reply>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d164      	bne.n	8011416 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801134c:	4b39      	ldr	r3, [pc, #228]	; (8011434 <dhcp_recv+0x194>)
 801134e:	785b      	ldrb	r3, [r3, #1]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d062      	beq.n	801141a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801135a:	4b37      	ldr	r3, [pc, #220]	; (8011438 <dhcp_recv+0x198>)
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8011360:	7cfb      	ldrb	r3, [r7, #19]
 8011362:	2b05      	cmp	r3, #5
 8011364:	d12a      	bne.n	80113bc <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	795b      	ldrb	r3, [r3, #5]
 801136a:	2b01      	cmp	r3, #1
 801136c:	d112      	bne.n	8011394 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801136e:	6979      	ldr	r1, [r7, #20]
 8011370:	6a38      	ldr	r0, [r7, #32]
 8011372:	f7fe fe17 	bl	800ffa4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8011376:	6a3b      	ldr	r3, [r7, #32]
 8011378:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801137c:	f003 0308 	and.w	r3, r3, #8
 8011380:	2b00      	cmp	r3, #0
 8011382:	d003      	beq.n	801138c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8011384:	6a38      	ldr	r0, [r7, #32]
 8011386:	f7fe fb87 	bl	800fa98 <dhcp_check>
 801138a:	e049      	b.n	8011420 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801138c:	6a38      	ldr	r0, [r7, #32]
 801138e:	f7ff f867 	bl	8010460 <dhcp_bind>
 8011392:	e045      	b.n	8011420 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011394:	69fb      	ldr	r3, [r7, #28]
 8011396:	795b      	ldrb	r3, [r3, #5]
 8011398:	2b03      	cmp	r3, #3
 801139a:	d007      	beq.n	80113ac <dhcp_recv+0x10c>
 801139c:	69fb      	ldr	r3, [r7, #28]
 801139e:	795b      	ldrb	r3, [r3, #5]
 80113a0:	2b04      	cmp	r3, #4
 80113a2:	d003      	beq.n	80113ac <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80113a4:	69fb      	ldr	r3, [r7, #28]
 80113a6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80113a8:	2b05      	cmp	r3, #5
 80113aa:	d139      	bne.n	8011420 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80113ac:	6979      	ldr	r1, [r7, #20]
 80113ae:	6a38      	ldr	r0, [r7, #32]
 80113b0:	f7fe fdf8 	bl	800ffa4 <dhcp_handle_ack>
      dhcp_bind(netif);
 80113b4:	6a38      	ldr	r0, [r7, #32]
 80113b6:	f7ff f853 	bl	8010460 <dhcp_bind>
 80113ba:	e031      	b.n	8011420 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80113bc:	7cfb      	ldrb	r3, [r7, #19]
 80113be:	2b06      	cmp	r3, #6
 80113c0:	d113      	bne.n	80113ea <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80113c6:	2b03      	cmp	r3, #3
 80113c8:	d00b      	beq.n	80113e2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80113ca:	69fb      	ldr	r3, [r7, #28]
 80113cc:	795b      	ldrb	r3, [r3, #5]
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d007      	beq.n	80113e2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80113d6:	2b04      	cmp	r3, #4
 80113d8:	d003      	beq.n	80113e2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80113da:	69fb      	ldr	r3, [r7, #28]
 80113dc:	795b      	ldrb	r3, [r3, #5]
 80113de:	2b05      	cmp	r3, #5
 80113e0:	d103      	bne.n	80113ea <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80113e2:	6a38      	ldr	r0, [r7, #32]
 80113e4:	f7fe fb3e 	bl	800fa64 <dhcp_handle_nak>
 80113e8:	e01a      	b.n	8011420 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80113ea:	7cfb      	ldrb	r3, [r7, #19]
 80113ec:	2b02      	cmp	r3, #2
 80113ee:	d116      	bne.n	801141e <dhcp_recv+0x17e>
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	795b      	ldrb	r3, [r3, #5]
 80113f4:	2b06      	cmp	r3, #6
 80113f6:	d112      	bne.n	801141e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80113f8:	6979      	ldr	r1, [r7, #20]
 80113fa:	6a38      	ldr	r0, [r7, #32]
 80113fc:	f7fe fb80 	bl	800fb00 <dhcp_handle_offer>
 8011400:	e00e      	b.n	8011420 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011402:	bf00      	nop
 8011404:	e00c      	b.n	8011420 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011406:	bf00      	nop
 8011408:	e00a      	b.n	8011420 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801140a:	bf00      	nop
 801140c:	e008      	b.n	8011420 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801140e:	bf00      	nop
 8011410:	e006      	b.n	8011420 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011412:	bf00      	nop
 8011414:	e004      	b.n	8011420 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011416:	bf00      	nop
 8011418:	e002      	b.n	8011420 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801141a:	bf00      	nop
 801141c:	e000      	b.n	8011420 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801141e:	bf00      	nop
  pbuf_free(p);
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f7f8 f86b 	bl	80094fc <pbuf_free>
}
 8011426:	bf00      	nop
 8011428:	3728      	adds	r7, #40	; 0x28
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	20015608 	.word	0x20015608
 8011434:	20018d58 	.word	0x20018d58
 8011438:	20018d60 	.word	0x20018d60

0801143c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b088      	sub	sp, #32
 8011440:	af00      	add	r7, sp, #0
 8011442:	60f8      	str	r0, [r7, #12]
 8011444:	60b9      	str	r1, [r7, #8]
 8011446:	603b      	str	r3, [r7, #0]
 8011448:	4613      	mov	r3, r2
 801144a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d108      	bne.n	8011464 <dhcp_create_msg+0x28>
 8011452:	4b5f      	ldr	r3, [pc, #380]	; (80115d0 <dhcp_create_msg+0x194>)
 8011454:	f240 7269 	movw	r2, #1897	; 0x769
 8011458:	495e      	ldr	r1, [pc, #376]	; (80115d4 <dhcp_create_msg+0x198>)
 801145a:	485f      	ldr	r0, [pc, #380]	; (80115d8 <dhcp_create_msg+0x19c>)
 801145c:	f003 fafa 	bl	8014a54 <iprintf>
 8011460:	2300      	movs	r3, #0
 8011462:	e0b1      	b.n	80115c8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d108      	bne.n	801147c <dhcp_create_msg+0x40>
 801146a:	4b59      	ldr	r3, [pc, #356]	; (80115d0 <dhcp_create_msg+0x194>)
 801146c:	f240 726a 	movw	r2, #1898	; 0x76a
 8011470:	495a      	ldr	r1, [pc, #360]	; (80115dc <dhcp_create_msg+0x1a0>)
 8011472:	4859      	ldr	r0, [pc, #356]	; (80115d8 <dhcp_create_msg+0x19c>)
 8011474:	f003 faee 	bl	8014a54 <iprintf>
 8011478:	2300      	movs	r3, #0
 801147a:	e0a5      	b.n	80115c8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801147c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011480:	f44f 719a 	mov.w	r1, #308	; 0x134
 8011484:	2036      	movs	r0, #54	; 0x36
 8011486:	f7f7 fd55 	bl	8008f34 <pbuf_alloc>
 801148a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801148c:	69bb      	ldr	r3, [r7, #24]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d101      	bne.n	8011496 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8011492:	2300      	movs	r3, #0
 8011494:	e098      	b.n	80115c8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8011496:	69bb      	ldr	r3, [r7, #24]
 8011498:	895b      	ldrh	r3, [r3, #10]
 801149a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801149e:	d206      	bcs.n	80114ae <dhcp_create_msg+0x72>
 80114a0:	4b4b      	ldr	r3, [pc, #300]	; (80115d0 <dhcp_create_msg+0x194>)
 80114a2:	f240 7271 	movw	r2, #1905	; 0x771
 80114a6:	494e      	ldr	r1, [pc, #312]	; (80115e0 <dhcp_create_msg+0x1a4>)
 80114a8:	484b      	ldr	r0, [pc, #300]	; (80115d8 <dhcp_create_msg+0x19c>)
 80114aa:	f003 fad3 	bl	8014a54 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80114ae:	79fb      	ldrb	r3, [r7, #7]
 80114b0:	2b03      	cmp	r3, #3
 80114b2:	d103      	bne.n	80114bc <dhcp_create_msg+0x80>
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	795b      	ldrb	r3, [r3, #5]
 80114b8:	2b03      	cmp	r3, #3
 80114ba:	d10d      	bne.n	80114d8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	799b      	ldrb	r3, [r3, #6]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d105      	bne.n	80114d0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80114c4:	f003 fade 	bl	8014a84 <rand>
 80114c8:	4603      	mov	r3, r0
 80114ca:	461a      	mov	r2, r3
 80114cc:	4b45      	ldr	r3, [pc, #276]	; (80115e4 <dhcp_create_msg+0x1a8>)
 80114ce:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80114d0:	4b44      	ldr	r3, [pc, #272]	; (80115e4 <dhcp_create_msg+0x1a8>)
 80114d2:	681a      	ldr	r2, [r3, #0]
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80114d8:	69bb      	ldr	r3, [r7, #24]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80114de:	f44f 729a 	mov.w	r2, #308	; 0x134
 80114e2:	2100      	movs	r1, #0
 80114e4:	6978      	ldr	r0, [r7, #20]
 80114e6:	f002 ff15 	bl	8014314 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	2201      	movs	r2, #1
 80114ee:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	2201      	movs	r2, #1
 80114f4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	4618      	mov	r0, r3
 8011506:	f7f6 fc10 	bl	8007d2a <lwip_htonl>
 801150a:	4602      	mov	r2, r0
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011510:	79fb      	ldrb	r3, [r7, #7]
 8011512:	2b08      	cmp	r3, #8
 8011514:	d010      	beq.n	8011538 <dhcp_create_msg+0xfc>
 8011516:	79fb      	ldrb	r3, [r7, #7]
 8011518:	2b04      	cmp	r3, #4
 801151a:	d00d      	beq.n	8011538 <dhcp_create_msg+0xfc>
 801151c:	79fb      	ldrb	r3, [r7, #7]
 801151e:	2b07      	cmp	r3, #7
 8011520:	d00a      	beq.n	8011538 <dhcp_create_msg+0xfc>
 8011522:	79fb      	ldrb	r3, [r7, #7]
 8011524:	2b03      	cmp	r3, #3
 8011526:	d10c      	bne.n	8011542 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801152c:	2b05      	cmp	r3, #5
 801152e:	d003      	beq.n	8011538 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	795b      	ldrb	r3, [r3, #5]
 8011534:	2b04      	cmp	r3, #4
 8011536:	d104      	bne.n	8011542 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	3304      	adds	r3, #4
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011542:	2300      	movs	r3, #0
 8011544:	83fb      	strh	r3, [r7, #30]
 8011546:	e00c      	b.n	8011562 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8011548:	8bfa      	ldrh	r2, [r7, #30]
 801154a:	8bfb      	ldrh	r3, [r7, #30]
 801154c:	68f9      	ldr	r1, [r7, #12]
 801154e:	440a      	add	r2, r1
 8011550:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8011554:	697a      	ldr	r2, [r7, #20]
 8011556:	4413      	add	r3, r2
 8011558:	460a      	mov	r2, r1
 801155a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801155c:	8bfb      	ldrh	r3, [r7, #30]
 801155e:	3301      	adds	r3, #1
 8011560:	83fb      	strh	r3, [r7, #30]
 8011562:	8bfb      	ldrh	r3, [r7, #30]
 8011564:	2b05      	cmp	r3, #5
 8011566:	d9ef      	bls.n	8011548 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	2200      	movs	r2, #0
 801156c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8011570:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8011574:	2200      	movs	r2, #0
 8011576:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801157a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801157e:	2200      	movs	r2, #0
 8011580:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8011584:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8011588:	2200      	movs	r2, #0
 801158a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801158e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011598:	2301      	movs	r3, #1
 801159a:	2235      	movs	r2, #53	; 0x35
 801159c:	2000      	movs	r0, #0
 801159e:	f7ff fadb 	bl	8010b58 <dhcp_option>
 80115a2:	4603      	mov	r3, r0
 80115a4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80115ac:	79fa      	ldrb	r2, [r7, #7]
 80115ae:	8a7b      	ldrh	r3, [r7, #18]
 80115b0:	4618      	mov	r0, r3
 80115b2:	f7ff fb05 	bl	8010bc0 <dhcp_option_byte>
 80115b6:	4603      	mov	r3, r0
 80115b8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d002      	beq.n	80115c6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	8a7a      	ldrh	r2, [r7, #18]
 80115c4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80115c6:	69bb      	ldr	r3, [r7, #24]
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3720      	adds	r7, #32
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	08017674 	.word	0x08017674
 80115d4:	08017994 	.word	0x08017994
 80115d8:	080176d4 	.word	0x080176d4
 80115dc:	080179b4 	.word	0x080179b4
 80115e0:	080179d4 	.word	0x080179d4
 80115e4:	2001076c 	.word	0x2001076c

080115e8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b084      	sub	sp, #16
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	4603      	mov	r3, r0
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	607a      	str	r2, [r7, #4]
 80115f4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80115f6:	89fb      	ldrh	r3, [r7, #14]
 80115f8:	1c5a      	adds	r2, r3, #1
 80115fa:	81fa      	strh	r2, [r7, #14]
 80115fc:	461a      	mov	r2, r3
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	4413      	add	r3, r2
 8011602:	22ff      	movs	r2, #255	; 0xff
 8011604:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011606:	e007      	b.n	8011618 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011608:	89fb      	ldrh	r3, [r7, #14]
 801160a:	1c5a      	adds	r2, r3, #1
 801160c:	81fa      	strh	r2, [r7, #14]
 801160e:	461a      	mov	r2, r3
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	4413      	add	r3, r2
 8011614:	2200      	movs	r2, #0
 8011616:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011618:	89fb      	ldrh	r3, [r7, #14]
 801161a:	2b43      	cmp	r3, #67	; 0x43
 801161c:	d904      	bls.n	8011628 <dhcp_option_trailer+0x40>
 801161e:	89fb      	ldrh	r3, [r7, #14]
 8011620:	f003 0303 	and.w	r3, r3, #3
 8011624:	2b00      	cmp	r3, #0
 8011626:	d002      	beq.n	801162e <dhcp_option_trailer+0x46>
 8011628:	89fb      	ldrh	r3, [r7, #14]
 801162a:	2b43      	cmp	r3, #67	; 0x43
 801162c:	d9ec      	bls.n	8011608 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801162e:	89fb      	ldrh	r3, [r7, #14]
 8011630:	33f0      	adds	r3, #240	; 0xf0
 8011632:	b29b      	uxth	r3, r3
 8011634:	4619      	mov	r1, r3
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7f7 fdda 	bl	80091f0 <pbuf_realloc>
}
 801163c:	bf00      	nop
 801163e:	3710      	adds	r7, #16
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}

08011644 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8011644:	b480      	push	{r7}
 8011646:	b085      	sub	sp, #20
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d017      	beq.n	8011682 <dhcp_supplied_address+0x3e>
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011656:	2b00      	cmp	r3, #0
 8011658:	d013      	beq.n	8011682 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801165e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	795b      	ldrb	r3, [r3, #5]
 8011664:	2b0a      	cmp	r3, #10
 8011666:	d007      	beq.n	8011678 <dhcp_supplied_address+0x34>
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	795b      	ldrb	r3, [r3, #5]
 801166c:	2b05      	cmp	r3, #5
 801166e:	d003      	beq.n	8011678 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011674:	2b04      	cmp	r3, #4
 8011676:	d101      	bne.n	801167c <dhcp_supplied_address+0x38>
 8011678:	2301      	movs	r3, #1
 801167a:	e000      	b.n	801167e <dhcp_supplied_address+0x3a>
 801167c:	2300      	movs	r3, #0
 801167e:	b2db      	uxtb	r3, r3
 8011680:	e000      	b.n	8011684 <dhcp_supplied_address+0x40>
  }
  return 0;
 8011682:	2300      	movs	r3, #0
}
 8011684:	4618      	mov	r0, r3
 8011686:	3714      	adds	r7, #20
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011698:	4915      	ldr	r1, [pc, #84]	; (80116f0 <etharp_free_entry+0x60>)
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	4613      	mov	r3, r2
 801169e:	005b      	lsls	r3, r3, #1
 80116a0:	4413      	add	r3, r2
 80116a2:	00db      	lsls	r3, r3, #3
 80116a4:	440b      	add	r3, r1
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d013      	beq.n	80116d4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80116ac:	4910      	ldr	r1, [pc, #64]	; (80116f0 <etharp_free_entry+0x60>)
 80116ae:	687a      	ldr	r2, [r7, #4]
 80116b0:	4613      	mov	r3, r2
 80116b2:	005b      	lsls	r3, r3, #1
 80116b4:	4413      	add	r3, r2
 80116b6:	00db      	lsls	r3, r3, #3
 80116b8:	440b      	add	r3, r1
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	4618      	mov	r0, r3
 80116be:	f7f7 ff1d 	bl	80094fc <pbuf_free>
    arp_table[i].q = NULL;
 80116c2:	490b      	ldr	r1, [pc, #44]	; (80116f0 <etharp_free_entry+0x60>)
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	4613      	mov	r3, r2
 80116c8:	005b      	lsls	r3, r3, #1
 80116ca:	4413      	add	r3, r2
 80116cc:	00db      	lsls	r3, r3, #3
 80116ce:	440b      	add	r3, r1
 80116d0:	2200      	movs	r2, #0
 80116d2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80116d4:	4906      	ldr	r1, [pc, #24]	; (80116f0 <etharp_free_entry+0x60>)
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	4613      	mov	r3, r2
 80116da:	005b      	lsls	r3, r3, #1
 80116dc:	4413      	add	r3, r2
 80116de:	00db      	lsls	r3, r3, #3
 80116e0:	440b      	add	r3, r1
 80116e2:	3314      	adds	r3, #20
 80116e4:	2200      	movs	r2, #0
 80116e6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80116e8:	bf00      	nop
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	20010770 	.word	0x20010770

080116f4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b082      	sub	sp, #8
 80116f8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80116fa:	2300      	movs	r3, #0
 80116fc:	607b      	str	r3, [r7, #4]
 80116fe:	e096      	b.n	801182e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011700:	494f      	ldr	r1, [pc, #316]	; (8011840 <etharp_tmr+0x14c>)
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	4613      	mov	r3, r2
 8011706:	005b      	lsls	r3, r3, #1
 8011708:	4413      	add	r3, r2
 801170a:	00db      	lsls	r3, r3, #3
 801170c:	440b      	add	r3, r1
 801170e:	3314      	adds	r3, #20
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011714:	78fb      	ldrb	r3, [r7, #3]
 8011716:	2b00      	cmp	r3, #0
 8011718:	f000 8086 	beq.w	8011828 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801171c:	4948      	ldr	r1, [pc, #288]	; (8011840 <etharp_tmr+0x14c>)
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	4613      	mov	r3, r2
 8011722:	005b      	lsls	r3, r3, #1
 8011724:	4413      	add	r3, r2
 8011726:	00db      	lsls	r3, r3, #3
 8011728:	440b      	add	r3, r1
 801172a:	3312      	adds	r3, #18
 801172c:	881b      	ldrh	r3, [r3, #0]
 801172e:	3301      	adds	r3, #1
 8011730:	b298      	uxth	r0, r3
 8011732:	4943      	ldr	r1, [pc, #268]	; (8011840 <etharp_tmr+0x14c>)
 8011734:	687a      	ldr	r2, [r7, #4]
 8011736:	4613      	mov	r3, r2
 8011738:	005b      	lsls	r3, r3, #1
 801173a:	4413      	add	r3, r2
 801173c:	00db      	lsls	r3, r3, #3
 801173e:	440b      	add	r3, r1
 8011740:	3312      	adds	r3, #18
 8011742:	4602      	mov	r2, r0
 8011744:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011746:	493e      	ldr	r1, [pc, #248]	; (8011840 <etharp_tmr+0x14c>)
 8011748:	687a      	ldr	r2, [r7, #4]
 801174a:	4613      	mov	r3, r2
 801174c:	005b      	lsls	r3, r3, #1
 801174e:	4413      	add	r3, r2
 8011750:	00db      	lsls	r3, r3, #3
 8011752:	440b      	add	r3, r1
 8011754:	3312      	adds	r3, #18
 8011756:	881b      	ldrh	r3, [r3, #0]
 8011758:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801175c:	d215      	bcs.n	801178a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801175e:	4938      	ldr	r1, [pc, #224]	; (8011840 <etharp_tmr+0x14c>)
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	4613      	mov	r3, r2
 8011764:	005b      	lsls	r3, r3, #1
 8011766:	4413      	add	r3, r2
 8011768:	00db      	lsls	r3, r3, #3
 801176a:	440b      	add	r3, r1
 801176c:	3314      	adds	r3, #20
 801176e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011770:	2b01      	cmp	r3, #1
 8011772:	d10e      	bne.n	8011792 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011774:	4932      	ldr	r1, [pc, #200]	; (8011840 <etharp_tmr+0x14c>)
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	4613      	mov	r3, r2
 801177a:	005b      	lsls	r3, r3, #1
 801177c:	4413      	add	r3, r2
 801177e:	00db      	lsls	r3, r3, #3
 8011780:	440b      	add	r3, r1
 8011782:	3312      	adds	r3, #18
 8011784:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011786:	2b04      	cmp	r3, #4
 8011788:	d903      	bls.n	8011792 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f7ff ff80 	bl	8011690 <etharp_free_entry>
 8011790:	e04a      	b.n	8011828 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011792:	492b      	ldr	r1, [pc, #172]	; (8011840 <etharp_tmr+0x14c>)
 8011794:	687a      	ldr	r2, [r7, #4]
 8011796:	4613      	mov	r3, r2
 8011798:	005b      	lsls	r3, r3, #1
 801179a:	4413      	add	r3, r2
 801179c:	00db      	lsls	r3, r3, #3
 801179e:	440b      	add	r3, r1
 80117a0:	3314      	adds	r3, #20
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	2b03      	cmp	r3, #3
 80117a6:	d10a      	bne.n	80117be <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80117a8:	4925      	ldr	r1, [pc, #148]	; (8011840 <etharp_tmr+0x14c>)
 80117aa:	687a      	ldr	r2, [r7, #4]
 80117ac:	4613      	mov	r3, r2
 80117ae:	005b      	lsls	r3, r3, #1
 80117b0:	4413      	add	r3, r2
 80117b2:	00db      	lsls	r3, r3, #3
 80117b4:	440b      	add	r3, r1
 80117b6:	3314      	adds	r3, #20
 80117b8:	2204      	movs	r2, #4
 80117ba:	701a      	strb	r2, [r3, #0]
 80117bc:	e034      	b.n	8011828 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80117be:	4920      	ldr	r1, [pc, #128]	; (8011840 <etharp_tmr+0x14c>)
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	4613      	mov	r3, r2
 80117c4:	005b      	lsls	r3, r3, #1
 80117c6:	4413      	add	r3, r2
 80117c8:	00db      	lsls	r3, r3, #3
 80117ca:	440b      	add	r3, r1
 80117cc:	3314      	adds	r3, #20
 80117ce:	781b      	ldrb	r3, [r3, #0]
 80117d0:	2b04      	cmp	r3, #4
 80117d2:	d10a      	bne.n	80117ea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80117d4:	491a      	ldr	r1, [pc, #104]	; (8011840 <etharp_tmr+0x14c>)
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	4613      	mov	r3, r2
 80117da:	005b      	lsls	r3, r3, #1
 80117dc:	4413      	add	r3, r2
 80117de:	00db      	lsls	r3, r3, #3
 80117e0:	440b      	add	r3, r1
 80117e2:	3314      	adds	r3, #20
 80117e4:	2202      	movs	r2, #2
 80117e6:	701a      	strb	r2, [r3, #0]
 80117e8:	e01e      	b.n	8011828 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80117ea:	4915      	ldr	r1, [pc, #84]	; (8011840 <etharp_tmr+0x14c>)
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	4613      	mov	r3, r2
 80117f0:	005b      	lsls	r3, r3, #1
 80117f2:	4413      	add	r3, r2
 80117f4:	00db      	lsls	r3, r3, #3
 80117f6:	440b      	add	r3, r1
 80117f8:	3314      	adds	r3, #20
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d113      	bne.n	8011828 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011800:	490f      	ldr	r1, [pc, #60]	; (8011840 <etharp_tmr+0x14c>)
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	4613      	mov	r3, r2
 8011806:	005b      	lsls	r3, r3, #1
 8011808:	4413      	add	r3, r2
 801180a:	00db      	lsls	r3, r3, #3
 801180c:	440b      	add	r3, r1
 801180e:	3308      	adds	r3, #8
 8011810:	6818      	ldr	r0, [r3, #0]
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	4613      	mov	r3, r2
 8011816:	005b      	lsls	r3, r3, #1
 8011818:	4413      	add	r3, r2
 801181a:	00db      	lsls	r3, r3, #3
 801181c:	4a08      	ldr	r2, [pc, #32]	; (8011840 <etharp_tmr+0x14c>)
 801181e:	4413      	add	r3, r2
 8011820:	3304      	adds	r3, #4
 8011822:	4619      	mov	r1, r3
 8011824:	f000 fe72 	bl	801250c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	3301      	adds	r3, #1
 801182c:	607b      	str	r3, [r7, #4]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2b09      	cmp	r3, #9
 8011832:	f77f af65 	ble.w	8011700 <etharp_tmr+0xc>
      }
    }
  }
}
 8011836:	bf00      	nop
 8011838:	bf00      	nop
 801183a:	3708      	adds	r7, #8
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	20010770 	.word	0x20010770

08011844 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b08a      	sub	sp, #40	; 0x28
 8011848:	af00      	add	r7, sp, #0
 801184a:	60f8      	str	r0, [r7, #12]
 801184c:	460b      	mov	r3, r1
 801184e:	607a      	str	r2, [r7, #4]
 8011850:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011852:	230a      	movs	r3, #10
 8011854:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011856:	230a      	movs	r3, #10
 8011858:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801185a:	230a      	movs	r3, #10
 801185c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801185e:	2300      	movs	r3, #0
 8011860:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011862:	230a      	movs	r3, #10
 8011864:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011866:	2300      	movs	r3, #0
 8011868:	83bb      	strh	r3, [r7, #28]
 801186a:	2300      	movs	r3, #0
 801186c:	837b      	strh	r3, [r7, #26]
 801186e:	2300      	movs	r3, #0
 8011870:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011872:	2300      	movs	r3, #0
 8011874:	843b      	strh	r3, [r7, #32]
 8011876:	e0ae      	b.n	80119d6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801187c:	49a6      	ldr	r1, [pc, #664]	; (8011b18 <etharp_find_entry+0x2d4>)
 801187e:	4613      	mov	r3, r2
 8011880:	005b      	lsls	r3, r3, #1
 8011882:	4413      	add	r3, r2
 8011884:	00db      	lsls	r3, r3, #3
 8011886:	440b      	add	r3, r1
 8011888:	3314      	adds	r3, #20
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801188e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011892:	2b0a      	cmp	r3, #10
 8011894:	d105      	bne.n	80118a2 <etharp_find_entry+0x5e>
 8011896:	7dfb      	ldrb	r3, [r7, #23]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d102      	bne.n	80118a2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801189c:	8c3b      	ldrh	r3, [r7, #32]
 801189e:	847b      	strh	r3, [r7, #34]	; 0x22
 80118a0:	e095      	b.n	80119ce <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80118a2:	7dfb      	ldrb	r3, [r7, #23]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	f000 8092 	beq.w	80119ce <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80118aa:	7dfb      	ldrb	r3, [r7, #23]
 80118ac:	2b01      	cmp	r3, #1
 80118ae:	d009      	beq.n	80118c4 <etharp_find_entry+0x80>
 80118b0:	7dfb      	ldrb	r3, [r7, #23]
 80118b2:	2b01      	cmp	r3, #1
 80118b4:	d806      	bhi.n	80118c4 <etharp_find_entry+0x80>
 80118b6:	4b99      	ldr	r3, [pc, #612]	; (8011b1c <etharp_find_entry+0x2d8>)
 80118b8:	f240 1223 	movw	r2, #291	; 0x123
 80118bc:	4998      	ldr	r1, [pc, #608]	; (8011b20 <etharp_find_entry+0x2dc>)
 80118be:	4899      	ldr	r0, [pc, #612]	; (8011b24 <etharp_find_entry+0x2e0>)
 80118c0:	f003 f8c8 	bl	8014a54 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d020      	beq.n	801190c <etharp_find_entry+0xc8>
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	6819      	ldr	r1, [r3, #0]
 80118ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118d2:	4891      	ldr	r0, [pc, #580]	; (8011b18 <etharp_find_entry+0x2d4>)
 80118d4:	4613      	mov	r3, r2
 80118d6:	005b      	lsls	r3, r3, #1
 80118d8:	4413      	add	r3, r2
 80118da:	00db      	lsls	r3, r3, #3
 80118dc:	4403      	add	r3, r0
 80118de:	3304      	adds	r3, #4
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	4299      	cmp	r1, r3
 80118e4:	d112      	bne.n	801190c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d00c      	beq.n	8011906 <etharp_find_entry+0xc2>
 80118ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118f0:	4989      	ldr	r1, [pc, #548]	; (8011b18 <etharp_find_entry+0x2d4>)
 80118f2:	4613      	mov	r3, r2
 80118f4:	005b      	lsls	r3, r3, #1
 80118f6:	4413      	add	r3, r2
 80118f8:	00db      	lsls	r3, r3, #3
 80118fa:	440b      	add	r3, r1
 80118fc:	3308      	adds	r3, #8
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	429a      	cmp	r2, r3
 8011904:	d102      	bne.n	801190c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011906:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801190a:	e100      	b.n	8011b0e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801190c:	7dfb      	ldrb	r3, [r7, #23]
 801190e:	2b01      	cmp	r3, #1
 8011910:	d140      	bne.n	8011994 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011912:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011916:	4980      	ldr	r1, [pc, #512]	; (8011b18 <etharp_find_entry+0x2d4>)
 8011918:	4613      	mov	r3, r2
 801191a:	005b      	lsls	r3, r3, #1
 801191c:	4413      	add	r3, r2
 801191e:	00db      	lsls	r3, r3, #3
 8011920:	440b      	add	r3, r1
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d01a      	beq.n	801195e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011928:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801192c:	497a      	ldr	r1, [pc, #488]	; (8011b18 <etharp_find_entry+0x2d4>)
 801192e:	4613      	mov	r3, r2
 8011930:	005b      	lsls	r3, r3, #1
 8011932:	4413      	add	r3, r2
 8011934:	00db      	lsls	r3, r3, #3
 8011936:	440b      	add	r3, r1
 8011938:	3312      	adds	r3, #18
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	8bba      	ldrh	r2, [r7, #28]
 801193e:	429a      	cmp	r2, r3
 8011940:	d845      	bhi.n	80119ce <etharp_find_entry+0x18a>
            old_queue = i;
 8011942:	8c3b      	ldrh	r3, [r7, #32]
 8011944:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011946:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801194a:	4973      	ldr	r1, [pc, #460]	; (8011b18 <etharp_find_entry+0x2d4>)
 801194c:	4613      	mov	r3, r2
 801194e:	005b      	lsls	r3, r3, #1
 8011950:	4413      	add	r3, r2
 8011952:	00db      	lsls	r3, r3, #3
 8011954:	440b      	add	r3, r1
 8011956:	3312      	adds	r3, #18
 8011958:	881b      	ldrh	r3, [r3, #0]
 801195a:	83bb      	strh	r3, [r7, #28]
 801195c:	e037      	b.n	80119ce <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801195e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011962:	496d      	ldr	r1, [pc, #436]	; (8011b18 <etharp_find_entry+0x2d4>)
 8011964:	4613      	mov	r3, r2
 8011966:	005b      	lsls	r3, r3, #1
 8011968:	4413      	add	r3, r2
 801196a:	00db      	lsls	r3, r3, #3
 801196c:	440b      	add	r3, r1
 801196e:	3312      	adds	r3, #18
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	8b7a      	ldrh	r2, [r7, #26]
 8011974:	429a      	cmp	r2, r3
 8011976:	d82a      	bhi.n	80119ce <etharp_find_entry+0x18a>
            old_pending = i;
 8011978:	8c3b      	ldrh	r3, [r7, #32]
 801197a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801197c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011980:	4965      	ldr	r1, [pc, #404]	; (8011b18 <etharp_find_entry+0x2d4>)
 8011982:	4613      	mov	r3, r2
 8011984:	005b      	lsls	r3, r3, #1
 8011986:	4413      	add	r3, r2
 8011988:	00db      	lsls	r3, r3, #3
 801198a:	440b      	add	r3, r1
 801198c:	3312      	adds	r3, #18
 801198e:	881b      	ldrh	r3, [r3, #0]
 8011990:	837b      	strh	r3, [r7, #26]
 8011992:	e01c      	b.n	80119ce <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011994:	7dfb      	ldrb	r3, [r7, #23]
 8011996:	2b01      	cmp	r3, #1
 8011998:	d919      	bls.n	80119ce <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801199a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801199e:	495e      	ldr	r1, [pc, #376]	; (8011b18 <etharp_find_entry+0x2d4>)
 80119a0:	4613      	mov	r3, r2
 80119a2:	005b      	lsls	r3, r3, #1
 80119a4:	4413      	add	r3, r2
 80119a6:	00db      	lsls	r3, r3, #3
 80119a8:	440b      	add	r3, r1
 80119aa:	3312      	adds	r3, #18
 80119ac:	881b      	ldrh	r3, [r3, #0]
 80119ae:	8b3a      	ldrh	r2, [r7, #24]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d80c      	bhi.n	80119ce <etharp_find_entry+0x18a>
            old_stable = i;
 80119b4:	8c3b      	ldrh	r3, [r7, #32]
 80119b6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80119b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119bc:	4956      	ldr	r1, [pc, #344]	; (8011b18 <etharp_find_entry+0x2d4>)
 80119be:	4613      	mov	r3, r2
 80119c0:	005b      	lsls	r3, r3, #1
 80119c2:	4413      	add	r3, r2
 80119c4:	00db      	lsls	r3, r3, #3
 80119c6:	440b      	add	r3, r1
 80119c8:	3312      	adds	r3, #18
 80119ca:	881b      	ldrh	r3, [r3, #0]
 80119cc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80119ce:	8c3b      	ldrh	r3, [r7, #32]
 80119d0:	3301      	adds	r3, #1
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	843b      	strh	r3, [r7, #32]
 80119d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80119da:	2b09      	cmp	r3, #9
 80119dc:	f77f af4c 	ble.w	8011878 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80119e0:	7afb      	ldrb	r3, [r7, #11]
 80119e2:	f003 0302 	and.w	r3, r3, #2
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d108      	bne.n	80119fc <etharp_find_entry+0x1b8>
 80119ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80119ee:	2b0a      	cmp	r3, #10
 80119f0:	d107      	bne.n	8011a02 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80119f2:	7afb      	ldrb	r3, [r7, #11]
 80119f4:	f003 0301 	and.w	r3, r3, #1
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d102      	bne.n	8011a02 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80119fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011a00:	e085      	b.n	8011b0e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011a02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011a06:	2b09      	cmp	r3, #9
 8011a08:	dc02      	bgt.n	8011a10 <etharp_find_entry+0x1cc>
    i = empty;
 8011a0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a0c:	843b      	strh	r3, [r7, #32]
 8011a0e:	e039      	b.n	8011a84 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011a10:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011a14:	2b09      	cmp	r3, #9
 8011a16:	dc14      	bgt.n	8011a42 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a1a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011a1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a20:	493d      	ldr	r1, [pc, #244]	; (8011b18 <etharp_find_entry+0x2d4>)
 8011a22:	4613      	mov	r3, r2
 8011a24:	005b      	lsls	r3, r3, #1
 8011a26:	4413      	add	r3, r2
 8011a28:	00db      	lsls	r3, r3, #3
 8011a2a:	440b      	add	r3, r1
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d018      	beq.n	8011a64 <etharp_find_entry+0x220>
 8011a32:	4b3a      	ldr	r3, [pc, #232]	; (8011b1c <etharp_find_entry+0x2d8>)
 8011a34:	f240 126d 	movw	r2, #365	; 0x16d
 8011a38:	493b      	ldr	r1, [pc, #236]	; (8011b28 <etharp_find_entry+0x2e4>)
 8011a3a:	483a      	ldr	r0, [pc, #232]	; (8011b24 <etharp_find_entry+0x2e0>)
 8011a3c:	f003 f80a 	bl	8014a54 <iprintf>
 8011a40:	e010      	b.n	8011a64 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011a42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011a46:	2b09      	cmp	r3, #9
 8011a48:	dc02      	bgt.n	8011a50 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011a4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a4c:	843b      	strh	r3, [r7, #32]
 8011a4e:	e009      	b.n	8011a64 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011a50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011a54:	2b09      	cmp	r3, #9
 8011a56:	dc02      	bgt.n	8011a5e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011a58:	8bfb      	ldrh	r3, [r7, #30]
 8011a5a:	843b      	strh	r3, [r7, #32]
 8011a5c:	e002      	b.n	8011a64 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a62:	e054      	b.n	8011b0e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011a64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a68:	2b09      	cmp	r3, #9
 8011a6a:	dd06      	ble.n	8011a7a <etharp_find_entry+0x236>
 8011a6c:	4b2b      	ldr	r3, [pc, #172]	; (8011b1c <etharp_find_entry+0x2d8>)
 8011a6e:	f240 127f 	movw	r2, #383	; 0x17f
 8011a72:	492e      	ldr	r1, [pc, #184]	; (8011b2c <etharp_find_entry+0x2e8>)
 8011a74:	482b      	ldr	r0, [pc, #172]	; (8011b24 <etharp_find_entry+0x2e0>)
 8011a76:	f002 ffed 	bl	8014a54 <iprintf>
    etharp_free_entry(i);
 8011a7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7ff fe06 	bl	8011690 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011a84:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a88:	2b09      	cmp	r3, #9
 8011a8a:	dd06      	ble.n	8011a9a <etharp_find_entry+0x256>
 8011a8c:	4b23      	ldr	r3, [pc, #140]	; (8011b1c <etharp_find_entry+0x2d8>)
 8011a8e:	f240 1283 	movw	r2, #387	; 0x183
 8011a92:	4926      	ldr	r1, [pc, #152]	; (8011b2c <etharp_find_entry+0x2e8>)
 8011a94:	4823      	ldr	r0, [pc, #140]	; (8011b24 <etharp_find_entry+0x2e0>)
 8011a96:	f002 ffdd 	bl	8014a54 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011a9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a9e:	491e      	ldr	r1, [pc, #120]	; (8011b18 <etharp_find_entry+0x2d4>)
 8011aa0:	4613      	mov	r3, r2
 8011aa2:	005b      	lsls	r3, r3, #1
 8011aa4:	4413      	add	r3, r2
 8011aa6:	00db      	lsls	r3, r3, #3
 8011aa8:	440b      	add	r3, r1
 8011aaa:	3314      	adds	r3, #20
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d006      	beq.n	8011ac0 <etharp_find_entry+0x27c>
 8011ab2:	4b1a      	ldr	r3, [pc, #104]	; (8011b1c <etharp_find_entry+0x2d8>)
 8011ab4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011ab8:	491d      	ldr	r1, [pc, #116]	; (8011b30 <etharp_find_entry+0x2ec>)
 8011aba:	481a      	ldr	r0, [pc, #104]	; (8011b24 <etharp_find_entry+0x2e0>)
 8011abc:	f002 ffca 	bl	8014a54 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d00b      	beq.n	8011ade <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011ac6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	6819      	ldr	r1, [r3, #0]
 8011ace:	4812      	ldr	r0, [pc, #72]	; (8011b18 <etharp_find_entry+0x2d4>)
 8011ad0:	4613      	mov	r3, r2
 8011ad2:	005b      	lsls	r3, r3, #1
 8011ad4:	4413      	add	r3, r2
 8011ad6:	00db      	lsls	r3, r3, #3
 8011ad8:	4403      	add	r3, r0
 8011ada:	3304      	adds	r3, #4
 8011adc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011ade:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ae2:	490d      	ldr	r1, [pc, #52]	; (8011b18 <etharp_find_entry+0x2d4>)
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	005b      	lsls	r3, r3, #1
 8011ae8:	4413      	add	r3, r2
 8011aea:	00db      	lsls	r3, r3, #3
 8011aec:	440b      	add	r3, r1
 8011aee:	3312      	adds	r3, #18
 8011af0:	2200      	movs	r2, #0
 8011af2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011af4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011af8:	4907      	ldr	r1, [pc, #28]	; (8011b18 <etharp_find_entry+0x2d4>)
 8011afa:	4613      	mov	r3, r2
 8011afc:	005b      	lsls	r3, r3, #1
 8011afe:	4413      	add	r3, r2
 8011b00:	00db      	lsls	r3, r3, #3
 8011b02:	440b      	add	r3, r1
 8011b04:	3308      	adds	r3, #8
 8011b06:	687a      	ldr	r2, [r7, #4]
 8011b08:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011b0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3728      	adds	r7, #40	; 0x28
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
 8011b16:	bf00      	nop
 8011b18:	20010770 	.word	0x20010770
 8011b1c:	08017a14 	.word	0x08017a14
 8011b20:	08017a4c 	.word	0x08017a4c
 8011b24:	08017a8c 	.word	0x08017a8c
 8011b28:	08017ab4 	.word	0x08017ab4
 8011b2c:	08017acc 	.word	0x08017acc
 8011b30:	08017ae0 	.word	0x08017ae0

08011b34 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b088      	sub	sp, #32
 8011b38:	af02      	add	r7, sp, #8
 8011b3a:	60f8      	str	r0, [r7, #12]
 8011b3c:	60b9      	str	r1, [r7, #8]
 8011b3e:	607a      	str	r2, [r7, #4]
 8011b40:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b48:	2b06      	cmp	r3, #6
 8011b4a:	d006      	beq.n	8011b5a <etharp_update_arp_entry+0x26>
 8011b4c:	4b48      	ldr	r3, [pc, #288]	; (8011c70 <etharp_update_arp_entry+0x13c>)
 8011b4e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011b52:	4948      	ldr	r1, [pc, #288]	; (8011c74 <etharp_update_arp_entry+0x140>)
 8011b54:	4848      	ldr	r0, [pc, #288]	; (8011c78 <etharp_update_arp_entry+0x144>)
 8011b56:	f002 ff7d 	bl	8014a54 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d012      	beq.n	8011b86 <etharp_update_arp_entry+0x52>
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d00e      	beq.n	8011b86 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	68f9      	ldr	r1, [r7, #12]
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f001 f920 	bl	8012db4 <ip4_addr_isbroadcast_u32>
 8011b74:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d105      	bne.n	8011b86 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011b82:	2be0      	cmp	r3, #224	; 0xe0
 8011b84:	d102      	bne.n	8011b8c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011b86:	f06f 030f 	mvn.w	r3, #15
 8011b8a:	e06c      	b.n	8011c66 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011b8c:	78fb      	ldrb	r3, [r7, #3]
 8011b8e:	68fa      	ldr	r2, [r7, #12]
 8011b90:	4619      	mov	r1, r3
 8011b92:	68b8      	ldr	r0, [r7, #8]
 8011b94:	f7ff fe56 	bl	8011844 <etharp_find_entry>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011b9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	da02      	bge.n	8011baa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011ba4:	8afb      	ldrh	r3, [r7, #22]
 8011ba6:	b25b      	sxtb	r3, r3
 8011ba8:	e05d      	b.n	8011c66 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011baa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011bae:	4933      	ldr	r1, [pc, #204]	; (8011c7c <etharp_update_arp_entry+0x148>)
 8011bb0:	4613      	mov	r3, r2
 8011bb2:	005b      	lsls	r3, r3, #1
 8011bb4:	4413      	add	r3, r2
 8011bb6:	00db      	lsls	r3, r3, #3
 8011bb8:	440b      	add	r3, r1
 8011bba:	3314      	adds	r3, #20
 8011bbc:	2202      	movs	r2, #2
 8011bbe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011bc0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011bc4:	492d      	ldr	r1, [pc, #180]	; (8011c7c <etharp_update_arp_entry+0x148>)
 8011bc6:	4613      	mov	r3, r2
 8011bc8:	005b      	lsls	r3, r3, #1
 8011bca:	4413      	add	r3, r2
 8011bcc:	00db      	lsls	r3, r3, #3
 8011bce:	440b      	add	r3, r1
 8011bd0:	3308      	adds	r3, #8
 8011bd2:	68fa      	ldr	r2, [r7, #12]
 8011bd4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011bd6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011bda:	4613      	mov	r3, r2
 8011bdc:	005b      	lsls	r3, r3, #1
 8011bde:	4413      	add	r3, r2
 8011be0:	00db      	lsls	r3, r3, #3
 8011be2:	3308      	adds	r3, #8
 8011be4:	4a25      	ldr	r2, [pc, #148]	; (8011c7c <etharp_update_arp_entry+0x148>)
 8011be6:	4413      	add	r3, r2
 8011be8:	3304      	adds	r3, #4
 8011bea:	2206      	movs	r2, #6
 8011bec:	6879      	ldr	r1, [r7, #4]
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f002 fb82 	bl	80142f8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011bf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011bf8:	4920      	ldr	r1, [pc, #128]	; (8011c7c <etharp_update_arp_entry+0x148>)
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	005b      	lsls	r3, r3, #1
 8011bfe:	4413      	add	r3, r2
 8011c00:	00db      	lsls	r3, r3, #3
 8011c02:	440b      	add	r3, r1
 8011c04:	3312      	adds	r3, #18
 8011c06:	2200      	movs	r2, #0
 8011c08:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011c0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c0e:	491b      	ldr	r1, [pc, #108]	; (8011c7c <etharp_update_arp_entry+0x148>)
 8011c10:	4613      	mov	r3, r2
 8011c12:	005b      	lsls	r3, r3, #1
 8011c14:	4413      	add	r3, r2
 8011c16:	00db      	lsls	r3, r3, #3
 8011c18:	440b      	add	r3, r1
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d021      	beq.n	8011c64 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011c20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c24:	4915      	ldr	r1, [pc, #84]	; (8011c7c <etharp_update_arp_entry+0x148>)
 8011c26:	4613      	mov	r3, r2
 8011c28:	005b      	lsls	r3, r3, #1
 8011c2a:	4413      	add	r3, r2
 8011c2c:	00db      	lsls	r3, r3, #3
 8011c2e:	440b      	add	r3, r1
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011c34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c38:	4910      	ldr	r1, [pc, #64]	; (8011c7c <etharp_update_arp_entry+0x148>)
 8011c3a:	4613      	mov	r3, r2
 8011c3c:	005b      	lsls	r3, r3, #1
 8011c3e:	4413      	add	r3, r2
 8011c40:	00db      	lsls	r3, r3, #3
 8011c42:	440b      	add	r3, r1
 8011c44:	2200      	movs	r2, #0
 8011c46:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011c4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011c52:	9300      	str	r3, [sp, #0]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6939      	ldr	r1, [r7, #16]
 8011c58:	68f8      	ldr	r0, [r7, #12]
 8011c5a:	f001 ffb3 	bl	8013bc4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011c5e:	6938      	ldr	r0, [r7, #16]
 8011c60:	f7f7 fc4c 	bl	80094fc <pbuf_free>
  }
  return ERR_OK;
 8011c64:	2300      	movs	r3, #0
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3718      	adds	r7, #24
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	08017a14 	.word	0x08017a14
 8011c74:	08017b0c 	.word	0x08017b0c
 8011c78:	08017a8c 	.word	0x08017a8c
 8011c7c:	20010770 	.word	0x20010770

08011c80 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c88:	2300      	movs	r3, #0
 8011c8a:	60fb      	str	r3, [r7, #12]
 8011c8c:	e01e      	b.n	8011ccc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011c8e:	4913      	ldr	r1, [pc, #76]	; (8011cdc <etharp_cleanup_netif+0x5c>)
 8011c90:	68fa      	ldr	r2, [r7, #12]
 8011c92:	4613      	mov	r3, r2
 8011c94:	005b      	lsls	r3, r3, #1
 8011c96:	4413      	add	r3, r2
 8011c98:	00db      	lsls	r3, r3, #3
 8011c9a:	440b      	add	r3, r1
 8011c9c:	3314      	adds	r3, #20
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011ca2:	7afb      	ldrb	r3, [r7, #11]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d00e      	beq.n	8011cc6 <etharp_cleanup_netif+0x46>
 8011ca8:	490c      	ldr	r1, [pc, #48]	; (8011cdc <etharp_cleanup_netif+0x5c>)
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	4613      	mov	r3, r2
 8011cae:	005b      	lsls	r3, r3, #1
 8011cb0:	4413      	add	r3, r2
 8011cb2:	00db      	lsls	r3, r3, #3
 8011cb4:	440b      	add	r3, r1
 8011cb6:	3308      	adds	r3, #8
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d102      	bne.n	8011cc6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011cc0:	68f8      	ldr	r0, [r7, #12]
 8011cc2:	f7ff fce5 	bl	8011690 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	3301      	adds	r3, #1
 8011cca:	60fb      	str	r3, [r7, #12]
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	2b09      	cmp	r3, #9
 8011cd0:	dddd      	ble.n	8011c8e <etharp_cleanup_netif+0xe>
    }
  }
}
 8011cd2:	bf00      	nop
 8011cd4:	bf00      	nop
 8011cd6:	3710      	adds	r7, #16
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	20010770 	.word	0x20010770

08011ce0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011ce0:	b5b0      	push	{r4, r5, r7, lr}
 8011ce2:	b08a      	sub	sp, #40	; 0x28
 8011ce4:	af04      	add	r7, sp, #16
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d107      	bne.n	8011d00 <etharp_input+0x20>
 8011cf0:	4b3f      	ldr	r3, [pc, #252]	; (8011df0 <etharp_input+0x110>)
 8011cf2:	f240 228a 	movw	r2, #650	; 0x28a
 8011cf6:	493f      	ldr	r1, [pc, #252]	; (8011df4 <etharp_input+0x114>)
 8011cf8:	483f      	ldr	r0, [pc, #252]	; (8011df8 <etharp_input+0x118>)
 8011cfa:	f002 feab 	bl	8014a54 <iprintf>
 8011cfe:	e074      	b.n	8011dea <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	881b      	ldrh	r3, [r3, #0]
 8011d0a:	b29b      	uxth	r3, r3
 8011d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d10:	d10c      	bne.n	8011d2c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011d16:	2b06      	cmp	r3, #6
 8011d18:	d108      	bne.n	8011d2c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011d1e:	2b04      	cmp	r3, #4
 8011d20:	d104      	bne.n	8011d2c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	885b      	ldrh	r3, [r3, #2]
 8011d26:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011d28:	2b08      	cmp	r3, #8
 8011d2a:	d003      	beq.n	8011d34 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f7f7 fbe5 	bl	80094fc <pbuf_free>
    return;
 8011d32:	e05a      	b.n	8011dea <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	330e      	adds	r3, #14
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	3318      	adds	r3, #24
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	3304      	adds	r3, #4
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d102      	bne.n	8011d54 <etharp_input+0x74>
    for_us = 0;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	75fb      	strb	r3, [r7, #23]
 8011d52:	e009      	b.n	8011d68 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011d54:	68ba      	ldr	r2, [r7, #8]
 8011d56:	683b      	ldr	r3, [r7, #0]
 8011d58:	3304      	adds	r3, #4
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	bf0c      	ite	eq
 8011d60:	2301      	moveq	r3, #1
 8011d62:	2300      	movne	r3, #0
 8011d64:	b2db      	uxtb	r3, r3
 8011d66:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	f103 0208 	add.w	r2, r3, #8
 8011d6e:	7dfb      	ldrb	r3, [r7, #23]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d001      	beq.n	8011d78 <etharp_input+0x98>
 8011d74:	2301      	movs	r3, #1
 8011d76:	e000      	b.n	8011d7a <etharp_input+0x9a>
 8011d78:	2302      	movs	r3, #2
 8011d7a:	f107 010c 	add.w	r1, r7, #12
 8011d7e:	6838      	ldr	r0, [r7, #0]
 8011d80:	f7ff fed8 	bl	8011b34 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011d84:	693b      	ldr	r3, [r7, #16]
 8011d86:	88db      	ldrh	r3, [r3, #6]
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d8e:	d003      	beq.n	8011d98 <etharp_input+0xb8>
 8011d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d94:	d01e      	beq.n	8011dd4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011d96:	e025      	b.n	8011de4 <etharp_input+0x104>
      if (for_us) {
 8011d98:	7dfb      	ldrb	r3, [r7, #23]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d021      	beq.n	8011de2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011db4:	693a      	ldr	r2, [r7, #16]
 8011db6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011db8:	2102      	movs	r1, #2
 8011dba:	9103      	str	r1, [sp, #12]
 8011dbc:	f107 010c 	add.w	r1, r7, #12
 8011dc0:	9102      	str	r1, [sp, #8]
 8011dc2:	9201      	str	r2, [sp, #4]
 8011dc4:	9300      	str	r3, [sp, #0]
 8011dc6:	462b      	mov	r3, r5
 8011dc8:	4622      	mov	r2, r4
 8011dca:	4601      	mov	r1, r0
 8011dcc:	6838      	ldr	r0, [r7, #0]
 8011dce:	f000 faef 	bl	80123b0 <etharp_raw>
      break;
 8011dd2:	e006      	b.n	8011de2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011dd4:	f107 030c 	add.w	r3, r7, #12
 8011dd8:	4619      	mov	r1, r3
 8011dda:	6838      	ldr	r0, [r7, #0]
 8011ddc:	f7fe f9fc 	bl	80101d8 <dhcp_arp_reply>
      break;
 8011de0:	e000      	b.n	8011de4 <etharp_input+0x104>
      break;
 8011de2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7f7 fb89 	bl	80094fc <pbuf_free>
}
 8011dea:	3718      	adds	r7, #24
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bdb0      	pop	{r4, r5, r7, pc}
 8011df0:	08017a14 	.word	0x08017a14
 8011df4:	08017b64 	.word	0x08017b64
 8011df8:	08017a8c 	.word	0x08017a8c

08011dfc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b086      	sub	sp, #24
 8011e00:	af02      	add	r7, sp, #8
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	4613      	mov	r3, r2
 8011e08:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011e0a:	79fa      	ldrb	r2, [r7, #7]
 8011e0c:	4944      	ldr	r1, [pc, #272]	; (8011f20 <etharp_output_to_arp_index+0x124>)
 8011e0e:	4613      	mov	r3, r2
 8011e10:	005b      	lsls	r3, r3, #1
 8011e12:	4413      	add	r3, r2
 8011e14:	00db      	lsls	r3, r3, #3
 8011e16:	440b      	add	r3, r1
 8011e18:	3314      	adds	r3, #20
 8011e1a:	781b      	ldrb	r3, [r3, #0]
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d806      	bhi.n	8011e2e <etharp_output_to_arp_index+0x32>
 8011e20:	4b40      	ldr	r3, [pc, #256]	; (8011f24 <etharp_output_to_arp_index+0x128>)
 8011e22:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011e26:	4940      	ldr	r1, [pc, #256]	; (8011f28 <etharp_output_to_arp_index+0x12c>)
 8011e28:	4840      	ldr	r0, [pc, #256]	; (8011f2c <etharp_output_to_arp_index+0x130>)
 8011e2a:	f002 fe13 	bl	8014a54 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011e2e:	79fa      	ldrb	r2, [r7, #7]
 8011e30:	493b      	ldr	r1, [pc, #236]	; (8011f20 <etharp_output_to_arp_index+0x124>)
 8011e32:	4613      	mov	r3, r2
 8011e34:	005b      	lsls	r3, r3, #1
 8011e36:	4413      	add	r3, r2
 8011e38:	00db      	lsls	r3, r3, #3
 8011e3a:	440b      	add	r3, r1
 8011e3c:	3314      	adds	r3, #20
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	2b02      	cmp	r3, #2
 8011e42:	d153      	bne.n	8011eec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011e44:	79fa      	ldrb	r2, [r7, #7]
 8011e46:	4936      	ldr	r1, [pc, #216]	; (8011f20 <etharp_output_to_arp_index+0x124>)
 8011e48:	4613      	mov	r3, r2
 8011e4a:	005b      	lsls	r3, r3, #1
 8011e4c:	4413      	add	r3, r2
 8011e4e:	00db      	lsls	r3, r3, #3
 8011e50:	440b      	add	r3, r1
 8011e52:	3312      	adds	r3, #18
 8011e54:	881b      	ldrh	r3, [r3, #0]
 8011e56:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011e5a:	d919      	bls.n	8011e90 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011e5c:	79fa      	ldrb	r2, [r7, #7]
 8011e5e:	4613      	mov	r3, r2
 8011e60:	005b      	lsls	r3, r3, #1
 8011e62:	4413      	add	r3, r2
 8011e64:	00db      	lsls	r3, r3, #3
 8011e66:	4a2e      	ldr	r2, [pc, #184]	; (8011f20 <etharp_output_to_arp_index+0x124>)
 8011e68:	4413      	add	r3, r2
 8011e6a:	3304      	adds	r3, #4
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	68f8      	ldr	r0, [r7, #12]
 8011e70:	f000 fb4c 	bl	801250c <etharp_request>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d138      	bne.n	8011eec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011e7a:	79fa      	ldrb	r2, [r7, #7]
 8011e7c:	4928      	ldr	r1, [pc, #160]	; (8011f20 <etharp_output_to_arp_index+0x124>)
 8011e7e:	4613      	mov	r3, r2
 8011e80:	005b      	lsls	r3, r3, #1
 8011e82:	4413      	add	r3, r2
 8011e84:	00db      	lsls	r3, r3, #3
 8011e86:	440b      	add	r3, r1
 8011e88:	3314      	adds	r3, #20
 8011e8a:	2203      	movs	r2, #3
 8011e8c:	701a      	strb	r2, [r3, #0]
 8011e8e:	e02d      	b.n	8011eec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011e90:	79fa      	ldrb	r2, [r7, #7]
 8011e92:	4923      	ldr	r1, [pc, #140]	; (8011f20 <etharp_output_to_arp_index+0x124>)
 8011e94:	4613      	mov	r3, r2
 8011e96:	005b      	lsls	r3, r3, #1
 8011e98:	4413      	add	r3, r2
 8011e9a:	00db      	lsls	r3, r3, #3
 8011e9c:	440b      	add	r3, r1
 8011e9e:	3312      	adds	r3, #18
 8011ea0:	881b      	ldrh	r3, [r3, #0]
 8011ea2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011ea6:	d321      	bcc.n	8011eec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011ea8:	79fa      	ldrb	r2, [r7, #7]
 8011eaa:	4613      	mov	r3, r2
 8011eac:	005b      	lsls	r3, r3, #1
 8011eae:	4413      	add	r3, r2
 8011eb0:	00db      	lsls	r3, r3, #3
 8011eb2:	4a1b      	ldr	r2, [pc, #108]	; (8011f20 <etharp_output_to_arp_index+0x124>)
 8011eb4:	4413      	add	r3, r2
 8011eb6:	1d19      	adds	r1, r3, #4
 8011eb8:	79fa      	ldrb	r2, [r7, #7]
 8011eba:	4613      	mov	r3, r2
 8011ebc:	005b      	lsls	r3, r3, #1
 8011ebe:	4413      	add	r3, r2
 8011ec0:	00db      	lsls	r3, r3, #3
 8011ec2:	3308      	adds	r3, #8
 8011ec4:	4a16      	ldr	r2, [pc, #88]	; (8011f20 <etharp_output_to_arp_index+0x124>)
 8011ec6:	4413      	add	r3, r2
 8011ec8:	3304      	adds	r3, #4
 8011eca:	461a      	mov	r2, r3
 8011ecc:	68f8      	ldr	r0, [r7, #12]
 8011ece:	f000 fafb 	bl	80124c8 <etharp_request_dst>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d109      	bne.n	8011eec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011ed8:	79fa      	ldrb	r2, [r7, #7]
 8011eda:	4911      	ldr	r1, [pc, #68]	; (8011f20 <etharp_output_to_arp_index+0x124>)
 8011edc:	4613      	mov	r3, r2
 8011ede:	005b      	lsls	r3, r3, #1
 8011ee0:	4413      	add	r3, r2
 8011ee2:	00db      	lsls	r3, r3, #3
 8011ee4:	440b      	add	r3, r1
 8011ee6:	3314      	adds	r3, #20
 8011ee8:	2203      	movs	r2, #3
 8011eea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011ef2:	79fa      	ldrb	r2, [r7, #7]
 8011ef4:	4613      	mov	r3, r2
 8011ef6:	005b      	lsls	r3, r3, #1
 8011ef8:	4413      	add	r3, r2
 8011efa:	00db      	lsls	r3, r3, #3
 8011efc:	3308      	adds	r3, #8
 8011efe:	4a08      	ldr	r2, [pc, #32]	; (8011f20 <etharp_output_to_arp_index+0x124>)
 8011f00:	4413      	add	r3, r2
 8011f02:	3304      	adds	r3, #4
 8011f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011f08:	9200      	str	r2, [sp, #0]
 8011f0a:	460a      	mov	r2, r1
 8011f0c:	68b9      	ldr	r1, [r7, #8]
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	f001 fe58 	bl	8013bc4 <ethernet_output>
 8011f14:	4603      	mov	r3, r0
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3710      	adds	r7, #16
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	20010770 	.word	0x20010770
 8011f24:	08017a14 	.word	0x08017a14
 8011f28:	08017b84 	.word	0x08017b84
 8011f2c:	08017a8c 	.word	0x08017a8c

08011f30 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b08a      	sub	sp, #40	; 0x28
 8011f34:	af02      	add	r7, sp, #8
 8011f36:	60f8      	str	r0, [r7, #12]
 8011f38:	60b9      	str	r1, [r7, #8]
 8011f3a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d106      	bne.n	8011f54 <etharp_output+0x24>
 8011f46:	4b73      	ldr	r3, [pc, #460]	; (8012114 <etharp_output+0x1e4>)
 8011f48:	f240 321e 	movw	r2, #798	; 0x31e
 8011f4c:	4972      	ldr	r1, [pc, #456]	; (8012118 <etharp_output+0x1e8>)
 8011f4e:	4873      	ldr	r0, [pc, #460]	; (801211c <etharp_output+0x1ec>)
 8011f50:	f002 fd80 	bl	8014a54 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d106      	bne.n	8011f68 <etharp_output+0x38>
 8011f5a:	4b6e      	ldr	r3, [pc, #440]	; (8012114 <etharp_output+0x1e4>)
 8011f5c:	f240 321f 	movw	r2, #799	; 0x31f
 8011f60:	496f      	ldr	r1, [pc, #444]	; (8012120 <etharp_output+0x1f0>)
 8011f62:	486e      	ldr	r0, [pc, #440]	; (801211c <etharp_output+0x1ec>)
 8011f64:	f002 fd76 	bl	8014a54 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d106      	bne.n	8011f7c <etharp_output+0x4c>
 8011f6e:	4b69      	ldr	r3, [pc, #420]	; (8012114 <etharp_output+0x1e4>)
 8011f70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011f74:	496b      	ldr	r1, [pc, #428]	; (8012124 <etharp_output+0x1f4>)
 8011f76:	4869      	ldr	r0, [pc, #420]	; (801211c <etharp_output+0x1ec>)
 8011f78:	f002 fd6c 	bl	8014a54 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	68f9      	ldr	r1, [r7, #12]
 8011f82:	4618      	mov	r0, r3
 8011f84:	f000 ff16 	bl	8012db4 <ip4_addr_isbroadcast_u32>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d002      	beq.n	8011f94 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011f8e:	4b66      	ldr	r3, [pc, #408]	; (8012128 <etharp_output+0x1f8>)
 8011f90:	61fb      	str	r3, [r7, #28]
 8011f92:	e0af      	b.n	80120f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f9c:	2be0      	cmp	r3, #224	; 0xe0
 8011f9e:	d118      	bne.n	8011fd2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011fa8:	235e      	movs	r3, #94	; 0x5e
 8011faa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	3301      	adds	r3, #1
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fb6:	b2db      	uxtb	r3, r3
 8011fb8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	3302      	adds	r3, #2
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	3303      	adds	r3, #3
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011fca:	f107 0310 	add.w	r3, r7, #16
 8011fce:	61fb      	str	r3, [r7, #28]
 8011fd0:	e090      	b.n	80120f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681a      	ldr	r2, [r3, #0]
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	3304      	adds	r3, #4
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	405a      	eors	r2, r3
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	3308      	adds	r3, #8
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	4013      	ands	r3, r2
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d012      	beq.n	8012010 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011ff0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	d00b      	beq.n	8012010 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	330c      	adds	r3, #12
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d003      	beq.n	801200a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	330c      	adds	r3, #12
 8012006:	61bb      	str	r3, [r7, #24]
 8012008:	e002      	b.n	8012010 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801200a:	f06f 0303 	mvn.w	r3, #3
 801200e:	e07d      	b.n	801210c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012010:	4b46      	ldr	r3, [pc, #280]	; (801212c <etharp_output+0x1fc>)
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	4619      	mov	r1, r3
 8012016:	4a46      	ldr	r2, [pc, #280]	; (8012130 <etharp_output+0x200>)
 8012018:	460b      	mov	r3, r1
 801201a:	005b      	lsls	r3, r3, #1
 801201c:	440b      	add	r3, r1
 801201e:	00db      	lsls	r3, r3, #3
 8012020:	4413      	add	r3, r2
 8012022:	3314      	adds	r3, #20
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	2b01      	cmp	r3, #1
 8012028:	d925      	bls.n	8012076 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801202a:	4b40      	ldr	r3, [pc, #256]	; (801212c <etharp_output+0x1fc>)
 801202c:	781b      	ldrb	r3, [r3, #0]
 801202e:	4619      	mov	r1, r3
 8012030:	4a3f      	ldr	r2, [pc, #252]	; (8012130 <etharp_output+0x200>)
 8012032:	460b      	mov	r3, r1
 8012034:	005b      	lsls	r3, r3, #1
 8012036:	440b      	add	r3, r1
 8012038:	00db      	lsls	r3, r3, #3
 801203a:	4413      	add	r3, r2
 801203c:	3308      	adds	r3, #8
 801203e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012040:	68fa      	ldr	r2, [r7, #12]
 8012042:	429a      	cmp	r2, r3
 8012044:	d117      	bne.n	8012076 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012046:	69bb      	ldr	r3, [r7, #24]
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	4b38      	ldr	r3, [pc, #224]	; (801212c <etharp_output+0x1fc>)
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	4618      	mov	r0, r3
 8012050:	4937      	ldr	r1, [pc, #220]	; (8012130 <etharp_output+0x200>)
 8012052:	4603      	mov	r3, r0
 8012054:	005b      	lsls	r3, r3, #1
 8012056:	4403      	add	r3, r0
 8012058:	00db      	lsls	r3, r3, #3
 801205a:	440b      	add	r3, r1
 801205c:	3304      	adds	r3, #4
 801205e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012060:	429a      	cmp	r2, r3
 8012062:	d108      	bne.n	8012076 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012064:	4b31      	ldr	r3, [pc, #196]	; (801212c <etharp_output+0x1fc>)
 8012066:	781b      	ldrb	r3, [r3, #0]
 8012068:	461a      	mov	r2, r3
 801206a:	68b9      	ldr	r1, [r7, #8]
 801206c:	68f8      	ldr	r0, [r7, #12]
 801206e:	f7ff fec5 	bl	8011dfc <etharp_output_to_arp_index>
 8012072:	4603      	mov	r3, r0
 8012074:	e04a      	b.n	801210c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012076:	2300      	movs	r3, #0
 8012078:	75fb      	strb	r3, [r7, #23]
 801207a:	e031      	b.n	80120e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801207c:	7dfa      	ldrb	r2, [r7, #23]
 801207e:	492c      	ldr	r1, [pc, #176]	; (8012130 <etharp_output+0x200>)
 8012080:	4613      	mov	r3, r2
 8012082:	005b      	lsls	r3, r3, #1
 8012084:	4413      	add	r3, r2
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	440b      	add	r3, r1
 801208a:	3314      	adds	r3, #20
 801208c:	781b      	ldrb	r3, [r3, #0]
 801208e:	2b01      	cmp	r3, #1
 8012090:	d923      	bls.n	80120da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012092:	7dfa      	ldrb	r2, [r7, #23]
 8012094:	4926      	ldr	r1, [pc, #152]	; (8012130 <etharp_output+0x200>)
 8012096:	4613      	mov	r3, r2
 8012098:	005b      	lsls	r3, r3, #1
 801209a:	4413      	add	r3, r2
 801209c:	00db      	lsls	r3, r3, #3
 801209e:	440b      	add	r3, r1
 80120a0:	3308      	adds	r3, #8
 80120a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d117      	bne.n	80120da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80120aa:	69bb      	ldr	r3, [r7, #24]
 80120ac:	6819      	ldr	r1, [r3, #0]
 80120ae:	7dfa      	ldrb	r2, [r7, #23]
 80120b0:	481f      	ldr	r0, [pc, #124]	; (8012130 <etharp_output+0x200>)
 80120b2:	4613      	mov	r3, r2
 80120b4:	005b      	lsls	r3, r3, #1
 80120b6:	4413      	add	r3, r2
 80120b8:	00db      	lsls	r3, r3, #3
 80120ba:	4403      	add	r3, r0
 80120bc:	3304      	adds	r3, #4
 80120be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80120c0:	4299      	cmp	r1, r3
 80120c2:	d10a      	bne.n	80120da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80120c4:	4a19      	ldr	r2, [pc, #100]	; (801212c <etharp_output+0x1fc>)
 80120c6:	7dfb      	ldrb	r3, [r7, #23]
 80120c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80120ca:	7dfb      	ldrb	r3, [r7, #23]
 80120cc:	461a      	mov	r2, r3
 80120ce:	68b9      	ldr	r1, [r7, #8]
 80120d0:	68f8      	ldr	r0, [r7, #12]
 80120d2:	f7ff fe93 	bl	8011dfc <etharp_output_to_arp_index>
 80120d6:	4603      	mov	r3, r0
 80120d8:	e018      	b.n	801210c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80120da:	7dfb      	ldrb	r3, [r7, #23]
 80120dc:	3301      	adds	r3, #1
 80120de:	75fb      	strb	r3, [r7, #23]
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
 80120e2:	2b09      	cmp	r3, #9
 80120e4:	d9ca      	bls.n	801207c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80120e6:	68ba      	ldr	r2, [r7, #8]
 80120e8:	69b9      	ldr	r1, [r7, #24]
 80120ea:	68f8      	ldr	r0, [r7, #12]
 80120ec:	f000 f822 	bl	8012134 <etharp_query>
 80120f0:	4603      	mov	r3, r0
 80120f2:	e00b      	b.n	801210c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80120fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80120fe:	9300      	str	r3, [sp, #0]
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	68b9      	ldr	r1, [r7, #8]
 8012104:	68f8      	ldr	r0, [r7, #12]
 8012106:	f001 fd5d 	bl	8013bc4 <ethernet_output>
 801210a:	4603      	mov	r3, r0
}
 801210c:	4618      	mov	r0, r3
 801210e:	3720      	adds	r7, #32
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}
 8012114:	08017a14 	.word	0x08017a14
 8012118:	08017b64 	.word	0x08017b64
 801211c:	08017a8c 	.word	0x08017a8c
 8012120:	08017bb4 	.word	0x08017bb4
 8012124:	08017b54 	.word	0x08017b54
 8012128:	08018224 	.word	0x08018224
 801212c:	20010860 	.word	0x20010860
 8012130:	20010770 	.word	0x20010770

08012134 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b08c      	sub	sp, #48	; 0x30
 8012138:	af02      	add	r7, sp, #8
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	332a      	adds	r3, #42	; 0x2a
 8012144:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012146:	23ff      	movs	r3, #255	; 0xff
 8012148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801214c:	2300      	movs	r3, #0
 801214e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	68f9      	ldr	r1, [r7, #12]
 8012156:	4618      	mov	r0, r3
 8012158:	f000 fe2c 	bl	8012db4 <ip4_addr_isbroadcast_u32>
 801215c:	4603      	mov	r3, r0
 801215e:	2b00      	cmp	r3, #0
 8012160:	d10c      	bne.n	801217c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801216a:	2be0      	cmp	r3, #224	; 0xe0
 801216c:	d006      	beq.n	801217c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d003      	beq.n	801217c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d102      	bne.n	8012182 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801217c:	f06f 030f 	mvn.w	r3, #15
 8012180:	e101      	b.n	8012386 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012182:	68fa      	ldr	r2, [r7, #12]
 8012184:	2101      	movs	r1, #1
 8012186:	68b8      	ldr	r0, [r7, #8]
 8012188:	f7ff fb5c 	bl	8011844 <etharp_find_entry>
 801218c:	4603      	mov	r3, r0
 801218e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012190:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012194:	2b00      	cmp	r3, #0
 8012196:	da02      	bge.n	801219e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012198:	8a7b      	ldrh	r3, [r7, #18]
 801219a:	b25b      	sxtb	r3, r3
 801219c:	e0f3      	b.n	8012386 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801219e:	8a7b      	ldrh	r3, [r7, #18]
 80121a0:	2b7e      	cmp	r3, #126	; 0x7e
 80121a2:	d906      	bls.n	80121b2 <etharp_query+0x7e>
 80121a4:	4b7a      	ldr	r3, [pc, #488]	; (8012390 <etharp_query+0x25c>)
 80121a6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80121aa:	497a      	ldr	r1, [pc, #488]	; (8012394 <etharp_query+0x260>)
 80121ac:	487a      	ldr	r0, [pc, #488]	; (8012398 <etharp_query+0x264>)
 80121ae:	f002 fc51 	bl	8014a54 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80121b2:	8a7b      	ldrh	r3, [r7, #18]
 80121b4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80121b6:	7c7a      	ldrb	r2, [r7, #17]
 80121b8:	4978      	ldr	r1, [pc, #480]	; (801239c <etharp_query+0x268>)
 80121ba:	4613      	mov	r3, r2
 80121bc:	005b      	lsls	r3, r3, #1
 80121be:	4413      	add	r3, r2
 80121c0:	00db      	lsls	r3, r3, #3
 80121c2:	440b      	add	r3, r1
 80121c4:	3314      	adds	r3, #20
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d115      	bne.n	80121f8 <etharp_query+0xc4>
    is_new_entry = 1;
 80121cc:	2301      	movs	r3, #1
 80121ce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80121d0:	7c7a      	ldrb	r2, [r7, #17]
 80121d2:	4972      	ldr	r1, [pc, #456]	; (801239c <etharp_query+0x268>)
 80121d4:	4613      	mov	r3, r2
 80121d6:	005b      	lsls	r3, r3, #1
 80121d8:	4413      	add	r3, r2
 80121da:	00db      	lsls	r3, r3, #3
 80121dc:	440b      	add	r3, r1
 80121de:	3314      	adds	r3, #20
 80121e0:	2201      	movs	r2, #1
 80121e2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80121e4:	7c7a      	ldrb	r2, [r7, #17]
 80121e6:	496d      	ldr	r1, [pc, #436]	; (801239c <etharp_query+0x268>)
 80121e8:	4613      	mov	r3, r2
 80121ea:	005b      	lsls	r3, r3, #1
 80121ec:	4413      	add	r3, r2
 80121ee:	00db      	lsls	r3, r3, #3
 80121f0:	440b      	add	r3, r1
 80121f2:	3308      	adds	r3, #8
 80121f4:	68fa      	ldr	r2, [r7, #12]
 80121f6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80121f8:	7c7a      	ldrb	r2, [r7, #17]
 80121fa:	4968      	ldr	r1, [pc, #416]	; (801239c <etharp_query+0x268>)
 80121fc:	4613      	mov	r3, r2
 80121fe:	005b      	lsls	r3, r3, #1
 8012200:	4413      	add	r3, r2
 8012202:	00db      	lsls	r3, r3, #3
 8012204:	440b      	add	r3, r1
 8012206:	3314      	adds	r3, #20
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	2b01      	cmp	r3, #1
 801220c:	d011      	beq.n	8012232 <etharp_query+0xfe>
 801220e:	7c7a      	ldrb	r2, [r7, #17]
 8012210:	4962      	ldr	r1, [pc, #392]	; (801239c <etharp_query+0x268>)
 8012212:	4613      	mov	r3, r2
 8012214:	005b      	lsls	r3, r3, #1
 8012216:	4413      	add	r3, r2
 8012218:	00db      	lsls	r3, r3, #3
 801221a:	440b      	add	r3, r1
 801221c:	3314      	adds	r3, #20
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	2b01      	cmp	r3, #1
 8012222:	d806      	bhi.n	8012232 <etharp_query+0xfe>
 8012224:	4b5a      	ldr	r3, [pc, #360]	; (8012390 <etharp_query+0x25c>)
 8012226:	f240 32cd 	movw	r2, #973	; 0x3cd
 801222a:	495d      	ldr	r1, [pc, #372]	; (80123a0 <etharp_query+0x26c>)
 801222c:	485a      	ldr	r0, [pc, #360]	; (8012398 <etharp_query+0x264>)
 801222e:	f002 fc11 	bl	8014a54 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012232:	6a3b      	ldr	r3, [r7, #32]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d102      	bne.n	801223e <etharp_query+0x10a>
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d10c      	bne.n	8012258 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801223e:	68b9      	ldr	r1, [r7, #8]
 8012240:	68f8      	ldr	r0, [r7, #12]
 8012242:	f000 f963 	bl	801250c <etharp_request>
 8012246:	4603      	mov	r3, r0
 8012248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d102      	bne.n	8012258 <etharp_query+0x124>
      return result;
 8012252:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012256:	e096      	b.n	8012386 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d106      	bne.n	801226c <etharp_query+0x138>
 801225e:	4b4c      	ldr	r3, [pc, #304]	; (8012390 <etharp_query+0x25c>)
 8012260:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012264:	494f      	ldr	r1, [pc, #316]	; (80123a4 <etharp_query+0x270>)
 8012266:	484c      	ldr	r0, [pc, #304]	; (8012398 <etharp_query+0x264>)
 8012268:	f002 fbf4 	bl	8014a54 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801226c:	7c7a      	ldrb	r2, [r7, #17]
 801226e:	494b      	ldr	r1, [pc, #300]	; (801239c <etharp_query+0x268>)
 8012270:	4613      	mov	r3, r2
 8012272:	005b      	lsls	r3, r3, #1
 8012274:	4413      	add	r3, r2
 8012276:	00db      	lsls	r3, r3, #3
 8012278:	440b      	add	r3, r1
 801227a:	3314      	adds	r3, #20
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	2b01      	cmp	r3, #1
 8012280:	d917      	bls.n	80122b2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012282:	4a49      	ldr	r2, [pc, #292]	; (80123a8 <etharp_query+0x274>)
 8012284:	7c7b      	ldrb	r3, [r7, #17]
 8012286:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012288:	7c7a      	ldrb	r2, [r7, #17]
 801228a:	4613      	mov	r3, r2
 801228c:	005b      	lsls	r3, r3, #1
 801228e:	4413      	add	r3, r2
 8012290:	00db      	lsls	r3, r3, #3
 8012292:	3308      	adds	r3, #8
 8012294:	4a41      	ldr	r2, [pc, #260]	; (801239c <etharp_query+0x268>)
 8012296:	4413      	add	r3, r2
 8012298:	3304      	adds	r3, #4
 801229a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801229e:	9200      	str	r2, [sp, #0]
 80122a0:	697a      	ldr	r2, [r7, #20]
 80122a2:	6879      	ldr	r1, [r7, #4]
 80122a4:	68f8      	ldr	r0, [r7, #12]
 80122a6:	f001 fc8d 	bl	8013bc4 <ethernet_output>
 80122aa:	4603      	mov	r3, r0
 80122ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80122b0:	e067      	b.n	8012382 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80122b2:	7c7a      	ldrb	r2, [r7, #17]
 80122b4:	4939      	ldr	r1, [pc, #228]	; (801239c <etharp_query+0x268>)
 80122b6:	4613      	mov	r3, r2
 80122b8:	005b      	lsls	r3, r3, #1
 80122ba:	4413      	add	r3, r2
 80122bc:	00db      	lsls	r3, r3, #3
 80122be:	440b      	add	r3, r1
 80122c0:	3314      	adds	r3, #20
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	2b01      	cmp	r3, #1
 80122c6:	d15c      	bne.n	8012382 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80122c8:	2300      	movs	r3, #0
 80122ca:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 80122d0:	e01c      	b.n	801230c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	895a      	ldrh	r2, [r3, #10]
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	891b      	ldrh	r3, [r3, #8]
 80122da:	429a      	cmp	r2, r3
 80122dc:	d10a      	bne.n	80122f4 <etharp_query+0x1c0>
 80122de:	69fb      	ldr	r3, [r7, #28]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d006      	beq.n	80122f4 <etharp_query+0x1c0>
 80122e6:	4b2a      	ldr	r3, [pc, #168]	; (8012390 <etharp_query+0x25c>)
 80122e8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80122ec:	492f      	ldr	r1, [pc, #188]	; (80123ac <etharp_query+0x278>)
 80122ee:	482a      	ldr	r0, [pc, #168]	; (8012398 <etharp_query+0x264>)
 80122f0:	f002 fbb0 	bl	8014a54 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	7b1b      	ldrb	r3, [r3, #12]
 80122f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d002      	beq.n	8012306 <etharp_query+0x1d2>
        copy_needed = 1;
 8012300:	2301      	movs	r3, #1
 8012302:	61bb      	str	r3, [r7, #24]
        break;
 8012304:	e005      	b.n	8012312 <etharp_query+0x1de>
      }
      p = p->next;
 8012306:	69fb      	ldr	r3, [r7, #28]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801230c:	69fb      	ldr	r3, [r7, #28]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d1df      	bne.n	80122d2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012312:	69bb      	ldr	r3, [r7, #24]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d007      	beq.n	8012328 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012318:	687a      	ldr	r2, [r7, #4]
 801231a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801231e:	200e      	movs	r0, #14
 8012320:	f7f7 fb64 	bl	80099ec <pbuf_clone>
 8012324:	61f8      	str	r0, [r7, #28]
 8012326:	e004      	b.n	8012332 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801232c:	69f8      	ldr	r0, [r7, #28]
 801232e:	f7f7 f98b 	bl	8009648 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d021      	beq.n	801237c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012338:	7c7a      	ldrb	r2, [r7, #17]
 801233a:	4918      	ldr	r1, [pc, #96]	; (801239c <etharp_query+0x268>)
 801233c:	4613      	mov	r3, r2
 801233e:	005b      	lsls	r3, r3, #1
 8012340:	4413      	add	r3, r2
 8012342:	00db      	lsls	r3, r3, #3
 8012344:	440b      	add	r3, r1
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d00a      	beq.n	8012362 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801234c:	7c7a      	ldrb	r2, [r7, #17]
 801234e:	4913      	ldr	r1, [pc, #76]	; (801239c <etharp_query+0x268>)
 8012350:	4613      	mov	r3, r2
 8012352:	005b      	lsls	r3, r3, #1
 8012354:	4413      	add	r3, r2
 8012356:	00db      	lsls	r3, r3, #3
 8012358:	440b      	add	r3, r1
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	4618      	mov	r0, r3
 801235e:	f7f7 f8cd 	bl	80094fc <pbuf_free>
      }
      arp_table[i].q = p;
 8012362:	7c7a      	ldrb	r2, [r7, #17]
 8012364:	490d      	ldr	r1, [pc, #52]	; (801239c <etharp_query+0x268>)
 8012366:	4613      	mov	r3, r2
 8012368:	005b      	lsls	r3, r3, #1
 801236a:	4413      	add	r3, r2
 801236c:	00db      	lsls	r3, r3, #3
 801236e:	440b      	add	r3, r1
 8012370:	69fa      	ldr	r2, [r7, #28]
 8012372:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012374:	2300      	movs	r3, #0
 8012376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801237a:	e002      	b.n	8012382 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801237c:	23ff      	movs	r3, #255	; 0xff
 801237e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012382:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012386:	4618      	mov	r0, r3
 8012388:	3728      	adds	r7, #40	; 0x28
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	08017a14 	.word	0x08017a14
 8012394:	08017bc0 	.word	0x08017bc0
 8012398:	08017a8c 	.word	0x08017a8c
 801239c:	20010770 	.word	0x20010770
 80123a0:	08017bd0 	.word	0x08017bd0
 80123a4:	08017bb4 	.word	0x08017bb4
 80123a8:	20010860 	.word	0x20010860
 80123ac:	08017bf8 	.word	0x08017bf8

080123b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b08a      	sub	sp, #40	; 0x28
 80123b4:	af02      	add	r7, sp, #8
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	607a      	str	r2, [r7, #4]
 80123bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80123be:	2300      	movs	r3, #0
 80123c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d106      	bne.n	80123d6 <etharp_raw+0x26>
 80123c8:	4b3a      	ldr	r3, [pc, #232]	; (80124b4 <etharp_raw+0x104>)
 80123ca:	f240 4257 	movw	r2, #1111	; 0x457
 80123ce:	493a      	ldr	r1, [pc, #232]	; (80124b8 <etharp_raw+0x108>)
 80123d0:	483a      	ldr	r0, [pc, #232]	; (80124bc <etharp_raw+0x10c>)
 80123d2:	f002 fb3f 	bl	8014a54 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80123d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80123da:	211c      	movs	r1, #28
 80123dc:	200e      	movs	r0, #14
 80123de:	f7f6 fda9 	bl	8008f34 <pbuf_alloc>
 80123e2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d102      	bne.n	80123f0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80123ea:	f04f 33ff 	mov.w	r3, #4294967295
 80123ee:	e05d      	b.n	80124ac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80123f0:	69bb      	ldr	r3, [r7, #24]
 80123f2:	895b      	ldrh	r3, [r3, #10]
 80123f4:	2b1b      	cmp	r3, #27
 80123f6:	d806      	bhi.n	8012406 <etharp_raw+0x56>
 80123f8:	4b2e      	ldr	r3, [pc, #184]	; (80124b4 <etharp_raw+0x104>)
 80123fa:	f240 4262 	movw	r2, #1122	; 0x462
 80123fe:	4930      	ldr	r1, [pc, #192]	; (80124c0 <etharp_raw+0x110>)
 8012400:	482e      	ldr	r0, [pc, #184]	; (80124bc <etharp_raw+0x10c>)
 8012402:	f002 fb27 	bl	8014a54 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801240c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801240e:	4618      	mov	r0, r3
 8012410:	f7f5 fc76 	bl	8007d00 <lwip_htons>
 8012414:	4603      	mov	r3, r0
 8012416:	461a      	mov	r2, r3
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012422:	2b06      	cmp	r3, #6
 8012424:	d006      	beq.n	8012434 <etharp_raw+0x84>
 8012426:	4b23      	ldr	r3, [pc, #140]	; (80124b4 <etharp_raw+0x104>)
 8012428:	f240 4269 	movw	r2, #1129	; 0x469
 801242c:	4925      	ldr	r1, [pc, #148]	; (80124c4 <etharp_raw+0x114>)
 801242e:	4823      	ldr	r0, [pc, #140]	; (80124bc <etharp_raw+0x10c>)
 8012430:	f002 fb10 	bl	8014a54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	3308      	adds	r3, #8
 8012438:	2206      	movs	r2, #6
 801243a:	6839      	ldr	r1, [r7, #0]
 801243c:	4618      	mov	r0, r3
 801243e:	f001 ff5b 	bl	80142f8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	3312      	adds	r3, #18
 8012446:	2206      	movs	r2, #6
 8012448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801244a:	4618      	mov	r0, r3
 801244c:	f001 ff54 	bl	80142f8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	330e      	adds	r3, #14
 8012454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012456:	6812      	ldr	r2, [r2, #0]
 8012458:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	3318      	adds	r3, #24
 801245e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012460:	6812      	ldr	r2, [r2, #0]
 8012462:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	2200      	movs	r2, #0
 8012468:	701a      	strb	r2, [r3, #0]
 801246a:	2200      	movs	r2, #0
 801246c:	f042 0201 	orr.w	r2, r2, #1
 8012470:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2200      	movs	r2, #0
 8012476:	f042 0208 	orr.w	r2, r2, #8
 801247a:	709a      	strb	r2, [r3, #2]
 801247c:	2200      	movs	r2, #0
 801247e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	2206      	movs	r2, #6
 8012484:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	2204      	movs	r2, #4
 801248a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801248c:	f640 0306 	movw	r3, #2054	; 0x806
 8012490:	9300      	str	r3, [sp, #0]
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	68ba      	ldr	r2, [r7, #8]
 8012496:	69b9      	ldr	r1, [r7, #24]
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f001 fb93 	bl	8013bc4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801249e:	69b8      	ldr	r0, [r7, #24]
 80124a0:	f7f7 f82c 	bl	80094fc <pbuf_free>
  p = NULL;
 80124a4:	2300      	movs	r3, #0
 80124a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80124a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3720      	adds	r7, #32
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	08017a14 	.word	0x08017a14
 80124b8:	08017b64 	.word	0x08017b64
 80124bc:	08017a8c 	.word	0x08017a8c
 80124c0:	08017c14 	.word	0x08017c14
 80124c4:	08017c48 	.word	0x08017c48

080124c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b088      	sub	sp, #32
 80124cc:	af04      	add	r7, sp, #16
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80124e4:	2201      	movs	r2, #1
 80124e6:	9203      	str	r2, [sp, #12]
 80124e8:	68ba      	ldr	r2, [r7, #8]
 80124ea:	9202      	str	r2, [sp, #8]
 80124ec:	4a06      	ldr	r2, [pc, #24]	; (8012508 <etharp_request_dst+0x40>)
 80124ee:	9201      	str	r2, [sp, #4]
 80124f0:	9300      	str	r3, [sp, #0]
 80124f2:	4603      	mov	r3, r0
 80124f4:	687a      	ldr	r2, [r7, #4]
 80124f6:	68f8      	ldr	r0, [r7, #12]
 80124f8:	f7ff ff5a 	bl	80123b0 <etharp_raw>
 80124fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3710      	adds	r7, #16
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
 8012506:	bf00      	nop
 8012508:	0801822c 	.word	0x0801822c

0801250c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b082      	sub	sp, #8
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012516:	4a05      	ldr	r2, [pc, #20]	; (801252c <etharp_request+0x20>)
 8012518:	6839      	ldr	r1, [r7, #0]
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7ff ffd4 	bl	80124c8 <etharp_request_dst>
 8012520:	4603      	mov	r3, r0
}
 8012522:	4618      	mov	r0, r3
 8012524:	3708      	adds	r7, #8
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}
 801252a:	bf00      	nop
 801252c:	08018224 	.word	0x08018224

08012530 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b08e      	sub	sp, #56	; 0x38
 8012534:	af04      	add	r7, sp, #16
 8012536:	6078      	str	r0, [r7, #4]
 8012538:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801253a:	4b79      	ldr	r3, [pc, #484]	; (8012720 <icmp_input+0x1f0>)
 801253c:	689b      	ldr	r3, [r3, #8]
 801253e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012542:	781b      	ldrb	r3, [r3, #0]
 8012544:	f003 030f 	and.w	r3, r3, #15
 8012548:	b2db      	uxtb	r3, r3
 801254a:	009b      	lsls	r3, r3, #2
 801254c:	b2db      	uxtb	r3, r3
 801254e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012550:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012552:	2b13      	cmp	r3, #19
 8012554:	f240 80cd 	bls.w	80126f2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	895b      	ldrh	r3, [r3, #10]
 801255c:	2b03      	cmp	r3, #3
 801255e:	f240 80ca 	bls.w	80126f6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801256c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012570:	2b00      	cmp	r3, #0
 8012572:	f000 80b7 	beq.w	80126e4 <icmp_input+0x1b4>
 8012576:	2b08      	cmp	r3, #8
 8012578:	f040 80b7 	bne.w	80126ea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801257c:	4b69      	ldr	r3, [pc, #420]	; (8012724 <icmp_input+0x1f4>)
 801257e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012580:	4b67      	ldr	r3, [pc, #412]	; (8012720 <icmp_input+0x1f0>)
 8012582:	695b      	ldr	r3, [r3, #20]
 8012584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012588:	2be0      	cmp	r3, #224	; 0xe0
 801258a:	f000 80bb 	beq.w	8012704 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801258e:	4b64      	ldr	r3, [pc, #400]	; (8012720 <icmp_input+0x1f0>)
 8012590:	695b      	ldr	r3, [r3, #20]
 8012592:	4a63      	ldr	r2, [pc, #396]	; (8012720 <icmp_input+0x1f0>)
 8012594:	6812      	ldr	r2, [r2, #0]
 8012596:	4611      	mov	r1, r2
 8012598:	4618      	mov	r0, r3
 801259a:	f000 fc0b 	bl	8012db4 <ip4_addr_isbroadcast_u32>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f040 80b1 	bne.w	8012708 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	891b      	ldrh	r3, [r3, #8]
 80125aa:	2b07      	cmp	r3, #7
 80125ac:	f240 80a5 	bls.w	80126fa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80125b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125b2:	330e      	adds	r3, #14
 80125b4:	4619      	mov	r1, r3
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f7f6 ff0a 	bl	80093d0 <pbuf_add_header>
 80125bc:	4603      	mov	r3, r0
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d04b      	beq.n	801265a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	891a      	ldrh	r2, [r3, #8]
 80125c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125c8:	4413      	add	r3, r2
 80125ca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	891b      	ldrh	r3, [r3, #8]
 80125d0:	8b7a      	ldrh	r2, [r7, #26]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	f0c0 809a 	bcc.w	801270c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80125d8:	8b7b      	ldrh	r3, [r7, #26]
 80125da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125de:	4619      	mov	r1, r3
 80125e0:	200e      	movs	r0, #14
 80125e2:	f7f6 fca7 	bl	8008f34 <pbuf_alloc>
 80125e6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	f000 8090 	beq.w	8012710 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	895b      	ldrh	r3, [r3, #10]
 80125f4:	461a      	mov	r2, r3
 80125f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125f8:	3308      	adds	r3, #8
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d203      	bcs.n	8012606 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80125fe:	6978      	ldr	r0, [r7, #20]
 8012600:	f7f6 ff7c 	bl	80094fc <pbuf_free>
          goto icmperr;
 8012604:	e085      	b.n	8012712 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801260c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801260e:	4618      	mov	r0, r3
 8012610:	f001 fe72 	bl	80142f8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012614:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012616:	4619      	mov	r1, r3
 8012618:	6978      	ldr	r0, [r7, #20]
 801261a:	f7f6 fee9 	bl	80093f0 <pbuf_remove_header>
 801261e:	4603      	mov	r3, r0
 8012620:	2b00      	cmp	r3, #0
 8012622:	d009      	beq.n	8012638 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012624:	4b40      	ldr	r3, [pc, #256]	; (8012728 <icmp_input+0x1f8>)
 8012626:	22b6      	movs	r2, #182	; 0xb6
 8012628:	4940      	ldr	r1, [pc, #256]	; (801272c <icmp_input+0x1fc>)
 801262a:	4841      	ldr	r0, [pc, #260]	; (8012730 <icmp_input+0x200>)
 801262c:	f002 fa12 	bl	8014a54 <iprintf>
          pbuf_free(r);
 8012630:	6978      	ldr	r0, [r7, #20]
 8012632:	f7f6 ff63 	bl	80094fc <pbuf_free>
          goto icmperr;
 8012636:	e06c      	b.n	8012712 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012638:	6879      	ldr	r1, [r7, #4]
 801263a:	6978      	ldr	r0, [r7, #20]
 801263c:	f7f7 f892 	bl	8009764 <pbuf_copy>
 8012640:	4603      	mov	r3, r0
 8012642:	2b00      	cmp	r3, #0
 8012644:	d003      	beq.n	801264e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012646:	6978      	ldr	r0, [r7, #20]
 8012648:	f7f6 ff58 	bl	80094fc <pbuf_free>
          goto icmperr;
 801264c:	e061      	b.n	8012712 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801264e:	6878      	ldr	r0, [r7, #4]
 8012650:	f7f6 ff54 	bl	80094fc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	607b      	str	r3, [r7, #4]
 8012658:	e00f      	b.n	801267a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801265a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801265c:	330e      	adds	r3, #14
 801265e:	4619      	mov	r1, r3
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f7f6 fec5 	bl	80093f0 <pbuf_remove_header>
 8012666:	4603      	mov	r3, r0
 8012668:	2b00      	cmp	r3, #0
 801266a:	d006      	beq.n	801267a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801266c:	4b2e      	ldr	r3, [pc, #184]	; (8012728 <icmp_input+0x1f8>)
 801266e:	22c7      	movs	r2, #199	; 0xc7
 8012670:	4930      	ldr	r1, [pc, #192]	; (8012734 <icmp_input+0x204>)
 8012672:	482f      	ldr	r0, [pc, #188]	; (8012730 <icmp_input+0x200>)
 8012674:	f002 f9ee 	bl	8014a54 <iprintf>
          goto icmperr;
 8012678:	e04b      	b.n	8012712 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	685b      	ldr	r3, [r3, #4]
 801267e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012680:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012682:	4619      	mov	r1, r3
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f7f6 fea3 	bl	80093d0 <pbuf_add_header>
 801268a:	4603      	mov	r3, r0
 801268c:	2b00      	cmp	r3, #0
 801268e:	d12b      	bne.n	80126e8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	685b      	ldr	r3, [r3, #4]
 8012694:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012696:	69fb      	ldr	r3, [r7, #28]
 8012698:	681a      	ldr	r2, [r3, #0]
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801269e:	4b20      	ldr	r3, [pc, #128]	; (8012720 <icmp_input+0x1f0>)
 80126a0:	691a      	ldr	r2, [r3, #16]
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	2200      	movs	r2, #0
 80126aa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80126ac:	693b      	ldr	r3, [r7, #16]
 80126ae:	2200      	movs	r2, #0
 80126b0:	709a      	strb	r2, [r3, #2]
 80126b2:	2200      	movs	r2, #0
 80126b4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	22ff      	movs	r2, #255	; 0xff
 80126ba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2200      	movs	r2, #0
 80126c0:	729a      	strb	r2, [r3, #10]
 80126c2:	2200      	movs	r2, #0
 80126c4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	9302      	str	r3, [sp, #8]
 80126ca:	2301      	movs	r3, #1
 80126cc:	9301      	str	r3, [sp, #4]
 80126ce:	2300      	movs	r3, #0
 80126d0:	9300      	str	r3, [sp, #0]
 80126d2:	23ff      	movs	r3, #255	; 0xff
 80126d4:	2200      	movs	r2, #0
 80126d6:	69f9      	ldr	r1, [r7, #28]
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 fa93 	bl	8012c04 <ip4_output_if>
 80126de:	4603      	mov	r3, r0
 80126e0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80126e2:	e001      	b.n	80126e8 <icmp_input+0x1b8>
      break;
 80126e4:	bf00      	nop
 80126e6:	e000      	b.n	80126ea <icmp_input+0x1ba>
      break;
 80126e8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80126ea:	6878      	ldr	r0, [r7, #4]
 80126ec:	f7f6 ff06 	bl	80094fc <pbuf_free>
  return;
 80126f0:	e013      	b.n	801271a <icmp_input+0x1ea>
    goto lenerr;
 80126f2:	bf00      	nop
 80126f4:	e002      	b.n	80126fc <icmp_input+0x1cc>
    goto lenerr;
 80126f6:	bf00      	nop
 80126f8:	e000      	b.n	80126fc <icmp_input+0x1cc>
        goto lenerr;
 80126fa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f7f6 fefd 	bl	80094fc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012702:	e00a      	b.n	801271a <icmp_input+0x1ea>
        goto icmperr;
 8012704:	bf00      	nop
 8012706:	e004      	b.n	8012712 <icmp_input+0x1e2>
        goto icmperr;
 8012708:	bf00      	nop
 801270a:	e002      	b.n	8012712 <icmp_input+0x1e2>
          goto icmperr;
 801270c:	bf00      	nop
 801270e:	e000      	b.n	8012712 <icmp_input+0x1e2>
          goto icmperr;
 8012710:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7f6 fef2 	bl	80094fc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012718:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801271a:	3728      	adds	r7, #40	; 0x28
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}
 8012720:	20015608 	.word	0x20015608
 8012724:	2001561c 	.word	0x2001561c
 8012728:	08017c8c 	.word	0x08017c8c
 801272c:	08017cc4 	.word	0x08017cc4
 8012730:	08017cfc 	.word	0x08017cfc
 8012734:	08017d24 	.word	0x08017d24

08012738 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	460b      	mov	r3, r1
 8012742:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012744:	78fb      	ldrb	r3, [r7, #3]
 8012746:	461a      	mov	r2, r3
 8012748:	2103      	movs	r1, #3
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 f814 	bl	8012778 <icmp_send_response>
}
 8012750:	bf00      	nop
 8012752:	3708      	adds	r7, #8
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	460b      	mov	r3, r1
 8012762:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012764:	78fb      	ldrb	r3, [r7, #3]
 8012766:	461a      	mov	r2, r3
 8012768:	210b      	movs	r1, #11
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f000 f804 	bl	8012778 <icmp_send_response>
}
 8012770:	bf00      	nop
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b08c      	sub	sp, #48	; 0x30
 801277c:	af04      	add	r7, sp, #16
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	460b      	mov	r3, r1
 8012782:	70fb      	strb	r3, [r7, #3]
 8012784:	4613      	mov	r3, r2
 8012786:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012788:	f44f 7220 	mov.w	r2, #640	; 0x280
 801278c:	2124      	movs	r1, #36	; 0x24
 801278e:	2022      	movs	r0, #34	; 0x22
 8012790:	f7f6 fbd0 	bl	8008f34 <pbuf_alloc>
 8012794:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012796:	69fb      	ldr	r3, [r7, #28]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d04c      	beq.n	8012836 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	895b      	ldrh	r3, [r3, #10]
 80127a0:	2b23      	cmp	r3, #35	; 0x23
 80127a2:	d806      	bhi.n	80127b2 <icmp_send_response+0x3a>
 80127a4:	4b26      	ldr	r3, [pc, #152]	; (8012840 <icmp_send_response+0xc8>)
 80127a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80127aa:	4926      	ldr	r1, [pc, #152]	; (8012844 <icmp_send_response+0xcc>)
 80127ac:	4826      	ldr	r0, [pc, #152]	; (8012848 <icmp_send_response+0xd0>)
 80127ae:	f002 f951 	bl	8014a54 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80127b8:	69fb      	ldr	r3, [r7, #28]
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	78fa      	ldrb	r2, [r7, #3]
 80127c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	78ba      	ldrb	r2, [r7, #2]
 80127c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	2200      	movs	r2, #0
 80127ce:	711a      	strb	r2, [r3, #4]
 80127d0:	2200      	movs	r2, #0
 80127d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80127d4:	697b      	ldr	r3, [r7, #20]
 80127d6:	2200      	movs	r2, #0
 80127d8:	719a      	strb	r2, [r3, #6]
 80127da:	2200      	movs	r2, #0
 80127dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	f103 0008 	add.w	r0, r3, #8
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	685b      	ldr	r3, [r3, #4]
 80127ea:	221c      	movs	r2, #28
 80127ec:	4619      	mov	r1, r3
 80127ee:	f001 fd83 	bl	80142f8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	68db      	ldr	r3, [r3, #12]
 80127f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80127f8:	f107 030c 	add.w	r3, r7, #12
 80127fc:	4618      	mov	r0, r3
 80127fe:	f000 f825 	bl	801284c <ip4_route>
 8012802:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d011      	beq.n	801282e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	2200      	movs	r2, #0
 801280e:	709a      	strb	r2, [r3, #2]
 8012810:	2200      	movs	r2, #0
 8012812:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012814:	f107 020c 	add.w	r2, r7, #12
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	9302      	str	r3, [sp, #8]
 801281c:	2301      	movs	r3, #1
 801281e:	9301      	str	r3, [sp, #4]
 8012820:	2300      	movs	r3, #0
 8012822:	9300      	str	r3, [sp, #0]
 8012824:	23ff      	movs	r3, #255	; 0xff
 8012826:	2100      	movs	r1, #0
 8012828:	69f8      	ldr	r0, [r7, #28]
 801282a:	f000 f9eb 	bl	8012c04 <ip4_output_if>
  }
  pbuf_free(q);
 801282e:	69f8      	ldr	r0, [r7, #28]
 8012830:	f7f6 fe64 	bl	80094fc <pbuf_free>
 8012834:	e000      	b.n	8012838 <icmp_send_response+0xc0>
    return;
 8012836:	bf00      	nop
}
 8012838:	3720      	adds	r7, #32
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}
 801283e:	bf00      	nop
 8012840:	08017c8c 	.word	0x08017c8c
 8012844:	08017d58 	.word	0x08017d58
 8012848:	08017cfc 	.word	0x08017cfc

0801284c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801284c:	b480      	push	{r7}
 801284e:	b085      	sub	sp, #20
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012854:	4b33      	ldr	r3, [pc, #204]	; (8012924 <ip4_route+0xd8>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	60fb      	str	r3, [r7, #12]
 801285a:	e036      	b.n	80128ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012862:	f003 0301 	and.w	r3, r3, #1
 8012866:	b2db      	uxtb	r3, r3
 8012868:	2b00      	cmp	r3, #0
 801286a:	d02b      	beq.n	80128c4 <ip4_route+0x78>
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012872:	089b      	lsrs	r3, r3, #2
 8012874:	f003 0301 	and.w	r3, r3, #1
 8012878:	b2db      	uxtb	r3, r3
 801287a:	2b00      	cmp	r3, #0
 801287c:	d022      	beq.n	80128c4 <ip4_route+0x78>
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	3304      	adds	r3, #4
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d01d      	beq.n	80128c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681a      	ldr	r2, [r3, #0]
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	3304      	adds	r3, #4
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	405a      	eors	r2, r3
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	3308      	adds	r3, #8
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	4013      	ands	r3, r2
 801289c:	2b00      	cmp	r3, #0
 801289e:	d101      	bne.n	80128a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	e038      	b.n	8012916 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128aa:	f003 0302 	and.w	r3, r3, #2
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d108      	bne.n	80128c4 <ip4_route+0x78>
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681a      	ldr	r2, [r3, #0]
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	330c      	adds	r3, #12
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d101      	bne.n	80128c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	e028      	b.n	8012916 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	60fb      	str	r3, [r7, #12]
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d1c5      	bne.n	801285c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80128d0:	4b15      	ldr	r3, [pc, #84]	; (8012928 <ip4_route+0xdc>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d01a      	beq.n	801290e <ip4_route+0xc2>
 80128d8:	4b13      	ldr	r3, [pc, #76]	; (8012928 <ip4_route+0xdc>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128e0:	f003 0301 	and.w	r3, r3, #1
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d012      	beq.n	801290e <ip4_route+0xc2>
 80128e8:	4b0f      	ldr	r3, [pc, #60]	; (8012928 <ip4_route+0xdc>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128f0:	f003 0304 	and.w	r3, r3, #4
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d00a      	beq.n	801290e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80128f8:	4b0b      	ldr	r3, [pc, #44]	; (8012928 <ip4_route+0xdc>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	3304      	adds	r3, #4
 80128fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012900:	2b00      	cmp	r3, #0
 8012902:	d004      	beq.n	801290e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	b2db      	uxtb	r3, r3
 801290a:	2b7f      	cmp	r3, #127	; 0x7f
 801290c:	d101      	bne.n	8012912 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801290e:	2300      	movs	r3, #0
 8012910:	e001      	b.n	8012916 <ip4_route+0xca>
  }

  return netif_default;
 8012912:	4b05      	ldr	r3, [pc, #20]	; (8012928 <ip4_route+0xdc>)
 8012914:	681b      	ldr	r3, [r3, #0]
}
 8012916:	4618      	mov	r0, r3
 8012918:	3714      	adds	r7, #20
 801291a:	46bd      	mov	sp, r7
 801291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012920:	4770      	bx	lr
 8012922:	bf00      	nop
 8012924:	20018d2c 	.word	0x20018d2c
 8012928:	20018d30 	.word	0x20018d30

0801292c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b082      	sub	sp, #8
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801293a:	f003 0301 	and.w	r3, r3, #1
 801293e:	b2db      	uxtb	r3, r3
 8012940:	2b00      	cmp	r3, #0
 8012942:	d016      	beq.n	8012972 <ip4_input_accept+0x46>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	3304      	adds	r3, #4
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d011      	beq.n	8012972 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801294e:	4b0b      	ldr	r3, [pc, #44]	; (801297c <ip4_input_accept+0x50>)
 8012950:	695a      	ldr	r2, [r3, #20]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	3304      	adds	r3, #4
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	429a      	cmp	r2, r3
 801295a:	d008      	beq.n	801296e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801295c:	4b07      	ldr	r3, [pc, #28]	; (801297c <ip4_input_accept+0x50>)
 801295e:	695b      	ldr	r3, [r3, #20]
 8012960:	6879      	ldr	r1, [r7, #4]
 8012962:	4618      	mov	r0, r3
 8012964:	f000 fa26 	bl	8012db4 <ip4_addr_isbroadcast_u32>
 8012968:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801296a:	2b00      	cmp	r3, #0
 801296c:	d001      	beq.n	8012972 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801296e:	2301      	movs	r3, #1
 8012970:	e000      	b.n	8012974 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012972:	2300      	movs	r3, #0
}
 8012974:	4618      	mov	r0, r3
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	20015608 	.word	0x20015608

08012980 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b088      	sub	sp, #32
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801298a:	2301      	movs	r3, #1
 801298c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012994:	69fb      	ldr	r3, [r7, #28]
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	091b      	lsrs	r3, r3, #4
 801299a:	b2db      	uxtb	r3, r3
 801299c:	2b04      	cmp	r3, #4
 801299e:	d004      	beq.n	80129aa <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f7f6 fdab 	bl	80094fc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80129a6:	2300      	movs	r3, #0
 80129a8:	e123      	b.n	8012bf2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80129aa:	69fb      	ldr	r3, [r7, #28]
 80129ac:	781b      	ldrb	r3, [r3, #0]
 80129ae:	f003 030f 	and.w	r3, r3, #15
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	b2db      	uxtb	r3, r3
 80129b8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80129ba:	69fb      	ldr	r3, [r7, #28]
 80129bc:	885b      	ldrh	r3, [r3, #2]
 80129be:	b29b      	uxth	r3, r3
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7f5 f99d 	bl	8007d00 <lwip_htons>
 80129c6:	4603      	mov	r3, r0
 80129c8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	891b      	ldrh	r3, [r3, #8]
 80129ce:	8a3a      	ldrh	r2, [r7, #16]
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d204      	bcs.n	80129de <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80129d4:	8a3b      	ldrh	r3, [r7, #16]
 80129d6:	4619      	mov	r1, r3
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f7f6 fc09 	bl	80091f0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	895b      	ldrh	r3, [r3, #10]
 80129e2:	8a7a      	ldrh	r2, [r7, #18]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d807      	bhi.n	80129f8 <ip4_input+0x78>
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	891b      	ldrh	r3, [r3, #8]
 80129ec:	8a3a      	ldrh	r2, [r7, #16]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d802      	bhi.n	80129f8 <ip4_input+0x78>
 80129f2:	8a7b      	ldrh	r3, [r7, #18]
 80129f4:	2b13      	cmp	r3, #19
 80129f6:	d804      	bhi.n	8012a02 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f7f6 fd7f 	bl	80094fc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80129fe:	2300      	movs	r3, #0
 8012a00:	e0f7      	b.n	8012bf2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	691b      	ldr	r3, [r3, #16]
 8012a06:	4a7d      	ldr	r2, [pc, #500]	; (8012bfc <ip4_input+0x27c>)
 8012a08:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	68db      	ldr	r3, [r3, #12]
 8012a0e:	4a7b      	ldr	r2, [pc, #492]	; (8012bfc <ip4_input+0x27c>)
 8012a10:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012a12:	4b7a      	ldr	r3, [pc, #488]	; (8012bfc <ip4_input+0x27c>)
 8012a14:	695b      	ldr	r3, [r3, #20]
 8012a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a1a:	2be0      	cmp	r3, #224	; 0xe0
 8012a1c:	d112      	bne.n	8012a44 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a24:	f003 0301 	and.w	r3, r3, #1
 8012a28:	b2db      	uxtb	r3, r3
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d007      	beq.n	8012a3e <ip4_input+0xbe>
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	3304      	adds	r3, #4
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d002      	beq.n	8012a3e <ip4_input+0xbe>
      netif = inp;
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	61bb      	str	r3, [r7, #24]
 8012a3c:	e02a      	b.n	8012a94 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	61bb      	str	r3, [r7, #24]
 8012a42:	e027      	b.n	8012a94 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012a44:	6838      	ldr	r0, [r7, #0]
 8012a46:	f7ff ff71 	bl	801292c <ip4_input_accept>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d002      	beq.n	8012a56 <ip4_input+0xd6>
      netif = inp;
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	61bb      	str	r3, [r7, #24]
 8012a54:	e01e      	b.n	8012a94 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012a56:	2300      	movs	r3, #0
 8012a58:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012a5a:	4b68      	ldr	r3, [pc, #416]	; (8012bfc <ip4_input+0x27c>)
 8012a5c:	695b      	ldr	r3, [r3, #20]
 8012a5e:	b2db      	uxtb	r3, r3
 8012a60:	2b7f      	cmp	r3, #127	; 0x7f
 8012a62:	d017      	beq.n	8012a94 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012a64:	4b66      	ldr	r3, [pc, #408]	; (8012c00 <ip4_input+0x280>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	61bb      	str	r3, [r7, #24]
 8012a6a:	e00e      	b.n	8012a8a <ip4_input+0x10a>
          if (netif == inp) {
 8012a6c:	69ba      	ldr	r2, [r7, #24]
 8012a6e:	683b      	ldr	r3, [r7, #0]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d006      	beq.n	8012a82 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012a74:	69b8      	ldr	r0, [r7, #24]
 8012a76:	f7ff ff59 	bl	801292c <ip4_input_accept>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d108      	bne.n	8012a92 <ip4_input+0x112>
 8012a80:	e000      	b.n	8012a84 <ip4_input+0x104>
            continue;
 8012a82:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012a84:	69bb      	ldr	r3, [r7, #24]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	61bb      	str	r3, [r7, #24]
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d1ed      	bne.n	8012a6c <ip4_input+0xec>
 8012a90:	e000      	b.n	8012a94 <ip4_input+0x114>
            break;
 8012a92:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d111      	bne.n	8012abe <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012a9a:	69fb      	ldr	r3, [r7, #28]
 8012a9c:	7a5b      	ldrb	r3, [r3, #9]
 8012a9e:	2b11      	cmp	r3, #17
 8012aa0:	d10d      	bne.n	8012abe <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012aa2:	8a7b      	ldrh	r3, [r7, #18]
 8012aa4:	69fa      	ldr	r2, [r7, #28]
 8012aa6:	4413      	add	r3, r2
 8012aa8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	885b      	ldrh	r3, [r3, #2]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8012ab4:	d103      	bne.n	8012abe <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012aba:	2300      	movs	r3, #0
 8012abc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d017      	beq.n	8012af4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012ac4:	4b4d      	ldr	r3, [pc, #308]	; (8012bfc <ip4_input+0x27c>)
 8012ac6:	691b      	ldr	r3, [r3, #16]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d013      	beq.n	8012af4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012acc:	4b4b      	ldr	r3, [pc, #300]	; (8012bfc <ip4_input+0x27c>)
 8012ace:	691b      	ldr	r3, [r3, #16]
 8012ad0:	6839      	ldr	r1, [r7, #0]
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f000 f96e 	bl	8012db4 <ip4_addr_isbroadcast_u32>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d105      	bne.n	8012aea <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012ade:	4b47      	ldr	r3, [pc, #284]	; (8012bfc <ip4_input+0x27c>)
 8012ae0:	691b      	ldr	r3, [r3, #16]
 8012ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012ae6:	2be0      	cmp	r3, #224	; 0xe0
 8012ae8:	d104      	bne.n	8012af4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012aea:	6878      	ldr	r0, [r7, #4]
 8012aec:	f7f6 fd06 	bl	80094fc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012af0:	2300      	movs	r3, #0
 8012af2:	e07e      	b.n	8012bf2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012af4:	69bb      	ldr	r3, [r7, #24]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d104      	bne.n	8012b04 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f7f6 fcfe 	bl	80094fc <pbuf_free>
    return ERR_OK;
 8012b00:	2300      	movs	r3, #0
 8012b02:	e076      	b.n	8012bf2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012b04:	69fb      	ldr	r3, [r7, #28]
 8012b06:	88db      	ldrh	r3, [r3, #6]
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012b10:	4013      	ands	r3, r2
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d00b      	beq.n	8012b2e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f000 fc92 	bl	8013440 <ip4_reass>
 8012b1c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d101      	bne.n	8012b28 <ip4_input+0x1a8>
      return ERR_OK;
 8012b24:	2300      	movs	r3, #0
 8012b26:	e064      	b.n	8012bf2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012b2e:	4a33      	ldr	r2, [pc, #204]	; (8012bfc <ip4_input+0x27c>)
 8012b30:	69bb      	ldr	r3, [r7, #24]
 8012b32:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012b34:	4a31      	ldr	r2, [pc, #196]	; (8012bfc <ip4_input+0x27c>)
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012b3a:	4a30      	ldr	r2, [pc, #192]	; (8012bfc <ip4_input+0x27c>)
 8012b3c:	69fb      	ldr	r3, [r7, #28]
 8012b3e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012b40:	69fb      	ldr	r3, [r7, #28]
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	f003 030f 	and.w	r3, r3, #15
 8012b48:	b2db      	uxtb	r3, r3
 8012b4a:	009b      	lsls	r3, r3, #2
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	4b2a      	ldr	r3, [pc, #168]	; (8012bfc <ip4_input+0x27c>)
 8012b52:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012b54:	8a7b      	ldrh	r3, [r7, #18]
 8012b56:	4619      	mov	r1, r3
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f7f6 fc49 	bl	80093f0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012b5e:	69fb      	ldr	r3, [r7, #28]
 8012b60:	7a5b      	ldrb	r3, [r3, #9]
 8012b62:	2b11      	cmp	r3, #17
 8012b64:	d006      	beq.n	8012b74 <ip4_input+0x1f4>
 8012b66:	2b11      	cmp	r3, #17
 8012b68:	dc13      	bgt.n	8012b92 <ip4_input+0x212>
 8012b6a:	2b01      	cmp	r3, #1
 8012b6c:	d00c      	beq.n	8012b88 <ip4_input+0x208>
 8012b6e:	2b06      	cmp	r3, #6
 8012b70:	d005      	beq.n	8012b7e <ip4_input+0x1fe>
 8012b72:	e00e      	b.n	8012b92 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012b74:	6839      	ldr	r1, [r7, #0]
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7fc faea 	bl	800f150 <udp_input>
        break;
 8012b7c:	e026      	b.n	8012bcc <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012b7e:	6839      	ldr	r1, [r7, #0]
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f7f8 faff 	bl	800b184 <tcp_input>
        break;
 8012b86:	e021      	b.n	8012bcc <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012b88:	6839      	ldr	r1, [r7, #0]
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f7ff fcd0 	bl	8012530 <icmp_input>
        break;
 8012b90:	e01c      	b.n	8012bcc <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012b92:	4b1a      	ldr	r3, [pc, #104]	; (8012bfc <ip4_input+0x27c>)
 8012b94:	695b      	ldr	r3, [r3, #20]
 8012b96:	69b9      	ldr	r1, [r7, #24]
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f000 f90b 	bl	8012db4 <ip4_addr_isbroadcast_u32>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d10f      	bne.n	8012bc4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012ba4:	4b15      	ldr	r3, [pc, #84]	; (8012bfc <ip4_input+0x27c>)
 8012ba6:	695b      	ldr	r3, [r3, #20]
 8012ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012bac:	2be0      	cmp	r3, #224	; 0xe0
 8012bae:	d009      	beq.n	8012bc4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012bb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012bb4:	4619      	mov	r1, r3
 8012bb6:	6878      	ldr	r0, [r7, #4]
 8012bb8:	f7f6 fc8d 	bl	80094d6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012bbc:	2102      	movs	r1, #2
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f7ff fdba 	bl	8012738 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7f6 fc99 	bl	80094fc <pbuf_free>
        break;
 8012bca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012bcc:	4b0b      	ldr	r3, [pc, #44]	; (8012bfc <ip4_input+0x27c>)
 8012bce:	2200      	movs	r2, #0
 8012bd0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012bd2:	4b0a      	ldr	r3, [pc, #40]	; (8012bfc <ip4_input+0x27c>)
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012bd8:	4b08      	ldr	r3, [pc, #32]	; (8012bfc <ip4_input+0x27c>)
 8012bda:	2200      	movs	r2, #0
 8012bdc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012bde:	4b07      	ldr	r3, [pc, #28]	; (8012bfc <ip4_input+0x27c>)
 8012be0:	2200      	movs	r2, #0
 8012be2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012be4:	4b05      	ldr	r3, [pc, #20]	; (8012bfc <ip4_input+0x27c>)
 8012be6:	2200      	movs	r2, #0
 8012be8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012bea:	4b04      	ldr	r3, [pc, #16]	; (8012bfc <ip4_input+0x27c>)
 8012bec:	2200      	movs	r2, #0
 8012bee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012bf0:	2300      	movs	r3, #0
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3720      	adds	r7, #32
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	20015608 	.word	0x20015608
 8012c00:	20018d2c 	.word	0x20018d2c

08012c04 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b08a      	sub	sp, #40	; 0x28
 8012c08:	af04      	add	r7, sp, #16
 8012c0a:	60f8      	str	r0, [r7, #12]
 8012c0c:	60b9      	str	r1, [r7, #8]
 8012c0e:	607a      	str	r2, [r7, #4]
 8012c10:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d009      	beq.n	8012c30 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d003      	beq.n	8012c2a <ip4_output_if+0x26>
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d102      	bne.n	8012c30 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c2c:	3304      	adds	r3, #4
 8012c2e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012c30:	78fa      	ldrb	r2, [r7, #3]
 8012c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c34:	9302      	str	r3, [sp, #8]
 8012c36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012c3a:	9301      	str	r3, [sp, #4]
 8012c3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012c40:	9300      	str	r3, [sp, #0]
 8012c42:	4613      	mov	r3, r2
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	6979      	ldr	r1, [r7, #20]
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f000 f805 	bl	8012c58 <ip4_output_if_src>
 8012c4e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3718      	adds	r7, #24
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b088      	sub	sp, #32
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	60b9      	str	r1, [r7, #8]
 8012c62:	607a      	str	r2, [r7, #4]
 8012c64:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	7b9b      	ldrb	r3, [r3, #14]
 8012c6a:	2b01      	cmp	r3, #1
 8012c6c:	d006      	beq.n	8012c7c <ip4_output_if_src+0x24>
 8012c6e:	4b4b      	ldr	r3, [pc, #300]	; (8012d9c <ip4_output_if_src+0x144>)
 8012c70:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012c74:	494a      	ldr	r1, [pc, #296]	; (8012da0 <ip4_output_if_src+0x148>)
 8012c76:	484b      	ldr	r0, [pc, #300]	; (8012da4 <ip4_output_if_src+0x14c>)
 8012c78:	f001 feec 	bl	8014a54 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d060      	beq.n	8012d44 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012c82:	2314      	movs	r3, #20
 8012c84:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012c86:	2114      	movs	r1, #20
 8012c88:	68f8      	ldr	r0, [r7, #12]
 8012c8a:	f7f6 fba1 	bl	80093d0 <pbuf_add_header>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d002      	beq.n	8012c9a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012c94:	f06f 0301 	mvn.w	r3, #1
 8012c98:	e07c      	b.n	8012d94 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	895b      	ldrh	r3, [r3, #10]
 8012ca4:	2b13      	cmp	r3, #19
 8012ca6:	d806      	bhi.n	8012cb6 <ip4_output_if_src+0x5e>
 8012ca8:	4b3c      	ldr	r3, [pc, #240]	; (8012d9c <ip4_output_if_src+0x144>)
 8012caa:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012cae:	493e      	ldr	r1, [pc, #248]	; (8012da8 <ip4_output_if_src+0x150>)
 8012cb0:	483c      	ldr	r0, [pc, #240]	; (8012da4 <ip4_output_if_src+0x14c>)
 8012cb2:	f001 fecf 	bl	8014a54 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012cb6:	69fb      	ldr	r3, [r7, #28]
 8012cb8:	78fa      	ldrb	r2, [r7, #3]
 8012cba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012cc2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681a      	ldr	r2, [r3, #0]
 8012cc8:	69fb      	ldr	r3, [r7, #28]
 8012cca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012ccc:	8b7b      	ldrh	r3, [r7, #26]
 8012cce:	089b      	lsrs	r3, r3, #2
 8012cd0:	b29b      	uxth	r3, r3
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cd8:	b2da      	uxtb	r2, r3
 8012cda:	69fb      	ldr	r3, [r7, #28]
 8012cdc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012ce4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	891b      	ldrh	r3, [r3, #8]
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7f5 f808 	bl	8007d00 <lwip_htons>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	69fb      	ldr	r3, [r7, #28]
 8012cf6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	719a      	strb	r2, [r3, #6]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012d02:	4b2a      	ldr	r3, [pc, #168]	; (8012dac <ip4_output_if_src+0x154>)
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7f4 fffa 	bl	8007d00 <lwip_htons>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	461a      	mov	r2, r3
 8012d10:	69fb      	ldr	r3, [r7, #28]
 8012d12:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012d14:	4b25      	ldr	r3, [pc, #148]	; (8012dac <ip4_output_if_src+0x154>)
 8012d16:	881b      	ldrh	r3, [r3, #0]
 8012d18:	3301      	adds	r3, #1
 8012d1a:	b29a      	uxth	r2, r3
 8012d1c:	4b23      	ldr	r3, [pc, #140]	; (8012dac <ip4_output_if_src+0x154>)
 8012d1e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d104      	bne.n	8012d30 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012d26:	4b22      	ldr	r3, [pc, #136]	; (8012db0 <ip4_output_if_src+0x158>)
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	60da      	str	r2, [r3, #12]
 8012d2e:	e003      	b.n	8012d38 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	681a      	ldr	r2, [r3, #0]
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012d38:	69fb      	ldr	r3, [r7, #28]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	729a      	strb	r2, [r3, #10]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	72da      	strb	r2, [r3, #11]
 8012d42:	e00f      	b.n	8012d64 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	895b      	ldrh	r3, [r3, #10]
 8012d48:	2b13      	cmp	r3, #19
 8012d4a:	d802      	bhi.n	8012d52 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012d4c:	f06f 0301 	mvn.w	r3, #1
 8012d50:	e020      	b.n	8012d94 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	685b      	ldr	r3, [r3, #4]
 8012d56:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	691b      	ldr	r3, [r3, #16]
 8012d5c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012d5e:	f107 0314 	add.w	r3, r7, #20
 8012d62:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d00c      	beq.n	8012d86 <ip4_output_if_src+0x12e>
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	891a      	ldrh	r2, [r3, #8]
 8012d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d906      	bls.n	8012d86 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012d7c:	68f8      	ldr	r0, [r7, #12]
 8012d7e:	f000 fd4d 	bl	801381c <ip4_frag>
 8012d82:	4603      	mov	r3, r0
 8012d84:	e006      	b.n	8012d94 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	695b      	ldr	r3, [r3, #20]
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	68f9      	ldr	r1, [r7, #12]
 8012d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d90:	4798      	blx	r3
 8012d92:	4603      	mov	r3, r0
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3720      	adds	r7, #32
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	08017d84 	.word	0x08017d84
 8012da0:	08017db8 	.word	0x08017db8
 8012da4:	08017dc4 	.word	0x08017dc4
 8012da8:	08017dec 	.word	0x08017dec
 8012dac:	20010862 	.word	0x20010862
 8012db0:	0801821c 	.word	0x0801821c

08012db4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012db4:	b480      	push	{r7}
 8012db6:	b085      	sub	sp, #20
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dc8:	d002      	beq.n	8012dd0 <ip4_addr_isbroadcast_u32+0x1c>
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d101      	bne.n	8012dd4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	e02a      	b.n	8012e2a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012dd4:	683b      	ldr	r3, [r7, #0]
 8012dd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012dda:	f003 0302 	and.w	r3, r3, #2
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d101      	bne.n	8012de6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	e021      	b.n	8012e2a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	3304      	adds	r3, #4
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	687a      	ldr	r2, [r7, #4]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d101      	bne.n	8012df6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012df2:	2300      	movs	r3, #0
 8012df4:	e019      	b.n	8012e2a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012df6:	68fa      	ldr	r2, [r7, #12]
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	3304      	adds	r3, #4
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	405a      	eors	r2, r3
 8012e00:	683b      	ldr	r3, [r7, #0]
 8012e02:	3308      	adds	r3, #8
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4013      	ands	r3, r2
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d10d      	bne.n	8012e28 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	3308      	adds	r3, #8
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	43da      	mvns	r2, r3
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	3308      	adds	r3, #8
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d101      	bne.n	8012e28 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012e24:	2301      	movs	r3, #1
 8012e26:	e000      	b.n	8012e2a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012e28:	2300      	movs	r3, #0
  }
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3714      	adds	r7, #20
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e34:	4770      	bx	lr
	...

08012e38 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012e42:	4b12      	ldr	r3, [pc, #72]	; (8012e8c <ip_reass_tmr+0x54>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012e48:	e018      	b.n	8012e7c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	7fdb      	ldrb	r3, [r3, #31]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d00b      	beq.n	8012e6a <ip_reass_tmr+0x32>
      r->timer--;
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	7fdb      	ldrb	r3, [r3, #31]
 8012e56:	3b01      	subs	r3, #1
 8012e58:	b2da      	uxtb	r2, r3
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	60fb      	str	r3, [r7, #12]
 8012e68:	e008      	b.n	8012e7c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012e74:	68b9      	ldr	r1, [r7, #8]
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f000 f80a 	bl	8012e90 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d1e3      	bne.n	8012e4a <ip_reass_tmr+0x12>
    }
  }
}
 8012e82:	bf00      	nop
 8012e84:	bf00      	nop
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}
 8012e8c:	20010864 	.word	0x20010864

08012e90 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b088      	sub	sp, #32
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012e9e:	683a      	ldr	r2, [r7, #0]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d105      	bne.n	8012eb2 <ip_reass_free_complete_datagram+0x22>
 8012ea6:	4b45      	ldr	r3, [pc, #276]	; (8012fbc <ip_reass_free_complete_datagram+0x12c>)
 8012ea8:	22ab      	movs	r2, #171	; 0xab
 8012eaa:	4945      	ldr	r1, [pc, #276]	; (8012fc0 <ip_reass_free_complete_datagram+0x130>)
 8012eac:	4845      	ldr	r0, [pc, #276]	; (8012fc4 <ip_reass_free_complete_datagram+0x134>)
 8012eae:	f001 fdd1 	bl	8014a54 <iprintf>
  if (prev != NULL) {
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d00a      	beq.n	8012ece <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	429a      	cmp	r2, r3
 8012ec0:	d005      	beq.n	8012ece <ip_reass_free_complete_datagram+0x3e>
 8012ec2:	4b3e      	ldr	r3, [pc, #248]	; (8012fbc <ip_reass_free_complete_datagram+0x12c>)
 8012ec4:	22ad      	movs	r2, #173	; 0xad
 8012ec6:	4940      	ldr	r1, [pc, #256]	; (8012fc8 <ip_reass_free_complete_datagram+0x138>)
 8012ec8:	483e      	ldr	r0, [pc, #248]	; (8012fc4 <ip_reass_free_complete_datagram+0x134>)
 8012eca:	f001 fdc3 	bl	8014a54 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	685b      	ldr	r3, [r3, #4]
 8012ed4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	889b      	ldrh	r3, [r3, #4]
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d12a      	bne.n	8012f36 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	685b      	ldr	r3, [r3, #4]
 8012ee4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012eee:	69bb      	ldr	r3, [r7, #24]
 8012ef0:	6858      	ldr	r0, [r3, #4]
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	3308      	adds	r3, #8
 8012ef6:	2214      	movs	r2, #20
 8012ef8:	4619      	mov	r1, r3
 8012efa:	f001 f9fd 	bl	80142f8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012efe:	2101      	movs	r1, #1
 8012f00:	69b8      	ldr	r0, [r7, #24]
 8012f02:	f7ff fc29 	bl	8012758 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012f06:	69b8      	ldr	r0, [r7, #24]
 8012f08:	f7f6 fb86 	bl	8009618 <pbuf_clen>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012f10:	8bfa      	ldrh	r2, [r7, #30]
 8012f12:	8a7b      	ldrh	r3, [r7, #18]
 8012f14:	4413      	add	r3, r2
 8012f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f1a:	db05      	blt.n	8012f28 <ip_reass_free_complete_datagram+0x98>
 8012f1c:	4b27      	ldr	r3, [pc, #156]	; (8012fbc <ip_reass_free_complete_datagram+0x12c>)
 8012f1e:	22bc      	movs	r2, #188	; 0xbc
 8012f20:	492a      	ldr	r1, [pc, #168]	; (8012fcc <ip_reass_free_complete_datagram+0x13c>)
 8012f22:	4828      	ldr	r0, [pc, #160]	; (8012fc4 <ip_reass_free_complete_datagram+0x134>)
 8012f24:	f001 fd96 	bl	8014a54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012f28:	8bfa      	ldrh	r2, [r7, #30]
 8012f2a:	8a7b      	ldrh	r3, [r7, #18]
 8012f2c:	4413      	add	r3, r2
 8012f2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012f30:	69b8      	ldr	r0, [r7, #24]
 8012f32:	f7f6 fae3 	bl	80094fc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012f3c:	e01f      	b.n	8012f7e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012f3e:	69bb      	ldr	r3, [r7, #24]
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012f44:	69bb      	ldr	r3, [r7, #24]
 8012f46:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012f4e:	68f8      	ldr	r0, [r7, #12]
 8012f50:	f7f6 fb62 	bl	8009618 <pbuf_clen>
 8012f54:	4603      	mov	r3, r0
 8012f56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012f58:	8bfa      	ldrh	r2, [r7, #30]
 8012f5a:	8a7b      	ldrh	r3, [r7, #18]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f62:	db05      	blt.n	8012f70 <ip_reass_free_complete_datagram+0xe0>
 8012f64:	4b15      	ldr	r3, [pc, #84]	; (8012fbc <ip_reass_free_complete_datagram+0x12c>)
 8012f66:	22cc      	movs	r2, #204	; 0xcc
 8012f68:	4918      	ldr	r1, [pc, #96]	; (8012fcc <ip_reass_free_complete_datagram+0x13c>)
 8012f6a:	4816      	ldr	r0, [pc, #88]	; (8012fc4 <ip_reass_free_complete_datagram+0x134>)
 8012f6c:	f001 fd72 	bl	8014a54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012f70:	8bfa      	ldrh	r2, [r7, #30]
 8012f72:	8a7b      	ldrh	r3, [r7, #18]
 8012f74:	4413      	add	r3, r2
 8012f76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f7f6 fabf 	bl	80094fc <pbuf_free>
  while (p != NULL) {
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d1dc      	bne.n	8012f3e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012f84:	6839      	ldr	r1, [r7, #0]
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f000 f8c2 	bl	8013110 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012f8c:	4b10      	ldr	r3, [pc, #64]	; (8012fd0 <ip_reass_free_complete_datagram+0x140>)
 8012f8e:	881b      	ldrh	r3, [r3, #0]
 8012f90:	8bfa      	ldrh	r2, [r7, #30]
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d905      	bls.n	8012fa2 <ip_reass_free_complete_datagram+0x112>
 8012f96:	4b09      	ldr	r3, [pc, #36]	; (8012fbc <ip_reass_free_complete_datagram+0x12c>)
 8012f98:	22d2      	movs	r2, #210	; 0xd2
 8012f9a:	490e      	ldr	r1, [pc, #56]	; (8012fd4 <ip_reass_free_complete_datagram+0x144>)
 8012f9c:	4809      	ldr	r0, [pc, #36]	; (8012fc4 <ip_reass_free_complete_datagram+0x134>)
 8012f9e:	f001 fd59 	bl	8014a54 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012fa2:	4b0b      	ldr	r3, [pc, #44]	; (8012fd0 <ip_reass_free_complete_datagram+0x140>)
 8012fa4:	881a      	ldrh	r2, [r3, #0]
 8012fa6:	8bfb      	ldrh	r3, [r7, #30]
 8012fa8:	1ad3      	subs	r3, r2, r3
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	4b08      	ldr	r3, [pc, #32]	; (8012fd0 <ip_reass_free_complete_datagram+0x140>)
 8012fae:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012fb0:	8bfb      	ldrh	r3, [r7, #30]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3720      	adds	r7, #32
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	08017e1c 	.word	0x08017e1c
 8012fc0:	08017e58 	.word	0x08017e58
 8012fc4:	08017e64 	.word	0x08017e64
 8012fc8:	08017e8c 	.word	0x08017e8c
 8012fcc:	08017ea0 	.word	0x08017ea0
 8012fd0:	20010868 	.word	0x20010868
 8012fd4:	08017ec0 	.word	0x08017ec0

08012fd8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b08a      	sub	sp, #40	; 0x28
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
 8012fe0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012fea:	2300      	movs	r3, #0
 8012fec:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012ff6:	4b28      	ldr	r3, [pc, #160]	; (8013098 <ip_reass_remove_oldest_datagram+0xc0>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012ffc:	e030      	b.n	8013060 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013000:	695a      	ldr	r2, [r3, #20]
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	429a      	cmp	r2, r3
 8013008:	d10c      	bne.n	8013024 <ip_reass_remove_oldest_datagram+0x4c>
 801300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801300c:	699a      	ldr	r2, [r3, #24]
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	691b      	ldr	r3, [r3, #16]
 8013012:	429a      	cmp	r2, r3
 8013014:	d106      	bne.n	8013024 <ip_reass_remove_oldest_datagram+0x4c>
 8013016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013018:	899a      	ldrh	r2, [r3, #12]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	889b      	ldrh	r3, [r3, #4]
 801301e:	b29b      	uxth	r3, r3
 8013020:	429a      	cmp	r2, r3
 8013022:	d014      	beq.n	801304e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013024:	693b      	ldr	r3, [r7, #16]
 8013026:	3301      	adds	r3, #1
 8013028:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801302a:	6a3b      	ldr	r3, [r7, #32]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d104      	bne.n	801303a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013032:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013034:	69fb      	ldr	r3, [r7, #28]
 8013036:	61bb      	str	r3, [r7, #24]
 8013038:	e009      	b.n	801304e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801303c:	7fda      	ldrb	r2, [r3, #31]
 801303e:	6a3b      	ldr	r3, [r7, #32]
 8013040:	7fdb      	ldrb	r3, [r3, #31]
 8013042:	429a      	cmp	r2, r3
 8013044:	d803      	bhi.n	801304e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013048:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801304a:	69fb      	ldr	r3, [r7, #28]
 801304c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d001      	beq.n	801305a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013058:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013062:	2b00      	cmp	r3, #0
 8013064:	d1cb      	bne.n	8012ffe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013066:	6a3b      	ldr	r3, [r7, #32]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d008      	beq.n	801307e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801306c:	69b9      	ldr	r1, [r7, #24]
 801306e:	6a38      	ldr	r0, [r7, #32]
 8013070:	f7ff ff0e 	bl	8012e90 <ip_reass_free_complete_datagram>
 8013074:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013076:	697a      	ldr	r2, [r7, #20]
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	4413      	add	r3, r2
 801307c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801307e:	697a      	ldr	r2, [r7, #20]
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	429a      	cmp	r2, r3
 8013084:	da02      	bge.n	801308c <ip_reass_remove_oldest_datagram+0xb4>
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	2b01      	cmp	r3, #1
 801308a:	dcac      	bgt.n	8012fe6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801308c:	697b      	ldr	r3, [r7, #20]
}
 801308e:	4618      	mov	r0, r3
 8013090:	3728      	adds	r7, #40	; 0x28
 8013092:	46bd      	mov	sp, r7
 8013094:	bd80      	pop	{r7, pc}
 8013096:	bf00      	nop
 8013098:	20010864 	.word	0x20010864

0801309c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b084      	sub	sp, #16
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
 80130a4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80130a6:	2004      	movs	r0, #4
 80130a8:	f7f5 fb02 	bl	80086b0 <memp_malloc>
 80130ac:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d110      	bne.n	80130d6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80130b4:	6839      	ldr	r1, [r7, #0]
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f7ff ff8e 	bl	8012fd8 <ip_reass_remove_oldest_datagram>
 80130bc:	4602      	mov	r2, r0
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	4293      	cmp	r3, r2
 80130c2:	dc03      	bgt.n	80130cc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80130c4:	2004      	movs	r0, #4
 80130c6:	f7f5 faf3 	bl	80086b0 <memp_malloc>
 80130ca:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d101      	bne.n	80130d6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80130d2:	2300      	movs	r3, #0
 80130d4:	e016      	b.n	8013104 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80130d6:	2220      	movs	r2, #32
 80130d8:	2100      	movs	r1, #0
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f001 f91a 	bl	8014314 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	220f      	movs	r2, #15
 80130e4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80130e6:	4b09      	ldr	r3, [pc, #36]	; (801310c <ip_reass_enqueue_new_datagram+0x70>)
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80130ee:	4a07      	ldr	r2, [pc, #28]	; (801310c <ip_reass_enqueue_new_datagram+0x70>)
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	3308      	adds	r3, #8
 80130f8:	2214      	movs	r2, #20
 80130fa:	6879      	ldr	r1, [r7, #4]
 80130fc:	4618      	mov	r0, r3
 80130fe:	f001 f8fb 	bl	80142f8 <memcpy>
  return ipr;
 8013102:	68fb      	ldr	r3, [r7, #12]
}
 8013104:	4618      	mov	r0, r3
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	20010864 	.word	0x20010864

08013110 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801311a:	4b10      	ldr	r3, [pc, #64]	; (801315c <ip_reass_dequeue_datagram+0x4c>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	687a      	ldr	r2, [r7, #4]
 8013120:	429a      	cmp	r2, r3
 8013122:	d104      	bne.n	801312e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	4a0c      	ldr	r2, [pc, #48]	; (801315c <ip_reass_dequeue_datagram+0x4c>)
 801312a:	6013      	str	r3, [r2, #0]
 801312c:	e00d      	b.n	801314a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d106      	bne.n	8013142 <ip_reass_dequeue_datagram+0x32>
 8013134:	4b0a      	ldr	r3, [pc, #40]	; (8013160 <ip_reass_dequeue_datagram+0x50>)
 8013136:	f240 1245 	movw	r2, #325	; 0x145
 801313a:	490a      	ldr	r1, [pc, #40]	; (8013164 <ip_reass_dequeue_datagram+0x54>)
 801313c:	480a      	ldr	r0, [pc, #40]	; (8013168 <ip_reass_dequeue_datagram+0x58>)
 801313e:	f001 fc89 	bl	8014a54 <iprintf>
    prev->next = ipr->next;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681a      	ldr	r2, [r3, #0]
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801314a:	6879      	ldr	r1, [r7, #4]
 801314c:	2004      	movs	r0, #4
 801314e:	f7f5 fb25 	bl	800879c <memp_free>
}
 8013152:	bf00      	nop
 8013154:	3708      	adds	r7, #8
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	20010864 	.word	0x20010864
 8013160:	08017e1c 	.word	0x08017e1c
 8013164:	08017ee4 	.word	0x08017ee4
 8013168:	08017e64 	.word	0x08017e64

0801316c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b08c      	sub	sp, #48	; 0x30
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013178:	2300      	movs	r3, #0
 801317a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801317c:	2301      	movs	r3, #1
 801317e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013186:	69fb      	ldr	r3, [r7, #28]
 8013188:	885b      	ldrh	r3, [r3, #2]
 801318a:	b29b      	uxth	r3, r3
 801318c:	4618      	mov	r0, r3
 801318e:	f7f4 fdb7 	bl	8007d00 <lwip_htons>
 8013192:	4603      	mov	r3, r0
 8013194:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	f003 030f 	and.w	r3, r3, #15
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	009b      	lsls	r3, r3, #2
 80131a2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80131a4:	7e7b      	ldrb	r3, [r7, #25]
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	8b7a      	ldrh	r2, [r7, #26]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d202      	bcs.n	80131b4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80131ae:	f04f 33ff 	mov.w	r3, #4294967295
 80131b2:	e135      	b.n	8013420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80131b4:	7e7b      	ldrb	r3, [r7, #25]
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	8b7a      	ldrh	r2, [r7, #26]
 80131ba:	1ad3      	subs	r3, r2, r3
 80131bc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	88db      	ldrh	r3, [r3, #6]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7f4 fd9b 	bl	8007d00 <lwip_htons>
 80131ca:	4603      	mov	r3, r0
 80131cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80131d0:	b29b      	uxth	r3, r3
 80131d2:	00db      	lsls	r3, r3, #3
 80131d4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80131d6:	68bb      	ldr	r3, [r7, #8]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80131dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131de:	2200      	movs	r2, #0
 80131e0:	701a      	strb	r2, [r3, #0]
 80131e2:	2200      	movs	r2, #0
 80131e4:	705a      	strb	r2, [r3, #1]
 80131e6:	2200      	movs	r2, #0
 80131e8:	709a      	strb	r2, [r3, #2]
 80131ea:	2200      	movs	r2, #0
 80131ec:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80131ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f0:	8afa      	ldrh	r2, [r7, #22]
 80131f2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80131f4:	8afa      	ldrh	r2, [r7, #22]
 80131f6:	8b7b      	ldrh	r3, [r7, #26]
 80131f8:	4413      	add	r3, r2
 80131fa:	b29a      	uxth	r2, r3
 80131fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013202:	88db      	ldrh	r3, [r3, #6]
 8013204:	b29b      	uxth	r3, r3
 8013206:	8afa      	ldrh	r2, [r7, #22]
 8013208:	429a      	cmp	r2, r3
 801320a:	d902      	bls.n	8013212 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801320c:	f04f 33ff 	mov.w	r3, #4294967295
 8013210:	e106      	b.n	8013420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	685b      	ldr	r3, [r3, #4]
 8013216:	627b      	str	r3, [r7, #36]	; 0x24
 8013218:	e068      	b.n	80132ec <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013222:	889b      	ldrh	r3, [r3, #4]
 8013224:	b29a      	uxth	r2, r3
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	889b      	ldrh	r3, [r3, #4]
 801322a:	b29b      	uxth	r3, r3
 801322c:	429a      	cmp	r2, r3
 801322e:	d235      	bcs.n	801329c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013234:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013238:	2b00      	cmp	r3, #0
 801323a:	d020      	beq.n	801327e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801323e:	889b      	ldrh	r3, [r3, #4]
 8013240:	b29a      	uxth	r2, r3
 8013242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013244:	88db      	ldrh	r3, [r3, #6]
 8013246:	b29b      	uxth	r3, r3
 8013248:	429a      	cmp	r2, r3
 801324a:	d307      	bcc.n	801325c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801324e:	88db      	ldrh	r3, [r3, #6]
 8013250:	b29a      	uxth	r2, r3
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	889b      	ldrh	r3, [r3, #4]
 8013256:	b29b      	uxth	r3, r3
 8013258:	429a      	cmp	r2, r3
 801325a:	d902      	bls.n	8013262 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801325c:	f04f 33ff 	mov.w	r3, #4294967295
 8013260:	e0de      	b.n	8013420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013264:	68ba      	ldr	r2, [r7, #8]
 8013266:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801326a:	88db      	ldrh	r3, [r3, #6]
 801326c:	b29a      	uxth	r2, r3
 801326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013270:	889b      	ldrh	r3, [r3, #4]
 8013272:	b29b      	uxth	r3, r3
 8013274:	429a      	cmp	r2, r3
 8013276:	d03d      	beq.n	80132f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013278:	2300      	movs	r3, #0
 801327a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801327c:	e03a      	b.n	80132f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013280:	88db      	ldrh	r3, [r3, #6]
 8013282:	b29a      	uxth	r2, r3
 8013284:	693b      	ldr	r3, [r7, #16]
 8013286:	889b      	ldrh	r3, [r3, #4]
 8013288:	b29b      	uxth	r3, r3
 801328a:	429a      	cmp	r2, r3
 801328c:	d902      	bls.n	8013294 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801328e:	f04f 33ff 	mov.w	r3, #4294967295
 8013292:	e0c5      	b.n	8013420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	68ba      	ldr	r2, [r7, #8]
 8013298:	605a      	str	r2, [r3, #4]
      break;
 801329a:	e02b      	b.n	80132f4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329e:	889b      	ldrh	r3, [r3, #4]
 80132a0:	b29a      	uxth	r2, r3
 80132a2:	693b      	ldr	r3, [r7, #16]
 80132a4:	889b      	ldrh	r3, [r3, #4]
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d102      	bne.n	80132b2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132ac:	f04f 33ff 	mov.w	r3, #4294967295
 80132b0:	e0b6      	b.n	8013420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80132b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b4:	889b      	ldrh	r3, [r3, #4]
 80132b6:	b29a      	uxth	r2, r3
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	88db      	ldrh	r3, [r3, #6]
 80132bc:	b29b      	uxth	r3, r3
 80132be:	429a      	cmp	r2, r3
 80132c0:	d202      	bcs.n	80132c8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132c2:	f04f 33ff 	mov.w	r3, #4294967295
 80132c6:	e0ab      	b.n	8013420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80132c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d009      	beq.n	80132e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80132ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d0:	88db      	ldrh	r3, [r3, #6]
 80132d2:	b29a      	uxth	r2, r3
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	889b      	ldrh	r3, [r3, #4]
 80132d8:	b29b      	uxth	r3, r3
 80132da:	429a      	cmp	r2, r3
 80132dc:	d001      	beq.n	80132e2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80132de:	2300      	movs	r3, #0
 80132e0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80132ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d193      	bne.n	801321a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80132f2:	e000      	b.n	80132f6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80132f4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80132f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d12d      	bne.n	8013358 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80132fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d01c      	beq.n	801333c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013304:	88db      	ldrh	r3, [r3, #6]
 8013306:	b29a      	uxth	r2, r3
 8013308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801330a:	889b      	ldrh	r3, [r3, #4]
 801330c:	b29b      	uxth	r3, r3
 801330e:	429a      	cmp	r2, r3
 8013310:	d906      	bls.n	8013320 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013312:	4b45      	ldr	r3, [pc, #276]	; (8013428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013314:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013318:	4944      	ldr	r1, [pc, #272]	; (801342c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801331a:	4845      	ldr	r0, [pc, #276]	; (8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801331c:	f001 fb9a 	bl	8014a54 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013328:	88db      	ldrh	r3, [r3, #6]
 801332a:	b29a      	uxth	r2, r3
 801332c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801332e:	889b      	ldrh	r3, [r3, #4]
 8013330:	b29b      	uxth	r3, r3
 8013332:	429a      	cmp	r2, r3
 8013334:	d010      	beq.n	8013358 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013336:	2300      	movs	r3, #0
 8013338:	623b      	str	r3, [r7, #32]
 801333a:	e00d      	b.n	8013358 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	685b      	ldr	r3, [r3, #4]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d006      	beq.n	8013352 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013344:	4b38      	ldr	r3, [pc, #224]	; (8013428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013346:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801334a:	493a      	ldr	r1, [pc, #232]	; (8013434 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801334c:	4838      	ldr	r0, [pc, #224]	; (8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801334e:	f001 fb81 	bl	8014a54 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	68ba      	ldr	r2, [r7, #8]
 8013356:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d105      	bne.n	801336a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	7f9b      	ldrb	r3, [r3, #30]
 8013362:	f003 0301 	and.w	r3, r3, #1
 8013366:	2b00      	cmp	r3, #0
 8013368:	d059      	beq.n	801341e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801336a:	6a3b      	ldr	r3, [r7, #32]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d04f      	beq.n	8013410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	685b      	ldr	r3, [r3, #4]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d006      	beq.n	8013386 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	889b      	ldrh	r3, [r3, #4]
 8013380:	b29b      	uxth	r3, r3
 8013382:	2b00      	cmp	r3, #0
 8013384:	d002      	beq.n	801338c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013386:	2300      	movs	r3, #0
 8013388:	623b      	str	r3, [r7, #32]
 801338a:	e041      	b.n	8013410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801338e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013396:	e012      	b.n	80133be <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339a:	685b      	ldr	r3, [r3, #4]
 801339c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a0:	88db      	ldrh	r3, [r3, #6]
 80133a2:	b29a      	uxth	r2, r3
 80133a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a6:	889b      	ldrh	r3, [r3, #4]
 80133a8:	b29b      	uxth	r3, r3
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d002      	beq.n	80133b4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80133ae:	2300      	movs	r3, #0
 80133b0:	623b      	str	r3, [r7, #32]
            break;
 80133b2:	e007      	b.n	80133c4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80133b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80133b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80133be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d1e9      	bne.n	8013398 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80133c4:	6a3b      	ldr	r3, [r7, #32]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d022      	beq.n	8013410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d106      	bne.n	80133e0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80133d2:	4b15      	ldr	r3, [pc, #84]	; (8013428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80133d4:	f240 12df 	movw	r2, #479	; 0x1df
 80133d8:	4917      	ldr	r1, [pc, #92]	; (8013438 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80133da:	4815      	ldr	r0, [pc, #84]	; (8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80133dc:	f001 fb3a 	bl	8014a54 <iprintf>
          LWIP_ASSERT("sanity check",
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d106      	bne.n	80133fa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80133ec:	4b0e      	ldr	r3, [pc, #56]	; (8013428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80133ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80133f2:	4911      	ldr	r1, [pc, #68]	; (8013438 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80133f4:	480e      	ldr	r0, [pc, #56]	; (8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80133f6:	f001 fb2d 	bl	8014a54 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80133fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d006      	beq.n	8013410 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013402:	4b09      	ldr	r3, [pc, #36]	; (8013428 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013404:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013408:	490c      	ldr	r1, [pc, #48]	; (801343c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801340a:	4809      	ldr	r0, [pc, #36]	; (8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801340c:	f001 fb22 	bl	8014a54 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013410:	6a3b      	ldr	r3, [r7, #32]
 8013412:	2b00      	cmp	r3, #0
 8013414:	bf14      	ite	ne
 8013416:	2301      	movne	r3, #1
 8013418:	2300      	moveq	r3, #0
 801341a:	b2db      	uxtb	r3, r3
 801341c:	e000      	b.n	8013420 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801341e:	2300      	movs	r3, #0
}
 8013420:	4618      	mov	r0, r3
 8013422:	3730      	adds	r7, #48	; 0x30
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}
 8013428:	08017e1c 	.word	0x08017e1c
 801342c:	08017f00 	.word	0x08017f00
 8013430:	08017e64 	.word	0x08017e64
 8013434:	08017f20 	.word	0x08017f20
 8013438:	08017f58 	.word	0x08017f58
 801343c:	08017f68 	.word	0x08017f68

08013440 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013440:	b580      	push	{r7, lr}
 8013442:	b08e      	sub	sp, #56	; 0x38
 8013444:	af00      	add	r7, sp, #0
 8013446:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	685b      	ldr	r3, [r3, #4]
 801344c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	f003 030f 	and.w	r3, r3, #15
 8013456:	b2db      	uxtb	r3, r3
 8013458:	009b      	lsls	r3, r3, #2
 801345a:	b2db      	uxtb	r3, r3
 801345c:	2b14      	cmp	r3, #20
 801345e:	f040 8167 	bne.w	8013730 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013464:	88db      	ldrh	r3, [r3, #6]
 8013466:	b29b      	uxth	r3, r3
 8013468:	4618      	mov	r0, r3
 801346a:	f7f4 fc49 	bl	8007d00 <lwip_htons>
 801346e:	4603      	mov	r3, r0
 8013470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013474:	b29b      	uxth	r3, r3
 8013476:	00db      	lsls	r3, r3, #3
 8013478:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801347c:	885b      	ldrh	r3, [r3, #2]
 801347e:	b29b      	uxth	r3, r3
 8013480:	4618      	mov	r0, r3
 8013482:	f7f4 fc3d 	bl	8007d00 <lwip_htons>
 8013486:	4603      	mov	r3, r0
 8013488:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	f003 030f 	and.w	r3, r3, #15
 8013492:	b2db      	uxtb	r3, r3
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801349a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801349e:	b29b      	uxth	r3, r3
 80134a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80134a2:	429a      	cmp	r2, r3
 80134a4:	f0c0 8146 	bcc.w	8013734 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80134a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80134ac:	b29b      	uxth	r3, r3
 80134ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80134b0:	1ad3      	subs	r3, r2, r3
 80134b2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f7f6 f8af 	bl	8009618 <pbuf_clen>
 80134ba:	4603      	mov	r3, r0
 80134bc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80134be:	4b9f      	ldr	r3, [pc, #636]	; (801373c <ip4_reass+0x2fc>)
 80134c0:	881b      	ldrh	r3, [r3, #0]
 80134c2:	461a      	mov	r2, r3
 80134c4:	8c3b      	ldrh	r3, [r7, #32]
 80134c6:	4413      	add	r3, r2
 80134c8:	2b0a      	cmp	r3, #10
 80134ca:	dd10      	ble.n	80134ee <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80134cc:	8c3b      	ldrh	r3, [r7, #32]
 80134ce:	4619      	mov	r1, r3
 80134d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80134d2:	f7ff fd81 	bl	8012fd8 <ip_reass_remove_oldest_datagram>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	f000 812d 	beq.w	8013738 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80134de:	4b97      	ldr	r3, [pc, #604]	; (801373c <ip4_reass+0x2fc>)
 80134e0:	881b      	ldrh	r3, [r3, #0]
 80134e2:	461a      	mov	r2, r3
 80134e4:	8c3b      	ldrh	r3, [r7, #32]
 80134e6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80134e8:	2b0a      	cmp	r3, #10
 80134ea:	f300 8125 	bgt.w	8013738 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80134ee:	4b94      	ldr	r3, [pc, #592]	; (8013740 <ip4_reass+0x300>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	633b      	str	r3, [r7, #48]	; 0x30
 80134f4:	e015      	b.n	8013522 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80134f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f8:	695a      	ldr	r2, [r3, #20]
 80134fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fc:	68db      	ldr	r3, [r3, #12]
 80134fe:	429a      	cmp	r2, r3
 8013500:	d10c      	bne.n	801351c <ip4_reass+0xdc>
 8013502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013504:	699a      	ldr	r2, [r3, #24]
 8013506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013508:	691b      	ldr	r3, [r3, #16]
 801350a:	429a      	cmp	r2, r3
 801350c:	d106      	bne.n	801351c <ip4_reass+0xdc>
 801350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013510:	899a      	ldrh	r2, [r3, #12]
 8013512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013514:	889b      	ldrh	r3, [r3, #4]
 8013516:	b29b      	uxth	r3, r3
 8013518:	429a      	cmp	r2, r3
 801351a:	d006      	beq.n	801352a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	633b      	str	r3, [r7, #48]	; 0x30
 8013522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013524:	2b00      	cmp	r3, #0
 8013526:	d1e6      	bne.n	80134f6 <ip4_reass+0xb6>
 8013528:	e000      	b.n	801352c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801352a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352e:	2b00      	cmp	r3, #0
 8013530:	d109      	bne.n	8013546 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013532:	8c3b      	ldrh	r3, [r7, #32]
 8013534:	4619      	mov	r1, r3
 8013536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013538:	f7ff fdb0 	bl	801309c <ip_reass_enqueue_new_datagram>
 801353c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013540:	2b00      	cmp	r3, #0
 8013542:	d11c      	bne.n	801357e <ip4_reass+0x13e>
      goto nullreturn;
 8013544:	e109      	b.n	801375a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013548:	88db      	ldrh	r3, [r3, #6]
 801354a:	b29b      	uxth	r3, r3
 801354c:	4618      	mov	r0, r3
 801354e:	f7f4 fbd7 	bl	8007d00 <lwip_htons>
 8013552:	4603      	mov	r3, r0
 8013554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013558:	2b00      	cmp	r3, #0
 801355a:	d110      	bne.n	801357e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355e:	89db      	ldrh	r3, [r3, #14]
 8013560:	4618      	mov	r0, r3
 8013562:	f7f4 fbcd 	bl	8007d00 <lwip_htons>
 8013566:	4603      	mov	r3, r0
 8013568:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801356c:	2b00      	cmp	r3, #0
 801356e:	d006      	beq.n	801357e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013572:	3308      	adds	r3, #8
 8013574:	2214      	movs	r2, #20
 8013576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013578:	4618      	mov	r0, r3
 801357a:	f000 febd 	bl	80142f8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013580:	88db      	ldrh	r3, [r3, #6]
 8013582:	b29b      	uxth	r3, r3
 8013584:	f003 0320 	and.w	r3, r3, #32
 8013588:	2b00      	cmp	r3, #0
 801358a:	bf0c      	ite	eq
 801358c:	2301      	moveq	r3, #1
 801358e:	2300      	movne	r3, #0
 8013590:	b2db      	uxtb	r3, r3
 8013592:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013594:	69fb      	ldr	r3, [r7, #28]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d00e      	beq.n	80135b8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801359a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801359c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801359e:	4413      	add	r3, r2
 80135a0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80135a2:	8b7a      	ldrh	r2, [r7, #26]
 80135a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80135a6:	429a      	cmp	r2, r3
 80135a8:	f0c0 80a0 	bcc.w	80136ec <ip4_reass+0x2ac>
 80135ac:	8b7b      	ldrh	r3, [r7, #26]
 80135ae:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80135b2:	4293      	cmp	r3, r2
 80135b4:	f200 809a 	bhi.w	80136ec <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80135b8:	69fa      	ldr	r2, [r7, #28]
 80135ba:	6879      	ldr	r1, [r7, #4]
 80135bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135be:	f7ff fdd5 	bl	801316c <ip_reass_chain_frag_into_datagram_and_validate>
 80135c2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ca:	f000 8091 	beq.w	80136f0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80135ce:	4b5b      	ldr	r3, [pc, #364]	; (801373c <ip4_reass+0x2fc>)
 80135d0:	881a      	ldrh	r2, [r3, #0]
 80135d2:	8c3b      	ldrh	r3, [r7, #32]
 80135d4:	4413      	add	r3, r2
 80135d6:	b29a      	uxth	r2, r3
 80135d8:	4b58      	ldr	r3, [pc, #352]	; (801373c <ip4_reass+0x2fc>)
 80135da:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80135dc:	69fb      	ldr	r3, [r7, #28]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d00d      	beq.n	80135fe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80135e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80135e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135e6:	4413      	add	r3, r2
 80135e8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80135ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ec:	8a7a      	ldrh	r2, [r7, #18]
 80135ee:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80135f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f2:	7f9b      	ldrb	r3, [r3, #30]
 80135f4:	f043 0301 	orr.w	r3, r3, #1
 80135f8:	b2da      	uxtb	r2, r3
 80135fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	2b01      	cmp	r3, #1
 8013602:	d171      	bne.n	80136e8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013606:	8b9b      	ldrh	r3, [r3, #28]
 8013608:	3314      	adds	r3, #20
 801360a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360e:	685b      	ldr	r3, [r3, #4]
 8013610:	685b      	ldr	r3, [r3, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013620:	3308      	adds	r3, #8
 8013622:	2214      	movs	r2, #20
 8013624:	4619      	mov	r1, r3
 8013626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013628:	f000 fe66 	bl	80142f8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801362c:	8a3b      	ldrh	r3, [r7, #16]
 801362e:	4618      	mov	r0, r3
 8013630:	f7f4 fb66 	bl	8007d00 <lwip_htons>
 8013634:	4603      	mov	r3, r0
 8013636:	461a      	mov	r2, r3
 8013638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363e:	2200      	movs	r2, #0
 8013640:	719a      	strb	r2, [r3, #6]
 8013642:	2200      	movs	r2, #0
 8013644:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013648:	2200      	movs	r2, #0
 801364a:	729a      	strb	r2, [r3, #10]
 801364c:	2200      	movs	r2, #0
 801364e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013652:	685b      	ldr	r3, [r3, #4]
 8013654:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013656:	e00d      	b.n	8013674 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801365e:	2114      	movs	r1, #20
 8013660:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013662:	f7f5 fec5 	bl	80093f0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013666:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f7f6 f815 	bl	8009698 <pbuf_cat>
      r = iprh->next_pbuf;
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013676:	2b00      	cmp	r3, #0
 8013678:	d1ee      	bne.n	8013658 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801367a:	4b31      	ldr	r3, [pc, #196]	; (8013740 <ip4_reass+0x300>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013680:	429a      	cmp	r2, r3
 8013682:	d102      	bne.n	801368a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013684:	2300      	movs	r3, #0
 8013686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013688:	e010      	b.n	80136ac <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801368a:	4b2d      	ldr	r3, [pc, #180]	; (8013740 <ip4_reass+0x300>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013690:	e007      	b.n	80136a2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013698:	429a      	cmp	r2, r3
 801369a:	d006      	beq.n	80136aa <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801369c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80136a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d1f4      	bne.n	8013692 <ip4_reass+0x252>
 80136a8:	e000      	b.n	80136ac <ip4_reass+0x26c>
          break;
 80136aa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80136ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80136ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136b0:	f7ff fd2e 	bl	8013110 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80136b4:	6878      	ldr	r0, [r7, #4]
 80136b6:	f7f5 ffaf 	bl	8009618 <pbuf_clen>
 80136ba:	4603      	mov	r3, r0
 80136bc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80136be:	4b1f      	ldr	r3, [pc, #124]	; (801373c <ip4_reass+0x2fc>)
 80136c0:	881b      	ldrh	r3, [r3, #0]
 80136c2:	8c3a      	ldrh	r2, [r7, #32]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d906      	bls.n	80136d6 <ip4_reass+0x296>
 80136c8:	4b1e      	ldr	r3, [pc, #120]	; (8013744 <ip4_reass+0x304>)
 80136ca:	f240 229b 	movw	r2, #667	; 0x29b
 80136ce:	491e      	ldr	r1, [pc, #120]	; (8013748 <ip4_reass+0x308>)
 80136d0:	481e      	ldr	r0, [pc, #120]	; (801374c <ip4_reass+0x30c>)
 80136d2:	f001 f9bf 	bl	8014a54 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80136d6:	4b19      	ldr	r3, [pc, #100]	; (801373c <ip4_reass+0x2fc>)
 80136d8:	881a      	ldrh	r2, [r3, #0]
 80136da:	8c3b      	ldrh	r3, [r7, #32]
 80136dc:	1ad3      	subs	r3, r2, r3
 80136de:	b29a      	uxth	r2, r3
 80136e0:	4b16      	ldr	r3, [pc, #88]	; (801373c <ip4_reass+0x2fc>)
 80136e2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	e03c      	b.n	8013762 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80136e8:	2300      	movs	r3, #0
 80136ea:	e03a      	b.n	8013762 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80136ec:	bf00      	nop
 80136ee:	e000      	b.n	80136f2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80136f0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80136f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d106      	bne.n	8013706 <ip4_reass+0x2c6>
 80136f8:	4b12      	ldr	r3, [pc, #72]	; (8013744 <ip4_reass+0x304>)
 80136fa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80136fe:	4914      	ldr	r1, [pc, #80]	; (8013750 <ip4_reass+0x310>)
 8013700:	4812      	ldr	r0, [pc, #72]	; (801374c <ip4_reass+0x30c>)
 8013702:	f001 f9a7 	bl	8014a54 <iprintf>
  if (ipr->p == NULL) {
 8013706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d124      	bne.n	8013758 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801370e:	4b0c      	ldr	r3, [pc, #48]	; (8013740 <ip4_reass+0x300>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013714:	429a      	cmp	r2, r3
 8013716:	d006      	beq.n	8013726 <ip4_reass+0x2e6>
 8013718:	4b0a      	ldr	r3, [pc, #40]	; (8013744 <ip4_reass+0x304>)
 801371a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801371e:	490d      	ldr	r1, [pc, #52]	; (8013754 <ip4_reass+0x314>)
 8013720:	480a      	ldr	r0, [pc, #40]	; (801374c <ip4_reass+0x30c>)
 8013722:	f001 f997 	bl	8014a54 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013726:	2100      	movs	r1, #0
 8013728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801372a:	f7ff fcf1 	bl	8013110 <ip_reass_dequeue_datagram>
 801372e:	e014      	b.n	801375a <ip4_reass+0x31a>
    goto nullreturn;
 8013730:	bf00      	nop
 8013732:	e012      	b.n	801375a <ip4_reass+0x31a>
    goto nullreturn;
 8013734:	bf00      	nop
 8013736:	e010      	b.n	801375a <ip4_reass+0x31a>
      goto nullreturn;
 8013738:	bf00      	nop
 801373a:	e00e      	b.n	801375a <ip4_reass+0x31a>
 801373c:	20010868 	.word	0x20010868
 8013740:	20010864 	.word	0x20010864
 8013744:	08017e1c 	.word	0x08017e1c
 8013748:	08017f8c 	.word	0x08017f8c
 801374c:	08017e64 	.word	0x08017e64
 8013750:	08017fa8 	.word	0x08017fa8
 8013754:	08017fb4 	.word	0x08017fb4
  }

nullreturn:
 8013758:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f7f5 fece 	bl	80094fc <pbuf_free>
  return NULL;
 8013760:	2300      	movs	r3, #0
}
 8013762:	4618      	mov	r0, r3
 8013764:	3738      	adds	r7, #56	; 0x38
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}
 801376a:	bf00      	nop

0801376c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013770:	2005      	movs	r0, #5
 8013772:	f7f4 ff9d 	bl	80086b0 <memp_malloc>
 8013776:	4603      	mov	r3, r0
}
 8013778:	4618      	mov	r0, r3
 801377a:	bd80      	pop	{r7, pc}

0801377c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b082      	sub	sp, #8
 8013780:	af00      	add	r7, sp, #0
 8013782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d106      	bne.n	8013798 <ip_frag_free_pbuf_custom_ref+0x1c>
 801378a:	4b07      	ldr	r3, [pc, #28]	; (80137a8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801378c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013790:	4906      	ldr	r1, [pc, #24]	; (80137ac <ip_frag_free_pbuf_custom_ref+0x30>)
 8013792:	4807      	ldr	r0, [pc, #28]	; (80137b0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013794:	f001 f95e 	bl	8014a54 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013798:	6879      	ldr	r1, [r7, #4]
 801379a:	2005      	movs	r0, #5
 801379c:	f7f4 fffe 	bl	800879c <memp_free>
}
 80137a0:	bf00      	nop
 80137a2:	3708      	adds	r7, #8
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	08017e1c 	.word	0x08017e1c
 80137ac:	08017fd4 	.word	0x08017fd4
 80137b0:	08017e64 	.word	0x08017e64

080137b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b084      	sub	sp, #16
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d106      	bne.n	80137d4 <ipfrag_free_pbuf_custom+0x20>
 80137c6:	4b11      	ldr	r3, [pc, #68]	; (801380c <ipfrag_free_pbuf_custom+0x58>)
 80137c8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80137cc:	4910      	ldr	r1, [pc, #64]	; (8013810 <ipfrag_free_pbuf_custom+0x5c>)
 80137ce:	4811      	ldr	r0, [pc, #68]	; (8013814 <ipfrag_free_pbuf_custom+0x60>)
 80137d0:	f001 f940 	bl	8014a54 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80137d4:	68fa      	ldr	r2, [r7, #12]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	429a      	cmp	r2, r3
 80137da:	d006      	beq.n	80137ea <ipfrag_free_pbuf_custom+0x36>
 80137dc:	4b0b      	ldr	r3, [pc, #44]	; (801380c <ipfrag_free_pbuf_custom+0x58>)
 80137de:	f240 22cf 	movw	r2, #719	; 0x2cf
 80137e2:	490d      	ldr	r1, [pc, #52]	; (8013818 <ipfrag_free_pbuf_custom+0x64>)
 80137e4:	480b      	ldr	r0, [pc, #44]	; (8013814 <ipfrag_free_pbuf_custom+0x60>)
 80137e6:	f001 f935 	bl	8014a54 <iprintf>
  if (pcr->original != NULL) {
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	695b      	ldr	r3, [r3, #20]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d004      	beq.n	80137fc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	695b      	ldr	r3, [r3, #20]
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7f5 fe80 	bl	80094fc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80137fc:	68f8      	ldr	r0, [r7, #12]
 80137fe:	f7ff ffbd 	bl	801377c <ip_frag_free_pbuf_custom_ref>
}
 8013802:	bf00      	nop
 8013804:	3710      	adds	r7, #16
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}
 801380a:	bf00      	nop
 801380c:	08017e1c 	.word	0x08017e1c
 8013810:	08017fe0 	.word	0x08017fe0
 8013814:	08017e64 	.word	0x08017e64
 8013818:	08017fec 	.word	0x08017fec

0801381c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b094      	sub	sp, #80	; 0x50
 8013820:	af02      	add	r7, sp, #8
 8013822:	60f8      	str	r0, [r7, #12]
 8013824:	60b9      	str	r1, [r7, #8]
 8013826:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013828:	2300      	movs	r3, #0
 801382a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801382e:	68bb      	ldr	r3, [r7, #8]
 8013830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013832:	3b14      	subs	r3, #20
 8013834:	2b00      	cmp	r3, #0
 8013836:	da00      	bge.n	801383a <ip4_frag+0x1e>
 8013838:	3307      	adds	r3, #7
 801383a:	10db      	asrs	r3, r3, #3
 801383c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801383e:	2314      	movs	r3, #20
 8013840:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801384a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	f003 030f 	and.w	r3, r3, #15
 8013854:	b2db      	uxtb	r3, r3
 8013856:	009b      	lsls	r3, r3, #2
 8013858:	b2db      	uxtb	r3, r3
 801385a:	2b14      	cmp	r3, #20
 801385c:	d002      	beq.n	8013864 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801385e:	f06f 0305 	mvn.w	r3, #5
 8013862:	e110      	b.n	8013a86 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	895b      	ldrh	r3, [r3, #10]
 8013868:	2b13      	cmp	r3, #19
 801386a:	d809      	bhi.n	8013880 <ip4_frag+0x64>
 801386c:	4b88      	ldr	r3, [pc, #544]	; (8013a90 <ip4_frag+0x274>)
 801386e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013872:	4988      	ldr	r1, [pc, #544]	; (8013a94 <ip4_frag+0x278>)
 8013874:	4888      	ldr	r0, [pc, #544]	; (8013a98 <ip4_frag+0x27c>)
 8013876:	f001 f8ed 	bl	8014a54 <iprintf>
 801387a:	f06f 0305 	mvn.w	r3, #5
 801387e:	e102      	b.n	8013a86 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013882:	88db      	ldrh	r3, [r3, #6]
 8013884:	b29b      	uxth	r3, r3
 8013886:	4618      	mov	r0, r3
 8013888:	f7f4 fa3a 	bl	8007d00 <lwip_htons>
 801388c:	4603      	mov	r3, r0
 801388e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013890:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013892:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013896:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801389a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801389c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80138a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	891b      	ldrh	r3, [r3, #8]
 80138a6:	3b14      	subs	r3, #20
 80138a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80138ac:	e0e1      	b.n	8013a72 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80138ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80138b0:	00db      	lsls	r3, r3, #3
 80138b2:	b29b      	uxth	r3, r3
 80138b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138b8:	4293      	cmp	r3, r2
 80138ba:	bf28      	it	cs
 80138bc:	4613      	movcs	r3, r2
 80138be:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80138c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80138c4:	2114      	movs	r1, #20
 80138c6:	200e      	movs	r0, #14
 80138c8:	f7f5 fb34 	bl	8008f34 <pbuf_alloc>
 80138cc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80138ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	f000 80d5 	beq.w	8013a80 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80138d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138d8:	895b      	ldrh	r3, [r3, #10]
 80138da:	2b13      	cmp	r3, #19
 80138dc:	d806      	bhi.n	80138ec <ip4_frag+0xd0>
 80138de:	4b6c      	ldr	r3, [pc, #432]	; (8013a90 <ip4_frag+0x274>)
 80138e0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80138e4:	496d      	ldr	r1, [pc, #436]	; (8013a9c <ip4_frag+0x280>)
 80138e6:	486c      	ldr	r0, [pc, #432]	; (8013a98 <ip4_frag+0x27c>)
 80138e8:	f001 f8b4 	bl	8014a54 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80138ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	2214      	movs	r2, #20
 80138f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80138f4:	4618      	mov	r0, r3
 80138f6:	f000 fcff 	bl	80142f8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80138fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013900:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013902:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013906:	e064      	b.n	80139d2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	895a      	ldrh	r2, [r3, #10]
 801390c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801390e:	1ad3      	subs	r3, r2, r3
 8013910:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	895b      	ldrh	r3, [r3, #10]
 8013916:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013918:	429a      	cmp	r2, r3
 801391a:	d906      	bls.n	801392a <ip4_frag+0x10e>
 801391c:	4b5c      	ldr	r3, [pc, #368]	; (8013a90 <ip4_frag+0x274>)
 801391e:	f240 322d 	movw	r2, #813	; 0x32d
 8013922:	495f      	ldr	r1, [pc, #380]	; (8013aa0 <ip4_frag+0x284>)
 8013924:	485c      	ldr	r0, [pc, #368]	; (8013a98 <ip4_frag+0x27c>)
 8013926:	f001 f895 	bl	8014a54 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801392a:	8bfa      	ldrh	r2, [r7, #30]
 801392c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013930:	4293      	cmp	r3, r2
 8013932:	bf28      	it	cs
 8013934:	4613      	movcs	r3, r2
 8013936:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801393a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801393e:	2b00      	cmp	r3, #0
 8013940:	d105      	bne.n	801394e <ip4_frag+0x132>
        poff = 0;
 8013942:	2300      	movs	r3, #0
 8013944:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	60fb      	str	r3, [r7, #12]
        continue;
 801394c:	e041      	b.n	80139d2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801394e:	f7ff ff0d 	bl	801376c <ip_frag_alloc_pbuf_custom_ref>
 8013952:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013954:	69bb      	ldr	r3, [r7, #24]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d103      	bne.n	8013962 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801395a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801395c:	f7f5 fdce 	bl	80094fc <pbuf_free>
        goto memerr;
 8013960:	e08f      	b.n	8013a82 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013962:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013968:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801396a:	4413      	add	r3, r2
 801396c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013970:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013974:	9201      	str	r2, [sp, #4]
 8013976:	9300      	str	r3, [sp, #0]
 8013978:	4603      	mov	r3, r0
 801397a:	2241      	movs	r2, #65	; 0x41
 801397c:	2000      	movs	r0, #0
 801397e:	f7f5 fc03 	bl	8009188 <pbuf_alloced_custom>
 8013982:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d106      	bne.n	8013998 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801398a:	69b8      	ldr	r0, [r7, #24]
 801398c:	f7ff fef6 	bl	801377c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013992:	f7f5 fdb3 	bl	80094fc <pbuf_free>
        goto memerr;
 8013996:	e074      	b.n	8013a82 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013998:	68f8      	ldr	r0, [r7, #12]
 801399a:	f7f5 fe55 	bl	8009648 <pbuf_ref>
      pcr->original = p;
 801399e:	69bb      	ldr	r3, [r7, #24]
 80139a0:	68fa      	ldr	r2, [r7, #12]
 80139a2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80139a4:	69bb      	ldr	r3, [r7, #24]
 80139a6:	4a3f      	ldr	r2, [pc, #252]	; (8013aa4 <ip4_frag+0x288>)
 80139a8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80139aa:	6979      	ldr	r1, [r7, #20]
 80139ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139ae:	f7f5 fe73 	bl	8009698 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80139b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80139b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80139ba:	1ad3      	subs	r3, r2, r3
 80139bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80139c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d004      	beq.n	80139d2 <ip4_frag+0x1b6>
        poff = 0;
 80139c8:	2300      	movs	r3, #0
 80139ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80139d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d196      	bne.n	8013908 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80139da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80139dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80139e0:	4413      	add	r3, r2
 80139e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80139e8:	f1a3 0213 	sub.w	r2, r3, #19
 80139ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80139f0:	429a      	cmp	r2, r3
 80139f2:	bfcc      	ite	gt
 80139f4:	2301      	movgt	r3, #1
 80139f6:	2300      	movle	r3, #0
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80139fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013a04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013a06:	6a3b      	ldr	r3, [r7, #32]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d002      	beq.n	8013a12 <ip4_frag+0x1f6>
 8013a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d003      	beq.n	8013a1a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013a12:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013a18:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013a1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f7f4 f96f 	bl	8007d00 <lwip_htons>
 8013a22:	4603      	mov	r3, r0
 8013a24:	461a      	mov	r2, r3
 8013a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a28:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013a2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a2c:	3314      	adds	r3, #20
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7f4 f965 	bl	8007d00 <lwip_htons>
 8013a36:	4603      	mov	r3, r0
 8013a38:	461a      	mov	r2, r3
 8013a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a3c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a40:	2200      	movs	r2, #0
 8013a42:	729a      	strb	r2, [r3, #10]
 8013a44:	2200      	movs	r2, #0
 8013a46:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	695b      	ldr	r3, [r3, #20]
 8013a4c:	687a      	ldr	r2, [r7, #4]
 8013a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a50:	68b8      	ldr	r0, [r7, #8]
 8013a52:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a56:	f7f5 fd51 	bl	80094fc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013a5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a60:	1ad3      	subs	r3, r2, r3
 8013a62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013a66:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013a6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a6c:	4413      	add	r3, r2
 8013a6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013a72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f47f af19 	bne.w	80138ae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	e002      	b.n	8013a86 <ip4_frag+0x26a>
      goto memerr;
 8013a80:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	3748      	adds	r7, #72	; 0x48
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd80      	pop	{r7, pc}
 8013a8e:	bf00      	nop
 8013a90:	08017e1c 	.word	0x08017e1c
 8013a94:	08017ff8 	.word	0x08017ff8
 8013a98:	08017e64 	.word	0x08017e64
 8013a9c:	08018014 	.word	0x08018014
 8013aa0:	08018034 	.word	0x08018034
 8013aa4:	080137b5 	.word	0x080137b5

08013aa8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b086      	sub	sp, #24
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
 8013ab0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013ab2:	230e      	movs	r3, #14
 8013ab4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	895b      	ldrh	r3, [r3, #10]
 8013aba:	2b0e      	cmp	r3, #14
 8013abc:	d96e      	bls.n	8013b9c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	7bdb      	ldrb	r3, [r3, #15]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d106      	bne.n	8013ad4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013acc:	3301      	adds	r3, #1
 8013ace:	b2da      	uxtb	r2, r3
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013ada:	693b      	ldr	r3, [r7, #16]
 8013adc:	7b1a      	ldrb	r2, [r3, #12]
 8013ade:	7b5b      	ldrb	r3, [r3, #13]
 8013ae0:	021b      	lsls	r3, r3, #8
 8013ae2:	4313      	orrs	r3, r2
 8013ae4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	781b      	ldrb	r3, [r3, #0]
 8013aea:	f003 0301 	and.w	r3, r3, #1
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d023      	beq.n	8013b3a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013af2:	693b      	ldr	r3, [r7, #16]
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	2b01      	cmp	r3, #1
 8013af8:	d10f      	bne.n	8013b1a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013afa:	693b      	ldr	r3, [r7, #16]
 8013afc:	785b      	ldrb	r3, [r3, #1]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d11b      	bne.n	8013b3a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013b06:	2b5e      	cmp	r3, #94	; 0x5e
 8013b08:	d117      	bne.n	8013b3a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	7b5b      	ldrb	r3, [r3, #13]
 8013b0e:	f043 0310 	orr.w	r3, r3, #16
 8013b12:	b2da      	uxtb	r2, r3
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	735a      	strb	r2, [r3, #13]
 8013b18:	e00f      	b.n	8013b3a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	2206      	movs	r2, #6
 8013b1e:	4928      	ldr	r1, [pc, #160]	; (8013bc0 <ethernet_input+0x118>)
 8013b20:	4618      	mov	r0, r3
 8013b22:	f000 fbdb 	bl	80142dc <memcmp>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d106      	bne.n	8013b3a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	7b5b      	ldrb	r3, [r3, #13]
 8013b30:	f043 0308 	orr.w	r3, r3, #8
 8013b34:	b2da      	uxtb	r2, r3
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013b3a:	89fb      	ldrh	r3, [r7, #14]
 8013b3c:	2b08      	cmp	r3, #8
 8013b3e:	d003      	beq.n	8013b48 <ethernet_input+0xa0>
 8013b40:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013b44:	d014      	beq.n	8013b70 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013b46:	e032      	b.n	8013bae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b4e:	f003 0308 	and.w	r3, r3, #8
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d024      	beq.n	8013ba0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013b56:	8afb      	ldrh	r3, [r7, #22]
 8013b58:	4619      	mov	r1, r3
 8013b5a:	6878      	ldr	r0, [r7, #4]
 8013b5c:	f7f5 fc48 	bl	80093f0 <pbuf_remove_header>
 8013b60:	4603      	mov	r3, r0
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d11e      	bne.n	8013ba4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013b66:	6839      	ldr	r1, [r7, #0]
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f7fe ff09 	bl	8012980 <ip4_input>
      break;
 8013b6e:	e013      	b.n	8013b98 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b76:	f003 0308 	and.w	r3, r3, #8
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d014      	beq.n	8013ba8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013b7e:	8afb      	ldrh	r3, [r7, #22]
 8013b80:	4619      	mov	r1, r3
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f7f5 fc34 	bl	80093f0 <pbuf_remove_header>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d10e      	bne.n	8013bac <ethernet_input+0x104>
        etharp_input(p, netif);
 8013b8e:	6839      	ldr	r1, [r7, #0]
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f7fe f8a5 	bl	8011ce0 <etharp_input>
      break;
 8013b96:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	e00c      	b.n	8013bb6 <ethernet_input+0x10e>
    goto free_and_return;
 8013b9c:	bf00      	nop
 8013b9e:	e006      	b.n	8013bae <ethernet_input+0x106>
        goto free_and_return;
 8013ba0:	bf00      	nop
 8013ba2:	e004      	b.n	8013bae <ethernet_input+0x106>
        goto free_and_return;
 8013ba4:	bf00      	nop
 8013ba6:	e002      	b.n	8013bae <ethernet_input+0x106>
        goto free_and_return;
 8013ba8:	bf00      	nop
 8013baa:	e000      	b.n	8013bae <ethernet_input+0x106>
        goto free_and_return;
 8013bac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7f5 fca4 	bl	80094fc <pbuf_free>
  return ERR_OK;
 8013bb4:	2300      	movs	r3, #0
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3718      	adds	r7, #24
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	08018224 	.word	0x08018224

08013bc4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b086      	sub	sp, #24
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	60f8      	str	r0, [r7, #12]
 8013bcc:	60b9      	str	r1, [r7, #8]
 8013bce:	607a      	str	r2, [r7, #4]
 8013bd0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013bd2:	8c3b      	ldrh	r3, [r7, #32]
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7f4 f893 	bl	8007d00 <lwip_htons>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013bde:	210e      	movs	r1, #14
 8013be0:	68b8      	ldr	r0, [r7, #8]
 8013be2:	f7f5 fbf5 	bl	80093d0 <pbuf_add_header>
 8013be6:	4603      	mov	r3, r0
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d125      	bne.n	8013c38 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	8afa      	ldrh	r2, [r7, #22]
 8013bf6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013bf8:	693b      	ldr	r3, [r7, #16]
 8013bfa:	2206      	movs	r2, #6
 8013bfc:	6839      	ldr	r1, [r7, #0]
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f000 fb7a 	bl	80142f8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013c04:	693b      	ldr	r3, [r7, #16]
 8013c06:	3306      	adds	r3, #6
 8013c08:	2206      	movs	r2, #6
 8013c0a:	6879      	ldr	r1, [r7, #4]
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f000 fb73 	bl	80142f8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c18:	2b06      	cmp	r3, #6
 8013c1a:	d006      	beq.n	8013c2a <ethernet_output+0x66>
 8013c1c:	4b0a      	ldr	r3, [pc, #40]	; (8013c48 <ethernet_output+0x84>)
 8013c1e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013c22:	490a      	ldr	r1, [pc, #40]	; (8013c4c <ethernet_output+0x88>)
 8013c24:	480a      	ldr	r0, [pc, #40]	; (8013c50 <ethernet_output+0x8c>)
 8013c26:	f000 ff15 	bl	8014a54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	699b      	ldr	r3, [r3, #24]
 8013c2e:	68b9      	ldr	r1, [r7, #8]
 8013c30:	68f8      	ldr	r0, [r7, #12]
 8013c32:	4798      	blx	r3
 8013c34:	4603      	mov	r3, r0
 8013c36:	e002      	b.n	8013c3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013c38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013c3a:	f06f 0301 	mvn.w	r3, #1
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3718      	adds	r7, #24
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	08018044 	.word	0x08018044
 8013c4c:	0801807c 	.word	0x0801807c
 8013c50:	080180b0 	.word	0x080180b0

08013c54 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b086      	sub	sp, #24
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	60bb      	str	r3, [r7, #8]
 8013c62:	2304      	movs	r3, #4
 8013c64:	60fb      	str	r3, [r7, #12]
 8013c66:	2300      	movs	r3, #0
 8013c68:	613b      	str	r3, [r7, #16]
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013c6e:	f107 0308 	add.w	r3, r7, #8
 8013c72:	2100      	movs	r1, #0
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7f1 f961 	bl	8004f3c <osMessageCreate>
 8013c7a:	4602      	mov	r2, r0
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d102      	bne.n	8013c8e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013c88:	f04f 33ff 	mov.w	r3, #4294967295
 8013c8c:	e000      	b.n	8013c90 <sys_mbox_new+0x3c>

  return ERR_OK;
 8013c8e:	2300      	movs	r3, #0
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3718      	adds	r7, #24
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}

08013c98 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b084      	sub	sp, #16
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
 8013ca0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	6839      	ldr	r1, [r7, #0]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7f1 f96e 	bl	8004f8c <osMessagePut>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d102      	bne.n	8013cbc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8013cb6:	2300      	movs	r3, #0
 8013cb8:	73fb      	strb	r3, [r7, #15]
 8013cba:	e001      	b.n	8013cc0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013cbc:	23ff      	movs	r3, #255	; 0xff
 8013cbe:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	3710      	adds	r7, #16
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}

08013ccc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b08c      	sub	sp, #48	; 0x30
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	61f8      	str	r0, [r7, #28]
 8013cd4:	61b9      	str	r1, [r7, #24]
 8013cd6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8013cd8:	f7f0 ffa0 	bl	8004c1c <osKernelSysTick>
 8013cdc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d017      	beq.n	8013d14 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	6819      	ldr	r1, [r3, #0]
 8013ce8:	f107 0320 	add.w	r3, r7, #32
 8013cec:	697a      	ldr	r2, [r7, #20]
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7f1 f98c 	bl	800500c <osMessageGet>

    if(event.status == osEventMessage)
 8013cf4:	6a3b      	ldr	r3, [r7, #32]
 8013cf6:	2b10      	cmp	r3, #16
 8013cf8:	d109      	bne.n	8013d0e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8013d02:	f7f0 ff8b 	bl	8004c1c <osKernelSysTick>
 8013d06:	4602      	mov	r2, r0
 8013d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d0a:	1ad3      	subs	r3, r2, r3
 8013d0c:	e019      	b.n	8013d42 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8013d12:	e016      	b.n	8013d42 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8013d14:	69fb      	ldr	r3, [r7, #28]
 8013d16:	6819      	ldr	r1, [r3, #0]
 8013d18:	463b      	mov	r3, r7
 8013d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7f1 f974 	bl	800500c <osMessageGet>
 8013d24:	f107 0320 	add.w	r3, r7, #32
 8013d28:	463a      	mov	r2, r7
 8013d2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8013d2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d32:	461a      	mov	r2, r3
 8013d34:	69bb      	ldr	r3, [r7, #24]
 8013d36:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013d38:	f7f0 ff70 	bl	8004c1c <osKernelSysTick>
 8013d3c:	4602      	mov	r2, r0
 8013d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d40:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3730      	adds	r7, #48	; 0x30
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}

08013d4a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013d4a:	b480      	push	{r7}
 8013d4c:	b083      	sub	sp, #12
 8013d4e:	af00      	add	r7, sp, #0
 8013d50:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d101      	bne.n	8013d5e <sys_mbox_valid+0x14>
    return 0;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	e000      	b.n	8013d60 <sys_mbox_valid+0x16>
  else
    return 1;
 8013d5e:	2301      	movs	r3, #1
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	370c      	adds	r7, #12
 8013d64:	46bd      	mov	sp, r7
 8013d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d6a:	4770      	bx	lr

08013d6c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013d70:	4803      	ldr	r0, [pc, #12]	; (8013d80 <sys_init+0x14>)
 8013d72:	f7f0 ffc3 	bl	8004cfc <osMutexCreate>
 8013d76:	4603      	mov	r3, r0
 8013d78:	4a02      	ldr	r2, [pc, #8]	; (8013d84 <sys_init+0x18>)
 8013d7a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013d7c:	bf00      	nop
 8013d7e:	bd80      	pop	{r7, pc}
 8013d80:	08018234 	.word	0x08018234
 8013d84:	20018d80 	.word	0x20018d80

08013d88 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013d88:	b580      	push	{r7, lr}
 8013d8a:	b084      	sub	sp, #16
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013d90:	2300      	movs	r3, #0
 8013d92:	60bb      	str	r3, [r7, #8]
 8013d94:	2300      	movs	r3, #0
 8013d96:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013d98:	f107 0308 	add.w	r3, r7, #8
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7f0 ffad 	bl	8004cfc <osMutexCreate>
 8013da2:	4602      	mov	r2, r0
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d102      	bne.n	8013db6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013db0:	f04f 33ff 	mov.w	r3, #4294967295
 8013db4:	e000      	b.n	8013db8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013db6:	2300      	movs	r3, #0
}
 8013db8:	4618      	mov	r0, r3
 8013dba:	3710      	adds	r7, #16
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7f0 ffab 	bl	8004d2c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8013dd6:	bf00      	nop
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b082      	sub	sp, #8
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7f0 ffec 	bl	8004dc8 <osMutexRelease>
}
 8013df0:	bf00      	nop
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b08c      	sub	sp, #48	; 0x30
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	60f8      	str	r0, [r7, #12]
 8013e00:	60b9      	str	r1, [r7, #8]
 8013e02:	607a      	str	r2, [r7, #4]
 8013e04:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8013e06:	f107 0314 	add.w	r3, r7, #20
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	601a      	str	r2, [r3, #0]
 8013e0e:	605a      	str	r2, [r3, #4]
 8013e10:	609a      	str	r2, [r3, #8]
 8013e12:	60da      	str	r2, [r3, #12]
 8013e14:	611a      	str	r2, [r3, #16]
 8013e16:	615a      	str	r2, [r3, #20]
 8013e18:	619a      	str	r2, [r3, #24]
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	617b      	str	r3, [r7, #20]
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	61bb      	str	r3, [r7, #24]
 8013e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e24:	b21b      	sxth	r3, r3
 8013e26:	83bb      	strh	r3, [r7, #28]
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013e2c:	f107 0314 	add.w	r3, r7, #20
 8013e30:	6879      	ldr	r1, [r7, #4]
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7f0 ff02 	bl	8004c3c <osThreadCreate>
 8013e38:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3730      	adds	r7, #48	; 0x30
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}
	...

08013e44 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013e48:	4b04      	ldr	r3, [pc, #16]	; (8013e5c <sys_arch_protect+0x18>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7f0 ff6b 	bl	8004d2c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8013e56:	2301      	movs	r3, #1
}
 8013e58:	4618      	mov	r0, r3
 8013e5a:	bd80      	pop	{r7, pc}
 8013e5c:	20018d80 	.word	0x20018d80

08013e60 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b082      	sub	sp, #8
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013e68:	4b04      	ldr	r3, [pc, #16]	; (8013e7c <sys_arch_unprotect+0x1c>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	4618      	mov	r0, r3
 8013e6e:	f7f0 ffab 	bl	8004dc8 <osMutexRelease>
}
 8013e72:	bf00      	nop
 8013e74:	3708      	adds	r7, #8
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}
 8013e7a:	bf00      	nop
 8013e7c:	20018d80 	.word	0x20018d80

08013e80 <__io_putchar>:

/********************** Exported Function Definitions *************************/

QueueHandle_t shell_queue_send;

uint8_t __io_putchar(uint8_t ch){
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	4603      	mov	r3, r0
 8013e88:	71fb      	strb	r3, [r7, #7]
	xQueueSend(shell_queue_send,&ch,(TickType_t)100);
 8013e8a:	4b06      	ldr	r3, [pc, #24]	; (8013ea4 <__io_putchar+0x24>)
 8013e8c:	6818      	ldr	r0, [r3, #0]
 8013e8e:	1df9      	adds	r1, r7, #7
 8013e90:	2300      	movs	r3, #0
 8013e92:	2264      	movs	r2, #100	; 0x64
 8013e94:	f7f1 fb68 	bl	8005568 <xQueueGenericSend>
	return ch;
 8013e98:	79fb      	ldrb	r3, [r7, #7]
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3708      	adds	r7, #8
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}
 8013ea2:	bf00      	nop
 8013ea4:	20018d84 	.word	0x20018d84

08013ea8 <fifo_get>:
        return 0;
    }
}

uint8_t fifo_get(fifo_t* p_fifo, void * item)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	6039      	str	r1, [r7, #0]
    if (!fifo_is_empty(p_fifo)) {
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f000 f815 	bl	8013ee2 <fifo_is_empty>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d10c      	bne.n	8013ed8 <fifo_get+0x30>
        fifo_copy_from(p_fifo, item);
 8013ebe:	6839      	ldr	r1, [r7, #0]
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f000 f81f 	bl	8013f04 <fifo_copy_from>
        p_fifo->storedbytes -= p_fifo->itemsize;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	691a      	ldr	r2, [r3, #16]
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	685b      	ldr	r3, [r3, #4]
 8013ece:	1ad2      	subs	r2, r2, r3
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	611a      	str	r2, [r3, #16]
        return 1;
 8013ed4:	2301      	movs	r3, #1
 8013ed6:	e000      	b.n	8013eda <fifo_get+0x32>
    } else {
        return 0;
 8013ed8:	2300      	movs	r3, #0
    }
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3708      	adds	r7, #8
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}

08013ee2 <fifo_is_empty>:
    else
        return 0;
}

uint8_t fifo_is_empty(fifo_t* p_fifo)
{
 8013ee2:	b480      	push	{r7}
 8013ee4:	b083      	sub	sp, #12
 8013ee6:	af00      	add	r7, sp, #0
 8013ee8:	6078      	str	r0, [r7, #4]
    if (p_fifo->storedbytes == 0)
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	691b      	ldr	r3, [r3, #16]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d101      	bne.n	8013ef6 <fifo_is_empty+0x14>
        return 1;
 8013ef2:	2301      	movs	r3, #1
 8013ef4:	e000      	b.n	8013ef8 <fifo_is_empty+0x16>
    else
        return 0;
 8013ef6:	2300      	movs	r3, #0
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	370c      	adds	r7, #12
 8013efc:	46bd      	mov	sp, r7
 8013efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f02:	4770      	bx	lr

08013f04 <fifo_copy_from>:
    return 0;
}

/********************* Internal Function Definitions *************************/
static void fifo_copy_from(fifo_t* p_fifo, void * item)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	6039      	str	r1, [r7, #0]
    memcpy(item, (uint8_t*)p_fifo->itemspace + p_fifo->readoffset, p_fifo->itemsize);
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	8992      	ldrh	r2, [r2, #12]
 8013f16:	1899      	adds	r1, r3, r2
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	685b      	ldr	r3, [r3, #4]
 8013f1c:	461a      	mov	r2, r3
 8013f1e:	6838      	ldr	r0, [r7, #0]
 8013f20:	f000 f9ea 	bl	80142f8 <memcpy>
    p_fifo->readoffset += p_fifo->itemsize;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	899a      	ldrh	r2, [r3, #12]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	685b      	ldr	r3, [r3, #4]
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	4413      	add	r3, r2
 8013f30:	b29a      	uxth	r2, r3
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	819a      	strh	r2, [r3, #12]
    if (p_fifo->readoffset >= p_fifo->allocatedbytes) {
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	899b      	ldrh	r3, [r3, #12]
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	689b      	ldr	r3, [r3, #8]
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d302      	bcc.n	8013f4a <fifo_copy_from+0x46>
        p_fifo->readoffset = 0;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2200      	movs	r2, #0
 8013f48:	819a      	strh	r2, [r3, #12]
    }
}
 8013f4a:	bf00      	nop
 8013f4c:	3708      	adds	r7, #8
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
	...

08013f54 <serial_get_char>:

  return 0;
}


int serial_get_char(uint8_t *c) {
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b084      	sub	sp, #16
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
  uint8_t item = 0;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	73fb      	strb	r3, [r7, #15]

  if (fifo_is_empty(&shell_fifo) == 1) {
 8013f60:	480d      	ldr	r0, [pc, #52]	; (8013f98 <serial_get_char+0x44>)
 8013f62:	f7ff ffbe 	bl	8013ee2 <fifo_is_empty>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b01      	cmp	r3, #1
 8013f6a:	d101      	bne.n	8013f70 <serial_get_char+0x1c>
    return 0;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	e00e      	b.n	8013f8e <serial_get_char+0x3a>
  }

  if(fifo_get(&shell_fifo, &item) == 1) {
 8013f70:	f107 030f 	add.w	r3, r7, #15
 8013f74:	4619      	mov	r1, r3
 8013f76:	4808      	ldr	r0, [pc, #32]	; (8013f98 <serial_get_char+0x44>)
 8013f78:	f7ff ff96 	bl	8013ea8 <fifo_get>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	d104      	bne.n	8013f8c <serial_get_char+0x38>
    *c = item;
 8013f82:	7bfa      	ldrb	r2, [r7, #15]
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	701a      	strb	r2, [r3, #0]
    return 1;
 8013f88:	2301      	movs	r3, #1
 8013f8a:	e000      	b.n	8013f8e <serial_get_char+0x3a>
  }

  return 0;
 8013f8c:	2300      	movs	r3, #0
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3710      	adds	r7, #16
 8013f92:	46bd      	mov	sp, r7
 8013f94:	bd80      	pop	{r7, pc}
 8013f96:	bf00      	nop
 8013f98:	20018e58 	.word	0x20018e58

08013f9c <__io_getchar>:
#endif
	return ch;
}

uint8_t __io_getchar(void)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b082      	sub	sp, #8
 8013fa0:	af00      	add	r7, sp, #0
	uint8_t ch;
  int ret = serial_get_char((uint8_t*)&ch);
 8013fa2:	1cfb      	adds	r3, r7, #3
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7ff ffd5 	bl	8013f54 <serial_get_char>
 8013faa:	6078      	str	r0, [r7, #4]

  return (ret == 1) ? ch : 0;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2b01      	cmp	r3, #1
 8013fb0:	d101      	bne.n	8013fb6 <__io_getchar+0x1a>
 8013fb2:	78fb      	ldrb	r3, [r7, #3]
 8013fb4:	e000      	b.n	8013fb8 <__io_getchar+0x1c>
 8013fb6:	2300      	movs	r3, #0
}
 8013fb8:	4618      	mov	r0, r3
 8013fba:	3708      	adds	r7, #8
 8013fbc:	46bd      	mov	sp, r7
 8013fbe:	bd80      	pop	{r7, pc}

08013fc0 <_read>:
    return ch;
}
#elif defined(__GNUC__)

int _read(int file, char *ptr, int len)
{
 8013fc0:	b590      	push	{r4, r7, lr}
 8013fc2:	b087      	sub	sp, #28
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8013fcc:	2300      	movs	r3, #0
 8013fce:	617b      	str	r3, [r7, #20]
 8013fd0:	e009      	b.n	8013fe6 <_read+0x26>
    *ptr++ = __io_getchar();
 8013fd2:	68bc      	ldr	r4, [r7, #8]
 8013fd4:	1c63      	adds	r3, r4, #1
 8013fd6:	60bb      	str	r3, [r7, #8]
 8013fd8:	f7ff ffe0 	bl	8013f9c <__io_getchar>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	7023      	strb	r3, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	3301      	adds	r3, #1
 8013fe4:	617b      	str	r3, [r7, #20]
 8013fe6:	697a      	ldr	r2, [r7, #20]
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	429a      	cmp	r2, r3
 8013fec:	dbf1      	blt.n	8013fd2 <_read+0x12>
  }

  return len;
 8013fee:	687b      	ldr	r3, [r7, #4]
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	371c      	adds	r7, #28
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd90      	pop	{r4, r7, pc}

08013ff8 <_write>:

int _write(int file, char *ptr, int len)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b086      	sub	sp, #24
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	60b9      	str	r1, [r7, #8]
 8014002:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014004:	2300      	movs	r3, #0
 8014006:	617b      	str	r3, [r7, #20]
 8014008:	e009      	b.n	801401e <_write+0x26>
	{
		__io_putchar(*ptr++);
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	1c5a      	adds	r2, r3, #1
 801400e:	60ba      	str	r2, [r7, #8]
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	4618      	mov	r0, r3
 8014014:	f7ff ff34 	bl	8013e80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	3301      	adds	r3, #1
 801401c:	617b      	str	r3, [r7, #20]
 801401e:	697a      	ldr	r2, [r7, #20]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	429a      	cmp	r2, r3
 8014024:	dbf1      	blt.n	801400a <_write+0x12>
	}
  return len;
 8014026:	687b      	ldr	r3, [r7, #4]
}
 8014028:	4618      	mov	r0, r3
 801402a:	3718      	adds	r7, #24
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}

08014030 <__assert_func>:
 8014030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014032:	4614      	mov	r4, r2
 8014034:	461a      	mov	r2, r3
 8014036:	4b09      	ldr	r3, [pc, #36]	; (801405c <__assert_func+0x2c>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	4605      	mov	r5, r0
 801403c:	68d8      	ldr	r0, [r3, #12]
 801403e:	b14c      	cbz	r4, 8014054 <__assert_func+0x24>
 8014040:	4b07      	ldr	r3, [pc, #28]	; (8014060 <__assert_func+0x30>)
 8014042:	9100      	str	r1, [sp, #0]
 8014044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014048:	4906      	ldr	r1, [pc, #24]	; (8014064 <__assert_func+0x34>)
 801404a:	462b      	mov	r3, r5
 801404c:	f000 f8e4 	bl	8014218 <fiprintf>
 8014050:	f000 fee8 	bl	8014e24 <abort>
 8014054:	4b04      	ldr	r3, [pc, #16]	; (8014068 <__assert_func+0x38>)
 8014056:	461c      	mov	r4, r3
 8014058:	e7f3      	b.n	8014042 <__assert_func+0x12>
 801405a:	bf00      	nop
 801405c:	20000034 	.word	0x20000034
 8014060:	0801823c 	.word	0x0801823c
 8014064:	08018249 	.word	0x08018249
 8014068:	08018277 	.word	0x08018277

0801406c <std>:
 801406c:	2300      	movs	r3, #0
 801406e:	b510      	push	{r4, lr}
 8014070:	4604      	mov	r4, r0
 8014072:	e9c0 3300 	strd	r3, r3, [r0]
 8014076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801407a:	6083      	str	r3, [r0, #8]
 801407c:	8181      	strh	r1, [r0, #12]
 801407e:	6643      	str	r3, [r0, #100]	; 0x64
 8014080:	81c2      	strh	r2, [r0, #14]
 8014082:	6183      	str	r3, [r0, #24]
 8014084:	4619      	mov	r1, r3
 8014086:	2208      	movs	r2, #8
 8014088:	305c      	adds	r0, #92	; 0x5c
 801408a:	f000 f943 	bl	8014314 <memset>
 801408e:	4b05      	ldr	r3, [pc, #20]	; (80140a4 <std+0x38>)
 8014090:	6263      	str	r3, [r4, #36]	; 0x24
 8014092:	4b05      	ldr	r3, [pc, #20]	; (80140a8 <std+0x3c>)
 8014094:	62a3      	str	r3, [r4, #40]	; 0x28
 8014096:	4b05      	ldr	r3, [pc, #20]	; (80140ac <std+0x40>)
 8014098:	62e3      	str	r3, [r4, #44]	; 0x2c
 801409a:	4b05      	ldr	r3, [pc, #20]	; (80140b0 <std+0x44>)
 801409c:	6224      	str	r4, [r4, #32]
 801409e:	6323      	str	r3, [r4, #48]	; 0x30
 80140a0:	bd10      	pop	{r4, pc}
 80140a2:	bf00      	nop
 80140a4:	08014bf9 	.word	0x08014bf9
 80140a8:	08014c1b 	.word	0x08014c1b
 80140ac:	08014c53 	.word	0x08014c53
 80140b0:	08014c77 	.word	0x08014c77

080140b4 <_cleanup_r>:
 80140b4:	4901      	ldr	r1, [pc, #4]	; (80140bc <_cleanup_r+0x8>)
 80140b6:	f000 b8c1 	b.w	801423c <_fwalk_reent>
 80140ba:	bf00      	nop
 80140bc:	08014f61 	.word	0x08014f61

080140c0 <__sfmoreglue>:
 80140c0:	b570      	push	{r4, r5, r6, lr}
 80140c2:	1e4a      	subs	r2, r1, #1
 80140c4:	2568      	movs	r5, #104	; 0x68
 80140c6:	4355      	muls	r5, r2
 80140c8:	460e      	mov	r6, r1
 80140ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80140ce:	f000 f979 	bl	80143c4 <_malloc_r>
 80140d2:	4604      	mov	r4, r0
 80140d4:	b140      	cbz	r0, 80140e8 <__sfmoreglue+0x28>
 80140d6:	2100      	movs	r1, #0
 80140d8:	e9c0 1600 	strd	r1, r6, [r0]
 80140dc:	300c      	adds	r0, #12
 80140de:	60a0      	str	r0, [r4, #8]
 80140e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80140e4:	f000 f916 	bl	8014314 <memset>
 80140e8:	4620      	mov	r0, r4
 80140ea:	bd70      	pop	{r4, r5, r6, pc}

080140ec <__sfp_lock_acquire>:
 80140ec:	4801      	ldr	r0, [pc, #4]	; (80140f4 <__sfp_lock_acquire+0x8>)
 80140ee:	f000 b8ea 	b.w	80142c6 <__retarget_lock_acquire_recursive>
 80140f2:	bf00      	nop
 80140f4:	20018e74 	.word	0x20018e74

080140f8 <__sfp_lock_release>:
 80140f8:	4801      	ldr	r0, [pc, #4]	; (8014100 <__sfp_lock_release+0x8>)
 80140fa:	f000 b8e5 	b.w	80142c8 <__retarget_lock_release_recursive>
 80140fe:	bf00      	nop
 8014100:	20018e74 	.word	0x20018e74

08014104 <__sinit_lock_acquire>:
 8014104:	4801      	ldr	r0, [pc, #4]	; (801410c <__sinit_lock_acquire+0x8>)
 8014106:	f000 b8de 	b.w	80142c6 <__retarget_lock_acquire_recursive>
 801410a:	bf00      	nop
 801410c:	20018e6f 	.word	0x20018e6f

08014110 <__sinit_lock_release>:
 8014110:	4801      	ldr	r0, [pc, #4]	; (8014118 <__sinit_lock_release+0x8>)
 8014112:	f000 b8d9 	b.w	80142c8 <__retarget_lock_release_recursive>
 8014116:	bf00      	nop
 8014118:	20018e6f 	.word	0x20018e6f

0801411c <__sinit>:
 801411c:	b510      	push	{r4, lr}
 801411e:	4604      	mov	r4, r0
 8014120:	f7ff fff0 	bl	8014104 <__sinit_lock_acquire>
 8014124:	69a3      	ldr	r3, [r4, #24]
 8014126:	b11b      	cbz	r3, 8014130 <__sinit+0x14>
 8014128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801412c:	f7ff bff0 	b.w	8014110 <__sinit_lock_release>
 8014130:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014134:	6523      	str	r3, [r4, #80]	; 0x50
 8014136:	4b13      	ldr	r3, [pc, #76]	; (8014184 <__sinit+0x68>)
 8014138:	4a13      	ldr	r2, [pc, #76]	; (8014188 <__sinit+0x6c>)
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	62a2      	str	r2, [r4, #40]	; 0x28
 801413e:	42a3      	cmp	r3, r4
 8014140:	bf04      	itt	eq
 8014142:	2301      	moveq	r3, #1
 8014144:	61a3      	streq	r3, [r4, #24]
 8014146:	4620      	mov	r0, r4
 8014148:	f000 f820 	bl	801418c <__sfp>
 801414c:	6060      	str	r0, [r4, #4]
 801414e:	4620      	mov	r0, r4
 8014150:	f000 f81c 	bl	801418c <__sfp>
 8014154:	60a0      	str	r0, [r4, #8]
 8014156:	4620      	mov	r0, r4
 8014158:	f000 f818 	bl	801418c <__sfp>
 801415c:	2200      	movs	r2, #0
 801415e:	60e0      	str	r0, [r4, #12]
 8014160:	2104      	movs	r1, #4
 8014162:	6860      	ldr	r0, [r4, #4]
 8014164:	f7ff ff82 	bl	801406c <std>
 8014168:	68a0      	ldr	r0, [r4, #8]
 801416a:	2201      	movs	r2, #1
 801416c:	2109      	movs	r1, #9
 801416e:	f7ff ff7d 	bl	801406c <std>
 8014172:	68e0      	ldr	r0, [r4, #12]
 8014174:	2202      	movs	r2, #2
 8014176:	2112      	movs	r1, #18
 8014178:	f7ff ff78 	bl	801406c <std>
 801417c:	2301      	movs	r3, #1
 801417e:	61a3      	str	r3, [r4, #24]
 8014180:	e7d2      	b.n	8014128 <__sinit+0xc>
 8014182:	bf00      	nop
 8014184:	080182d8 	.word	0x080182d8
 8014188:	080140b5 	.word	0x080140b5

0801418c <__sfp>:
 801418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801418e:	4607      	mov	r7, r0
 8014190:	f7ff ffac 	bl	80140ec <__sfp_lock_acquire>
 8014194:	4b1e      	ldr	r3, [pc, #120]	; (8014210 <__sfp+0x84>)
 8014196:	681e      	ldr	r6, [r3, #0]
 8014198:	69b3      	ldr	r3, [r6, #24]
 801419a:	b913      	cbnz	r3, 80141a2 <__sfp+0x16>
 801419c:	4630      	mov	r0, r6
 801419e:	f7ff ffbd 	bl	801411c <__sinit>
 80141a2:	3648      	adds	r6, #72	; 0x48
 80141a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80141a8:	3b01      	subs	r3, #1
 80141aa:	d503      	bpl.n	80141b4 <__sfp+0x28>
 80141ac:	6833      	ldr	r3, [r6, #0]
 80141ae:	b30b      	cbz	r3, 80141f4 <__sfp+0x68>
 80141b0:	6836      	ldr	r6, [r6, #0]
 80141b2:	e7f7      	b.n	80141a4 <__sfp+0x18>
 80141b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80141b8:	b9d5      	cbnz	r5, 80141f0 <__sfp+0x64>
 80141ba:	4b16      	ldr	r3, [pc, #88]	; (8014214 <__sfp+0x88>)
 80141bc:	60e3      	str	r3, [r4, #12]
 80141be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80141c2:	6665      	str	r5, [r4, #100]	; 0x64
 80141c4:	f000 f87e 	bl	80142c4 <__retarget_lock_init_recursive>
 80141c8:	f7ff ff96 	bl	80140f8 <__sfp_lock_release>
 80141cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80141d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80141d4:	6025      	str	r5, [r4, #0]
 80141d6:	61a5      	str	r5, [r4, #24]
 80141d8:	2208      	movs	r2, #8
 80141da:	4629      	mov	r1, r5
 80141dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80141e0:	f000 f898 	bl	8014314 <memset>
 80141e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80141e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80141ec:	4620      	mov	r0, r4
 80141ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141f0:	3468      	adds	r4, #104	; 0x68
 80141f2:	e7d9      	b.n	80141a8 <__sfp+0x1c>
 80141f4:	2104      	movs	r1, #4
 80141f6:	4638      	mov	r0, r7
 80141f8:	f7ff ff62 	bl	80140c0 <__sfmoreglue>
 80141fc:	4604      	mov	r4, r0
 80141fe:	6030      	str	r0, [r6, #0]
 8014200:	2800      	cmp	r0, #0
 8014202:	d1d5      	bne.n	80141b0 <__sfp+0x24>
 8014204:	f7ff ff78 	bl	80140f8 <__sfp_lock_release>
 8014208:	230c      	movs	r3, #12
 801420a:	603b      	str	r3, [r7, #0]
 801420c:	e7ee      	b.n	80141ec <__sfp+0x60>
 801420e:	bf00      	nop
 8014210:	080182d8 	.word	0x080182d8
 8014214:	ffff0001 	.word	0xffff0001

08014218 <fiprintf>:
 8014218:	b40e      	push	{r1, r2, r3}
 801421a:	b503      	push	{r0, r1, lr}
 801421c:	4601      	mov	r1, r0
 801421e:	ab03      	add	r3, sp, #12
 8014220:	4805      	ldr	r0, [pc, #20]	; (8014238 <fiprintf+0x20>)
 8014222:	f853 2b04 	ldr.w	r2, [r3], #4
 8014226:	6800      	ldr	r0, [r0, #0]
 8014228:	9301      	str	r3, [sp, #4]
 801422a:	f000 f94f 	bl	80144cc <_vfiprintf_r>
 801422e:	b002      	add	sp, #8
 8014230:	f85d eb04 	ldr.w	lr, [sp], #4
 8014234:	b003      	add	sp, #12
 8014236:	4770      	bx	lr
 8014238:	20000034 	.word	0x20000034

0801423c <_fwalk_reent>:
 801423c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014240:	4606      	mov	r6, r0
 8014242:	4688      	mov	r8, r1
 8014244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014248:	2700      	movs	r7, #0
 801424a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801424e:	f1b9 0901 	subs.w	r9, r9, #1
 8014252:	d505      	bpl.n	8014260 <_fwalk_reent+0x24>
 8014254:	6824      	ldr	r4, [r4, #0]
 8014256:	2c00      	cmp	r4, #0
 8014258:	d1f7      	bne.n	801424a <_fwalk_reent+0xe>
 801425a:	4638      	mov	r0, r7
 801425c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014260:	89ab      	ldrh	r3, [r5, #12]
 8014262:	2b01      	cmp	r3, #1
 8014264:	d907      	bls.n	8014276 <_fwalk_reent+0x3a>
 8014266:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801426a:	3301      	adds	r3, #1
 801426c:	d003      	beq.n	8014276 <_fwalk_reent+0x3a>
 801426e:	4629      	mov	r1, r5
 8014270:	4630      	mov	r0, r6
 8014272:	47c0      	blx	r8
 8014274:	4307      	orrs	r7, r0
 8014276:	3568      	adds	r5, #104	; 0x68
 8014278:	e7e9      	b.n	801424e <_fwalk_reent+0x12>
	...

0801427c <__libc_init_array>:
 801427c:	b570      	push	{r4, r5, r6, lr}
 801427e:	4d0d      	ldr	r5, [pc, #52]	; (80142b4 <__libc_init_array+0x38>)
 8014280:	4c0d      	ldr	r4, [pc, #52]	; (80142b8 <__libc_init_array+0x3c>)
 8014282:	1b64      	subs	r4, r4, r5
 8014284:	10a4      	asrs	r4, r4, #2
 8014286:	2600      	movs	r6, #0
 8014288:	42a6      	cmp	r6, r4
 801428a:	d109      	bne.n	80142a0 <__libc_init_array+0x24>
 801428c:	4d0b      	ldr	r5, [pc, #44]	; (80142bc <__libc_init_array+0x40>)
 801428e:	4c0c      	ldr	r4, [pc, #48]	; (80142c0 <__libc_init_array+0x44>)
 8014290:	f000 ff9c 	bl	80151cc <_init>
 8014294:	1b64      	subs	r4, r4, r5
 8014296:	10a4      	asrs	r4, r4, #2
 8014298:	2600      	movs	r6, #0
 801429a:	42a6      	cmp	r6, r4
 801429c:	d105      	bne.n	80142aa <__libc_init_array+0x2e>
 801429e:	bd70      	pop	{r4, r5, r6, pc}
 80142a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80142a4:	4798      	blx	r3
 80142a6:	3601      	adds	r6, #1
 80142a8:	e7ee      	b.n	8014288 <__libc_init_array+0xc>
 80142aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80142ae:	4798      	blx	r3
 80142b0:	3601      	adds	r6, #1
 80142b2:	e7f2      	b.n	801429a <__libc_init_array+0x1e>
 80142b4:	08018390 	.word	0x08018390
 80142b8:	08018390 	.word	0x08018390
 80142bc:	08018390 	.word	0x08018390
 80142c0:	08018394 	.word	0x08018394

080142c4 <__retarget_lock_init_recursive>:
 80142c4:	4770      	bx	lr

080142c6 <__retarget_lock_acquire_recursive>:
 80142c6:	4770      	bx	lr

080142c8 <__retarget_lock_release_recursive>:
 80142c8:	4770      	bx	lr
	...

080142cc <malloc>:
 80142cc:	4b02      	ldr	r3, [pc, #8]	; (80142d8 <malloc+0xc>)
 80142ce:	4601      	mov	r1, r0
 80142d0:	6818      	ldr	r0, [r3, #0]
 80142d2:	f000 b877 	b.w	80143c4 <_malloc_r>
 80142d6:	bf00      	nop
 80142d8:	20000034 	.word	0x20000034

080142dc <memcmp>:
 80142dc:	b530      	push	{r4, r5, lr}
 80142de:	3901      	subs	r1, #1
 80142e0:	2400      	movs	r4, #0
 80142e2:	42a2      	cmp	r2, r4
 80142e4:	d101      	bne.n	80142ea <memcmp+0xe>
 80142e6:	2000      	movs	r0, #0
 80142e8:	e005      	b.n	80142f6 <memcmp+0x1a>
 80142ea:	5d03      	ldrb	r3, [r0, r4]
 80142ec:	3401      	adds	r4, #1
 80142ee:	5d0d      	ldrb	r5, [r1, r4]
 80142f0:	42ab      	cmp	r3, r5
 80142f2:	d0f6      	beq.n	80142e2 <memcmp+0x6>
 80142f4:	1b58      	subs	r0, r3, r5
 80142f6:	bd30      	pop	{r4, r5, pc}

080142f8 <memcpy>:
 80142f8:	440a      	add	r2, r1
 80142fa:	4291      	cmp	r1, r2
 80142fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8014300:	d100      	bne.n	8014304 <memcpy+0xc>
 8014302:	4770      	bx	lr
 8014304:	b510      	push	{r4, lr}
 8014306:	f811 4b01 	ldrb.w	r4, [r1], #1
 801430a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801430e:	4291      	cmp	r1, r2
 8014310:	d1f9      	bne.n	8014306 <memcpy+0xe>
 8014312:	bd10      	pop	{r4, pc}

08014314 <memset>:
 8014314:	4402      	add	r2, r0
 8014316:	4603      	mov	r3, r0
 8014318:	4293      	cmp	r3, r2
 801431a:	d100      	bne.n	801431e <memset+0xa>
 801431c:	4770      	bx	lr
 801431e:	f803 1b01 	strb.w	r1, [r3], #1
 8014322:	e7f9      	b.n	8014318 <memset+0x4>

08014324 <_free_r>:
 8014324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014326:	2900      	cmp	r1, #0
 8014328:	d048      	beq.n	80143bc <_free_r+0x98>
 801432a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801432e:	9001      	str	r0, [sp, #4]
 8014330:	2b00      	cmp	r3, #0
 8014332:	f1a1 0404 	sub.w	r4, r1, #4
 8014336:	bfb8      	it	lt
 8014338:	18e4      	addlt	r4, r4, r3
 801433a:	f000 fec3 	bl	80150c4 <__malloc_lock>
 801433e:	4a20      	ldr	r2, [pc, #128]	; (80143c0 <_free_r+0x9c>)
 8014340:	9801      	ldr	r0, [sp, #4]
 8014342:	6813      	ldr	r3, [r2, #0]
 8014344:	4615      	mov	r5, r2
 8014346:	b933      	cbnz	r3, 8014356 <_free_r+0x32>
 8014348:	6063      	str	r3, [r4, #4]
 801434a:	6014      	str	r4, [r2, #0]
 801434c:	b003      	add	sp, #12
 801434e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014352:	f000 bebd 	b.w	80150d0 <__malloc_unlock>
 8014356:	42a3      	cmp	r3, r4
 8014358:	d90b      	bls.n	8014372 <_free_r+0x4e>
 801435a:	6821      	ldr	r1, [r4, #0]
 801435c:	1862      	adds	r2, r4, r1
 801435e:	4293      	cmp	r3, r2
 8014360:	bf04      	itt	eq
 8014362:	681a      	ldreq	r2, [r3, #0]
 8014364:	685b      	ldreq	r3, [r3, #4]
 8014366:	6063      	str	r3, [r4, #4]
 8014368:	bf04      	itt	eq
 801436a:	1852      	addeq	r2, r2, r1
 801436c:	6022      	streq	r2, [r4, #0]
 801436e:	602c      	str	r4, [r5, #0]
 8014370:	e7ec      	b.n	801434c <_free_r+0x28>
 8014372:	461a      	mov	r2, r3
 8014374:	685b      	ldr	r3, [r3, #4]
 8014376:	b10b      	cbz	r3, 801437c <_free_r+0x58>
 8014378:	42a3      	cmp	r3, r4
 801437a:	d9fa      	bls.n	8014372 <_free_r+0x4e>
 801437c:	6811      	ldr	r1, [r2, #0]
 801437e:	1855      	adds	r5, r2, r1
 8014380:	42a5      	cmp	r5, r4
 8014382:	d10b      	bne.n	801439c <_free_r+0x78>
 8014384:	6824      	ldr	r4, [r4, #0]
 8014386:	4421      	add	r1, r4
 8014388:	1854      	adds	r4, r2, r1
 801438a:	42a3      	cmp	r3, r4
 801438c:	6011      	str	r1, [r2, #0]
 801438e:	d1dd      	bne.n	801434c <_free_r+0x28>
 8014390:	681c      	ldr	r4, [r3, #0]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	6053      	str	r3, [r2, #4]
 8014396:	4421      	add	r1, r4
 8014398:	6011      	str	r1, [r2, #0]
 801439a:	e7d7      	b.n	801434c <_free_r+0x28>
 801439c:	d902      	bls.n	80143a4 <_free_r+0x80>
 801439e:	230c      	movs	r3, #12
 80143a0:	6003      	str	r3, [r0, #0]
 80143a2:	e7d3      	b.n	801434c <_free_r+0x28>
 80143a4:	6825      	ldr	r5, [r4, #0]
 80143a6:	1961      	adds	r1, r4, r5
 80143a8:	428b      	cmp	r3, r1
 80143aa:	bf04      	itt	eq
 80143ac:	6819      	ldreq	r1, [r3, #0]
 80143ae:	685b      	ldreq	r3, [r3, #4]
 80143b0:	6063      	str	r3, [r4, #4]
 80143b2:	bf04      	itt	eq
 80143b4:	1949      	addeq	r1, r1, r5
 80143b6:	6021      	streq	r1, [r4, #0]
 80143b8:	6054      	str	r4, [r2, #4]
 80143ba:	e7c7      	b.n	801434c <_free_r+0x28>
 80143bc:	b003      	add	sp, #12
 80143be:	bd30      	pop	{r4, r5, pc}
 80143c0:	2001086c 	.word	0x2001086c

080143c4 <_malloc_r>:
 80143c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143c6:	1ccd      	adds	r5, r1, #3
 80143c8:	f025 0503 	bic.w	r5, r5, #3
 80143cc:	3508      	adds	r5, #8
 80143ce:	2d0c      	cmp	r5, #12
 80143d0:	bf38      	it	cc
 80143d2:	250c      	movcc	r5, #12
 80143d4:	2d00      	cmp	r5, #0
 80143d6:	4606      	mov	r6, r0
 80143d8:	db01      	blt.n	80143de <_malloc_r+0x1a>
 80143da:	42a9      	cmp	r1, r5
 80143dc:	d903      	bls.n	80143e6 <_malloc_r+0x22>
 80143de:	230c      	movs	r3, #12
 80143e0:	6033      	str	r3, [r6, #0]
 80143e2:	2000      	movs	r0, #0
 80143e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80143e6:	f000 fe6d 	bl	80150c4 <__malloc_lock>
 80143ea:	4921      	ldr	r1, [pc, #132]	; (8014470 <_malloc_r+0xac>)
 80143ec:	680a      	ldr	r2, [r1, #0]
 80143ee:	4614      	mov	r4, r2
 80143f0:	b99c      	cbnz	r4, 801441a <_malloc_r+0x56>
 80143f2:	4f20      	ldr	r7, [pc, #128]	; (8014474 <_malloc_r+0xb0>)
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	b923      	cbnz	r3, 8014402 <_malloc_r+0x3e>
 80143f8:	4621      	mov	r1, r4
 80143fa:	4630      	mov	r0, r6
 80143fc:	f000 fbec 	bl	8014bd8 <_sbrk_r>
 8014400:	6038      	str	r0, [r7, #0]
 8014402:	4629      	mov	r1, r5
 8014404:	4630      	mov	r0, r6
 8014406:	f000 fbe7 	bl	8014bd8 <_sbrk_r>
 801440a:	1c43      	adds	r3, r0, #1
 801440c:	d123      	bne.n	8014456 <_malloc_r+0x92>
 801440e:	230c      	movs	r3, #12
 8014410:	6033      	str	r3, [r6, #0]
 8014412:	4630      	mov	r0, r6
 8014414:	f000 fe5c 	bl	80150d0 <__malloc_unlock>
 8014418:	e7e3      	b.n	80143e2 <_malloc_r+0x1e>
 801441a:	6823      	ldr	r3, [r4, #0]
 801441c:	1b5b      	subs	r3, r3, r5
 801441e:	d417      	bmi.n	8014450 <_malloc_r+0x8c>
 8014420:	2b0b      	cmp	r3, #11
 8014422:	d903      	bls.n	801442c <_malloc_r+0x68>
 8014424:	6023      	str	r3, [r4, #0]
 8014426:	441c      	add	r4, r3
 8014428:	6025      	str	r5, [r4, #0]
 801442a:	e004      	b.n	8014436 <_malloc_r+0x72>
 801442c:	6863      	ldr	r3, [r4, #4]
 801442e:	42a2      	cmp	r2, r4
 8014430:	bf0c      	ite	eq
 8014432:	600b      	streq	r3, [r1, #0]
 8014434:	6053      	strne	r3, [r2, #4]
 8014436:	4630      	mov	r0, r6
 8014438:	f000 fe4a 	bl	80150d0 <__malloc_unlock>
 801443c:	f104 000b 	add.w	r0, r4, #11
 8014440:	1d23      	adds	r3, r4, #4
 8014442:	f020 0007 	bic.w	r0, r0, #7
 8014446:	1ac2      	subs	r2, r0, r3
 8014448:	d0cc      	beq.n	80143e4 <_malloc_r+0x20>
 801444a:	1a1b      	subs	r3, r3, r0
 801444c:	50a3      	str	r3, [r4, r2]
 801444e:	e7c9      	b.n	80143e4 <_malloc_r+0x20>
 8014450:	4622      	mov	r2, r4
 8014452:	6864      	ldr	r4, [r4, #4]
 8014454:	e7cc      	b.n	80143f0 <_malloc_r+0x2c>
 8014456:	1cc4      	adds	r4, r0, #3
 8014458:	f024 0403 	bic.w	r4, r4, #3
 801445c:	42a0      	cmp	r0, r4
 801445e:	d0e3      	beq.n	8014428 <_malloc_r+0x64>
 8014460:	1a21      	subs	r1, r4, r0
 8014462:	4630      	mov	r0, r6
 8014464:	f000 fbb8 	bl	8014bd8 <_sbrk_r>
 8014468:	3001      	adds	r0, #1
 801446a:	d1dd      	bne.n	8014428 <_malloc_r+0x64>
 801446c:	e7cf      	b.n	801440e <_malloc_r+0x4a>
 801446e:	bf00      	nop
 8014470:	2001086c 	.word	0x2001086c
 8014474:	20010870 	.word	0x20010870

08014478 <__sfputc_r>:
 8014478:	6893      	ldr	r3, [r2, #8]
 801447a:	3b01      	subs	r3, #1
 801447c:	2b00      	cmp	r3, #0
 801447e:	b410      	push	{r4}
 8014480:	6093      	str	r3, [r2, #8]
 8014482:	da08      	bge.n	8014496 <__sfputc_r+0x1e>
 8014484:	6994      	ldr	r4, [r2, #24]
 8014486:	42a3      	cmp	r3, r4
 8014488:	db01      	blt.n	801448e <__sfputc_r+0x16>
 801448a:	290a      	cmp	r1, #10
 801448c:	d103      	bne.n	8014496 <__sfputc_r+0x1e>
 801448e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014492:	f000 bbf5 	b.w	8014c80 <__swbuf_r>
 8014496:	6813      	ldr	r3, [r2, #0]
 8014498:	1c58      	adds	r0, r3, #1
 801449a:	6010      	str	r0, [r2, #0]
 801449c:	7019      	strb	r1, [r3, #0]
 801449e:	4608      	mov	r0, r1
 80144a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144a4:	4770      	bx	lr

080144a6 <__sfputs_r>:
 80144a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144a8:	4606      	mov	r6, r0
 80144aa:	460f      	mov	r7, r1
 80144ac:	4614      	mov	r4, r2
 80144ae:	18d5      	adds	r5, r2, r3
 80144b0:	42ac      	cmp	r4, r5
 80144b2:	d101      	bne.n	80144b8 <__sfputs_r+0x12>
 80144b4:	2000      	movs	r0, #0
 80144b6:	e007      	b.n	80144c8 <__sfputs_r+0x22>
 80144b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144bc:	463a      	mov	r2, r7
 80144be:	4630      	mov	r0, r6
 80144c0:	f7ff ffda 	bl	8014478 <__sfputc_r>
 80144c4:	1c43      	adds	r3, r0, #1
 80144c6:	d1f3      	bne.n	80144b0 <__sfputs_r+0xa>
 80144c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080144cc <_vfiprintf_r>:
 80144cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d0:	460d      	mov	r5, r1
 80144d2:	b09d      	sub	sp, #116	; 0x74
 80144d4:	4614      	mov	r4, r2
 80144d6:	4698      	mov	r8, r3
 80144d8:	4606      	mov	r6, r0
 80144da:	b118      	cbz	r0, 80144e4 <_vfiprintf_r+0x18>
 80144dc:	6983      	ldr	r3, [r0, #24]
 80144de:	b90b      	cbnz	r3, 80144e4 <_vfiprintf_r+0x18>
 80144e0:	f7ff fe1c 	bl	801411c <__sinit>
 80144e4:	4b89      	ldr	r3, [pc, #548]	; (801470c <_vfiprintf_r+0x240>)
 80144e6:	429d      	cmp	r5, r3
 80144e8:	d11b      	bne.n	8014522 <_vfiprintf_r+0x56>
 80144ea:	6875      	ldr	r5, [r6, #4]
 80144ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144ee:	07d9      	lsls	r1, r3, #31
 80144f0:	d405      	bmi.n	80144fe <_vfiprintf_r+0x32>
 80144f2:	89ab      	ldrh	r3, [r5, #12]
 80144f4:	059a      	lsls	r2, r3, #22
 80144f6:	d402      	bmi.n	80144fe <_vfiprintf_r+0x32>
 80144f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144fa:	f7ff fee4 	bl	80142c6 <__retarget_lock_acquire_recursive>
 80144fe:	89ab      	ldrh	r3, [r5, #12]
 8014500:	071b      	lsls	r3, r3, #28
 8014502:	d501      	bpl.n	8014508 <_vfiprintf_r+0x3c>
 8014504:	692b      	ldr	r3, [r5, #16]
 8014506:	b9eb      	cbnz	r3, 8014544 <_vfiprintf_r+0x78>
 8014508:	4629      	mov	r1, r5
 801450a:	4630      	mov	r0, r6
 801450c:	f000 fc1c 	bl	8014d48 <__swsetup_r>
 8014510:	b1c0      	cbz	r0, 8014544 <_vfiprintf_r+0x78>
 8014512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014514:	07dc      	lsls	r4, r3, #31
 8014516:	d50e      	bpl.n	8014536 <_vfiprintf_r+0x6a>
 8014518:	f04f 30ff 	mov.w	r0, #4294967295
 801451c:	b01d      	add	sp, #116	; 0x74
 801451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014522:	4b7b      	ldr	r3, [pc, #492]	; (8014710 <_vfiprintf_r+0x244>)
 8014524:	429d      	cmp	r5, r3
 8014526:	d101      	bne.n	801452c <_vfiprintf_r+0x60>
 8014528:	68b5      	ldr	r5, [r6, #8]
 801452a:	e7df      	b.n	80144ec <_vfiprintf_r+0x20>
 801452c:	4b79      	ldr	r3, [pc, #484]	; (8014714 <_vfiprintf_r+0x248>)
 801452e:	429d      	cmp	r5, r3
 8014530:	bf08      	it	eq
 8014532:	68f5      	ldreq	r5, [r6, #12]
 8014534:	e7da      	b.n	80144ec <_vfiprintf_r+0x20>
 8014536:	89ab      	ldrh	r3, [r5, #12]
 8014538:	0598      	lsls	r0, r3, #22
 801453a:	d4ed      	bmi.n	8014518 <_vfiprintf_r+0x4c>
 801453c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801453e:	f7ff fec3 	bl	80142c8 <__retarget_lock_release_recursive>
 8014542:	e7e9      	b.n	8014518 <_vfiprintf_r+0x4c>
 8014544:	2300      	movs	r3, #0
 8014546:	9309      	str	r3, [sp, #36]	; 0x24
 8014548:	2320      	movs	r3, #32
 801454a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801454e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014552:	2330      	movs	r3, #48	; 0x30
 8014554:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014718 <_vfiprintf_r+0x24c>
 8014558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801455c:	f04f 0901 	mov.w	r9, #1
 8014560:	4623      	mov	r3, r4
 8014562:	469a      	mov	sl, r3
 8014564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014568:	b10a      	cbz	r2, 801456e <_vfiprintf_r+0xa2>
 801456a:	2a25      	cmp	r2, #37	; 0x25
 801456c:	d1f9      	bne.n	8014562 <_vfiprintf_r+0x96>
 801456e:	ebba 0b04 	subs.w	fp, sl, r4
 8014572:	d00b      	beq.n	801458c <_vfiprintf_r+0xc0>
 8014574:	465b      	mov	r3, fp
 8014576:	4622      	mov	r2, r4
 8014578:	4629      	mov	r1, r5
 801457a:	4630      	mov	r0, r6
 801457c:	f7ff ff93 	bl	80144a6 <__sfputs_r>
 8014580:	3001      	adds	r0, #1
 8014582:	f000 80aa 	beq.w	80146da <_vfiprintf_r+0x20e>
 8014586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014588:	445a      	add	r2, fp
 801458a:	9209      	str	r2, [sp, #36]	; 0x24
 801458c:	f89a 3000 	ldrb.w	r3, [sl]
 8014590:	2b00      	cmp	r3, #0
 8014592:	f000 80a2 	beq.w	80146da <_vfiprintf_r+0x20e>
 8014596:	2300      	movs	r3, #0
 8014598:	f04f 32ff 	mov.w	r2, #4294967295
 801459c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145a0:	f10a 0a01 	add.w	sl, sl, #1
 80145a4:	9304      	str	r3, [sp, #16]
 80145a6:	9307      	str	r3, [sp, #28]
 80145a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80145ac:	931a      	str	r3, [sp, #104]	; 0x68
 80145ae:	4654      	mov	r4, sl
 80145b0:	2205      	movs	r2, #5
 80145b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145b6:	4858      	ldr	r0, [pc, #352]	; (8014718 <_vfiprintf_r+0x24c>)
 80145b8:	f7eb fe0a 	bl	80001d0 <memchr>
 80145bc:	9a04      	ldr	r2, [sp, #16]
 80145be:	b9d8      	cbnz	r0, 80145f8 <_vfiprintf_r+0x12c>
 80145c0:	06d1      	lsls	r1, r2, #27
 80145c2:	bf44      	itt	mi
 80145c4:	2320      	movmi	r3, #32
 80145c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145ca:	0713      	lsls	r3, r2, #28
 80145cc:	bf44      	itt	mi
 80145ce:	232b      	movmi	r3, #43	; 0x2b
 80145d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145d4:	f89a 3000 	ldrb.w	r3, [sl]
 80145d8:	2b2a      	cmp	r3, #42	; 0x2a
 80145da:	d015      	beq.n	8014608 <_vfiprintf_r+0x13c>
 80145dc:	9a07      	ldr	r2, [sp, #28]
 80145de:	4654      	mov	r4, sl
 80145e0:	2000      	movs	r0, #0
 80145e2:	f04f 0c0a 	mov.w	ip, #10
 80145e6:	4621      	mov	r1, r4
 80145e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145ec:	3b30      	subs	r3, #48	; 0x30
 80145ee:	2b09      	cmp	r3, #9
 80145f0:	d94e      	bls.n	8014690 <_vfiprintf_r+0x1c4>
 80145f2:	b1b0      	cbz	r0, 8014622 <_vfiprintf_r+0x156>
 80145f4:	9207      	str	r2, [sp, #28]
 80145f6:	e014      	b.n	8014622 <_vfiprintf_r+0x156>
 80145f8:	eba0 0308 	sub.w	r3, r0, r8
 80145fc:	fa09 f303 	lsl.w	r3, r9, r3
 8014600:	4313      	orrs	r3, r2
 8014602:	9304      	str	r3, [sp, #16]
 8014604:	46a2      	mov	sl, r4
 8014606:	e7d2      	b.n	80145ae <_vfiprintf_r+0xe2>
 8014608:	9b03      	ldr	r3, [sp, #12]
 801460a:	1d19      	adds	r1, r3, #4
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	9103      	str	r1, [sp, #12]
 8014610:	2b00      	cmp	r3, #0
 8014612:	bfbb      	ittet	lt
 8014614:	425b      	neglt	r3, r3
 8014616:	f042 0202 	orrlt.w	r2, r2, #2
 801461a:	9307      	strge	r3, [sp, #28]
 801461c:	9307      	strlt	r3, [sp, #28]
 801461e:	bfb8      	it	lt
 8014620:	9204      	strlt	r2, [sp, #16]
 8014622:	7823      	ldrb	r3, [r4, #0]
 8014624:	2b2e      	cmp	r3, #46	; 0x2e
 8014626:	d10c      	bne.n	8014642 <_vfiprintf_r+0x176>
 8014628:	7863      	ldrb	r3, [r4, #1]
 801462a:	2b2a      	cmp	r3, #42	; 0x2a
 801462c:	d135      	bne.n	801469a <_vfiprintf_r+0x1ce>
 801462e:	9b03      	ldr	r3, [sp, #12]
 8014630:	1d1a      	adds	r2, r3, #4
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	9203      	str	r2, [sp, #12]
 8014636:	2b00      	cmp	r3, #0
 8014638:	bfb8      	it	lt
 801463a:	f04f 33ff 	movlt.w	r3, #4294967295
 801463e:	3402      	adds	r4, #2
 8014640:	9305      	str	r3, [sp, #20]
 8014642:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014728 <_vfiprintf_r+0x25c>
 8014646:	7821      	ldrb	r1, [r4, #0]
 8014648:	2203      	movs	r2, #3
 801464a:	4650      	mov	r0, sl
 801464c:	f7eb fdc0 	bl	80001d0 <memchr>
 8014650:	b140      	cbz	r0, 8014664 <_vfiprintf_r+0x198>
 8014652:	2340      	movs	r3, #64	; 0x40
 8014654:	eba0 000a 	sub.w	r0, r0, sl
 8014658:	fa03 f000 	lsl.w	r0, r3, r0
 801465c:	9b04      	ldr	r3, [sp, #16]
 801465e:	4303      	orrs	r3, r0
 8014660:	3401      	adds	r4, #1
 8014662:	9304      	str	r3, [sp, #16]
 8014664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014668:	482c      	ldr	r0, [pc, #176]	; (801471c <_vfiprintf_r+0x250>)
 801466a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801466e:	2206      	movs	r2, #6
 8014670:	f7eb fdae 	bl	80001d0 <memchr>
 8014674:	2800      	cmp	r0, #0
 8014676:	d03f      	beq.n	80146f8 <_vfiprintf_r+0x22c>
 8014678:	4b29      	ldr	r3, [pc, #164]	; (8014720 <_vfiprintf_r+0x254>)
 801467a:	bb1b      	cbnz	r3, 80146c4 <_vfiprintf_r+0x1f8>
 801467c:	9b03      	ldr	r3, [sp, #12]
 801467e:	3307      	adds	r3, #7
 8014680:	f023 0307 	bic.w	r3, r3, #7
 8014684:	3308      	adds	r3, #8
 8014686:	9303      	str	r3, [sp, #12]
 8014688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801468a:	443b      	add	r3, r7
 801468c:	9309      	str	r3, [sp, #36]	; 0x24
 801468e:	e767      	b.n	8014560 <_vfiprintf_r+0x94>
 8014690:	fb0c 3202 	mla	r2, ip, r2, r3
 8014694:	460c      	mov	r4, r1
 8014696:	2001      	movs	r0, #1
 8014698:	e7a5      	b.n	80145e6 <_vfiprintf_r+0x11a>
 801469a:	2300      	movs	r3, #0
 801469c:	3401      	adds	r4, #1
 801469e:	9305      	str	r3, [sp, #20]
 80146a0:	4619      	mov	r1, r3
 80146a2:	f04f 0c0a 	mov.w	ip, #10
 80146a6:	4620      	mov	r0, r4
 80146a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146ac:	3a30      	subs	r2, #48	; 0x30
 80146ae:	2a09      	cmp	r2, #9
 80146b0:	d903      	bls.n	80146ba <_vfiprintf_r+0x1ee>
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d0c5      	beq.n	8014642 <_vfiprintf_r+0x176>
 80146b6:	9105      	str	r1, [sp, #20]
 80146b8:	e7c3      	b.n	8014642 <_vfiprintf_r+0x176>
 80146ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80146be:	4604      	mov	r4, r0
 80146c0:	2301      	movs	r3, #1
 80146c2:	e7f0      	b.n	80146a6 <_vfiprintf_r+0x1da>
 80146c4:	ab03      	add	r3, sp, #12
 80146c6:	9300      	str	r3, [sp, #0]
 80146c8:	462a      	mov	r2, r5
 80146ca:	4b16      	ldr	r3, [pc, #88]	; (8014724 <_vfiprintf_r+0x258>)
 80146cc:	a904      	add	r1, sp, #16
 80146ce:	4630      	mov	r0, r6
 80146d0:	f3af 8000 	nop.w
 80146d4:	4607      	mov	r7, r0
 80146d6:	1c78      	adds	r0, r7, #1
 80146d8:	d1d6      	bne.n	8014688 <_vfiprintf_r+0x1bc>
 80146da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146dc:	07d9      	lsls	r1, r3, #31
 80146de:	d405      	bmi.n	80146ec <_vfiprintf_r+0x220>
 80146e0:	89ab      	ldrh	r3, [r5, #12]
 80146e2:	059a      	lsls	r2, r3, #22
 80146e4:	d402      	bmi.n	80146ec <_vfiprintf_r+0x220>
 80146e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146e8:	f7ff fdee 	bl	80142c8 <__retarget_lock_release_recursive>
 80146ec:	89ab      	ldrh	r3, [r5, #12]
 80146ee:	065b      	lsls	r3, r3, #25
 80146f0:	f53f af12 	bmi.w	8014518 <_vfiprintf_r+0x4c>
 80146f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146f6:	e711      	b.n	801451c <_vfiprintf_r+0x50>
 80146f8:	ab03      	add	r3, sp, #12
 80146fa:	9300      	str	r3, [sp, #0]
 80146fc:	462a      	mov	r2, r5
 80146fe:	4b09      	ldr	r3, [pc, #36]	; (8014724 <_vfiprintf_r+0x258>)
 8014700:	a904      	add	r1, sp, #16
 8014702:	4630      	mov	r0, r6
 8014704:	f000 f880 	bl	8014808 <_printf_i>
 8014708:	e7e4      	b.n	80146d4 <_vfiprintf_r+0x208>
 801470a:	bf00      	nop
 801470c:	08018298 	.word	0x08018298
 8014710:	080182b8 	.word	0x080182b8
 8014714:	08018278 	.word	0x08018278
 8014718:	080182dc 	.word	0x080182dc
 801471c:	080182e6 	.word	0x080182e6
 8014720:	00000000 	.word	0x00000000
 8014724:	080144a7 	.word	0x080144a7
 8014728:	080182e2 	.word	0x080182e2

0801472c <_printf_common>:
 801472c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014730:	4616      	mov	r6, r2
 8014732:	4699      	mov	r9, r3
 8014734:	688a      	ldr	r2, [r1, #8]
 8014736:	690b      	ldr	r3, [r1, #16]
 8014738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801473c:	4293      	cmp	r3, r2
 801473e:	bfb8      	it	lt
 8014740:	4613      	movlt	r3, r2
 8014742:	6033      	str	r3, [r6, #0]
 8014744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014748:	4607      	mov	r7, r0
 801474a:	460c      	mov	r4, r1
 801474c:	b10a      	cbz	r2, 8014752 <_printf_common+0x26>
 801474e:	3301      	adds	r3, #1
 8014750:	6033      	str	r3, [r6, #0]
 8014752:	6823      	ldr	r3, [r4, #0]
 8014754:	0699      	lsls	r1, r3, #26
 8014756:	bf42      	ittt	mi
 8014758:	6833      	ldrmi	r3, [r6, #0]
 801475a:	3302      	addmi	r3, #2
 801475c:	6033      	strmi	r3, [r6, #0]
 801475e:	6825      	ldr	r5, [r4, #0]
 8014760:	f015 0506 	ands.w	r5, r5, #6
 8014764:	d106      	bne.n	8014774 <_printf_common+0x48>
 8014766:	f104 0a19 	add.w	sl, r4, #25
 801476a:	68e3      	ldr	r3, [r4, #12]
 801476c:	6832      	ldr	r2, [r6, #0]
 801476e:	1a9b      	subs	r3, r3, r2
 8014770:	42ab      	cmp	r3, r5
 8014772:	dc26      	bgt.n	80147c2 <_printf_common+0x96>
 8014774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014778:	1e13      	subs	r3, r2, #0
 801477a:	6822      	ldr	r2, [r4, #0]
 801477c:	bf18      	it	ne
 801477e:	2301      	movne	r3, #1
 8014780:	0692      	lsls	r2, r2, #26
 8014782:	d42b      	bmi.n	80147dc <_printf_common+0xb0>
 8014784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014788:	4649      	mov	r1, r9
 801478a:	4638      	mov	r0, r7
 801478c:	47c0      	blx	r8
 801478e:	3001      	adds	r0, #1
 8014790:	d01e      	beq.n	80147d0 <_printf_common+0xa4>
 8014792:	6823      	ldr	r3, [r4, #0]
 8014794:	68e5      	ldr	r5, [r4, #12]
 8014796:	6832      	ldr	r2, [r6, #0]
 8014798:	f003 0306 	and.w	r3, r3, #6
 801479c:	2b04      	cmp	r3, #4
 801479e:	bf08      	it	eq
 80147a0:	1aad      	subeq	r5, r5, r2
 80147a2:	68a3      	ldr	r3, [r4, #8]
 80147a4:	6922      	ldr	r2, [r4, #16]
 80147a6:	bf0c      	ite	eq
 80147a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80147ac:	2500      	movne	r5, #0
 80147ae:	4293      	cmp	r3, r2
 80147b0:	bfc4      	itt	gt
 80147b2:	1a9b      	subgt	r3, r3, r2
 80147b4:	18ed      	addgt	r5, r5, r3
 80147b6:	2600      	movs	r6, #0
 80147b8:	341a      	adds	r4, #26
 80147ba:	42b5      	cmp	r5, r6
 80147bc:	d11a      	bne.n	80147f4 <_printf_common+0xc8>
 80147be:	2000      	movs	r0, #0
 80147c0:	e008      	b.n	80147d4 <_printf_common+0xa8>
 80147c2:	2301      	movs	r3, #1
 80147c4:	4652      	mov	r2, sl
 80147c6:	4649      	mov	r1, r9
 80147c8:	4638      	mov	r0, r7
 80147ca:	47c0      	blx	r8
 80147cc:	3001      	adds	r0, #1
 80147ce:	d103      	bne.n	80147d8 <_printf_common+0xac>
 80147d0:	f04f 30ff 	mov.w	r0, #4294967295
 80147d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147d8:	3501      	adds	r5, #1
 80147da:	e7c6      	b.n	801476a <_printf_common+0x3e>
 80147dc:	18e1      	adds	r1, r4, r3
 80147de:	1c5a      	adds	r2, r3, #1
 80147e0:	2030      	movs	r0, #48	; 0x30
 80147e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80147e6:	4422      	add	r2, r4
 80147e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80147ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80147f0:	3302      	adds	r3, #2
 80147f2:	e7c7      	b.n	8014784 <_printf_common+0x58>
 80147f4:	2301      	movs	r3, #1
 80147f6:	4622      	mov	r2, r4
 80147f8:	4649      	mov	r1, r9
 80147fa:	4638      	mov	r0, r7
 80147fc:	47c0      	blx	r8
 80147fe:	3001      	adds	r0, #1
 8014800:	d0e6      	beq.n	80147d0 <_printf_common+0xa4>
 8014802:	3601      	adds	r6, #1
 8014804:	e7d9      	b.n	80147ba <_printf_common+0x8e>
	...

08014808 <_printf_i>:
 8014808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801480c:	460c      	mov	r4, r1
 801480e:	4691      	mov	r9, r2
 8014810:	7e27      	ldrb	r7, [r4, #24]
 8014812:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014814:	2f78      	cmp	r7, #120	; 0x78
 8014816:	4680      	mov	r8, r0
 8014818:	469a      	mov	sl, r3
 801481a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801481e:	d807      	bhi.n	8014830 <_printf_i+0x28>
 8014820:	2f62      	cmp	r7, #98	; 0x62
 8014822:	d80a      	bhi.n	801483a <_printf_i+0x32>
 8014824:	2f00      	cmp	r7, #0
 8014826:	f000 80d8 	beq.w	80149da <_printf_i+0x1d2>
 801482a:	2f58      	cmp	r7, #88	; 0x58
 801482c:	f000 80a3 	beq.w	8014976 <_printf_i+0x16e>
 8014830:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014838:	e03a      	b.n	80148b0 <_printf_i+0xa8>
 801483a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801483e:	2b15      	cmp	r3, #21
 8014840:	d8f6      	bhi.n	8014830 <_printf_i+0x28>
 8014842:	a001      	add	r0, pc, #4	; (adr r0, 8014848 <_printf_i+0x40>)
 8014844:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014848:	080148a1 	.word	0x080148a1
 801484c:	080148b5 	.word	0x080148b5
 8014850:	08014831 	.word	0x08014831
 8014854:	08014831 	.word	0x08014831
 8014858:	08014831 	.word	0x08014831
 801485c:	08014831 	.word	0x08014831
 8014860:	080148b5 	.word	0x080148b5
 8014864:	08014831 	.word	0x08014831
 8014868:	08014831 	.word	0x08014831
 801486c:	08014831 	.word	0x08014831
 8014870:	08014831 	.word	0x08014831
 8014874:	080149c1 	.word	0x080149c1
 8014878:	080148e5 	.word	0x080148e5
 801487c:	080149a3 	.word	0x080149a3
 8014880:	08014831 	.word	0x08014831
 8014884:	08014831 	.word	0x08014831
 8014888:	080149e3 	.word	0x080149e3
 801488c:	08014831 	.word	0x08014831
 8014890:	080148e5 	.word	0x080148e5
 8014894:	08014831 	.word	0x08014831
 8014898:	08014831 	.word	0x08014831
 801489c:	080149ab 	.word	0x080149ab
 80148a0:	680b      	ldr	r3, [r1, #0]
 80148a2:	1d1a      	adds	r2, r3, #4
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	600a      	str	r2, [r1, #0]
 80148a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80148ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80148b0:	2301      	movs	r3, #1
 80148b2:	e0a3      	b.n	80149fc <_printf_i+0x1f4>
 80148b4:	6825      	ldr	r5, [r4, #0]
 80148b6:	6808      	ldr	r0, [r1, #0]
 80148b8:	062e      	lsls	r6, r5, #24
 80148ba:	f100 0304 	add.w	r3, r0, #4
 80148be:	d50a      	bpl.n	80148d6 <_printf_i+0xce>
 80148c0:	6805      	ldr	r5, [r0, #0]
 80148c2:	600b      	str	r3, [r1, #0]
 80148c4:	2d00      	cmp	r5, #0
 80148c6:	da03      	bge.n	80148d0 <_printf_i+0xc8>
 80148c8:	232d      	movs	r3, #45	; 0x2d
 80148ca:	426d      	negs	r5, r5
 80148cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148d0:	485e      	ldr	r0, [pc, #376]	; (8014a4c <_printf_i+0x244>)
 80148d2:	230a      	movs	r3, #10
 80148d4:	e019      	b.n	801490a <_printf_i+0x102>
 80148d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80148da:	6805      	ldr	r5, [r0, #0]
 80148dc:	600b      	str	r3, [r1, #0]
 80148de:	bf18      	it	ne
 80148e0:	b22d      	sxthne	r5, r5
 80148e2:	e7ef      	b.n	80148c4 <_printf_i+0xbc>
 80148e4:	680b      	ldr	r3, [r1, #0]
 80148e6:	6825      	ldr	r5, [r4, #0]
 80148e8:	1d18      	adds	r0, r3, #4
 80148ea:	6008      	str	r0, [r1, #0]
 80148ec:	0628      	lsls	r0, r5, #24
 80148ee:	d501      	bpl.n	80148f4 <_printf_i+0xec>
 80148f0:	681d      	ldr	r5, [r3, #0]
 80148f2:	e002      	b.n	80148fa <_printf_i+0xf2>
 80148f4:	0669      	lsls	r1, r5, #25
 80148f6:	d5fb      	bpl.n	80148f0 <_printf_i+0xe8>
 80148f8:	881d      	ldrh	r5, [r3, #0]
 80148fa:	4854      	ldr	r0, [pc, #336]	; (8014a4c <_printf_i+0x244>)
 80148fc:	2f6f      	cmp	r7, #111	; 0x6f
 80148fe:	bf0c      	ite	eq
 8014900:	2308      	moveq	r3, #8
 8014902:	230a      	movne	r3, #10
 8014904:	2100      	movs	r1, #0
 8014906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801490a:	6866      	ldr	r6, [r4, #4]
 801490c:	60a6      	str	r6, [r4, #8]
 801490e:	2e00      	cmp	r6, #0
 8014910:	bfa2      	ittt	ge
 8014912:	6821      	ldrge	r1, [r4, #0]
 8014914:	f021 0104 	bicge.w	r1, r1, #4
 8014918:	6021      	strge	r1, [r4, #0]
 801491a:	b90d      	cbnz	r5, 8014920 <_printf_i+0x118>
 801491c:	2e00      	cmp	r6, #0
 801491e:	d04d      	beq.n	80149bc <_printf_i+0x1b4>
 8014920:	4616      	mov	r6, r2
 8014922:	fbb5 f1f3 	udiv	r1, r5, r3
 8014926:	fb03 5711 	mls	r7, r3, r1, r5
 801492a:	5dc7      	ldrb	r7, [r0, r7]
 801492c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014930:	462f      	mov	r7, r5
 8014932:	42bb      	cmp	r3, r7
 8014934:	460d      	mov	r5, r1
 8014936:	d9f4      	bls.n	8014922 <_printf_i+0x11a>
 8014938:	2b08      	cmp	r3, #8
 801493a:	d10b      	bne.n	8014954 <_printf_i+0x14c>
 801493c:	6823      	ldr	r3, [r4, #0]
 801493e:	07df      	lsls	r7, r3, #31
 8014940:	d508      	bpl.n	8014954 <_printf_i+0x14c>
 8014942:	6923      	ldr	r3, [r4, #16]
 8014944:	6861      	ldr	r1, [r4, #4]
 8014946:	4299      	cmp	r1, r3
 8014948:	bfde      	ittt	le
 801494a:	2330      	movle	r3, #48	; 0x30
 801494c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014950:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014954:	1b92      	subs	r2, r2, r6
 8014956:	6122      	str	r2, [r4, #16]
 8014958:	f8cd a000 	str.w	sl, [sp]
 801495c:	464b      	mov	r3, r9
 801495e:	aa03      	add	r2, sp, #12
 8014960:	4621      	mov	r1, r4
 8014962:	4640      	mov	r0, r8
 8014964:	f7ff fee2 	bl	801472c <_printf_common>
 8014968:	3001      	adds	r0, #1
 801496a:	d14c      	bne.n	8014a06 <_printf_i+0x1fe>
 801496c:	f04f 30ff 	mov.w	r0, #4294967295
 8014970:	b004      	add	sp, #16
 8014972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014976:	4835      	ldr	r0, [pc, #212]	; (8014a4c <_printf_i+0x244>)
 8014978:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801497c:	6823      	ldr	r3, [r4, #0]
 801497e:	680e      	ldr	r6, [r1, #0]
 8014980:	061f      	lsls	r7, r3, #24
 8014982:	f856 5b04 	ldr.w	r5, [r6], #4
 8014986:	600e      	str	r6, [r1, #0]
 8014988:	d514      	bpl.n	80149b4 <_printf_i+0x1ac>
 801498a:	07d9      	lsls	r1, r3, #31
 801498c:	bf44      	itt	mi
 801498e:	f043 0320 	orrmi.w	r3, r3, #32
 8014992:	6023      	strmi	r3, [r4, #0]
 8014994:	b91d      	cbnz	r5, 801499e <_printf_i+0x196>
 8014996:	6823      	ldr	r3, [r4, #0]
 8014998:	f023 0320 	bic.w	r3, r3, #32
 801499c:	6023      	str	r3, [r4, #0]
 801499e:	2310      	movs	r3, #16
 80149a0:	e7b0      	b.n	8014904 <_printf_i+0xfc>
 80149a2:	6823      	ldr	r3, [r4, #0]
 80149a4:	f043 0320 	orr.w	r3, r3, #32
 80149a8:	6023      	str	r3, [r4, #0]
 80149aa:	2378      	movs	r3, #120	; 0x78
 80149ac:	4828      	ldr	r0, [pc, #160]	; (8014a50 <_printf_i+0x248>)
 80149ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80149b2:	e7e3      	b.n	801497c <_printf_i+0x174>
 80149b4:	065e      	lsls	r6, r3, #25
 80149b6:	bf48      	it	mi
 80149b8:	b2ad      	uxthmi	r5, r5
 80149ba:	e7e6      	b.n	801498a <_printf_i+0x182>
 80149bc:	4616      	mov	r6, r2
 80149be:	e7bb      	b.n	8014938 <_printf_i+0x130>
 80149c0:	680b      	ldr	r3, [r1, #0]
 80149c2:	6826      	ldr	r6, [r4, #0]
 80149c4:	6960      	ldr	r0, [r4, #20]
 80149c6:	1d1d      	adds	r5, r3, #4
 80149c8:	600d      	str	r5, [r1, #0]
 80149ca:	0635      	lsls	r5, r6, #24
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	d501      	bpl.n	80149d4 <_printf_i+0x1cc>
 80149d0:	6018      	str	r0, [r3, #0]
 80149d2:	e002      	b.n	80149da <_printf_i+0x1d2>
 80149d4:	0671      	lsls	r1, r6, #25
 80149d6:	d5fb      	bpl.n	80149d0 <_printf_i+0x1c8>
 80149d8:	8018      	strh	r0, [r3, #0]
 80149da:	2300      	movs	r3, #0
 80149dc:	6123      	str	r3, [r4, #16]
 80149de:	4616      	mov	r6, r2
 80149e0:	e7ba      	b.n	8014958 <_printf_i+0x150>
 80149e2:	680b      	ldr	r3, [r1, #0]
 80149e4:	1d1a      	adds	r2, r3, #4
 80149e6:	600a      	str	r2, [r1, #0]
 80149e8:	681e      	ldr	r6, [r3, #0]
 80149ea:	6862      	ldr	r2, [r4, #4]
 80149ec:	2100      	movs	r1, #0
 80149ee:	4630      	mov	r0, r6
 80149f0:	f7eb fbee 	bl	80001d0 <memchr>
 80149f4:	b108      	cbz	r0, 80149fa <_printf_i+0x1f2>
 80149f6:	1b80      	subs	r0, r0, r6
 80149f8:	6060      	str	r0, [r4, #4]
 80149fa:	6863      	ldr	r3, [r4, #4]
 80149fc:	6123      	str	r3, [r4, #16]
 80149fe:	2300      	movs	r3, #0
 8014a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a04:	e7a8      	b.n	8014958 <_printf_i+0x150>
 8014a06:	6923      	ldr	r3, [r4, #16]
 8014a08:	4632      	mov	r2, r6
 8014a0a:	4649      	mov	r1, r9
 8014a0c:	4640      	mov	r0, r8
 8014a0e:	47d0      	blx	sl
 8014a10:	3001      	adds	r0, #1
 8014a12:	d0ab      	beq.n	801496c <_printf_i+0x164>
 8014a14:	6823      	ldr	r3, [r4, #0]
 8014a16:	079b      	lsls	r3, r3, #30
 8014a18:	d413      	bmi.n	8014a42 <_printf_i+0x23a>
 8014a1a:	68e0      	ldr	r0, [r4, #12]
 8014a1c:	9b03      	ldr	r3, [sp, #12]
 8014a1e:	4298      	cmp	r0, r3
 8014a20:	bfb8      	it	lt
 8014a22:	4618      	movlt	r0, r3
 8014a24:	e7a4      	b.n	8014970 <_printf_i+0x168>
 8014a26:	2301      	movs	r3, #1
 8014a28:	4632      	mov	r2, r6
 8014a2a:	4649      	mov	r1, r9
 8014a2c:	4640      	mov	r0, r8
 8014a2e:	47d0      	blx	sl
 8014a30:	3001      	adds	r0, #1
 8014a32:	d09b      	beq.n	801496c <_printf_i+0x164>
 8014a34:	3501      	adds	r5, #1
 8014a36:	68e3      	ldr	r3, [r4, #12]
 8014a38:	9903      	ldr	r1, [sp, #12]
 8014a3a:	1a5b      	subs	r3, r3, r1
 8014a3c:	42ab      	cmp	r3, r5
 8014a3e:	dcf2      	bgt.n	8014a26 <_printf_i+0x21e>
 8014a40:	e7eb      	b.n	8014a1a <_printf_i+0x212>
 8014a42:	2500      	movs	r5, #0
 8014a44:	f104 0619 	add.w	r6, r4, #25
 8014a48:	e7f5      	b.n	8014a36 <_printf_i+0x22e>
 8014a4a:	bf00      	nop
 8014a4c:	080182ed 	.word	0x080182ed
 8014a50:	080182fe 	.word	0x080182fe

08014a54 <iprintf>:
 8014a54:	b40f      	push	{r0, r1, r2, r3}
 8014a56:	4b0a      	ldr	r3, [pc, #40]	; (8014a80 <iprintf+0x2c>)
 8014a58:	b513      	push	{r0, r1, r4, lr}
 8014a5a:	681c      	ldr	r4, [r3, #0]
 8014a5c:	b124      	cbz	r4, 8014a68 <iprintf+0x14>
 8014a5e:	69a3      	ldr	r3, [r4, #24]
 8014a60:	b913      	cbnz	r3, 8014a68 <iprintf+0x14>
 8014a62:	4620      	mov	r0, r4
 8014a64:	f7ff fb5a 	bl	801411c <__sinit>
 8014a68:	ab05      	add	r3, sp, #20
 8014a6a:	9a04      	ldr	r2, [sp, #16]
 8014a6c:	68a1      	ldr	r1, [r4, #8]
 8014a6e:	9301      	str	r3, [sp, #4]
 8014a70:	4620      	mov	r0, r4
 8014a72:	f7ff fd2b 	bl	80144cc <_vfiprintf_r>
 8014a76:	b002      	add	sp, #8
 8014a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a7c:	b004      	add	sp, #16
 8014a7e:	4770      	bx	lr
 8014a80:	20000034 	.word	0x20000034

08014a84 <rand>:
 8014a84:	4b17      	ldr	r3, [pc, #92]	; (8014ae4 <rand+0x60>)
 8014a86:	b510      	push	{r4, lr}
 8014a88:	681c      	ldr	r4, [r3, #0]
 8014a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014a8c:	b9b3      	cbnz	r3, 8014abc <rand+0x38>
 8014a8e:	2018      	movs	r0, #24
 8014a90:	f7ff fc1c 	bl	80142cc <malloc>
 8014a94:	63a0      	str	r0, [r4, #56]	; 0x38
 8014a96:	b928      	cbnz	r0, 8014aa4 <rand+0x20>
 8014a98:	4602      	mov	r2, r0
 8014a9a:	4b13      	ldr	r3, [pc, #76]	; (8014ae8 <rand+0x64>)
 8014a9c:	4813      	ldr	r0, [pc, #76]	; (8014aec <rand+0x68>)
 8014a9e:	214e      	movs	r1, #78	; 0x4e
 8014aa0:	f7ff fac6 	bl	8014030 <__assert_func>
 8014aa4:	4a12      	ldr	r2, [pc, #72]	; (8014af0 <rand+0x6c>)
 8014aa6:	4b13      	ldr	r3, [pc, #76]	; (8014af4 <rand+0x70>)
 8014aa8:	e9c0 2300 	strd	r2, r3, [r0]
 8014aac:	4b12      	ldr	r3, [pc, #72]	; (8014af8 <rand+0x74>)
 8014aae:	6083      	str	r3, [r0, #8]
 8014ab0:	230b      	movs	r3, #11
 8014ab2:	8183      	strh	r3, [r0, #12]
 8014ab4:	2201      	movs	r2, #1
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014abc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014abe:	480f      	ldr	r0, [pc, #60]	; (8014afc <rand+0x78>)
 8014ac0:	690a      	ldr	r2, [r1, #16]
 8014ac2:	694b      	ldr	r3, [r1, #20]
 8014ac4:	4c0e      	ldr	r4, [pc, #56]	; (8014b00 <rand+0x7c>)
 8014ac6:	4350      	muls	r0, r2
 8014ac8:	fb04 0003 	mla	r0, r4, r3, r0
 8014acc:	fba2 3404 	umull	r3, r4, r2, r4
 8014ad0:	1c5a      	adds	r2, r3, #1
 8014ad2:	4404      	add	r4, r0
 8014ad4:	f144 0000 	adc.w	r0, r4, #0
 8014ad8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8014adc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014ae0:	bd10      	pop	{r4, pc}
 8014ae2:	bf00      	nop
 8014ae4:	20000034 	.word	0x20000034
 8014ae8:	0801830f 	.word	0x0801830f
 8014aec:	08018326 	.word	0x08018326
 8014af0:	abcd330e 	.word	0xabcd330e
 8014af4:	e66d1234 	.word	0xe66d1234
 8014af8:	0005deec 	.word	0x0005deec
 8014afc:	5851f42d 	.word	0x5851f42d
 8014b00:	4c957f2d 	.word	0x4c957f2d

08014b04 <cleanup_glue>:
 8014b04:	b538      	push	{r3, r4, r5, lr}
 8014b06:	460c      	mov	r4, r1
 8014b08:	6809      	ldr	r1, [r1, #0]
 8014b0a:	4605      	mov	r5, r0
 8014b0c:	b109      	cbz	r1, 8014b12 <cleanup_glue+0xe>
 8014b0e:	f7ff fff9 	bl	8014b04 <cleanup_glue>
 8014b12:	4621      	mov	r1, r4
 8014b14:	4628      	mov	r0, r5
 8014b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b1a:	f7ff bc03 	b.w	8014324 <_free_r>
	...

08014b20 <_reclaim_reent>:
 8014b20:	4b2c      	ldr	r3, [pc, #176]	; (8014bd4 <_reclaim_reent+0xb4>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	4283      	cmp	r3, r0
 8014b26:	b570      	push	{r4, r5, r6, lr}
 8014b28:	4604      	mov	r4, r0
 8014b2a:	d051      	beq.n	8014bd0 <_reclaim_reent+0xb0>
 8014b2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014b2e:	b143      	cbz	r3, 8014b42 <_reclaim_reent+0x22>
 8014b30:	68db      	ldr	r3, [r3, #12]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d14a      	bne.n	8014bcc <_reclaim_reent+0xac>
 8014b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b38:	6819      	ldr	r1, [r3, #0]
 8014b3a:	b111      	cbz	r1, 8014b42 <_reclaim_reent+0x22>
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f7ff fbf1 	bl	8014324 <_free_r>
 8014b42:	6961      	ldr	r1, [r4, #20]
 8014b44:	b111      	cbz	r1, 8014b4c <_reclaim_reent+0x2c>
 8014b46:	4620      	mov	r0, r4
 8014b48:	f7ff fbec 	bl	8014324 <_free_r>
 8014b4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014b4e:	b111      	cbz	r1, 8014b56 <_reclaim_reent+0x36>
 8014b50:	4620      	mov	r0, r4
 8014b52:	f7ff fbe7 	bl	8014324 <_free_r>
 8014b56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014b58:	b111      	cbz	r1, 8014b60 <_reclaim_reent+0x40>
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f7ff fbe2 	bl	8014324 <_free_r>
 8014b60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014b62:	b111      	cbz	r1, 8014b6a <_reclaim_reent+0x4a>
 8014b64:	4620      	mov	r0, r4
 8014b66:	f7ff fbdd 	bl	8014324 <_free_r>
 8014b6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014b6c:	b111      	cbz	r1, 8014b74 <_reclaim_reent+0x54>
 8014b6e:	4620      	mov	r0, r4
 8014b70:	f7ff fbd8 	bl	8014324 <_free_r>
 8014b74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014b76:	b111      	cbz	r1, 8014b7e <_reclaim_reent+0x5e>
 8014b78:	4620      	mov	r0, r4
 8014b7a:	f7ff fbd3 	bl	8014324 <_free_r>
 8014b7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014b80:	b111      	cbz	r1, 8014b88 <_reclaim_reent+0x68>
 8014b82:	4620      	mov	r0, r4
 8014b84:	f7ff fbce 	bl	8014324 <_free_r>
 8014b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b8a:	b111      	cbz	r1, 8014b92 <_reclaim_reent+0x72>
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	f7ff fbc9 	bl	8014324 <_free_r>
 8014b92:	69a3      	ldr	r3, [r4, #24]
 8014b94:	b1e3      	cbz	r3, 8014bd0 <_reclaim_reent+0xb0>
 8014b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014b98:	4620      	mov	r0, r4
 8014b9a:	4798      	blx	r3
 8014b9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014b9e:	b1b9      	cbz	r1, 8014bd0 <_reclaim_reent+0xb0>
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ba6:	f7ff bfad 	b.w	8014b04 <cleanup_glue>
 8014baa:	5949      	ldr	r1, [r1, r5]
 8014bac:	b941      	cbnz	r1, 8014bc0 <_reclaim_reent+0xa0>
 8014bae:	3504      	adds	r5, #4
 8014bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014bb2:	2d80      	cmp	r5, #128	; 0x80
 8014bb4:	68d9      	ldr	r1, [r3, #12]
 8014bb6:	d1f8      	bne.n	8014baa <_reclaim_reent+0x8a>
 8014bb8:	4620      	mov	r0, r4
 8014bba:	f7ff fbb3 	bl	8014324 <_free_r>
 8014bbe:	e7ba      	b.n	8014b36 <_reclaim_reent+0x16>
 8014bc0:	680e      	ldr	r6, [r1, #0]
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	f7ff fbae 	bl	8014324 <_free_r>
 8014bc8:	4631      	mov	r1, r6
 8014bca:	e7ef      	b.n	8014bac <_reclaim_reent+0x8c>
 8014bcc:	2500      	movs	r5, #0
 8014bce:	e7ef      	b.n	8014bb0 <_reclaim_reent+0x90>
 8014bd0:	bd70      	pop	{r4, r5, r6, pc}
 8014bd2:	bf00      	nop
 8014bd4:	20000034 	.word	0x20000034

08014bd8 <_sbrk_r>:
 8014bd8:	b538      	push	{r3, r4, r5, lr}
 8014bda:	4d06      	ldr	r5, [pc, #24]	; (8014bf4 <_sbrk_r+0x1c>)
 8014bdc:	2300      	movs	r3, #0
 8014bde:	4604      	mov	r4, r0
 8014be0:	4608      	mov	r0, r1
 8014be2:	602b      	str	r3, [r5, #0]
 8014be4:	f7ec f9cc 	bl	8000f80 <_sbrk>
 8014be8:	1c43      	adds	r3, r0, #1
 8014bea:	d102      	bne.n	8014bf2 <_sbrk_r+0x1a>
 8014bec:	682b      	ldr	r3, [r5, #0]
 8014bee:	b103      	cbz	r3, 8014bf2 <_sbrk_r+0x1a>
 8014bf0:	6023      	str	r3, [r4, #0]
 8014bf2:	bd38      	pop	{r3, r4, r5, pc}
 8014bf4:	20018e78 	.word	0x20018e78

08014bf8 <__sread>:
 8014bf8:	b510      	push	{r4, lr}
 8014bfa:	460c      	mov	r4, r1
 8014bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c00:	f000 fa6c 	bl	80150dc <_read_r>
 8014c04:	2800      	cmp	r0, #0
 8014c06:	bfab      	itete	ge
 8014c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8014c0c:	181b      	addge	r3, r3, r0
 8014c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c12:	bfac      	ite	ge
 8014c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8014c16:	81a3      	strhlt	r3, [r4, #12]
 8014c18:	bd10      	pop	{r4, pc}

08014c1a <__swrite>:
 8014c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c1e:	461f      	mov	r7, r3
 8014c20:	898b      	ldrh	r3, [r1, #12]
 8014c22:	05db      	lsls	r3, r3, #23
 8014c24:	4605      	mov	r5, r0
 8014c26:	460c      	mov	r4, r1
 8014c28:	4616      	mov	r6, r2
 8014c2a:	d505      	bpl.n	8014c38 <__swrite+0x1e>
 8014c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c30:	2302      	movs	r3, #2
 8014c32:	2200      	movs	r2, #0
 8014c34:	f000 f9d0 	bl	8014fd8 <_lseek_r>
 8014c38:	89a3      	ldrh	r3, [r4, #12]
 8014c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c42:	81a3      	strh	r3, [r4, #12]
 8014c44:	4632      	mov	r2, r6
 8014c46:	463b      	mov	r3, r7
 8014c48:	4628      	mov	r0, r5
 8014c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c4e:	f000 b869 	b.w	8014d24 <_write_r>

08014c52 <__sseek>:
 8014c52:	b510      	push	{r4, lr}
 8014c54:	460c      	mov	r4, r1
 8014c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c5a:	f000 f9bd 	bl	8014fd8 <_lseek_r>
 8014c5e:	1c43      	adds	r3, r0, #1
 8014c60:	89a3      	ldrh	r3, [r4, #12]
 8014c62:	bf15      	itete	ne
 8014c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c6e:	81a3      	strheq	r3, [r4, #12]
 8014c70:	bf18      	it	ne
 8014c72:	81a3      	strhne	r3, [r4, #12]
 8014c74:	bd10      	pop	{r4, pc}

08014c76 <__sclose>:
 8014c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c7a:	f000 b8db 	b.w	8014e34 <_close_r>
	...

08014c80 <__swbuf_r>:
 8014c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c82:	460e      	mov	r6, r1
 8014c84:	4614      	mov	r4, r2
 8014c86:	4605      	mov	r5, r0
 8014c88:	b118      	cbz	r0, 8014c92 <__swbuf_r+0x12>
 8014c8a:	6983      	ldr	r3, [r0, #24]
 8014c8c:	b90b      	cbnz	r3, 8014c92 <__swbuf_r+0x12>
 8014c8e:	f7ff fa45 	bl	801411c <__sinit>
 8014c92:	4b21      	ldr	r3, [pc, #132]	; (8014d18 <__swbuf_r+0x98>)
 8014c94:	429c      	cmp	r4, r3
 8014c96:	d12b      	bne.n	8014cf0 <__swbuf_r+0x70>
 8014c98:	686c      	ldr	r4, [r5, #4]
 8014c9a:	69a3      	ldr	r3, [r4, #24]
 8014c9c:	60a3      	str	r3, [r4, #8]
 8014c9e:	89a3      	ldrh	r3, [r4, #12]
 8014ca0:	071a      	lsls	r2, r3, #28
 8014ca2:	d52f      	bpl.n	8014d04 <__swbuf_r+0x84>
 8014ca4:	6923      	ldr	r3, [r4, #16]
 8014ca6:	b36b      	cbz	r3, 8014d04 <__swbuf_r+0x84>
 8014ca8:	6923      	ldr	r3, [r4, #16]
 8014caa:	6820      	ldr	r0, [r4, #0]
 8014cac:	1ac0      	subs	r0, r0, r3
 8014cae:	6963      	ldr	r3, [r4, #20]
 8014cb0:	b2f6      	uxtb	r6, r6
 8014cb2:	4283      	cmp	r3, r0
 8014cb4:	4637      	mov	r7, r6
 8014cb6:	dc04      	bgt.n	8014cc2 <__swbuf_r+0x42>
 8014cb8:	4621      	mov	r1, r4
 8014cba:	4628      	mov	r0, r5
 8014cbc:	f000 f950 	bl	8014f60 <_fflush_r>
 8014cc0:	bb30      	cbnz	r0, 8014d10 <__swbuf_r+0x90>
 8014cc2:	68a3      	ldr	r3, [r4, #8]
 8014cc4:	3b01      	subs	r3, #1
 8014cc6:	60a3      	str	r3, [r4, #8]
 8014cc8:	6823      	ldr	r3, [r4, #0]
 8014cca:	1c5a      	adds	r2, r3, #1
 8014ccc:	6022      	str	r2, [r4, #0]
 8014cce:	701e      	strb	r6, [r3, #0]
 8014cd0:	6963      	ldr	r3, [r4, #20]
 8014cd2:	3001      	adds	r0, #1
 8014cd4:	4283      	cmp	r3, r0
 8014cd6:	d004      	beq.n	8014ce2 <__swbuf_r+0x62>
 8014cd8:	89a3      	ldrh	r3, [r4, #12]
 8014cda:	07db      	lsls	r3, r3, #31
 8014cdc:	d506      	bpl.n	8014cec <__swbuf_r+0x6c>
 8014cde:	2e0a      	cmp	r6, #10
 8014ce0:	d104      	bne.n	8014cec <__swbuf_r+0x6c>
 8014ce2:	4621      	mov	r1, r4
 8014ce4:	4628      	mov	r0, r5
 8014ce6:	f000 f93b 	bl	8014f60 <_fflush_r>
 8014cea:	b988      	cbnz	r0, 8014d10 <__swbuf_r+0x90>
 8014cec:	4638      	mov	r0, r7
 8014cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cf0:	4b0a      	ldr	r3, [pc, #40]	; (8014d1c <__swbuf_r+0x9c>)
 8014cf2:	429c      	cmp	r4, r3
 8014cf4:	d101      	bne.n	8014cfa <__swbuf_r+0x7a>
 8014cf6:	68ac      	ldr	r4, [r5, #8]
 8014cf8:	e7cf      	b.n	8014c9a <__swbuf_r+0x1a>
 8014cfa:	4b09      	ldr	r3, [pc, #36]	; (8014d20 <__swbuf_r+0xa0>)
 8014cfc:	429c      	cmp	r4, r3
 8014cfe:	bf08      	it	eq
 8014d00:	68ec      	ldreq	r4, [r5, #12]
 8014d02:	e7ca      	b.n	8014c9a <__swbuf_r+0x1a>
 8014d04:	4621      	mov	r1, r4
 8014d06:	4628      	mov	r0, r5
 8014d08:	f000 f81e 	bl	8014d48 <__swsetup_r>
 8014d0c:	2800      	cmp	r0, #0
 8014d0e:	d0cb      	beq.n	8014ca8 <__swbuf_r+0x28>
 8014d10:	f04f 37ff 	mov.w	r7, #4294967295
 8014d14:	e7ea      	b.n	8014cec <__swbuf_r+0x6c>
 8014d16:	bf00      	nop
 8014d18:	08018298 	.word	0x08018298
 8014d1c:	080182b8 	.word	0x080182b8
 8014d20:	08018278 	.word	0x08018278

08014d24 <_write_r>:
 8014d24:	b538      	push	{r3, r4, r5, lr}
 8014d26:	4d07      	ldr	r5, [pc, #28]	; (8014d44 <_write_r+0x20>)
 8014d28:	4604      	mov	r4, r0
 8014d2a:	4608      	mov	r0, r1
 8014d2c:	4611      	mov	r1, r2
 8014d2e:	2200      	movs	r2, #0
 8014d30:	602a      	str	r2, [r5, #0]
 8014d32:	461a      	mov	r2, r3
 8014d34:	f7ff f960 	bl	8013ff8 <_write>
 8014d38:	1c43      	adds	r3, r0, #1
 8014d3a:	d102      	bne.n	8014d42 <_write_r+0x1e>
 8014d3c:	682b      	ldr	r3, [r5, #0]
 8014d3e:	b103      	cbz	r3, 8014d42 <_write_r+0x1e>
 8014d40:	6023      	str	r3, [r4, #0]
 8014d42:	bd38      	pop	{r3, r4, r5, pc}
 8014d44:	20018e78 	.word	0x20018e78

08014d48 <__swsetup_r>:
 8014d48:	4b32      	ldr	r3, [pc, #200]	; (8014e14 <__swsetup_r+0xcc>)
 8014d4a:	b570      	push	{r4, r5, r6, lr}
 8014d4c:	681d      	ldr	r5, [r3, #0]
 8014d4e:	4606      	mov	r6, r0
 8014d50:	460c      	mov	r4, r1
 8014d52:	b125      	cbz	r5, 8014d5e <__swsetup_r+0x16>
 8014d54:	69ab      	ldr	r3, [r5, #24]
 8014d56:	b913      	cbnz	r3, 8014d5e <__swsetup_r+0x16>
 8014d58:	4628      	mov	r0, r5
 8014d5a:	f7ff f9df 	bl	801411c <__sinit>
 8014d5e:	4b2e      	ldr	r3, [pc, #184]	; (8014e18 <__swsetup_r+0xd0>)
 8014d60:	429c      	cmp	r4, r3
 8014d62:	d10f      	bne.n	8014d84 <__swsetup_r+0x3c>
 8014d64:	686c      	ldr	r4, [r5, #4]
 8014d66:	89a3      	ldrh	r3, [r4, #12]
 8014d68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014d6c:	0719      	lsls	r1, r3, #28
 8014d6e:	d42c      	bmi.n	8014dca <__swsetup_r+0x82>
 8014d70:	06dd      	lsls	r5, r3, #27
 8014d72:	d411      	bmi.n	8014d98 <__swsetup_r+0x50>
 8014d74:	2309      	movs	r3, #9
 8014d76:	6033      	str	r3, [r6, #0]
 8014d78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014d7c:	81a3      	strh	r3, [r4, #12]
 8014d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8014d82:	e03e      	b.n	8014e02 <__swsetup_r+0xba>
 8014d84:	4b25      	ldr	r3, [pc, #148]	; (8014e1c <__swsetup_r+0xd4>)
 8014d86:	429c      	cmp	r4, r3
 8014d88:	d101      	bne.n	8014d8e <__swsetup_r+0x46>
 8014d8a:	68ac      	ldr	r4, [r5, #8]
 8014d8c:	e7eb      	b.n	8014d66 <__swsetup_r+0x1e>
 8014d8e:	4b24      	ldr	r3, [pc, #144]	; (8014e20 <__swsetup_r+0xd8>)
 8014d90:	429c      	cmp	r4, r3
 8014d92:	bf08      	it	eq
 8014d94:	68ec      	ldreq	r4, [r5, #12]
 8014d96:	e7e6      	b.n	8014d66 <__swsetup_r+0x1e>
 8014d98:	0758      	lsls	r0, r3, #29
 8014d9a:	d512      	bpl.n	8014dc2 <__swsetup_r+0x7a>
 8014d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d9e:	b141      	cbz	r1, 8014db2 <__swsetup_r+0x6a>
 8014da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014da4:	4299      	cmp	r1, r3
 8014da6:	d002      	beq.n	8014dae <__swsetup_r+0x66>
 8014da8:	4630      	mov	r0, r6
 8014daa:	f7ff fabb 	bl	8014324 <_free_r>
 8014dae:	2300      	movs	r3, #0
 8014db0:	6363      	str	r3, [r4, #52]	; 0x34
 8014db2:	89a3      	ldrh	r3, [r4, #12]
 8014db4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014db8:	81a3      	strh	r3, [r4, #12]
 8014dba:	2300      	movs	r3, #0
 8014dbc:	6063      	str	r3, [r4, #4]
 8014dbe:	6923      	ldr	r3, [r4, #16]
 8014dc0:	6023      	str	r3, [r4, #0]
 8014dc2:	89a3      	ldrh	r3, [r4, #12]
 8014dc4:	f043 0308 	orr.w	r3, r3, #8
 8014dc8:	81a3      	strh	r3, [r4, #12]
 8014dca:	6923      	ldr	r3, [r4, #16]
 8014dcc:	b94b      	cbnz	r3, 8014de2 <__swsetup_r+0x9a>
 8014dce:	89a3      	ldrh	r3, [r4, #12]
 8014dd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014dd8:	d003      	beq.n	8014de2 <__swsetup_r+0x9a>
 8014dda:	4621      	mov	r1, r4
 8014ddc:	4630      	mov	r0, r6
 8014dde:	f000 f931 	bl	8015044 <__smakebuf_r>
 8014de2:	89a0      	ldrh	r0, [r4, #12]
 8014de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014de8:	f010 0301 	ands.w	r3, r0, #1
 8014dec:	d00a      	beq.n	8014e04 <__swsetup_r+0xbc>
 8014dee:	2300      	movs	r3, #0
 8014df0:	60a3      	str	r3, [r4, #8]
 8014df2:	6963      	ldr	r3, [r4, #20]
 8014df4:	425b      	negs	r3, r3
 8014df6:	61a3      	str	r3, [r4, #24]
 8014df8:	6923      	ldr	r3, [r4, #16]
 8014dfa:	b943      	cbnz	r3, 8014e0e <__swsetup_r+0xc6>
 8014dfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014e00:	d1ba      	bne.n	8014d78 <__swsetup_r+0x30>
 8014e02:	bd70      	pop	{r4, r5, r6, pc}
 8014e04:	0781      	lsls	r1, r0, #30
 8014e06:	bf58      	it	pl
 8014e08:	6963      	ldrpl	r3, [r4, #20]
 8014e0a:	60a3      	str	r3, [r4, #8]
 8014e0c:	e7f4      	b.n	8014df8 <__swsetup_r+0xb0>
 8014e0e:	2000      	movs	r0, #0
 8014e10:	e7f7      	b.n	8014e02 <__swsetup_r+0xba>
 8014e12:	bf00      	nop
 8014e14:	20000034 	.word	0x20000034
 8014e18:	08018298 	.word	0x08018298
 8014e1c:	080182b8 	.word	0x080182b8
 8014e20:	08018278 	.word	0x08018278

08014e24 <abort>:
 8014e24:	b508      	push	{r3, lr}
 8014e26:	2006      	movs	r0, #6
 8014e28:	f000 f992 	bl	8015150 <raise>
 8014e2c:	2001      	movs	r0, #1
 8014e2e:	f7ec f869 	bl	8000f04 <_exit>
	...

08014e34 <_close_r>:
 8014e34:	b538      	push	{r3, r4, r5, lr}
 8014e36:	4d06      	ldr	r5, [pc, #24]	; (8014e50 <_close_r+0x1c>)
 8014e38:	2300      	movs	r3, #0
 8014e3a:	4604      	mov	r4, r0
 8014e3c:	4608      	mov	r0, r1
 8014e3e:	602b      	str	r3, [r5, #0]
 8014e40:	f7ec f86a 	bl	8000f18 <_close>
 8014e44:	1c43      	adds	r3, r0, #1
 8014e46:	d102      	bne.n	8014e4e <_close_r+0x1a>
 8014e48:	682b      	ldr	r3, [r5, #0]
 8014e4a:	b103      	cbz	r3, 8014e4e <_close_r+0x1a>
 8014e4c:	6023      	str	r3, [r4, #0]
 8014e4e:	bd38      	pop	{r3, r4, r5, pc}
 8014e50:	20018e78 	.word	0x20018e78

08014e54 <__sflush_r>:
 8014e54:	898a      	ldrh	r2, [r1, #12]
 8014e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e5a:	4605      	mov	r5, r0
 8014e5c:	0710      	lsls	r0, r2, #28
 8014e5e:	460c      	mov	r4, r1
 8014e60:	d458      	bmi.n	8014f14 <__sflush_r+0xc0>
 8014e62:	684b      	ldr	r3, [r1, #4]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	dc05      	bgt.n	8014e74 <__sflush_r+0x20>
 8014e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	dc02      	bgt.n	8014e74 <__sflush_r+0x20>
 8014e6e:	2000      	movs	r0, #0
 8014e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014e76:	2e00      	cmp	r6, #0
 8014e78:	d0f9      	beq.n	8014e6e <__sflush_r+0x1a>
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014e80:	682f      	ldr	r7, [r5, #0]
 8014e82:	602b      	str	r3, [r5, #0]
 8014e84:	d032      	beq.n	8014eec <__sflush_r+0x98>
 8014e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014e88:	89a3      	ldrh	r3, [r4, #12]
 8014e8a:	075a      	lsls	r2, r3, #29
 8014e8c:	d505      	bpl.n	8014e9a <__sflush_r+0x46>
 8014e8e:	6863      	ldr	r3, [r4, #4]
 8014e90:	1ac0      	subs	r0, r0, r3
 8014e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e94:	b10b      	cbz	r3, 8014e9a <__sflush_r+0x46>
 8014e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014e98:	1ac0      	subs	r0, r0, r3
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	4602      	mov	r2, r0
 8014e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ea0:	6a21      	ldr	r1, [r4, #32]
 8014ea2:	4628      	mov	r0, r5
 8014ea4:	47b0      	blx	r6
 8014ea6:	1c43      	adds	r3, r0, #1
 8014ea8:	89a3      	ldrh	r3, [r4, #12]
 8014eaa:	d106      	bne.n	8014eba <__sflush_r+0x66>
 8014eac:	6829      	ldr	r1, [r5, #0]
 8014eae:	291d      	cmp	r1, #29
 8014eb0:	d82c      	bhi.n	8014f0c <__sflush_r+0xb8>
 8014eb2:	4a2a      	ldr	r2, [pc, #168]	; (8014f5c <__sflush_r+0x108>)
 8014eb4:	40ca      	lsrs	r2, r1
 8014eb6:	07d6      	lsls	r6, r2, #31
 8014eb8:	d528      	bpl.n	8014f0c <__sflush_r+0xb8>
 8014eba:	2200      	movs	r2, #0
 8014ebc:	6062      	str	r2, [r4, #4]
 8014ebe:	04d9      	lsls	r1, r3, #19
 8014ec0:	6922      	ldr	r2, [r4, #16]
 8014ec2:	6022      	str	r2, [r4, #0]
 8014ec4:	d504      	bpl.n	8014ed0 <__sflush_r+0x7c>
 8014ec6:	1c42      	adds	r2, r0, #1
 8014ec8:	d101      	bne.n	8014ece <__sflush_r+0x7a>
 8014eca:	682b      	ldr	r3, [r5, #0]
 8014ecc:	b903      	cbnz	r3, 8014ed0 <__sflush_r+0x7c>
 8014ece:	6560      	str	r0, [r4, #84]	; 0x54
 8014ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ed2:	602f      	str	r7, [r5, #0]
 8014ed4:	2900      	cmp	r1, #0
 8014ed6:	d0ca      	beq.n	8014e6e <__sflush_r+0x1a>
 8014ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014edc:	4299      	cmp	r1, r3
 8014ede:	d002      	beq.n	8014ee6 <__sflush_r+0x92>
 8014ee0:	4628      	mov	r0, r5
 8014ee2:	f7ff fa1f 	bl	8014324 <_free_r>
 8014ee6:	2000      	movs	r0, #0
 8014ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8014eea:	e7c1      	b.n	8014e70 <__sflush_r+0x1c>
 8014eec:	6a21      	ldr	r1, [r4, #32]
 8014eee:	2301      	movs	r3, #1
 8014ef0:	4628      	mov	r0, r5
 8014ef2:	47b0      	blx	r6
 8014ef4:	1c41      	adds	r1, r0, #1
 8014ef6:	d1c7      	bne.n	8014e88 <__sflush_r+0x34>
 8014ef8:	682b      	ldr	r3, [r5, #0]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d0c4      	beq.n	8014e88 <__sflush_r+0x34>
 8014efe:	2b1d      	cmp	r3, #29
 8014f00:	d001      	beq.n	8014f06 <__sflush_r+0xb2>
 8014f02:	2b16      	cmp	r3, #22
 8014f04:	d101      	bne.n	8014f0a <__sflush_r+0xb6>
 8014f06:	602f      	str	r7, [r5, #0]
 8014f08:	e7b1      	b.n	8014e6e <__sflush_r+0x1a>
 8014f0a:	89a3      	ldrh	r3, [r4, #12]
 8014f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f10:	81a3      	strh	r3, [r4, #12]
 8014f12:	e7ad      	b.n	8014e70 <__sflush_r+0x1c>
 8014f14:	690f      	ldr	r7, [r1, #16]
 8014f16:	2f00      	cmp	r7, #0
 8014f18:	d0a9      	beq.n	8014e6e <__sflush_r+0x1a>
 8014f1a:	0793      	lsls	r3, r2, #30
 8014f1c:	680e      	ldr	r6, [r1, #0]
 8014f1e:	bf08      	it	eq
 8014f20:	694b      	ldreq	r3, [r1, #20]
 8014f22:	600f      	str	r7, [r1, #0]
 8014f24:	bf18      	it	ne
 8014f26:	2300      	movne	r3, #0
 8014f28:	eba6 0807 	sub.w	r8, r6, r7
 8014f2c:	608b      	str	r3, [r1, #8]
 8014f2e:	f1b8 0f00 	cmp.w	r8, #0
 8014f32:	dd9c      	ble.n	8014e6e <__sflush_r+0x1a>
 8014f34:	6a21      	ldr	r1, [r4, #32]
 8014f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014f38:	4643      	mov	r3, r8
 8014f3a:	463a      	mov	r2, r7
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	47b0      	blx	r6
 8014f40:	2800      	cmp	r0, #0
 8014f42:	dc06      	bgt.n	8014f52 <__sflush_r+0xfe>
 8014f44:	89a3      	ldrh	r3, [r4, #12]
 8014f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f4a:	81a3      	strh	r3, [r4, #12]
 8014f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f50:	e78e      	b.n	8014e70 <__sflush_r+0x1c>
 8014f52:	4407      	add	r7, r0
 8014f54:	eba8 0800 	sub.w	r8, r8, r0
 8014f58:	e7e9      	b.n	8014f2e <__sflush_r+0xda>
 8014f5a:	bf00      	nop
 8014f5c:	20400001 	.word	0x20400001

08014f60 <_fflush_r>:
 8014f60:	b538      	push	{r3, r4, r5, lr}
 8014f62:	690b      	ldr	r3, [r1, #16]
 8014f64:	4605      	mov	r5, r0
 8014f66:	460c      	mov	r4, r1
 8014f68:	b913      	cbnz	r3, 8014f70 <_fflush_r+0x10>
 8014f6a:	2500      	movs	r5, #0
 8014f6c:	4628      	mov	r0, r5
 8014f6e:	bd38      	pop	{r3, r4, r5, pc}
 8014f70:	b118      	cbz	r0, 8014f7a <_fflush_r+0x1a>
 8014f72:	6983      	ldr	r3, [r0, #24]
 8014f74:	b90b      	cbnz	r3, 8014f7a <_fflush_r+0x1a>
 8014f76:	f7ff f8d1 	bl	801411c <__sinit>
 8014f7a:	4b14      	ldr	r3, [pc, #80]	; (8014fcc <_fflush_r+0x6c>)
 8014f7c:	429c      	cmp	r4, r3
 8014f7e:	d11b      	bne.n	8014fb8 <_fflush_r+0x58>
 8014f80:	686c      	ldr	r4, [r5, #4]
 8014f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d0ef      	beq.n	8014f6a <_fflush_r+0xa>
 8014f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014f8c:	07d0      	lsls	r0, r2, #31
 8014f8e:	d404      	bmi.n	8014f9a <_fflush_r+0x3a>
 8014f90:	0599      	lsls	r1, r3, #22
 8014f92:	d402      	bmi.n	8014f9a <_fflush_r+0x3a>
 8014f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014f96:	f7ff f996 	bl	80142c6 <__retarget_lock_acquire_recursive>
 8014f9a:	4628      	mov	r0, r5
 8014f9c:	4621      	mov	r1, r4
 8014f9e:	f7ff ff59 	bl	8014e54 <__sflush_r>
 8014fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014fa4:	07da      	lsls	r2, r3, #31
 8014fa6:	4605      	mov	r5, r0
 8014fa8:	d4e0      	bmi.n	8014f6c <_fflush_r+0xc>
 8014faa:	89a3      	ldrh	r3, [r4, #12]
 8014fac:	059b      	lsls	r3, r3, #22
 8014fae:	d4dd      	bmi.n	8014f6c <_fflush_r+0xc>
 8014fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fb2:	f7ff f989 	bl	80142c8 <__retarget_lock_release_recursive>
 8014fb6:	e7d9      	b.n	8014f6c <_fflush_r+0xc>
 8014fb8:	4b05      	ldr	r3, [pc, #20]	; (8014fd0 <_fflush_r+0x70>)
 8014fba:	429c      	cmp	r4, r3
 8014fbc:	d101      	bne.n	8014fc2 <_fflush_r+0x62>
 8014fbe:	68ac      	ldr	r4, [r5, #8]
 8014fc0:	e7df      	b.n	8014f82 <_fflush_r+0x22>
 8014fc2:	4b04      	ldr	r3, [pc, #16]	; (8014fd4 <_fflush_r+0x74>)
 8014fc4:	429c      	cmp	r4, r3
 8014fc6:	bf08      	it	eq
 8014fc8:	68ec      	ldreq	r4, [r5, #12]
 8014fca:	e7da      	b.n	8014f82 <_fflush_r+0x22>
 8014fcc:	08018298 	.word	0x08018298
 8014fd0:	080182b8 	.word	0x080182b8
 8014fd4:	08018278 	.word	0x08018278

08014fd8 <_lseek_r>:
 8014fd8:	b538      	push	{r3, r4, r5, lr}
 8014fda:	4d07      	ldr	r5, [pc, #28]	; (8014ff8 <_lseek_r+0x20>)
 8014fdc:	4604      	mov	r4, r0
 8014fde:	4608      	mov	r0, r1
 8014fe0:	4611      	mov	r1, r2
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	602a      	str	r2, [r5, #0]
 8014fe6:	461a      	mov	r2, r3
 8014fe8:	f7eb ffbd 	bl	8000f66 <_lseek>
 8014fec:	1c43      	adds	r3, r0, #1
 8014fee:	d102      	bne.n	8014ff6 <_lseek_r+0x1e>
 8014ff0:	682b      	ldr	r3, [r5, #0]
 8014ff2:	b103      	cbz	r3, 8014ff6 <_lseek_r+0x1e>
 8014ff4:	6023      	str	r3, [r4, #0]
 8014ff6:	bd38      	pop	{r3, r4, r5, pc}
 8014ff8:	20018e78 	.word	0x20018e78

08014ffc <__swhatbuf_r>:
 8014ffc:	b570      	push	{r4, r5, r6, lr}
 8014ffe:	460e      	mov	r6, r1
 8015000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015004:	2900      	cmp	r1, #0
 8015006:	b096      	sub	sp, #88	; 0x58
 8015008:	4614      	mov	r4, r2
 801500a:	461d      	mov	r5, r3
 801500c:	da07      	bge.n	801501e <__swhatbuf_r+0x22>
 801500e:	2300      	movs	r3, #0
 8015010:	602b      	str	r3, [r5, #0]
 8015012:	89b3      	ldrh	r3, [r6, #12]
 8015014:	061a      	lsls	r2, r3, #24
 8015016:	d410      	bmi.n	801503a <__swhatbuf_r+0x3e>
 8015018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801501c:	e00e      	b.n	801503c <__swhatbuf_r+0x40>
 801501e:	466a      	mov	r2, sp
 8015020:	f000 f8b2 	bl	8015188 <_fstat_r>
 8015024:	2800      	cmp	r0, #0
 8015026:	dbf2      	blt.n	801500e <__swhatbuf_r+0x12>
 8015028:	9a01      	ldr	r2, [sp, #4]
 801502a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801502e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015032:	425a      	negs	r2, r3
 8015034:	415a      	adcs	r2, r3
 8015036:	602a      	str	r2, [r5, #0]
 8015038:	e7ee      	b.n	8015018 <__swhatbuf_r+0x1c>
 801503a:	2340      	movs	r3, #64	; 0x40
 801503c:	2000      	movs	r0, #0
 801503e:	6023      	str	r3, [r4, #0]
 8015040:	b016      	add	sp, #88	; 0x58
 8015042:	bd70      	pop	{r4, r5, r6, pc}

08015044 <__smakebuf_r>:
 8015044:	898b      	ldrh	r3, [r1, #12]
 8015046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015048:	079d      	lsls	r5, r3, #30
 801504a:	4606      	mov	r6, r0
 801504c:	460c      	mov	r4, r1
 801504e:	d507      	bpl.n	8015060 <__smakebuf_r+0x1c>
 8015050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015054:	6023      	str	r3, [r4, #0]
 8015056:	6123      	str	r3, [r4, #16]
 8015058:	2301      	movs	r3, #1
 801505a:	6163      	str	r3, [r4, #20]
 801505c:	b002      	add	sp, #8
 801505e:	bd70      	pop	{r4, r5, r6, pc}
 8015060:	ab01      	add	r3, sp, #4
 8015062:	466a      	mov	r2, sp
 8015064:	f7ff ffca 	bl	8014ffc <__swhatbuf_r>
 8015068:	9900      	ldr	r1, [sp, #0]
 801506a:	4605      	mov	r5, r0
 801506c:	4630      	mov	r0, r6
 801506e:	f7ff f9a9 	bl	80143c4 <_malloc_r>
 8015072:	b948      	cbnz	r0, 8015088 <__smakebuf_r+0x44>
 8015074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015078:	059a      	lsls	r2, r3, #22
 801507a:	d4ef      	bmi.n	801505c <__smakebuf_r+0x18>
 801507c:	f023 0303 	bic.w	r3, r3, #3
 8015080:	f043 0302 	orr.w	r3, r3, #2
 8015084:	81a3      	strh	r3, [r4, #12]
 8015086:	e7e3      	b.n	8015050 <__smakebuf_r+0xc>
 8015088:	4b0d      	ldr	r3, [pc, #52]	; (80150c0 <__smakebuf_r+0x7c>)
 801508a:	62b3      	str	r3, [r6, #40]	; 0x28
 801508c:	89a3      	ldrh	r3, [r4, #12]
 801508e:	6020      	str	r0, [r4, #0]
 8015090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015094:	81a3      	strh	r3, [r4, #12]
 8015096:	9b00      	ldr	r3, [sp, #0]
 8015098:	6163      	str	r3, [r4, #20]
 801509a:	9b01      	ldr	r3, [sp, #4]
 801509c:	6120      	str	r0, [r4, #16]
 801509e:	b15b      	cbz	r3, 80150b8 <__smakebuf_r+0x74>
 80150a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150a4:	4630      	mov	r0, r6
 80150a6:	f000 f881 	bl	80151ac <_isatty_r>
 80150aa:	b128      	cbz	r0, 80150b8 <__smakebuf_r+0x74>
 80150ac:	89a3      	ldrh	r3, [r4, #12]
 80150ae:	f023 0303 	bic.w	r3, r3, #3
 80150b2:	f043 0301 	orr.w	r3, r3, #1
 80150b6:	81a3      	strh	r3, [r4, #12]
 80150b8:	89a0      	ldrh	r0, [r4, #12]
 80150ba:	4305      	orrs	r5, r0
 80150bc:	81a5      	strh	r5, [r4, #12]
 80150be:	e7cd      	b.n	801505c <__smakebuf_r+0x18>
 80150c0:	080140b5 	.word	0x080140b5

080150c4 <__malloc_lock>:
 80150c4:	4801      	ldr	r0, [pc, #4]	; (80150cc <__malloc_lock+0x8>)
 80150c6:	f7ff b8fe 	b.w	80142c6 <__retarget_lock_acquire_recursive>
 80150ca:	bf00      	nop
 80150cc:	20018e70 	.word	0x20018e70

080150d0 <__malloc_unlock>:
 80150d0:	4801      	ldr	r0, [pc, #4]	; (80150d8 <__malloc_unlock+0x8>)
 80150d2:	f7ff b8f9 	b.w	80142c8 <__retarget_lock_release_recursive>
 80150d6:	bf00      	nop
 80150d8:	20018e70 	.word	0x20018e70

080150dc <_read_r>:
 80150dc:	b538      	push	{r3, r4, r5, lr}
 80150de:	4d07      	ldr	r5, [pc, #28]	; (80150fc <_read_r+0x20>)
 80150e0:	4604      	mov	r4, r0
 80150e2:	4608      	mov	r0, r1
 80150e4:	4611      	mov	r1, r2
 80150e6:	2200      	movs	r2, #0
 80150e8:	602a      	str	r2, [r5, #0]
 80150ea:	461a      	mov	r2, r3
 80150ec:	f7fe ff68 	bl	8013fc0 <_read>
 80150f0:	1c43      	adds	r3, r0, #1
 80150f2:	d102      	bne.n	80150fa <_read_r+0x1e>
 80150f4:	682b      	ldr	r3, [r5, #0]
 80150f6:	b103      	cbz	r3, 80150fa <_read_r+0x1e>
 80150f8:	6023      	str	r3, [r4, #0]
 80150fa:	bd38      	pop	{r3, r4, r5, pc}
 80150fc:	20018e78 	.word	0x20018e78

08015100 <_raise_r>:
 8015100:	291f      	cmp	r1, #31
 8015102:	b538      	push	{r3, r4, r5, lr}
 8015104:	4604      	mov	r4, r0
 8015106:	460d      	mov	r5, r1
 8015108:	d904      	bls.n	8015114 <_raise_r+0x14>
 801510a:	2316      	movs	r3, #22
 801510c:	6003      	str	r3, [r0, #0]
 801510e:	f04f 30ff 	mov.w	r0, #4294967295
 8015112:	bd38      	pop	{r3, r4, r5, pc}
 8015114:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8015116:	b112      	cbz	r2, 801511e <_raise_r+0x1e>
 8015118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801511c:	b94b      	cbnz	r3, 8015132 <_raise_r+0x32>
 801511e:	4620      	mov	r0, r4
 8015120:	f000 f830 	bl	8015184 <_getpid_r>
 8015124:	462a      	mov	r2, r5
 8015126:	4601      	mov	r1, r0
 8015128:	4620      	mov	r0, r4
 801512a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801512e:	f000 b817 	b.w	8015160 <_kill_r>
 8015132:	2b01      	cmp	r3, #1
 8015134:	d00a      	beq.n	801514c <_raise_r+0x4c>
 8015136:	1c59      	adds	r1, r3, #1
 8015138:	d103      	bne.n	8015142 <_raise_r+0x42>
 801513a:	2316      	movs	r3, #22
 801513c:	6003      	str	r3, [r0, #0]
 801513e:	2001      	movs	r0, #1
 8015140:	e7e7      	b.n	8015112 <_raise_r+0x12>
 8015142:	2400      	movs	r4, #0
 8015144:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015148:	4628      	mov	r0, r5
 801514a:	4798      	blx	r3
 801514c:	2000      	movs	r0, #0
 801514e:	e7e0      	b.n	8015112 <_raise_r+0x12>

08015150 <raise>:
 8015150:	4b02      	ldr	r3, [pc, #8]	; (801515c <raise+0xc>)
 8015152:	4601      	mov	r1, r0
 8015154:	6818      	ldr	r0, [r3, #0]
 8015156:	f7ff bfd3 	b.w	8015100 <_raise_r>
 801515a:	bf00      	nop
 801515c:	20000034 	.word	0x20000034

08015160 <_kill_r>:
 8015160:	b538      	push	{r3, r4, r5, lr}
 8015162:	4d07      	ldr	r5, [pc, #28]	; (8015180 <_kill_r+0x20>)
 8015164:	2300      	movs	r3, #0
 8015166:	4604      	mov	r4, r0
 8015168:	4608      	mov	r0, r1
 801516a:	4611      	mov	r1, r2
 801516c:	602b      	str	r3, [r5, #0]
 801516e:	f7eb feb7 	bl	8000ee0 <_kill>
 8015172:	1c43      	adds	r3, r0, #1
 8015174:	d102      	bne.n	801517c <_kill_r+0x1c>
 8015176:	682b      	ldr	r3, [r5, #0]
 8015178:	b103      	cbz	r3, 801517c <_kill_r+0x1c>
 801517a:	6023      	str	r3, [r4, #0]
 801517c:	bd38      	pop	{r3, r4, r5, pc}
 801517e:	bf00      	nop
 8015180:	20018e78 	.word	0x20018e78

08015184 <_getpid_r>:
 8015184:	f7eb bea4 	b.w	8000ed0 <_getpid>

08015188 <_fstat_r>:
 8015188:	b538      	push	{r3, r4, r5, lr}
 801518a:	4d07      	ldr	r5, [pc, #28]	; (80151a8 <_fstat_r+0x20>)
 801518c:	2300      	movs	r3, #0
 801518e:	4604      	mov	r4, r0
 8015190:	4608      	mov	r0, r1
 8015192:	4611      	mov	r1, r2
 8015194:	602b      	str	r3, [r5, #0]
 8015196:	f7eb fecb 	bl	8000f30 <_fstat>
 801519a:	1c43      	adds	r3, r0, #1
 801519c:	d102      	bne.n	80151a4 <_fstat_r+0x1c>
 801519e:	682b      	ldr	r3, [r5, #0]
 80151a0:	b103      	cbz	r3, 80151a4 <_fstat_r+0x1c>
 80151a2:	6023      	str	r3, [r4, #0]
 80151a4:	bd38      	pop	{r3, r4, r5, pc}
 80151a6:	bf00      	nop
 80151a8:	20018e78 	.word	0x20018e78

080151ac <_isatty_r>:
 80151ac:	b538      	push	{r3, r4, r5, lr}
 80151ae:	4d06      	ldr	r5, [pc, #24]	; (80151c8 <_isatty_r+0x1c>)
 80151b0:	2300      	movs	r3, #0
 80151b2:	4604      	mov	r4, r0
 80151b4:	4608      	mov	r0, r1
 80151b6:	602b      	str	r3, [r5, #0]
 80151b8:	f7eb feca 	bl	8000f50 <_isatty>
 80151bc:	1c43      	adds	r3, r0, #1
 80151be:	d102      	bne.n	80151c6 <_isatty_r+0x1a>
 80151c0:	682b      	ldr	r3, [r5, #0]
 80151c2:	b103      	cbz	r3, 80151c6 <_isatty_r+0x1a>
 80151c4:	6023      	str	r3, [r4, #0]
 80151c6:	bd38      	pop	{r3, r4, r5, pc}
 80151c8:	20018e78 	.word	0x20018e78

080151cc <_init>:
 80151cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ce:	bf00      	nop
 80151d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151d2:	bc08      	pop	{r3}
 80151d4:	469e      	mov	lr, r3
 80151d6:	4770      	bx	lr

080151d8 <_fini>:
 80151d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151da:	bf00      	nop
 80151dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151de:	bc08      	pop	{r3}
 80151e0:	469e      	mov	lr, r3
 80151e2:	4770      	bx	lr
